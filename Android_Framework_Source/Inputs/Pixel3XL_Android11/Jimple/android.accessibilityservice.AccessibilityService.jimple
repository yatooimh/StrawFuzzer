public abstract class android.accessibilityservice.AccessibilityService extends android.app.Service
{
    public static final int ACCESSIBILITY_TAKE_SCREENSHOT_REQUEST_INTERVAL_TIMES_MS;
    public static final int ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR;
    public static final int ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT;
    public static final int ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY;
    public static final int ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS;
    public static final int GESTURE_2_FINGER_DOUBLE_TAP;
    public static final int GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD;
    public static final int GESTURE_2_FINGER_SINGLE_TAP;
    public static final int GESTURE_2_FINGER_SWIPE_DOWN;
    public static final int GESTURE_2_FINGER_SWIPE_LEFT;
    public static final int GESTURE_2_FINGER_SWIPE_RIGHT;
    public static final int GESTURE_2_FINGER_SWIPE_UP;
    public static final int GESTURE_2_FINGER_TRIPLE_TAP;
    public static final int GESTURE_3_FINGER_DOUBLE_TAP;
    public static final int GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD;
    public static final int GESTURE_3_FINGER_SINGLE_TAP;
    public static final int GESTURE_3_FINGER_SWIPE_DOWN;
    public static final int GESTURE_3_FINGER_SWIPE_LEFT;
    public static final int GESTURE_3_FINGER_SWIPE_RIGHT;
    public static final int GESTURE_3_FINGER_SWIPE_UP;
    public static final int GESTURE_3_FINGER_TRIPLE_TAP;
    public static final int GESTURE_4_FINGER_DOUBLE_TAP;
    public static final int GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD;
    public static final int GESTURE_4_FINGER_SINGLE_TAP;
    public static final int GESTURE_4_FINGER_SWIPE_DOWN;
    public static final int GESTURE_4_FINGER_SWIPE_LEFT;
    public static final int GESTURE_4_FINGER_SWIPE_RIGHT;
    public static final int GESTURE_4_FINGER_SWIPE_UP;
    public static final int GESTURE_4_FINGER_TRIPLE_TAP;
    public static final int GESTURE_DOUBLE_TAP;
    public static final int GESTURE_DOUBLE_TAP_AND_HOLD;
    public static final int GESTURE_SWIPE_DOWN;
    public static final int GESTURE_SWIPE_DOWN_AND_LEFT;
    public static final int GESTURE_SWIPE_DOWN_AND_RIGHT;
    public static final int GESTURE_SWIPE_DOWN_AND_UP;
    public static final int GESTURE_SWIPE_LEFT;
    public static final int GESTURE_SWIPE_LEFT_AND_DOWN;
    public static final int GESTURE_SWIPE_LEFT_AND_RIGHT;
    public static final int GESTURE_SWIPE_LEFT_AND_UP;
    public static final int GESTURE_SWIPE_RIGHT;
    public static final int GESTURE_SWIPE_RIGHT_AND_DOWN;
    public static final int GESTURE_SWIPE_RIGHT_AND_LEFT;
    public static final int GESTURE_SWIPE_RIGHT_AND_UP;
    public static final int GESTURE_SWIPE_UP;
    public static final int GESTURE_SWIPE_UP_AND_DOWN;
    public static final int GESTURE_SWIPE_UP_AND_LEFT;
    public static final int GESTURE_SWIPE_UP_AND_RIGHT;
    public static final int GLOBAL_ACTION_ACCESSIBILITY_ALL_APPS;
    public static final int GLOBAL_ACTION_ACCESSIBILITY_BUTTON;
    public static final int GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSER;
    public static final int GLOBAL_ACTION_ACCESSIBILITY_SHORTCUT;
    public static final int GLOBAL_ACTION_BACK;
    public static final int GLOBAL_ACTION_HOME;
    public static final int GLOBAL_ACTION_KEYCODE_HEADSETHOOK;
    public static final int GLOBAL_ACTION_LOCK_SCREEN;
    public static final int GLOBAL_ACTION_NOTIFICATIONS;
    public static final int GLOBAL_ACTION_POWER_DIALOG;
    public static final int GLOBAL_ACTION_QUICK_SETTINGS;
    public static final int GLOBAL_ACTION_RECENTS;
    public static final int GLOBAL_ACTION_TAKE_SCREENSHOT;
    public static final int GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN;
    public static final java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_COLORSPACE;
    public static final java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_HARDWAREBUFFER;
    public static final java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_STATUS;
    public static final java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_TIMESTAMP;
    private static final java.lang.String LOG_TAG;
    public static final java.lang.String SERVICE_INTERFACE;
    public static final java.lang.String SERVICE_META_DATA;
    public static final int SHOW_MODE_AUTO;
    public static final int SHOW_MODE_HARD_KEYBOARD_ORIGINAL_VALUE;
    public static final int SHOW_MODE_HARD_KEYBOARD_OVERRIDDEN;
    public static final int SHOW_MODE_HIDDEN;
    public static final int SHOW_MODE_IGNORE_HARD_KEYBOARD;
    public static final int SHOW_MODE_MASK;
    public static final int TAKE_SCREENSHOT_SUCCESS;
    private final android.util.SparseArray mAccessibilityButtonControllers;
    private int mConnectionId;
    private android.accessibilityservice.FingerprintGestureController mFingerprintGestureController;
    private android.util.SparseArray mGestureStatusCallbackInfos;
    private int mGestureStatusCallbackSequence;
    private android.accessibilityservice.AccessibilityServiceInfo mInfo;
    private final java.lang.Object mLock;
    private final android.util.SparseArray mMagnificationControllers;
    private android.accessibilityservice.AccessibilityService$SoftKeyboardController mSoftKeyboardController;
    private android.view.WindowManager mWindowManager;
    private android.os.IBinder mWindowToken;

    public void <init>()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.util.SparseArray $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        r0.<android.accessibilityservice.AccessibilityService: int mConnectionId> = -1;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>(int)>(0);

        r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mMagnificationControllers> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>(int)>(0);

        r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mAccessibilityButtonControllers> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock> = $r3;

        return;
    }

    static int access$000(android.accessibilityservice.AccessibilityService)
    {
        android.accessibilityservice.AccessibilityService r0;
        int $i0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        return $i0;
    }

    static int access$002(android.accessibilityservice.AccessibilityService, int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        i0 := @parameter1: int;

        r0.<android.accessibilityservice.AccessibilityService: int mConnectionId> = i0;

        return i0;
    }

    static void access$100(android.accessibilityservice.AccessibilityService)
    {
        android.accessibilityservice.AccessibilityService r0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void dispatchServiceConnected()>();

        return;
    }

    static android.os.IBinder access$202(android.accessibilityservice.AccessibilityService, android.os.IBinder)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.os.IBinder r1;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        r1 := @parameter1: android.os.IBinder;

        r0.<android.accessibilityservice.AccessibilityService: android.os.IBinder mWindowToken> = r1;

        return r1;
    }

    static void access$300(android.accessibilityservice.AccessibilityService, int, android.graphics.Region, float, float, float)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        android.graphics.Region r1;
        float f0, f1, f2;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Region;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void onMagnificationChanged(int,android.graphics.Region,float,float,float)>(i0, r1, f0, f1, f2);

        return;
    }

    static void access$400(android.accessibilityservice.AccessibilityService, int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        i0 := @parameter1: int;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void onSoftKeyboardShowModeChanged(int)>(i0);

        return;
    }

    static void access$500(android.accessibilityservice.AccessibilityService, boolean)
    {
        android.accessibilityservice.AccessibilityService r0;
        boolean z0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void onFingerprintCapturingGesturesChanged(boolean)>(z0);

        return;
    }

    static void access$600(android.accessibilityservice.AccessibilityService, int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        i0 := @parameter1: int;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void onFingerprintGesture(int)>(i0);

        return;
    }

    static void access$700(android.accessibilityservice.AccessibilityService, int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        i0 := @parameter1: int;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void onAccessibilityButtonClicked(int)>(i0);

        return;
    }

    static void access$800(android.accessibilityservice.AccessibilityService, boolean)
    {
        android.accessibilityservice.AccessibilityService r0;
        boolean z0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void onAccessibilityButtonAvailabilityChanged(boolean)>(z0);

        return;
    }

    private void dispatchServiceConnected()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.util.SparseArray $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4, r7;
        android.accessibilityservice.AccessibilityService$MagnificationController $r5;
        java.lang.Throwable $r6;
        android.accessibilityservice.AccessibilityService$SoftKeyboardController r8;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r7 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r7;

        i1 = 0;

     label1:
        $r2 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mMagnificationControllers>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mMagnificationControllers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r5 = (android.accessibilityservice.AccessibilityService$MagnificationController) $r4;

        virtualinvoke $r5.<android.accessibilityservice.AccessibilityService$MagnificationController: void onServiceConnectedLocked()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        exitmonitor r7;

     label4:
        r8 = r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController mSoftKeyboardController>;

        if r8 == null goto label5;

        virtualinvoke r8.<android.accessibilityservice.AccessibilityService$SoftKeyboardController: void onServiceConnected()>();

     label5:
        virtualinvoke r0.<android.accessibilityservice.AccessibilityService: void onServiceConnected()>();

        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r7;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static void lambda$sendScreenshotFailure$2(android.accessibilityservice.AccessibilityService$TakeScreenshotCallback, int)
    {
        android.accessibilityservice.AccessibilityService$TakeScreenshotCallback r0;
        int i0;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService$TakeScreenshotCallback;

        i0 := @parameter1: int;

        interfaceinvoke r0.<android.accessibilityservice.AccessibilityService$TakeScreenshotCallback: void onFailure(int)>(i0);

        return;
    }

    static void lambda$sendScreenshotSuccess$1(android.accessibilityservice.AccessibilityService$TakeScreenshotCallback, android.accessibilityservice.AccessibilityService$ScreenshotResult)
    {
        android.accessibilityservice.AccessibilityService$TakeScreenshotCallback r0;
        android.accessibilityservice.AccessibilityService$ScreenshotResult r1;

        r0 := @parameter0: android.accessibilityservice.AccessibilityService$TakeScreenshotCallback;

        r1 := @parameter1: android.accessibilityservice.AccessibilityService$ScreenshotResult;

        interfaceinvoke r0.<android.accessibilityservice.AccessibilityService$TakeScreenshotCallback: void onSuccess(android.accessibilityservice.AccessibilityService$ScreenshotResult)>(r1);

        return;
    }

    private void onAccessibilityButtonAvailabilityChanged(boolean)
    {
        android.accessibilityservice.AccessibilityService r0;
        boolean z0;
        android.accessibilityservice.AccessibilityButtonController $r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController()>();

        virtualinvoke $r1.<android.accessibilityservice.AccessibilityButtonController: void dispatchAccessibilityButtonAvailabilityChanged(boolean)>(z0);

        return;
    }

    private void onAccessibilityButtonClicked(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        android.accessibilityservice.AccessibilityButtonController $r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController(int)>(i0);

        virtualinvoke $r1.<android.accessibilityservice.AccessibilityButtonController: void dispatchAccessibilityButtonClicked()>();

        return;
    }

    private void onFingerprintCapturingGesturesChanged(boolean)
    {
        android.accessibilityservice.AccessibilityService r0;
        boolean z0;
        android.accessibilityservice.FingerprintGestureController $r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController getFingerprintGestureController()>();

        virtualinvoke $r1.<android.accessibilityservice.FingerprintGestureController: void onGestureDetectionActiveChanged(boolean)>(z0);

        return;
    }

    private void onFingerprintGesture(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        android.accessibilityservice.FingerprintGestureController $r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController getFingerprintGestureController()>();

        virtualinvoke $r1.<android.accessibilityservice.FingerprintGestureController: void onGesture(int)>(i0);

        return;
    }

    private void onMagnificationChanged(int, android.graphics.Region, float, float, float)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        float f0, f1, f2;
        java.lang.Object r1, $r4;
        android.accessibilityservice.AccessibilityService$MagnificationController r2;
        android.util.SparseArray $r3;
        java.lang.Throwable $r5;
        android.graphics.Region r6;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.graphics.Region;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        r1 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mMagnificationControllers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.accessibilityservice.AccessibilityService$MagnificationController) $r4;

        exitmonitor r1;

     label2:
        if r2 == null goto label3;

        virtualinvoke r2.<android.accessibilityservice.AccessibilityService$MagnificationController: void dispatchMagnificationChanged(android.graphics.Region,float,float,float)>(r6, f0, f1, f2);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void onSoftKeyboardShowModeChanged(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        android.accessibilityservice.AccessibilityService$SoftKeyboardController r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r1 = r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController mSoftKeyboardController>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.accessibilityservice.AccessibilityService$SoftKeyboardController: void dispatchSoftKeyboardShowModeChanged(int)>(i0);

     label1:
        return;
    }

    private void sendScreenshotFailure(int, java.util.concurrent.Executor, android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        java.util.concurrent.Executor r1;
        android.accessibilityservice.AccessibilityService$TakeScreenshotCallback r2;
        android.accessibilityservice._$$Lambda$AccessibilityService$QPuf76fmbA3YdpMRuW3aotBDLhc $r3;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.accessibilityservice.AccessibilityService$TakeScreenshotCallback;

        $r3 = new android.accessibilityservice._$$Lambda$AccessibilityService$QPuf76fmbA3YdpMRuW3aotBDLhc;

        specialinvoke $r3.<android.accessibilityservice._$$Lambda$AccessibilityService$QPuf76fmbA3YdpMRuW3aotBDLhc: void <init>(android.accessibilityservice.AccessibilityService$TakeScreenshotCallback,int)>(r2, i0);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    private void sendScreenshotSuccess(android.accessibilityservice.AccessibilityService$ScreenshotResult, java.util.concurrent.Executor, android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.accessibilityservice.AccessibilityService$ScreenshotResult r1;
        java.util.concurrent.Executor r2;
        android.accessibilityservice.AccessibilityService$TakeScreenshotCallback r3;
        android.accessibilityservice._$$Lambda$AccessibilityService$Tu7BpkB1mA_cnSrnZqwCCw4inNQ $r4;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: android.accessibilityservice.AccessibilityService$ScreenshotResult;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.accessibilityservice.AccessibilityService$TakeScreenshotCallback;

        $r4 = new android.accessibilityservice._$$Lambda$AccessibilityService$Tu7BpkB1mA_cnSrnZqwCCw4inNQ;

        specialinvoke $r4.<android.accessibilityservice._$$Lambda$AccessibilityService$Tu7BpkB1mA_cnSrnZqwCCw4inNQ: void <init>(android.accessibilityservice.AccessibilityService$TakeScreenshotCallback,android.accessibilityservice.AccessibilityService$ScreenshotResult)>(r3, r1);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    private void sendServiceInfo()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        int $i0;
        android.view.accessibility.AccessibilityInteractionClient $r3;
        android.os.RemoteException $r4;
        android.accessibilityservice.AccessibilityServiceInfo r6;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        r6 = r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo mInfo>;

        if r6 == null goto label4;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r6);

        r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo mInfo> = null;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        virtualinvoke $r3.<android.view.accessibility.AccessibilityInteractionClient: void clearCache()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityService", "Error while setting AccessibilityServiceInfo", $r4);

        virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setDefaultTokenInternal(android.content.Context, int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0, $i1;
        android.view.WindowManagerImpl r1;
        java.lang.Object r2, $r3;
        android.os.RemoteException $r5;
        java.lang.Throwable $r7;
        android.content.Context r8;
        android.accessibilityservice.IAccessibilityServiceConnection r9;
        android.os.IBinder r10, r11;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r8 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r1 = (android.view.WindowManagerImpl) $r3;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r9 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        r10 = null;

        if r9 == null goto label10;

        r2 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r11 = interfaceinvoke r9.<android.accessibilityservice.IAccessibilityServiceConnection: android.os.IBinder getOverlayWindowToken(int)>(i0);

     label02:
        r10 = r11;

        goto label06;

     label03:
        $r7 := @caughtexception;

        goto label08;

     label04:
        $r5 := @caughtexception;

     label05:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityService", "Failed to get window token", $r5);

        virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label06:
        exitmonitor r2;

     label07:
        virtualinvoke r1.<android.view.WindowManagerImpl: void setDefaultToken(android.os.IBinder)>(r10);

        goto label10;

     label08:
        exitmonitor r2;

     label09:
        throw $r7;

     label10:
        return;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
    }

    public android.content.Context createDisplayContext(android.view.Display)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.view.Display r1;
        android.content.Context r2;
        int $i0;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: android.view.Display;

        r2 = specialinvoke r0.<android.app.Service: android.content.Context createDisplayContext(android.view.Display)>(r1);

        $i0 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void setDefaultTokenInternal(android.content.Context,int)>(r2, $i0);

        return r2;
    }

    public final void disableSelf()
    {
        android.accessibilityservice.AccessibilityService r0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.accessibilityservice.IAccessibilityServiceConnection r4;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r4 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        if r4 == null goto label4;

     label1:
        interfaceinvoke r4.<android.accessibilityservice.IAccessibilityServiceConnection: void disableSelf()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final boolean dispatchGesture(android.accessibilityservice.GestureDescription, android.accessibilityservice.AccessibilityService$GestureResultCallback, android.os.Handler)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.os.Handler r1;
        android.accessibilityservice.IAccessibilityServiceConnection r2;
        java.util.List r3;
        java.lang.Object r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.util.SparseArray $r6, $r7, r13;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.accessibilityservice.GestureDescription r11;
        android.accessibilityservice.AccessibilityService$GestureResultCallback r12;
        android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo r14;
        android.content.pm.ParceledListSlice r15;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r11 := @parameter0: android.accessibilityservice.GestureDescription;

        r12 := @parameter1: android.accessibilityservice.AccessibilityService$GestureResultCallback;

        r1 := @parameter2: android.os.Handler;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r2 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        if r2 != null goto label01;

        return 0;

     label01:
        r3 = staticinvoke <android.accessibilityservice.GestureDescription$MotionEventGenerator: java.util.List getGestureStepsFromGestureDescription(android.accessibilityservice.GestureDescription,int)>(r11, 16);

     label02:
        r4 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r4;

     label03:
        $i2 = r0.<android.accessibilityservice.AccessibilityService: int mGestureStatusCallbackSequence>;

        $i3 = $i2 + 1;

        r0.<android.accessibilityservice.AccessibilityService: int mGestureStatusCallbackSequence> = $i3;

     label04:
        if r12 == null goto label07;

     label05:
        $r6 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mGestureStatusCallbackInfos>;

        if $r6 != null goto label06;

        r13 = new android.util.SparseArray;

        specialinvoke r13.<android.util.SparseArray: void <init>()>();

        r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mGestureStatusCallbackInfos> = r13;

     label06:
        r14 = new android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo;

        specialinvoke r14.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: void <init>(android.accessibilityservice.GestureDescription,android.accessibilityservice.AccessibilityService$GestureResultCallback,android.os.Handler)>(r11, r12, r1);

        $r7 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mGestureStatusCallbackInfos>;

        $i4 = r0.<android.accessibilityservice.AccessibilityService: int mGestureStatusCallbackSequence>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>($i4, r14);

     label07:
        i0 = r0.<android.accessibilityservice.AccessibilityService: int mGestureStatusCallbackSequence>;

        r15 = new android.content.pm.ParceledListSlice;

        specialinvoke r15.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r3);

        $i5 = virtualinvoke r11.<android.accessibilityservice.GestureDescription: int getDisplayId()>();

        interfaceinvoke r2.<android.accessibilityservice.IAccessibilityServiceConnection: void dispatchGesture(int,android.content.pm.ParceledListSlice,int)>(i0, r15, $i5);

        exitmonitor r4;

     label08:
        return 1;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r4;

     label11:
        throw $r8;

     label12:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch android.os.RemoteException from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch android.os.RemoteException from label11 to label12 with label12;
    }

    public android.view.accessibility.AccessibilityNodeInfo findFocus(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0, $i2;
        android.view.accessibility.AccessibilityInteractionClient $r1;
        long $l1;
        android.view.accessibility.AccessibilityNodeInfo $r2;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i2 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        $l1 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        $r2 = virtualinvoke $r1.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findFocus(int,int,long,int)>($i2, -2, $l1, i0);

        return $r2;
    }

    public final android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.accessibilityservice.AccessibilityButtonController $r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        $r1 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController(int)>(0);

        return $r1;
    }

    public final android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        android.accessibilityservice.AccessibilityButtonController r2, r9;
        android.util.SparseArray $r3, $r7;
        android.accessibilityservice.IAccessibilityServiceConnection $r6;
        java.lang.Throwable $r8;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r1 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mAccessibilityButtonControllers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.accessibilityservice.AccessibilityButtonController) $r4;

     label2:
        r9 = r2;

        if r2 != null goto label5;

     label3:
        r9 = new android.accessibilityservice.AccessibilityButtonController;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        $r6 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        specialinvoke r9.<android.accessibilityservice.AccessibilityButtonController: void <init>(android.accessibilityservice.IAccessibilityServiceConnection)>($r6);

     label4:
        $r7 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mAccessibilityButtonControllers>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9);

     label5:
        exitmonitor r1;

     label6:
        return r9;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public final android.accessibilityservice.FingerprintGestureController getFingerprintGestureController()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.accessibilityservice.FingerprintGestureController $r1, $r2, $r4;
        int $i0;
        android.accessibilityservice.IAccessibilityServiceConnection $r5;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        $r1 = r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController mFingerprintGestureController>;

        if $r1 != null goto label1;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $r4 = new android.accessibilityservice.FingerprintGestureController;

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        $r5 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        specialinvoke $r4.<android.accessibilityservice.FingerprintGestureController: void <init>(android.accessibilityservice.IAccessibilityServiceConnection)>($r5);

        r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController mFingerprintGestureController> = $r4;

     label1:
        $r2 = r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController mFingerprintGestureController>;

        return $r2;
    }

    public final android.accessibilityservice.AccessibilityService$MagnificationController getMagnificationController()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.accessibilityservice.AccessibilityService$MagnificationController $r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        $r1 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$MagnificationController getMagnificationController(int)>(0);

        return $r1;
    }

    public final android.accessibilityservice.AccessibilityService$MagnificationController getMagnificationController(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        java.lang.Object r1, $r4, $r5;
        android.accessibilityservice.AccessibilityService$MagnificationController r2, r8;
        android.util.SparseArray $r3, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r1 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mMagnificationControllers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.accessibilityservice.AccessibilityService$MagnificationController) $r4;

     label2:
        r8 = r2;

        if r2 != null goto label5;

     label3:
        r8 = new android.accessibilityservice.AccessibilityService$MagnificationController;

        $r5 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        specialinvoke r8.<android.accessibilityservice.AccessibilityService$MagnificationController: void <init>(android.accessibilityservice.AccessibilityService,java.lang.Object,int)>(r0, $r5, i0);

     label4:
        $r6 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mMagnificationControllers>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r8);

     label5:
        exitmonitor r1;

     label6:
        return r8;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.view.accessibility.AccessibilityInteractionClient $r1;
        int $i0;
        android.view.accessibility.AccessibilityNodeInfo $r2;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        $r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        $r2 = virtualinvoke $r1.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)>($i0);

        return $r2;
    }

    public final android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()
    {
        android.accessibilityservice.AccessibilityService r0;
        int $i0;
        android.os.RemoteException $r2;
        android.accessibilityservice.IAccessibilityServiceConnection r4;
        android.accessibilityservice.AccessibilityServiceInfo r5;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r4 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        if r4 == null goto label4;

     label1:
        r5 = interfaceinvoke r4.<android.accessibilityservice.IAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityService", "Error while getting AccessibilityServiceInfo", $r2);

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final android.accessibilityservice.AccessibilityService$SoftKeyboardController getSoftKeyboardController()
    {
        android.accessibilityservice.AccessibilityService r0;
        java.lang.Object r1, $r3;
        android.accessibilityservice.AccessibilityService$SoftKeyboardController $r2, r5, r6;
        java.lang.Throwable $r4;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController mSoftKeyboardController>;

        if $r2 != null goto label2;

        r5 = new android.accessibilityservice.AccessibilityService$SoftKeyboardController;

        $r3 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        specialinvoke r5.<android.accessibilityservice.AccessibilityService$SoftKeyboardController: void <init>(android.accessibilityservice.AccessibilityService,java.lang.Object)>(r0, $r3);

        r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController mSoftKeyboardController> = r5;

     label2:
        r6 = r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController mSoftKeyboardController>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public final java.util.List getSystemActions()
    {
        android.accessibilityservice.AccessibilityService r0;
        int $i0;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        android.accessibilityservice.IAccessibilityServiceConnection r5;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r5 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        if r5 == null goto label4;

     label1:
        r6 = interfaceinvoke r5.<android.accessibilityservice.IAccessibilityServiceConnection: java.util.List getSystemActions()>();

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityService", "Error while calling getSystemActions", $r3);

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.Object getSystemService(java.lang.String)
    {
        android.accessibilityservice.AccessibilityService r0;
        java.lang.String r1, $r4;
        android.content.Context $r2, $r8;
        java.lang.IllegalStateException $r3;
        boolean $z0;
        java.lang.Object $r5, $r9;
        android.view.WindowManager $r6, $r7, $r10;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.content.Context getBaseContext()>();

        if $r2 == null goto label3;

        $r4 = "window";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r6 = r0.<android.accessibilityservice.AccessibilityService: android.view.WindowManager mWindowManager>;

        if $r6 != null goto label1;

        $r8 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.content.Context getBaseContext()>();

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>(r1);

        $r10 = (android.view.WindowManager) $r9;

        r0.<android.accessibilityservice.AccessibilityService: android.view.WindowManager mWindowManager> = $r10;

     label1:
        $r7 = r0.<android.accessibilityservice.AccessibilityService: android.view.WindowManager mWindowManager>;

        return $r7;

     label2:
        $r5 = specialinvoke r0.<android.app.Service: java.lang.Object getSystemService(java.lang.String)>(r1);

        return $r5;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("System services not available to Activities before onCreate()");

        throw $r3;
    }

    public java.util.List getWindows()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.view.accessibility.AccessibilityInteractionClient $r1;
        int $i0;
        java.util.List $r2;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        $r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        $r2 = virtualinvoke $r1.<android.view.accessibility.AccessibilityInteractionClient: java.util.List getWindows(int)>($i0);

        return $r2;
    }

    public final android.util.SparseArray getWindowsOnAllDisplays()
    {
        android.accessibilityservice.AccessibilityService r0;
        android.view.accessibility.AccessibilityInteractionClient $r1;
        int $i0;
        android.util.SparseArray $r2;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        $r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        $r2 = virtualinvoke $r1.<android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray getWindowsOnAllDisplays(int)>($i0);

        return $r2;
    }

    public void lambda$takeScreenshot$0$AccessibilityService(java.util.concurrent.Executor, android.accessibilityservice.AccessibilityService$TakeScreenshotCallback, android.os.Bundle)
    {
        android.accessibilityservice.AccessibilityService r0;
        java.util.concurrent.Executor r1;
        android.accessibilityservice.AccessibilityService$TakeScreenshotCallback r2;
        android.os.Bundle r3;
        int i0;
        android.hardware.HardwareBuffer r4;
        android.os.Parcelable $r5, $r7;
        android.accessibilityservice.AccessibilityService$ScreenshotResult $r6;
        android.graphics.ParcelableColorSpace $r8;
        android.graphics.ColorSpace $r9;
        long $l1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.accessibilityservice.AccessibilityService$TakeScreenshotCallback;

        r3 := @parameter2: android.os.Bundle;

        i0 = virtualinvoke r3.<android.os.Bundle: int getInt(java.lang.String)>("screenshot_status");

        if i0 == 0 goto label1;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void sendScreenshotFailure(int,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)>(i0, r1, r2);

        return;

     label1:
        $r5 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("screenshot_hardwareBuffer");

        r4 = (android.hardware.HardwareBuffer) $r5;

        $r6 = new android.accessibilityservice.AccessibilityService$ScreenshotResult;

        $r7 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("screenshot_colorSpace");

        $r8 = (android.graphics.ParcelableColorSpace) $r7;

        $r9 = virtualinvoke $r8.<android.graphics.ParcelableColorSpace: android.graphics.ColorSpace getColorSpace()>();

        $l1 = virtualinvoke r3.<android.os.Bundle: long getLong(java.lang.String)>("screenshot_timestamp");

        specialinvoke $r6.<android.accessibilityservice.AccessibilityService$ScreenshotResult: void <init>(android.hardware.HardwareBuffer,android.graphics.ColorSpace,long,android.accessibilityservice.AccessibilityService$1)>(r4, $r9, $l1, null);

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void sendScreenshotSuccess(android.accessibilityservice.AccessibilityService$ScreenshotResult,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)>($r6, r1, r2);

        return;
    }

    public abstract void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent);

    public final android.os.IBinder onBind(android.content.Intent)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.content.Intent r1;
        android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper $r2;
        android.os.Looper $r3;
        android.accessibilityservice.AccessibilityService$2 $r4;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: android.content.Intent;

        $r2 = new android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper;

        $r3 = virtualinvoke r0.<android.accessibilityservice.AccessibilityService: android.os.Looper getMainLooper()>();

        $r4 = new android.accessibilityservice.AccessibilityService$2;

        specialinvoke $r4.<android.accessibilityservice.AccessibilityService$2: void <init>(android.accessibilityservice.AccessibilityService)>(r0);

        specialinvoke $r2.<android.accessibilityservice.AccessibilityService$IAccessibilityServiceClientWrapper: void <init>(android.content.Context,android.os.Looper,android.accessibilityservice.AccessibilityService$Callbacks)>(r0, $r3, $r4);

        return $r2;
    }

    protected boolean onGesture(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean onGesture(android.accessibilityservice.AccessibilityGestureEvent)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.accessibilityservice.AccessibilityGestureEvent r1;
        int $i0, $i1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: android.accessibilityservice.AccessibilityGestureEvent;

        $i0 = virtualinvoke r1.<android.accessibilityservice.AccessibilityGestureEvent: int getDisplayId()>();

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke r1.<android.accessibilityservice.AccessibilityGestureEvent: int getGestureId()>();

        virtualinvoke r0.<android.accessibilityservice.AccessibilityService: boolean onGesture(int)>($i1);

     label1:
        return 0;
    }

    public abstract void onInterrupt();

    protected boolean onKeyEvent(android.view.KeyEvent)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.view.KeyEvent r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: android.view.KeyEvent;

        return 0;
    }

    void onPerformGestureResult(int, boolean)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0;
        boolean z0;
        java.lang.Object r1, $r4;
        android.util.SparseArray $r2, $r3, $r5;
        android.accessibilityservice.GestureDescription $r6, $r9, $r11;
        android.accessibilityservice.AccessibilityService$GestureResultCallback $r7, $r10, $r12;
        android.os.Handler $r8, $r14;
        android.accessibilityservice.AccessibilityService$1 $r13;
        java.lang.Throwable $r15;
        android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo r16;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mGestureStatusCallbackInfos>;

        if $r2 != null goto label1;

        return;

     label1:
        r1 = r0.<android.accessibilityservice.AccessibilityService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r3 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mGestureStatusCallbackInfos>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r16 = (android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo) $r4;

        $r5 = r0.<android.accessibilityservice.AccessibilityService: android.util.SparseArray mGestureStatusCallbackInfos>;

        virtualinvoke $r5.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label3:
        if r16 == null goto label6;

        $r6 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.accessibilityservice.GestureDescription gestureDescription>;

        if $r6 == null goto label6;

        $r7 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.accessibilityservice.AccessibilityService$GestureResultCallback callback>;

        if $r7 == null goto label6;

        $r8 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.os.Handler handler>;

        if $r8 == null goto label4;

        $r14 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.os.Handler handler>;

        $r13 = new android.accessibilityservice.AccessibilityService$1;

        specialinvoke $r13.<android.accessibilityservice.AccessibilityService$1: void <init>(android.accessibilityservice.AccessibilityService,boolean,android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo)>(r0, z0, r16);

        virtualinvoke $r14.<android.os.Handler: boolean post(java.lang.Runnable)>($r13);

        return;

     label4:
        if z0 == 0 goto label5;

        $r12 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.accessibilityservice.AccessibilityService$GestureResultCallback callback>;

        $r11 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.accessibilityservice.GestureDescription gestureDescription>;

        virtualinvoke $r12.<android.accessibilityservice.AccessibilityService$GestureResultCallback: void onCompleted(android.accessibilityservice.GestureDescription)>($r11);

        goto label6;

     label5:
        $r10 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.accessibilityservice.AccessibilityService$GestureResultCallback callback>;

        $r9 = r16.<android.accessibilityservice.AccessibilityService$GestureResultCallbackInfo: android.accessibilityservice.GestureDescription gestureDescription>;

        virtualinvoke $r10.<android.accessibilityservice.AccessibilityService$GestureResultCallback: void onCancelled(android.accessibilityservice.GestureDescription)>($r9);

     label6:
        return;

     label7:
        $r15 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r15;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    protected void onServiceConnected()
    {
        android.accessibilityservice.AccessibilityService r0;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        return;
    }

    public void onSystemActionsChanged()
    {
        android.accessibilityservice.AccessibilityService r0;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        return;
    }

    public final boolean performGlobalAction(int)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0, $i1;
        boolean z0;
        android.os.RemoteException $r2;
        android.accessibilityservice.IAccessibilityServiceConnection r4;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r4 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        if r4 == null goto label4;

     label1:
        z0 = interfaceinvoke r4.<android.accessibilityservice.IAccessibilityServiceConnection: boolean performGlobalAction(int)>(i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityService", "Error while calling performGlobalAction", $r2);

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setGestureDetectionPassthroughRegion(int, android.graphics.Region)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0, $i1;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.graphics.Region r6;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.graphics.Region;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "region cannot be null");

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: void setGestureDetectionPassthroughRegion(int,android.graphics.Region)>(i0, r6);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
    {
        android.accessibilityservice.AccessibilityService r0;
        android.accessibilityservice.AccessibilityServiceInfo r1;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        r1 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        r0.<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo mInfo> = r1;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void sendServiceInfo()>();

        return;
    }

    public void setTouchExplorationPassthroughRegion(int, android.graphics.Region)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0, $i1;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.graphics.Region r6;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.graphics.Region;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "region cannot be null");

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: void setTouchExplorationPassthroughRegion(int,android.graphics.Region)>(i0, r6);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void takeScreenshot(int, java.util.concurrent.Executor, android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)
    {
        android.accessibilityservice.AccessibilityService r0;
        int i0, $i1;
        android.accessibilityservice.AccessibilityService$TakeScreenshotCallback r1;
        android.accessibilityservice.IAccessibilityServiceConnection r2;
        android.os.RemoteCallback r3;
        android.accessibilityservice._$$Lambda$AccessibilityService$q1syDPtLKDyMLkI7cIJLVQqmK_Y r4;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.util.concurrent.Executor r10;

        r0 := @this: android.accessibilityservice.AccessibilityService;

        i0 := @parameter0: int;

        r10 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.accessibilityservice.AccessibilityService$TakeScreenshotCallback;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r10, "executor cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "callback cannot be null");

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.accessibilityservice.AccessibilityService: int mConnectionId>;

        r2 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        if r2 != null goto label1;

        specialinvoke r0.<android.accessibilityservice.AccessibilityService: void sendScreenshotFailure(int,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)>(1, r10, r1);

        return;

     label1:
        r3 = new android.os.RemoteCallback;

        r4 = new android.accessibilityservice._$$Lambda$AccessibilityService$q1syDPtLKDyMLkI7cIJLVQqmK_Y;

        specialinvoke r4.<android.accessibilityservice._$$Lambda$AccessibilityService$q1syDPtLKDyMLkI7cIJLVQqmK_Y: void <init>(android.accessibilityservice.AccessibilityService,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)>(r0, r10, r1);

        specialinvoke r3.<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener)>(r4);

        interfaceinvoke r2.<android.accessibilityservice.IAccessibilityServiceConnection: void takeScreenshot(int,android.os.RemoteCallback)>(i0, r3);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.accessibilityservice.AccessibilityService: int TAKE_SCREENSHOT_SUCCESS> = 0;

        <android.accessibilityservice.AccessibilityService: int SHOW_MODE_MASK> = 3;

        <android.accessibilityservice.AccessibilityService: int SHOW_MODE_IGNORE_HARD_KEYBOARD> = 2;

        <android.accessibilityservice.AccessibilityService: int SHOW_MODE_HIDDEN> = 1;

        <android.accessibilityservice.AccessibilityService: int SHOW_MODE_HARD_KEYBOARD_OVERRIDDEN> = 1073741824;

        <android.accessibilityservice.AccessibilityService: int SHOW_MODE_HARD_KEYBOARD_ORIGINAL_VALUE> = 536870912;

        <android.accessibilityservice.AccessibilityService: int SHOW_MODE_AUTO> = 0;

        <android.accessibilityservice.AccessibilityService: java.lang.String SERVICE_META_DATA> = "android.accessibilityservice";

        <android.accessibilityservice.AccessibilityService: java.lang.String SERVICE_INTERFACE> = "android.accessibilityservice.AccessibilityService";

        <android.accessibilityservice.AccessibilityService: java.lang.String LOG_TAG> = "AccessibilityService";

        <android.accessibilityservice.AccessibilityService: java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_TIMESTAMP> = "screenshot_timestamp";

        <android.accessibilityservice.AccessibilityService: java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_STATUS> = "screenshot_status";

        <android.accessibilityservice.AccessibilityService: java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_HARDWAREBUFFER> = "screenshot_hardwareBuffer";

        <android.accessibilityservice.AccessibilityService: java.lang.String KEY_ACCESSIBILITY_SCREENSHOT_COLORSPACE> = "screenshot_colorSpace";

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN> = 7;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_TAKE_SCREENSHOT> = 9;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_RECENTS> = 3;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_QUICK_SETTINGS> = 5;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_POWER_DIALOG> = 6;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_NOTIFICATIONS> = 4;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_LOCK_SCREEN> = 8;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_KEYCODE_HEADSETHOOK> = 10;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_HOME> = 2;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_BACK> = 1;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_SHORTCUT> = 13;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSER> = 12;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_BUTTON> = 11;

        <android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_ALL_APPS> = 14;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP_AND_RIGHT> = 14;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP_AND_LEFT> = 13;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP_AND_DOWN> = 7;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP> = 1;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT_AND_UP> = 11;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT_AND_LEFT> = 6;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT_AND_DOWN> = 12;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT> = 4;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT_AND_UP> = 9;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT_AND_RIGHT> = 5;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT_AND_DOWN> = 10;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT> = 3;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN_AND_UP> = 8;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN_AND_RIGHT> = 16;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN_AND_LEFT> = 15;

        <android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN> = 2;

        <android.accessibilityservice.AccessibilityService: int GESTURE_DOUBLE_TAP_AND_HOLD> = 18;

        <android.accessibilityservice.AccessibilityService: int GESTURE_DOUBLE_TAP> = 17;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_TRIPLE_TAP> = 39;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_UP> = 33;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_RIGHT> = 36;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_LEFT> = 35;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_DOWN> = 34;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SINGLE_TAP> = 37;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD> = 42;

        <android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_DOUBLE_TAP> = 38;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_TRIPLE_TAP> = 24;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_UP> = 29;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_RIGHT> = 32;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_LEFT> = 31;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_DOWN> = 30;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SINGLE_TAP> = 22;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD> = 41;

        <android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_DOUBLE_TAP> = 23;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_TRIPLE_TAP> = 21;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_UP> = 25;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_RIGHT> = 28;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_LEFT> = 27;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_DOWN> = 26;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SINGLE_TAP> = 19;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD> = 40;

        <android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_DOUBLE_TAP> = 20;

        <android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS> = 2;

        <android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY> = 4;

        <android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT> = 3;

        <android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR> = 1;

        <android.accessibilityservice.AccessibilityService: int ACCESSIBILITY_TAKE_SCREENSHOT_REQUEST_INTERVAL_TIMES_MS> = 1000;

        return;
    }
}
