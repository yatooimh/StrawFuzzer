public class android.accessibilityservice.GestureDescription$StrokeDescription extends java.lang.Object
{
    private static final int INVALID_STROKE_ID;
    static int sIdCounter;
    boolean mContinued;
    int mContinuedStrokeId;
    long mEndTime;
    int mId;
    android.graphics.Path mPath;
    private android.graphics.PathMeasure mPathMeasure;
    long mStartTime;
    float[] mTapLocation;
    private float mTimeToLengthConversion;

    public void <init>(android.graphics.Path, long, long)
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        android.graphics.Path r1;
        long l0, l1;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        r1 := @parameter0: android.graphics.Path;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<android.accessibilityservice.GestureDescription$StrokeDescription: void <init>(android.graphics.Path,long,long,boolean)>(r1, l0, l1, 0);

        return;
    }

    public void <init>(android.graphics.Path, long, long, boolean)
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        long l0, l1, $l6;
        int i2, $i7;
        byte $b3, $b4, $b5, $b8, $b9, $b10, $b11;
        boolean $z1, $z2, $z3, z5, z6, z7, z8;
        android.graphics.RectF $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.PathMeasure $r2, $r5, $r8, $r13;
        java.lang.IllegalArgumentException $r3;
        android.graphics.Path $r4, $r6, r10, $r12;
        float[] $r7, $r9;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        r10 := @parameter0: android.graphics.Path;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z5 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: int mContinuedStrokeId> = -1;

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: boolean mContinued> = z5;

        $b3 = l1 cmp 0L;

        if $b3 <= 0 goto label1;

        z6 = 1;

        goto label2;

     label1:
        z6 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z6, "Duration must be positive");

        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label3;

        z7 = 1;

        goto label4;

     label3:
        z7 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z7, "Start time must not be negative");

        $z1 = virtualinvoke r10.<android.graphics.Path: boolean isEmpty()>();

        $z2 = $z1 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Path is empty");

        $r1 = new android.graphics.RectF;

        specialinvoke $r1.<android.graphics.RectF: void <init>()>();

        virtualinvoke r10.<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>($r1, 0);

        $f0 = $r1.<android.graphics.RectF: float bottom>;

        $b5 = $f0 cmpl 0.0F;

        if $b5 < 0 goto label5;

        $f4 = $r1.<android.graphics.RectF: float top>;

        $b8 = $f4 cmpl 0.0F;

        if $b8 < 0 goto label5;

        $f5 = $r1.<android.graphics.RectF: float right>;

        $b9 = $f5 cmpl 0.0F;

        if $b9 < 0 goto label5;

        $f6 = $r1.<android.graphics.RectF: float left>;

        $b10 = $f6 cmpl 0.0F;

        if $b10 < 0 goto label5;

        z8 = 1;

        goto label6;

     label5:
        z8 = 0;

     label6:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z8, "Path bounds must not be negative");

        $r12 = new android.graphics.Path;

        specialinvoke $r12.<android.graphics.Path: void <init>(android.graphics.Path)>(r10);

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.Path mPath> = $r12;

        $r13 = new android.graphics.PathMeasure;

        specialinvoke $r13.<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>(r10, 0);

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.PathMeasure mPathMeasure> = $r13;

        $f7 = virtualinvoke $r13.<android.graphics.PathMeasure: float getLength()>();

        $b11 = $f7 cmpl 0.0F;

        if $b11 != 0 goto label7;

        $r6 = new android.graphics.Path;

        specialinvoke $r6.<android.graphics.Path: void <init>(android.graphics.Path)>(r10);

        virtualinvoke $r6.<android.graphics.Path: void lineTo(float,float)>(-1.0F, -1.0F);

        $r7 = newarray (float)[2];

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: float[] mTapLocation> = $r7;

        $r8 = new android.graphics.PathMeasure;

        specialinvoke $r8.<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>($r6, 0);

        $r9 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: float[] mTapLocation>;

        virtualinvoke $r8.<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>(0.0F, $r9, null);

     label7:
        $r2 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.PathMeasure mPathMeasure>;

        $z3 = virtualinvoke $r2.<android.graphics.PathMeasure: boolean nextContour()>();

        if $z3 != 0 goto label8;

        $r5 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.PathMeasure mPathMeasure>;

        $r4 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.Path mPath>;

        virtualinvoke $r5.<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)>($r4, 0);

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mStartTime> = l0;

        $l6 = l0 + l1;

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mEndTime> = $l6;

        $f1 = virtualinvoke r0.<android.accessibilityservice.GestureDescription$StrokeDescription: float getLength()>();

        $f2 = (float) l1;

        $f3 = $f1 / $f2;

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: float mTimeToLengthConversion> = $f3;

        i2 = <android.accessibilityservice.GestureDescription$StrokeDescription: int sIdCounter>;

        $i7 = i2 + 1;

        <android.accessibilityservice.GestureDescription$StrokeDescription: int sIdCounter> = $i7;

        r0.<android.accessibilityservice.GestureDescription$StrokeDescription: int mId> = i2;

        return;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path has more than one contour");

        throw $r3;
    }

    public android.accessibilityservice.GestureDescription$StrokeDescription continueStroke(android.graphics.Path, long, long, boolean)
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0, $r2;
        long l0, l1;
        boolean z0, $z1;
        java.lang.IllegalStateException $r1;
        int $i2;
        android.graphics.Path r3;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        r3 := @parameter0: android.graphics.Path;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        $z1 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: boolean mContinued>;

        if $z1 == 0 goto label1;

        $r2 = new android.accessibilityservice.GestureDescription$StrokeDescription;

        specialinvoke $r2.<android.accessibilityservice.GestureDescription$StrokeDescription: void <init>(android.graphics.Path,long,long,boolean)>(r3, l0, l1, z0);

        $i2 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: int mId>;

        $r2.<android.accessibilityservice.GestureDescription$StrokeDescription: int mContinuedStrokeId> = $i2;

        return $r2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Only strokes marked willContinue can be continued");

        throw $r1;
    }

    public int getContinuedStrokeId()
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        int $i0;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        $i0 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: int mContinuedStrokeId>;

        return $i0;
    }

    public long getDuration()
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        long $l0, $l1, $l2;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        $l1 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mEndTime>;

        $l0 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mStartTime>;

        $l2 = $l1 - $l0;

        return $l2;
    }

    public int getId()
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        int $i0;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        $i0 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: int mId>;

        return $i0;
    }

    float getLength()
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        android.graphics.PathMeasure $r1;
        float $f0;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        $r1 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.PathMeasure mPathMeasure>;

        $f0 = virtualinvoke $r1.<android.graphics.PathMeasure: float getLength()>();

        return $f0;
    }

    public android.graphics.Path getPath()
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        android.graphics.Path $r1, $r2;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        $r1 = new android.graphics.Path;

        $r2 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.Path mPath>;

        specialinvoke $r1.<android.graphics.Path: void <init>(android.graphics.Path)>($r2);

        return $r1;
    }

    boolean getPosForTime(long, float[])
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        long l0, $l1, $l3, $l4;
        float[] r1, r2;
        float f0, f1, $f2, $f3, $f4, $f5;
        byte $b2;
        android.graphics.PathMeasure $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        l0 := @parameter0: long;

        r1 := @parameter1: float[];

        r2 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: float[] mTapLocation>;

        if r2 == null goto label1;

        $f4 = r2[0];

        r1[0] = $f4;

        $f5 = r2[1];

        r1[1] = $f5;

        return 1;

     label1:
        $l1 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mEndTime>;

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label2;

        $r4 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.PathMeasure mPathMeasure>;

        $f3 = virtualinvoke r0.<android.accessibilityservice.GestureDescription$StrokeDescription: float getLength()>();

        $z1 = virtualinvoke $r4.<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>($f3, r1, null);

        return $z1;

     label2:
        f0 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: float mTimeToLengthConversion>;

        $l3 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mStartTime>;

        $l4 = l0 - $l3;

        f1 = (float) $l4;

        $r3 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.PathMeasure mPathMeasure>;

        $f2 = f0 * f1;

        $z0 = virtualinvoke $r3.<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>($f2, r1, null);

        return $z0;
    }

    public long getStartTime()
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        long $l0;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        $l0 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mStartTime>;

        return $l0;
    }

    boolean hasPointForTime(long)
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        long l0, $l1, $l3;
        byte $b2, $b4;
        boolean z0;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        l0 := @parameter0: long;

        $l1 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mStartTime>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $l3 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: long mEndTime>;

        $b4 = l0 cmp $l3;

        if $b4 > 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean willContinue()
    {
        android.accessibilityservice.GestureDescription$StrokeDescription r0;
        boolean $z0;

        r0 := @this: android.accessibilityservice.GestureDescription$StrokeDescription;

        $z0 = r0.<android.accessibilityservice.GestureDescription$StrokeDescription: boolean mContinued>;

        return $z0;
    }

    public static void <clinit>()
    {
        <android.accessibilityservice.GestureDescription$StrokeDescription: int INVALID_STROKE_ID> = -1;

        return;
    }
}
