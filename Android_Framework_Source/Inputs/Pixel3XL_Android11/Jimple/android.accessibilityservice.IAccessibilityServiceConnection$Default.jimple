public class android.accessibilityservice.IAccessibilityServiceConnection$Default extends java.lang.Object implements android.accessibilityservice.IAccessibilityServiceConnection
{

    public void <init>()
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return null;
    }

    public void disableSelf() throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return;
    }

    public void dispatchGesture(int, android.content.pm.ParceledListSlice, int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0, i1;
        android.content.pm.ParceledListSlice r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.ParceledListSlice;

        i1 := @parameter2: int;

        return;
    }

    public java.lang.String[] findAccessibilityNodeInfoByAccessibilityId(int, long, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, int, long, android.os.Bundle) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0, i2, i3;
        long l1, l4;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r1;
        android.os.Bundle r2;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        r1 := @parameter3: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        i3 := @parameter4: int;

        l4 := @parameter5: long;

        r2 := @parameter6: android.os.Bundle;

        return null;
    }

    public java.lang.String[] findAccessibilityNodeInfosByText(int, long, java.lang.String, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0, i2;
        long l1, l3;
        java.lang.String r1;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r2;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r2 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l3 := @parameter5: long;

        return null;
    }

    public java.lang.String[] findAccessibilityNodeInfosByViewId(int, long, java.lang.String, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0, i2;
        long l1, l3;
        java.lang.String r1;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r2;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r2 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l3 := @parameter5: long;

        return null;
    }

    public java.lang.String[] findFocus(int, long, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0, i2, i3;
        long l1, l4;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l4 := @parameter5: long;

        return null;
    }

    public java.lang.String[] focusSearch(int, long, int, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0, i2, i3;
        long l1, l4;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l4 := @parameter5: long;

        return null;
    }

    public float getMagnificationCenterX(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return 0.0F;
    }

    public float getMagnificationCenterY(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return 0.0F;
    }

    public android.graphics.Region getMagnificationRegion(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return null;
    }

    public float getMagnificationScale(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return 0.0F;
    }

    public android.os.IBinder getOverlayWindowToken(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.accessibilityservice.AccessibilityServiceInfo getServiceInfo() throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return null;
    }

    public int getSoftKeyboardShowMode() throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return 0;
    }

    public java.util.List getSystemActions() throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return null;
    }

    public android.view.accessibility.AccessibilityWindowInfo getWindow(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return null;
    }

    public int getWindowIdForLeashToken(android.os.IBinder) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        android.os.IBinder r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        r1 := @parameter0: android.os.IBinder;

        return 0;
    }

    public android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray getWindows() throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return null;
    }

    public boolean isAccessibilityButtonAvailable() throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return 0;
    }

    public boolean isFingerprintGestureDetectionAvailable() throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        return 0;
    }

    public boolean performAccessibilityAction(int, long, int, android.os.Bundle, int, android.view.accessibility.IAccessibilityInteractionConnectionCallback, long) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0, i2, i3;
        long l1, l4;
        android.os.Bundle r1;
        android.view.accessibility.IAccessibilityInteractionConnectionCallback r2;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        r1 := @parameter3: android.os.Bundle;

        i3 := @parameter4: int;

        r2 := @parameter5: android.view.accessibility.IAccessibilityInteractionConnectionCallback;

        l4 := @parameter6: long;

        return 0;
    }

    public boolean performGlobalAction(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean resetMagnification(int, boolean) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return 0;
    }

    public void sendGesture(int, android.content.pm.ParceledListSlice) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;
        android.content.pm.ParceledListSlice r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.ParceledListSlice;

        return;
    }

    public void setGestureDetectionPassthroughRegion(int, android.graphics.Region) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;
        android.graphics.Region r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        return;
    }

    public void setMagnificationCallbackEnabled(int, boolean) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public boolean setMagnificationScaleAndCenter(int, float, float, float, boolean) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;
        float f0, f1, f2;
        boolean z0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        z0 := @parameter4: boolean;

        return 0;
    }

    public void setOnKeyEventResult(boolean, int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        boolean z0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        return;
    }

    public void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        android.accessibilityservice.AccessibilityServiceInfo r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        r1 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        return;
    }

    public void setSoftKeyboardCallbackEnabled(boolean) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        boolean z0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean setSoftKeyboardShowMode(int) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void setTouchExplorationPassthroughRegion(int, android.graphics.Region) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;
        android.graphics.Region r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        return;
    }

    public boolean switchToInputMethod(java.lang.String) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        java.lang.String r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void takeScreenshot(int, android.os.RemoteCallback) throws android.os.RemoteException
    {
        android.accessibilityservice.IAccessibilityServiceConnection$Default r0;
        int i0;
        android.os.RemoteCallback r1;

        r0 := @this: android.accessibilityservice.IAccessibilityServiceConnection$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.RemoteCallback;

        return;
    }
}
