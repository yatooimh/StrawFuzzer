public abstract class android.accounts.AbstractAccountAuthenticator extends java.lang.Object
{
    private static final java.lang.String KEY_ACCOUNT;
    private static final java.lang.String KEY_AUTH_TOKEN_TYPE;
    public static final java.lang.String KEY_CUSTOM_TOKEN_EXPIRY;
    private static final java.lang.String KEY_OPTIONS;
    private static final java.lang.String KEY_REQUIRED_FEATURES;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private android.accounts.AbstractAccountAuthenticator$Transport mTransport;

    public void <init>(android.content.Context)
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.content.Context r1;
        android.accounts.AbstractAccountAuthenticator$Transport $r2;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.accounts.AbstractAccountAuthenticator$Transport;

        specialinvoke $r2.<android.accounts.AbstractAccountAuthenticator$Transport: void <init>(android.accounts.AbstractAccountAuthenticator,android.accounts.AbstractAccountAuthenticator$1)>(r0, null);

        r0.<android.accounts.AbstractAccountAuthenticator: android.accounts.AbstractAccountAuthenticator$Transport mTransport> = $r2;

        r0.<android.accounts.AbstractAccountAuthenticator: android.content.Context mContext> = r1;

        return;
    }

    static void access$000(android.accounts.AbstractAccountAuthenticator)
    {
        android.accounts.AbstractAccountAuthenticator r0;

        r0 := @parameter0: android.accounts.AbstractAccountAuthenticator;

        specialinvoke r0.<android.accounts.AbstractAccountAuthenticator: void checkBinderPermission()>();

        return;
    }

    static void access$100(android.accounts.AbstractAccountAuthenticator, android.accounts.IAccountAuthenticatorResponse, java.lang.String, java.lang.String, java.lang.Exception) throws android.os.RemoteException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.IAccountAuthenticatorResponse r1;
        java.lang.String r2, r3;
        java.lang.Exception r4;

        r0 := @parameter0: android.accounts.AbstractAccountAuthenticator;

        r1 := @parameter1: android.accounts.IAccountAuthenticatorResponse;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Exception;

        specialinvoke r0.<android.accounts.AbstractAccountAuthenticator: void handleException(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.Exception)>(r1, r2, r3, r4);

        return;
    }

    private void checkBinderPermission()
    {
        android.accounts.AbstractAccountAuthenticator r0;
        int i0, $i1;
        android.content.Context $r2;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r8;
        java.lang.String $r9;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<android.accounts.AbstractAccountAuthenticator: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCOUNT_MANAGER");

        if $i1 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caller uid ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lacks ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.ACCOUNT_MANAGER");

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private void handleException(android.accounts.IAccountAuthenticatorResponse, java.lang.String, java.lang.String, java.lang.Exception) throws android.os.RemoteException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.IAccountAuthenticatorResponse r1;
        java.lang.String r2, $r9, $r13, $r17, $r23, $r27, $r33, $r34, $r40, r41;
        java.lang.Exception r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r4, $r10, $r14, $r18, $r24, $r28, $r35;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r1 := @parameter0: android.accounts.IAccountAuthenticatorResponse;

        r2 := @parameter1: java.lang.String;

        r41 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Exception;

        $z0 = r3 instanceof android.accounts.NetworkErrorException;

        if $z0 == 0 goto label2;

        $z5 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountAuthenticator", 2);

        if $z5 == 0 goto label1;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountAuthenticator", $r40, r3);

     label1:
        $r34 = virtualinvoke r3.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke r1.<android.accounts.IAccountAuthenticatorResponse: void onError(int,java.lang.String)>(3, $r34);

        goto label7;

     label2:
        $z1 = r3 instanceof java.lang.UnsupportedOperationException;

        if $z1 == 0 goto label4;

        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountAuthenticator", 2);

        if $z4 == 0 goto label3;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountAuthenticator", $r33, r3);

     label3:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.accounts.IAccountAuthenticatorResponse: void onError(int,java.lang.String)>(6, $r27);

        goto label7;

     label4:
        $z2 = r3 instanceof java.lang.IllegalArgumentException;

        if $z2 == 0 goto label6;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountAuthenticator", 2);

        if $z3 == 0 goto label5;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountAuthenticator", $r23, r3);

     label5:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.accounts.IAccountAuthenticatorResponse: void onError(int,java.lang.String)>(7, $r17);

        goto label7;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountAuthenticator", $r9, r3);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.accounts.IAccountAuthenticatorResponse: void onError(int,java.lang.String)>(1, $r13);

     label7:
        return;
    }

    public abstract android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse, java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle) throws android.accounts.NetworkErrorException;

    public android.os.Bundle addAccountFromCredentials(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, android.os.Bundle) throws android.accounts.NetworkErrorException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.AccountAuthenticatorResponse r1;
        android.accounts.Account r2;
        android.os.Bundle r3;
        java.lang.Thread $r4;
        android.accounts.AbstractAccountAuthenticator$2 $r5;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r1 := @parameter0: android.accounts.AccountAuthenticatorResponse;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: android.os.Bundle;

        $r4 = new java.lang.Thread;

        $r5 = new android.accounts.AbstractAccountAuthenticator$2;

        specialinvoke $r5.<android.accounts.AbstractAccountAuthenticator$2: void <init>(android.accounts.AbstractAccountAuthenticator,android.accounts.AccountAuthenticatorResponse)>(r0, r1);

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>($r5);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return null;
    }

    public abstract android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, android.os.Bundle) throws android.accounts.NetworkErrorException;

    public abstract android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse, java.lang.String);

    public android.os.Bundle finishSession(android.accounts.AccountAuthenticatorResponse, java.lang.String, android.os.Bundle) throws android.accounts.NetworkErrorException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        java.lang.String r1, r13;
        android.os.Bundle r2, $r6, $r7, $r8, $r9, $r10, $r11, r14, r18;
        java.lang.String[] r3;
        android.accounts.Account r4;
        boolean z0, $z1, $z2;
        android.os.Parcelable $r5;
        android.accounts.AccountAuthenticatorResponse r12;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r12 := @parameter0: android.accounts.AccountAuthenticatorResponse;

        r13 := @parameter1: java.lang.String;

        r14 := @parameter2: android.os.Bundle;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r13);

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountAuthenticator", "Account type cannot be empty.");

        $r11 = new android.os.Bundle;

        specialinvoke $r11.<android.os.Bundle: void <init>()>();

        virtualinvoke $r11.<android.os.Bundle: void putInt(java.lang.String,int)>("errorCode", 7);

        virtualinvoke $r11.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("errorMessage", "accountType cannot be empty.");

        return $r11;

     label1:
        if r14 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountAuthenticator", "Session bundle cannot be null.");

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        virtualinvoke $r10.<android.os.Bundle: void putInt(java.lang.String,int)>("errorCode", 7);

        virtualinvoke $r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("errorMessage", "sessionBundle cannot be null.");

        return $r10;

     label2:
        $z2 = virtualinvoke r14.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.accounts.AbstractAccountAuthenticato.KEY_AUTH_TOKEN_TYPE");

        if $z2 != 0 goto label3;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        virtualinvoke $r9.<android.os.Bundle: void putInt(java.lang.String,int)>("errorCode", 6);

        virtualinvoke $r9.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("errorMessage", "Authenticator must override finishSession if startAddAccountSession or startUpdateCredentialsSession is overridden.");

        virtualinvoke r12.<android.accounts.AccountAuthenticatorResponse: void onResult(android.os.Bundle)>($r9);

        return $r9;

     label3:
        r1 = virtualinvoke r14.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.accounts.AbstractAccountAuthenticato.KEY_AUTH_TOKEN_TYPE");

        r2 = virtualinvoke r14.<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>("android.accounts.AbstractAccountAuthenticator.KEY_OPTIONS");

        r3 = virtualinvoke r14.<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>("android.accounts.AbstractAccountAuthenticator.KEY_REQUIRED_FEATURES");

        $r5 = virtualinvoke r14.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.accounts.AbstractAccountAuthenticator.KEY_ACCOUNT");

        r4 = (android.accounts.Account) $r5;

        z0 = virtualinvoke r14.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.accounts.AbstractAccountAuthenticator.KEY_ACCOUNT");

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>(android.os.Bundle)>(r14);

        r18 = $r6;

        virtualinvoke $r6.<android.os.Bundle: void remove(java.lang.String)>("android.accounts.AbstractAccountAuthenticato.KEY_AUTH_TOKEN_TYPE");

        virtualinvoke $r6.<android.os.Bundle: void remove(java.lang.String)>("android.accounts.AbstractAccountAuthenticator.KEY_REQUIRED_FEATURES");

        virtualinvoke $r6.<android.os.Bundle: void remove(java.lang.String)>("android.accounts.AbstractAccountAuthenticator.KEY_OPTIONS");

        virtualinvoke $r6.<android.os.Bundle: void remove(java.lang.String)>("android.accounts.AbstractAccountAuthenticator.KEY_ACCOUNT");

        if r2 == null goto label4;

        virtualinvoke r2.<android.os.Bundle: void putAll(android.os.Bundle)>($r6);

        r18 = r2;

        goto label4;

     label4:
        if z0 == 0 goto label5;

        $r8 = virtualinvoke r0.<android.accounts.AbstractAccountAuthenticator: android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>(r12, r4, r1, r2);

        return $r8;

     label5:
        $r7 = virtualinvoke r0.<android.accounts.AbstractAccountAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>(r12, r13, r1, r3, r18);

        return $r7;
    }

    public android.os.Bundle getAccountCredentialsForCloning(android.accounts.AccountAuthenticatorResponse, android.accounts.Account) throws android.accounts.NetworkErrorException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.AccountAuthenticatorResponse r1;
        android.accounts.Account r2;
        java.lang.Thread $r3;
        android.accounts.AbstractAccountAuthenticator$1 $r4;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r1 := @parameter0: android.accounts.AccountAuthenticatorResponse;

        r2 := @parameter1: android.accounts.Account;

        $r3 = new java.lang.Thread;

        $r4 = new android.accounts.AbstractAccountAuthenticator$1;

        specialinvoke $r4.<android.accounts.AbstractAccountAuthenticator$1: void <init>(android.accounts.AbstractAccountAuthenticator,android.accounts.AccountAuthenticatorResponse)>(r0, r1);

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

        return null;
    }

    public android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse, android.accounts.Account) throws android.accounts.NetworkErrorException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.Account r1;
        android.os.Bundle $r2;
        android.accounts.AccountAuthenticatorResponse r3;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r3 := @parameter0: android.accounts.AccountAuthenticatorResponse;

        r1 := @parameter1: android.accounts.Account;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("booleanResult", 1);

        return $r2;
    }

    public abstract android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String, android.os.Bundle) throws android.accounts.NetworkErrorException;

    public abstract java.lang.String getAuthTokenLabel(java.lang.String);

    public final android.os.IBinder getIBinder()
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.AbstractAccountAuthenticator$Transport $r1;
        android.os.IBinder $r2;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        $r1 = r0.<android.accounts.AbstractAccountAuthenticator: android.accounts.AbstractAccountAuthenticator$Transport mTransport>;

        $r2 = virtualinvoke $r1.<android.accounts.AbstractAccountAuthenticator$Transport: android.os.IBinder asBinder()>();

        return $r2;
    }

    public abstract android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String[]) throws android.accounts.NetworkErrorException;

    public android.os.Bundle isCredentialsUpdateSuggested(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String) throws android.accounts.NetworkErrorException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.Account r1;
        java.lang.String r2;
        android.os.Bundle $r3;
        android.accounts.AccountAuthenticatorResponse r4;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r4 := @parameter0: android.accounts.AccountAuthenticatorResponse;

        r1 := @parameter1: android.accounts.Account;

        r2 := @parameter2: java.lang.String;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("booleanResult", 0);

        return $r3;
    }

    public android.os.Bundle startAddAccountSession(android.accounts.AccountAuthenticatorResponse, java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle) throws android.accounts.NetworkErrorException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.AccountAuthenticatorResponse r1;
        java.lang.String r2, r3;
        java.lang.String[] r4;
        android.os.Bundle r5;
        java.lang.Thread $r6;
        android.accounts.AbstractAccountAuthenticator$3 $r7;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r1 := @parameter0: android.accounts.AccountAuthenticatorResponse;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.Bundle;

        $r6 = new java.lang.Thread;

        $r7 = new android.accounts.AbstractAccountAuthenticator$3;

        specialinvoke $r7.<android.accounts.AbstractAccountAuthenticator$3: void <init>(android.accounts.AbstractAccountAuthenticator,java.lang.String,java.lang.String[],android.os.Bundle,android.accounts.AccountAuthenticatorResponse)>(r0, r3, r4, r5, r1);

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable)>($r7);

        virtualinvoke $r6.<java.lang.Thread: void start()>();

        return null;
    }

    public android.os.Bundle startUpdateCredentialsSession(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String, android.os.Bundle) throws android.accounts.NetworkErrorException
    {
        android.accounts.AbstractAccountAuthenticator r0;
        android.accounts.AccountAuthenticatorResponse r1;
        android.accounts.Account r2;
        java.lang.String r3;
        android.os.Bundle r4;
        java.lang.Thread $r5;
        android.accounts.AbstractAccountAuthenticator$4 $r6;

        r0 := @this: android.accounts.AbstractAccountAuthenticator;

        r1 := @parameter0: android.accounts.AccountAuthenticatorResponse;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        $r5 = new java.lang.Thread;

        $r6 = new android.accounts.AbstractAccountAuthenticator$4;

        specialinvoke $r6.<android.accounts.AbstractAccountAuthenticator$4: void <init>(android.accounts.AbstractAccountAuthenticator,java.lang.String,android.accounts.Account,android.os.Bundle,android.accounts.AccountAuthenticatorResponse)>(r0, r3, r2, r4, r1);

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);

        virtualinvoke $r5.<java.lang.Thread: void start()>();

        return null;
    }

    public abstract android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String, android.os.Bundle) throws android.accounts.NetworkErrorException;

    public static void <clinit>()
    {
        <android.accounts.AbstractAccountAuthenticator: java.lang.String TAG> = "AccountAuthenticator";

        <android.accounts.AbstractAccountAuthenticator: java.lang.String KEY_REQUIRED_FEATURES> = "android.accounts.AbstractAccountAuthenticator.KEY_REQUIRED_FEATURES";

        <android.accounts.AbstractAccountAuthenticator: java.lang.String KEY_OPTIONS> = "android.accounts.AbstractAccountAuthenticator.KEY_OPTIONS";

        <android.accounts.AbstractAccountAuthenticator: java.lang.String KEY_CUSTOM_TOKEN_EXPIRY> = "android.accounts.expiry";

        <android.accounts.AbstractAccountAuthenticator: java.lang.String KEY_AUTH_TOKEN_TYPE> = "android.accounts.AbstractAccountAuthenticato.KEY_AUTH_TOKEN_TYPE";

        <android.accounts.AbstractAccountAuthenticator: java.lang.String KEY_ACCOUNT> = "android.accounts.AbstractAccountAuthenticator.KEY_ACCOUNT";

        return;
    }
}
