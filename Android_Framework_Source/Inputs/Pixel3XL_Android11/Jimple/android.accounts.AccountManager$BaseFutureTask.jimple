abstract class android.accounts.AccountManager$BaseFutureTask extends java.util.concurrent.FutureTask
{
    final android.os.Handler mHandler;
    public final android.accounts.IAccountManagerResponse mResponse;
    final android.accounts.AccountManager this$0;

    public void <init>(android.accounts.AccountManager, android.os.Handler)
    {
        android.accounts.AccountManager$BaseFutureTask r0;
        android.accounts.AccountManager r1;
        android.os.Handler r2;
        android.accounts.AccountManager$BaseFutureTask$1 $r3;
        android.accounts.AccountManager$BaseFutureTask$Response $r4;

        r0 := @this: android.accounts.AccountManager$BaseFutureTask;

        r1 := @parameter0: android.accounts.AccountManager;

        r2 := @parameter1: android.os.Handler;

        r0.<android.accounts.AccountManager$BaseFutureTask: android.accounts.AccountManager this$0> = r1;

        $r3 = new android.accounts.AccountManager$BaseFutureTask$1;

        specialinvoke $r3.<android.accounts.AccountManager$BaseFutureTask$1: void <init>(android.accounts.AccountManager)>(r1);

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r3);

        r0.<android.accounts.AccountManager$BaseFutureTask: android.os.Handler mHandler> = r2;

        $r4 = new android.accounts.AccountManager$BaseFutureTask$Response;

        specialinvoke $r4.<android.accounts.AccountManager$BaseFutureTask$Response: void <init>(android.accounts.AccountManager$BaseFutureTask)>(r0);

        r0.<android.accounts.AccountManager$BaseFutureTask: android.accounts.IAccountManagerResponse mResponse> = $r4;

        return;
    }

    static void access$1000(android.accounts.AccountManager$BaseFutureTask, java.lang.Object)
    {
        android.accounts.AccountManager$BaseFutureTask r0;
        java.lang.Object r1;

        r0 := @parameter0: android.accounts.AccountManager$BaseFutureTask;

        r1 := @parameter1: java.lang.Object;

        virtualinvoke r0.<android.accounts.AccountManager$BaseFutureTask: void set(java.lang.Object)>(r1);

        return;
    }

    static void access$1100(android.accounts.AccountManager$BaseFutureTask, java.lang.Throwable)
    {
        android.accounts.AccountManager$BaseFutureTask r0;
        java.lang.Throwable r1;

        r0 := @parameter0: android.accounts.AccountManager$BaseFutureTask;

        r1 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<android.accounts.AccountManager$BaseFutureTask: void setException(java.lang.Throwable)>(r1);

        return;
    }

    public abstract java.lang.Object bundleToResult(android.os.Bundle) throws android.accounts.AuthenticatorException;

    public abstract void doWork() throws android.os.RemoteException;

    protected void postRunnableToHandler(java.lang.Runnable)
    {
        android.accounts.AccountManager$BaseFutureTask r0;
        java.lang.Runnable r1;
        android.os.Handler r2, r4;
        android.accounts.AccountManager $r3;

        r0 := @this: android.accounts.AccountManager$BaseFutureTask;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<android.accounts.AccountManager$BaseFutureTask: android.os.Handler mHandler>;

        r4 = r2;

        if r2 != null goto label1;

        $r3 = r0.<android.accounts.AccountManager$BaseFutureTask: android.accounts.AccountManager this$0>;

        r4 = staticinvoke <android.accounts.AccountManager: android.os.Handler access$900(android.accounts.AccountManager)>($r3);

     label1:
        virtualinvoke r4.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

    protected void startTask()
    {
        android.accounts.AccountManager$BaseFutureTask r0;
        android.os.RemoteException $r2;

        r0 := @this: android.accounts.AccountManager$BaseFutureTask;

     label1:
        virtualinvoke r0.<android.accounts.AccountManager$BaseFutureTask: void doWork()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<android.accounts.AccountManager$BaseFutureTask: void setException(java.lang.Throwable)>($r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
