public class android.accounts.AccountManager extends java.lang.Object
{
    public static final java.lang.String ACCOUNT_ACCESS_TOKEN_TYPE;
    public static final java.lang.String ACTION_ACCOUNT_REMOVED;
    public static final java.lang.String ACTION_AUTHENTICATOR_INTENT;
    public static final java.lang.String ACTION_VISIBLE_ACCOUNTS_CHANGED;
    public static final java.lang.String AUTHENTICATOR_ATTRIBUTES_NAME;
    public static final java.lang.String AUTHENTICATOR_META_DATA_NAME;
    public static final int ERROR_CODE_BAD_ARGUMENTS;
    public static final int ERROR_CODE_BAD_AUTHENTICATION;
    public static final int ERROR_CODE_BAD_REQUEST;
    public static final int ERROR_CODE_CANCELED;
    public static final int ERROR_CODE_INVALID_RESPONSE;
    public static final int ERROR_CODE_MANAGEMENT_DISABLED_FOR_ACCOUNT_TYPE;
    public static final int ERROR_CODE_NETWORK_ERROR;
    public static final int ERROR_CODE_REMOTE_EXCEPTION;
    public static final int ERROR_CODE_UNSUPPORTED_OPERATION;
    public static final int ERROR_CODE_USER_RESTRICTED;
    public static final java.lang.String KEY_ACCOUNTS;
    public static final java.lang.String KEY_ACCOUNT_ACCESS_ID;
    public static final java.lang.String KEY_ACCOUNT_AUTHENTICATOR_RESPONSE;
    public static final java.lang.String KEY_ACCOUNT_MANAGER_RESPONSE;
    public static final java.lang.String KEY_ACCOUNT_NAME;
    public static final java.lang.String KEY_ACCOUNT_SESSION_BUNDLE;
    public static final java.lang.String KEY_ACCOUNT_STATUS_TOKEN;
    public static final java.lang.String KEY_ACCOUNT_TYPE;
    public static final java.lang.String KEY_ANDROID_PACKAGE_NAME;
    public static final java.lang.String KEY_AUTHENTICATOR_TYPES;
    public static final java.lang.String KEY_AUTHTOKEN;
    public static final java.lang.String KEY_AUTH_FAILED_MESSAGE;
    public static final java.lang.String KEY_AUTH_TOKEN_LABEL;
    public static final java.lang.String KEY_BOOLEAN_RESULT;
    public static final java.lang.String KEY_CALLER_PID;
    public static final java.lang.String KEY_CALLER_UID;
    public static final java.lang.String KEY_ERROR_CODE;
    public static final java.lang.String KEY_ERROR_MESSAGE;
    public static final java.lang.String KEY_INTENT;
    public static final java.lang.String KEY_LAST_AUTHENTICATED_TIME;
    public static final java.lang.String KEY_NOTIFY_ON_FAILURE;
    public static final java.lang.String KEY_PASSWORD;
    public static final java.lang.String KEY_USERDATA;
    public static final java.lang.String LOGIN_ACCOUNTS_CHANGED_ACTION;
    public static final java.lang.String PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE;
    public static final java.lang.String PACKAGE_NAME_KEY_LEGACY_VISIBLE;
    private static final java.lang.String TAG;
    public static final int VISIBILITY_NOT_VISIBLE;
    public static final int VISIBILITY_UNDEFINED;
    public static final int VISIBILITY_USER_MANAGED_NOT_VISIBLE;
    public static final int VISIBILITY_USER_MANAGED_VISIBLE;
    public static final int VISIBILITY_VISIBLE;
    private final android.content.BroadcastReceiver mAccountsChangedBroadcastReceiver;
    private final java.util.HashMap mAccountsUpdatedListeners;
    private final java.util.HashMap mAccountsUpdatedListenersTypes;
    private final android.content.Context mContext;
    private final android.os.Handler mMainHandler;
    private final android.accounts.IAccountManager mService;

    public void <init>(android.content.Context, android.accounts.IAccountManager)
    {
        android.accounts.AccountManager r0;
        android.content.Context r1, $r7;
        android.accounts.IAccountManager r2;
        java.util.HashMap $r3, $r4;
        android.accounts.AccountManager$18 $r5;
        android.os.Handler $r6;
        android.os.Looper $r8;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.accounts.IAccountManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners> = $r3;

        $r4 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListenersTypes> = $r4;

        $r5 = new android.accounts.AccountManager$18;

        specialinvoke $r5.<android.accounts.AccountManager$18: void <init>(android.accounts.AccountManager)>(r0);

        r0.<android.accounts.AccountManager: android.content.BroadcastReceiver mAccountsChangedBroadcastReceiver> = $r5;

        r0.<android.accounts.AccountManager: android.content.Context mContext> = r1;

        r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService> = r2;

        $r6 = new android.os.Handler;

        $r7 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>($r8);

        r0.<android.accounts.AccountManager: android.os.Handler mMainHandler> = $r6;

        return;
    }

    public void <init>(android.content.Context, android.accounts.IAccountManager, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.content.Context r1;
        android.accounts.IAccountManager r2;
        android.os.Handler r3;
        java.util.HashMap $r4, $r5;
        android.accounts.AccountManager$18 $r6;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.accounts.IAccountManager;

        r3 := @parameter2: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners> = $r4;

        $r5 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListenersTypes> = $r5;

        $r6 = new android.accounts.AccountManager$18;

        specialinvoke $r6.<android.accounts.AccountManager$18: void <init>(android.accounts.AccountManager)>(r0);

        r0.<android.accounts.AccountManager: android.content.BroadcastReceiver mAccountsChangedBroadcastReceiver> = $r6;

        r0.<android.accounts.AccountManager: android.content.Context mContext> = r1;

        r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService> = r2;

        r0.<android.accounts.AccountManager: android.os.Handler mMainHandler> = r3;

        return;
    }

    static android.accounts.IAccountManager access$000(android.accounts.AccountManager)
    {
        android.accounts.AccountManager r0;
        android.accounts.IAccountManager $r1;

        r0 := @parameter0: android.accounts.AccountManager;

        $r1 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        return $r1;
    }

    static android.content.Context access$100(android.accounts.AccountManager)
    {
        android.accounts.AccountManager r0;
        android.content.Context $r1;

        r0 := @parameter0: android.accounts.AccountManager;

        $r1 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        return $r1;
    }

    static void access$1600(android.accounts.AccountManager, java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;

        r0 := @parameter0: android.accounts.AccountManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: android.accounts.AccountManagerCallback;

        r4 := @parameter4: android.os.Handler;

        specialinvoke r0.<android.accounts.AccountManager: void getAccountByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>(r1, r2, r3, r4);

        return;
    }

    static void access$1700(android.accounts.AccountManager, android.os.Handler, android.accounts.OnAccountsUpdateListener, android.accounts.Account[])
    {
        android.accounts.AccountManager r0;
        android.os.Handler r1;
        android.accounts.OnAccountsUpdateListener r2;
        android.accounts.Account[] r3;

        r0 := @parameter0: android.accounts.AccountManager;

        r1 := @parameter1: android.os.Handler;

        r2 := @parameter2: android.accounts.OnAccountsUpdateListener;

        r3 := @parameter3: android.accounts.Account[];

        specialinvoke r0.<android.accounts.AccountManager: void postToHandler(android.os.Handler,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])>(r1, r2, r3);

        return;
    }

    static java.util.HashMap access$200(android.accounts.AccountManager)
    {
        android.accounts.AccountManager r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.accounts.AccountManager;

        $r1 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        return $r1;
    }

    static java.util.HashMap access$300(android.accounts.AccountManager)
    {
        android.accounts.AccountManager r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.accounts.AccountManager;

        $r1 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListenersTypes>;

        return $r1;
    }

    static void access$500(android.accounts.AccountManager)
    {
        android.accounts.AccountManager r0;

        r0 := @parameter0: android.accounts.AccountManager;

        specialinvoke r0.<android.accounts.AccountManager: void ensureNotOnMainThread()>();

        return;
    }

    static void access$600(android.accounts.AccountManager, android.os.Handler, android.accounts.AccountManagerCallback, android.accounts.AccountManagerFuture)
    {
        android.accounts.AccountManager r0;
        android.os.Handler r1;
        android.accounts.AccountManagerCallback r2;
        android.accounts.AccountManagerFuture r3;

        r0 := @parameter0: android.accounts.AccountManager;

        r1 := @parameter1: android.os.Handler;

        r2 := @parameter2: android.accounts.AccountManagerCallback;

        r3 := @parameter3: android.accounts.AccountManagerFuture;

        specialinvoke r0.<android.accounts.AccountManager: void postToHandler(android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.AccountManagerFuture)>(r1, r2, r3);

        return;
    }

    static java.lang.Exception access$700(android.accounts.AccountManager, int, java.lang.String)
    {
        android.accounts.AccountManager r0;
        int i0;
        java.lang.String r1;
        java.lang.Exception $r2;

        r0 := @parameter0: android.accounts.AccountManager;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<android.accounts.AccountManager: java.lang.Exception convertErrorToException(int,java.lang.String)>(i0, r1);

        return $r2;
    }

    static android.os.Handler access$900(android.accounts.AccountManager)
    {
        android.accounts.AccountManager r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.accounts.AccountManager;

        $r1 = r0.<android.accounts.AccountManager: android.os.Handler mMainHandler>;

        return $r1;
    }

    private java.lang.Exception convertErrorToException(int, java.lang.String)
    {
        android.accounts.AccountManager r0;
        int i0;
        java.lang.String r1;
        android.accounts.AuthenticatorException $r2, $r4;
        java.lang.IllegalArgumentException $r3;
        java.lang.UnsupportedOperationException $r5;
        java.io.IOException $r6;

        r0 := @this: android.accounts.AccountManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 != 3 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>(r1);

        return $r6;

     label1:
        if i0 != 6 goto label2;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(r1);

        return $r5;

     label2:
        if i0 != 5 goto label3;

        $r4 = new android.accounts.AuthenticatorException;

        specialinvoke $r4.<android.accounts.AuthenticatorException: void <init>(java.lang.String)>(r1);

        return $r4;

     label3:
        if i0 != 7 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        return $r3;

     label4:
        $r2 = new android.accounts.AuthenticatorException;

        specialinvoke $r2.<android.accounts.AuthenticatorException: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    private void ensureNotOnMainThread()
    {
        android.accounts.AccountManager r0;
        android.content.Context $r1, $r4;
        android.os.Looper $r2, r6;
        java.lang.IllegalStateException $r3;
        android.content.pm.ApplicationInfo $r5;
        int $i1;

        r0 := @this: android.accounts.AccountManager;

        r6 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r6 == null goto label2;

        $r1 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.os.Looper getMainLooper()>();

        if r6 != $r2 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("calling this from your main thread can lead to deadlock");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManager", "calling this from your main thread can lead to deadlock and/or ANRs", $r3);

        $r4 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 >= 8 goto label1;

        goto label2;

     label1:
        throw $r3;

     label2:
        return;
    }

    public static android.accounts.AccountManager get(android.content.Context)
    {
        android.content.Context r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object $r2;
        android.accounts.AccountManager $r3;

        r0 := @parameter0: android.content.Context;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("account");

        $r3 = (android.accounts.AccountManager) $r2;

        return $r3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context is null");

        throw $r1;
    }

    private void getAccountByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        android.accounts.AccountManager$17 $r5;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        $r5 = new android.accounts.AccountManager$17;

        specialinvoke $r5.<android.accounts.AccountManager$17: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String[])>(r0, null, r4, r3, r1, r2);

        virtualinvoke $r5.<android.accounts.AccountManager$17: android.accounts.AccountManagerFuture start()>();

        return;
    }

    public static android.content.Intent newChooseAccountIntent(android.accounts.Account, java.util.ArrayList, java.lang.String[], boolean, java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle)
    {
        android.accounts.Account r0;
        java.util.ArrayList r1;
        java.lang.String[] r2, r5;
        boolean z0;
        java.lang.String r3, r4;
        android.os.Bundle r6;
        android.content.Intent $r7;

        r0 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String[];

        r6 := @parameter7: android.os.Bundle;

        $r7 = staticinvoke <android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.List,java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>(r0, r1, r2, r3, r4, r5, r6);

        return $r7;
    }

    public static android.content.Intent newChooseAccountIntent(android.accounts.Account, java.util.List, java.lang.String[], java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle)
    {
        android.accounts.Account r0;
        java.lang.String[] r1, r4;
        java.lang.String r2, r3, $r10, $r11, $r12;
        android.os.Bundle r5;
        android.content.ComponentName r7;
        android.content.Intent $r8;
        android.content.res.Resources $r9;
        java.util.ArrayList $r14, r23;
        java.util.List r22;

        r0 := @parameter0: android.accounts.Account;

        r22 := @parameter1: java.util.List;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String[];

        r5 := @parameter6: android.os.Bundle;

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>()>();

        $r9 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int)>(17039838);

        r7 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r10);

        $r11 = virtualinvoke r7.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r12 = virtualinvoke r7.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke $r8.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r11, $r12);

        if r22 != null goto label1;

        r23 = null;

        goto label2;

     label1:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>(r22);

        r23 = $r14;

     label2:
        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>("allowableAccounts", r23);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>("allowableAccountTypes", r1);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>("addAccountOptions", r5);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("selectedAccount", r0);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("descriptionTextOverride", r2);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("authTokenType", r3);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>("addAccountRequiredFeatures", r4);

        return $r8;
    }

    private void postToHandler(android.os.Handler, android.accounts.AccountManagerCallback, android.accounts.AccountManagerFuture)
    {
        android.accounts.AccountManager r0;
        android.accounts.AccountManagerCallback r1;
        android.accounts.AccountManagerFuture r2;
        android.accounts.AccountManager$15 $r3;
        android.os.Handler r4;

        r0 := @this: android.accounts.AccountManager;

        r4 := @parameter0: android.os.Handler;

        r1 := @parameter1: android.accounts.AccountManagerCallback;

        r2 := @parameter2: android.accounts.AccountManagerFuture;

        if r4 != null goto label1;

        r4 = r0.<android.accounts.AccountManager: android.os.Handler mMainHandler>;

        goto label1;

     label1:
        $r3 = new android.accounts.AccountManager$15;

        specialinvoke $r3.<android.accounts.AccountManager$15: void <init>(android.accounts.AccountManager,android.accounts.AccountManagerCallback,android.accounts.AccountManagerFuture)>(r0, r1, r2);

        virtualinvoke r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    private void postToHandler(android.os.Handler, android.accounts.OnAccountsUpdateListener, android.accounts.Account[])
    {
        android.accounts.AccountManager r0;
        android.accounts.OnAccountsUpdateListener r1;
        android.accounts.Account[] r2, r3;
        int $i0, $i1;
        android.accounts.AccountManager$16 $r4;
        android.os.Handler r5;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.os.Handler;

        r1 := @parameter1: android.accounts.OnAccountsUpdateListener;

        r2 := @parameter2: android.accounts.Account[];

        $i0 = lengthof r2;

        r3 = newarray (android.accounts.Account)[$i0];

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i1);

        if r5 != null goto label1;

        r5 = r0.<android.accounts.AccountManager: android.os.Handler mMainHandler>;

        goto label1;

     label1:
        $r4 = new android.accounts.AccountManager$16;

        specialinvoke $r4.<android.accounts.AccountManager$16: void <init>(android.accounts.AccountManager,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])>(r0, r1, r3);

        virtualinvoke r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    public static android.os.Bundle sanitizeResult(android.os.Bundle)
    {
        boolean $z0, $z1;
        java.lang.String $r0;
        android.os.Bundle $r1, r2;

        r2 := @parameter0: android.os.Bundle;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.os.Bundle: boolean containsKey(java.lang.String)>("authtoken");

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("authtoken");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z1 != 0 goto label1;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>(android.os.Bundle)>(r2);

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authtoken", "<omitted for logging purposes>");

        return $r1;

     label1:
        return r2;
    }

    public android.accounts.AccountManagerFuture addAccount(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r2, $r18;
        java.lang.String[] r3;
        android.os.Bundle r4, $r16;
        android.app.Activity r5;
        android.accounts.AccountManagerCallback r6;
        android.os.Handler r7;
        android.os.UserHandle $r9, $r11, $r13;
        android.content.Context $r10, $r12, $r17;
        boolean $z0;
        android.accounts.AccountManagerFuture $r14, $r20;
        java.lang.IllegalArgumentException $r15;
        android.accounts.AccountManager$9 $r19;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: android.os.Bundle;

        r5 := @parameter4: android.app.Activity;

        r6 := @parameter5: android.accounts.AccountManagerCallback;

        r7 := @parameter6: android.os.Handler;

        $r9 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $r10 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.os.UserHandle getUser()>();

        $z0 = virtualinvoke $r9.<android.os.UserHandle: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label3;

        if r1 == null goto label2;

        $r16 = new android.os.Bundle;

        specialinvoke $r16.<android.os.Bundle: void <init>()>();

        if r4 == null goto label1;

        virtualinvoke $r16.<android.os.Bundle: void putAll(android.os.Bundle)>(r4);

     label1:
        $r17 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r16.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("androidPackageName", $r18);

        $r19 = new android.accounts.AccountManager$9;

        specialinvoke $r19.<android.accounts.AccountManager$9: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle)>(r0, r5, r7, r6, r1, r2, r3, r5, $r16);

        $r20 = virtualinvoke $r19.<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()>();

        return $r20;

     label2:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r15;

     label3:
        $r12 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: android.os.UserHandle getUser()>();

        $r14 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccountAsUser(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>(r1, r2, r3, r4, r5, r6, r7, $r13);

        return $r14;
    }

    public android.accounts.AccountManagerFuture addAccountAsUser(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r2, $r14;
        java.lang.String[] r3;
        android.os.Bundle r4, $r12;
        android.app.Activity r5;
        android.accounts.AccountManagerCallback r6;
        android.os.Handler r7;
        android.os.UserHandle r8;
        java.lang.IllegalArgumentException $r10, $r11;
        android.content.Context $r13;
        android.accounts.AccountManager$10 $r15;
        android.accounts.AccountManagerFuture $r16;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: android.os.Bundle;

        r5 := @parameter4: android.app.Activity;

        r6 := @parameter5: android.accounts.AccountManagerCallback;

        r7 := @parameter6: android.os.Handler;

        r8 := @parameter7: android.os.UserHandle;

        if r1 == null goto label3;

        if r8 == null goto label2;

        $r12 = new android.os.Bundle;

        specialinvoke $r12.<android.os.Bundle: void <init>()>();

        if r4 == null goto label1;

        virtualinvoke $r12.<android.os.Bundle: void putAll(android.os.Bundle)>(r4);

     label1:
        $r13 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("androidPackageName", $r14);

        $r15 = new android.accounts.AccountManager$10;

        specialinvoke $r15.<android.accounts.AccountManager$10: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.UserHandle)>(r0, r5, r7, r6, r1, r2, r3, r5, $r12, r8);

        $r16 = virtualinvoke $r15.<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start()>();

        return $r16;

     label2:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("userHandle is null");

        throw $r11;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r10;
    }

    public boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        android.os.Bundle r2;
        boolean z0;
        java.lang.IllegalArgumentException $r3;
        android.accounts.IAccountManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.accounts.Account r7;

        r0 := @this: android.accounts.AccountManager;

        r7 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        if r7 == null goto label4;

     label1:
        $r4 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        z0 = interfaceinvoke $r4.<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>(r7, r1, r2);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle, java.util.Map)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        android.os.Bundle r2;
        java.util.Map r3;
        boolean z0;
        java.lang.IllegalArgumentException $r4;
        android.accounts.IAccountManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.accounts.Account r8;

        r0 := @this: android.accounts.AccountManager;

        r8 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: java.util.Map;

        if r8 == null goto label4;

     label1:
        $r5 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        z0 = interfaceinvoke $r5.<android.accounts.IAccountManager: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>(r8, r1, r2, r3);

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean)
    {
        android.accounts.AccountManager r0;
        android.accounts.OnAccountsUpdateListener r1;
        android.os.Handler r2;
        boolean z0;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.OnAccountsUpdateListener;

        r2 := @parameter1: android.os.Handler;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean,java.lang.String[])>(r1, r2, z0, null);

        return;
    }

    public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean, java.lang.String[])
    {
        android.accounts.AccountManager r0;
        android.os.Handler r1;
        boolean z0, z1, $z2;
        java.lang.String[] r2;
        java.util.HashMap r3, r4, $r6, $r7, $r8, $r10;
        java.lang.IllegalArgumentException $r5;
        android.content.Context $r12, $r17;
        android.accounts.IAccountManager $r13;
        java.lang.String $r14;
        android.accounts.Account[] $r15;
        android.content.BroadcastReceiver $r16;
        java.util.List $r19;
        android.os.RemoteException $r21;
        java.lang.RuntimeException $r22;
        java.lang.Throwable $r23;
        android.accounts.OnAccountsUpdateListener r24;
        java.util.HashSet r25;
        android.content.IntentFilter r26;
        java.lang.IllegalStateException r28;

        r0 := @this: android.accounts.AccountManager;

        r24 := @parameter0: android.accounts.OnAccountsUpdateListener;

        r1 := @parameter1: android.os.Handler;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String[];

        if r24 == null goto label18;

        r3 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        entermonitor r3;

     label01:
        $r6 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        $z2 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r24);

        if $z2 != 0 goto label14;

        $r7 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        z1 = virtualinvoke $r7.<java.util.HashMap: boolean isEmpty()>();

        $r8 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, r1);

     label02:
        if r2 == null goto label05;

     label03:
        r4 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListenersTypes>;

        r25 = new java.util.HashSet;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        specialinvoke r25.<java.util.HashSet: void <init>(java.util.Collection)>($r19);

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, r25);

     label04:
        goto label06;

     label05:
        $r10 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListenersTypes>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, null);

     label06:
        if z1 == 0 goto label08;

     label07:
        r26 = new android.content.IntentFilter;

        specialinvoke r26.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r26.<android.content.IntentFilter: void addAction(java.lang.String)>("android.accounts.action.VISIBLE_ACCOUNTS_CHANGED");

        virtualinvoke r26.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DEVICE_STORAGE_OK");

        $r17 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r16 = r0.<android.accounts.AccountManager: android.content.BroadcastReceiver mAccountsChangedBroadcastReceiver>;

        virtualinvoke $r17.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r16, r26);

     label08:
        $r13 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $r12 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r14 = virtualinvoke $r12.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r13.<android.accounts.IAccountManager: void registerAccountListener(java.lang.String[],java.lang.String)>(r2, $r14);

     label09:
        exitmonitor r3;

     label10:
        if z0 == 0 goto label11;

        $r15 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>();

        specialinvoke r0.<android.accounts.AccountManager: void postToHandler(android.os.Handler,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])>(r1, r24, $r15);

     label11:
        return;

     label12:
        $r21 := @caughtexception;

     label13:
        $r22 = virtualinvoke $r21.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r22;

     label14:
        r28 = new java.lang.IllegalStateException;

        specialinvoke r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this listener is already added");

        throw r28;

     label15:
        $r23 := @caughtexception;

     label16:
        exitmonitor r3;

     label17:
        throw $r23;

     label18:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the listener is null");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch android.os.RemoteException from label08 to label09 with label12;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void addSharedAccountsFromParentUser(android.os.UserHandle, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        android.os.UserHandle r1, r7;
        android.accounts.IAccountManager $r2;
        int $i0, $i1;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.accounts.AccountManager;

        r7 := @parameter0: android.os.UserHandle;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $i0 = virtualinvoke r7.<android.os.UserHandle: int getIdentifier()>();

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r3 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.accounts.IAccountManager: void addSharedAccountsFromParentUser(int,int,java.lang.String)>($i0, $i1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String blockingGetAuthToken(android.accounts.Account, java.lang.String, boolean) throws android.accounts.OperationCanceledException, java.io.IOException, android.accounts.AuthenticatorException
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2, $r7, $r13;
        boolean z0;
        java.lang.IllegalArgumentException $r3, $r4;
        android.accounts.AccountManagerFuture $r5;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8;
        android.os.Bundle r14;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r1 == null goto label3;

        if r2 == null goto label2;

        $r5 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>(r1, r2, z0, null, null);

        $r6 = interfaceinvoke $r5.<android.accounts.AccountManagerFuture: java.lang.Object getResult()>();

        r14 = (android.os.Bundle) $r6;

        if r14 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blockingGetAuthToken: null was returned from getResult() for ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManager", $r13);

        return null;

     label1:
        $r7 = virtualinvoke r14.<android.os.Bundle: java.lang.String getString(java.lang.String)>("authtoken");

        return $r7;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r3;
    }

    public void clearPassword(android.accounts.Account)
    {
        android.accounts.AccountManager r0;
        java.lang.IllegalArgumentException $r1;
        android.accounts.IAccountManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.accounts.Account r5;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.accounts.Account;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        interfaceinvoke $r2.<android.accounts.IAccountManager: void clearPassword(android.accounts.Account)>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        android.os.Bundle r2;
        android.app.Activity r3;
        android.accounts.AccountManagerCallback r4;
        android.os.Handler r5;
        android.content.Context $r6;
        android.os.UserHandle $r7;
        android.accounts.AccountManagerFuture $r8;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.app.Activity;

        r4 := @parameter3: android.accounts.AccountManagerCallback;

        r5 := @parameter4: android.os.Handler;

        $r6 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.os.UserHandle getUser()>();

        $r8 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>(r1, r2, r3, r4, r5, $r7);

        return $r8;
    }

    public android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        android.os.Bundle r2;
        android.app.Activity r3;
        android.accounts.AccountManagerCallback r4;
        android.os.Handler r5;
        android.os.UserHandle r6;
        java.lang.IllegalArgumentException $r7;
        android.accounts.AccountManager$12 $r8;
        int $i0;
        android.accounts.AccountManagerFuture $r9;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.app.Activity;

        r4 := @parameter3: android.accounts.AccountManagerCallback;

        r5 := @parameter4: android.os.Handler;

        r6 := @parameter5: android.os.UserHandle;

        if r1 == null goto label1;

        $r8 = new android.accounts.AccountManager$12;

        $i0 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke $r8.<android.accounts.AccountManager$12: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,android.os.Bundle,android.app.Activity,int)>(r0, r3, r5, r4, r1, r2, r3, $i0);

        $r9 = virtualinvoke $r8.<android.accounts.AccountManager$12: android.accounts.AccountManagerFuture start()>();

        return $r9;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r7;
    }

    public android.accounts.AccountManagerFuture copyAccountToUser(android.accounts.Account, android.os.UserHandle, android.os.UserHandle, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        android.os.UserHandle r2, r3;
        android.accounts.AccountManagerCallback r4;
        android.os.Handler r5;
        java.lang.IllegalArgumentException $r6, $r7;
        android.accounts.AccountManager$11 $r8;
        android.accounts.AccountManager$Future2Task $r9;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.os.UserHandle;

        r4 := @parameter3: android.accounts.AccountManagerCallback;

        r5 := @parameter4: android.os.Handler;

        if r1 == null goto label2;

        if r3 == null goto label1;

        if r2 == null goto label1;

        $r8 = new android.accounts.AccountManager$11;

        specialinvoke $r8.<android.accounts.AccountManager$11: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,android.os.UserHandle,android.os.UserHandle)>(r0, r5, r4, r1, r2, r3);

        $r9 = virtualinvoke $r8.<android.accounts.AccountManager$11: android.accounts.AccountManager$Future2Task start()>();

        return $r9;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fromUser and toUser cannot be null");

        throw $r7;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r6;
    }

    public android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account, java.lang.String, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        android.accounts.IAccountManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.accounts.Account r6;
        android.content.IntentSender r7;

        r0 := @this: android.accounts.AccountManager;

        r6 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

     label1:
        $r3 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        r7 = interfaceinvoke $r3.<android.accounts.IAccountManager: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>(r6, r1, r2);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture editProperties(java.lang.String, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        android.app.Activity r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        java.lang.IllegalArgumentException $r5;
        android.accounts.AccountManager$14 $r6;
        android.accounts.AccountManagerFuture $r7;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.app.Activity;

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        if r1 == null goto label1;

        $r6 = new android.accounts.AccountManager$14;

        specialinvoke $r6.<android.accounts.AccountManager$14: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,android.app.Activity)>(r0, r2, r4, r3, r1, r2);

        $r7 = virtualinvoke $r6.<android.accounts.AccountManager$14: android.accounts.AccountManagerFuture start()>();

        return $r7;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r5;
    }

    public android.accounts.AccountManagerFuture finishSession(android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.os.Bundle r1;
        android.app.Activity r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        android.content.Context $r5;
        android.os.UserHandle $r6;
        android.accounts.AccountManagerFuture $r7;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: android.app.Activity;

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        $r5 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.os.UserHandle getUser()>();

        $r7 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AccountManagerFuture finishSessionAsUser(android.os.Bundle,android.app.Activity,android.os.UserHandle,android.accounts.AccountManagerCallback,android.os.Handler)>(r1, r2, $r6, r3, r4);

        return $r7;
    }

    public android.accounts.AccountManagerFuture finishSessionAsUser(android.os.Bundle, android.app.Activity, android.os.UserHandle, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.os.Bundle r1, $r8;
        android.app.Activity r2;
        android.os.UserHandle r3;
        android.accounts.AccountManagerCallback r4;
        android.os.Handler r5;
        java.lang.IllegalArgumentException $r7;
        android.content.Context $r9;
        java.lang.String $r10;
        android.accounts.AccountManager$21 $r11;
        android.accounts.AccountManagerFuture $r12;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: android.app.Activity;

        r3 := @parameter2: android.os.UserHandle;

        r4 := @parameter3: android.accounts.AccountManagerCallback;

        r5 := @parameter4: android.os.Handler;

        if r1 == null goto label1;

        $r8 = new android.os.Bundle;

        specialinvoke $r8.<android.os.Bundle: void <init>()>();

        $r9 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("androidPackageName", $r10);

        $r11 = new android.accounts.AccountManager$21;

        specialinvoke $r11.<android.accounts.AccountManager$21: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.os.Bundle,android.app.Activity,android.os.Bundle,android.os.UserHandle)>(r0, r2, r5, r4, r1, r2, $r8, r3);

        $r12 = virtualinvoke $r11.<android.accounts.AccountManager$21: android.accounts.AccountManagerFuture start()>();

        return $r12;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sessionBundle is null");

        throw $r7;
    }

    public int getAccountVisibility(android.accounts.Account, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.accounts.IAccountManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.accounts.Account r6;

        r0 := @this: android.accounts.AccountManager;

        r6 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        if r6 == null goto label4;

     label1:
        $r3 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        i0 = interfaceinvoke $r3.<android.accounts.IAccountManager: int getAccountVisibility(android.accounts.Account,java.lang.String)>(r6, r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.Account[] getAccounts()
    {
        android.accounts.AccountManager r0;
        android.content.Context $r1;
        int $i0;
        android.accounts.Account[] $r2;

        r0 := @this: android.accounts.AccountManager;

        $r1 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.Account[] getAccountsAsUser(int)>($i0);

        return $r2;
    }

    public java.util.Map getAccountsAndVisibilityForPackage(java.lang.String, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r5;
        android.accounts.IAccountManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.Map r6;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        r6 = interfaceinvoke $r2.<android.accounts.IAccountManager: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.Account[] getAccountsAsUser(int)
    {
        android.accounts.AccountManager r0;
        int i0;
        android.content.Context $r1;
        android.accounts.IAccountManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.accounts.Account[] r6;

        r0 := @this: android.accounts.AccountManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $r1 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke $r2.<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>(null, i0, $r3);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.Account[] getAccountsByType(java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        android.content.Context $r2;
        android.os.UserHandle $r3;
        android.accounts.Account[] $r4;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.os.UserHandle getUser()>();

        $r4 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)>(r1, $r3);

        return $r4;
    }

    public android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        java.lang.IllegalArgumentException $r5;
        android.accounts.AccountManager$3 $r6;
        android.accounts.AccountManager$Future2Task $r7;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        if r1 == null goto label1;

        $r6 = new android.accounts.AccountManager$3;

        specialinvoke $r6.<android.accounts.AccountManager$3: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String[])>(r0, r4, r3, r1, r2);

        $r7 = virtualinvoke $r6.<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()>();

        return $r7;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("type is null");

        throw $r5;
    }

    public android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        android.os.UserHandle r1;
        android.accounts.IAccountManager $r2;
        int $i0;
        android.content.Context $r3;
        java.lang.String $r4, r7;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.accounts.Account[] r8;

        r0 := @this: android.accounts.AccountManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r3 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        r8 = interfaceinvoke $r2.<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>(r7, $i0, $r4);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, $r4, r7;
        android.content.Context $r2;
        android.accounts.IAccountManager $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.accounts.Account[] r8;

        r0 := @this: android.accounts.AccountManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $r2 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        r8 = interfaceinvoke $r3.<android.accounts.IAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)>(r7, r1, $r4);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.Account[] getAccountsForPackage(java.lang.String, int)
    {
        android.accounts.AccountManager r0;
        int i0;
        android.content.Context $r1;
        android.accounts.IAccountManager $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.accounts.Account[] r7;

        r0 := @this: android.accounts.AccountManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $r1 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r7 = interfaceinvoke $r2.<android.accounts.IAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)>(r6, i0, $r3);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2, $r12;
        android.os.Bundle r3, $r10;
        android.app.Activity r4;
        android.accounts.AccountManagerCallback r5;
        android.os.Handler r6;
        java.lang.IllegalArgumentException $r8, $r9;
        android.content.Context $r11;
        android.accounts.AccountManager$7 $r13;
        android.accounts.AccountManagerFuture $r14;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.app.Activity;

        r5 := @parameter4: android.accounts.AccountManagerCallback;

        r6 := @parameter5: android.os.Handler;

        if r1 == null goto label3;

        if r2 == null goto label2;

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        if r3 == null goto label1;

        virtualinvoke $r10.<android.os.Bundle: void putAll(android.os.Bundle)>(r3);

     label1:
        $r11 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("androidPackageName", $r12);

        $r13 = new android.accounts.AccountManager$7;

        specialinvoke $r13.<android.accounts.AccountManager$7: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,android.os.Bundle)>(r0, r4, r6, r5, r1, r2, $r10);

        $r14 = virtualinvoke $r13.<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()>();

        return $r14;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r9;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r8;
    }

    public android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, boolean, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2, $r11;
        android.os.Bundle r3, $r9;
        boolean z0;
        android.accounts.AccountManagerCallback r4;
        android.os.Handler r5;
        java.lang.IllegalArgumentException $r7, $r8;
        android.content.Context $r10;
        android.accounts.AccountManager$8 $r12;
        android.accounts.AccountManagerFuture $r13;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        z0 := @parameter3: boolean;

        r4 := @parameter4: android.accounts.AccountManagerCallback;

        r5 := @parameter5: android.os.Handler;

        if r1 == null goto label3;

        if r2 == null goto label2;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        if r3 == null goto label1;

        virtualinvoke $r9.<android.os.Bundle: void putAll(android.os.Bundle)>(r3);

     label1:
        $r10 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r9.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("androidPackageName", $r11);

        $r12 = new android.accounts.AccountManager$8;

        specialinvoke $r12.<android.accounts.AccountManager$8: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>(r0, null, r5, r4, r1, r2, z0, $r9);

        $r13 = virtualinvoke $r12.<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()>();

        return $r13;

     label2:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r8;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r7;
    }

    public android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, boolean, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2;
        boolean z0;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        android.accounts.AccountManagerFuture $r5;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: android.accounts.AccountManagerCallback;

        r4 := @parameter4: android.os.Handler;

        $r5 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>(r1, r2, null, z0, r3, r4);

        return $r5;
    }

    public android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String, java.lang.String, java.lang.String[], android.app.Activity, android.os.Bundle, android.os.Bundle, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r12;
        java.lang.String[] r2;
        android.app.Activity r3;
        android.os.Bundle r4, r5;
        android.accounts.AccountManagerCallback r6;
        android.os.Handler r7;
        java.lang.IllegalArgumentException $r8, $r9;
        android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask $r10;

        r0 := @this: android.accounts.AccountManager;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: android.app.Activity;

        r4 := @parameter4: android.os.Bundle;

        r5 := @parameter5: android.os.Bundle;

        r6 := @parameter6: android.accounts.AccountManagerCallback;

        r7 := @parameter7: android.os.Handler;

        if r12 == null goto label2;

        if r1 == null goto label1;

        $r10 = new android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask;

        specialinvoke $r10.<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void <init>(android.accounts.AccountManager,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>(r0, r12, r1, r2, r3, r4, r5, r6, r7);

        virtualinvoke $r10.<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()>();

        return $r10;

     label1:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r9;

     label2:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account type is null");

        throw $r8;
    }

    public android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String, java.lang.String, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        java.lang.IllegalArgumentException $r5, $r6;
        android.accounts.AccountManager$1 $r7;
        android.accounts.AccountManager$Future2Task $r8;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        if r1 == null goto label2;

        if r2 == null goto label1;

        $r7 = new android.accounts.AccountManager$1;

        specialinvoke $r7.<android.accounts.AccountManager$1: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String)>(r0, r4, r3, r1, r2);

        $r8 = virtualinvoke $r7.<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()>();

        return $r8;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r5;
    }

    public android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()
    {
        android.accounts.AccountManager r0;
        android.content.Context $r1;
        int $i0;
        android.accounts.AuthenticatorDescription[] $r2;

        r0 := @this: android.accounts.AccountManager;

        $r1 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypesAsUser(int)>($i0);

        return $r2;
    }

    public android.accounts.AuthenticatorDescription[] getAuthenticatorTypesAsUser(int)
    {
        android.accounts.AccountManager r0;
        int i0;
        android.accounts.IAccountManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.accounts.AuthenticatorDescription[] r4;

        r0 := @this: android.accounts.AccountManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        r4 = interfaceinvoke $r1.<android.accounts.IAccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)
    {
        android.accounts.AccountManager r0;
        android.accounts.IAccountManager $r1;
        java.util.Map $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.accounts.Account r5;
        java.lang.IllegalArgumentException r7;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.accounts.Account;

        if r5 == null goto label3;

     label1:
        $r1 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $r2 = interfaceinvoke $r1.<android.accounts.IAccountManager: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>(r5);

        return $r2;

     label2:
        $r3 := @caughtexception;

        goto label4;

     label3:
        r7 = new java.lang.IllegalArgumentException;

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw r7;

     label4:
        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label2;
        catch android.os.RemoteException from label3 to label4 with label2;
    }

    public java.lang.String getPassword(android.accounts.Account)
    {
        android.accounts.AccountManager r0;
        java.lang.IllegalArgumentException $r1;
        android.accounts.IAccountManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.accounts.Account r5;
        java.lang.String r6;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.accounts.Account;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        r6 = interfaceinvoke $r2.<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getPreviousName(android.accounts.Account)
    {
        android.accounts.AccountManager r0;
        java.lang.IllegalArgumentException $r1;
        android.accounts.IAccountManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.accounts.Account r5;
        java.lang.String r6;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.accounts.Account;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        r6 = interfaceinvoke $r2.<android.accounts.IAccountManager: java.lang.String getPreviousName(android.accounts.Account)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getUserData(android.accounts.Account, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r8;
        java.lang.IllegalArgumentException $r2, $r3;
        android.accounts.IAccountManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.accounts.Account r7;

        r0 := @this: android.accounts.AccountManager;

        r7 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        if r7 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r4 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        r8 = interfaceinvoke $r4.<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>(r7, r1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key is null");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasAccountAccess(android.accounts.Account, java.lang.String, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        boolean z0;
        android.accounts.IAccountManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.accounts.Account r6;

        r0 := @this: android.accounts.AccountManager;

        r6 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

     label1:
        $r3 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        z0 = interfaceinvoke $r3.<android.accounts.IAccountManager: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>(r6, r1, r2);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String[] r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        java.lang.IllegalArgumentException $r5, $r6;
        android.accounts.AccountManager$2 $r7;
        android.accounts.AccountManager$Future2Task $r8;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        if r1 == null goto label2;

        if r2 == null goto label1;

        $r7 = new android.accounts.AccountManager$2;

        specialinvoke $r7.<android.accounts.AccountManager$2: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String[])>(r0, r4, r3, r1, r2);

        $r8 = virtualinvoke $r7.<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()>();

        return $r8;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("features is null");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r5;
    }

    public void invalidateAuthToken(java.lang.String, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r6;
        java.lang.IllegalArgumentException $r2;
        android.accounts.IAccountManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.accounts.AccountManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r6 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r3 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        interfaceinvoke $r3.<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>(r6, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture isCredentialsUpdateSuggested(android.accounts.Account, java.lang.String, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        java.lang.IllegalArgumentException $r5, $r6;
        boolean $z0;
        android.accounts.AccountManager$22 $r7;
        android.accounts.AccountManager$Future2Task $r8;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        if r1 == null goto label2;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $r7 = new android.accounts.AccountManager$22;

        specialinvoke $r7.<android.accounts.AccountManager$22: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String)>(r0, r4, r3, r1, r2);

        $r8 = virtualinvoke $r7.<android.accounts.AccountManager$22: android.accounts.AccountManager$Future2Task start()>();

        return $r8;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("status token is empty");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r5;
    }

    public boolean notifyAccountAuthenticated(android.accounts.Account)
    {
        android.accounts.AccountManager r0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        android.accounts.IAccountManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.accounts.Account r5;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.accounts.Account;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        z0 = interfaceinvoke $r2.<android.accounts.IAccountManager: boolean accountAuthenticated(android.accounts.Account)>(r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String peekAuthToken(android.accounts.Account, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r8;
        java.lang.IllegalArgumentException $r2, $r3;
        android.accounts.IAccountManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.accounts.Account r7;

        r0 := @this: android.accounts.AccountManager;

        r7 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        if r7 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r4 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        r8 = interfaceinvoke $r4.<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>(r7, r1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture removeAccount(android.accounts.Account, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        android.accounts.AccountManagerCallback r2;
        android.os.Handler r3;
        android.content.Context $r4;
        android.os.UserHandle $r5;
        android.accounts.AccountManagerFuture $r6;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.accounts.AccountManagerCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.os.UserHandle getUser()>();

        $r6 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>(r1, r2, r3, $r5);

        return $r6;
    }

    public android.accounts.AccountManagerFuture removeAccount(android.accounts.Account, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        android.app.Activity r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        android.content.Context $r5;
        android.os.UserHandle $r6;
        android.accounts.AccountManagerFuture $r7;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.app.Activity;

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        $r5 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.os.UserHandle getUser()>();

        $r7 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>(r1, r2, r3, r4, $r6);

        return $r7;
    }

    public android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account, android.accounts.AccountManagerCallback, android.os.Handler, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        android.accounts.AccountManagerCallback r2;
        android.os.Handler r3;
        android.os.UserHandle r4;
        java.lang.IllegalArgumentException $r5, $r6;
        android.accounts.AccountManager$5 $r7;
        android.accounts.AccountManager$Future2Task $r8;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.accounts.AccountManagerCallback;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: android.os.UserHandle;

        if r1 == null goto label2;

        if r4 == null goto label1;

        $r7 = new android.accounts.AccountManager$5;

        specialinvoke $r7.<android.accounts.AccountManager$5: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,android.os.UserHandle)>(r0, r3, r2, r1, r4);

        $r8 = virtualinvoke $r7.<android.accounts.AccountManager$5: android.accounts.AccountManager$Future2Task start()>();

        return $r8;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("userHandle is null");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r5;
    }

    public android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler, android.os.UserHandle)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        android.app.Activity r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        android.os.UserHandle r5;
        java.lang.IllegalArgumentException $r6, $r7;
        android.accounts.AccountManager$6 $r8;
        android.accounts.AccountManagerFuture $r9;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.app.Activity;

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        r5 := @parameter4: android.os.UserHandle;

        if r1 == null goto label2;

        if r5 == null goto label1;

        $r8 = new android.accounts.AccountManager$6;

        specialinvoke $r8.<android.accounts.AccountManager$6: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,android.app.Activity,android.os.UserHandle)>(r0, r2, r4, r3, r1, r2, r5);

        $r9 = virtualinvoke $r8.<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()>();

        return $r9;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("userHandle is null");

        throw $r7;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r6;
    }

    public boolean removeAccountExplicitly(android.accounts.Account)
    {
        android.accounts.AccountManager r0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        android.accounts.IAccountManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.accounts.Account r5;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.accounts.Account;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        z0 = interfaceinvoke $r2.<android.accounts.IAccountManager: boolean removeAccountExplicitly(android.accounts.Account)>(r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)
    {
        android.accounts.AccountManager r0;
        java.util.HashMap r1, $r3, $r4, $r6, $r8, $r10;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;
        java.lang.Object $r5;
        android.content.Context $r11, $r15;
        android.accounts.IAccountManager $r12;
        java.lang.String $r13;
        android.content.BroadcastReceiver $r14;
        int $i0;
        java.lang.String[] $r16, r23;
        java.lang.Object[] $r17;
        android.os.RemoteException $r18;
        java.lang.RuntimeException $r19;
        java.lang.Throwable $r20;
        android.accounts.OnAccountsUpdateListener r21;
        java.util.Set r22;

        r0 := @this: android.accounts.AccountManager;

        r21 := @parameter0: android.accounts.OnAccountsUpdateListener;

        if r21 == null goto label17;

        r1 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r21);

        if $z0 != 0 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManager", "Listener was not previously added");

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListenersTypes>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r21);

        r22 = (java.util.Set) $r5;

     label04:
        if r22 == null goto label07;

     label05:
        $i0 = interfaceinvoke r22.<java.util.Set: int size()>();

        $r16 = newarray (java.lang.String)[$i0];

        $r17 = interfaceinvoke r22.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        r23 = (java.lang.String[]) $r17;

     label06:
        goto label08;

     label07:
        r23 = null;

     label08:
        $r6 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r21);

        $r8 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListenersTypes>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r21);

        $r10 = r0.<android.accounts.AccountManager: java.util.HashMap mAccountsUpdatedListeners>;

        $z1 = virtualinvoke $r10.<java.util.HashMap: boolean isEmpty()>();

        if $z1 == 0 goto label09;

        $r15 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r14 = r0.<android.accounts.AccountManager: android.content.BroadcastReceiver mAccountsChangedBroadcastReceiver>;

        virtualinvoke $r15.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r14);

     label09:
        $r12 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        $r11 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r13 = virtualinvoke $r11.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r12.<android.accounts.IAccountManager: void unregisterAccountListener(java.lang.String[],java.lang.String)>(r23, $r13);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r18 := @caughtexception;

     label13:
        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

     label14:
        $r20 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r20;

     label17:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener is null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch android.os.RemoteException from label09 to label10 with label12;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public android.accounts.AccountManagerFuture renameAccount(android.accounts.Account, java.lang.String, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        java.lang.IllegalArgumentException $r5, $r6;
        boolean $z0;
        android.accounts.AccountManager$4 $r7;
        android.accounts.AccountManager$Future2Task $r8;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        if r1 == null goto label2;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $r7 = new android.accounts.AccountManager$4;

        specialinvoke $r7.<android.accounts.AccountManager$4: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String)>(r0, r4, r3, r1, r2);

        $r8 = virtualinvoke $r7.<android.accounts.AccountManager$4: android.accounts.AccountManager$Future2Task start()>();

        return $r8;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newName is empty or null.");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null.");

        throw $r5;
    }

    public boolean setAccountVisibility(android.accounts.Account, java.lang.String, int)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        java.lang.IllegalArgumentException $r2;
        android.accounts.IAccountManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.accounts.Account r6;

        r0 := @this: android.accounts.AccountManager;

        r6 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r6 == null goto label4;

     label1:
        $r3 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        z0 = interfaceinvoke $r3.<android.accounts.IAccountManager: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>(r6, r1, i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAuthToken(android.accounts.Account, java.lang.String, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r2;
        java.lang.IllegalArgumentException $r3, $r4;
        android.accounts.IAccountManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.accounts.Account r8;

        r0 := @this: android.accounts.AccountManager;

        r8 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r8 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r5 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        interfaceinvoke $r5.<android.accounts.IAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>(r8, r1, r2);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r4;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPassword(android.accounts.Account, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        android.accounts.IAccountManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.accounts.Account r6;

        r0 := @this: android.accounts.AccountManager;

        r6 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        if r6 == null goto label4;

     label1:
        $r3 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        interfaceinvoke $r3.<android.accounts.IAccountManager: void setPassword(android.accounts.Account,java.lang.String)>(r6, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserData(android.accounts.Account, java.lang.String, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r2;
        java.lang.IllegalArgumentException $r3, $r4;
        android.accounts.IAccountManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.accounts.Account r8;

        r0 := @this: android.accounts.AccountManager;

        r8 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r8 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r5 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        interfaceinvoke $r5.<android.accounts.IAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>(r8, r1, r2);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key is null");

        throw $r4;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean someUserHasAccount(android.accounts.Account)
    {
        android.accounts.AccountManager r0;
        boolean z0;
        android.accounts.IAccountManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.accounts.Account r4;

        r0 := @this: android.accounts.AccountManager;

        r4 := @parameter0: android.accounts.Account;

     label1:
        $r1 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        z0 = interfaceinvoke $r1.<android.accounts.IAccountManager: boolean someUserHasAccount(android.accounts.Account)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture startAddAccountSession(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r2, $r12;
        java.lang.String[] r3;
        android.os.Bundle r4, $r10;
        android.app.Activity r5;
        android.accounts.AccountManagerCallback r6;
        android.os.Handler r7;
        java.lang.IllegalArgumentException $r9;
        android.content.Context $r11;
        android.accounts.AccountManager$19 $r13;
        android.accounts.AccountManagerFuture $r14;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: android.os.Bundle;

        r5 := @parameter4: android.app.Activity;

        r6 := @parameter5: android.accounts.AccountManagerCallback;

        r7 := @parameter6: android.os.Handler;

        if r1 == null goto label2;

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        if r4 == null goto label1;

        virtualinvoke $r10.<android.os.Bundle: void putAll(android.os.Bundle)>(r4);

     label1:
        $r11 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("androidPackageName", $r12);

        $r13 = new android.accounts.AccountManager$19;

        specialinvoke $r13.<android.accounts.AccountManager$19: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle)>(r0, r5, r7, r6, r1, r2, r3, r5, $r10);

        $r14 = virtualinvoke $r13.<android.accounts.AccountManager$19: android.accounts.AccountManagerFuture start()>();

        return $r14;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r9;
    }

    public android.accounts.AccountManagerFuture startUpdateCredentialsSession(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2, $r11;
        android.os.Bundle r3, $r9;
        android.app.Activity r4;
        android.accounts.AccountManagerCallback r5;
        android.os.Handler r6;
        java.lang.IllegalArgumentException $r8;
        android.content.Context $r10;
        android.accounts.AccountManager$20 $r12;
        android.accounts.AccountManagerFuture $r13;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.app.Activity;

        r5 := @parameter4: android.accounts.AccountManagerCallback;

        r6 := @parameter5: android.os.Handler;

        if r1 == null goto label2;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        if r3 == null goto label1;

        virtualinvoke $r9.<android.os.Bundle: void putAll(android.os.Bundle)>(r3);

     label1:
        $r10 = r0.<android.accounts.AccountManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r9.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("androidPackageName", $r11);

        $r12 = new android.accounts.AccountManager$20;

        specialinvoke $r12.<android.accounts.AccountManager$20: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,android.app.Activity,android.os.Bundle)>(r0, r4, r6, r5, r1, r2, r4, $r9);

        $r13 = virtualinvoke $r12.<android.accounts.AccountManager$20: android.accounts.AccountManagerFuture start()>();

        return $r13;

     label2:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r8;
    }

    public void updateAppPermission(android.accounts.Account, java.lang.String, int, boolean)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        android.accounts.IAccountManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.accounts.Account r5;

        r0 := @this: android.accounts.AccountManager;

        r5 := @parameter0: android.accounts.Account;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

     label1:
        $r2 = r0.<android.accounts.AccountManager: android.accounts.IAccountManager mService>;

        interfaceinvoke $r2.<android.accounts.IAccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>(r5, r1, i0, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.accounts.AccountManager r0;
        android.accounts.Account r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.app.Activity r4;
        android.accounts.AccountManagerCallback r5;
        android.os.Handler r6;
        java.lang.IllegalArgumentException $r7;
        android.accounts.AccountManager$13 $r8;
        android.accounts.AccountManagerFuture $r9;

        r0 := @this: android.accounts.AccountManager;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.app.Activity;

        r5 := @parameter4: android.accounts.AccountManagerCallback;

        r6 := @parameter5: android.os.Handler;

        if r1 == null goto label1;

        $r8 = new android.accounts.AccountManager$13;

        specialinvoke $r8.<android.accounts.AccountManager$13: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,android.app.Activity,android.os.Bundle)>(r0, r4, r6, r5, r1, r2, r4, r3);

        $r9 = virtualinvoke $r8.<android.accounts.AccountManager$13: android.accounts.AccountManagerFuture start()>();

        return $r9;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r7;
    }

    public static void <clinit>()
    {
        <android.accounts.AccountManager: int VISIBILITY_VISIBLE> = 1;

        <android.accounts.AccountManager: int VISIBILITY_USER_MANAGED_VISIBLE> = 2;

        <android.accounts.AccountManager: int VISIBILITY_USER_MANAGED_NOT_VISIBLE> = 4;

        <android.accounts.AccountManager: int VISIBILITY_UNDEFINED> = 0;

        <android.accounts.AccountManager: int VISIBILITY_NOT_VISIBLE> = 3;

        <android.accounts.AccountManager: java.lang.String TAG> = "AccountManager";

        <android.accounts.AccountManager: java.lang.String PACKAGE_NAME_KEY_LEGACY_VISIBLE> = "android:accounts:key_legacy_visible";

        <android.accounts.AccountManager: java.lang.String PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE> = "android:accounts:key_legacy_not_visible";

        <android.accounts.AccountManager: java.lang.String LOGIN_ACCOUNTS_CHANGED_ACTION> = "android.accounts.LOGIN_ACCOUNTS_CHANGED";

        <android.accounts.AccountManager: java.lang.String KEY_USERDATA> = "userdata";

        <android.accounts.AccountManager: java.lang.String KEY_PASSWORD> = "password";

        <android.accounts.AccountManager: java.lang.String KEY_NOTIFY_ON_FAILURE> = "notifyOnAuthFailure";

        <android.accounts.AccountManager: java.lang.String KEY_LAST_AUTHENTICATED_TIME> = "lastAuthenticatedTime";

        <android.accounts.AccountManager: java.lang.String KEY_INTENT> = "intent";

        <android.accounts.AccountManager: java.lang.String KEY_ERROR_MESSAGE> = "errorMessage";

        <android.accounts.AccountManager: java.lang.String KEY_ERROR_CODE> = "errorCode";

        <android.accounts.AccountManager: java.lang.String KEY_CALLER_UID> = "callerUid";

        <android.accounts.AccountManager: java.lang.String KEY_CALLER_PID> = "callerPid";

        <android.accounts.AccountManager: java.lang.String KEY_BOOLEAN_RESULT> = "booleanResult";

        <android.accounts.AccountManager: java.lang.String KEY_AUTH_TOKEN_LABEL> = "authTokenLabelKey";

        <android.accounts.AccountManager: java.lang.String KEY_AUTH_FAILED_MESSAGE> = "authFailedMessage";

        <android.accounts.AccountManager: java.lang.String KEY_AUTHTOKEN> = "authtoken";

        <android.accounts.AccountManager: java.lang.String KEY_AUTHENTICATOR_TYPES> = "authenticator_types";

        <android.accounts.AccountManager: java.lang.String KEY_ANDROID_PACKAGE_NAME> = "androidPackageName";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_TYPE> = "accountType";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_STATUS_TOKEN> = "accountStatusToken";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_SESSION_BUNDLE> = "accountSessionBundle";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_NAME> = "authAccount";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_MANAGER_RESPONSE> = "accountManagerResponse";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_AUTHENTICATOR_RESPONSE> = "accountAuthenticatorResponse";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_ACCESS_ID> = "accountAccessId";

        <android.accounts.AccountManager: java.lang.String KEY_ACCOUNTS> = "accounts";

        <android.accounts.AccountManager: int ERROR_CODE_USER_RESTRICTED> = 100;

        <android.accounts.AccountManager: int ERROR_CODE_UNSUPPORTED_OPERATION> = 6;

        <android.accounts.AccountManager: int ERROR_CODE_REMOTE_EXCEPTION> = 1;

        <android.accounts.AccountManager: int ERROR_CODE_NETWORK_ERROR> = 3;

        <android.accounts.AccountManager: int ERROR_CODE_MANAGEMENT_DISABLED_FOR_ACCOUNT_TYPE> = 101;

        <android.accounts.AccountManager: int ERROR_CODE_INVALID_RESPONSE> = 5;

        <android.accounts.AccountManager: int ERROR_CODE_CANCELED> = 4;

        <android.accounts.AccountManager: int ERROR_CODE_BAD_REQUEST> = 8;

        <android.accounts.AccountManager: int ERROR_CODE_BAD_AUTHENTICATION> = 9;

        <android.accounts.AccountManager: int ERROR_CODE_BAD_ARGUMENTS> = 7;

        <android.accounts.AccountManager: java.lang.String AUTHENTICATOR_META_DATA_NAME> = "android.accounts.AccountAuthenticator";

        <android.accounts.AccountManager: java.lang.String AUTHENTICATOR_ATTRIBUTES_NAME> = "account-authenticator";

        <android.accounts.AccountManager: java.lang.String ACTION_VISIBLE_ACCOUNTS_CHANGED> = "android.accounts.action.VISIBLE_ACCOUNTS_CHANGED";

        <android.accounts.AccountManager: java.lang.String ACTION_AUTHENTICATOR_INTENT> = "android.accounts.AccountAuthenticator";

        <android.accounts.AccountManager: java.lang.String ACTION_ACCOUNT_REMOVED> = "android.accounts.action.ACCOUNT_REMOVED";

        <android.accounts.AccountManager: java.lang.String ACCOUNT_ACCESS_TOKEN_TYPE> = "com.android.AccountManager.ACCOUNT_ACCESS_TOKEN_TYPE";

        return;
    }
}
