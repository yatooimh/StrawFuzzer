public class android.animation.ValueAnimator extends android.animation.Animator implements android.animation.AnimationHandler$AnimationFrameCallback
{
    private static final boolean DEBUG;
    public static final int INFINITE;
    public static final int RESTART;
    public static final int REVERSE;
    private static final java.lang.String TAG;
    private static final android.animation.TimeInterpolator sDefaultInterpolator;
    private static float sDurationScale;
    private boolean mAnimationEndRequested;
    private android.animation.AnimationHandler mAnimationHandler;
    private float mCurrentFraction;
    private long mDuration;
    private float mDurationScale;
    private long mFirstFrameTime;
    boolean mInitialized;
    private android.animation.TimeInterpolator mInterpolator;
    private long mLastFrameTime;
    private float mOverallFraction;
    private long mPauseTime;
    private int mRepeatCount;
    private int mRepeatMode;
    private boolean mResumed;
    private boolean mReversing;
    private boolean mRunning;
    float mSeekFraction;
    private boolean mSelfPulse;
    private long mStartDelay;
    private boolean mStartListenersCalled;
    long mStartTime;
    boolean mStartTimeCommitted;
    private boolean mStarted;
    private boolean mSuppressSelfPulseRequested;
    java.util.ArrayList mUpdateListeners;
    android.animation.PropertyValuesHolder[] mValues;
    java.util.HashMap mValuesMap;

    static void <clinit>()
    {
        android.view.animation.AccelerateDecelerateInterpolator $r0;

        <android.animation.ValueAnimator: java.lang.String TAG> = "ValueAnimator";

        <android.animation.ValueAnimator: int REVERSE> = 2;

        <android.animation.ValueAnimator: int RESTART> = 1;

        <android.animation.ValueAnimator: int INFINITE> = -1;

        <android.animation.ValueAnimator: boolean DEBUG> = 0;

        <android.animation.ValueAnimator: float sDurationScale> = 1.0F;

        $r0 = new android.view.animation.AccelerateDecelerateInterpolator;

        specialinvoke $r0.<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>();

        <android.animation.ValueAnimator: android.animation.TimeInterpolator sDefaultInterpolator> = $r0;

        return;
    }

    public void <init>()
    {
        android.animation.ValueAnimator r0;
        android.animation.TimeInterpolator $r1;

        r0 := @this: android.animation.ValueAnimator;

        specialinvoke r0.<android.animation.Animator: void <init>()>();

        r0.<android.animation.ValueAnimator: long mStartTime> = -1L;

        r0.<android.animation.ValueAnimator: float mSeekFraction> = -1.0F;

        r0.<android.animation.ValueAnimator: boolean mResumed> = 0;

        r0.<android.animation.ValueAnimator: float mOverallFraction> = 0.0F;

        r0.<android.animation.ValueAnimator: float mCurrentFraction> = 0.0F;

        r0.<android.animation.ValueAnimator: long mLastFrameTime> = -1L;

        r0.<android.animation.ValueAnimator: long mFirstFrameTime> = -1L;

        r0.<android.animation.ValueAnimator: boolean mRunning> = 0;

        r0.<android.animation.ValueAnimator: boolean mStarted> = 0;

        r0.<android.animation.ValueAnimator: boolean mStartListenersCalled> = 0;

        r0.<android.animation.ValueAnimator: boolean mInitialized> = 0;

        r0.<android.animation.ValueAnimator: boolean mAnimationEndRequested> = 0;

        r0.<android.animation.ValueAnimator: long mDuration> = 300L;

        r0.<android.animation.ValueAnimator: long mStartDelay> = 0L;

        r0.<android.animation.ValueAnimator: int mRepeatCount> = 0;

        r0.<android.animation.ValueAnimator: int mRepeatMode> = 1;

        r0.<android.animation.ValueAnimator: boolean mSelfPulse> = 1;

        r0.<android.animation.ValueAnimator: boolean mSuppressSelfPulseRequested> = 0;

        $r1 = <android.animation.ValueAnimator: android.animation.TimeInterpolator sDefaultInterpolator>;

        r0.<android.animation.ValueAnimator: android.animation.TimeInterpolator mInterpolator> = $r1;

        r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners> = null;

        r0.<android.animation.ValueAnimator: float mDurationScale> = -1.0F;

        return;
    }

    private void addAnimationCallback(long)
    {
        android.animation.ValueAnimator r0;
        long l0;
        boolean $z0;
        android.animation.AnimationHandler $r1;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        $z0 = r0.<android.animation.ValueAnimator: boolean mSelfPulse>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<android.animation.ValueAnimator: android.animation.AnimationHandler getAnimationHandler()>();

        virtualinvoke $r1.<android.animation.AnimationHandler: void addAnimationFrameCallback(android.animation.AnimationHandler$AnimationFrameCallback,long)>(r0, l0);

        return;
    }

    private void addOneShotCommitCallback()
    {
        android.animation.ValueAnimator r0;
        boolean $z0;
        android.animation.AnimationHandler $r1;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mSelfPulse>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<android.animation.ValueAnimator: android.animation.AnimationHandler getAnimationHandler()>();

        virtualinvoke $r1.<android.animation.AnimationHandler: void addOneShotCommitCallback(android.animation.AnimationHandler$AnimationFrameCallback)>(r0);

        return;
    }

    public static boolean areAnimatorsEnabled()
    {
        float $f0;
        byte $b0;
        boolean z0;

        $f0 = <android.animation.ValueAnimator: float sDurationScale>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private float clampFraction(float)
    {
        android.animation.ValueAnimator r0;
        float f0, $f1, f2;
        int i0, $i2;
        byte $b1;

        r0 := @this: android.animation.ValueAnimator;

        f0 := @parameter0: float;

        $b1 = f0 cmpg 0.0F;

        if $b1 >= 0 goto label1;

        f2 = 0.0F;

        goto label2;

     label1:
        i0 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        f2 = f0;

        if i0 == -1 goto label2;

        $i2 = i0 + 1;

        $f1 = (float) $i2;

        f2 = staticinvoke <java.lang.Math: float min(float,float)>(f0, $f1);

     label2:
        return f2;
    }

    private void endAnimation()
    {
        android.animation.ValueAnimator r0;
        java.util.ArrayList r1, $r2, $r4, $r5;
        int i0, $i1, i2;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;
        java.lang.String $r3;
        java.lang.Object $r6, $r7;
        android.animation.Animator$AnimatorListener $r8;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mAnimationEndRequested>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.animation.ValueAnimator: void removeAnimationCallback()>();

        z5 = 1;

        r0.<android.animation.ValueAnimator: boolean mAnimationEndRequested> = 1;

        r0.<android.animation.ValueAnimator: boolean mPaused> = 0;

        $z1 = r0.<android.animation.ValueAnimator: boolean mStarted>;

        if $z1 != 0 goto label2;

        $z4 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        if $z4 == 0 goto label3;

     label2:
        $r2 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        if $r2 == null goto label3;

        goto label4;

     label3:
        z5 = 0;

     label4:
        if z5 == 0 goto label5;

        $z3 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        if $z3 != 0 goto label5;

        specialinvoke r0.<android.animation.ValueAnimator: void notifyStartListeners()>();

     label5:
        r0.<android.animation.ValueAnimator: boolean mRunning> = 0;

        r0.<android.animation.ValueAnimator: boolean mStarted> = 0;

        r0.<android.animation.ValueAnimator: boolean mStartListenersCalled> = 0;

        r0.<android.animation.ValueAnimator: long mLastFrameTime> = -1L;

        r0.<android.animation.ValueAnimator: long mFirstFrameTime> = -1L;

        r0.<android.animation.ValueAnimator: long mStartTime> = -1L;

        if z5 == 0 goto label7;

        $r4 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        if $r4 == null goto label7;

        $r5 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object clone()>();

        r1 = (java.util.ArrayList) $r6;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i2 = 0;

     label6:
        if i2 >= i0 goto label7;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r8 = (android.animation.Animator$AnimatorListener) $r7;

        $z2 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        interfaceinvoke $r8.<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator,boolean)>(r0, $z2);

        i2 = i2 + 1;

        goto label6;

     label7:
        r0.<android.animation.ValueAnimator: boolean mReversing> = 0;

        $z6 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(8L);

        if $z6 == 0 goto label8;

        $r3 = virtualinvoke r0.<android.animation.ValueAnimator: java.lang.String getNameForTrace()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(8L, $r3, $i1);

     label8:
        return;
    }

    public static int getCurrentAnimationsCount()
    {
        int $i0;

        $i0 = staticinvoke <android.animation.AnimationHandler: int getAnimationCount()>();

        return $i0;
    }

    private int getCurrentIteration(float)
    {
        android.animation.ValueAnimator r0;
        double d0, $d1, $d2, d3;
        byte $b0, $b1;
        float f0, f1;
        int $i2;

        r0 := @this: android.animation.ValueAnimator;

        f0 := @parameter0: float;

        f1 = specialinvoke r0.<android.animation.ValueAnimator: float clampFraction(float)>(f0);

        $d1 = (double) f1;

        d0 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        d3 = d0;

        $d2 = (double) f1;

        $b0 = $d2 cmpl d0;

        if $b0 != 0 goto label1;

        d3 = d0;

        $b1 = f1 cmpl 0.0F;

        if $b1 <= 0 goto label1;

        d3 = d0 - 1.0;

     label1:
        $i2 = (int) d3;

        return $i2;
    }

    private float getCurrentIterationFraction(float, boolean)
    {
        android.animation.ValueAnimator r0;
        boolean z0, $z1;
        int i0;
        float $f0, f1, f2, f3;

        r0 := @this: android.animation.ValueAnimator;

        f1 := @parameter0: float;

        z0 := @parameter1: boolean;

        f2 = specialinvoke r0.<android.animation.ValueAnimator: float clampFraction(float)>(f1);

        i0 = specialinvoke r0.<android.animation.ValueAnimator: int getCurrentIteration(float)>(f2);

        $f0 = (float) i0;

        f3 = f2 - $f0;

        $z1 = specialinvoke r0.<android.animation.ValueAnimator: boolean shouldPlayBackward(int,boolean)>(i0, z0);

        if $z1 == 0 goto label1;

        f3 = 1.0F - f3;

        goto label1;

     label1:
        return f3;
    }

    public static float getDurationScale()
    {
        float $f0;

        $f0 = <android.animation.ValueAnimator: float sDurationScale>;

        return $f0;
    }

    public static long getFrameDelay()
    {
        long $l0;

        staticinvoke <android.animation.AnimationHandler: android.animation.AnimationHandler getInstance()>();

        $l0 = staticinvoke <android.animation.AnimationHandler: long getFrameDelay()>();

        return $l0;
    }

    private long getScaledDuration()
    {
        android.animation.ValueAnimator r0;
        long $l0, $l1;
        float $f0, $f1, $f2;

        r0 := @this: android.animation.ValueAnimator;

        $l0 = r0.<android.animation.ValueAnimator: long mDuration>;

        $f0 = (float) $l0;

        $f1 = specialinvoke r0.<android.animation.ValueAnimator: float resolveDurationScale()>();

        $f2 = $f0 * $f1;

        $l1 = (long) $f2;

        return $l1;
    }

    private boolean isPulsingInternal()
    {
        android.animation.ValueAnimator r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: android.animation.ValueAnimator;

        $l0 = r0.<android.animation.ValueAnimator: long mLastFrameTime>;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void notifyStartListeners()
    {
        android.animation.ValueAnimator r0;
        java.util.ArrayList r1, $r2, $r3;
        int i0, i1;
        boolean $z0, $z1;
        java.lang.Object $r4, $r5;
        android.animation.Animator$AnimatorListener $r6;

        r0 := @this: android.animation.ValueAnimator;

        $r2 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        if $r2 == null goto label2;

        $z0 = r0.<android.animation.ValueAnimator: boolean mStartListenersCalled>;

        if $z0 != 0 goto label2;

        $r3 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object clone()>();

        r1 = (java.util.ArrayList) $r4;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r6 = (android.animation.Animator$AnimatorListener) $r5;

        $z1 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        interfaceinvoke $r6.<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator,boolean)>(r0, $z1);

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<android.animation.ValueAnimator: boolean mStartListenersCalled> = 1;

        return;
    }

    public static transient android.animation.ValueAnimator ofArgb(int[])
    {
        int[] r0;
        android.animation.ValueAnimator $r2;
        android.animation.ArgbEvaluator $r3;

        r0 := @parameter0: int[];

        $r2 = new android.animation.ValueAnimator;

        specialinvoke $r2.<android.animation.ValueAnimator: void <init>()>();

        virtualinvoke $r2.<android.animation.ValueAnimator: void setIntValues(int[])>(r0);

        $r3 = staticinvoke <android.animation.ArgbEvaluator: android.animation.ArgbEvaluator getInstance()>();

        virtualinvoke $r2.<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>($r3);

        return $r2;
    }

    public static transient android.animation.ValueAnimator ofFloat(float[])
    {
        float[] r0;
        android.animation.ValueAnimator $r2;

        r0 := @parameter0: float[];

        $r2 = new android.animation.ValueAnimator;

        specialinvoke $r2.<android.animation.ValueAnimator: void <init>()>();

        virtualinvoke $r2.<android.animation.ValueAnimator: void setFloatValues(float[])>(r0);

        return $r2;
    }

    public static transient android.animation.ValueAnimator ofInt(int[])
    {
        int[] r0;
        android.animation.ValueAnimator $r2;

        r0 := @parameter0: int[];

        $r2 = new android.animation.ValueAnimator;

        specialinvoke $r2.<android.animation.ValueAnimator: void <init>()>();

        virtualinvoke $r2.<android.animation.ValueAnimator: void setIntValues(int[])>(r0);

        return $r2;
    }

    public static transient android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator, java.lang.Object[])
    {
        android.animation.TypeEvaluator r0;
        java.lang.Object[] r1;
        android.animation.ValueAnimator $r3;

        r0 := @parameter0: android.animation.TypeEvaluator;

        r1 := @parameter1: java.lang.Object[];

        $r3 = new android.animation.ValueAnimator;

        specialinvoke $r3.<android.animation.ValueAnimator: void <init>()>();

        virtualinvoke $r3.<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>(r1);

        virtualinvoke $r3.<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>(r0);

        return $r3;
    }

    public static transient android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])
    {
        android.animation.PropertyValuesHolder[] r0;
        android.animation.ValueAnimator $r2;

        r0 := @parameter0: android.animation.PropertyValuesHolder[];

        $r2 = new android.animation.ValueAnimator;

        specialinvoke $r2.<android.animation.ValueAnimator: void <init>()>();

        virtualinvoke $r2.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>(r0);

        return $r2;
    }

    private void removeAnimationCallback()
    {
        android.animation.ValueAnimator r0;
        boolean $z0;
        android.animation.AnimationHandler $r1;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mSelfPulse>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<android.animation.ValueAnimator: android.animation.AnimationHandler getAnimationHandler()>();

        virtualinvoke $r1.<android.animation.AnimationHandler: void removeCallback(android.animation.AnimationHandler$AnimationFrameCallback)>(r0);

        return;
    }

    private float resolveDurationScale()
    {
        android.animation.ValueAnimator r0;
        byte $b0;
        float f0;

        r0 := @this: android.animation.ValueAnimator;

        f0 = r0.<android.animation.ValueAnimator: float mDurationScale>;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        goto label2;

     label1:
        f0 = <android.animation.ValueAnimator: float sDurationScale>;

     label2:
        return f0;
    }

    public static void setDurationScale(float)
    {
        float f0;

        f0 := @parameter0: float;

        <android.animation.ValueAnimator: float sDurationScale> = f0;

        return;
    }

    public static void setFrameDelay(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.animation.AnimationHandler: android.animation.AnimationHandler getInstance()>();

        staticinvoke <android.animation.AnimationHandler: void setFrameDelay(long)>(l0);

        return;
    }

    private boolean shouldPlayBackward(int, boolean)
    {
        android.animation.ValueAnimator r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z2, z3, z4;

        r0 := @this: android.animation.ValueAnimator;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        if i0 <= 0 goto label5;

        $i2 = r0.<android.animation.ValueAnimator: int mRepeatMode>;

        if $i2 != 2 goto label5;

        i1 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        $i3 = i1 + 1;

        if i0 < $i3 goto label1;

        if i1 != -1 goto label5;

     label1:
        if z2 == 0 goto label3;

        z3 = 0;

        $i5 = i0 % 2;

        if $i5 != 0 goto label2;

        z3 = 1;

     label2:
        return z3;

     label3:
        z4 = 0;

        $i4 = i0 % 2;

        if $i4 == 0 goto label4;

        z4 = 1;

     label4:
        return z4;

     label5:
        return z2;
    }

    private void start(boolean)
    {
        android.animation.ValueAnimator r0;
        boolean z0, $z1, $z2, $z3;
        int i0, $i4;
        android.os.Looper $r1;
        android.util.AndroidRuntimeException $r2;
        float $f0, $f1, $f2, $f3, $f4, f5, f6;
        byte $b1, $b2, $b3, $b6, $b7;
        double $d0, $d1, $d2, $d3;
        long $l5;

        r0 := @this: android.animation.ValueAnimator;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 == null goto label6;

        r0.<android.animation.ValueAnimator: boolean mReversing> = z0;

        $z1 = r0.<android.animation.ValueAnimator: boolean mSuppressSelfPulseRequested>;

        $z2 = $z1 ^ 1;

        r0.<android.animation.ValueAnimator: boolean mSelfPulse> = $z2;

        if z0 == 0 goto label2;

        f5 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b2 = f5 cmpl -1.0F;

        if $b2 == 0 goto label2;

        $b3 = f5 cmpl 0.0F;

        if $b3 == 0 goto label2;

        i0 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        if i0 != -1 goto label1;

        $d1 = (double) f5;

        $d0 = (double) f5;

        $d2 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $d3 = $d1 - $d2;

        $f3 = (float) $d3;

        $f4 = 1.0F - $f3;

        r0.<android.animation.ValueAnimator: float mSeekFraction> = $f4;

        goto label2;

     label1:
        $i4 = i0 + 1;

        $f1 = (float) $i4;

        $f2 = $f1 - f5;

        r0.<android.animation.ValueAnimator: float mSeekFraction> = $f2;

     label2:
        r0.<android.animation.ValueAnimator: boolean mStarted> = 1;

        r0.<android.animation.ValueAnimator: boolean mPaused> = 0;

        r0.<android.animation.ValueAnimator: boolean mRunning> = 0;

        r0.<android.animation.ValueAnimator: boolean mAnimationEndRequested> = 0;

        r0.<android.animation.ValueAnimator: long mLastFrameTime> = -1L;

        r0.<android.animation.ValueAnimator: long mFirstFrameTime> = -1L;

        r0.<android.animation.ValueAnimator: long mStartTime> = -1L;

        specialinvoke r0.<android.animation.ValueAnimator: void addAnimationCallback(long)>(0L);

        $l5 = r0.<android.animation.ValueAnimator: long mStartDelay>;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label3;

        $f0 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b1 = $f0 cmpl 0.0F;

        if $b1 >= 0 goto label3;

        $z3 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        if $z3 == 0 goto label5;

     label3:
        specialinvoke r0.<android.animation.ValueAnimator: void startAnimation()>();

        f6 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b7 = f6 cmpl -1.0F;

        if $b7 != 0 goto label4;

        virtualinvoke r0.<android.animation.ValueAnimator: void setCurrentPlayTime(long)>(0L);

        goto label5;

     label4:
        virtualinvoke r0.<android.animation.ValueAnimator: void setCurrentFraction(float)>(f6);

     label5:
        return;

     label6:
        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Animators may only be run on Looper threads");

        throw $r2;
    }

    private void startAnimation()
    {
        android.animation.ValueAnimator r0;
        float f0;
        boolean $z0;
        byte $b0;
        java.util.ArrayList $r1;
        java.lang.String $r2;
        int $i1;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(8L);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.animation.ValueAnimator: java.lang.String getNameForTrace()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(8L, $r2, $i1);

     label1:
        r0.<android.animation.ValueAnimator: boolean mAnimationEndRequested> = 0;

        virtualinvoke r0.<android.animation.ValueAnimator: void initAnimation()>();

        r0.<android.animation.ValueAnimator: boolean mRunning> = 1;

        f0 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label2;

        r0.<android.animation.ValueAnimator: float mOverallFraction> = f0;

        goto label3;

     label2:
        r0.<android.animation.ValueAnimator: float mOverallFraction> = 0.0F;

     label3:
        $r1 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        if $r1 == null goto label4;

        specialinvoke r0.<android.animation.ValueAnimator: void notifyStartListeners()>();

     label4:
        return;
    }

    public void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)
    {
        android.animation.ValueAnimator r0;
        android.animation.ValueAnimator$AnimatorUpdateListener r1;
        java.util.ArrayList $r2, $r3, $r4;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: android.animation.ValueAnimator$AnimatorUpdateListener;

        $r2 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners> = $r4;

     label1:
        $r3 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    void animateBasedOnPlayTime(long, long, boolean)
    {
        android.animation.ValueAnimator r0;
        long l0, l1, l2, $l6, $l8, $l9, $l10, $l12, $l13;
        boolean z0;
        int i3, $i7, $i14, $i15, $i16, i17, i18, i19, i20, i21;
        byte $b4, $b5, $b11;
        java.lang.UnsupportedOperationException $r1;
        float $f0, $f1, $f2, $f3;
        java.util.ArrayList $r2, $r3, $r4;
        java.lang.Object $r5;
        android.animation.Animator$AnimatorListener $r6;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label5;

        $b5 = l1 cmp 0L;

        if $b5 < 0 goto label5;

        virtualinvoke r0.<android.animation.ValueAnimator: void initAnimation()>();

        i17 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        if i17 <= 0 goto label2;

        l2 = r0.<android.animation.ValueAnimator: long mDuration>;

        $l12 = l0 / l2;

        i3 = (int) $l12;

        $l13 = l1 / l2;

        i18 = (int) $l13;

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>(i3, i17);

        $i15 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        $i16 = staticinvoke <java.lang.Math: int min(int,int)>(i18, $i15);

        if $i14 == $i16 goto label2;

        $r2 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        if $r2 == null goto label2;

        $r3 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        i19 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i20 = 0;

     label1:
        if i20 >= i19 goto label2;

        $r4 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        $r6 = (android.animation.Animator$AnimatorListener) $r5;

        interfaceinvoke $r6.<android.animation.Animator$AnimatorListener: void onAnimationRepeat(android.animation.Animator)>(r0);

        i20 = i20 + 1;

        goto label1;

     label2:
        i21 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        if i21 == -1 goto label3;

        $i7 = i21 + 1;

        $l9 = (long) $i7;

        $l8 = r0.<android.animation.ValueAnimator: long mDuration>;

        $l10 = $l9 * $l8;

        $b11 = l0 cmp $l10;

        if $b11 < 0 goto label3;

        virtualinvoke r0.<android.animation.ValueAnimator: void skipToEndValue(boolean)>(z0);

        goto label4;

     label3:
        $f1 = (float) l0;

        $l6 = r0.<android.animation.ValueAnimator: long mDuration>;

        $f0 = (float) $l6;

        $f2 = $f1 / $f0;

        $f3 = specialinvoke r0.<android.animation.ValueAnimator: float getCurrentIterationFraction(float,boolean)>($f2, z0);

        virtualinvoke r0.<android.animation.ValueAnimator: void animateValue(float)>($f3);

     label4:
        return;

     label5:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Error: Play time should never be negative.");

        throw $r1;
    }

    boolean animateBasedOnTime(long)
    {
        android.animation.ValueAnimator r0;
        long l0, l1, $l6, $l7;
        float f0, $f1, $f2, $f3, f4, f5, $f6;
        int i2, $i4, i8, i9, i11, i12;
        boolean $z2, z3, z4, z5, $z6;
        byte $b3, $b5, $b10;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r4;
        android.animation.Animator$AnimatorListener $r5;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        z3 = 0;

        $z2 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        if $z2 == 0 goto label11;

        l1 = specialinvoke r0.<android.animation.ValueAnimator: long getScaledDuration()>();

        $b3 = l1 cmp 0L;

        if $b3 <= 0 goto label01;

        $l6 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $l7 = l0 - $l6;

        $f3 = (float) $l7;

        $f2 = (float) l1;

        f4 = $f3 / $f2;

        goto label02;

     label01:
        f4 = 1.0F;

     label02:
        f0 = r0.<android.animation.ValueAnimator: float mOverallFraction>;

        i8 = (int) f4;

        i9 = (int) f0;

        if i8 <= i9 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        i2 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        z5 = 0;

        $i4 = i2 + 1;

        $f1 = (float) $i4;

        $b5 = f4 cmpl $f1;

        if $b5 < 0 goto label05;

        z5 = 0;

        if i2 == -1 goto label05;

        z5 = 1;

     label05:
        $b10 = l1 cmp 0L;

        if $b10 != 0 goto label06;

        z3 = 1;

        goto label10;

     label06:
        if z4 == 0 goto label09;

        if z5 != 0 goto label09;

        z3 = 0;

        $r1 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        if $r1 == null goto label10;

        $r2 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        i11 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i12 = 0;

     label07:
        if i12 >= i11 goto label08;

        $r3 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i12);

        $r5 = (android.animation.Animator$AnimatorListener) $r4;

        interfaceinvoke $r5.<android.animation.Animator$AnimatorListener: void onAnimationRepeat(android.animation.Animator)>(r0);

        i12 = i12 + 1;

        goto label07;

     label08:
        z3 = 0;

        goto label10;

     label09:
        z3 = 0;

        if z5 == 0 goto label10;

        z3 = 1;

     label10:
        f5 = specialinvoke r0.<android.animation.ValueAnimator: float clampFraction(float)>(f4);

        r0.<android.animation.ValueAnimator: float mOverallFraction> = f5;

        $z6 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        $f6 = specialinvoke r0.<android.animation.ValueAnimator: float getCurrentIterationFraction(float,boolean)>(f5, $z6);

        virtualinvoke r0.<android.animation.ValueAnimator: void animateValue(float)>($f6);

     label11:
        return z3;
    }

    void animateValue(float)
    {
        android.animation.ValueAnimator r0;
        java.util.ArrayList r1, $r4;
        android.animation.TimeInterpolator $r2;
        android.animation.PropertyValuesHolder[] $r3, $r7;
        java.lang.Object $r5;
        android.animation.ValueAnimator$AnimatorUpdateListener $r6;
        android.animation.PropertyValuesHolder $r8;
        float f0, f1;
        int i0, i1, i2, i3;

        r0 := @this: android.animation.ValueAnimator;

        f0 := @parameter0: float;

        $r2 = r0.<android.animation.ValueAnimator: android.animation.TimeInterpolator mInterpolator>;

        f1 = interfaceinvoke $r2.<android.animation.TimeInterpolator: float getInterpolation(float)>(f0);

        r0.<android.animation.ValueAnimator: float mCurrentFraction> = f1;

        $r3 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r7 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        $r8 = $r7[i1];

        virtualinvoke $r8.<android.animation.PropertyValuesHolder: void calculateValue(float)>(f1);

        i1 = i1 + 1;

        goto label1;

     label2:
        r1 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        if r1 == null goto label4;

        i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $r4 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r6 = (android.animation.ValueAnimator$AnimatorUpdateListener) $r5;

        interfaceinvoke $r6.<android.animation.ValueAnimator$AnimatorUpdateListener: void onAnimationUpdate(android.animation.ValueAnimator)>(r0);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public boolean canReverse()
    {
        android.animation.ValueAnimator r0;

        r0 := @this: android.animation.ValueAnimator;

        return 1;
    }

    public void cancel()
    {
        android.animation.ValueAnimator r0;
        java.util.Iterator r1;
        android.os.Looper $r2;
        android.util.AndroidRuntimeException $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList $r4, $r5, $r7;
        java.lang.Object $r6, $r8;
        android.animation.Animator$AnimatorListener $r9;

        r0 := @this: android.animation.ValueAnimator;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r2 == null goto label6;

        $z0 = r0.<android.animation.ValueAnimator: boolean mAnimationEndRequested>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<android.animation.ValueAnimator: boolean mStarted>;

        if $z1 != 0 goto label2;

        $z3 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        if $z3 == 0 goto label5;

     label2:
        $r4 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        if $r4 == null goto label5;

        $z2 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        if $z2 != 0 goto label3;

        specialinvoke r0.<android.animation.ValueAnimator: void notifyStartListeners()>();

     label3:
        $r5 = r0.<android.animation.ValueAnimator: java.util.ArrayList mListeners>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object clone()>();

        $r7 = (java.util.ArrayList) $r6;

        r1 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.animation.Animator$AnimatorListener) $r8;

        interfaceinvoke $r9.<android.animation.Animator$AnimatorListener: void onAnimationCancel(android.animation.Animator)>(r0);

        goto label4;

     label5:
        specialinvoke r0.<android.animation.ValueAnimator: void endAnimation()>();

        return;

     label6:
        $r3 = new android.util.AndroidRuntimeException;

        specialinvoke $r3.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Animators may only be run on Looper threads");

        throw $r3;
    }

    public volatile android.animation.Animator clone()
    {
        android.animation.ValueAnimator r0, $r1;

        r0 := @this: android.animation.ValueAnimator;

        $r1 = virtualinvoke r0.<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>();

        return $r1;
    }

    public android.animation.ValueAnimator clone()
    {
        android.animation.ValueAnimator r0, r1;
        android.animation.PropertyValuesHolder[] r2, $r6, $r9;
        int i0, i1;
        android.animation.PropertyValuesHolder r3, $r8;
        android.animation.Animator $r4;
        java.util.ArrayList $r5, $r13, $r14;
        java.util.HashMap $r7, $r10;
        java.lang.String $r11;

        r0 := @this: android.animation.ValueAnimator;

        $r4 = specialinvoke r0.<android.animation.Animator: android.animation.Animator clone()>();

        r1 = (android.animation.ValueAnimator) $r4;

        $r5 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        if $r5 == null goto label1;

        $r13 = new java.util.ArrayList;

        $r14 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>($r14);

        r1.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners> = $r13;

     label1:
        r1.<android.animation.ValueAnimator: float mSeekFraction> = -1.0F;

        r1.<android.animation.ValueAnimator: boolean mReversing> = 0;

        r1.<android.animation.ValueAnimator: boolean mInitialized> = 0;

        r1.<android.animation.ValueAnimator: boolean mStarted> = 0;

        r1.<android.animation.ValueAnimator: boolean mRunning> = 0;

        r1.<android.animation.ValueAnimator: boolean mPaused> = 0;

        r1.<android.animation.ValueAnimator: boolean mResumed> = 0;

        r1.<android.animation.ValueAnimator: boolean mStartListenersCalled> = 0;

        r1.<android.animation.ValueAnimator: long mStartTime> = -1L;

        r1.<android.animation.ValueAnimator: boolean mStartTimeCommitted> = 0;

        r1.<android.animation.ValueAnimator: boolean mAnimationEndRequested> = 0;

        r1.<android.animation.ValueAnimator: long mPauseTime> = -1L;

        r1.<android.animation.ValueAnimator: long mLastFrameTime> = -1L;

        r1.<android.animation.ValueAnimator: long mFirstFrameTime> = -1L;

        r1.<android.animation.ValueAnimator: float mOverallFraction> = 0.0F;

        r1.<android.animation.ValueAnimator: float mCurrentFraction> = 0.0F;

        r1.<android.animation.ValueAnimator: boolean mSelfPulse> = 1;

        r1.<android.animation.ValueAnimator: boolean mSuppressSelfPulseRequested> = 0;

        r2 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        if r2 == null goto label3;

        i0 = lengthof r2;

        $r6 = newarray (android.animation.PropertyValuesHolder)[i0];

        r1.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>(i0);

        r1.<android.animation.ValueAnimator: java.util.HashMap mValuesMap> = $r7;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r8 = r2[i1];

        r3 = virtualinvoke $r8.<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>();

        $r9 = r1.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        $r9[i1] = r3;

        $r10 = r1.<android.animation.ValueAnimator: java.util.HashMap mValuesMap>;

        $r11 = virtualinvoke r3.<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.animation.ValueAnimator r0, $r1;

        r0 := @this: android.animation.ValueAnimator;

        $r1 = virtualinvoke r0.<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>();

        return $r1;
    }

    public void commitAnimationFrame(long)
    {
        android.animation.ValueAnimator r0;
        boolean $z0;
        long $l0, $l2, $l3, l4, l5;
        byte $b1;

        r0 := @this: android.animation.ValueAnimator;

        l4 := @parameter0: long;

        $z0 = r0.<android.animation.ValueAnimator: boolean mStartTimeCommitted>;

        if $z0 != 0 goto label1;

        r0.<android.animation.ValueAnimator: boolean mStartTimeCommitted> = 1;

        $l0 = r0.<android.animation.ValueAnimator: long mLastFrameTime>;

        l5 = l4 - $l0;

        $b1 = l5 cmp 0L;

        if $b1 <= 0 goto label1;

        $l2 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $l3 = $l2 + l5;

        r0.<android.animation.ValueAnimator: long mStartTime> = $l3;

     label1:
        return;
    }

    public final boolean doAnimationFrame(long)
    {
        android.animation.ValueAnimator r0;
        long l0, $l1, $l4, $l5, $l6, $l7, $l11, $l12, $l13, $l14, $l15, l16, l17, $l18, $l20, $l21;
        boolean z0, $z1, $z2, $z3, $z4;
        byte $b2, $b3, $b8, $b9, $b10, $b19;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        $l1 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label03;

        $z2 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        if $z2 == 0 goto label01;

        l16 = l0;

        goto label02;

     label01:
        $l14 = r0.<android.animation.ValueAnimator: long mStartDelay>;

        $f5 = (float) $l14;

        $f6 = specialinvoke r0.<android.animation.ValueAnimator: float resolveDurationScale()>();

        $f7 = $f5 * $f6;

        $l15 = (long) $f7;

        l16 = $l15 + l0;

     label02:
        r0.<android.animation.ValueAnimator: long mStartTime> = l16;

     label03:
        $z3 = r0.<android.animation.ValueAnimator: boolean mPaused>;

        if $z3 == 0 goto label04;

        r0.<android.animation.ValueAnimator: long mPauseTime> = l0;

        specialinvoke r0.<android.animation.ValueAnimator: void removeAnimationCallback()>();

        return 0;

     label04:
        $z1 = r0.<android.animation.ValueAnimator: boolean mResumed>;

        if $z1 == 0 goto label05;

        r0.<android.animation.ValueAnimator: boolean mResumed> = 0;

        l17 = r0.<android.animation.ValueAnimator: long mPauseTime>;

        $b10 = l17 cmp 0L;

        if $b10 <= 0 goto label05;

        $l12 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $l11 = l0 - l17;

        $l13 = $l12 + $l11;

        r0.<android.animation.ValueAnimator: long mStartTime> = $l13;

     label05:
        $z4 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        if $z4 != 0 goto label07;

        $l7 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $b8 = $l7 cmp l0;

        if $b8 <= 0 goto label06;

        $f4 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b9 = $f4 cmpl -1.0F;

        if $b9 != 0 goto label06;

        return 0;

     label06:
        r0.<android.animation.ValueAnimator: boolean mRunning> = 1;

        specialinvoke r0.<android.animation.ValueAnimator: void startAnimation()>();

     label07:
        $l18 = r0.<android.animation.ValueAnimator: long mLastFrameTime>;

        $b19 = $l18 cmp 0L;

        if $b19 >= 0 goto label09;

        $f0 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b3 = $f0 cmpl 0.0F;

        if $b3 < 0 goto label08;

        $l4 = specialinvoke r0.<android.animation.ValueAnimator: long getScaledDuration()>();

        $f2 = (float) $l4;

        $f1 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $f3 = $f2 * $f1;

        $l5 = (long) $f3;

        $l6 = l0 - $l5;

        r0.<android.animation.ValueAnimator: long mStartTime> = $l6;

        r0.<android.animation.ValueAnimator: float mSeekFraction> = -1.0F;

     label08:
        r0.<android.animation.ValueAnimator: boolean mStartTimeCommitted> = 0;

     label09:
        r0.<android.animation.ValueAnimator: long mLastFrameTime> = l0;

        $l20 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $l21 = staticinvoke <java.lang.Math: long max(long,long)>(l0, $l20);

        z0 = virtualinvoke r0.<android.animation.ValueAnimator: boolean animateBasedOnTime(long)>($l21);

        if z0 == 0 goto label10;

        specialinvoke r0.<android.animation.ValueAnimator: void endAnimation()>();

     label10:
        return z0;
    }

    public void end()
    {
        android.animation.ValueAnimator r0;
        android.os.Looper $r1;
        android.util.AndroidRuntimeException $r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0;
        float f0;

        r0 := @this: android.animation.ValueAnimator;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 == null goto label5;

        $z0 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.animation.ValueAnimator: void startAnimation()>();

        r0.<android.animation.ValueAnimator: boolean mStarted> = 1;

        goto label2;

     label1:
        $z1 = r0.<android.animation.ValueAnimator: boolean mInitialized>;

        if $z1 != 0 goto label2;

        virtualinvoke r0.<android.animation.ValueAnimator: void initAnimation()>();

     label2:
        $i0 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        $z2 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        $z3 = specialinvoke r0.<android.animation.ValueAnimator: boolean shouldPlayBackward(int,boolean)>($i0, $z2);

        if $z3 == 0 goto label3;

        f0 = 0.0F;

        goto label4;

     label3:
        f0 = 1.0F;

     label4:
        virtualinvoke r0.<android.animation.ValueAnimator: void animateValue(float)>(f0);

        specialinvoke r0.<android.animation.ValueAnimator: void endAnimation()>();

        return;

     label5:
        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Animators may only be run on Looper threads");

        throw $r2;
    }

    public float getAnimatedFraction()
    {
        android.animation.ValueAnimator r0;
        float $f0;

        r0 := @this: android.animation.ValueAnimator;

        $f0 = r0.<android.animation.ValueAnimator: float mCurrentFraction>;

        return $f0;
    }

    public java.lang.Object getAnimatedValue()
    {
        android.animation.ValueAnimator r0;
        android.animation.PropertyValuesHolder[] r1;
        int $i0;
        android.animation.PropertyValuesHolder $r2;
        java.lang.Object $r3;

        r0 := @this: android.animation.ValueAnimator;

        r1 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $r2 = r1[0];

        $r3 = virtualinvoke $r2.<android.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.Object getAnimatedValue(java.lang.String)
    {
        android.animation.ValueAnimator r0;
        java.util.HashMap $r1;
        java.lang.Object $r2, $r3;
        java.lang.String r4;
        android.animation.PropertyValuesHolder r5;

        r0 := @this: android.animation.ValueAnimator;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<android.animation.ValueAnimator: java.util.HashMap mValuesMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (android.animation.PropertyValuesHolder) $r2;

        if r5 == null goto label1;

        $r3 = virtualinvoke r5.<android.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()>();

        return $r3;

     label1:
        return null;
    }

    public android.animation.AnimationHandler getAnimationHandler()
    {
        android.animation.ValueAnimator r0;
        android.animation.AnimationHandler r1;

        r0 := @this: android.animation.ValueAnimator;

        r1 = r0.<android.animation.ValueAnimator: android.animation.AnimationHandler mAnimationHandler>;

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = staticinvoke <android.animation.AnimationHandler: android.animation.AnimationHandler getInstance()>();

     label2:
        return r1;
    }

    public long getCurrentPlayTime()
    {
        android.animation.ValueAnimator r0;
        float f0, $f1, $f2, $f3, $f4, $f5, f6, f7;
        boolean $z0, $z1;
        byte $b0, $b1, $b8;
        long $l2, $l3, $l4, $l5, $l6, $l7;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mInitialized>;

        if $z0 == 0 goto label4;

        $z1 = r0.<android.animation.ValueAnimator: boolean mStarted>;

        if $z1 != 0 goto label1;

        $f5 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b8 = $f5 cmpg 0.0F;

        if $b8 >= 0 goto label1;

        goto label4;

     label1:
        f6 = r0.<android.animation.ValueAnimator: float mSeekFraction>;

        $b0 = f6 cmpl 0.0F;

        if $b0 < 0 goto label2;

        $l6 = r0.<android.animation.ValueAnimator: long mDuration>;

        $f3 = (float) $l6;

        $f4 = $f3 * f6;

        $l7 = (long) $f4;

        return $l7;

     label2:
        f0 = specialinvoke r0.<android.animation.ValueAnimator: float resolveDurationScale()>();

        f7 = f0;

        $b1 = f0 cmpl 0.0F;

        if $b1 != 0 goto label3;

        f7 = 1.0F;

     label3:
        $l2 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        $l3 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $l4 = $l2 - $l3;

        $f1 = (float) $l4;

        $f2 = $f1 / f7;

        $l5 = (long) $f2;

        return $l5;

     label4:
        return 0L;
    }

    public long getDuration()
    {
        android.animation.ValueAnimator r0;
        long $l0;

        r0 := @this: android.animation.ValueAnimator;

        $l0 = r0.<android.animation.ValueAnimator: long mDuration>;

        return $l0;
    }

    public android.animation.TimeInterpolator getInterpolator()
    {
        android.animation.ValueAnimator r0;
        android.animation.TimeInterpolator $r1;

        r0 := @this: android.animation.ValueAnimator;

        $r1 = r0.<android.animation.ValueAnimator: android.animation.TimeInterpolator mInterpolator>;

        return $r1;
    }

    java.lang.String getNameForTrace()
    {
        android.animation.ValueAnimator r0;

        r0 := @this: android.animation.ValueAnimator;

        return "animator";
    }

    public int getRepeatCount()
    {
        android.animation.ValueAnimator r0;
        int $i0;

        r0 := @this: android.animation.ValueAnimator;

        $i0 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        return $i0;
    }

    public int getRepeatMode()
    {
        android.animation.ValueAnimator r0;
        int $i0;

        r0 := @this: android.animation.ValueAnimator;

        $i0 = r0.<android.animation.ValueAnimator: int mRepeatMode>;

        return $i0;
    }

    public long getStartDelay()
    {
        android.animation.ValueAnimator r0;
        long $l0;

        r0 := @this: android.animation.ValueAnimator;

        $l0 = r0.<android.animation.ValueAnimator: long mStartDelay>;

        return $l0;
    }

    public long getTotalDuration()
    {
        android.animation.ValueAnimator r0;
        int i0, $i1;
        long $l2, $l3, $l4, $l5, $l6;

        r0 := @this: android.animation.ValueAnimator;

        i0 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        if i0 != -1 goto label1;

        return -1L;

     label1:
        $l5 = r0.<android.animation.ValueAnimator: long mStartDelay>;

        $l3 = r0.<android.animation.ValueAnimator: long mDuration>;

        $i1 = i0 + 1;

        $l2 = (long) $i1;

        $l4 = $l3 * $l2;

        $l6 = $l5 + $l4;

        return $l6;
    }

    public android.animation.PropertyValuesHolder[] getValues()
    {
        android.animation.ValueAnimator r0;
        android.animation.PropertyValuesHolder[] $r1;

        r0 := @this: android.animation.ValueAnimator;

        $r1 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        return $r1;
    }

    void initAnimation()
    {
        android.animation.ValueAnimator r0;
        int i0, i1;
        boolean $z0;
        android.animation.PropertyValuesHolder[] $r1, $r2;
        android.animation.PropertyValuesHolder $r3;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mInitialized>;

        if $z0 != 0 goto label3;

        $r1 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        $r3 = $r2[i1];

        virtualinvoke $r3.<android.animation.PropertyValuesHolder: void init()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<android.animation.ValueAnimator: boolean mInitialized> = 1;

     label3:
        return;
    }

    boolean isInitialized()
    {
        android.animation.ValueAnimator r0;
        boolean $z0;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mInitialized>;

        return $z0;
    }

    public boolean isRunning()
    {
        android.animation.ValueAnimator r0;
        boolean $z0;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mRunning>;

        return $z0;
    }

    public boolean isStarted()
    {
        android.animation.ValueAnimator r0;
        boolean $z0;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = r0.<android.animation.ValueAnimator: boolean mStarted>;

        return $z0;
    }

    public void overrideDurationScale(float)
    {
        android.animation.ValueAnimator r0;
        float f0;

        r0 := @this: android.animation.ValueAnimator;

        f0 := @parameter0: float;

        r0.<android.animation.ValueAnimator: float mDurationScale> = f0;

        return;
    }

    public void pause()
    {
        android.animation.ValueAnimator r0;
        boolean z0, $z1;

        r0 := @this: android.animation.ValueAnimator;

        z0 = r0.<android.animation.ValueAnimator: boolean mPaused>;

        specialinvoke r0.<android.animation.Animator: void pause()>();

        if z0 != 0 goto label1;

        $z1 = r0.<android.animation.ValueAnimator: boolean mPaused>;

        if $z1 == 0 goto label1;

        r0.<android.animation.ValueAnimator: long mPauseTime> = -1L;

        r0.<android.animation.ValueAnimator: boolean mResumed> = 0;

     label1:
        return;
    }

    boolean pulseAnimationFrame(long)
    {
        android.animation.ValueAnimator r0;
        long l0;
        boolean $z0, $z1;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        $z0 = r0.<android.animation.ValueAnimator: boolean mSelfPulse>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<android.animation.ValueAnimator: boolean doAnimationFrame(long)>(l0);

        return $z1;
    }

    public void removeAllUpdateListeners()
    {
        android.animation.ValueAnimator r0;
        java.util.ArrayList r1;

        r0 := @this: android.animation.ValueAnimator;

        r1 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners> = null;

        return;
    }

    public void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)
    {
        android.animation.ValueAnimator r0;
        android.animation.ValueAnimator$AnimatorUpdateListener r1;
        java.util.ArrayList r2, $r3;
        int $i0;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: android.animation.ValueAnimator$AnimatorUpdateListener;

        r2 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        if r2 != null goto label1;

        return;

     label1:
        virtualinvoke r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label2;

        r0.<android.animation.ValueAnimator: java.util.ArrayList mUpdateListeners> = null;

     label2:
        return;
    }

    public void resume()
    {
        android.animation.ValueAnimator r0;
        android.os.Looper $r1;
        android.util.AndroidRuntimeException $r2;
        boolean $z0, $z1;
        long $l0;
        byte $b1;

        r0 := @this: android.animation.ValueAnimator;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 == null goto label2;

        $z0 = r0.<android.animation.ValueAnimator: boolean mPaused>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.animation.ValueAnimator: boolean mResumed>;

        if $z1 != 0 goto label1;

        r0.<android.animation.ValueAnimator: boolean mResumed> = 1;

        $l0 = r0.<android.animation.ValueAnimator: long mPauseTime>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        specialinvoke r0.<android.animation.ValueAnimator: void addAnimationCallback(long)>(0L);

     label1:
        specialinvoke r0.<android.animation.Animator: void resume()>();

        return;

     label2:
        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Animators may only be resumed from the same thread that the animator was started on");

        throw $r2;
    }

    public void reverse()
    {
        android.animation.ValueAnimator r0;
        long l0, l1, $l2, $l3, $l4, $l5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: android.animation.ValueAnimator;

        $z0 = specialinvoke r0.<android.animation.ValueAnimator: boolean isPulsingInternal()>();

        if $z0 == 0 goto label1;

        l0 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        l1 = r0.<android.animation.ValueAnimator: long mStartTime>;

        $l2 = specialinvoke r0.<android.animation.ValueAnimator: long getScaledDuration()>();

        $l3 = l0 - l1;

        $l4 = $l2 - $l3;

        $l5 = l0 - $l4;

        r0.<android.animation.ValueAnimator: long mStartTime> = $l5;

        r0.<android.animation.ValueAnimator: boolean mStartTimeCommitted> = 1;

        $z4 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        $z5 = $z4 ^ 1;

        r0.<android.animation.ValueAnimator: boolean mReversing> = $z5;

        goto label3;

     label1:
        $z1 = r0.<android.animation.ValueAnimator: boolean mStarted>;

        if $z1 == 0 goto label2;

        $z2 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        $z3 = $z2 ^ 1;

        r0.<android.animation.ValueAnimator: boolean mReversing> = $z3;

        virtualinvoke r0.<android.animation.ValueAnimator: void end()>();

        goto label3;

     label2:
        specialinvoke r0.<android.animation.ValueAnimator: void start(boolean)>(1);

     label3:
        return;
    }

    public void setAllowRunningAsynchronously(boolean)
    {
        android.animation.ValueAnimator r0;
        boolean z0;

        r0 := @this: android.animation.ValueAnimator;

        z0 := @parameter0: boolean;

        return;
    }

    public void setAnimationHandler(android.animation.AnimationHandler)
    {
        android.animation.ValueAnimator r0;
        android.animation.AnimationHandler r1;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: android.animation.AnimationHandler;

        r0.<android.animation.ValueAnimator: android.animation.AnimationHandler mAnimationHandler> = r1;

        return;
    }

    public void setCurrentFraction(float)
    {
        android.animation.ValueAnimator r0;
        long l0, $l1, $l2, $l3;
        boolean $z0, $z1;
        float $f0, $f1, $f2, f3, f4;

        r0 := @this: android.animation.ValueAnimator;

        f3 := @parameter0: float;

        virtualinvoke r0.<android.animation.ValueAnimator: void initAnimation()>();

        f4 = specialinvoke r0.<android.animation.ValueAnimator: float clampFraction(float)>(f3);

        r0.<android.animation.ValueAnimator: boolean mStartTimeCommitted> = 1;

        $z0 = specialinvoke r0.<android.animation.ValueAnimator: boolean isPulsingInternal()>();

        if $z0 == 0 goto label1;

        $l1 = specialinvoke r0.<android.animation.ValueAnimator: long getScaledDuration()>();

        $f1 = (float) $l1;

        $f2 = $f1 * f4;

        l0 = (long) $f2;

        $l2 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        $l3 = $l2 - l0;

        r0.<android.animation.ValueAnimator: long mStartTime> = $l3;

        goto label2;

     label1:
        r0.<android.animation.ValueAnimator: float mSeekFraction> = f4;

     label2:
        r0.<android.animation.ValueAnimator: float mOverallFraction> = f4;

        $z1 = r0.<android.animation.ValueAnimator: boolean mReversing>;

        $f0 = specialinvoke r0.<android.animation.ValueAnimator: float getCurrentIterationFraction(float,boolean)>(f4, $z1);

        virtualinvoke r0.<android.animation.ValueAnimator: void animateValue(float)>($f0);

        return;
    }

    public void setCurrentPlayTime(long)
    {
        android.animation.ValueAnimator r0;
        long l0, l1;
        byte $b2;
        float $f0, $f1, f2;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        l1 = r0.<android.animation.ValueAnimator: long mDuration>;

        $b2 = l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $f1 = (float) l0;

        $f0 = (float) l1;

        f2 = $f1 / $f0;

        goto label2;

     label1:
        f2 = 1.0F;

     label2:
        virtualinvoke r0.<android.animation.ValueAnimator: void setCurrentFraction(float)>(f2);

        return;
    }

    public volatile android.animation.Animator setDuration(long)
    {
        android.animation.ValueAnimator r0, $r1;
        long l0;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(l0);

        return $r1;
    }

    public android.animation.ValueAnimator setDuration(long)
    {
        android.animation.ValueAnimator r0;
        long l0;
        byte $b1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<android.animation.ValueAnimator: long mDuration> = l0;

        return r0;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Animators cannot have negative duration: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void setEvaluator(android.animation.TypeEvaluator)
    {
        android.animation.ValueAnimator r0;
        android.animation.TypeEvaluator r1;
        android.animation.PropertyValuesHolder[] r2;
        int $i0;
        android.animation.PropertyValuesHolder $r3;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: android.animation.TypeEvaluator;

        if r1 == null goto label1;

        r2 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 <= 0 goto label1;

        $r3 = r2[0];

        virtualinvoke $r3.<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>(r1);

     label1:
        return;
    }

    public transient void setFloatValues(float[])
    {
        android.animation.ValueAnimator r0;
        float[] r1;
        android.animation.PropertyValuesHolder[] r2, $r3;
        int $i0, $i1;
        android.animation.PropertyValuesHolder $r4, $r5;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: float[];

        if r1 == null goto label5;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        goto label5;

     label1:
        r2 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        if r2 == null goto label3;

        $i1 = lengthof r2;

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        $r5 = r2[0];

        virtualinvoke $r5.<android.animation.PropertyValuesHolder: void setFloatValues(float[])>(r1);

        goto label4;

     label3:
        $r3 = newarray (android.animation.PropertyValuesHolder)[1];

        $r4 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("", r1);

        $r3[0] = $r4;

        virtualinvoke r0.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>($r3);

     label4:
        r0.<android.animation.ValueAnimator: boolean mInitialized> = 0;

        return;

     label5:
        return;
    }

    public transient void setIntValues(int[])
    {
        android.animation.ValueAnimator r0;
        int[] r1;
        android.animation.PropertyValuesHolder[] r2, $r3;
        int $i0, $i1;
        android.animation.PropertyValuesHolder $r4, $r5;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: int[];

        if r1 == null goto label5;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        goto label5;

     label1:
        r2 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        if r2 == null goto label3;

        $i1 = lengthof r2;

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        $r5 = r2[0];

        virtualinvoke $r5.<android.animation.PropertyValuesHolder: void setIntValues(int[])>(r1);

        goto label4;

     label3:
        $r3 = newarray (android.animation.PropertyValuesHolder)[1];

        $r4 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>("", r1);

        $r3[0] = $r4;

        virtualinvoke r0.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>($r3);

     label4:
        r0.<android.animation.ValueAnimator: boolean mInitialized> = 0;

        return;

     label5:
        return;
    }

    public void setInterpolator(android.animation.TimeInterpolator)
    {
        android.animation.ValueAnimator r0;
        android.animation.TimeInterpolator r1;
        android.view.animation.LinearInterpolator $r2;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: android.animation.TimeInterpolator;

        if r1 == null goto label1;

        r0.<android.animation.ValueAnimator: android.animation.TimeInterpolator mInterpolator> = r1;

        goto label2;

     label1:
        $r2 = new android.view.animation.LinearInterpolator;

        specialinvoke $r2.<android.view.animation.LinearInterpolator: void <init>()>();

        r0.<android.animation.ValueAnimator: android.animation.TimeInterpolator mInterpolator> = $r2;

     label2:
        return;
    }

    public transient void setObjectValues(java.lang.Object[])
    {
        android.animation.ValueAnimator r0;
        java.lang.Object[] r1;
        android.animation.PropertyValuesHolder[] r2, $r3;
        int $i0, $i1;
        android.animation.PropertyValuesHolder $r4, $r5;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: java.lang.Object[];

        if r1 == null goto label5;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        goto label5;

     label1:
        r2 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        if r2 == null goto label3;

        $i1 = lengthof r2;

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        $r5 = r2[0];

        virtualinvoke $r5.<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>(r1);

        goto label4;

     label3:
        $r3 = newarray (android.animation.PropertyValuesHolder)[1];

        $r4 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>("", null, r1);

        $r3[0] = $r4;

        virtualinvoke r0.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>($r3);

     label4:
        r0.<android.animation.ValueAnimator: boolean mInitialized> = 0;

        return;

     label5:
        return;
    }

    public void setRepeatCount(int)
    {
        android.animation.ValueAnimator r0;
        int i0;

        r0 := @this: android.animation.ValueAnimator;

        i0 := @parameter0: int;

        r0.<android.animation.ValueAnimator: int mRepeatCount> = i0;

        return;
    }

    public void setRepeatMode(int)
    {
        android.animation.ValueAnimator r0;
        int i0;

        r0 := @this: android.animation.ValueAnimator;

        i0 := @parameter0: int;

        r0.<android.animation.ValueAnimator: int mRepeatMode> = i0;

        return;
    }

    public void setStartDelay(long)
    {
        android.animation.ValueAnimator r0;
        long l0, l3;
        byte $b1;

        r0 := @this: android.animation.ValueAnimator;

        l0 := @parameter0: long;

        l3 = l0;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ValueAnimator", "Start delay should always be non-negative");

        l3 = 0L;

     label1:
        r0.<android.animation.ValueAnimator: long mStartDelay> = l3;

        return;
    }

    public transient void setValues(android.animation.PropertyValuesHolder[])
    {
        android.animation.ValueAnimator r0;
        android.animation.PropertyValuesHolder[] r1;
        int i0, i1;
        android.animation.PropertyValuesHolder r2;
        java.util.HashMap $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.animation.ValueAnimator;

        r1 := @parameter0: android.animation.PropertyValuesHolder[];

        i0 = lengthof r1;

        r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues> = r1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(i0);

        r0.<android.animation.ValueAnimator: java.util.HashMap mValuesMap> = $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r4 = r0.<android.animation.ValueAnimator: java.util.HashMap mValuesMap>;

        $r5 = virtualinvoke r2.<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<android.animation.ValueAnimator: boolean mInitialized> = 0;

        return;
    }

    void skipToEndValue(boolean)
    {
        android.animation.ValueAnimator r0;
        boolean z0;
        int $i0, $i1, $i2;
        float f0, f1;

        r0 := @this: android.animation.ValueAnimator;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.animation.ValueAnimator: void initAnimation()>();

        if z0 == 0 goto label1;

        f0 = 0.0F;

        goto label2;

     label1:
        f0 = 1.0F;

     label2:
        f1 = f0;

        $i0 = r0.<android.animation.ValueAnimator: int mRepeatCount>;

        $i1 = $i0 % 2;

        if $i1 != 1 goto label3;

        f1 = f0;

        $i2 = r0.<android.animation.ValueAnimator: int mRepeatMode>;

        if $i2 != 2 goto label3;

        f1 = 0.0F;

     label3:
        virtualinvoke r0.<android.animation.ValueAnimator: void animateValue(float)>(f1);

        return;
    }

    public void start()
    {
        android.animation.ValueAnimator r0;

        r0 := @this: android.animation.ValueAnimator;

        specialinvoke r0.<android.animation.ValueAnimator: void start(boolean)>(0);

        return;
    }

    void startWithoutPulsing(boolean)
    {
        android.animation.ValueAnimator r0;
        boolean z0;

        r0 := @this: android.animation.ValueAnimator;

        z0 := @parameter0: boolean;

        r0.<android.animation.ValueAnimator: boolean mSuppressSelfPulseRequested> = 1;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.animation.ValueAnimator: void reverse()>();

        goto label2;

     label1:
        virtualinvoke r0.<android.animation.ValueAnimator: void start()>();

     label2:
        r0.<android.animation.ValueAnimator: boolean mSuppressSelfPulseRequested> = 0;

        return;
    }

    public java.lang.String toString()
    {
        android.animation.ValueAnimator r0;
        java.lang.StringBuilder $r1, $r7;
        int $i0, $i1, i2;
        java.lang.String $r3, $r12, r15, r16;
        android.animation.PropertyValuesHolder[] $r5, $r6, $r10;
        android.animation.PropertyValuesHolder $r11;

        r0 := @this: android.animation.ValueAnimator;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ValueAnimator@");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r15 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r16 = r15;

        $r5 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        if $r5 == null goto label2;

        i2 = 0;

     label1:
        r16 = r15;

        $r6 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

        $r10 = r0.<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] mValues>;

        $r11 = $r10[i2];

        $r12 = virtualinvoke $r11.<android.animation.PropertyValuesHolder: java.lang.String toString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r15 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return r16;
    }
}
