public class android.app.ActivityManager$TaskDescription extends java.lang.Object implements android.os.Parcelable
{
    private static final java.lang.String ATTR_TASKDESCRIPTIONCOLOR_BACKGROUND;
    private static final java.lang.String ATTR_TASKDESCRIPTIONCOLOR_PRIMARY;
    private static final java.lang.String ATTR_TASKDESCRIPTIONICON_FILENAME;
    private static final java.lang.String ATTR_TASKDESCRIPTIONICON_RESOURCE;
    private static final java.lang.String ATTR_TASKDESCRIPTIONICON_RESOURCE_PACKAGE;
    private static final java.lang.String ATTR_TASKDESCRIPTIONLABEL;
    public static final java.lang.String ATTR_TASKDESCRIPTION_PREFIX;
    public static final android.os.Parcelable$Creator CREATOR;
    private int mColorBackground;
    private int mColorPrimary;
    private boolean mEnsureNavigationBarContrastWhenTransparent;
    private boolean mEnsureStatusBarContrastWhenTransparent;
    private android.graphics.drawable.Icon mIcon;
    private java.lang.String mIconFilename;
    private java.lang.String mLabel;
    private int mMinHeight;
    private int mMinWidth;
    private int mNavigationBarColor;
    private int mResizeMode;
    private int mStatusBarColor;

    static void <clinit>()
    {
        android.app.ActivityManager$TaskDescription$1 $r0;

        <android.app.ActivityManager$TaskDescription: java.lang.String ATTR_TASKDESCRIPTION_PREFIX> = "task_description_";

        <android.app.ActivityManager$TaskDescription: java.lang.String ATTR_TASKDESCRIPTIONLABEL> = "task_description_label";

        <android.app.ActivityManager$TaskDescription: java.lang.String ATTR_TASKDESCRIPTIONICON_RESOURCE_PACKAGE> = "task_description_icon_package";

        <android.app.ActivityManager$TaskDescription: java.lang.String ATTR_TASKDESCRIPTIONICON_RESOURCE> = "task_description_icon_resource";

        <android.app.ActivityManager$TaskDescription: java.lang.String ATTR_TASKDESCRIPTIONICON_FILENAME> = "task_description_icon_filename";

        <android.app.ActivityManager$TaskDescription: java.lang.String ATTR_TASKDESCRIPTIONCOLOR_PRIMARY> = "task_description_color";

        <android.app.ActivityManager$TaskDescription: java.lang.String ATTR_TASKDESCRIPTIONCOLOR_BACKGROUND> = "task_description_colorBackground";

        $r0 = new android.app.ActivityManager$TaskDescription$1;

        specialinvoke $r0.<android.app.ActivityManager$TaskDescription$1: void <init>()>();

        <android.app.ActivityManager$TaskDescription: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>()
    {
        android.app.ActivityManager$TaskDescription r0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        specialinvoke r0.<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.drawable.Icon,int,int,int,int,boolean,boolean,int,int,int)>(null, null, 0, 0, 0, 0, 0, 0, 2, -1, -1);

        return;
    }

    public void <init>(android.app.ActivityManager$TaskDescription)
    {
        android.app.ActivityManager$TaskDescription r0, r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.app.ActivityManager$TaskDescription;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<android.app.ActivityManager$TaskDescription: void copyFrom(android.app.ActivityManager$TaskDescription)>(r1);

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.app.ActivityManager$TaskDescription r0;
        android.os.Parcel r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<android.app.ActivityManager$TaskDescription: void readFromParcel(android.os.Parcel)>(r1);

        return;
    }

    void <init>(android.os.Parcel, android.app.ActivityManager$1)
    {
        android.app.ActivityManager$TaskDescription r0;
        android.os.Parcel r1;
        android.app.ActivityManager$1 r2;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.app.ActivityManager$1;

        specialinvoke r0.<android.app.ActivityManager$TaskDescription: void <init>(android.os.Parcel)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.drawable.Icon,int,int,int,int,boolean,boolean,int,int,int)>(r1, null, 0, 0, 0, 0, 0, 0, 2, -1, -1);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1, $r2;
        int i0;
        android.graphics.drawable.Icon $r3;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        $r3 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>($r2, i0);

        specialinvoke r0.<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.drawable.Icon,int,int,int,int,boolean,boolean,int,int,int)>(r1, $r3, 0, 0, 0, 0, 0, 0, 2, -1, -1);

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1, $r2;
        int i0, i1, $i2;
        android.graphics.drawable.Icon $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        $r3 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>($r2, i0);

        specialinvoke r0.<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.drawable.Icon,int,int,int,int,boolean,boolean,int,int,int)>(r1, $r3, i1, 0, 0, 0, 0, 0, 2, -1, -1);

        if i1 == 0 goto label2;

        $i2 = staticinvoke <android.graphics.Color: int alpha(int)>(i1);

        if $i2 != 255 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("A TaskDescription\'s primary color should be opaque");

        throw $r4;

     label2:
        return;
    }

    public void <init>(java.lang.String, android.graphics.Bitmap)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1;
        android.graphics.Bitmap r2;
        android.graphics.drawable.Icon r3;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Bitmap;

        if r2 == null goto label1;

        r3 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>(r2);

        goto label2;

     label1:
        r3 = null;

     label2:
        specialinvoke r0.<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.drawable.Icon,int,int,int,int,boolean,boolean,int,int,int)>(r1, r3, 0, 0, 0, 0, 0, 0, 2, -1, -1);

        return;
    }

    public void <init>(java.lang.String, android.graphics.Bitmap, int)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.RuntimeException $r2;
        android.graphics.Bitmap r3;
        android.graphics.drawable.Icon r4;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: android.graphics.Bitmap;

        i0 := @parameter2: int;

        if r3 == null goto label1;

        r4 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>(r3);

        goto label2;

     label1:
        r4 = null;

     label2:
        specialinvoke r0.<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.drawable.Icon,int,int,int,int,boolean,boolean,int,int,int)>(r1, r4, i0, 0, 0, 0, 0, 0, 2, -1, -1);

        if i0 == 0 goto label4;

        $i1 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        if $i1 != 255 goto label3;

        goto label4;

     label3:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("A TaskDescription\'s primary color should be opaque");

        throw $r2;

     label4:
        return;
    }

    public void <init>(java.lang.String, android.graphics.drawable.Icon, int, int, int, int, boolean, boolean, int, int, int)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1;
        android.graphics.drawable.Icon r2;
        int i0, i1, i2, i3, i4, i5, i6;
        boolean z0, z1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.drawable.Icon;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        i4 := @parameter8: int;

        i5 := @parameter9: int;

        i6 := @parameter10: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel> = r1;

        r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon> = r2;

        r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary> = i0;

        r0.<android.app.ActivityManager$TaskDescription: int mColorBackground> = i1;

        r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor> = i2;

        r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor> = i3;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent> = z0;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent> = z1;

        r0.<android.app.ActivityManager$TaskDescription: int mResizeMode> = i4;

        r0.<android.app.ActivityManager$TaskDescription: int mMinWidth> = i5;

        r0.<android.app.ActivityManager$TaskDescription: int mMinHeight> = i6;

        return;
    }

    public static boolean equals(android.app.ActivityManager$TaskDescription, android.app.ActivityManager$TaskDescription)
    {
        android.app.ActivityManager$TaskDescription r0, r1;
        boolean $z0;

        r0 := @parameter0: android.app.ActivityManager$TaskDescription;

        r1 := @parameter1: android.app.ActivityManager$TaskDescription;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 == null goto label2;

        $z0 = virtualinvoke r0.<android.app.ActivityManager$TaskDescription: boolean equals(java.lang.Object)>(r1);

        return $z0;

     label2:
        return 0;
    }

    public static android.graphics.Bitmap loadTaskDescriptionIcon(java.lang.String, int)
    {
        int i0;
        android.app.IActivityTaskManager $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;
        android.graphics.Bitmap r4;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r3 == null goto label4;

     label1:
        $r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager access$000()>();

        r4 = interfaceinvoke $r0.<android.app.IActivityTaskManager: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)>(r3, i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void copyFrom(android.app.ActivityManager$TaskDescription)
    {
        android.app.ActivityManager$TaskDescription r0, r1;
        java.lang.String $r2, $r4;
        android.graphics.drawable.Icon $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.app.ActivityManager$TaskDescription;

        $r2 = r1.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel> = $r2;

        $r3 = r1.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon> = $r3;

        $r4 = r1.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename> = $r4;

        $i0 = r1.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary> = $i0;

        $i1 = r1.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        r0.<android.app.ActivityManager$TaskDescription: int mColorBackground> = $i1;

        $i2 = r1.<android.app.ActivityManager$TaskDescription: int mStatusBarColor>;

        r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor> = $i2;

        $i3 = r1.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor>;

        r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor> = $i3;

        $z0 = r1.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent>;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent> = $z0;

        $z1 = r1.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent>;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent> = $z1;

        $i4 = r1.<android.app.ActivityManager$TaskDescription: int mResizeMode>;

        r0.<android.app.ActivityManager$TaskDescription: int mResizeMode> = $i4;

        $i5 = r1.<android.app.ActivityManager$TaskDescription: int mMinWidth>;

        r0.<android.app.ActivityManager$TaskDescription: int mMinWidth> = $i5;

        $i6 = r1.<android.app.ActivityManager$TaskDescription: int mMinHeight>;

        r0.<android.app.ActivityManager$TaskDescription: int mMinHeight> = $i6;

        return;
    }

    public void copyFromPreserveHiddenFields(android.app.ActivityManager$TaskDescription)
    {
        android.app.ActivityManager$TaskDescription r0, r1;
        java.lang.String $r2, $r4;
        android.graphics.drawable.Icon $r3;
        int $i0, i1, i2, i3, i4, i5, i6;
        boolean $z0, $z1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.app.ActivityManager$TaskDescription;

        $r2 = r1.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel> = $r2;

        $r3 = r1.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon> = $r3;

        $r4 = r1.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename> = $r4;

        $i0 = r1.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary> = $i0;

        i1 = r1.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        if i1 == 0 goto label1;

        r0.<android.app.ActivityManager$TaskDescription: int mColorBackground> = i1;

     label1:
        i2 = r1.<android.app.ActivityManager$TaskDescription: int mStatusBarColor>;

        if i2 == 0 goto label2;

        r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor> = i2;

     label2:
        i3 = r1.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor>;

        if i3 == 0 goto label3;

        r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor> = i3;

     label3:
        $z0 = r1.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent>;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent> = $z0;

        $z1 = r1.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent>;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent> = $z1;

        i4 = r1.<android.app.ActivityManager$TaskDescription: int mResizeMode>;

        if i4 == 2 goto label4;

        r0.<android.app.ActivityManager$TaskDescription: int mResizeMode> = i4;

     label4:
        i5 = r1.<android.app.ActivityManager$TaskDescription: int mMinWidth>;

        if i5 == -1 goto label5;

        r0.<android.app.ActivityManager$TaskDescription: int mMinWidth> = i5;

     label5:
        i6 = r1.<android.app.ActivityManager$TaskDescription: int mMinHeight>;

        if i6 == -1 goto label6;

        r0.<android.app.ActivityManager$TaskDescription: int mMinHeight> = i6;

     label6:
        return;
    }

    public int describeContents()
    {
        android.app.ActivityManager$TaskDescription r0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.app.ActivityManager$TaskDescription r0, r8;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.String $r1, $r2, $r3, $r4;
        android.graphics.drawable.Icon $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Object r7;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r7 := @parameter0: java.lang.Object;

        z0 = r7 instanceof android.app.ActivityManager$TaskDescription;

        z7 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r8 = (android.app.ActivityManager$TaskDescription) r7;

        $r2 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        $r1 = r8.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r2, $r1);

        if $z1 == 0 goto label2;

        $r4 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        $r3 = r8.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r4, $r3);

        if $z2 == 0 goto label2;

        $r6 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        $r5 = r8.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        if $r6 != $r5 goto label2;

        $i1 = r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        $i0 = r8.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        if $i1 != $i0 goto label2;

        $i3 = r0.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        $i2 = r8.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        if $i3 != $i2 goto label2;

        $i5 = r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor>;

        $i4 = r8.<android.app.ActivityManager$TaskDescription: int mStatusBarColor>;

        if $i5 != $i4 goto label2;

        $i7 = r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor>;

        $i6 = r8.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor>;

        if $i7 != $i6 goto label2;

        $z4 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent>;

        $z3 = r8.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent>;

        if $z4 != $z3 goto label2;

        $z6 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent>;

        $z5 = r8.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent>;

        if $z6 != $z5 goto label2;

        $i9 = r0.<android.app.ActivityManager$TaskDescription: int mResizeMode>;

        $i8 = r8.<android.app.ActivityManager$TaskDescription: int mResizeMode>;

        if $i9 != $i8 goto label2;

        $i11 = r0.<android.app.ActivityManager$TaskDescription: int mMinWidth>;

        $i10 = r8.<android.app.ActivityManager$TaskDescription: int mMinWidth>;

        if $i11 != $i10 goto label2;

        $i13 = r0.<android.app.ActivityManager$TaskDescription: int mMinHeight>;

        $i12 = r8.<android.app.ActivityManager$TaskDescription: int mMinHeight>;

        if $i13 != $i12 goto label2;

        z7 = 1;

        goto label2;

     label2:
        return z7;
    }

    public int getBackgroundColor()
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        return $i0;
    }

    public boolean getEnsureNavigationBarContrastWhenTransparent()
    {
        android.app.ActivityManager$TaskDescription r0;
        boolean $z0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $z0 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent>;

        return $z0;
    }

    public boolean getEnsureStatusBarContrastWhenTransparent()
    {
        android.app.ActivityManager$TaskDescription r0;
        boolean $z0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $z0 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent>;

        return $z0;
    }

    public android.graphics.Bitmap getIcon()
    {
        android.app.ActivityManager$TaskDescription r0;
        android.graphics.Bitmap r1, $r3;
        java.lang.String $r2;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 = virtualinvoke r0.<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getInMemoryIcon()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r3 = staticinvoke <android.app.ActivityManager$TaskDescription: android.graphics.Bitmap loadTaskDescriptionIcon(java.lang.String,int)>($r2, $i0);

        return $r3;
    }

    public java.lang.String getIconFilename()
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String $r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $r1 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        return $r1;
    }

    public int getIconResource()
    {
        android.app.ActivityManager$TaskDescription r0;
        android.graphics.drawable.Icon r1, $r2;
        int $i0, $i1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.graphics.drawable.Icon: int getType()>();

        if $i0 != 2 goto label1;

        $r2 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        $i1 = virtualinvoke $r2.<android.graphics.drawable.Icon: int getResId()>();

        return $i1;

     label1:
        return 0;
    }

    public java.lang.String getIconResourcePackage()
    {
        android.app.ActivityManager$TaskDescription r0;
        android.graphics.drawable.Icon r1, $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.graphics.drawable.Icon: int getType()>();

        if $i0 != 2 goto label1;

        $r2 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        $r3 = virtualinvoke $r2.<android.graphics.drawable.Icon: java.lang.String getResPackage()>();

        return $r3;

     label1:
        return "";
    }

    public android.graphics.Bitmap getInMemoryIcon()
    {
        android.app.ActivityManager$TaskDescription r0;
        android.graphics.drawable.Icon r1, $r2;
        int $i0;
        android.graphics.Bitmap $r3;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.graphics.drawable.Icon: int getType()>();

        if $i0 != 1 goto label1;

        $r2 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        $r3 = virtualinvoke $r2.<android.graphics.drawable.Icon: android.graphics.Bitmap getBitmap()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.String getLabel()
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String $r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $r1 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        return $r1;
    }

    public int getMinHeight()
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mMinHeight>;

        return $i0;
    }

    public int getMinWidth()
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mMinWidth>;

        return $i0;
    }

    public int getNavigationBarColor()
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor>;

        return $i0;
    }

    public int getPrimaryColor()
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        return $i0;
    }

    public android.graphics.drawable.Icon getRawIcon()
    {
        android.app.ActivityManager$TaskDescription r0;
        android.graphics.drawable.Icon $r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $r1 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        return $r1;
    }

    public int getResizeMode()
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mResizeMode>;

        return $i0;
    }

    public int getStatusBarColor()
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor>;

        return $i0;
    }

    public android.graphics.drawable.Icon loadIcon()
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String $r1;
        int $i0;
        android.graphics.drawable.Icon $r2, r3;
        android.graphics.Bitmap r4;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r3 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        if r3 == null goto label1;

        return r3;

     label1:
        $r1 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r4 = staticinvoke <android.app.ActivityManager$TaskDescription: android.graphics.Bitmap loadTaskDescriptionIcon(java.lang.String,int)>($r1, $i0);

        if r4 == null goto label2;

        $r2 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>(r4);

        return $r2;

     label2:
        return null;
    }

    public void readFromParcel(android.os.Parcel)
    {
        android.app.ActivityManager$TaskDescription r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1;
        android.os.Parcelable$Creator $r2;
        java.lang.Object $r3;
        android.graphics.drawable.Icon $r4;
        java.lang.String r5, r6;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.os.Parcel;

        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if i0 <= 0 goto label1;

        r5 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        goto label2;

     label1:
        r5 = null;

     label2:
        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel> = r5;

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i1 <= 0 goto label3;

        $r2 = <android.graphics.drawable.Icon: android.os.Parcelable$Creator CREATOR>;

        $r3 = interfaceinvoke $r2.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        $r4 = (android.graphics.drawable.Icon) $r3;

        r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon> = $r4;

     label3:
        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary> = $i2;

        $i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.ActivityManager$TaskDescription: int mColorBackground> = $i3;

        $i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor> = $i4;

        $i5 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor> = $i5;

        $z0 = virtualinvoke r1.<android.os.Parcel: boolean readBoolean()>();

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent> = $z0;

        $z1 = virtualinvoke r1.<android.os.Parcel: boolean readBoolean()>();

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent> = $z1;

        $i6 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.ActivityManager$TaskDescription: int mResizeMode> = $i6;

        $i7 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.ActivityManager$TaskDescription: int mMinWidth> = $i7;

        $i8 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.ActivityManager$TaskDescription: int mMinHeight> = $i8;

        r6 = null;

        $i9 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i9 <= 0 goto label4;

        r6 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

     label4:
        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename> = r6;

        return;
    }

    public void restoreFromXml(org.xmlpull.v1.XmlPullParser)
    {
        android.app.ActivityManager$TaskDescription r0;
        int $i0, $i2, $i4;
        android.graphics.drawable.Icon $r1;
        long $l1, $l3;
        org.xmlpull.v1.XmlPullParser r2;
        java.lang.String r3, r4, r5, r6, r7, r8;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r2 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "task_description_label");

        if r3 == null goto label1;

        virtualinvoke r0.<android.app.ActivityManager$TaskDescription: void setLabel(java.lang.String)>(r3);

     label1:
        r4 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "task_description_color");

        if r4 == null goto label2;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r4, 16);

        $i4 = (int) $l3;

        virtualinvoke r0.<android.app.ActivityManager$TaskDescription: void setPrimaryColor(int)>($i4);

     label2:
        r5 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "task_description_colorBackground");

        if r5 == null goto label3;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r5, 16);

        $i2 = (int) $l1;

        virtualinvoke r0.<android.app.ActivityManager$TaskDescription: void setBackgroundColor(int)>($i2);

     label3:
        r6 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "task_description_icon_filename");

        if r6 == null goto label4;

        virtualinvoke r0.<android.app.ActivityManager$TaskDescription: void setIconFilename(java.lang.String)>(r6);

     label4:
        r7 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "task_description_icon_resource");

        r8 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "task_description_icon_package");

        if r7 == null goto label5;

        if r8 == null goto label5;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r7, 10);

        $r1 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>(r8, $i0);

        virtualinvoke r0.<android.app.ActivityManager$TaskDescription: void setIcon(android.graphics.drawable.Icon)>($r1);

     label5:
        return;
    }

    public void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        android.app.ActivityManager$TaskDescription r0;
        org.xmlpull.v1.XmlSerializer r1;
        int $i0, $i1, i2, i3;
        android.graphics.drawable.Icon $r2, $r5, r16;
        java.lang.String $r3, $r6, $r9, $r11, r14, r15;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r14 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        if r14 == null goto label1;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_description_label", r14);

     label1:
        i2 = r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        if i2 == 0 goto label2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_description_color", $r11);

     label2:
        i3 = r0.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        if i3 == 0 goto label3;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_description_colorBackground", $r9);

     label3:
        r15 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        if r15 == null goto label4;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_description_icon_filename", r15);

     label4:
        r16 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        if r16 == null goto label5;

        $i0 = virtualinvoke r16.<android.graphics.drawable.Icon: int getType()>();

        if $i0 != 2 goto label5;

        $r2 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        $i1 = virtualinvoke $r2.<android.graphics.drawable.Icon: int getResId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_description_icon_resource", $r3);

        $r5 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        $r6 = virtualinvoke $r5.<android.graphics.drawable.Icon: java.lang.String getResPackage()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_description_icon_package", $r6);

     label5:
        return;
    }

    public void setBackgroundColor(int)
    {
        android.app.ActivityManager$TaskDescription r0;
        int i0, $i1;
        java.lang.RuntimeException $r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        $i1 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        if $i1 != 255 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("A TaskDescription\'s background color should be opaque");

        throw $r1;

     label2:
        r0.<android.app.ActivityManager$TaskDescription: int mColorBackground> = i0;

        return;
    }

    public void setEnsureNavigationBarContrastWhenTransparent(boolean)
    {
        android.app.ActivityManager$TaskDescription r0;
        boolean z0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        z0 := @parameter0: boolean;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent> = z0;

        return;
    }

    public void setEnsureStatusBarContrastWhenTransparent(boolean)
    {
        android.app.ActivityManager$TaskDescription r0;
        boolean z0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        z0 := @parameter0: boolean;

        r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent> = z0;

        return;
    }

    public void setIcon(android.graphics.drawable.Icon)
    {
        android.app.ActivityManager$TaskDescription r0;
        android.graphics.drawable.Icon r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.graphics.drawable.Icon;

        r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon> = r1;

        return;
    }

    public void setIconFilename(java.lang.String)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename> = r1;

        if r1 == null goto label1;

        r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon> = null;

     label1:
        return;
    }

    public void setLabel(java.lang.String)
    {
        android.app.ActivityManager$TaskDescription r0;
        java.lang.String r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: java.lang.String;

        r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel> = r1;

        return;
    }

    public void setMinHeight(int)
    {
        android.app.ActivityManager$TaskDescription r0;
        int i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        i0 := @parameter0: int;

        r0.<android.app.ActivityManager$TaskDescription: int mMinHeight> = i0;

        return;
    }

    public void setMinWidth(int)
    {
        android.app.ActivityManager$TaskDescription r0;
        int i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        i0 := @parameter0: int;

        r0.<android.app.ActivityManager$TaskDescription: int mMinWidth> = i0;

        return;
    }

    public void setNavigationBarColor(int)
    {
        android.app.ActivityManager$TaskDescription r0;
        int i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        i0 := @parameter0: int;

        r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor> = i0;

        return;
    }

    public void setPrimaryColor(int)
    {
        android.app.ActivityManager$TaskDescription r0;
        int i0, $i1;
        java.lang.RuntimeException $r1;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        $i1 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        if $i1 != 255 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("A TaskDescription\'s primary color should be opaque");

        throw $r1;

     label2:
        r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary> = i0;

        return;
    }

    public void setResizeMode(int)
    {
        android.app.ActivityManager$TaskDescription r0;
        int i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        i0 := @parameter0: int;

        r0.<android.app.ActivityManager$TaskDescription: int mResizeMode> = i0;

        return;
    }

    public void setStatusBarColor(int)
    {
        android.app.ActivityManager$TaskDescription r0;
        int i0;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        i0 := @parameter0: int;

        r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor> = i0;

        return;
    }

    public java.lang.String toString()
    {
        android.app.ActivityManager$TaskDescription r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r11, $r24, $r30, r31, r32;
        android.graphics.drawable.Icon $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TaskDescription Label: ");

        $r5 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Icon: ");

        $r8 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IconFilename: ");

        $r11 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" colorPrimary: ");

        $i0 = r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" colorBackground: ");

        $i1 = r0.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" statusBarColor: ");

        $i2 = r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        z0 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent>;

        if z0 == 0 goto label1;

        r31 = " (contrast when transparent)";

        goto label2;

     label1:
        r31 = "";

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" navigationBarColor: ");

        $i3 = r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $z1 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent>;

        if $z1 == 0 goto label3;

        r32 = " (contrast when transparent)";

        goto label4;

     label3:
        r32 = "";

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resizeMode: ");

        $i4 = r0.<android.app.ActivityManager$TaskDescription: int mResizeMode>;

        $r24 = staticinvoke <android.content.pm.ActivityInfo: java.lang.String resizeModeToString(int)>($i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minWidth: ");

        $i5 = r0.<android.app.ActivityManager$TaskDescription: int mMinWidth>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minHeight: ");

        $i6 = r0.<android.app.ActivityManager$TaskDescription: int mMinHeight>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r30 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r30;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.app.ActivityManager$TaskDescription r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Bitmap r2;
        java.lang.String $r3, $r4, $r6, $r8;
        android.graphics.drawable.Icon $r5, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: android.app.ActivityManager$TaskDescription;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        if $r3 != null goto label1;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        goto label2;

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        $r4 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mLabel>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r4);

     label2:
        r2 = virtualinvoke r0.<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getInMemoryIcon()>();

        $r5 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        if $r5 == null goto label4;

        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<android.graphics.Bitmap: boolean isRecycled()>();

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        $r7 = r0.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon mIcon>;

        virtualinvoke $r7.<android.graphics.drawable.Icon: void writeToParcel(android.os.Parcel,int)>(r1, 0);

        goto label5;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label5:
        $i1 = r0.<android.app.ActivityManager$TaskDescription: int mColorPrimary>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<android.app.ActivityManager$TaskDescription: int mColorBackground>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<android.app.ActivityManager$TaskDescription: int mStatusBarColor>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $i4 = r0.<android.app.ActivityManager$TaskDescription: int mNavigationBarColor>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $z1 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureStatusBarContrastWhenTransparent>;

        virtualinvoke r1.<android.os.Parcel: void writeBoolean(boolean)>($z1);

        $z2 = r0.<android.app.ActivityManager$TaskDescription: boolean mEnsureNavigationBarContrastWhenTransparent>;

        virtualinvoke r1.<android.os.Parcel: void writeBoolean(boolean)>($z2);

        $i5 = r0.<android.app.ActivityManager$TaskDescription: int mResizeMode>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $i6 = r0.<android.app.ActivityManager$TaskDescription: int mMinWidth>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i6);

        $i7 = r0.<android.app.ActivityManager$TaskDescription: int mMinHeight>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i7);

        $r8 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        if $r8 != null goto label6;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        goto label7;

     label6:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        $r6 = r0.<android.app.ActivityManager$TaskDescription: java.lang.String mIconFilename>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r6);

     label7:
        return;
    }
}
