public class android.app.ActivityManager extends java.lang.Object
{
    public static final java.lang.String ACTION_REPORT_HEAP_LIMIT;
    public static final int APP_START_MODE_DELAYED;
    public static final int APP_START_MODE_DELAYED_RIGID;
    public static final int APP_START_MODE_DISABLED;
    public static final int APP_START_MODE_NORMAL;
    public static final int ASSIST_CONTEXT_AUTOFILL;
    public static final int ASSIST_CONTEXT_BASIC;
    public static final int ASSIST_CONTEXT_FULL;
    public static final int BROADCAST_FAILED_USER_STOPPED;
    public static final int BROADCAST_STICKY_CANT_HAVE_PERMISSION;
    public static final int BROADCAST_SUCCESS;
    public static final int COMPAT_MODE_ALWAYS;
    public static final int COMPAT_MODE_DISABLED;
    public static final int COMPAT_MODE_ENABLED;
    public static final int COMPAT_MODE_NEVER;
    public static final int COMPAT_MODE_TOGGLE;
    public static final int COMPAT_MODE_UNKNOWN;
    private static final boolean DEVELOPMENT_FORCE_LOW_RAM;
    private static final int FIRST_START_FATAL_ERROR_CODE;
    private static final int FIRST_START_NON_FATAL_ERROR_CODE;
    private static final int FIRST_START_SUCCESS_CODE;
    public static final int FLAG_AND_LOCKED;
    public static final int FLAG_AND_UNLOCKED;
    public static final int FLAG_AND_UNLOCKING_OR_UNLOCKED;
    public static final int FLAG_OR_STOPPED;
    private static final android.util.Singleton IActivityManagerSingleton;
    public static final int INSTR_FLAG_DISABLE_HIDDEN_API_CHECKS;
    public static final int INSTR_FLAG_DISABLE_ISOLATED_STORAGE;
    public static final int INSTR_FLAG_DISABLE_TEST_API_CHECKS;
    public static final int INTENT_SENDER_ACTIVITY;
    public static final int INTENT_SENDER_ACTIVITY_RESULT;
    public static final int INTENT_SENDER_BROADCAST;
    public static final int INTENT_SENDER_FOREGROUND_SERVICE;
    public static final int INTENT_SENDER_SERVICE;
    private static final int LAST_START_FATAL_ERROR_CODE;
    private static final int LAST_START_NON_FATAL_ERROR_CODE;
    private static final int LAST_START_SUCCESS_CODE;
    public static final int LOCK_TASK_MODE_LOCKED;
    public static final int LOCK_TASK_MODE_NONE;
    public static final int LOCK_TASK_MODE_PINNED;
    public static final int MAX_PROCESS_STATE;
    public static final java.lang.String META_HOME_ALTERNATE;
    public static final int MIN_PROCESS_STATE;
    public static final int MOVE_TASK_NO_USER_ACTION;
    public static final int MOVE_TASK_WITH_HOME;
    public static final int PROCESS_CAPABILITY_ALL;
    public static final int PROCESS_CAPABILITY_ALL_EXPLICIT;
    public static final int PROCESS_CAPABILITY_ALL_IMPLICIT;
    public static final int PROCESS_CAPABILITY_FOREGROUND_CAMERA;
    public static final int PROCESS_CAPABILITY_FOREGROUND_LOCATION;
    public static final int PROCESS_CAPABILITY_FOREGROUND_MICROPHONE;
    public static final int PROCESS_CAPABILITY_NONE;
    public static final int PROCESS_STATE_BACKUP;
    public static final int PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
    public static final int PROCESS_STATE_BOUND_TOP;
    public static final int PROCESS_STATE_CACHED_ACTIVITY;
    public static final int PROCESS_STATE_CACHED_ACTIVITY_CLIENT;
    public static final int PROCESS_STATE_CACHED_EMPTY;
    public static final int PROCESS_STATE_CACHED_RECENT;
    public static final int PROCESS_STATE_FOREGROUND_SERVICE;
    public static final int PROCESS_STATE_HEAVY_WEIGHT;
    public static final int PROCESS_STATE_HOME;
    public static final int PROCESS_STATE_IMPORTANT_BACKGROUND;
    public static final int PROCESS_STATE_IMPORTANT_FOREGROUND;
    public static final int PROCESS_STATE_LAST_ACTIVITY;
    public static final int PROCESS_STATE_NONEXISTENT;
    public static final int PROCESS_STATE_PERSISTENT;
    public static final int PROCESS_STATE_PERSISTENT_UI;
    public static final int PROCESS_STATE_RECEIVER;
    public static final int PROCESS_STATE_SERVICE;
    public static final int PROCESS_STATE_TOP;
    public static final int PROCESS_STATE_TOP_SLEEPING;
    public static final int PROCESS_STATE_TRANSIENT_BACKGROUND;
    public static final int PROCESS_STATE_UNKNOWN;
    public static final int RECENT_IGNORE_UNAVAILABLE;
    public static final int RECENT_WITH_EXCLUDED;
    public static final int START_ABORTED;
    public static final int START_ASSISTANT_HIDDEN_SESSION;
    public static final int START_ASSISTANT_NOT_ACTIVE_SESSION;
    public static final int START_CANCELED;
    public static final int START_CLASS_NOT_FOUND;
    public static final int START_DELIVERED_TO_TOP;
    public static final int START_FLAG_DEBUG;
    public static final int START_FLAG_NATIVE_DEBUGGING;
    public static final int START_FLAG_ONLY_IF_NEEDED;
    public static final int START_FLAG_TRACK_ALLOCATION;
    public static final int START_FORWARD_AND_REQUEST_CONFLICT;
    public static final int START_INTENT_NOT_RESOLVED;
    public static final int START_NOT_ACTIVITY;
    public static final int START_NOT_CURRENT_USER_ACTIVITY;
    public static final int START_NOT_VOICE_COMPATIBLE;
    public static final int START_PERMISSION_DENIED;
    public static final int START_RETURN_INTENT_TO_CALLER;
    public static final int START_RETURN_LOCK_TASK_MODE_VIOLATION;
    public static final int START_SUCCESS;
    public static final int START_SWITCHES_CANCELED;
    public static final int START_TASK_TO_FRONT;
    public static final int START_VOICE_HIDDEN_SESSION;
    public static final int START_VOICE_NOT_ACTIVE_SESSION;
    private static java.lang.String TAG;
    public static final int UID_OBSERVER_ACTIVE;
    public static final int UID_OBSERVER_CACHED;
    public static final int UID_OBSERVER_GONE;
    public static final int UID_OBSERVER_IDLE;
    public static final int UID_OBSERVER_PROCSTATE;
    public static final int USER_OP_ERROR_IS_SYSTEM;
    public static final int USER_OP_ERROR_RELATED_USERS_CANNOT_STOP;
    public static final int USER_OP_IS_CURRENT;
    public static final int USER_OP_SUCCESS;
    public static final int USER_OP_UNKNOWN_USER;
    private static volatile boolean sSystemReady;
    android.graphics.Point mAppTaskThumbnailSize;
    private final android.content.Context mContext;
    final android.util.ArrayMap mImportanceListeners;

    static void <clinit>()
    {
        boolean $z0;
        android.app.ActivityManager$1 $r0;

        <android.app.ActivityManager: int USER_OP_UNKNOWN_USER> = -1;

        <android.app.ActivityManager: int USER_OP_SUCCESS> = 0;

        <android.app.ActivityManager: int USER_OP_IS_CURRENT> = -2;

        <android.app.ActivityManager: int USER_OP_ERROR_RELATED_USERS_CANNOT_STOP> = -4;

        <android.app.ActivityManager: int USER_OP_ERROR_IS_SYSTEM> = -3;

        <android.app.ActivityManager: int UID_OBSERVER_PROCSTATE> = 1;

        <android.app.ActivityManager: int UID_OBSERVER_IDLE> = 4;

        <android.app.ActivityManager: int UID_OBSERVER_GONE> = 2;

        <android.app.ActivityManager: int UID_OBSERVER_CACHED> = 16;

        <android.app.ActivityManager: int UID_OBSERVER_ACTIVE> = 8;

        <android.app.ActivityManager: int START_VOICE_NOT_ACTIVE_SESSION> = -99;

        <android.app.ActivityManager: int START_VOICE_HIDDEN_SESSION> = -100;

        <android.app.ActivityManager: int START_TASK_TO_FRONT> = 2;

        <android.app.ActivityManager: int START_SWITCHES_CANCELED> = 100;

        <android.app.ActivityManager: int START_SUCCESS> = 0;

        <android.app.ActivityManager: int START_RETURN_LOCK_TASK_MODE_VIOLATION> = 101;

        <android.app.ActivityManager: int START_RETURN_INTENT_TO_CALLER> = 1;

        <android.app.ActivityManager: int START_PERMISSION_DENIED> = -94;

        <android.app.ActivityManager: int START_NOT_VOICE_COMPATIBLE> = -97;

        <android.app.ActivityManager: int START_NOT_CURRENT_USER_ACTIVITY> = -98;

        <android.app.ActivityManager: int START_NOT_ACTIVITY> = -95;

        <android.app.ActivityManager: int START_INTENT_NOT_RESOLVED> = -91;

        <android.app.ActivityManager: int START_FORWARD_AND_REQUEST_CONFLICT> = -93;

        <android.app.ActivityManager: int START_FLAG_TRACK_ALLOCATION> = 4;

        <android.app.ActivityManager: int START_FLAG_ONLY_IF_NEEDED> = 1;

        <android.app.ActivityManager: int START_FLAG_NATIVE_DEBUGGING> = 8;

        <android.app.ActivityManager: int START_FLAG_DEBUG> = 2;

        <android.app.ActivityManager: int START_DELIVERED_TO_TOP> = 3;

        <android.app.ActivityManager: int START_CLASS_NOT_FOUND> = -92;

        <android.app.ActivityManager: int START_CANCELED> = -96;

        <android.app.ActivityManager: int START_ASSISTANT_NOT_ACTIVE_SESSION> = -89;

        <android.app.ActivityManager: int START_ASSISTANT_HIDDEN_SESSION> = -90;

        <android.app.ActivityManager: int START_ABORTED> = 102;

        <android.app.ActivityManager: int RECENT_WITH_EXCLUDED> = 1;

        <android.app.ActivityManager: int RECENT_IGNORE_UNAVAILABLE> = 2;

        <android.app.ActivityManager: int PROCESS_STATE_UNKNOWN> = -1;

        <android.app.ActivityManager: int PROCESS_STATE_TRANSIENT_BACKGROUND> = 8;

        <android.app.ActivityManager: int PROCESS_STATE_TOP_SLEEPING> = 12;

        <android.app.ActivityManager: int PROCESS_STATE_TOP> = 2;

        <android.app.ActivityManager: int PROCESS_STATE_SERVICE> = 10;

        <android.app.ActivityManager: int PROCESS_STATE_RECEIVER> = 11;

        <android.app.ActivityManager: int PROCESS_STATE_PERSISTENT_UI> = 1;

        <android.app.ActivityManager: int PROCESS_STATE_PERSISTENT> = 0;

        <android.app.ActivityManager: int PROCESS_STATE_NONEXISTENT> = 20;

        <android.app.ActivityManager: int PROCESS_STATE_LAST_ACTIVITY> = 15;

        <android.app.ActivityManager: int PROCESS_STATE_IMPORTANT_FOREGROUND> = 6;

        <android.app.ActivityManager: int PROCESS_STATE_IMPORTANT_BACKGROUND> = 7;

        <android.app.ActivityManager: int PROCESS_STATE_HOME> = 14;

        <android.app.ActivityManager: int PROCESS_STATE_HEAVY_WEIGHT> = 13;

        <android.app.ActivityManager: int PROCESS_STATE_FOREGROUND_SERVICE> = 4;

        <android.app.ActivityManager: int PROCESS_STATE_CACHED_RECENT> = 18;

        <android.app.ActivityManager: int PROCESS_STATE_CACHED_EMPTY> = 19;

        <android.app.ActivityManager: int PROCESS_STATE_CACHED_ACTIVITY_CLIENT> = 17;

        <android.app.ActivityManager: int PROCESS_STATE_CACHED_ACTIVITY> = 16;

        <android.app.ActivityManager: int PROCESS_STATE_BOUND_TOP> = 3;

        <android.app.ActivityManager: int PROCESS_STATE_BOUND_FOREGROUND_SERVICE> = 5;

        <android.app.ActivityManager: int PROCESS_STATE_BACKUP> = 9;

        <android.app.ActivityManager: int PROCESS_CAPABILITY_NONE> = 0;

        <android.app.ActivityManager: int PROCESS_CAPABILITY_FOREGROUND_MICROPHONE> = 4;

        <android.app.ActivityManager: int PROCESS_CAPABILITY_FOREGROUND_LOCATION> = 1;

        <android.app.ActivityManager: int PROCESS_CAPABILITY_FOREGROUND_CAMERA> = 2;

        <android.app.ActivityManager: int PROCESS_CAPABILITY_ALL_IMPLICIT> = 6;

        <android.app.ActivityManager: int PROCESS_CAPABILITY_ALL_EXPLICIT> = 1;

        <android.app.ActivityManager: int PROCESS_CAPABILITY_ALL> = 7;

        <android.app.ActivityManager: int MOVE_TASK_WITH_HOME> = 1;

        <android.app.ActivityManager: int MOVE_TASK_NO_USER_ACTION> = 2;

        <android.app.ActivityManager: int MIN_PROCESS_STATE> = 0;

        <android.app.ActivityManager: java.lang.String META_HOME_ALTERNATE> = "android.app.home.alternate";

        <android.app.ActivityManager: int MAX_PROCESS_STATE> = 20;

        <android.app.ActivityManager: int LOCK_TASK_MODE_PINNED> = 2;

        <android.app.ActivityManager: int LOCK_TASK_MODE_NONE> = 0;

        <android.app.ActivityManager: int LOCK_TASK_MODE_LOCKED> = 1;

        <android.app.ActivityManager: int LAST_START_SUCCESS_CODE> = 99;

        <android.app.ActivityManager: int LAST_START_NON_FATAL_ERROR_CODE> = 199;

        <android.app.ActivityManager: int LAST_START_FATAL_ERROR_CODE> = -1;

        <android.app.ActivityManager: int INTENT_SENDER_SERVICE> = 4;

        <android.app.ActivityManager: int INTENT_SENDER_FOREGROUND_SERVICE> = 5;

        <android.app.ActivityManager: int INTENT_SENDER_BROADCAST> = 1;

        <android.app.ActivityManager: int INTENT_SENDER_ACTIVITY_RESULT> = 3;

        <android.app.ActivityManager: int INTENT_SENDER_ACTIVITY> = 2;

        <android.app.ActivityManager: int INSTR_FLAG_DISABLE_TEST_API_CHECKS> = 4;

        <android.app.ActivityManager: int INSTR_FLAG_DISABLE_ISOLATED_STORAGE> = 2;

        <android.app.ActivityManager: int INSTR_FLAG_DISABLE_HIDDEN_API_CHECKS> = 1;

        <android.app.ActivityManager: int FLAG_OR_STOPPED> = 1;

        <android.app.ActivityManager: int FLAG_AND_UNLOCKING_OR_UNLOCKED> = 8;

        <android.app.ActivityManager: int FLAG_AND_UNLOCKED> = 4;

        <android.app.ActivityManager: int FLAG_AND_LOCKED> = 2;

        <android.app.ActivityManager: int FIRST_START_SUCCESS_CODE> = 0;

        <android.app.ActivityManager: int FIRST_START_NON_FATAL_ERROR_CODE> = 100;

        <android.app.ActivityManager: int FIRST_START_FATAL_ERROR_CODE> = -100;

        <android.app.ActivityManager: int COMPAT_MODE_UNKNOWN> = -3;

        <android.app.ActivityManager: int COMPAT_MODE_TOGGLE> = 2;

        <android.app.ActivityManager: int COMPAT_MODE_NEVER> = -2;

        <android.app.ActivityManager: int COMPAT_MODE_ENABLED> = 1;

        <android.app.ActivityManager: int COMPAT_MODE_DISABLED> = 0;

        <android.app.ActivityManager: int COMPAT_MODE_ALWAYS> = -1;

        <android.app.ActivityManager: int BROADCAST_SUCCESS> = 0;

        <android.app.ActivityManager: int BROADCAST_STICKY_CANT_HAVE_PERMISSION> = -1;

        <android.app.ActivityManager: int BROADCAST_FAILED_USER_STOPPED> = -2;

        <android.app.ActivityManager: int ASSIST_CONTEXT_FULL> = 1;

        <android.app.ActivityManager: int ASSIST_CONTEXT_BASIC> = 0;

        <android.app.ActivityManager: int ASSIST_CONTEXT_AUTOFILL> = 2;

        <android.app.ActivityManager: int APP_START_MODE_NORMAL> = 0;

        <android.app.ActivityManager: int APP_START_MODE_DISABLED> = 3;

        <android.app.ActivityManager: int APP_START_MODE_DELAYED_RIGID> = 2;

        <android.app.ActivityManager: int APP_START_MODE_DELAYED> = 1;

        <android.app.ActivityManager: java.lang.String ACTION_REPORT_HEAP_LIMIT> = "android.app.action.REPORT_HEAP_LIMIT";

        <android.app.ActivityManager: java.lang.String TAG> = "ActivityManager";

        <android.app.ActivityManager: boolean sSystemReady> = 0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.force_low_ram", 0);

        <android.app.ActivityManager: boolean DEVELOPMENT_FORCE_LOW_RAM> = $z0;

        $r0 = new android.app.ActivityManager$1;

        specialinvoke $r0.<android.app.ActivityManager$1: void <init>()>();

        <android.app.ActivityManager: android.util.Singleton IActivityManagerSingleton> = $r0;

        return;
    }

    void <init>(android.content.Context, android.os.Handler)
    {
        android.app.ActivityManager r0;
        android.content.Context r1;
        android.os.Handler r2;
        android.util.ArrayMap $r3;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.ActivityManager: android.util.ArrayMap mImportanceListeners> = $r3;

        r0.<android.app.ActivityManager: android.content.Context mContext> = r1;

        return;
    }

    static android.app.IActivityTaskManager access$000()
    {
        android.app.IActivityTaskManager $r0;

        $r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        return $r0;
    }

    public static void broadcastStickyIntent(android.content.Intent, int)
    {
        android.content.Intent r0;
        int i0;

        r0 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        staticinvoke <android.app.ActivityManager: void broadcastStickyIntent(android.content.Intent,int,int)>(r0, -1, i0);

        return;
    }

    public static void broadcastStickyIntent(android.content.Intent, int, int)
    {
        int i0, i1;
        android.app.IActivityManager $r0;
        android.os.RemoteException $r1;
        android.content.Intent r2;

        r2 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r0.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>(null, null, r2, null, null, -1, null, null, null, i0, null, 0, 1, i1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int checkComponentPermission(java.lang.String, int, int, boolean)
    {
        int i0, i1, i2, i3;
        boolean z0, $z1, $z2;
        android.content.pm.IPackageManager $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        if i1 == 0 goto label8;

        if i1 != 1000 goto label1;

        goto label8;

     label1:
        $z1 = staticinvoke <android.os.UserHandle: boolean isIsolated(int)>(i2);

        if $z1 == 0 goto label2;

        return -1;

     label2:
        if i0 < 0 goto label3;

        $z2 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i2, i0);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        if z0 != 0 goto label4;

        return -1;

     label4:
        if r3 != null goto label5;

        return 0;

     label5:
        $r0 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        i3 = interfaceinvoke $r0.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>(r3, i2);

     label6:
        return i3;

     label7:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label8:
        return 0;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public static int checkUidPermission(java.lang.String, int)
    {
        android.content.pm.IPackageManager $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;
        int i0, i1;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r0 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        i1 = interfaceinvoke $r0.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>(r3, i0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void dumpPackageStateStatic(java.io.FileDescriptor, java.lang.String)
    {
        java.io.FileDescriptor r0;
        java.lang.String r1;
        com.android.internal.util.FastPrintWriter $r3;
        java.io.FileOutputStream $r4;
        java.lang.String[] $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.lang.String;

        $r3 = new com.android.internal.util.FastPrintWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r0);

        specialinvoke $r3.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>($r4);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>($r3, r0, "package", $r5);

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = "-a";

        $r6[1] = "package";

        $r6[2] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>($r3, r0, "activity", $r6);

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "--local";

        $r7[1] = "--package";

        $r7[2] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>($r3, r0, "meminfo", $r7);

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>($r3, r0, "procstats", $r8);

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>($r3, r0, "usagestats", $r9);

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>($r3, r0, "batterystats", $r10);

        virtualinvoke $r3.<java.io.PrintWriter: void flush()>();

        return;
    }

    private static void dumpService(java.io.PrintWriter, java.io.FileDescriptor, java.lang.String, java.lang.String[])
    {
        java.io.PrintWriter r0;
        java.lang.String[] r1;
        android.os.IBinder r2;
        com.android.internal.os.TransferPipe r3, r11;
        boolean $z0;
        android.os.ParcelFileDescriptor $r4;
        java.io.FileDescriptor $r5, r8;
        java.lang.Throwable $r6, $r7;
        java.lang.String r9;

        r0 := @parameter0: java.io.PrintWriter;

        r8 := @parameter1: java.io.FileDescriptor;

        r9 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String[];

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("DUMP OF SERVICE ");

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(":");

        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>(r9);

        if r2 != null goto label01;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  (Service not found)");

        virtualinvoke r0.<java.io.PrintWriter: void flush()>();

        return;

     label01:
        virtualinvoke r0.<java.io.PrintWriter: void flush()>();

        $z0 = r2 instanceof android.os.Binder;

        if $z0 == 0 goto label05;

     label02:
        interfaceinvoke r2.<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>(r8, r1);

     label03:
        goto label20;

     label04:
        $r7 := @caughtexception;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Failure dumping service:");

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r0);

        virtualinvoke r0.<java.io.PrintWriter: void flush()>();

        goto label03;

     label05:
        r11 = null;

     label06:
        virtualinvoke r0.<java.io.PrintWriter: void flush()>();

     label07:
        r11 = null;

     label08:
        r3 = new com.android.internal.os.TransferPipe;

     label09:
        r11 = null;

     label10:
        specialinvoke r3.<com.android.internal.os.TransferPipe: void <init>()>();

     label11:
        r11 = r3;

     label12:
        virtualinvoke r3.<com.android.internal.os.TransferPipe: void setBufferPrefix(java.lang.String)>("  ");

     label13:
        r11 = r3;

     label14:
        $r4 = virtualinvoke r3.<com.android.internal.os.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()>();

        $r5 = virtualinvoke $r4.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        interfaceinvoke r2.<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>($r5, r1);

     label15:
        r11 = r3;

     label16:
        virtualinvoke r3.<com.android.internal.os.TransferPipe: void go(java.io.FileDescriptor,long)>(r8, 10000L);

     label17:
        goto label20;

     label18:
        $r6 := @caughtexception;

        if r11 == null goto label19;

        virtualinvoke r11.<com.android.internal.os.TransferPipe: void kill()>();

     label19:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Failure dumping service:");

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r0);

     label20:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    private void ensureAppTaskThumbnailSizeLocked()
    {
        android.app.ActivityManager r0;
        android.graphics.Point $r2, $r4;
        android.app.IActivityTaskManager $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ActivityManager;

        $r2 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        if $r2 != null goto label4;

     label1:
        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        $r4 = interfaceinvoke $r3.<android.app.IActivityTaskManager: android.graphics.Point getAppTaskThumbnailSize()>();

        r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int getCurrentUser()
    {
        android.app.IActivityManager $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.content.pm.UserInfo r3;
        int i0;

     label1:
        $r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r3 = interfaceinvoke $r0.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

     label2:
        if r3 == null goto label5;

     label3:
        i0 = r3.<android.content.pm.UserInfo: int id>;

     label4:
        goto label6;

     label5:
        i0 = 0;

     label6:
        return i0;

     label7:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
    }

    static int getLauncherLargeIconSizeInner(android.content.Context)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        android.content.res.Configuration $r0;
        android.util.DisplayMetrics $r1;
        float $f0, $f1, $f2;
        android.content.Context r2;
        android.content.res.Resources r3;

        r2 := @parameter0: android.content.Context;

        r3 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke r3.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104896);

        $r0 = virtualinvoke r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i2 = $r0.<android.content.res.Configuration: int smallestScreenWidthDp>;

        if $i2 >= 600 goto label1;

        return i0;

     label1:
        $r1 = virtualinvoke r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i1 = $r1.<android.util.DisplayMetrics: int densityDpi>;

        if i1 == 120 goto label7;

        if i1 == 160 goto label6;

        if i1 == 213 goto label5;

        if i1 == 240 goto label4;

        if i1 == 320 goto label3;

        if i1 == 480 goto label2;

        $f0 = (float) i0;

        $f1 = $f0 * 1.5F;

        $f2 = $f1 + 0.5F;

        $i16 = (int) $f2;

        return $i16;

     label2:
        $i13 = i0 * 320;

        $i14 = $i13 * 2;

        $i15 = $i14 / 480;

        return $i15;

     label3:
        $i11 = i0 * 480;

        $i12 = $i11 / 320;

        return $i12;

     label4:
        $i9 = i0 * 320;

        $i10 = $i9 / 240;

        return $i10;

     label5:
        $i7 = i0 * 320;

        $i8 = $i7 / 240;

        return $i8;

     label6:
        $i5 = i0 * 240;

        $i6 = $i5 / 160;

        return $i6;

     label7:
        $i3 = i0 * 160;

        $i4 = $i3 / 120;

        return $i4;
    }

    public static int getMaxNumPictureInPictureActions()
    {
        return 3;
    }

    public static int getMaxRecentTasksStatic()
    {
        int $i0;

        $i0 = staticinvoke <android.app.ActivityTaskManager: int getMaxRecentTasksStatic()>();

        return $i0;
    }

    public static void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)
    {
        android.app.IActivityManager $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.ActivityManager$RunningAppProcessInfo r3;

        r3 := @parameter0: android.app.ActivityManager$RunningAppProcessInfo;

     label1:
        $r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r0.<android.app.IActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>(r3);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static android.app.IActivityManager getService()
    {
        android.util.Singleton $r0;
        java.lang.Object $r1;
        android.app.IActivityManager $r2;

        $r0 = <android.app.ActivityManager: android.util.Singleton IActivityManagerSingleton>;

        $r1 = virtualinvoke $r0.<android.util.Singleton: java.lang.Object get()>();

        $r2 = (android.app.IActivityManager) $r1;

        return $r2;
    }

    private static android.app.IActivityTaskManager getTaskService()
    {
        android.app.IActivityTaskManager $r0;

        $r0 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        return $r0;
    }

    public static int handleIncomingUser(int, int, int, boolean, boolean, java.lang.String, java.lang.String)
    {
        int i0, i1, $i2, i3, i4;
        boolean z0, z1;
        java.lang.String r0, r4;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r4 := @parameter5: java.lang.String;

        r0 := @parameter6: java.lang.String;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        if $i2 != i1 goto label1;

        return i1;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        i4 = interfaceinvoke $r1.<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>(i3, i0, i1, z0, z1, r4, r0);

     label2:
        return i4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isForegroundService(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 != 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isHighEndGfx()
    {
        boolean $z0, $z1, $z2, z3;
        android.content.res.Resources $r0;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 != 0 goto label1;

        $z1 = <com.android.internal.os.RoSystemProperties: boolean CONFIG_AVOID_GFX_ACCEL>;

        if $z1 != 0 goto label1;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $z2 = virtualinvoke $r0.<android.content.res.Resources: boolean getBoolean(int)>(17891371);

        if $z2 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    public static boolean isLowMemoryKillReportSupported()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.lmk.reportkills", 0);

        return $z0;
    }

    public static boolean isLowRamDeviceStatic()
    {
        boolean $z0, $z1, $z2, z3;

        $z0 = <com.android.internal.os.RoSystemProperties: boolean CONFIG_LOW_RAM>;

        if $z0 != 0 goto label2;

        $z1 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z1 == 0 goto label1;

        $z2 = <android.app.ActivityManager: boolean DEVELOPMENT_FORCE_LOW_RAM>;

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    public static final boolean isProcStateBackground(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 < 8 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isRunningInTestHarness()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.test_harness", 0);

        return $z0;
    }

    public static boolean isRunningInUserTestHarness()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.test_harness", 0);

        return $z0;
    }

    public static boolean isSmallBatteryDevice()
    {
        boolean $z0;

        $z0 = <com.android.internal.os.RoSystemProperties: boolean CONFIG_SMALL_BATTERY>;

        return $z0;
    }

    public static final boolean isStartResultFatalError(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if -100 > i0 goto label1;

        if i0 > -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static final boolean isStartResultSuccessful(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 99 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isSystemReady()
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r0;
        android.app.ActivityManagerInternal $r1;

        $z0 = <android.app.ActivityManager: boolean sSystemReady>;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.app.ActivityThread: boolean isSystem()>();

        if $z1 == 0 goto label1;

        $r0 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r1 = (android.app.ActivityManagerInternal) $r0;

        $z2 = virtualinvoke $r1.<android.app.ActivityManagerInternal: boolean isSystemReady()>();

        <android.app.ActivityManager: boolean sSystemReady> = $z2;

        goto label2;

     label1:
        <android.app.ActivityManager: boolean sSystemReady> = 1;

     label2:
        $z3 = <android.app.ActivityManager: boolean sSystemReady>;

        return $z3;
    }

    public static boolean isUserAMonkey()
    {
        boolean z0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        z0 = interfaceinvoke $r1.<android.app.IActivityManager: boolean isUserAMonkey()>();

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void logoutCurrentUser()
    {
        int i0;
        android.app.IActivityManager $r1, $r2;
        android.os.RemoteException $r3;

        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        if i0 == 0 goto label4;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: boolean switchUser(int)>(0);

        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityManager: int stopUser(int,boolean,android.app.IStopUserCallback)>(i0, 0, null);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void noteAlarmFinish(android.app.PendingIntent, android.os.WorkSource, int, java.lang.String)
    {
        android.os.WorkSource r0;
        int i0;
        java.lang.String r1;
        android.app.IActivityManager r2;
        android.os.RemoteException $r3;
        android.app.PendingIntent r4;
        android.content.IIntentSender r5;

        r4 := @parameter0: android.app.PendingIntent;

        r0 := @parameter1: android.os.WorkSource;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

     label1:
        r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label2:
        if r4 == null goto label5;

     label3:
        r5 = virtualinvoke r4.<android.app.PendingIntent: android.content.IIntentSender getTarget()>();

     label4:
        goto label6;

     label5:
        r5 = null;

     label6:
        interfaceinvoke r2.<android.app.IActivityManager: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>(r5, r0, i0, r1);

     label7:
        goto label9;

     label8:
        $r3 := @caughtexception;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public static void noteAlarmStart(android.app.PendingIntent, android.os.WorkSource, int, java.lang.String)
    {
        android.os.WorkSource r0;
        int i0;
        java.lang.String r1;
        android.app.IActivityManager r2;
        android.os.RemoteException $r3;
        android.app.PendingIntent r4;
        android.content.IIntentSender r5;

        r4 := @parameter0: android.app.PendingIntent;

        r0 := @parameter1: android.os.WorkSource;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

     label1:
        r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label2:
        if r4 == null goto label5;

     label3:
        r5 = virtualinvoke r4.<android.app.PendingIntent: android.content.IIntentSender getTarget()>();

     label4:
        goto label6;

     label5:
        r5 = null;

     label6:
        interfaceinvoke r2.<android.app.IActivityManager: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>(r5, r0, i0, r1);

     label7:
        goto label9;

     label8:
        $r3 := @caughtexception;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public static void noteWakeupAlarm(android.app.PendingIntent, android.os.WorkSource, int, java.lang.String, java.lang.String)
    {
        android.os.WorkSource r0;
        int i0;
        java.lang.String r1, r2;
        android.app.IActivityManager r3;
        android.os.RemoteException $r4;
        android.app.PendingIntent r5;
        android.content.IIntentSender r6;

        r5 := @parameter0: android.app.PendingIntent;

        r0 := @parameter1: android.os.WorkSource;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

     label1:
        r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label2:
        if r5 == null goto label5;

     label3:
        r6 = virtualinvoke r5.<android.app.PendingIntent: android.content.IIntentSender getTarget()>();

     label4:
        goto label6;

     label5:
        r6 = null;

     label6:
        interfaceinvoke r3.<android.app.IActivityManager: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>(r6, r0, i0, r1, r2);

     label7:
        goto label9;

     label8:
        $r4 := @caughtexception;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public static void printCapabilitiesFull(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int i0, i1;

        r0 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        staticinvoke <android.app.ActivityManager: void printCapabilitiesSummary(java.io.PrintWriter,int)>(r0, i0);

        i1 = i0 & -8;

        if i1 == 0 goto label1;

        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(43);

        virtualinvoke r0.<java.io.PrintWriter: void print(int)>(i1);

     label1:
        return;
    }

    public static void printCapabilitiesSummary(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int $i1, $i2, $i3, i4;
        char c6, c9, c11;

        r0 := @parameter0: java.io.PrintWriter;

        i4 := @parameter1: int;

        $i1 = i4 & 1;

        if $i1 == 0 goto label1;

        c6 = 76;

        goto label2;

     label1:
        c6 = 45;

     label2:
        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(c6);

        $i2 = i4 & 2;

        if $i2 == 0 goto label3;

        c9 = 67;

        goto label4;

     label3:
        c9 = 45;

     label4:
        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(c9);

        c11 = 45;

        $i3 = i4 & 4;

        if $i3 == 0 goto label5;

        c11 = 77;

     label5:
        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(c11);

        return;
    }

    public static final int processStateAmToProto(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label23;
            case 0: goto label22;
            case 1: goto label21;
            case 2: goto label20;
            case 3: goto label19;
            case 4: goto label18;
            case 5: goto label17;
            case 6: goto label16;
            case 7: goto label15;
            case 8: goto label14;
            case 9: goto label13;
            case 10: goto label12;
            case 11: goto label11;
            case 12: goto label10;
            case 13: goto label09;
            case 14: goto label08;
            case 15: goto label07;
            case 16: goto label06;
            case 17: goto label05;
            case 18: goto label04;
            case 19: goto label03;
            case 20: goto label02;
            default: goto label01;
        };

     label01:
        return 998;

     label02:
        return 1019;

     label03:
        return 1018;

     label04:
        return 1017;

     label05:
        return 1016;

     label06:
        return 1015;

     label07:
        return 1014;

     label08:
        return 1013;

     label09:
        return 1012;

     label10:
        return 1011;

     label11:
        return 1010;

     label12:
        return 1009;

     label13:
        return 1008;

     label14:
        return 1007;

     label15:
        return 1006;

     label16:
        return 1005;

     label17:
        return 1004;

     label18:
        return 1003;

     label19:
        return 1020;

     label20:
        return 1002;

     label21:
        return 1001;

     label22:
        return 1000;

     label23:
        return 999;
    }

    public static void resumeAppSwitches() throws android.os.RemoteException
    {
        android.app.IActivityManager $r0;

        $r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r0.<android.app.IActivityManager: void resumeAppSwitches()>();

        return;
    }

    public static void setPersistentVrThread(int)
    {
        int i0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void setPersistentVrThread(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void setVrThread(int)
    {
        int i0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void setVrThread(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int staticGetLargeMemoryClass()
    {
        java.lang.String r0, $r1;
        int $i0, $i1, $i2;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.heapsize", "16m");

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i2;
    }

    public static int staticGetMemoryClass()
    {
        java.lang.String r0, $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.heapgrowthlimit", "");

        if r0 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i3;

     label1:
        $i0 = staticinvoke <android.app.ActivityManager: int staticGetLargeMemoryClass()>();

        return $i0;
    }

    public int addAppTask(android.app.Activity, android.content.Intent, android.app.ActivityManager$TaskDescription, android.graphics.Bitmap)
    {
        android.app.ActivityManager r0;
        android.content.Intent r1;
        android.app.ActivityManager$TaskDescription r2, $r9, r18;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        android.graphics.Bitmap$Config $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, f11, f12, f13;
        android.graphics.Matrix $r5;
        android.graphics.Canvas $r6;
        android.app.IActivityTaskManager $r7;
        android.os.IBinder $r8;
        java.lang.Throwable $r10;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;
        android.app.Activity r13;
        android.graphics.Bitmap r14, r16;
        android.graphics.Point r15;

        r0 := @this: android.app.ActivityManager;

        r13 := @parameter0: android.app.Activity;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: android.app.ActivityManager$TaskDescription;

        r14 := @parameter3: android.graphics.Bitmap;

        entermonitor r0;

     label01:
        specialinvoke r0.<android.app.ActivityManager: void ensureAppTaskThumbnailSizeLocked()>();

        r15 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        exitmonitor r0;

     label02:
        i14 = virtualinvoke r14.<android.graphics.Bitmap: int getWidth()>();

        i0 = virtualinvoke r14.<android.graphics.Bitmap: int getHeight()>();

        $i1 = r15.<android.graphics.Point: int x>;

        if i14 != $i1 goto label03;

        r16 = r14;

        $i13 = r15.<android.graphics.Point: int y>;

        if i0 == $i13 goto label06;

     label03:
        $i2 = r15.<android.graphics.Point: int x>;

        $i3 = r15.<android.graphics.Point: int y>;

        $r4 = virtualinvoke r14.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        r16 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i2, $i3, $r4);

        f10 = 0.0F;

        $i4 = r15.<android.graphics.Point: int x>;

        $i7 = $i4 * i14;

        $i5 = r15.<android.graphics.Point: int y>;

        $i6 = $i5 * i0;

        if $i7 <= $i6 goto label04;

        $i11 = r15.<android.graphics.Point: int x>;

        $f5 = (float) $i11;

        $f4 = (float) i0;

        f11 = $f5 / $f4;

        $i12 = r15.<android.graphics.Point: int y>;

        $f8 = (float) $i12;

        $f6 = (float) i14;

        $f7 = $f6 * f11;

        $f9 = $f8 - $f7;

        f10 = $f9 * 0.5F;

        goto label05;

     label04:
        $i8 = r15.<android.graphics.Point: int y>;

        $f1 = (float) $i8;

        $f0 = (float) i14;

        f11 = $f1 / $f0;

        $i9 = r15.<android.graphics.Point: int x>;

        f12 = (float) $i9;

        f13 = (float) i0;

     label05:
        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        virtualinvoke $r5.<android.graphics.Matrix: void setScale(float,float)>(f11, f11);

        $f2 = 0.5F + f10;

        $i10 = (int) $f2;

        $f3 = (float) $i10;

        virtualinvoke $r5.<android.graphics.Matrix: boolean postTranslate(float,float)>($f3, 0.0F);

        $r6 = new android.graphics.Canvas;

        specialinvoke $r6.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r16);

        virtualinvoke $r6.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r14, $r5, null);

        virtualinvoke $r6.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

     label06:
        r18 = r2;

        if r2 != null goto label07;

        $r9 = new android.app.ActivityManager$TaskDescription;

        specialinvoke $r9.<android.app.ActivityManager$TaskDescription: void <init>()>();

        r18 = $r9;

     label07:
        $r7 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        $r8 = virtualinvoke r13.<android.app.Activity: android.os.IBinder getActivityToken()>();

        i15 = interfaceinvoke $r7.<android.app.IActivityTaskManager: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>($r8, r1, r18, r16);

     label08:
        return i15;

     label09:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener, int)
    {
        android.app.ActivityManager r0;
        int i0, $i1;
        java.lang.StringBuilder r1;
        android.util.ArrayMap $r2, $r10;
        boolean $z0;
        java.lang.String $r5, $r9;
        android.content.Context $r6, $r8;
        android.app.IActivityManager $r7;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        java.lang.Throwable $r14;
        android.app.ActivityManager$OnUidImportanceListener r15;
        android.app.ActivityManager$UidObserver r16;
        java.lang.IllegalArgumentException r18;

        r0 := @this: android.app.ActivityManager;

        r15 := @parameter0: android.app.ActivityManager$OnUidImportanceListener;

        i0 := @parameter1: int;

        entermonitor r0;

     label01:
        $r2 = r0.<android.app.ActivityManager: android.util.ArrayMap mImportanceListeners>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r15);

        if $z0 != 0 goto label08;

        r16 = new android.app.ActivityManager$UidObserver;

        $r6 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        specialinvoke r16.<android.app.ActivityManager$UidObserver: void <init>(android.app.ActivityManager$OnUidImportanceListener,android.content.Context)>(r15, $r6);

     label02:
        $r7 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i1 = staticinvoke <android.app.ActivityManager$RunningAppProcessInfo: int importanceToProcState(int)>(i0);

        $r8 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r7.<android.app.IActivityManager: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>(r16, 3, $i1, $r9);

     label03:
        $r10 = r0.<android.app.ActivityManager: android.util.ArrayMap mImportanceListeners>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16);

     label04:
        exitmonitor r0;

     label05:
        return;

     label06:
        $r12 := @caughtexception;

     label07:
        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

     label08:
        r18 = new java.lang.IllegalArgumentException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Listener already registered: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r18;

     label09:
        $r14 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)
    {
        android.app.ActivityManager r0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: android.content.ComponentName;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void appNotResponding(java.lang.String)
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void appNotResponding(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean clearApplicationUserData()
    {
        android.app.ActivityManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: android.app.ActivityManager;

        $r1 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r0.<android.app.ActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)>($r2, null);

        return $z0;
    }

    public boolean clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.app.ActivityManager r0;
        android.content.pm.IPackageDataObserver r1;
        boolean z0;
        android.app.IActivityManager $r2;
        android.content.Context $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.app.ActivityManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.IPackageDataObserver;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int getUserId()>();

        z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>(r6, 0, r1, $i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearGrantedUriPermissions(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.app.UriGrantsManager $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("uri_grants");

        $r4 = (android.app.UriGrantsManager) $r3;

        virtualinvoke $r4.<android.app.UriGrantsManager: void clearGrantedUriPermissions(java.lang.String)>(r1);

        return;
    }

    public void clearWatchHeapLimit()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>(null, 0, 0L, null);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dumpPackageState(java.io.FileDescriptor, java.lang.String)
    {
        android.app.ActivityManager r0;
        java.io.FileDescriptor r1;
        java.lang.String r2;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String;

        staticinvoke <android.app.ActivityManager: void dumpPackageStateStatic(java.io.FileDescriptor,java.lang.String)>(r1, r2);

        return;
    }

    public void forceStopPackage(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.app.ActivityManager: void forceStopPackageAsUser(java.lang.String,int)>(r1, $i0);

        return;
    }

    public void forceStopPackageAsUser(java.lang.String, int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void forceStopPackage(java.lang.String,int)>(r4, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.util.Size getAppTaskThumbnailSize()
    {
        android.app.ActivityManager r0;
        android.graphics.Point $r1, $r2;
        int $i0, $i1;
        java.lang.Throwable $r3;
        android.util.Size r4;

        r0 := @this: android.app.ActivityManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.app.ActivityManager: void ensureAppTaskThumbnailSizeLocked()>();

        r4 = new android.util.Size;

        $r1 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        $i1 = $r1.<android.graphics.Point: int x>;

        $r2 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        $i0 = $r2.<android.graphics.Point: int y>;

        specialinvoke r4.<android.util.Size: void <init>(int,int)>($i1, $i0);

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List getAppTasks()
    {
        android.app.ActivityManager r0;
        java.util.List r1;
        int i0, i1;
        java.util.ArrayList $r2;
        android.app.IActivityTaskManager $r3;
        android.content.Context $r4;
        java.lang.String $r5;
        android.app.ActivityManager$AppTask $r6;
        java.lang.Object $r7;
        android.os.IBinder $r8;
        android.app.IAppTask $r9;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: android.app.ActivityManager;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        $r4 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        r1 = interfaceinvoke $r3.<android.app.IActivityTaskManager: java.util.List getAppTasks(java.lang.String)>($r5);

     label2:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r6 = new android.app.ActivityManager$AppTask;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r8 = (android.os.IBinder) $r7;

        $r9 = staticinvoke <android.app.IAppTask$Stub: android.app.IAppTask asInterface(android.os.IBinder)>($r8);

        specialinvoke $r6.<android.app.ActivityManager$AppTask: void <init>(android.app.IAppTask)>($r9);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r2;

     label5:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public java.util.List getBugreportWhitelistedPackages()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r4 = interfaceinvoke $r1.<android.app.IActivityManager: java.util.List getBugreportWhitelistedPackages()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()
    {
        android.app.ActivityManager r0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.pm.ConfigurationInfo r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        r4 = interfaceinvoke $r1.<android.app.IActivityTaskManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getFrontActivityScreenCompatMode()
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        i0 = interfaceinvoke $r2.<android.app.IActivityTaskManager: int getFrontActivityScreenCompatMode()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.app.UriGrantsManager $r4;
        android.content.pm.ParceledListSlice $r5;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("uri_grants");

        $r4 = (android.app.UriGrantsManager) $r3;

        $r5 = virtualinvoke $r4.<android.app.UriGrantsManager: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String)>(r1);

        return $r5;
    }

    public java.util.List getHistoricalProcessExitReasons(java.lang.String, int, int)
    {
        android.app.ActivityManager r0;
        int i0, i1, $i2;
        android.app.IActivityManager $r1;
        android.content.Context $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.ParceledListSlice r6;
        java.util.List r7;

        r0 := @this: android.app.ActivityManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        r6 = interfaceinvoke $r1.<android.app.IActivityManager: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>(r5, i0, i1, $i2);

     label2:
        if r6 != null goto label5;

     label3:
        r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label4:
        goto label6;

     label5:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label6:
        return r7;

     label7:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public int getLargeMemoryClass()
    {
        android.app.ActivityManager r0;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        $i0 = staticinvoke <android.app.ActivityManager: int staticGetLargeMemoryClass()>();

        return $i0;
    }

    public int getLauncherLargeIconDensity()
    {
        android.app.ActivityManager r0;
        android.content.res.Resources r1;
        int i0, $i1, $i2;
        android.content.Context $r2;
        android.util.DisplayMetrics $r3;
        android.content.res.Configuration $r4;
        float $f0, $f1, $f2;

        r0 := @this: android.app.ActivityManager;

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = $r3.<android.util.DisplayMetrics: int densityDpi>;

        $r4 = virtualinvoke r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i1 = $r4.<android.content.res.Configuration: int smallestScreenWidthDp>;

        if $i1 >= 600 goto label1;

        return i0;

     label1:
        if i0 == 120 goto label7;

        if i0 == 160 goto label6;

        if i0 == 213 goto label5;

        if i0 == 240 goto label4;

        if i0 == 320 goto label3;

        if i0 == 480 goto label2;

        $f0 = (float) i0;

        $f1 = $f0 * 1.5F;

        $f2 = $f1 + 0.5F;

        $i2 = (int) $f2;

        return $i2;

     label2:
        return 640;

     label3:
        return 480;

     label4:
        return 320;

     label5:
        return 320;

     label6:
        return 240;

     label7:
        return 160;
    }

    public int getLauncherLargeIconSize()
    {
        android.app.ActivityManager r0;
        android.content.Context $r1;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        $r1 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $i0 = staticinvoke <android.app.ActivityManager: int getLauncherLargeIconSizeInner(android.content.Context)>($r1);

        return $i0;
    }

    public int getLockTaskModeState()
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        i0 = interfaceinvoke $r2.<android.app.IActivityTaskManager: int getLockTaskModeState()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMemoryClass()
    {
        android.app.ActivityManager r0;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        $i0 = staticinvoke <android.app.ActivityManager: int staticGetMemoryClass()>();

        return $i0;
    }

    public void getMemoryInfo(android.app.ActivityManager$MemoryInfo)
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.ActivityManager$MemoryInfo r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: android.app.ActivityManager$MemoryInfo;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getPackageAskScreenCompat(java.lang.String)
    {
        android.app.ActivityManager r0;
        boolean z0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        z0 = interfaceinvoke $r1.<android.app.IActivityTaskManager: boolean getPackageAskScreenCompat(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPackageImportance(java.lang.String)
    {
        android.app.ActivityManager r0;
        int i0, $i1;
        android.app.IActivityManager $r1;
        android.content.Context $r2, $r4;
        java.lang.String $r3, r7;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ActivityManager;

        r7 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $i1 = interfaceinvoke $r1.<android.app.IActivityManager: int getPackageProcessState(java.lang.String,java.lang.String)>(r7, $r3);

        $r4 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        i0 = staticinvoke <android.app.ActivityManager$RunningAppProcessInfo: int procStateToImportanceForClient(int,android.content.Context)>($i1, $r4);

     label2:
        return i0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPackageScreenCompatMode(java.lang.String)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        i0 = interfaceinvoke $r1.<android.app.IActivityTaskManager: int getPackageScreenCompatMode(java.lang.String)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;
        android.os.Debug$MemoryInfo[] r5;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: int[];

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r5 = interfaceinvoke $r1.<android.app.IActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getProcessesInErrorState()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r4 = interfaceinvoke $r1.<android.app.IActivityManager: java.util.List getProcessesInErrorState()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRecentTasks(int, int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0, i1, $i2;
        android.app.IActivityTaskManager $r1;
        android.content.Context $r2;
        android.content.pm.ParceledListSlice $r3;
        java.util.List $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.IllegalArgumentException r8;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label3;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        $r3 = interfaceinvoke $r1.<android.app.IActivityTaskManager: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>(i0, i1, $i2);

        $r4 = virtualinvoke $r3.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        return $r4;

     label2:
        $r5 := @caughtexception;

        goto label4;

     label3:
        r8 = new java.lang.IllegalArgumentException;

        specialinvoke r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The requested number of tasks should be >= 0");

        throw r8;

     label4:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label2;
        catch android.os.RemoteException from label3 to label4 with label2;
    }

    public java.util.List getRunningAppProcesses()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r4 = interfaceinvoke $r1.<android.app.IActivityManager: java.util.List getRunningAppProcesses()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRunningExternalApplications()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r4 = interfaceinvoke $r1.<android.app.IActivityManager: java.util.List getRunningExternalApplications()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        android.app.PendingIntent r5;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: android.content.ComponentName;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r5 = interfaceinvoke $r1.<android.app.IActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRunningServices(int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r4 = interfaceinvoke $r1.<android.app.IActivityManager: java.util.List getServices(int,int)>(i0, 0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRunningTasks(int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        r4 = interfaceinvoke $r1.<android.app.IActivityTaskManager: java.util.List getTasks(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Collection getSupportedLocales()
    {
        android.app.ActivityManager r0;
        java.lang.String[] r2;
        int i0, i1;
        java.util.ArrayList $r3;
        android.content.Context $r4;
        java.lang.String $r5;
        java.util.Locale $r6;

        r0 := @this: android.app.ActivityManager;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        r2 = staticinvoke <com.android.internal.app.LocalePicker: java.lang.String[] getSupportedLocales(android.content.Context)>($r4);

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r2[i1];

        $r6 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>($r5);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public long getTotalRam()
    {
        android.app.ActivityManager r0;
        com.android.internal.util.MemInfoReader $r2;
        long $l0;

        r0 := @this: android.app.ActivityManager;

        $r2 = new com.android.internal.util.MemInfoReader;

        specialinvoke $r2.<com.android.internal.util.MemInfoReader: void <init>()>();

        virtualinvoke $r2.<com.android.internal.util.MemInfoReader: void readMemInfo()>();

        $l0 = virtualinvoke $r2.<com.android.internal.util.MemInfoReader: long getTotalSize()>();

        return $l0;
    }

    public int getUidImportance(int)
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        android.content.Context $r3, $r5;
        java.lang.String $r4;
        int $i0, i1, i2;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.app.ActivityManager;

        i1 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        $i0 = interfaceinvoke $r2.<android.app.IActivityManager: int getUidProcessState(int,java.lang.String)>(i1, $r4);

        $r5 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        i2 = staticinvoke <android.app.ActivityManager$RunningAppProcessInfo: int procStateToImportanceForClient(int,android.content.Context)>($i0, $r5);

     label2:
        return i2;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isActivityStartAllowedOnDisplay(android.content.Context, int, android.content.Intent)
    {
        android.app.ActivityManager r0;
        int i0, $i1;
        android.content.Intent r1;
        boolean z0;
        android.app.IActivityTaskManager $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        android.content.Context r7;

        r0 := @this: android.app.ActivityManager;

        r7 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.Intent;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        $r3 = virtualinvoke r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $i1 = virtualinvoke r7.<android.content.Context: int getUserId()>();

        z0 = interfaceinvoke $r2.<android.app.IActivityTaskManager: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>(i0, r1, $r4, $i1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBackgroundRestricted()
    {
        android.app.ActivityManager r0;
        boolean z0;
        android.app.IActivityManager $r2;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean isBackgroundRestricted(java.lang.String)>($r4);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isInLockTaskMode()
    {
        android.app.ActivityManager r0;
        int $i0;
        boolean z0;

        r0 := @this: android.app.ActivityManager;

        $i0 = virtualinvoke r0.<android.app.ActivityManager: int getLockTaskModeState()>();

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLowRamDevice()
    {
        android.app.ActivityManager r0;
        boolean $z0;

        r0 := @this: android.app.ActivityManager;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        return $z0;
    }

    public boolean isProfileForeground(android.os.UserHandle)
    {
        android.app.ActivityManager r0;
        android.os.UserHandle r1;
        android.content.Context $r2;
        java.lang.Object $r3, $r5;
        int $i0, $i1, $i2;
        java.util.List $r4;
        boolean $z0;
        android.content.pm.UserInfo $r6;
        android.os.UserManager r7;
        java.util.Iterator r8;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.os.UserHandle;

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        r7 = (android.os.UserManager) $r3;

        if r7 == null goto label3;

        $i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        $r4 = virtualinvoke r7.<android.os.UserManager: java.util.List getProfiles(int)>($i0);

        r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.pm.UserInfo) $r5;

        $i1 = $r6.<android.content.pm.UserInfo: int id>;

        $i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        if $i1 != $i2 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean isUserRunning(int)
    {
        android.app.ActivityManager r0;
        int i0;
        boolean z0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean isUserRunning(int,int)>(i0, 0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isVrModePackageEnabled(android.content.ComponentName)
    {
        android.app.ActivityManager r0;
        boolean z0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: android.content.ComponentName;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        z0 = interfaceinvoke $r1.<android.app.IActivityManager: boolean isVrModePackageEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void killBackgroundProcesses(java.lang.String)
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.content.Context $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ActivityManager;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)>(r5, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void killProcessesWhenImperceptible(int[], java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int[] r5;

        r0 := @this: android.app.ActivityManager;

        r5 := @parameter0: int[];

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void killProcessesWhenImperceptible(int[],java.lang.String)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void killUid(int, java.lang.String)
    {
        android.app.ActivityManager r0;
        int i0, $i1, $i2;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        interfaceinvoke $r1.<android.app.IActivityManager: void killUid(int,int,java.lang.String)>($i1, $i2, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void moveTaskToFront(int, int)
    {
        android.app.ActivityManager r0;
        int i0, i1;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>(i0, i1, null);

        return;
    }

    public void moveTaskToFront(int, int, android.os.Bundle)
    {
        android.app.ActivityManager r0;
        int i0, i1;
        android.app.ActivityThread$ApplicationThread r1;
        java.lang.String r2;
        android.app.ActivityThread $r3;
        android.content.Context $r4;
        android.app.IActivityTaskManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.os.Bundle r8;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r8 := @parameter2: android.os.Bundle;

     label1:
        $r3 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        r1 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r4 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        interfaceinvoke $r5.<android.app.IActivityTaskManager: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>(r1, r2, i0, i1, r8);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerHomeVisibilityObserver(android.app.HomeVisibilityObserver)
    {
        android.app.ActivityManager r0;
        android.content.Context $r2;
        android.app.IActivityManager $r3;
        android.app.IProcessObserver$Stub $r4;
        boolean $z0;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.app.HomeVisibilityObserver r7;

        r0 := @this: android.app.ActivityManager;

        r7 := @parameter0: android.app.HomeVisibilityObserver;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

     label1:
        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        virtualinvoke r7.<android.app.HomeVisibilityObserver: void init(android.content.Context,android.app.ActivityManager)>($r2, r0);

        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r4 = r7.<android.app.HomeVisibilityObserver: android.app.IProcessObserver$Stub mObserver>;

        interfaceinvoke $r3.<android.app.IActivityManager: void registerProcessObserver(android.app.IProcessObserver)>($r4);

        $z0 = r7.<android.app.HomeVisibilityObserver: boolean mIsHomeActivityVisible>;

        virtualinvoke r7.<android.app.HomeVisibilityObserver: void onHomeVisibilityChanged(boolean)>($z0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener)
    {
        android.app.ActivityManager r0;
        java.lang.IllegalArgumentException r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        java.lang.String $r6;
        android.app.IActivityManager $r7;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.app.ActivityManager$OnUidImportanceListener r11;
        android.app.ActivityManager$UidObserver r12;
        java.lang.StringBuilder r14;

        r0 := @this: android.app.ActivityManager;

        r11 := @parameter0: android.app.ActivityManager$OnUidImportanceListener;

        entermonitor r0;

     label01:
        $r2 = r0.<android.app.ActivityManager: android.util.ArrayMap mImportanceListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r11);

        r12 = (android.app.ActivityManager$UidObserver) $r3;

     label02:
        if r12 == null goto label08;

     label03:
        $r7 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r7.<android.app.IActivityManager: void unregisterUidObserver(android.app.IUidObserver)>(r12);

     label04:
        exitmonitor r0;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

     label07:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label08:
        r1 = new java.lang.IllegalArgumentException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Listener not registered: ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r6 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r1;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void restartPackage(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>(r1);

        return;
    }

    public void scheduleApplicationInfoChanged(java.util.List, int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.util.List;

        i0 := @parameter1: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void scheduleApplicationInfoChanged(java.util.List,int)>(r4, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDeviceLocales(android.os.LocaleList)
    {
        android.app.ActivityManager r0;
        android.os.LocaleList r1;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.os.LocaleList;

        staticinvoke <com.android.internal.app.LocalePicker: void updateLocales(android.os.LocaleList)>(r1);

        return;
    }

    public void setFrontActivityScreenCompatMode(int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: void setFrontActivityScreenCompatMode(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPackageAskScreenCompat(java.lang.String, boolean)
    {
        android.app.ActivityManager r0;
        boolean z0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void setPackageAskScreenCompat(java.lang.String,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPackageScreenCompatMode(java.lang.String, int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityTaskManager getTaskService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void setPackageScreenCompatMode(java.lang.String,int)>(r4, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setProcessMemoryTrimLevel(java.lang.String, int, int)
    {
        android.app.ActivityManager r0;
        int i0, i1;
        boolean z0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        z0 = interfaceinvoke $r1.<android.app.IActivityManager: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>(r4, i0, i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProcessStateSummary(byte[])
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        byte[] r4;

        r0 := @this: android.app.ActivityManager;

        r4 := @parameter0: byte[];

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void setProcessStateSummary(byte[])>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWatchHeapLimit(long)
    {
        android.app.ActivityManager r0;
        long l0;
        android.app.IActivityManager $r2;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ActivityManager;

        l0 := @parameter0: long;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>(null, 0, l0, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean switchUser(int)
    {
        android.app.ActivityManager r0;
        int i0;
        boolean z0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean switchUser(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean switchUser(android.os.UserHandle)
    {
        android.app.ActivityManager r0;
        android.os.UserHandle r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.os.UserHandle;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = virtualinvoke r0.<android.app.ActivityManager: boolean switchUser(int)>($i0);

        return $z0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("UserHandle cannot be null.");

        throw $r2;
    }

    public void unregisterHomeVisibilityObserver(android.app.HomeVisibilityObserver)
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        android.app.IProcessObserver$Stub $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.app.HomeVisibilityObserver r6;

        r0 := @this: android.app.ActivityManager;

        r6 := @parameter0: android.app.HomeVisibilityObserver;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6);

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r6.<android.app.HomeVisibilityObserver: android.app.IProcessObserver$Stub mObserver>;

        interfaceinvoke $r2.<android.app.IActivityManager: void unregisterProcessObserver(android.app.IProcessObserver)>($r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean updateMccMncConfiguration(java.lang.String, java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1, r6;
        boolean z0;
        java.lang.IllegalArgumentException $r2;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ActivityManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r6 == null goto label4;

        if r1 == null goto label4;

     label1:
        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        z0 = interfaceinvoke $r3.<android.app.IActivityManager: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)>(r6, r1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mcc or mnc cannot be null.");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
