public class android.app.ActivityOptions extends java.lang.Object
{
    public static final int ANIM_CLIP_REVEAL;
    public static final int ANIM_CUSTOM;
    public static final int ANIM_CUSTOM_IN_PLACE;
    public static final int ANIM_DEFAULT;
    public static final int ANIM_LAUNCH_TASK_BEHIND;
    public static final int ANIM_NONE;
    public static final int ANIM_OPEN_CROSS_PROFILE_APPS;
    public static final int ANIM_REMOTE_ANIMATION;
    public static final int ANIM_SCALE_UP;
    public static final int ANIM_SCENE_TRANSITION;
    public static final int ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
    public static final int ANIM_THUMBNAIL_ASPECT_SCALE_UP;
    public static final int ANIM_THUMBNAIL_SCALE_DOWN;
    public static final int ANIM_THUMBNAIL_SCALE_UP;
    public static final int ANIM_UNDEFINED;
    public static final java.lang.String EXTRA_USAGE_TIME_REPORT;
    public static final java.lang.String EXTRA_USAGE_TIME_REPORT_PACKAGES;
    private static final java.lang.String KEY_ANIMATION_FINISHED_LISTENER;
    public static final java.lang.String KEY_ANIM_ENTER_RES_ID;
    public static final java.lang.String KEY_ANIM_EXIT_RES_ID;
    public static final java.lang.String KEY_ANIM_HEIGHT;
    public static final java.lang.String KEY_ANIM_IN_PLACE_RES_ID;
    private static final java.lang.String KEY_ANIM_SPECS;
    public static final java.lang.String KEY_ANIM_START_LISTENER;
    public static final java.lang.String KEY_ANIM_START_X;
    public static final java.lang.String KEY_ANIM_START_Y;
    public static final java.lang.String KEY_ANIM_THUMBNAIL;
    public static final java.lang.String KEY_ANIM_TYPE;
    public static final java.lang.String KEY_ANIM_WIDTH;
    private static final java.lang.String KEY_APPLY_ACTIVITY_FLAGS_FOR_BUBBLES;
    private static final java.lang.String KEY_AVOID_MOVE_TO_FRONT;
    private static final java.lang.String KEY_CALLER_DISPLAY_ID;
    private static final java.lang.String KEY_DISALLOW_ENTER_PICTURE_IN_PICTURE_WHILE_LAUNCHING;
    private static final java.lang.String KEY_EXIT_COORDINATOR_INDEX;
    private static final java.lang.String KEY_FREEZE_RECENT_TASKS_REORDERING;
    private static final java.lang.String KEY_INSTANT_APP_VERIFICATION_BUNDLE;
    private static final java.lang.String KEY_LAUNCH_ACTIVITY_TYPE;
    public static final java.lang.String KEY_LAUNCH_BOUNDS;
    private static final java.lang.String KEY_LAUNCH_DISPLAY_ID;
    private static final java.lang.String KEY_LAUNCH_TASK_DISPLAY_AREA_TOKEN;
    private static final java.lang.String KEY_LAUNCH_TASK_ID;
    private static final java.lang.String KEY_LAUNCH_WINDOWING_MODE;
    private static final java.lang.String KEY_LOCK_TASK_MODE;
    public static final java.lang.String KEY_PACKAGE_NAME;
    private static final java.lang.String KEY_PENDING_INTENT_LAUNCH_FLAGS;
    private static final java.lang.String KEY_REMOTE_ANIMATION_ADAPTER;
    private static final java.lang.String KEY_RESULT_CODE;
    private static final java.lang.String KEY_RESULT_DATA;
    private static final java.lang.String KEY_ROTATION_ANIMATION_HINT;
    private static final java.lang.String KEY_SPECS_FUTURE;
    private static final java.lang.String KEY_SPLIT_SCREEN_CREATE_MODE;
    private static final java.lang.String KEY_TASK_ALWAYS_ON_TOP;
    private static final java.lang.String KEY_TASK_OVERLAY;
    private static final java.lang.String KEY_TASK_OVERLAY_CAN_RESUME;
    private static final java.lang.String KEY_TRANSITION_COMPLETE_LISTENER;
    private static final java.lang.String KEY_TRANSITION_IS_RETURNING;
    private static final java.lang.String KEY_TRANSITION_SHARED_ELEMENTS;
    private static final java.lang.String KEY_USAGE_TIME_REPORT;
    private static final java.lang.String TAG;
    private android.view.AppTransitionAnimationSpec[] mAnimSpecs;
    private android.os.IRemoteCallback mAnimationFinishedListener;
    private android.os.IRemoteCallback mAnimationStartedListener;
    private int mAnimationType;
    private android.os.Bundle mAppVerificationBundle;
    private boolean mApplyActivityFlagsForBubbles;
    private boolean mAvoidMoveToFront;
    private int mCallerDisplayId;
    private int mCustomEnterResId;
    private int mCustomExitResId;
    private int mCustomInPlaceResId;
    private boolean mDisallowEnterPictureInPictureWhileLaunching;
    private int mExitCoordinatorIndex;
    private boolean mFreezeRecentTasksReordering;
    private int mHeight;
    private boolean mIsReturning;
    private int mLaunchActivityType;
    private android.graphics.Rect mLaunchBounds;
    private int mLaunchDisplayId;
    private android.window.WindowContainerToken mLaunchTaskDisplayArea;
    private int mLaunchTaskId;
    private int mLaunchWindowingMode;
    private boolean mLockTaskMode;
    private java.lang.String mPackageName;
    private int mPendingIntentLaunchFlags;
    private android.view.RemoteAnimationAdapter mRemoteAnimationAdapter;
    private int mResultCode;
    private android.content.Intent mResultData;
    private int mRotationAnimationHint;
    private java.util.ArrayList mSharedElementNames;
    private android.view.IAppTransitionAnimationSpecsFuture mSpecsFuture;
    private int mSplitScreenCreateMode;
    private int mStartX;
    private int mStartY;
    private boolean mTaskAlwaysOnTop;
    private boolean mTaskOverlay;
    private boolean mTaskOverlayCanResume;
    private android.graphics.Bitmap mThumbnail;
    private android.os.ResultReceiver mTransitionReceiver;
    private android.app.PendingIntent mUsageTimeReport;
    private int mWidth;

    private void <init>()
    {
        android.app.ActivityOptions r0;

        r0 := @this: android.app.ActivityOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.ActivityOptions: int mAnimationType> = -1;

        r0.<android.app.ActivityOptions: int mLaunchDisplayId> = -1;

        r0.<android.app.ActivityOptions: int mCallerDisplayId> = -1;

        r0.<android.app.ActivityOptions: int mLaunchWindowingMode> = 0;

        r0.<android.app.ActivityOptions: int mLaunchActivityType> = 0;

        r0.<android.app.ActivityOptions: int mLaunchTaskId> = -1;

        r0.<android.app.ActivityOptions: int mSplitScreenCreateMode> = 0;

        r0.<android.app.ActivityOptions: boolean mLockTaskMode> = 0;

        r0.<android.app.ActivityOptions: int mRotationAnimationHint> = -1;

        return;
    }

    public void <init>(android.os.Bundle)
    {
        android.app.ActivityOptions r0;
        android.os.Bundle r1, $r7;
        java.lang.String $r2;
        android.os.Parcelable $r3, $r5, $r8, $r15, $r18, $r21, $r23, $r32;
        android.app.PendingIntent $r4;
        android.graphics.Rect $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        android.view.RemoteAnimationAdapter $r9;
        android.os.IBinder $r10, $r12, $r24, $r27;
        android.view.IAppTransitionAnimationSpecsFuture $r11;
        android.os.IRemoteCallback $r13, $r25, $r28;
        android.view.AppTransitionAnimationSpec[] $r14, $r17;
        android.view.AppTransitionAnimationSpec $r16;
        android.os.ResultReceiver $r19;
        java.util.ArrayList $r20;
        android.content.Intent $r22;
        android.graphics.Bitmap $r26;
        java.lang.RuntimeException $r29;
        android.graphics.GraphicBuffer r31;
        android.window.WindowContainerToken $r33;
        android.os.Parcelable[] r34;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.ActivityOptions: int mAnimationType> = -1;

        r0.<android.app.ActivityOptions: int mLaunchDisplayId> = -1;

        r0.<android.app.ActivityOptions: int mCallerDisplayId> = -1;

        r0.<android.app.ActivityOptions: int mLaunchWindowingMode> = 0;

        r0.<android.app.ActivityOptions: int mLaunchActivityType> = 0;

        r0.<android.app.ActivityOptions: int mLaunchTaskId> = -1;

        r0.<android.app.ActivityOptions: int mSplitScreenCreateMode> = 0;

        r0.<android.app.ActivityOptions: boolean mLockTaskMode> = 0;

        r0.<android.app.ActivityOptions: int mRotationAnimationHint> = -1;

        virtualinvoke r1.<android.os.Bundle: void setDefusable(boolean)>(1);

        $r2 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android:activity.packageName");

        r0.<android.app.ActivityOptions: java.lang.String mPackageName> = $r2;

     label01:
        $r3 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android:activity.usageTimeReport");

        $r4 = (android.app.PendingIntent) $r3;

        r0.<android.app.ActivityOptions: android.app.PendingIntent mUsageTimeReport> = $r4;

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("ActivityOptions", $r29);

     label04:
        $r5 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android:activity.launchBounds");

        $r6 = (android.graphics.Rect) $r5;

        r0.<android.app.ActivityOptions: android.graphics.Rect mLaunchBounds> = $r6;

        i17 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animType", -1);

        r0.<android.app.ActivityOptions: int mAnimationType> = i17;

        tableswitch(i17)
        {
            case 1: goto label11;
            case 2: goto label10;
            case 3: goto label08;
            case 4: goto label08;
            case 5: goto label07;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label08;
            case 9: goto label08;
            case 10: goto label06;
            case 11: goto label10;
            default: goto label05;
        };

     label05:
        goto label12;

     label06:
        $i0 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animInPlaceRes", 0);

        r0.<android.app.ActivityOptions: int mCustomInPlaceResId> = $i0;

        goto label12;

     label07:
        $r18 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android:activity.transitionCompleteListener");

        $r19 = (android.os.ResultReceiver) $r18;

        r0.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver> = $r19;

        $z2 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android:activity.transitionIsReturning", 0);

        r0.<android.app.ActivityOptions: boolean mIsReturning> = $z2;

        $r20 = virtualinvoke r1.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>("android:activity.sharedElementNames");

        r0.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames> = $r20;

        $r21 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android:activity.resultData");

        $r22 = (android.content.Intent) $r21;

        r0.<android.app.ActivityOptions: android.content.Intent mResultData> = $r22;

        $i4 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("android:activity.resultCode");

        r0.<android.app.ActivityOptions: int mResultCode> = $i4;

        $i5 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("android:activity.exitCoordinatorIndex");

        r0.<android.app.ActivityOptions: int mExitCoordinatorIndex> = $i5;

        goto label12;

     label08:
        $r23 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android:activity.animThumbnail");

        r31 = (android.graphics.GraphicBuffer) $r23;

        if r31 == null goto label09;

        $r26 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>(r31, null);

        r0.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail> = $r26;

     label09:
        $i6 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animStartX", 0);

        r0.<android.app.ActivityOptions: int mStartX> = $i6;

        $i7 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animStartY", 0);

        r0.<android.app.ActivityOptions: int mStartY> = $i7;

        $i8 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animWidth", 0);

        r0.<android.app.ActivityOptions: int mWidth> = $i8;

        $i9 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animHeight", 0);

        r0.<android.app.ActivityOptions: int mHeight> = $i9;

        $r24 = virtualinvoke r1.<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>("android:activity.animStartListener");

        $r25 = staticinvoke <android.os.IRemoteCallback$Stub: android.os.IRemoteCallback asInterface(android.os.IBinder)>($r24);

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener> = $r25;

        goto label12;

     label10:
        $i10 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animStartX", 0);

        r0.<android.app.ActivityOptions: int mStartX> = $i10;

        $i11 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animStartY", 0);

        r0.<android.app.ActivityOptions: int mStartY> = $i11;

        $i12 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animWidth", 0);

        r0.<android.app.ActivityOptions: int mWidth> = $i12;

        $i13 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animHeight", 0);

        r0.<android.app.ActivityOptions: int mHeight> = $i13;

        goto label12;

     label11:
        $i14 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animEnterRes", 0);

        r0.<android.app.ActivityOptions: int mCustomEnterResId> = $i14;

        $i15 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.animExitRes", 0);

        r0.<android.app.ActivityOptions: int mCustomExitResId> = $i15;

        $r27 = virtualinvoke r1.<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>("android:activity.animStartListener");

        $r28 = staticinvoke <android.os.IRemoteCallback$Stub: android.os.IRemoteCallback asInterface(android.os.IBinder)>($r27);

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener> = $r28;

     label12:
        $z3 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android:activity.lockTaskMode", 0);

        r0.<android.app.ActivityOptions: boolean mLockTaskMode> = $z3;

        $i18 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android.activity.launchDisplayId", -1);

        r0.<android.app.ActivityOptions: int mLaunchDisplayId> = $i18;

        $i19 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android.activity.callerDisplayId", -1);

        r0.<android.app.ActivityOptions: int mCallerDisplayId> = $i19;

        $r32 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.activity.launchTaskDisplayAreaToken");

        $r33 = (android.window.WindowContainerToken) $r32;

        r0.<android.app.ActivityOptions: android.window.WindowContainerToken mLaunchTaskDisplayArea> = $r33;

        $i20 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android.activity.windowingMode", 0);

        r0.<android.app.ActivityOptions: int mLaunchWindowingMode> = $i20;

        $i21 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android.activity.activityType", 0);

        r0.<android.app.ActivityOptions: int mLaunchActivityType> = $i21;

        $i22 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android.activity.launchTaskId", -1);

        r0.<android.app.ActivityOptions: int mLaunchTaskId> = $i22;

        $i23 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android.activity.pendingIntentLaunchFlags", 0);

        r0.<android.app.ActivityOptions: int mPendingIntentLaunchFlags> = $i23;

        $z4 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.activity.alwaysOnTop", 0);

        r0.<android.app.ActivityOptions: boolean mTaskAlwaysOnTop> = $z4;

        $z5 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.activity.taskOverlay", 0);

        r0.<android.app.ActivityOptions: boolean mTaskOverlay> = $z5;

        $z6 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.activity.taskOverlayCanResume", 0);

        r0.<android.app.ActivityOptions: boolean mTaskOverlayCanResume> = $z6;

        $z7 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.activity.avoidMoveToFront", 0);

        r0.<android.app.ActivityOptions: boolean mAvoidMoveToFront> = $z7;

        $z8 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.activity.freezeRecentTasksReordering", 0);

        r0.<android.app.ActivityOptions: boolean mFreezeRecentTasksReordering> = $z8;

        $i24 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.splitScreenCreateMode", 0);

        r0.<android.app.ActivityOptions: int mSplitScreenCreateMode> = $i24;

        $z9 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android:activity.disallowEnterPictureInPictureWhileLaunching", 0);

        r0.<android.app.ActivityOptions: boolean mDisallowEnterPictureInPictureWhileLaunching> = $z9;

        $z10 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android:activity.applyActivityFlagsForBubbles", 0);

        r0.<android.app.ActivityOptions: boolean mApplyActivityFlagsForBubbles> = $z10;

        $z11 = virtualinvoke r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("android:activity.animSpecs");

        if $z11 == 0 goto label14;

        r34 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>("android:activity.animSpecs");

        $i2 = lengthof r34;

        $r14 = newarray (android.view.AppTransitionAnimationSpec)[$i2];

        r0.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] mAnimSpecs> = $r14;

        $i3 = lengthof r34;

        i25 = $i3 - 1;

     label13:
        if i25 < 0 goto label14;

        $r17 = r0.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] mAnimSpecs>;

        $r15 = r34[i25];

        $r16 = (android.view.AppTransitionAnimationSpec) $r15;

        $r17[i25] = $r16;

        i25 = i25 + -1;

        goto label13;

     label14:
        $z0 = virtualinvoke r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("android:activity.animationFinishedListener");

        if $z0 == 0 goto label15;

        $r12 = virtualinvoke r1.<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>("android:activity.animationFinishedListener");

        $r13 = staticinvoke <android.os.IRemoteCallback$Stub: android.os.IRemoteCallback asInterface(android.os.IBinder)>($r12);

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationFinishedListener> = $r13;

     label15:
        $i1 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:activity.rotationAnimationHint", -1);

        r0.<android.app.ActivityOptions: int mRotationAnimationHint> = $i1;

        $r7 = virtualinvoke r1.<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>("android:instantapps.installerbundle");

        r0.<android.app.ActivityOptions: android.os.Bundle mAppVerificationBundle> = $r7;

        $z1 = virtualinvoke r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("android:activity.specsFuture");

        if $z1 == 0 goto label16;

        $r10 = virtualinvoke r1.<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>("android:activity.specsFuture");

        $r11 = staticinvoke <android.view.IAppTransitionAnimationSpecsFuture$Stub: android.view.IAppTransitionAnimationSpecsFuture asInterface(android.os.IBinder)>($r10);

        r0.<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture mSpecsFuture> = $r11;

     label16:
        $r8 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android:activity.remoteAnimationAdapter");

        $r9 = (android.view.RemoteAnimationAdapter) $r8;

        r0.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter mRemoteAnimationAdapter> = $r9;

        return;

        catch java.lang.RuntimeException from label01 to label02 with label03;
    }

    public static void abort(android.app.ActivityOptions)
    {
        android.app.ActivityOptions r0;

        r0 := @parameter0: android.app.ActivityOptions;

        if r0 == null goto label1;

        virtualinvoke r0.<android.app.ActivityOptions: void abort()>();

     label1:
        return;
    }

    public static android.app.ActivityOptions fromBundle(android.os.Bundle)
    {
        android.app.ActivityOptions $r0, r2;
        android.os.Bundle r1;

        r1 := @parameter0: android.os.Bundle;

        if r1 == null goto label1;

        $r0 = new android.app.ActivityOptions;

        specialinvoke $r0.<android.app.ActivityOptions: void <init>(android.os.Bundle)>(r1);

        r2 = $r0;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    private static android.app.ActivityOptions makeAspectScaledThumbnailAnimation(android.view.View, android.graphics.Bitmap, int, int, int, int, android.os.Handler, android.app.ActivityOptions$OnAnimationStartedListener, boolean)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.os.Handler r1;
        android.app.ActivityOptions$OnAnimationStartedListener r2;
        boolean z0;
        android.app.ActivityOptions $r4;
        android.content.Context $r5;
        java.lang.String $r6;
        android.graphics.Bitmap r7;
        byte b8;
        int[] r8;

        r0 := @parameter0: android.view.View;

        r7 := @parameter1: android.graphics.Bitmap;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r1 := @parameter6: android.os.Handler;

        r2 := @parameter7: android.app.ActivityOptions$OnAnimationStartedListener;

        z0 := @parameter8: boolean;

        $r4 = new android.app.ActivityOptions;

        specialinvoke $r4.<android.app.ActivityOptions: void <init>()>();

        $r5 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        $r4.<android.app.ActivityOptions: java.lang.String mPackageName> = $r6;

        if z0 == 0 goto label1;

        b8 = 8;

        goto label2;

     label1:
        b8 = 9;

     label2:
        $r4.<android.app.ActivityOptions: int mAnimationType> = b8;

        $r4.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail> = r7;

        r8 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r8);

        $i4 = r8[0];

        $i5 = $i4 + i0;

        $r4.<android.app.ActivityOptions: int mStartX> = $i5;

        $i6 = r8[1];

        $i7 = $i6 + i1;

        $r4.<android.app.ActivityOptions: int mStartY> = $i7;

        $r4.<android.app.ActivityOptions: int mWidth> = i2;

        $r4.<android.app.ActivityOptions: int mHeight> = i3;

        specialinvoke $r4.<android.app.ActivityOptions: void setOnAnimationStartedListener(android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener)>(r1, r2);

        return $r4;
    }

    public static android.app.ActivityOptions makeBasic()
    {
        android.app.ActivityOptions $r0;

        $r0 = new android.app.ActivityOptions;

        specialinvoke $r0.<android.app.ActivityOptions: void <init>()>();

        return $r0;
    }

    public static android.app.ActivityOptions makeClipRevealAnimation(android.view.View, int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[] r2;
        android.app.ActivityOptions $r3;

        r0 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r3 = new android.app.ActivityOptions;

        specialinvoke $r3.<android.app.ActivityOptions: void <init>()>();

        $r3.<android.app.ActivityOptions: int mAnimationType> = 11;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i4 = r2[0];

        $i5 = $i4 + i0;

        $r3.<android.app.ActivityOptions: int mStartX> = $i5;

        $i6 = r2[1];

        $i7 = $i6 + i1;

        $r3.<android.app.ActivityOptions: int mStartY> = $i7;

        $r3.<android.app.ActivityOptions: int mWidth> = i2;

        $r3.<android.app.ActivityOptions: int mHeight> = i3;

        return $r3;
    }

    public static android.app.ActivityOptions makeCustomAnimation(android.content.Context, int, int)
    {
        android.content.Context r0;
        int i0, i1;
        android.app.ActivityOptions $r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int,android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener,android.app.ActivityOptions$OnAnimationFinishedListener)>(r0, i0, i1, null, null, null);

        return $r1;
    }

    public static android.app.ActivityOptions makeCustomAnimation(android.content.Context, int, int, android.os.Handler, android.app.ActivityOptions$OnAnimationStartedListener)
    {
        android.content.Context r0;
        int i0, i1;
        android.os.Handler r1;
        android.app.ActivityOptions$OnAnimationStartedListener r2;
        android.app.ActivityOptions $r4;
        java.lang.String $r5;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.os.Handler;

        r2 := @parameter4: android.app.ActivityOptions$OnAnimationStartedListener;

        $r4 = new android.app.ActivityOptions;

        specialinvoke $r4.<android.app.ActivityOptions: void <init>()>();

        $r5 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r4.<android.app.ActivityOptions: java.lang.String mPackageName> = $r5;

        $r4.<android.app.ActivityOptions: int mAnimationType> = 1;

        $r4.<android.app.ActivityOptions: int mCustomEnterResId> = i0;

        $r4.<android.app.ActivityOptions: int mCustomExitResId> = i1;

        specialinvoke $r4.<android.app.ActivityOptions: void setOnAnimationStartedListener(android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener)>(r1, r2);

        return $r4;
    }

    public static android.app.ActivityOptions makeCustomAnimation(android.content.Context, int, int, android.os.Handler, android.app.ActivityOptions$OnAnimationStartedListener, android.app.ActivityOptions$OnAnimationFinishedListener)
    {
        int i0, i1;
        android.os.Handler r0;
        android.app.ActivityOptions$OnAnimationStartedListener r1;
        android.app.ActivityOptions$OnAnimationFinishedListener r2;
        android.content.Context r3;
        android.app.ActivityOptions r4;

        r3 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: android.os.Handler;

        r1 := @parameter4: android.app.ActivityOptions$OnAnimationStartedListener;

        r2 := @parameter5: android.app.ActivityOptions$OnAnimationFinishedListener;

        r4 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int,android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener)>(r3, i0, i1, r0, r1);

        specialinvoke r4.<android.app.ActivityOptions: void setOnAnimationFinishedListener(android.os.Handler,android.app.ActivityOptions$OnAnimationFinishedListener)>(r0, r2);

        return r4;
    }

    public static android.app.ActivityOptions makeCustomInPlaceAnimation(android.content.Context, int)
    {
        android.content.Context r0;
        int i0;
        java.lang.RuntimeException $r2;
        android.app.ActivityOptions $r3;
        java.lang.String $r4;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        if i0 == 0 goto label1;

        $r3 = new android.app.ActivityOptions;

        specialinvoke $r3.<android.app.ActivityOptions: void <init>()>();

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r3.<android.app.ActivityOptions: java.lang.String mPackageName> = $r4;

        $r3.<android.app.ActivityOptions: int mAnimationType> = 10;

        $r3.<android.app.ActivityOptions: int mCustomInPlaceResId> = i0;

        return $r3;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("You must specify a valid animation.");

        throw $r2;
    }

    public static android.app.ActivityOptions makeMultiThumbFutureAspectScaleAnimation(android.content.Context, android.os.Handler, android.view.IAppTransitionAnimationSpecsFuture, android.app.ActivityOptions$OnAnimationStartedListener, boolean)
    {
        android.content.Context r0;
        android.os.Handler r1;
        android.view.IAppTransitionAnimationSpecsFuture r2;
        android.app.ActivityOptions$OnAnimationStartedListener r3;
        boolean z0;
        android.app.ActivityOptions $r5;
        java.lang.String $r6;
        byte b0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Handler;

        r2 := @parameter2: android.view.IAppTransitionAnimationSpecsFuture;

        r3 := @parameter3: android.app.ActivityOptions$OnAnimationStartedListener;

        z0 := @parameter4: boolean;

        $r5 = new android.app.ActivityOptions;

        specialinvoke $r5.<android.app.ActivityOptions: void <init>()>();

        $r6 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r5.<android.app.ActivityOptions: java.lang.String mPackageName> = $r6;

        if z0 == 0 goto label1;

        b0 = 8;

        goto label2;

     label1:
        b0 = 9;

     label2:
        $r5.<android.app.ActivityOptions: int mAnimationType> = b0;

        $r5.<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture mSpecsFuture> = r2;

        specialinvoke $r5.<android.app.ActivityOptions: void setOnAnimationStartedListener(android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener)>(r1, r3);

        return $r5;
    }

    public static android.app.ActivityOptions makeOpenCrossProfileAppsAnimation()
    {
        android.app.ActivityOptions $r1;

        $r1 = new android.app.ActivityOptions;

        specialinvoke $r1.<android.app.ActivityOptions: void <init>()>();

        $r1.<android.app.ActivityOptions: int mAnimationType> = 12;

        return $r1;
    }

    public static android.app.ActivityOptions makeRemoteAnimation(android.view.RemoteAnimationAdapter)
    {
        android.view.RemoteAnimationAdapter r0;
        android.app.ActivityOptions $r2;

        r0 := @parameter0: android.view.RemoteAnimationAdapter;

        $r2 = new android.app.ActivityOptions;

        specialinvoke $r2.<android.app.ActivityOptions: void <init>()>();

        $r2.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter mRemoteAnimationAdapter> = r0;

        $r2.<android.app.ActivityOptions: int mAnimationType> = 13;

        return $r2;
    }

    public static android.app.ActivityOptions makeScaleUpAnimation(android.view.View, int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[] r2;
        android.app.ActivityOptions $r3;
        android.content.Context $r4;
        java.lang.String $r5;

        r0 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r3 = new android.app.ActivityOptions;

        specialinvoke $r3.<android.app.ActivityOptions: void <init>()>();

        $r4 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $r3.<android.app.ActivityOptions: java.lang.String mPackageName> = $r5;

        $r3.<android.app.ActivityOptions: int mAnimationType> = 2;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i4 = r2[0];

        $i5 = $i4 + i0;

        $r3.<android.app.ActivityOptions: int mStartX> = $i5;

        $i6 = r2[1];

        $i7 = $i6 + i1;

        $r3.<android.app.ActivityOptions: int mStartY> = $i7;

        $r3.<android.app.ActivityOptions: int mWidth> = i2;

        $r3.<android.app.ActivityOptions: int mHeight> = i3;

        return $r3;
    }

    static android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity, android.app.ExitTransitionCoordinator, java.util.ArrayList, int, android.content.Intent)
    {
        android.app.Activity r0;
        android.app.ExitTransitionCoordinator r1;
        java.util.ArrayList r2;
        int i0, $i1;
        android.content.Intent r3;
        android.app.ActivityOptions $r5;
        android.app.ActivityTransitionState $r6;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: android.app.ExitTransitionCoordinator;

        r2 := @parameter2: java.util.ArrayList;

        i0 := @parameter3: int;

        r3 := @parameter4: android.content.Intent;

        $r5 = new android.app.ActivityOptions;

        specialinvoke $r5.<android.app.ActivityOptions: void <init>()>();

        $r5.<android.app.ActivityOptions: int mAnimationType> = 5;

        $r5.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames> = r2;

        $r5.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver> = r1;

        $r5.<android.app.ActivityOptions: boolean mIsReturning> = 1;

        $r5.<android.app.ActivityOptions: int mResultCode> = i0;

        $r5.<android.app.ActivityOptions: android.content.Intent mResultData> = r3;

        $r6 = r0.<android.app.Activity: android.app.ActivityTransitionState mActivityTransitionState>;

        $i1 = virtualinvoke $r6.<android.app.ActivityTransitionState: int addExitTransitionCoordinator(android.app.ExitTransitionCoordinator)>(r1);

        $r5.<android.app.ActivityOptions: int mExitCoordinatorIndex> = $i1;

        return $r5;
    }

    public static android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity, android.view.View, java.lang.String)
    {
        android.app.Activity r0;
        android.view.View r1;
        java.lang.String r2;
        android.util.Pair[] $r3;
        android.util.Pair $r4;
        android.app.ActivityOptions $r5;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: java.lang.String;

        $r3 = newarray (android.util.Pair)[1];

        $r4 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3[0] = $r4;

        $r5 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity,android.util.Pair[])>(r0, $r3);

        return $r5;
    }

    public static transient android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity, android.util.Pair[])
    {
        android.app.Activity r0;
        android.util.Pair[] r1;
        android.app.ActivityOptions $r3;
        android.view.Window $r4;
        android.app.SharedElementCallback $r5;

        r0 := @parameter0: android.app.Activity;

        r1 := @parameter1: android.util.Pair[];

        $r3 = new android.app.ActivityOptions;

        specialinvoke $r3.<android.app.ActivityOptions: void <init>()>();

        $r4 = virtualinvoke r0.<android.app.Activity: android.view.Window getWindow()>();

        $r5 = r0.<android.app.Activity: android.app.SharedElementCallback mExitTransitionListener>;

        staticinvoke <android.app.ActivityOptions: android.app.ExitTransitionCoordinator makeSceneTransitionAnimation(android.app.Activity,android.view.Window,android.app.ActivityOptions,android.app.SharedElementCallback,android.util.Pair[])>(r0, $r4, $r3, $r5, r1);

        return $r3;
    }

    static android.app.ExitTransitionCoordinator makeSceneTransitionAnimation(android.app.Activity, android.view.Window, android.app.ActivityOptions, android.app.SharedElementCallback, android.util.Pair[])
    {
        android.app.Activity r0;
        android.app.ActivityOptions r1;
        android.app.SharedElementCallback r2;
        android.util.Pair[] r3;
        android.util.Pair r6;
        java.lang.String r7;
        boolean $z0, z3;
        java.util.ArrayList $r8, $r9;
        android.app.ExitTransitionCoordinator $r10;
        android.app.ActivityTransitionState $r11;
        int $i0, $i1, i2;
        java.lang.Object $r12, $r14, $r17;
        java.lang.IllegalArgumentException $r13, $r16;
        android.view.View $r15, $r18;
        android.view.Window r19;

        r0 := @parameter0: android.app.Activity;

        r19 := @parameter1: android.view.Window;

        r1 := @parameter2: android.app.ActivityOptions;

        r2 := @parameter3: android.app.SharedElementCallback;

        r3 := @parameter4: android.util.Pair[];

        $z0 = virtualinvoke r19.<android.view.Window: boolean hasFeature(int)>(13);

        if $z0 != 0 goto label1;

        r1.<android.app.ActivityOptions: int mAnimationType> = 6;

        return null;

     label1:
        r1.<android.app.ActivityOptions: int mAnimationType> = 5;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        if r3 == null goto label5;

        i2 = 0;

     label2:
        $i1 = lengthof r3;

        if i2 >= $i1 goto label5;

        r6 = r3[i2];

        $r12 = r6.<android.util.Pair: java.lang.Object second>;

        r7 = (java.lang.String) $r12;

        if r7 == null goto label4;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        $r14 = r6.<android.util.Pair: java.lang.Object first>;

        $r15 = (android.view.View) $r14;

        if $r15 == null goto label3;

        $r17 = r6.<android.util.Pair: java.lang.Object first>;

        $r18 = (android.view.View) $r17;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Shared element must not be null");

        throw $r16;

     label4:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Shared element name must not be null");

        throw $r13;

     label5:
        $r10 = new android.app.ExitTransitionCoordinator;

        specialinvoke $r10.<android.app.ExitTransitionCoordinator: void <init>(android.app.Activity,android.view.Window,android.app.SharedElementCallback,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,boolean)>(r0, r19, r2, $r8, $r8, $r9, 0);

        r1.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver> = $r10;

        r1.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames> = $r8;

        if r0 != null goto label6;

        z3 = 1;

        goto label7;

     label6:
        z3 = 0;

     label7:
        r1.<android.app.ActivityOptions: boolean mIsReturning> = z3;

        if r0 != null goto label8;

        r1.<android.app.ActivityOptions: int mExitCoordinatorIndex> = -1;

        goto label9;

     label8:
        $r11 = r0.<android.app.Activity: android.app.ActivityTransitionState mActivityTransitionState>;

        $i0 = virtualinvoke $r11.<android.app.ActivityTransitionState: int addExitTransitionCoordinator(android.app.ExitTransitionCoordinator)>($r10);

        r1.<android.app.ActivityOptions: int mExitCoordinatorIndex> = $i0;

     label9:
        return $r10;
    }

    public static android.app.ActivityOptions makeTaskLaunchBehind()
    {
        android.app.ActivityOptions $r1;

        $r1 = new android.app.ActivityOptions;

        specialinvoke $r1.<android.app.ActivityOptions: void <init>()>();

        $r1.<android.app.ActivityOptions: int mAnimationType> = 7;

        return $r1;
    }

    private static android.app.ActivityOptions makeThumbnailAnimation(android.view.View, android.graphics.Bitmap, int, int, android.app.ActivityOptions$OnAnimationStartedListener, boolean)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.app.ActivityOptions$OnAnimationStartedListener r1;
        boolean z0;
        android.app.ActivityOptions $r3;
        android.content.Context $r4;
        java.lang.String $r5;
        android.os.Handler $r6;
        android.graphics.Bitmap r7;
        byte b6;
        int[] r8;

        r0 := @parameter0: android.view.View;

        r7 := @parameter1: android.graphics.Bitmap;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: android.app.ActivityOptions$OnAnimationStartedListener;

        z0 := @parameter5: boolean;

        $r3 = new android.app.ActivityOptions;

        specialinvoke $r3.<android.app.ActivityOptions: void <init>()>();

        $r4 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $r3.<android.app.ActivityOptions: java.lang.String mPackageName> = $r5;

        if z0 == 0 goto label1;

        b6 = 3;

        goto label2;

     label1:
        b6 = 4;

     label2:
        $r3.<android.app.ActivityOptions: int mAnimationType> = b6;

        $r3.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail> = r7;

        r8 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r8);

        $i2 = r8[0];

        $i3 = $i2 + i0;

        $r3.<android.app.ActivityOptions: int mStartX> = $i3;

        $i4 = r8[1];

        $i5 = $i4 + i1;

        $r3.<android.app.ActivityOptions: int mStartY> = $i5;

        $r6 = virtualinvoke r0.<android.view.View: android.os.Handler getHandler()>();

        specialinvoke $r3.<android.app.ActivityOptions: void setOnAnimationStartedListener(android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener)>($r6, r1);

        return $r3;
    }

    public static android.app.ActivityOptions makeThumbnailAspectScaleDownAnimation(android.view.View, android.graphics.Bitmap, int, int, int, int, android.os.Handler, android.app.ActivityOptions$OnAnimationStartedListener)
    {
        android.view.View r0;
        android.graphics.Bitmap r1;
        int i0, i1, i2, i3;
        android.os.Handler r2;
        android.app.ActivityOptions$OnAnimationStartedListener r3;
        android.app.ActivityOptions $r4;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Bitmap;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 := @parameter6: android.os.Handler;

        r3 := @parameter7: android.app.ActivityOptions$OnAnimationStartedListener;

        $r4 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeAspectScaledThumbnailAnimation(android.view.View,android.graphics.Bitmap,int,int,int,int,android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener,boolean)>(r0, r1, i0, i1, i2, i3, r2, r3, 0);

        return $r4;
    }

    public static android.app.ActivityOptions makeThumbnailAspectScaleDownAnimation(android.view.View, android.view.AppTransitionAnimationSpec[], android.os.Handler, android.app.ActivityOptions$OnAnimationStartedListener, android.app.ActivityOptions$OnAnimationFinishedListener)
    {
        android.view.View r0;
        android.view.AppTransitionAnimationSpec[] r1;
        android.os.Handler r2;
        android.app.ActivityOptions$OnAnimationStartedListener r3;
        android.app.ActivityOptions$OnAnimationFinishedListener r4;
        android.app.ActivityOptions $r6;
        android.content.Context $r7;
        java.lang.String $r8;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.AppTransitionAnimationSpec[];

        r2 := @parameter2: android.os.Handler;

        r3 := @parameter3: android.app.ActivityOptions$OnAnimationStartedListener;

        r4 := @parameter4: android.app.ActivityOptions$OnAnimationFinishedListener;

        $r6 = new android.app.ActivityOptions;

        specialinvoke $r6.<android.app.ActivityOptions: void <init>()>();

        $r7 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        $r6.<android.app.ActivityOptions: java.lang.String mPackageName> = $r8;

        $r6.<android.app.ActivityOptions: int mAnimationType> = 9;

        $r6.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] mAnimSpecs> = r1;

        specialinvoke $r6.<android.app.ActivityOptions: void setOnAnimationStartedListener(android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener)>(r2, r3);

        specialinvoke $r6.<android.app.ActivityOptions: void setOnAnimationFinishedListener(android.os.Handler,android.app.ActivityOptions$OnAnimationFinishedListener)>(r2, r4);

        return $r6;
    }

    public static android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View, android.graphics.Bitmap, int, int)
    {
        android.view.View r0;
        android.graphics.Bitmap r1;
        int i0, i1;
        android.app.ActivityOptions $r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Bitmap;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int,android.app.ActivityOptions$OnAnimationStartedListener)>(r0, r1, i0, i1, null);

        return $r2;
    }

    private static android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View, android.graphics.Bitmap, int, int, android.app.ActivityOptions$OnAnimationStartedListener)
    {
        android.view.View r0;
        android.graphics.Bitmap r1;
        int i0, i1;
        android.app.ActivityOptions$OnAnimationStartedListener r2;
        android.app.ActivityOptions $r3;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Bitmap;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.app.ActivityOptions$OnAnimationStartedListener;

        $r3 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeThumbnailAnimation(android.view.View,android.graphics.Bitmap,int,int,android.app.ActivityOptions$OnAnimationStartedListener,boolean)>(r0, r1, i0, i1, r2, 1);

        return $r3;
    }

    public static void setExitTransitionTimeout(long)
    {
        long l0;

        l0 := @parameter0: long;

        <android.app.ExitTransitionCoordinator: long sMaxWaitMillis> = l0;

        return;
    }

    private void setOnAnimationFinishedListener(android.os.Handler, android.app.ActivityOptions$OnAnimationFinishedListener)
    {
        android.app.ActivityOptions r0;
        android.os.Handler r1;
        android.app.ActivityOptions$OnAnimationFinishedListener r2;
        android.app.ActivityOptions$2 $r3;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: android.app.ActivityOptions$OnAnimationFinishedListener;

        if r2 == null goto label1;

        $r3 = new android.app.ActivityOptions$2;

        specialinvoke $r3.<android.app.ActivityOptions$2: void <init>(android.app.ActivityOptions,android.os.Handler,android.app.ActivityOptions$OnAnimationFinishedListener)>(r0, r1, r2);

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationFinishedListener> = $r3;

     label1:
        return;
    }

    private void setOnAnimationStartedListener(android.os.Handler, android.app.ActivityOptions$OnAnimationStartedListener)
    {
        android.app.ActivityOptions r0;
        android.os.Handler r1;
        android.app.ActivityOptions$OnAnimationStartedListener r2;
        android.app.ActivityOptions$1 $r3;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: android.app.ActivityOptions$OnAnimationStartedListener;

        if r2 == null goto label1;

        $r3 = new android.app.ActivityOptions$1;

        specialinvoke $r3.<android.app.ActivityOptions$1: void <init>(android.app.ActivityOptions,android.os.Handler,android.app.ActivityOptions$OnAnimationStartedListener)>(r0, r1, r2);

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener> = $r3;

     label1:
        return;
    }

    public static transient android.app.ActivityOptions startSharedElementAnimation(android.view.Window, android.util.Pair[])
    {
        android.view.Window r0;
        android.app.ActivityOptions $r2;
        android.view.View $r3;
        android.app.ActivityOptions$HideWindowListener $r4;
        android.util.Pair[] r5;
        android.app.ExitTransitionCoordinator r6;

        r0 := @parameter0: android.view.Window;

        r5 := @parameter1: android.util.Pair[];

        $r2 = new android.app.ActivityOptions;

        specialinvoke $r2.<android.app.ActivityOptions: void <init>()>();

        $r3 = virtualinvoke r0.<android.view.Window: android.view.View getDecorView()>();

        if $r3 != null goto label1;

        return $r2;

     label1:
        r6 = staticinvoke <android.app.ActivityOptions: android.app.ExitTransitionCoordinator makeSceneTransitionAnimation(android.app.Activity,android.view.Window,android.app.ActivityOptions,android.app.SharedElementCallback,android.util.Pair[])>(null, r0, $r2, null, r5);

        if r6 == null goto label2;

        $r4 = new android.app.ActivityOptions$HideWindowListener;

        specialinvoke $r4.<android.app.ActivityOptions$HideWindowListener: void <init>(android.view.Window,android.app.ExitTransitionCoordinator)>(r0, r6);

        virtualinvoke r6.<android.app.ExitTransitionCoordinator: void setHideSharedElementsCallback(android.app.ExitTransitionCoordinator$HideSharedElementsCallback)>($r4);

        virtualinvoke r6.<android.app.ExitTransitionCoordinator: void startExit()>();

     label2:
        return $r2;
    }

    public static void stopSharedElementAnimation(android.view.Window)
    {
        android.app.ExitTransitionCoordinator r0;
        java.lang.Object $r1;
        android.view.ViewGroup $r2;
        android.view.Window r3;
        android.view.View r4;

        r3 := @parameter0: android.view.Window;

        r4 = virtualinvoke r3.<android.view.Window: android.view.View getDecorView()>();

        if r4 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r4.<android.view.View: java.lang.Object getTag(int)>(16908897);

        r0 = (android.app.ExitTransitionCoordinator) $r1;

        if r0 == null goto label2;

        virtualinvoke r0.<android.app.ExitTransitionCoordinator: boolean cancelPendingTransitions()>();

        virtualinvoke r4.<android.view.View: void setTagInternal(int,java.lang.Object)>(16908897, null);

        $r2 = (android.view.ViewGroup) r4;

        staticinvoke <android.transition.TransitionManager: void endTransitions(android.view.ViewGroup)>($r2);

        virtualinvoke r0.<android.app.ExitTransitionCoordinator: void resetViews()>();

        virtualinvoke r0.<android.app.ExitTransitionCoordinator: void clearState()>();

        virtualinvoke r4.<android.view.View: void setVisibility(int)>(0);

     label2:
        return;
    }

    public void abort()
    {
        android.app.ActivityOptions r0;
        android.os.RemoteException $r1;
        android.os.IRemoteCallback r2;

        r0 := @this: android.app.ActivityOptions;

        r2 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean canTaskOverlayResume()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mTaskOverlayCanResume>;

        return $z0;
    }

    public boolean disallowEnterPictureInPictureWhileLaunching()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mDisallowEnterPictureInPictureWhileLaunching>;

        return $z0;
    }

    public android.app.ActivityOptions forTargetActivity()
    {
        android.app.ActivityOptions r0, $r2;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mAnimationType>;

        if $i0 != 5 goto label1;

        $r2 = new android.app.ActivityOptions;

        specialinvoke $r2.<android.app.ActivityOptions: void <init>()>();

        virtualinvoke $r2.<android.app.ActivityOptions: void update(android.app.ActivityOptions)>(r0);

        return $r2;

     label1:
        return null;
    }

    public boolean freezeRecentTasksReordering()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mFreezeRecentTasksReordering>;

        return $z0;
    }

    public android.view.AppTransitionAnimationSpec[] getAnimSpecs()
    {
        android.app.ActivityOptions r0;
        android.view.AppTransitionAnimationSpec[] $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] mAnimSpecs>;

        return $r1;
    }

    public android.os.IRemoteCallback getAnimationFinishedListener()
    {
        android.app.ActivityOptions r0;
        android.os.IRemoteCallback $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationFinishedListener>;

        return $r1;
    }

    public android.os.IRemoteCallback getAnimationStartedListener()
    {
        android.app.ActivityOptions r0;
        android.os.IRemoteCallback $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        return $r1;
    }

    public int getAnimationType()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mAnimationType>;

        return $i0;
    }

    public boolean getAvoidMoveToFront()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mAvoidMoveToFront>;

        return $z0;
    }

    public int getCallerDisplayId()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mCallerDisplayId>;

        return $i0;
    }

    public int getCustomEnterResId()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mCustomEnterResId>;

        return $i0;
    }

    public int getCustomExitResId()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mCustomExitResId>;

        return $i0;
    }

    public int getCustomInPlaceResId()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mCustomInPlaceResId>;

        return $i0;
    }

    public int getExitCoordinatorKey()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mExitCoordinatorIndex>;

        return $i0;
    }

    public int getHeight()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mHeight>;

        return $i0;
    }

    public int getLaunchActivityType()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mLaunchActivityType>;

        return $i0;
    }

    public android.graphics.Rect getLaunchBounds()
    {
        android.app.ActivityOptions r0;
        android.graphics.Rect $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.graphics.Rect mLaunchBounds>;

        return $r1;
    }

    public int getLaunchDisplayId()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mLaunchDisplayId>;

        return $i0;
    }

    public boolean getLaunchTaskBehind()
    {
        android.app.ActivityOptions r0;
        int $i0;
        boolean z0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mAnimationType>;

        if $i0 != 7 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.window.WindowContainerToken getLaunchTaskDisplayArea()
    {
        android.app.ActivityOptions r0;
        android.window.WindowContainerToken $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.window.WindowContainerToken mLaunchTaskDisplayArea>;

        return $r1;
    }

    public int getLaunchTaskId()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mLaunchTaskId>;

        return $i0;
    }

    public int getLaunchWindowingMode()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mLaunchWindowingMode>;

        return $i0;
    }

    public boolean getLockTaskMode()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mLockTaskMode>;

        return $z0;
    }

    public java.lang.String getPackageName()
    {
        android.app.ActivityOptions r0;
        java.lang.String $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: java.lang.String mPackageName>;

        return $r1;
    }

    public int getPendingIntentLaunchFlags()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mPendingIntentLaunchFlags>;

        return $i0;
    }

    public android.view.RemoteAnimationAdapter getRemoteAnimationAdapter()
    {
        android.app.ActivityOptions r0;
        android.view.RemoteAnimationAdapter $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter mRemoteAnimationAdapter>;

        return $r1;
    }

    public int getResultCode()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mResultCode>;

        return $i0;
    }

    public android.content.Intent getResultData()
    {
        android.app.ActivityOptions r0;
        android.content.Intent $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.content.Intent mResultData>;

        return $r1;
    }

    public android.os.ResultReceiver getResultReceiver()
    {
        android.app.ActivityOptions r0;
        android.os.ResultReceiver $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver>;

        return $r1;
    }

    public int getRotationAnimationHint()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mRotationAnimationHint>;

        return $i0;
    }

    public java.util.ArrayList getSharedElementNames()
    {
        android.app.ActivityOptions r0;
        java.util.ArrayList $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames>;

        return $r1;
    }

    public android.view.IAppTransitionAnimationSpecsFuture getSpecsFuture()
    {
        android.app.ActivityOptions r0;
        android.view.IAppTransitionAnimationSpecsFuture $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture mSpecsFuture>;

        return $r1;
    }

    public int getSplitScreenCreateMode()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mSplitScreenCreateMode>;

        return $i0;
    }

    public int getStartX()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mStartX>;

        return $i0;
    }

    public int getStartY()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mStartY>;

        return $i0;
    }

    public boolean getTaskAlwaysOnTop()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mTaskAlwaysOnTop>;

        return $z0;
    }

    public boolean getTaskOverlay()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mTaskOverlay>;

        return $z0;
    }

    public android.graphics.GraphicBuffer getThumbnail()
    {
        android.app.ActivityOptions r0;
        android.graphics.Bitmap r1;
        android.graphics.GraphicBuffer r2;

        r0 := @this: android.app.ActivityOptions;

        r1 = r0.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.GraphicBuffer createGraphicBufferHandle()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.app.PendingIntent getUsageTimeReport()
    {
        android.app.ActivityOptions r0;
        android.app.PendingIntent $r1;

        r0 := @this: android.app.ActivityOptions;

        $r1 = r0.<android.app.ActivityOptions: android.app.PendingIntent mUsageTimeReport>;

        return $r1;
    }

    public int getWidth()
    {
        android.app.ActivityOptions r0;
        int $i0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mWidth>;

        return $i0;
    }

    public boolean isApplyActivityFlagsForBubbles()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mApplyActivityFlagsForBubbles>;

        return $z0;
    }

    boolean isCrossTask()
    {
        android.app.ActivityOptions r0;
        int $i0;
        boolean z0;

        r0 := @this: android.app.ActivityOptions;

        $i0 = r0.<android.app.ActivityOptions: int mExitCoordinatorIndex>;

        if $i0 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isReturning()
    {
        android.app.ActivityOptions r0;
        boolean $z0;

        r0 := @this: android.app.ActivityOptions;

        $z0 = r0.<android.app.ActivityOptions: boolean mIsReturning>;

        return $z0;
    }

    public android.os.Bundle popAppVerificationBundle()
    {
        android.app.ActivityOptions r0;
        android.os.Bundle r1;

        r0 := @this: android.app.ActivityOptions;

        r1 = r0.<android.app.ActivityOptions: android.os.Bundle mAppVerificationBundle>;

        r0.<android.app.ActivityOptions: android.os.Bundle mAppVerificationBundle> = null;

        return r1;
    }

    public void requestUsageTimeReport(android.app.PendingIntent)
    {
        android.app.ActivityOptions r0;
        android.app.PendingIntent r1;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.app.PendingIntent;

        r0.<android.app.ActivityOptions: android.app.PendingIntent mUsageTimeReport> = r1;

        return;
    }

    public android.app.ActivityOptions setAppVerificationBundle(android.os.Bundle)
    {
        android.app.ActivityOptions r0;
        android.os.Bundle r1;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.os.Bundle;

        r0.<android.app.ActivityOptions: android.os.Bundle mAppVerificationBundle> = r1;

        return r0;
    }

    public void setApplyActivityFlagsForBubbles(boolean)
    {
        android.app.ActivityOptions r0;
        boolean z0;

        r0 := @this: android.app.ActivityOptions;

        z0 := @parameter0: boolean;

        r0.<android.app.ActivityOptions: boolean mApplyActivityFlagsForBubbles> = z0;

        return;
    }

    public void setAvoidMoveToFront()
    {
        android.app.ActivityOptions r0;

        r0 := @this: android.app.ActivityOptions;

        r0.<android.app.ActivityOptions: boolean mAvoidMoveToFront> = 1;

        return;
    }

    public android.app.ActivityOptions setCallerDisplayId(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mCallerDisplayId> = i0;

        return r0;
    }

    public void setDisallowEnterPictureInPictureWhileLaunching(boolean)
    {
        android.app.ActivityOptions r0;
        boolean z0;

        r0 := @this: android.app.ActivityOptions;

        z0 := @parameter0: boolean;

        r0.<android.app.ActivityOptions: boolean mDisallowEnterPictureInPictureWhileLaunching> = z0;

        return;
    }

    public void setFreezeRecentTasksReordering()
    {
        android.app.ActivityOptions r0;

        r0 := @this: android.app.ActivityOptions;

        r0.<android.app.ActivityOptions: boolean mFreezeRecentTasksReordering> = 1;

        return;
    }

    public void setLaunchActivityType(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mLaunchActivityType> = i0;

        return;
    }

    public android.app.ActivityOptions setLaunchBounds(android.graphics.Rect)
    {
        android.app.ActivityOptions r0;
        android.graphics.Rect $r1, r2, r3;

        r0 := @this: android.app.ActivityOptions;

        r2 := @parameter0: android.graphics.Rect;

        if r2 == null goto label1;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r2);

        r3 = $r1;

        goto label2;

     label1:
        r3 = null;

     label2:
        r0.<android.app.ActivityOptions: android.graphics.Rect mLaunchBounds> = r3;

        return r0;
    }

    public android.app.ActivityOptions setLaunchDisplayId(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mLaunchDisplayId> = i0;

        return r0;
    }

    public android.app.ActivityOptions setLaunchTaskDisplayArea(android.window.WindowContainerToken)
    {
        android.app.ActivityOptions r0;
        android.window.WindowContainerToken r1;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.window.WindowContainerToken;

        r0.<android.app.ActivityOptions: android.window.WindowContainerToken mLaunchTaskDisplayArea> = r1;

        return r0;
    }

    public void setLaunchTaskId(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mLaunchTaskId> = i0;

        return;
    }

    public void setLaunchWindowingMode(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mLaunchWindowingMode> = i0;

        return;
    }

    public android.app.ActivityOptions setLockTaskEnabled(boolean)
    {
        android.app.ActivityOptions r0;
        boolean z0;

        r0 := @this: android.app.ActivityOptions;

        z0 := @parameter0: boolean;

        r0.<android.app.ActivityOptions: boolean mLockTaskMode> = z0;

        return r0;
    }

    public void setPendingIntentLaunchFlags(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mPendingIntentLaunchFlags> = i0;

        return;
    }

    public void setRemoteAnimationAdapter(android.view.RemoteAnimationAdapter)
    {
        android.app.ActivityOptions r0;
        android.view.RemoteAnimationAdapter r1;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.view.RemoteAnimationAdapter;

        r0.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter mRemoteAnimationAdapter> = r1;

        return;
    }

    public void setRotationAnimationHint(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mRotationAnimationHint> = i0;

        return;
    }

    public void setSplitScreenCreateMode(int)
    {
        android.app.ActivityOptions r0;
        int i0;

        r0 := @this: android.app.ActivityOptions;

        i0 := @parameter0: int;

        r0.<android.app.ActivityOptions: int mSplitScreenCreateMode> = i0;

        return;
    }

    public void setTaskAlwaysOnTop(boolean)
    {
        android.app.ActivityOptions r0;
        boolean z0;

        r0 := @this: android.app.ActivityOptions;

        z0 := @parameter0: boolean;

        r0.<android.app.ActivityOptions: boolean mTaskAlwaysOnTop> = z0;

        return;
    }

    public void setTaskOverlay(boolean, boolean)
    {
        android.app.ActivityOptions r0;
        boolean z0, z1;

        r0 := @this: android.app.ActivityOptions;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r0.<android.app.ActivityOptions: boolean mTaskOverlay> = z0;

        r0.<android.app.ActivityOptions: boolean mTaskOverlayCanResume> = z1;

        return;
    }

    public android.os.Bundle toBundle()
    {
        android.app.ActivityOptions r0;
        android.os.IRemoteCallback r2, r17, r21;
        android.os.Bundle $r3, r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21, i22;
        android.os.IBinder $r4, $r5, r13, r18;
        boolean $z0, z1, z2, z3, z4, z5, z6, z7, z8;
        java.util.ArrayList $r6;
        android.content.Intent $r7;
        android.graphics.Bitmap$Config $r8;
        android.graphics.GraphicBuffer $r9;
        java.lang.String r10;
        android.graphics.Rect r11;
        android.app.PendingIntent r12;
        android.os.ResultReceiver r14;
        android.graphics.Bitmap r15, r16;
        android.window.WindowContainerToken r19;
        android.view.AppTransitionAnimationSpec[] r20;
        android.view.IAppTransitionAnimationSpecsFuture r22;
        android.view.RemoteAnimationAdapter r24;

        r0 := @this: android.app.ActivityOptions;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r10 = r0.<android.app.ActivityOptions: java.lang.String mPackageName>;

        if r10 == null goto label01;

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android:activity.packageName", r10);

     label01:
        r11 = r0.<android.app.ActivityOptions: android.graphics.Rect mLaunchBounds>;

        if r11 == null goto label02;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android:activity.launchBounds", r11);

     label02:
        i9 = r0.<android.app.ActivityOptions: int mAnimationType>;

        if i9 == -1 goto label03;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animType", i9);

     label03:
        r12 = r0.<android.app.ActivityOptions: android.app.PendingIntent mUsageTimeReport>;

        if r12 == null goto label04;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android:activity.usageTimeReport", r12);

     label04:
        i10 = r0.<android.app.ActivityOptions: int mAnimationType>;

        r13 = null;

        tableswitch(i10)
        {
            case 1: goto label14;
            case 2: goto label13;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label07;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label06;
            case 11: goto label13;
            default: goto label05;
        };

     label05:
        goto label16;

     label06:
        $i0 = r0.<android.app.ActivityOptions: int mCustomInPlaceResId>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animInPlaceRes", $i0);

        goto label16;

     label07:
        r14 = r0.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver>;

        if r14 == null goto label08;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android:activity.transitionCompleteListener", r14);

     label08:
        $z0 = r0.<android.app.ActivityOptions: boolean mIsReturning>;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android:activity.transitionIsReturning", $z0);

        $r6 = r0.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames>;

        virtualinvoke $r3.<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>("android:activity.sharedElementNames", $r6);

        $r7 = r0.<android.app.ActivityOptions: android.content.Intent mResultData>;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android:activity.resultData", $r7);

        $i1 = r0.<android.app.ActivityOptions: int mResultCode>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.resultCode", $i1);

        $i2 = r0.<android.app.ActivityOptions: int mExitCoordinatorIndex>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.exitCoordinatorIndex", $i2);

        goto label16;

     label09:
        r15 = r0.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail>;

        if r15 == null goto label11;

        $r8 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        r16 = virtualinvoke r15.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>($r8, 0);

        if r16 == null goto label10;

        $r9 = virtualinvoke r16.<android.graphics.Bitmap: android.graphics.GraphicBuffer createGraphicBufferHandle()>();

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android:activity.animThumbnail", $r9);

        goto label11;

     label10:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityOptions", "Failed to copy thumbnail");

     label11:
        $i11 = r0.<android.app.ActivityOptions: int mStartX>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animStartX", $i11);

        $i12 = r0.<android.app.ActivityOptions: int mStartY>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animStartY", $i12);

        $i13 = r0.<android.app.ActivityOptions: int mWidth>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animWidth", $i13);

        $i14 = r0.<android.app.ActivityOptions: int mHeight>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animHeight", $i14);

        r17 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        if r17 == null goto label12;

        r13 = interfaceinvoke r17.<android.os.IRemoteCallback: android.os.IBinder asBinder()>();

     label12:
        virtualinvoke $r3.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("android:activity.animStartListener", r13);

        goto label16;

     label13:
        $i3 = r0.<android.app.ActivityOptions: int mStartX>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animStartX", $i3);

        $i4 = r0.<android.app.ActivityOptions: int mStartY>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animStartY", $i4);

        $i5 = r0.<android.app.ActivityOptions: int mWidth>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animWidth", $i5);

        $i6 = r0.<android.app.ActivityOptions: int mHeight>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animHeight", $i6);

        goto label16;

     label14:
        $i7 = r0.<android.app.ActivityOptions: int mCustomEnterResId>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animEnterRes", $i7);

        $i8 = r0.<android.app.ActivityOptions: int mCustomExitResId>;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.animExitRes", $i8);

        r2 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        r18 = null;

        if r2 == null goto label15;

        r18 = interfaceinvoke r2.<android.os.IRemoteCallback: android.os.IBinder asBinder()>();

     label15:
        virtualinvoke $r3.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("android:activity.animStartListener", r18);

     label16:
        z1 = r0.<android.app.ActivityOptions: boolean mLockTaskMode>;

        if z1 == 0 goto label17;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android:activity.lockTaskMode", z1);

     label17:
        i15 = r0.<android.app.ActivityOptions: int mLaunchDisplayId>;

        if i15 == -1 goto label18;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.activity.launchDisplayId", i15);

     label18:
        i16 = r0.<android.app.ActivityOptions: int mCallerDisplayId>;

        if i16 == -1 goto label19;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.activity.callerDisplayId", i16);

     label19:
        r19 = r0.<android.app.ActivityOptions: android.window.WindowContainerToken mLaunchTaskDisplayArea>;

        if r19 == null goto label20;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.activity.launchTaskDisplayAreaToken", r19);

     label20:
        i17 = r0.<android.app.ActivityOptions: int mLaunchWindowingMode>;

        if i17 == 0 goto label21;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.activity.windowingMode", i17);

     label21:
        i18 = r0.<android.app.ActivityOptions: int mLaunchActivityType>;

        if i18 == 0 goto label22;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.activity.activityType", i18);

     label22:
        i19 = r0.<android.app.ActivityOptions: int mLaunchTaskId>;

        if i19 == -1 goto label23;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.activity.launchTaskId", i19);

     label23:
        i20 = r0.<android.app.ActivityOptions: int mPendingIntentLaunchFlags>;

        if i20 == 0 goto label24;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.activity.pendingIntentLaunchFlags", i20);

     label24:
        z2 = r0.<android.app.ActivityOptions: boolean mTaskAlwaysOnTop>;

        if z2 == 0 goto label25;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.activity.alwaysOnTop", z2);

     label25:
        z3 = r0.<android.app.ActivityOptions: boolean mTaskOverlay>;

        if z3 == 0 goto label26;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.activity.taskOverlay", z3);

     label26:
        z4 = r0.<android.app.ActivityOptions: boolean mTaskOverlayCanResume>;

        if z4 == 0 goto label27;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.activity.taskOverlayCanResume", z4);

     label27:
        z5 = r0.<android.app.ActivityOptions: boolean mAvoidMoveToFront>;

        if z5 == 0 goto label28;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.activity.avoidMoveToFront", z5);

     label28:
        z6 = r0.<android.app.ActivityOptions: boolean mFreezeRecentTasksReordering>;

        if z6 == 0 goto label29;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.activity.freezeRecentTasksReordering", z6);

     label29:
        i21 = r0.<android.app.ActivityOptions: int mSplitScreenCreateMode>;

        if i21 == 0 goto label30;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.splitScreenCreateMode", i21);

     label30:
        z7 = r0.<android.app.ActivityOptions: boolean mDisallowEnterPictureInPictureWhileLaunching>;

        if z7 == 0 goto label31;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android:activity.disallowEnterPictureInPictureWhileLaunching", z7);

     label31:
        z8 = r0.<android.app.ActivityOptions: boolean mApplyActivityFlagsForBubbles>;

        if z8 == 0 goto label32;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android:activity.applyActivityFlagsForBubbles", z8);

     label32:
        r20 = r0.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] mAnimSpecs>;

        if r20 == null goto label33;

        virtualinvoke $r3.<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>("android:activity.animSpecs", r20);

     label33:
        r21 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationFinishedListener>;

        if r21 == null goto label34;

        $r5 = interfaceinvoke r21.<android.os.IRemoteCallback: android.os.IBinder asBinder()>();

        virtualinvoke $r3.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("android:activity.animationFinishedListener", $r5);

     label34:
        r22 = r0.<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture mSpecsFuture>;

        if r22 == null goto label35;

        $r4 = interfaceinvoke r22.<android.view.IAppTransitionAnimationSpecsFuture: android.os.IBinder asBinder()>();

        virtualinvoke $r3.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("android:activity.specsFuture", $r4);

     label35:
        i22 = r0.<android.app.ActivityOptions: int mRotationAnimationHint>;

        if i22 == -1 goto label36;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:activity.rotationAnimationHint", i22);

     label36:
        r23 = r0.<android.app.ActivityOptions: android.os.Bundle mAppVerificationBundle>;

        if r23 == null goto label37;

        virtualinvoke $r3.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("android:instantapps.installerbundle", r23);

     label37:
        r24 = r0.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter mRemoteAnimationAdapter>;

        if r24 == null goto label38;

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android:activity.remoteAnimationAdapter", r24);

     label38:
        return $r3;
    }

    public java.lang.String toString()
    {
        android.app.ActivityOptions r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r6, $r18;

        r0 := @this: android.app.ActivityOptions;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ActivityOptions(");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), mPackageName=");

        $r6 = r0.<android.app.ActivityOptions: java.lang.String mPackageName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAnimationType=");

        $i1 = r0.<android.app.ActivityOptions: int mAnimationType>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mStartX=");

        $i2 = r0.<android.app.ActivityOptions: int mStartX>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mStartY=");

        $i3 = r0.<android.app.ActivityOptions: int mStartY>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mWidth=");

        $i4 = r0.<android.app.ActivityOptions: int mWidth>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mHeight=");

        $i5 = r0.<android.app.ActivityOptions: int mHeight>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r18 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    public void update(android.app.ActivityOptions)
    {
        android.app.ActivityOptions r0, r1;
        android.app.PendingIntent $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.os.ResultReceiver $r3;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        android.content.Intent $r5;
        android.graphics.Bitmap $r6;
        android.os.RemoteException $r7, $r8, $r9;
        java.lang.String r10;
        android.os.IRemoteCallback r11, $r13, r14, r16, $r18, $r20;
        android.view.AppTransitionAnimationSpec[] $r19;
        android.view.IAppTransitionAnimationSpecsFuture $r21;
        android.view.RemoteAnimationAdapter $r22;

        r0 := @this: android.app.ActivityOptions;

        r1 := @parameter0: android.app.ActivityOptions;

        r10 = r1.<android.app.ActivityOptions: java.lang.String mPackageName>;

        if r10 == null goto label01;

        r0.<android.app.ActivityOptions: java.lang.String mPackageName> = r10;

     label01:
        $r2 = r1.<android.app.ActivityOptions: android.app.PendingIntent mUsageTimeReport>;

        r0.<android.app.ActivityOptions: android.app.PendingIntent mUsageTimeReport> = $r2;

        r0.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver> = null;

        r0.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames> = null;

        r0.<android.app.ActivityOptions: boolean mIsReturning> = 0;

        r0.<android.app.ActivityOptions: android.content.Intent mResultData> = null;

        r0.<android.app.ActivityOptions: int mResultCode> = 0;

        r0.<android.app.ActivityOptions: int mExitCoordinatorIndex> = 0;

        $i0 = r1.<android.app.ActivityOptions: int mAnimationType>;

        r0.<android.app.ActivityOptions: int mAnimationType> = $i0;

        $i1 = r1.<android.app.ActivityOptions: int mAnimationType>;

        tableswitch($i1)
        {
            case 1: goto label15;
            case 2: goto label10;
            case 3: goto label05;
            case 4: goto label05;
            case 5: goto label04;
            case 6: goto label02;
            case 7: goto label02;
            case 8: goto label05;
            case 9: goto label05;
            case 10: goto label03;
            default: goto label02;
        };

     label02:
        goto label20;

     label03:
        $i2 = r1.<android.app.ActivityOptions: int mCustomInPlaceResId>;

        r0.<android.app.ActivityOptions: int mCustomInPlaceResId> = $i2;

        goto label20;

     label04:
        $r3 = r1.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver>;

        r0.<android.app.ActivityOptions: android.os.ResultReceiver mTransitionReceiver> = $r3;

        $r4 = r1.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames>;

        r0.<android.app.ActivityOptions: java.util.ArrayList mSharedElementNames> = $r4;

        $z0 = r1.<android.app.ActivityOptions: boolean mIsReturning>;

        r0.<android.app.ActivityOptions: boolean mIsReturning> = $z0;

        r0.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail> = null;

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener> = null;

        $r5 = r1.<android.app.ActivityOptions: android.content.Intent mResultData>;

        r0.<android.app.ActivityOptions: android.content.Intent mResultData> = $r5;

        $i3 = r1.<android.app.ActivityOptions: int mResultCode>;

        r0.<android.app.ActivityOptions: int mResultCode> = $i3;

        $i4 = r1.<android.app.ActivityOptions: int mExitCoordinatorIndex>;

        r0.<android.app.ActivityOptions: int mExitCoordinatorIndex> = $i4;

        goto label20;

     label05:
        $r6 = r1.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail>;

        r0.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail> = $r6;

        $i5 = r1.<android.app.ActivityOptions: int mStartX>;

        r0.<android.app.ActivityOptions: int mStartX> = $i5;

        $i6 = r1.<android.app.ActivityOptions: int mStartY>;

        r0.<android.app.ActivityOptions: int mStartY> = $i6;

        $i7 = r1.<android.app.ActivityOptions: int mWidth>;

        r0.<android.app.ActivityOptions: int mWidth> = $i7;

        $i8 = r1.<android.app.ActivityOptions: int mHeight>;

        r0.<android.app.ActivityOptions: int mHeight> = $i8;

        r11 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        if r11 == null goto label09;

     label06:
        interfaceinvoke r11.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

     label09:
        $r13 = r1.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener> = $r13;

        goto label20;

     label10:
        $i9 = r1.<android.app.ActivityOptions: int mStartX>;

        r0.<android.app.ActivityOptions: int mStartX> = $i9;

        $i10 = r1.<android.app.ActivityOptions: int mStartY>;

        r0.<android.app.ActivityOptions: int mStartY> = $i10;

        $i11 = r1.<android.app.ActivityOptions: int mWidth>;

        r0.<android.app.ActivityOptions: int mWidth> = $i11;

        $i12 = r1.<android.app.ActivityOptions: int mHeight>;

        r0.<android.app.ActivityOptions: int mHeight> = $i12;

        r14 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        if r14 == null goto label14;

     label11:
        interfaceinvoke r14.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

     label14:
        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener> = null;

        goto label20;

     label15:
        $i13 = r1.<android.app.ActivityOptions: int mCustomEnterResId>;

        r0.<android.app.ActivityOptions: int mCustomEnterResId> = $i13;

        $i14 = r1.<android.app.ActivityOptions: int mCustomExitResId>;

        r0.<android.app.ActivityOptions: int mCustomExitResId> = $i14;

        r0.<android.app.ActivityOptions: android.graphics.Bitmap mThumbnail> = null;

        r16 = r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        if r16 == null goto label19;

     label16:
        interfaceinvoke r16.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label17:
        goto label19;

     label18:
        $r8 := @caughtexception;

     label19:
        $r18 = r1.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener>;

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationStartedListener> = $r18;

     label20:
        $z1 = r1.<android.app.ActivityOptions: boolean mLockTaskMode>;

        r0.<android.app.ActivityOptions: boolean mLockTaskMode> = $z1;

        $r19 = r1.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] mAnimSpecs>;

        r0.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] mAnimSpecs> = $r19;

        $r20 = r1.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationFinishedListener>;

        r0.<android.app.ActivityOptions: android.os.IRemoteCallback mAnimationFinishedListener> = $r20;

        $r21 = r1.<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture mSpecsFuture>;

        r0.<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture mSpecsFuture> = $r21;

        $r22 = r1.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter mRemoteAnimationAdapter>;

        r0.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter mRemoteAnimationAdapter> = $r22;

        return;

        catch android.os.RemoteException from label06 to label07 with label08;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public static void <clinit>()
    {
        <android.app.ActivityOptions: java.lang.String TAG> = "ActivityOptions";

        <android.app.ActivityOptions: java.lang.String KEY_USAGE_TIME_REPORT> = "android:activity.usageTimeReport";

        <android.app.ActivityOptions: java.lang.String KEY_TRANSITION_SHARED_ELEMENTS> = "android:activity.sharedElementNames";

        <android.app.ActivityOptions: java.lang.String KEY_TRANSITION_IS_RETURNING> = "android:activity.transitionIsReturning";

        <android.app.ActivityOptions: java.lang.String KEY_TRANSITION_COMPLETE_LISTENER> = "android:activity.transitionCompleteListener";

        <android.app.ActivityOptions: java.lang.String KEY_TASK_OVERLAY_CAN_RESUME> = "android.activity.taskOverlayCanResume";

        <android.app.ActivityOptions: java.lang.String KEY_TASK_OVERLAY> = "android.activity.taskOverlay";

        <android.app.ActivityOptions: java.lang.String KEY_TASK_ALWAYS_ON_TOP> = "android.activity.alwaysOnTop";

        <android.app.ActivityOptions: java.lang.String KEY_SPLIT_SCREEN_CREATE_MODE> = "android:activity.splitScreenCreateMode";

        <android.app.ActivityOptions: java.lang.String KEY_SPECS_FUTURE> = "android:activity.specsFuture";

        <android.app.ActivityOptions: java.lang.String KEY_ROTATION_ANIMATION_HINT> = "android:activity.rotationAnimationHint";

        <android.app.ActivityOptions: java.lang.String KEY_RESULT_DATA> = "android:activity.resultData";

        <android.app.ActivityOptions: java.lang.String KEY_RESULT_CODE> = "android:activity.resultCode";

        <android.app.ActivityOptions: java.lang.String KEY_REMOTE_ANIMATION_ADAPTER> = "android:activity.remoteAnimationAdapter";

        <android.app.ActivityOptions: java.lang.String KEY_PENDING_INTENT_LAUNCH_FLAGS> = "android.activity.pendingIntentLaunchFlags";

        <android.app.ActivityOptions: java.lang.String KEY_PACKAGE_NAME> = "android:activity.packageName";

        <android.app.ActivityOptions: java.lang.String KEY_LOCK_TASK_MODE> = "android:activity.lockTaskMode";

        <android.app.ActivityOptions: java.lang.String KEY_LAUNCH_WINDOWING_MODE> = "android.activity.windowingMode";

        <android.app.ActivityOptions: java.lang.String KEY_LAUNCH_TASK_ID> = "android.activity.launchTaskId";

        <android.app.ActivityOptions: java.lang.String KEY_LAUNCH_TASK_DISPLAY_AREA_TOKEN> = "android.activity.launchTaskDisplayAreaToken";

        <android.app.ActivityOptions: java.lang.String KEY_LAUNCH_DISPLAY_ID> = "android.activity.launchDisplayId";

        <android.app.ActivityOptions: java.lang.String KEY_LAUNCH_BOUNDS> = "android:activity.launchBounds";

        <android.app.ActivityOptions: java.lang.String KEY_LAUNCH_ACTIVITY_TYPE> = "android.activity.activityType";

        <android.app.ActivityOptions: java.lang.String KEY_INSTANT_APP_VERIFICATION_BUNDLE> = "android:instantapps.installerbundle";

        <android.app.ActivityOptions: java.lang.String KEY_FREEZE_RECENT_TASKS_REORDERING> = "android.activity.freezeRecentTasksReordering";

        <android.app.ActivityOptions: java.lang.String KEY_EXIT_COORDINATOR_INDEX> = "android:activity.exitCoordinatorIndex";

        <android.app.ActivityOptions: java.lang.String KEY_DISALLOW_ENTER_PICTURE_IN_PICTURE_WHILE_LAUNCHING> = "android:activity.disallowEnterPictureInPictureWhileLaunching";

        <android.app.ActivityOptions: java.lang.String KEY_CALLER_DISPLAY_ID> = "android.activity.callerDisplayId";

        <android.app.ActivityOptions: java.lang.String KEY_AVOID_MOVE_TO_FRONT> = "android.activity.avoidMoveToFront";

        <android.app.ActivityOptions: java.lang.String KEY_APPLY_ACTIVITY_FLAGS_FOR_BUBBLES> = "android:activity.applyActivityFlagsForBubbles";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_WIDTH> = "android:activity.animWidth";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_TYPE> = "android:activity.animType";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_THUMBNAIL> = "android:activity.animThumbnail";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_START_Y> = "android:activity.animStartY";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_START_X> = "android:activity.animStartX";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_START_LISTENER> = "android:activity.animStartListener";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_SPECS> = "android:activity.animSpecs";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_IN_PLACE_RES_ID> = "android:activity.animInPlaceRes";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_HEIGHT> = "android:activity.animHeight";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_EXIT_RES_ID> = "android:activity.animExitRes";

        <android.app.ActivityOptions: java.lang.String KEY_ANIM_ENTER_RES_ID> = "android:activity.animEnterRes";

        <android.app.ActivityOptions: java.lang.String KEY_ANIMATION_FINISHED_LISTENER> = "android:activity.animationFinishedListener";

        <android.app.ActivityOptions: java.lang.String EXTRA_USAGE_TIME_REPORT_PACKAGES> = "android.usage_time_packages";

        <android.app.ActivityOptions: java.lang.String EXTRA_USAGE_TIME_REPORT> = "android.activity.usage_time";

        <android.app.ActivityOptions: int ANIM_UNDEFINED> = -1;

        <android.app.ActivityOptions: int ANIM_THUMBNAIL_SCALE_UP> = 3;

        <android.app.ActivityOptions: int ANIM_THUMBNAIL_SCALE_DOWN> = 4;

        <android.app.ActivityOptions: int ANIM_THUMBNAIL_ASPECT_SCALE_UP> = 8;

        <android.app.ActivityOptions: int ANIM_THUMBNAIL_ASPECT_SCALE_DOWN> = 9;

        <android.app.ActivityOptions: int ANIM_SCENE_TRANSITION> = 5;

        <android.app.ActivityOptions: int ANIM_SCALE_UP> = 2;

        <android.app.ActivityOptions: int ANIM_REMOTE_ANIMATION> = 13;

        <android.app.ActivityOptions: int ANIM_OPEN_CROSS_PROFILE_APPS> = 12;

        <android.app.ActivityOptions: int ANIM_NONE> = 0;

        <android.app.ActivityOptions: int ANIM_LAUNCH_TASK_BEHIND> = 7;

        <android.app.ActivityOptions: int ANIM_DEFAULT> = 6;

        <android.app.ActivityOptions: int ANIM_CUSTOM_IN_PLACE> = 10;

        <android.app.ActivityOptions: int ANIM_CUSTOM> = 1;

        <android.app.ActivityOptions: int ANIM_CLIP_REVEAL> = 11;

        return;
    }
}
