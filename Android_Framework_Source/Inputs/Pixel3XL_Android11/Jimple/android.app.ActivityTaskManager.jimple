public class android.app.ActivityTaskManager extends java.lang.Object
{
    public static final java.lang.String EXTRA_IGNORE_TARGET_SECURITY;
    public static final java.lang.String EXTRA_OPTIONS;
    public static final java.lang.String EXTRA_PERMISSION_TOKEN;
    private static final android.util.Singleton IActivityTaskManagerSingleton;
    public static final int INVALID_STACK_ID;
    public static final int INVALID_TASK_ID;
    public static final int RESIZE_MODE_FORCED;
    public static final int RESIZE_MODE_PRESERVE_WINDOW;
    public static final int RESIZE_MODE_SYSTEM;
    public static final int RESIZE_MODE_SYSTEM_SCREEN_ROTATION;
    public static final int RESIZE_MODE_USER;
    public static final int RESIZE_MODE_USER_FORCED;
    public static final int SPLIT_SCREEN_CREATE_MODE_BOTTOM_OR_RIGHT;
    public static final int SPLIT_SCREEN_CREATE_MODE_TOP_OR_LEFT;
    private static int sMaxRecentTasks;

    static void <clinit>()
    {
        android.app.ActivityTaskManager$1 $r0;

        <android.app.ActivityTaskManager: int SPLIT_SCREEN_CREATE_MODE_TOP_OR_LEFT> = 0;

        <android.app.ActivityTaskManager: int SPLIT_SCREEN_CREATE_MODE_BOTTOM_OR_RIGHT> = 1;

        <android.app.ActivityTaskManager: int RESIZE_MODE_USER_FORCED> = 3;

        <android.app.ActivityTaskManager: int RESIZE_MODE_USER> = 1;

        <android.app.ActivityTaskManager: int RESIZE_MODE_SYSTEM_SCREEN_ROTATION> = 1;

        <android.app.ActivityTaskManager: int RESIZE_MODE_SYSTEM> = 0;

        <android.app.ActivityTaskManager: int RESIZE_MODE_PRESERVE_WINDOW> = 1;

        <android.app.ActivityTaskManager: int RESIZE_MODE_FORCED> = 2;

        <android.app.ActivityTaskManager: int INVALID_TASK_ID> = -1;

        <android.app.ActivityTaskManager: int INVALID_STACK_ID> = -1;

        <android.app.ActivityTaskManager: java.lang.String EXTRA_PERMISSION_TOKEN> = "android.app.extra.PERMISSION_TOKEN";

        <android.app.ActivityTaskManager: java.lang.String EXTRA_OPTIONS> = "android.app.extra.OPTIONS";

        <android.app.ActivityTaskManager: java.lang.String EXTRA_IGNORE_TARGET_SECURITY> = "android.app.extra.EXTRA_IGNORE_TARGET_SECURITY";

        <android.app.ActivityTaskManager: int sMaxRecentTasks> = -1;

        $r0 = new android.app.ActivityTaskManager$1;

        specialinvoke $r0.<android.app.ActivityTaskManager$1: void <init>()>();

        <android.app.ActivityTaskManager: android.util.Singleton IActivityTaskManagerSingleton> = $r0;

        return;
    }

    void <init>(android.content.Context, android.os.Handler)
    {
        android.app.ActivityTaskManager r0;
        android.content.Context r1;
        android.os.Handler r2;

        r0 := @this: android.app.ActivityTaskManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean currentUiModeSupportsErrorDialogs(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        android.content.res.Configuration $r2;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z0 = staticinvoke <android.app.ActivityTaskManager: boolean currentUiModeSupportsErrorDialogs(android.content.res.Configuration)>($r2);

        return $z0;
    }

    public static boolean currentUiModeSupportsErrorDialogs(android.content.res.Configuration)
    {
        android.content.res.Configuration r0;
        int i0, $i1;
        boolean $z0, z1;

        r0 := @parameter0: android.content.res.Configuration;

        $i1 = r0.<android.content.res.Configuration: int uiMode>;

        i0 = $i1 & 15;

        if i0 == 3 goto label2;

        if i0 != 6 goto label1;

        $z0 = <android.os.Build: boolean IS_USER>;

        if $z0 != 0 goto label2;

     label1:
        if i0 == 4 goto label2;

        if i0 == 7 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    public static int getDefaultAppRecentsLimitStatic()
    {
        int $i0, $i1;

        $i0 = staticinvoke <android.app.ActivityTaskManager: int getMaxRecentTasksStatic()>();

        $i1 = $i0 / 6;

        return $i1;
    }

    public static int getMaxAppRecentsLimitStatic()
    {
        int $i0, $i1;

        $i0 = staticinvoke <android.app.ActivityTaskManager: int getMaxRecentTasksStatic()>();

        $i1 = $i0 / 2;

        return $i1;
    }

    public static int getMaxRecentTasksStatic()
    {
        boolean $z0;
        int i0;
        byte b1;

        i0 = <android.app.ActivityTaskManager: int sMaxRecentTasks>;

        if i0 >= 0 goto label3;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label1;

        b1 = 36;

        goto label2;

     label1:
        b1 = 48;

     label2:
        <android.app.ActivityTaskManager: int sMaxRecentTasks> = b1;

        return b1;

     label3:
        return i0;
    }

    public static android.app.IActivityTaskManager getService()
    {
        android.util.Singleton $r0;
        java.lang.Object $r1;
        android.app.IActivityTaskManager $r2;

        $r0 = <android.app.ActivityTaskManager: android.util.Singleton IActivityTaskManagerSingleton>;

        $r1 = virtualinvoke $r0.<android.util.Singleton: java.lang.Object get()>();

        $r2 = (android.app.IActivityTaskManager) $r1;

        return $r2;
    }

    public static boolean supportsMultiWindow(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager $r1;
        boolean $z0, $z1, z2, z3;
        android.content.res.Resources $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z2 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label1;

        if z2 == 0 goto label2;

     label1:
        $r2 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $z1 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891551);

        if $z1 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    public static boolean supportsSplitScreenMultiWindow(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0, $z1, z2;
        android.content.res.Resources $r1;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.app.ActivityTaskManager: boolean supportsMultiWindow(android.content.Context)>(r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $z1 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17891553);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public void clearLaunchParamsForPackages(java.util.List)
    {
        android.app.ActivityTaskManager r0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.util.List r4;

        r0 := @this: android.app.ActivityTaskManager;

        r4 := @parameter0: java.util.List;

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void clearLaunchParamsForPackages(java.util.List)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String listAllStacks()
    {
        android.app.ActivityTaskManager r0;
        android.app.IActivityTaskManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.app.ActivityManager$StackInfo $r5;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.util.List r10;
        java.util.Iterator r12;

        r0 := @this: android.app.ActivityTaskManager;

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        r10 = interfaceinvoke $r1.<android.app.IActivityTaskManager: java.util.List getAllStackInfos()>();

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        if r10 == null goto label4;

        r12 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.app.ActivityManager$StackInfo) $r4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label3;

     label4:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label5:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public void moveTaskToStack(int, int, boolean)
    {
        android.app.ActivityTaskManager r0;
        int i0, i1;
        boolean z0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityTaskManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: void moveTaskToStack(int,int,boolean)>(i0, i1, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean moveTopActivityToPinnedStack(int, android.graphics.Rect)
    {
        android.app.ActivityTaskManager r0;
        int i0;
        boolean z0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.graphics.Rect r4;

        r0 := @this: android.app.ActivityTaskManager;

        i0 := @parameter0: int;

        r4 := @parameter1: android.graphics.Rect;

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        z0 = interfaceinvoke $r1.<android.app.IActivityTaskManager: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>(i0, r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeAllVisibleRecentTasks()
    {
        android.app.ActivityTaskManager r0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityTaskManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: void removeAllVisibleRecentTasks()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeStacksInWindowingModes(int[]) throws java.lang.SecurityException
    {
        android.app.ActivityTaskManager r0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;

        r0 := @this: android.app.ActivityTaskManager;

        r4 := @parameter0: int[];

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void removeStacksInWindowingModes(int[])>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeStacksWithActivityTypes(int[]) throws java.lang.SecurityException
    {
        android.app.ActivityTaskManager r0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;

        r0 := @this: android.app.ActivityTaskManager;

        r4 := @parameter0: int[];

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void removeStacksWithActivityTypes(int[])>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestPictureInPictureMode(android.os.IBinder)
    {
        android.app.ActivityTaskManager r0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.app.ActivityTaskManager;

        r4 := @parameter0: android.os.IBinder;

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: void requestPictureInPictureMode(android.os.IBinder)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resizeDockedStack(android.graphics.Rect, android.graphics.Rect)
    {
        android.app.ActivityTaskManager r0;
        android.graphics.Rect r1, r5;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityTaskManager;

        r5 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: void resizeDockedStack(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r5, r1, null, null, null);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resizeTask(int, android.graphics.Rect)
    {
        android.app.ActivityTaskManager r0;
        int i0;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.graphics.Rect r4;

        r0 := @this: android.app.ActivityTaskManager;

        i0 := @parameter0: int;

        r4 := @parameter1: android.graphics.Rect;

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityTaskManager: boolean resizeTask(int,android.graphics.Rect,int)>(i0, r4, 0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDisplayToSingleTaskInstance(int)
    {
        android.app.ActivityTaskManager r0;
        int i0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityTaskManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: void setDisplayToSingleTaskInstance(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setTaskWindowingMode(int, int, boolean) throws java.lang.SecurityException
    {
        android.app.ActivityTaskManager r0;
        int i0, i1;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        boolean z0, z1;

        r0 := @this: android.app.ActivityTaskManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        z1 = interfaceinvoke $r2.<android.app.IActivityTaskManager: boolean setTaskWindowingMode(int,int,boolean)>(i0, i1, z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setTaskWindowingModeSplitScreenPrimary(int, int, boolean, boolean, android.graphics.Rect, boolean) throws java.lang.SecurityException
    {
        android.app.ActivityTaskManager r0;
        int i0, i1;
        boolean z0, z1, z2, z3;
        android.app.IActivityTaskManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.graphics.Rect r4;

        r0 := @this: android.app.ActivityTaskManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z2 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        r4 := @parameter4: android.graphics.Rect;

        z1 := @parameter5: boolean;

     label1:
        $r1 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        z3 = interfaceinvoke $r1.<android.app.IActivityTaskManager: boolean setTaskWindowingModeSplitScreenPrimary(int,boolean)>(i0, z2);

     label2:
        return z3;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startSystemLockTaskMode(int)
    {
        android.app.ActivityTaskManager r0;
        int i0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityTaskManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: void startSystemLockTaskMode(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopSystemLockTaskMode()
    {
        android.app.ActivityTaskManager r0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ActivityTaskManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: void stopSystemLockTaskMode()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
