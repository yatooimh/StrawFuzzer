class android.app.ActivityThread$ApplicationThread extends android.app.IApplicationThread$Stub
{
    private static final java.lang.String DB_INFO_FORMAT;
    final android.app.ActivityThread this$0;

    private void <init>(android.app.ActivityThread)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.app.ActivityThread;

        r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0> = r1;

        specialinvoke r0.<android.app.IApplicationThread$Stub: void <init>()>();

        return;
    }

    void <init>(android.app.ActivityThread, android.app.ActivityThread$1)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread r1;
        android.app.ActivityThread$1 r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.app.ActivityThread;

        r2 := @parameter1: android.app.ActivityThread$1;

        specialinvoke r0.<android.app.ActivityThread$ApplicationThread: void <init>(android.app.ActivityThread)>(r1);

        return;
    }

    static void access$500(android.app.ActivityThread$ApplicationThread, android.os.ParcelFileDescriptor, java.lang.String[], boolean)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.String[] r2;
        boolean z0;

        r0 := @parameter0: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        r2 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.app.ActivityThread$ApplicationThread: void dumpDatabaseInfo(android.os.ParcelFileDescriptor,java.lang.String[],boolean)>(r1, r2, z0);

        return;
    }

    private void dumpDatabaseInfo(android.os.ParcelFileDescriptor, java.lang.String[], boolean)
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.lang.String[] r1;
        boolean z0;
        com.android.internal.util.FastPrintWriter $r2;
        java.io.FileOutputStream $r3;
        java.io.FileDescriptor $r4;
        android.util.PrintWriterPrinter $r5;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r6 := @parameter0: android.os.ParcelFileDescriptor;

        r1 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        $r2 = new com.android.internal.util.FastPrintWriter;

        $r3 = new java.io.FileOutputStream;

        $r4 = virtualinvoke r6.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r4);

        specialinvoke $r2.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>($r3);

        $r5 = new android.util.PrintWriterPrinter;

        specialinvoke $r5.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>($r2);

        staticinvoke <android.database.sqlite.SQLiteDebug: void dump(android.util.Printer,java.lang.String[],boolean)>($r5, r1, z0);

        virtualinvoke $r2.<java.io.PrintWriter: void flush()>();

        return;
    }

    private void dumpMemInfo(android.util.proto.ProtoOutputStream, android.os.Debug$MemoryInfo, boolean, boolean, boolean, boolean)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.util.proto.ProtoOutputStream r1;
        boolean z0, z1, z2, $z3, z4, z5;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l12, l13, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l29, $l30, l32, l33, l36, l37, l38, l41;
        int i9, i10, i11, $i19, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, i34, i35, i39, i40, i42;
        android.database.sqlite.SQLiteDebug$PagerStats r2;
        java.lang.Class[] $r3;
        android.app.ActivityThread $r4, $r7, $r9, $r16;
        android.app.ActivityThread$AppBindData $r5, $r8, $r10, $r17;
        java.util.ArrayList $r6, $r12;
        android.content.pm.ApplicationInfo $r11;
        java.lang.Object $r13;
        java.lang.String $r14, $r15, r21, r24, $r25;
        android.os.Debug$MemoryInfo r18;
        java.lang.Runtime r19;
        long[] r20;
        android.database.sqlite.SQLiteDebug$DbStats r23;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        r18 := @parameter1: android.os.Debug$MemoryInfo;

        z4 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        $l14 = staticinvoke <android.os.Debug: long getNativeHeapSize()>();

        l0 = $l14 / 1024L;

        $l15 = staticinvoke <android.os.Debug: long getNativeHeapAllocatedSize()>();

        l1 = $l15 / 1024L;

        $l16 = staticinvoke <android.os.Debug: long getNativeHeapFreeSize()>();

        l2 = $l16 / 1024L;

        r19 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke r19.<java.lang.Runtime: void gc()>();

        $l17 = virtualinvoke r19.<java.lang.Runtime: long totalMemory()>();

        l3 = $l17 / 1024L;

        $l18 = virtualinvoke r19.<java.lang.Runtime: long freeMemory()>();

        l32 = $l18 / 1024L;

        z5 = 0;

        $r3 = newarray (java.lang.Class)[4];

        $r3[0] = class "Landroid/app/ContextImpl;";

        $r3[1] = class "Landroid/app/Activity;";

        $r3[2] = class "Landroid/webkit/WebView;";

        $r3[3] = class "Lcom/android/org/conscrypt/OpenSSLSocketImpl;";

        r20 = staticinvoke <dalvik.system.VMDebug: long[] countInstancesOfClasses(java.lang.Class[],boolean)>($r3, 1);

        l4 = r20[0];

        l5 = r20[1];

        l6 = r20[2];

        l33 = r20[3];

        l7 = staticinvoke <android.view.ViewDebug: long getViewInstanceCount()>();

        l8 = staticinvoke <android.view.ViewDebug: long getViewRootImplCount()>();

        i9 = staticinvoke <android.content.res.AssetManager: int getGlobalAssetCount()>();

        i10 = staticinvoke <android.content.res.AssetManager: int getGlobalAssetManagerCount()>();

        i34 = staticinvoke <android.os.Debug: int getBinderLocalObjectCount()>();

        i35 = staticinvoke <android.os.Debug: int getBinderProxyObjectCount()>();

        i11 = staticinvoke <android.os.Debug: int getBinderDeathObjectCount()>();

        l12 = staticinvoke <android.os.Parcel: long getGlobalAllocSize()>();

        l36 = staticinvoke <android.os.Parcel: long getGlobalAllocCount()>();

        r2 = staticinvoke <android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()>();

        l13 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268033L);

        $i19 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i19);

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r5 = $r4.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        if $r5 == null goto label01;

        $r16 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r17 = $r16.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        r21 = $r17.<android.app.ActivityThread$AppBindData: java.lang.String processName>;

        goto label02;

     label01:
        r21 = "unknown";

     label02:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333442L, r21);

        $l20 = l3 - l32;

        staticinvoke <android.app.ActivityThread: void dumpMemInfoTable(android.util.proto.ProtoOutputStream,android.os.Debug$MemoryInfo,boolean,boolean,long,long,long,long,long,long)>(r1, r18, z0, z1, l0, l1, l2, l3, $l20, l32);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l13);

        l37 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268034L);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464257L, l7);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464258L, l8);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464259L, l4);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464260L, l5);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464261L, i9);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464262L, i10);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464263L, i34);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464264L, i35);

        $l21 = l12 / 1024L;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529673L, $l21);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464266L, l36);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464267L, i11);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464268L, l33);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464269L, l6);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l37);

        l38 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268035L);

        $i22 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int memoryUsed>;

        $i23 = $i22 / 1024;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i23);

        $i24 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int pageCacheOverflow>;

        $i25 = $i24 / 1024;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i25);

        $i26 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int largestMemAlloc>;

        $i27 = $i26 / 1024;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464259L, $i27);

        $r6 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: java.util.ArrayList dbStats>;

        i39 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i40 = 0;

     label03:
        if i40 >= i39 goto label04;

        $r12 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: java.util.ArrayList dbStats>;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i40);

        r23 = (android.database.sqlite.SQLiteDebug$DbStats) $r13;

        l41 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895812L);

        $r14 = r23.<android.database.sqlite.SQLiteDebug$DbStats: java.lang.String dbName>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333441L, $r14);

        $l29 = r23.<android.database.sqlite.SQLiteDebug$DbStats: long pageSize>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464258L, $l29);

        $l30 = r23.<android.database.sqlite.SQLiteDebug$DbStats: long dbSize>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464259L, $l30);

        $i31 = r23.<android.database.sqlite.SQLiteDebug$DbStats: int lookaside>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464260L, $i31);

        $r15 = r23.<android.database.sqlite.SQLiteDebug$DbStats: java.lang.String cache>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333445L, $r15);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l41);

        i40 = i40 + 1;

        goto label03;

     label04:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l38);

        r24 = staticinvoke <android.content.res.AssetManager: java.lang.String getAssetAllocations()>();

        if r24 == null goto label05;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333444L, r24);

     label05:
        if z2 == 0 goto label10;

        $r7 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r8 = $r7.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        if $r8 != null goto label06;

        i42 = 0;

        goto label07;

     label06:
        $r9 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r10 = $r9.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        $r11 = $r10.<android.app.ActivityThread$AppBindData: android.content.pm.ApplicationInfo appInfo>;

        i42 = $r11.<android.content.pm.ApplicationInfo: int flags>;

     label07:
        $i28 = i42 & 2;

        if $i28 != 0 goto label08;

        $z3 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z3 == 0 goto label09;

     label08:
        z5 = 1;

     label09:
        $r25 = staticinvoke <android.os.Debug: java.lang.String getUnreachableMemory(int,boolean)>(100, z5);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333445L, $r25);

        goto label10;

     label10:
        return;
    }

    private void dumpMemInfo(java.io.PrintWriter, android.os.Debug$MemoryInfo, boolean, boolean, boolean, boolean, boolean)
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.io.PrintWriter r1;
        boolean z0, z1, z2, z3, $z5, z6, z7;
        long l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l15, l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l32, $l34, $l38, $l39, $l49, $l50;
        int i11, i12, i13, i14, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i36, $i37, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i51, i52, i53, i54, i55, i56;
        android.database.sqlite.SQLiteDebug$PagerStats r2;
        android.database.sqlite.SQLiteDebug$DbStats r3, r57;
        java.lang.Class[] $r4;
        android.app.ActivityThread $r5, $r33, $r35, $r50;
        android.app.ActivityThread$AppBindData $r6, $r34, $r36, $r51;
        java.lang.Object[] $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r27, $r29, $r38, $r41;
        java.lang.Long $r8, $r9, $r11, $r12, $r20, $r21, $r24, $r26;
        java.lang.Integer $r14, $r15, $r17, $r18, $r23, $r28, $r30, $r31;
        java.util.ArrayList $r32, $r39, $r44, $r45;
        android.content.pm.ApplicationInfo $r37;
        java.lang.Object $r40, $r46;
        byte $b33, $b35;
        java.lang.String $r42, $r43, $r47, $r48, $r49, r55, r59, r60, r61, r62, $r63;
        android.os.Debug$MemoryInfo r52;
        java.lang.Runtime r53;
        long[] r54;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: java.io.PrintWriter;

        r52 := @parameter1: android.os.Debug$MemoryInfo;

        z6 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        z3 := @parameter6: boolean;

        $l17 = staticinvoke <android.os.Debug: long getNativeHeapSize()>();

        l0 = $l17 / 1024L;

        $l18 = staticinvoke <android.os.Debug: long getNativeHeapAllocatedSize()>();

        l1 = $l18 / 1024L;

        $l19 = staticinvoke <android.os.Debug: long getNativeHeapFreeSize()>();

        l2 = $l19 / 1024L;

        r53 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke r53.<java.lang.Runtime: void gc()>();

        $l20 = virtualinvoke r53.<java.lang.Runtime: long totalMemory()>();

        l3 = $l20 / 1024L;

        $l21 = virtualinvoke r53.<java.lang.Runtime: long freeMemory()>();

        l4 = $l21 / 1024L;

        $r4 = newarray (java.lang.Class)[4];

        $r4[0] = class "Landroid/app/ContextImpl;";

        $r4[1] = class "Landroid/app/Activity;";

        $r4[2] = class "Landroid/webkit/WebView;";

        $r4[3] = class "Lcom/android/org/conscrypt/OpenSSLSocketImpl;";

        r54 = staticinvoke <dalvik.system.VMDebug: long[] countInstancesOfClasses(java.lang.Class[],boolean)>($r4, 1);

        l5 = r54[0];

        l6 = r54[1];

        l7 = r54[2];

        l8 = r54[3];

        l9 = staticinvoke <android.view.ViewDebug: long getViewInstanceCount()>();

        l10 = staticinvoke <android.view.ViewDebug: long getViewRootImplCount()>();

        i11 = staticinvoke <android.content.res.AssetManager: int getGlobalAssetCount()>();

        i12 = staticinvoke <android.content.res.AssetManager: int getGlobalAssetManagerCount()>();

        i52 = staticinvoke <android.os.Debug: int getBinderLocalObjectCount()>();

        i13 = staticinvoke <android.os.Debug: int getBinderProxyObjectCount()>();

        i14 = staticinvoke <android.os.Debug: int getBinderDeathObjectCount()>();

        l15 = staticinvoke <android.os.Parcel: long getGlobalAllocSize()>();

        l16 = staticinvoke <android.os.Parcel: long getGlobalAllocCount()>();

        r2 = staticinvoke <android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()>();

        i53 = staticinvoke <android.os.Process: int myPid()>();

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r6 = $r5.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        if $r6 == null goto label01;

        $r50 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r51 = $r50.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        r55 = $r51.<android.app.ActivityThread$AppBindData: java.lang.String processName>;

        goto label02;

     label01:
        r55 = "unknown";

     label02:
        $l22 = l3 - l4;

        staticinvoke <android.app.ActivityThread: void dumpMemInfoTable(java.io.PrintWriter,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,int,java.lang.String,long,long,long,long,long,long)>(r1, r52, z6, z0, z1, z2, i53, r55, l0, l1, l2, l3, $l22, l4);

        if z6 == 0 goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l9);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l10);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l5);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l6);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i11);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i12);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i52);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i13);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i14);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l8);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $i40 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int memoryUsed>;

        $i41 = $i40 / 1024;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i41);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $i42 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int memoryUsed>;

        $i43 = $i42 / 1024;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i43);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $i44 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int pageCacheOverflow>;

        $i45 = $i44 / 1024;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i45);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $i46 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int largestMemAlloc>;

        $i47 = $i46 / 1024;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i47);

        i54 = 0;

     label03:
        $r44 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: java.util.ArrayList dbStats>;

        $i48 = virtualinvoke $r44.<java.util.ArrayList: int size()>();

        if i54 >= $i48 goto label04;

        $r45 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: java.util.ArrayList dbStats>;

        $r46 = virtualinvoke $r45.<java.util.ArrayList: java.lang.Object get(int)>(i54);

        r57 = (android.database.sqlite.SQLiteDebug$DbStats) $r46;

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $r47 = r57.<android.database.sqlite.SQLiteDebug$DbStats: java.lang.String dbName>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r47);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $l49 = r57.<android.database.sqlite.SQLiteDebug$DbStats: long pageSize>;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l49);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $l50 = r57.<android.database.sqlite.SQLiteDebug$DbStats: long dbSize>;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l50);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $i51 = r57.<android.database.sqlite.SQLiteDebug$DbStats: int lookaside>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i51);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $r48 = r57.<android.database.sqlite.SQLiteDebug$DbStats: java.lang.String cache>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r48);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(44);

        $r49 = r57.<android.database.sqlite.SQLiteDebug$DbStats: java.lang.String cache>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r49);

        i54 = i54 + 1;

        goto label03;

     label04:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;

     label05:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" Objects");

        $r7 = newarray (java.lang.Object)[4];

        $r7[0] = "Views:";

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l9);

        $r7[1] = $r8;

        $r7[2] = "ViewRootImpl:";

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l10);

        $r7[3] = $r9;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d %21s %8d", $r7);

        $r10 = newarray (java.lang.Object)[4];

        $r10[0] = "AppContexts:";

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r10[1] = $r11;

        $r10[2] = "Activities:";

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        $r10[3] = $r12;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d %21s %8d", $r10);

        $r13 = newarray (java.lang.Object)[4];

        $r13[0] = "Assets:";

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        $r13[1] = $r14;

        $r13[2] = "AssetManagers:";

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r13[3] = $r15;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d %21s %8d", $r13);

        $r16 = newarray (java.lang.Object)[4];

        $r16[0] = "Local Binders:";

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i52);

        $r16[1] = $r17;

        $r16[2] = "Proxy Binders:";

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r16[3] = $r18;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d %21s %8d", $r16);

        $r19 = newarray (java.lang.Object)[4];

        $r19[0] = "Parcel memory:";

        $l23 = l15 / 1024L;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l23);

        $r19[1] = $r20;

        $r19[2] = "Parcel count:";

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l16);

        $r19[3] = $r21;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d %21s %8d", $r19);

        $r22 = newarray (java.lang.Object)[4];

        $r22[0] = "Death Recipients:";

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

        $r22[1] = $r23;

        $r22[2] = "OpenSSL Sockets:";

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        $r22[3] = $r24;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d %21s %8d", $r22);

        $r25 = newarray (java.lang.Object)[2];

        $r25[0] = "WebViews:";

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7);

        $r25[1] = $r26;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d", $r25);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" SQL");

        $r27 = newarray (java.lang.Object)[2];

        $r27[0] = "MEMORY_USED:";

        $i24 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int memoryUsed>;

        $i25 = $i24 / 1024;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i25);

        $r27[1] = $r28;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d", $r27);

        $r29 = newarray (java.lang.Object)[4];

        $r29[0] = "PAGECACHE_OVERFLOW:";

        $i26 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int pageCacheOverflow>;

        $i27 = $i26 / 1024;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i27);

        $r29[1] = $r30;

        $r29[2] = "MALLOC_SIZE:";

        $i28 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: int largestMemAlloc>;

        $i29 = $i28 / 1024;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i29);

        $r29[3] = $r31;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "%21s %8d %21s %8d", $r29);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        $r32 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: java.util.ArrayList dbStats>;

        i55 = virtualinvoke $r32.<java.util.ArrayList: int size()>();

        if i55 <= 0 goto label14;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" DATABASES");

        $r38 = newarray (java.lang.Object)[5];

        $r38[0] = "pgsz";

        $r38[1] = "dbsz";

        $r38[2] = "Lookaside(b)";

        $r38[3] = "cache";

        $r38[4] = "Dbname";

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "  %8s %8s %14s %14s  %s", $r38);

        i56 = 0;

     label06:
        if i56 >= i55 goto label13;

        $r39 = r2.<android.database.sqlite.SQLiteDebug$PagerStats: java.util.ArrayList dbStats>;

        $r40 = virtualinvoke $r39.<java.util.ArrayList: java.lang.Object get(int)>(i56);

        r3 = (android.database.sqlite.SQLiteDebug$DbStats) $r40;

        $l32 = r3.<android.database.sqlite.SQLiteDebug$DbStats: long pageSize>;

        $b33 = $l32 cmp 0L;

        if $b33 <= 0 goto label07;

        $l39 = r3.<android.database.sqlite.SQLiteDebug$DbStats: long pageSize>;

        r59 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l39);

        goto label08;

     label07:
        r59 = " ";

     label08:
        $l34 = r3.<android.database.sqlite.SQLiteDebug$DbStats: long dbSize>;

        $b35 = $l34 cmp 0L;

        if $b35 <= 0 goto label09;

        $l38 = r3.<android.database.sqlite.SQLiteDebug$DbStats: long dbSize>;

        r60 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l38);

        goto label10;

     label09:
        r60 = " ";

     label10:
        $i36 = r3.<android.database.sqlite.SQLiteDebug$DbStats: int lookaside>;

        if $i36 <= 0 goto label11;

        $i37 = r3.<android.database.sqlite.SQLiteDebug$DbStats: int lookaside>;

        r61 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i37);

        goto label12;

     label11:
        r61 = " ";

     label12:
        $r41 = newarray (java.lang.Object)[5];

        $r41[0] = r59;

        $r41[1] = r60;

        $r41[2] = r61;

        $r42 = r3.<android.database.sqlite.SQLiteDebug$DbStats: java.lang.String cache>;

        $r41[3] = $r42;

        $r43 = r3.<android.database.sqlite.SQLiteDebug$DbStats: java.lang.String dbName>;

        $r41[4] = $r43;

        staticinvoke <android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>(r1, "  %8s %8s %14s %14s  %s", $r41);

        i56 = i56 + 1;

        goto label06;

     label13:
        goto label14;

     label14:
        r62 = staticinvoke <android.content.res.AssetManager: java.lang.String getAssetAllocations()>();

        if r62 == null goto label15;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" Asset Allocations");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r62);

        goto label15;

     label15:
        if z3 == 0 goto label19;

        $r33 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r34 = $r33.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        if $r34 == null goto label16;

        $r35 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r36 = $r35.<android.app.ActivityThread: android.app.ActivityThread$AppBindData mBoundApplication>;

        $r37 = $r36.<android.app.ActivityThread$AppBindData: android.content.pm.ApplicationInfo appInfo>;

        $i30 = $r37.<android.content.pm.ApplicationInfo: int flags>;

        $i31 = 2 & $i30;

        if $i31 != 0 goto label17;

     label16:
        z7 = 0;

        $z5 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z5 == 0 goto label18;

     label17:
        z7 = 1;

     label18:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" Unreachable memory");

        $r63 = staticinvoke <android.os.Debug: java.lang.String getUnreachableMemory(int,boolean)>(100, z7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r63);

        goto label19;

     label19:
        return;
    }

    private java.io.File getDatabasesDir(android.content.Context)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.content.Context r1;
        java.io.File $r2, $r3;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>("a");

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        return $r3;
    }

    static void lambda$performDirectAction$2(java.lang.Object, android.os.IBinder, java.lang.String, android.os.Bundle, android.os.CancellationSignal, android.os.RemoteCallback)
    {
        java.lang.Object r0;
        android.os.IBinder r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        android.os.RemoteCallback r5;
        android.app.ActivityThread $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        r4 := @parameter4: android.os.CancellationSignal;

        r5 := @parameter5: android.os.RemoteCallback;

        $r6 = (android.app.ActivityThread) r0;

        staticinvoke <android.app.ActivityThread: void access$900(android.app.ActivityThread,android.os.IBinder,java.lang.String,android.os.Bundle,android.os.CancellationSignal,android.os.RemoteCallback)>($r6, r1, r2, r3, r4, r5);

        return;
    }

    static void lambda$requestDirectActions$1(java.lang.Object, android.os.IBinder, com.android.internal.app.IVoiceInteractor, android.os.CancellationSignal, android.os.RemoteCallback)
    {
        java.lang.Object r0;
        android.os.IBinder r1;
        com.android.internal.app.IVoiceInteractor r2;
        android.os.CancellationSignal r3;
        android.os.RemoteCallback r4;
        android.app.ActivityThread $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: com.android.internal.app.IVoiceInteractor;

        r3 := @parameter3: android.os.CancellationSignal;

        r4 := @parameter4: android.os.RemoteCallback;

        $r5 = (android.app.ActivityThread) r0;

        staticinvoke <android.app.ActivityThread: void access$1000(android.app.ActivityThread,android.os.IBinder,com.android.internal.app.IVoiceInteractor,android.os.CancellationSignal,android.os.RemoteCallback)>($r5, r1, r2, r3, r4);

        return;
    }

    static void lambda$scheduleTrimMemory$0(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0;
        android.app.ActivityThread $r1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = (android.app.ActivityThread) r0;

        staticinvoke <android.app.ActivityThread: void access$1100(android.app.ActivityThread,int)>($r1, i0);

        return;
    }

    public void attachAgent(java.lang.String)
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.lang.String r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(155, r1);

        return;
    }

    public void attachStartupAgents(java.lang.String)
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.lang.String r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(162, r1);

        return;
    }

    public final void bindApplication(java.lang.String, android.content.pm.ApplicationInfo, android.content.pm.ProviderInfoList, android.content.ComponentName, android.app.ProfilerInfo, android.os.Bundle, android.app.IInstrumentationWatcher, android.app.IUiAutomationConnection, int, boolean, boolean, boolean, boolean, android.content.res.Configuration, android.content.res.CompatibilityInfo, java.util.Map, android.os.Bundle, java.lang.String, android.content.AutofillOptions, android.content.ContentCaptureOptions, long[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.lang.String r1, r12;
        android.content.pm.ApplicationInfo r2;
        android.content.pm.ProviderInfoList r3;
        android.content.ComponentName r4;
        android.app.ProfilerInfo r5;
        android.os.Bundle r6, r11;
        android.app.IInstrumentationWatcher r7;
        android.app.IUiAutomationConnection r8;
        int i0;
        boolean z0, z1, z2, z3;
        android.content.res.Configuration r9;
        android.content.res.CompatibilityInfo r10;
        android.content.AutofillOptions r13;
        android.content.ContentCaptureOptions r14;
        long[] r15;
        android.app.ActivityThread$AppBindData $r16;
        java.util.List $r17;
        android.app.ActivityThread $r18;
        java.util.Map r19;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.ApplicationInfo;

        r3 := @parameter2: android.content.pm.ProviderInfoList;

        r4 := @parameter3: android.content.ComponentName;

        r5 := @parameter4: android.app.ProfilerInfo;

        r6 := @parameter5: android.os.Bundle;

        r7 := @parameter6: android.app.IInstrumentationWatcher;

        r8 := @parameter7: android.app.IUiAutomationConnection;

        i0 := @parameter8: int;

        z0 := @parameter9: boolean;

        z1 := @parameter10: boolean;

        z2 := @parameter11: boolean;

        z3 := @parameter12: boolean;

        r9 := @parameter13: android.content.res.Configuration;

        r10 := @parameter14: android.content.res.CompatibilityInfo;

        r19 := @parameter15: java.util.Map;

        r11 := @parameter16: android.os.Bundle;

        r12 := @parameter17: java.lang.String;

        r13 := @parameter18: android.content.AutofillOptions;

        r14 := @parameter19: android.content.ContentCaptureOptions;

        r15 := @parameter20: long[];

        if r19 == null goto label1;

        staticinvoke <android.os.ServiceManager: void initServiceCache(java.util.Map)>(r19);

     label1:
        virtualinvoke r0.<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>(r11);

        $r16 = new android.app.ActivityThread$AppBindData;

        specialinvoke $r16.<android.app.ActivityThread$AppBindData: void <init>()>();

        $r16.<android.app.ActivityThread$AppBindData: java.lang.String processName> = r1;

        $r16.<android.app.ActivityThread$AppBindData: android.content.pm.ApplicationInfo appInfo> = r2;

        $r17 = virtualinvoke r3.<android.content.pm.ProviderInfoList: java.util.List getList()>();

        $r16.<android.app.ActivityThread$AppBindData: java.util.List providers> = $r17;

        $r16.<android.app.ActivityThread$AppBindData: android.content.ComponentName instrumentationName> = r4;

        $r16.<android.app.ActivityThread$AppBindData: android.os.Bundle instrumentationArgs> = r6;

        $r16.<android.app.ActivityThread$AppBindData: android.app.IInstrumentationWatcher instrumentationWatcher> = r7;

        $r16.<android.app.ActivityThread$AppBindData: android.app.IUiAutomationConnection instrumentationUiAutomationConnection> = r8;

        $r16.<android.app.ActivityThread$AppBindData: int debugMode> = i0;

        $r16.<android.app.ActivityThread$AppBindData: boolean enableBinderTracking> = z0;

        $r16.<android.app.ActivityThread$AppBindData: boolean trackAllocation> = z1;

        $r16.<android.app.ActivityThread$AppBindData: boolean restrictedBackupMode> = z2;

        $r16.<android.app.ActivityThread$AppBindData: boolean persistent> = z3;

        $r16.<android.app.ActivityThread$AppBindData: android.content.res.Configuration config> = r9;

        $r16.<android.app.ActivityThread$AppBindData: android.content.res.CompatibilityInfo compatInfo> = r10;

        $r16.<android.app.ActivityThread$AppBindData: android.app.ProfilerInfo initProfilerInfo> = r5;

        $r16.<android.app.ActivityThread$AppBindData: java.lang.String buildSerial> = r12;

        $r16.<android.app.ActivityThread$AppBindData: android.content.AutofillOptions autofillOptions> = r13;

        $r16.<android.app.ActivityThread$AppBindData: android.content.ContentCaptureOptions contentCaptureOptions> = r14;

        $r16.<android.app.ActivityThread$AppBindData: long[] disabledCompatChanges> = r15;

        $r18 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r18.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(110, $r16);

        return;
    }

    public void clearDnsCache()
    {
        android.app.ActivityThread$ApplicationThread r0;
        libcore.net.event.NetworkEventDispatcher $r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        staticinvoke <java.net.InetAddress: void clearDnsCache()>();

        $r1 = staticinvoke <libcore.net.event.NetworkEventDispatcher: libcore.net.event.NetworkEventDispatcher getInstance()>();

        virtualinvoke $r1.<libcore.net.event.NetworkEventDispatcher: void onNetworkConfigurationChanged()>();

        return;
    }

    public void dispatchPackageBroadcast(int, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        int i0;
        java.lang.String[] r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        staticinvoke <android.app.ActivityThread: void access$300(android.app.ActivityThread,int,java.lang.Object,int)>($r2, 133, r1, i0);

        return;
    }

    public void dumpActivity(android.os.ParcelFileDescriptor, android.os.IBinder, java.lang.String, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1, $r6;
        java.lang.String r2;
        java.lang.String[] r3;
        android.app.ActivityThread$DumpComponentInfo $r5;
        android.app.ActivityThread $r7;
        java.lang.Throwable $r8, $r9;
        android.os.IBinder r10;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r10 := @parameter1: android.os.IBinder;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        $r5 = new android.app.ActivityThread$DumpComponentInfo;

        specialinvoke $r5.<android.app.ActivityThread$DumpComponentInfo: void <init>()>();

     label1:
        $r6 = virtualinvoke r1.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

        $r5.<android.app.ActivityThread$DumpComponentInfo: android.os.ParcelFileDescriptor fd> = $r6;

        $r5.<android.app.ActivityThread$DumpComponentInfo: android.os.IBinder token> = r10;

        $r5.<android.app.ActivityThread$DumpComponentInfo: java.lang.String prefix> = r2;

        $r5.<android.app.ActivityThread$DumpComponentInfo: java.lang.String[] args> = r3;

        $r7 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        staticinvoke <android.app.ActivityThread: void access$100(android.app.ActivityThread,int,java.lang.Object,int,int,boolean)>($r7, 136, $r5, 0, 0, 1);

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityThread", "dumpActivity failed", $r8);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r9;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void dumpCacheInfo(android.os.ParcelFileDescriptor, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.String[] r2;
        java.io.FileDescriptor $r3;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        staticinvoke <android.app.PropertyInvalidatedCache: void dumpCacheInfo(java.io.FileDescriptor,java.lang.String[])>($r3, r2);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;
    }

    public void dumpDbInfo(android.os.ParcelFileDescriptor, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1, r2;
        android.app.ActivityThread $r3;
        boolean $z0;
        android.app.ActivityThread$ApplicationThread$1 $r4;
        java.util.concurrent.Executor $r5;
        java.lang.Throwable $r6, $r7;
        java.io.FileDescriptor $r9;
        int $i0;
        java.lang.String $r11;
        java.lang.String[] r12;
        java.lang.StringBuilder r15;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r12 := @parameter1: java.lang.String[];

        $r3 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $z0 = $r3.<android.app.ActivityThread: boolean mSystemThread>;

        if $z0 == 0 goto label8;

     label1:
        r2 = virtualinvoke r1.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        $r5 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r4 = new android.app.ActivityThread$ApplicationThread$1;

        specialinvoke $r4.<android.app.ActivityThread$ApplicationThread$1: void <init>(android.app.ActivityThread$ApplicationThread,android.os.ParcelFileDescriptor,java.lang.String[])>(r0, r2, r12);

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        goto label9;

     label3:
        $r6 := @caughtexception;

        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not dup FD ");

        $r9 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = virtualinvoke $r9.<java.io.FileDescriptor: int getInt$()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ActivityThread", $r11);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r6;

     label8:
        specialinvoke r0.<android.app.ActivityThread$ApplicationThread: void dumpDatabaseInfo(android.os.ParcelFileDescriptor,java.lang.String[],boolean)>(r1, r12, 0);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void dumpGfxInfo(android.os.ParcelFileDescriptor, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.String[] r2;
        android.app.ActivityThread $r3;
        java.io.FileDescriptor $r4, $r6;
        android.view.WindowManagerGlobal $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: java.lang.String[];

        $r3 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r4 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        staticinvoke <android.app.ActivityThread: void access$400(android.app.ActivityThread,java.io.FileDescriptor)>($r3, $r4);

        $r5 = staticinvoke <android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>();

        $r6 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke $r5.<android.view.WindowManagerGlobal: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>($r6, r2);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;
    }

    public void dumpHeap(boolean, boolean, boolean, java.lang.String, android.os.ParcelFileDescriptor, android.os.RemoteCallback)
    {
        android.app.ActivityThread$ApplicationThread r0;
        boolean z0, z1, z2;
        android.os.ParcelFileDescriptor r1, $r5;
        android.os.RemoteCallback r2;
        android.app.ActivityThread$DumpHeapData $r4;
        android.app.ActivityThread $r6;
        java.lang.Throwable $r7, $r8;
        java.lang.String r9;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        r9 := @parameter3: java.lang.String;

        r1 := @parameter4: android.os.ParcelFileDescriptor;

        r2 := @parameter5: android.os.RemoteCallback;

        $r4 = new android.app.ActivityThread$DumpHeapData;

        specialinvoke $r4.<android.app.ActivityThread$DumpHeapData: void <init>()>();

        $r4.<android.app.ActivityThread$DumpHeapData: boolean managed> = z0;

        $r4.<android.app.ActivityThread$DumpHeapData: boolean mallocInfo> = z1;

        $r4.<android.app.ActivityThread$DumpHeapData: boolean runGc> = z2;

        $r4.<android.app.ActivityThread$DumpHeapData: java.lang.String path> = r9;

     label1:
        $r5 = virtualinvoke r1.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

        $r4.<android.app.ActivityThread$DumpHeapData: android.os.ParcelFileDescriptor fd> = $r5;

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        $r4.<android.app.ActivityThread$DumpHeapData: android.os.RemoteCallback finishCallback> = r2;

        $r6 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        staticinvoke <android.app.ActivityThread: void access$100(android.app.ActivityThread,int,java.lang.Object,int,int,boolean)>($r6, 135, $r4, 0, 0, 1);

        return;

     label3:
        $r7 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityThread", "Failed to duplicate heap dump file descriptor", $r8);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void dumpMemInfo(android.os.ParcelFileDescriptor, android.os.Debug$MemoryInfo, boolean, boolean, boolean, boolean, boolean, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1;
        boolean z0, z1, z2, z3, z4;
        com.android.internal.util.FastPrintWriter $r2;
        java.io.FileOutputStream $r3;
        java.io.FileDescriptor $r4;
        java.lang.Throwable $r5;
        android.os.Debug$MemoryInfo r6;
        java.lang.String[] r7;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r6 := @parameter1: android.os.Debug$MemoryInfo;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        z4 := @parameter6: boolean;

        r7 := @parameter7: java.lang.String[];

        $r2 = new com.android.internal.util.FastPrintWriter;

        $r3 = new java.io.FileOutputStream;

        $r4 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r4);

        specialinvoke $r2.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>($r3);

     label1:
        specialinvoke r0.<android.app.ActivityThread$ApplicationThread: void dumpMemInfo(java.io.PrintWriter,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean)>($r2, r6, z0, z1, z2, z3, z4);

     label2:
        virtualinvoke $r2.<java.io.PrintWriter: void flush()>();

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r2.<java.io.PrintWriter: void flush()>();

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dumpMemInfoProto(android.os.ParcelFileDescriptor, android.os.Debug$MemoryInfo, boolean, boolean, boolean, boolean, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1;
        boolean z0, z1, z2, z3;
        android.util.proto.ProtoOutputStream $r2;
        java.io.FileDescriptor $r3;
        java.lang.Throwable $r4;
        android.os.Debug$MemoryInfo r5;
        java.lang.String[] r6;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r5 := @parameter1: android.os.Debug$MemoryInfo;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        r6 := @parameter6: java.lang.String[];

        $r2 = new android.util.proto.ProtoOutputStream;

        $r3 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r2.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>($r3);

     label1:
        specialinvoke r0.<android.app.ActivityThread$ApplicationThread: void dumpMemInfo(android.util.proto.ProtoOutputStream,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean)>($r2, r5, z0, z1, z2, z3);

     label2:
        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void flush()>();

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void flush()>();

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dumpProvider(android.os.ParcelFileDescriptor, android.os.IBinder, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1, $r5;
        java.lang.String[] r2;
        android.app.ActivityThread$DumpComponentInfo $r4;
        android.app.ActivityThread $r6;
        java.lang.Throwable $r7, $r8;
        android.os.IBinder r9;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r9 := @parameter1: android.os.IBinder;

        r2 := @parameter2: java.lang.String[];

        $r4 = new android.app.ActivityThread$DumpComponentInfo;

        specialinvoke $r4.<android.app.ActivityThread$DumpComponentInfo: void <init>()>();

     label1:
        $r5 = virtualinvoke r1.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

        $r4.<android.app.ActivityThread$DumpComponentInfo: android.os.ParcelFileDescriptor fd> = $r5;

        $r4.<android.app.ActivityThread$DumpComponentInfo: android.os.IBinder token> = r9;

        $r4.<android.app.ActivityThread$DumpComponentInfo: java.lang.String[] args> = r2;

        $r6 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        staticinvoke <android.app.ActivityThread: void access$100(android.app.ActivityThread,int,java.lang.Object,int,int,boolean)>($r6, 141, $r4, 0, 0, 1);

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityThread", "dumpProvider failed", $r7);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void dumpService(android.os.ParcelFileDescriptor, android.os.IBinder, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1, $r5;
        java.lang.String[] r2;
        android.app.ActivityThread$DumpComponentInfo $r4;
        android.app.ActivityThread $r6;
        java.lang.Throwable $r7, $r8;
        android.os.IBinder r9;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r9 := @parameter1: android.os.IBinder;

        r2 := @parameter2: java.lang.String[];

        $r4 = new android.app.ActivityThread$DumpComponentInfo;

        specialinvoke $r4.<android.app.ActivityThread$DumpComponentInfo: void <init>()>();

     label1:
        $r5 = virtualinvoke r1.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

        $r4.<android.app.ActivityThread$DumpComponentInfo: android.os.ParcelFileDescriptor fd> = $r5;

        $r4.<android.app.ActivityThread$DumpComponentInfo: android.os.IBinder token> = r9;

        $r4.<android.app.ActivityThread$DumpComponentInfo: java.lang.String[] args> = r2;

        $r6 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        staticinvoke <android.app.ActivityThread: void access$100(android.app.ActivityThread,int,java.lang.Object,int,int,boolean)>($r6, 123, $r4, 0, 0, 1);

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityThread", "dumpService failed", $r8);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void handleTrustStorageUpdate()
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.security.NetworkSecurityPolicy $r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        $r1 = staticinvoke <android.security.NetworkSecurityPolicy: android.security.NetworkSecurityPolicy getInstance()>();

        virtualinvoke $r1.<android.security.NetworkSecurityPolicy: void handleTrustStorageUpdate()>();

        return;
    }

    public void notifyCleartextNetwork(byte[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        byte[] r1;
        boolean $z0;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: byte[];

        $z0 = staticinvoke <android.os.StrictMode: boolean vmCleartextNetworkEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.os.StrictMode: void onCleartextNetworkDetected(byte[])>(r1);

     label1:
        return;
    }

    public void performDirectAction(android.os.IBinder, java.lang.String, android.os.Bundle, android.os.RemoteCallback, android.os.RemoteCallback)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1, $r17;
        java.lang.String r2;
        android.os.Bundle r3, r19;
        android.os.RemoteCallback r4, r5;
        android.app.ActivityThread$SafeCancellationTransport r7;
        android.app.ActivityThread $r10, $r11, $r15;
        android.app.'-$$Lambda$ActivityThread$ApplicationThread$nBC_BR7B9W6ftKAxur3BC53SJYc' $r12;
        android.app.ActivityThread$H $r13;
        android.os.Message $r14;
        android.os.CancellationSignal r18;
        com.android.internal.util.function.HexConsumer r20;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.RemoteCallback;

        r5 := @parameter4: android.os.RemoteCallback;

        r18 = new android.os.CancellationSignal;

        specialinvoke r18.<android.os.CancellationSignal: void <init>()>();

        if r4 == null goto label1;

        $r15 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        r7 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread$SafeCancellationTransport access$800(android.app.ActivityThread,android.os.CancellationSignal)>($r15, r18);

        r19 = new android.os.Bundle;

        specialinvoke r19.<android.os.Bundle: void <init>()>();

        $r17 = interfaceinvoke r7.<android.os.ICancellationSignal: android.os.IBinder asBinder()>();

        virtualinvoke r19.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("key_cancellation_signal", $r17);

        virtualinvoke r4.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(r19);

     label1:
        $r10 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r13 = $r10.<android.app.ActivityThread: android.app.ActivityThread$H mH>;

        $r12 = <android.app._$$Lambda$ActivityThread$ApplicationThread$nBC_BR7B9W6ftKAxur3BC53SJYc: android.app.'-$$Lambda$ActivityThread$ApplicationThread$nBC_BR7B9W6ftKAxur3BC53SJYc' INSTANCE>;

        $r11 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        r20 = (com.android.internal.util.function.HexConsumer) $r12;

        $r14 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.HexConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r20, $r11, r1, r2, r3, r18, r5);

        virtualinvoke $r13.<android.app.ActivityThread$H: boolean sendMessage(android.os.Message)>($r14);

        return;
    }

    public void processInBackground()
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread $r1, $r3, $r4;
        android.app.ActivityThread$H $r2, $r5, $r6;
        android.os.Message $r7;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        $r1 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r2 = $r1.<android.app.ActivityThread: android.app.ActivityThread$H mH>;

        virtualinvoke $r2.<android.app.ActivityThread$H: void removeMessages(int)>(120);

        $r3 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r6 = $r3.<android.app.ActivityThread: android.app.ActivityThread$H mH>;

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r5 = $r4.<android.app.ActivityThread: android.app.ActivityThread$H mH>;

        $r7 = virtualinvoke $r5.<android.app.ActivityThread$H: android.os.Message obtainMessage(int)>(120);

        virtualinvoke $r6.<android.app.ActivityThread$H: boolean sendMessage(android.os.Message)>($r7);

        return;
    }

    public void profilerControl(boolean, android.app.ProfilerInfo, int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        boolean z0;
        android.app.ProfilerInfo r1;
        int i0, i1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.app.ProfilerInfo;

        i0 := @parameter2: int;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        i1 = (int) z0;

        staticinvoke <android.app.ActivityThread: void access$200(android.app.ActivityThread,int,java.lang.Object,int,int)>($r2, 127, r1, i1, i0);

        return;
    }

    public void requestAssistContextExtras(android.os.IBinder, android.os.IBinder, int, int, int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1, r2;
        int i0, i1, i2;
        android.app.ActivityThread$RequestAssistContextExtras $r4;
        android.app.ActivityThread $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r4 = new android.app.ActivityThread$RequestAssistContextExtras;

        specialinvoke $r4.<android.app.ActivityThread$RequestAssistContextExtras: void <init>()>();

        $r4.<android.app.ActivityThread$RequestAssistContextExtras: android.os.IBinder activityToken> = r1;

        $r4.<android.app.ActivityThread$RequestAssistContextExtras: android.os.IBinder requestToken> = r2;

        $r4.<android.app.ActivityThread$RequestAssistContextExtras: int requestType> = i0;

        $r4.<android.app.ActivityThread$RequestAssistContextExtras: int sessionId> = i1;

        $r4.<android.app.ActivityThread$RequestAssistContextExtras: int flags> = i2;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(143, $r4);

        return;
    }

    public void requestDirectActions(android.os.IBinder, com.android.internal.app.IVoiceInteractor, android.os.RemoteCallback, android.os.RemoteCallback)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1, $r16;
        com.android.internal.app.IVoiceInteractor r2;
        android.os.RemoteCallback r3, r4;
        android.app.ActivityThread$SafeCancellationTransport r6;
        android.app.ActivityThread $r9, $r10, $r14;
        android.app.'-$$Lambda$ActivityThread$ApplicationThread$uR_ee-5oPoxu4U_by7wU55jwtdU' $r11;
        android.app.ActivityThread$H $r12;
        android.os.Message $r13;
        android.os.CancellationSignal r17;
        android.os.Bundle r18;
        com.android.internal.util.function.QuintConsumer r19;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: com.android.internal.app.IVoiceInteractor;

        r3 := @parameter2: android.os.RemoteCallback;

        r4 := @parameter3: android.os.RemoteCallback;

        r17 = new android.os.CancellationSignal;

        specialinvoke r17.<android.os.CancellationSignal: void <init>()>();

        if r3 == null goto label1;

        $r14 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        r6 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread$SafeCancellationTransport access$800(android.app.ActivityThread,android.os.CancellationSignal)>($r14, r17);

        r18 = new android.os.Bundle;

        specialinvoke r18.<android.os.Bundle: void <init>()>();

        $r16 = interfaceinvoke r6.<android.os.ICancellationSignal: android.os.IBinder asBinder()>();

        virtualinvoke r18.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("key_cancellation_signal", $r16);

        virtualinvoke r3.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(r18);

     label1:
        $r9 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r12 = $r9.<android.app.ActivityThread: android.app.ActivityThread$H mH>;

        $r11 = <android.app._$$Lambda$ActivityThread$ApplicationThread$uR_ee_5oPoxu4U_by7wU55jwtdU: android.app.'-$$Lambda$ActivityThread$ApplicationThread$uR_ee-5oPoxu4U_by7wU55jwtdU' INSTANCE>;

        $r10 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        r19 = (com.android.internal.util.function.QuintConsumer) $r11;

        $r13 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.QuintConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r19, $r10, r1, r2, r17, r4);

        virtualinvoke $r12.<android.app.ActivityThread$H: boolean sendMessage(android.os.Message)>($r13);

        return;
    }

    public final void runIsolatedEntryPoint(java.lang.String, java.lang.String[])
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.lang.String r1;
        java.lang.String[] r2;
        com.android.internal.os.SomeArgs r3;
        android.app.ActivityThread $r4;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r1;

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r2;

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r4.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(158, r3);

        return;
    }

    public void scheduleApplicationInfoChanged(android.content.pm.ApplicationInfo)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.content.pm.ApplicationInfo r1;
        android.app.ActivityThread $r2, $r4;
        android.app.ActivityThread$H $r3;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r3 = $r2.<android.app.ActivityThread: android.app.ActivityThread$H mH>;

        virtualinvoke $r3.<android.app.ActivityThread$H: void removeMessages(int,java.lang.Object)>(156, r1);

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r4.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(156, r1);

        return;
    }

    public final void scheduleBindService(android.os.IBinder, android.content.Intent, boolean, int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        android.content.Intent r2;
        boolean z0;
        int i0;
        android.app.ActivityThread $r4, $r6;
        android.app.ActivityThread$BindServiceData $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.content.Intent;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r4.<android.app.ActivityThread: void updateProcessState(int,boolean)>(i0, 0);

        $r5 = new android.app.ActivityThread$BindServiceData;

        specialinvoke $r5.<android.app.ActivityThread$BindServiceData: void <init>()>();

        $r5.<android.app.ActivityThread$BindServiceData: android.os.IBinder token> = r1;

        $r5.<android.app.ActivityThread$BindServiceData: android.content.Intent intent> = r2;

        $r5.<android.app.ActivityThread$BindServiceData: boolean rebind> = z0;

        $r6 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r6.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(121, $r5);

        return;
    }

    public void scheduleCrash(java.lang.String)
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.lang.String r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(134, r1);

        return;
    }

    public final void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, int, int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.content.pm.ApplicationInfo r1;
        android.content.res.CompatibilityInfo r2;
        int i0, i1;
        android.app.ActivityThread$CreateBackupAgentData $r4;
        android.app.ActivityThread $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        r2 := @parameter1: android.content.res.CompatibilityInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = new android.app.ActivityThread$CreateBackupAgentData;

        specialinvoke $r4.<android.app.ActivityThread$CreateBackupAgentData: void <init>()>();

        $r4.<android.app.ActivityThread$CreateBackupAgentData: android.content.pm.ApplicationInfo appInfo> = r1;

        $r4.<android.app.ActivityThread$CreateBackupAgentData: android.content.res.CompatibilityInfo compatInfo> = r2;

        $r4.<android.app.ActivityThread$CreateBackupAgentData: int backupMode> = i0;

        $r4.<android.app.ActivityThread$CreateBackupAgentData: int userId> = i1;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(128, $r4);

        return;
    }

    public final void scheduleCreateService(android.os.IBinder, android.content.pm.ServiceInfo, android.content.res.CompatibilityInfo, int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        android.content.pm.ServiceInfo r2;
        android.content.res.CompatibilityInfo r3;
        int i0;
        android.app.ActivityThread $r5, $r7;
        android.app.ActivityThread$CreateServiceData $r6;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.content.pm.ServiceInfo;

        r3 := @parameter2: android.content.res.CompatibilityInfo;

        i0 := @parameter3: int;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void updateProcessState(int,boolean)>(i0, 0);

        $r6 = new android.app.ActivityThread$CreateServiceData;

        specialinvoke $r6.<android.app.ActivityThread$CreateServiceData: void <init>()>();

        $r6.<android.app.ActivityThread$CreateServiceData: android.os.IBinder token> = r1;

        $r6.<android.app.ActivityThread$CreateServiceData: android.content.pm.ServiceInfo info> = r2;

        $r6.<android.app.ActivityThread$CreateServiceData: android.content.res.CompatibilityInfo compatInfo> = r3;

        $r7 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r7.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(114, $r6);

        return;
    }

    public final void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.content.pm.ApplicationInfo r1;
        android.content.res.CompatibilityInfo r2;
        int i0;
        android.app.ActivityThread$CreateBackupAgentData $r4;
        android.app.ActivityThread $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        r2 := @parameter1: android.content.res.CompatibilityInfo;

        i0 := @parameter2: int;

        $r4 = new android.app.ActivityThread$CreateBackupAgentData;

        specialinvoke $r4.<android.app.ActivityThread$CreateBackupAgentData: void <init>()>();

        $r4.<android.app.ActivityThread$CreateBackupAgentData: android.content.pm.ApplicationInfo appInfo> = r1;

        $r4.<android.app.ActivityThread$CreateBackupAgentData: android.content.res.CompatibilityInfo compatInfo> = r2;

        $r4.<android.app.ActivityThread$CreateBackupAgentData: int userId> = i0;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(129, $r4);

        return;
    }

    public void scheduleEnterAnimationComplete(android.os.IBinder)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(149, r1);

        return;
    }

    public final void scheduleExit()
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread $r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        $r1 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r1.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(111, null);

        return;
    }

    public void scheduleInstallProvider(android.content.pm.ProviderInfo)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.content.pm.ProviderInfo r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.content.pm.ProviderInfo;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(145, r1);

        return;
    }

    public void scheduleLocalVoiceInteractionStarted(android.os.IBinder, com.android.internal.app.IVoiceInteractor) throws android.os.RemoteException
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        com.android.internal.app.IVoiceInteractor r2;
        com.android.internal.os.SomeArgs r3;
        android.app.ActivityThread $r4;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: com.android.internal.app.IVoiceInteractor;

        r3 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r1;

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r2;

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r4.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(154, r3);

        return;
    }

    public void scheduleLowMemory()
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread $r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        $r1 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r1.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(124, null);

        return;
    }

    public void scheduleOnNewActivityOptions(android.os.IBinder, android.os.Bundle)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        android.os.Bundle r2;
        android.util.Pair $r3;
        android.app.ActivityThread $r4;
        android.app.ActivityOptions $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.Bundle;

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r3 = new android.util.Pair;

        $r5 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions fromBundle(android.os.Bundle)>(r2);

        specialinvoke $r3.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, $r5);

        virtualinvoke $r4.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(146, $r3);

        return;
    }

    public final void scheduleReceiver(android.content.Intent, android.content.pm.ActivityInfo, android.content.res.CompatibilityInfo, int, java.lang.String, android.os.Bundle, boolean, int, int)
    {
        android.app.ActivityThread$ApplicationThread r0, $r8;
        android.content.pm.ActivityInfo r1;
        android.content.res.CompatibilityInfo r2;
        int i0, i1, i2;
        java.lang.String r3;
        android.os.Bundle r4;
        boolean z0;
        android.app.ActivityThread $r5, $r7, $r10;
        android.app.ActivityThread$ReceiverData $r6;
        android.os.IBinder $r9;
        android.content.Intent r11;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r11 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.content.pm.ActivityInfo;

        r2 := @parameter2: android.content.res.CompatibilityInfo;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.os.Bundle;

        z0 := @parameter6: boolean;

        i1 := @parameter7: int;

        i2 := @parameter8: int;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void updateProcessState(int,boolean)>(i2, 0);

        $r6 = new android.app.ActivityThread$ReceiverData;

        $r7 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r8 = $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread mAppThread>;

        $r9 = virtualinvoke $r8.<android.app.ActivityThread$ApplicationThread: android.os.IBinder asBinder()>();

        specialinvoke $r6.<android.app.ActivityThread$ReceiverData: void <init>(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,android.os.IBinder,int)>(r11, i0, r3, r4, z0, 0, $r9, i1);

        $r6.<android.app.ActivityThread$ReceiverData: android.content.pm.ActivityInfo info> = r1;

        $r6.<android.app.ActivityThread$ReceiverData: android.content.res.CompatibilityInfo compatInfo> = r2;

        $r10 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r10.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(113, $r6);

        return;
    }

    public void scheduleRegisteredReceiver(android.content.IIntentReceiver, android.content.Intent, int, java.lang.String, android.os.Bundle, boolean, boolean, int, int) throws android.os.RemoteException
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.content.IIntentReceiver r1;
        android.content.Intent r2;
        int i0, i1, i2;
        java.lang.String r3;
        android.os.Bundle r4;
        boolean z0, z1;
        android.app.ActivityThread $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.content.IIntentReceiver;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.os.Bundle;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        i1 := @parameter7: int;

        i2 := @parameter8: int;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void updateProcessState(int,boolean)>(i2, 0);

        interfaceinvoke r1.<android.content.IIntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)>(r2, i0, r3, r4, z0, z1, i1);

        return;
    }

    public final void scheduleServiceArgs(android.os.IBinder, android.content.pm.ParceledListSlice)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        java.util.List r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        android.app.ActivityThread$ServiceArgsData $r5;
        boolean $z0;
        android.content.Intent $r6;
        android.app.ActivityThread $r7;
        android.content.pm.ParceledListSlice r8;
        android.app.ServiceStartArgs r9;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r8 := @parameter1: android.content.pm.ParceledListSlice;

        r2 = virtualinvoke r8.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i3 >= $i0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        r9 = (android.app.ServiceStartArgs) $r4;

        $r5 = new android.app.ActivityThread$ServiceArgsData;

        specialinvoke $r5.<android.app.ActivityThread$ServiceArgsData: void <init>()>();

        $r5.<android.app.ActivityThread$ServiceArgsData: android.os.IBinder token> = r1;

        $z0 = r9.<android.app.ServiceStartArgs: boolean taskRemoved>;

        $r5.<android.app.ActivityThread$ServiceArgsData: boolean taskRemoved> = $z0;

        $i1 = r9.<android.app.ServiceStartArgs: int startId>;

        $r5.<android.app.ActivityThread$ServiceArgsData: int startId> = $i1;

        $i2 = r9.<android.app.ServiceStartArgs: int flags>;

        $r5.<android.app.ActivityThread$ServiceArgsData: int flags> = $i2;

        $r6 = r9.<android.app.ServiceStartArgs: android.content.Intent args>;

        $r5.<android.app.ActivityThread$ServiceArgsData: android.content.Intent args> = $r6;

        $r7 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r7.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(115, $r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public final void scheduleStopService(android.os.IBinder)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(116, r1);

        return;
    }

    public final void scheduleSuicide()
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread $r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        $r1 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r1.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(130, null);

        return;
    }

    public void scheduleTransaction(android.app.servertransaction.ClientTransaction) throws android.os.RemoteException
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.servertransaction.ClientTransaction r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.app.servertransaction.ClientTransaction;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>(r1);

        return;
    }

    public void scheduleTranslucentConversionComplete(android.os.IBinder, boolean)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        boolean z0;
        android.app.ActivityThread $r2;
        int i0;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        i0 = (int) z0;

        staticinvoke <android.app.ActivityThread: void access$300(android.app.ActivityThread,int,java.lang.Object,int)>($r2, 144, r1, i0);

        return;
    }

    public void scheduleTrimMemory(int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        int i0;
        com.android.internal.util.function.pooled.PooledRunnable r1, $r6;
        android.view.Choreographer r2;
        android.app.'-$$Lambda$ActivityThread$ApplicationThread$tUGFX7CUhzB4Pg5wFd5yeqOnu38' $r3;
        android.app.ActivityThread $r4, $r7;
        java.lang.Integer $r5;
        android.app.ActivityThread$H $r8;
        java.util.function.BiConsumer r9;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        i0 := @parameter0: int;

        $r3 = <android.app._$$Lambda$ActivityThread$ApplicationThread$tUGFX7CUhzB4Pg5wFd5yeqOnu38: android.app.'-$$Lambda$ActivityThread$ApplicationThread$tUGFX7CUhzB4Pg5wFd5yeqOnu38' INSTANCE>;

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r9 = (java.util.function.BiConsumer) $r3;

        $r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r9, $r4, $r5);

        r1 = interfaceinvoke $r6.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        r2 = staticinvoke <android.view.Choreographer: android.view.Choreographer getMainThreadInstance()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(4, r1, null);

        goto label2;

     label1:
        $r7 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r8 = $r7.<android.app.ActivityThread: android.app.ActivityThread$H mH>;

        virtualinvoke $r8.<android.app.ActivityThread$H: boolean post(java.lang.Runnable)>(r1);

     label2:
        return;
    }

    public final void scheduleUnbindService(android.os.IBinder, android.content.Intent)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        android.content.Intent r2;
        android.app.ActivityThread$BindServiceData $r4;
        android.app.ActivityThread $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.content.Intent;

        $r4 = new android.app.ActivityThread$BindServiceData;

        specialinvoke $r4.<android.app.ActivityThread$BindServiceData: void <init>()>();

        $r4.<android.app.ActivityThread$BindServiceData: android.os.IBinder token> = r1;

        $r4.<android.app.ActivityThread$BindServiceData: android.content.Intent intent> = r2;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(122, $r4);

        return;
    }

    public void setCoreSettings(android.os.Bundle)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.Bundle r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(138, r1);

        return;
    }

    public void setNetworkBlockSeq(long)
    {
        android.app.ActivityThread$ApplicationThread r0;
        long l0;
        java.lang.Object r1;
        android.app.ActivityThread $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        l0 := @parameter0: long;

        $r3 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        r1 = staticinvoke <android.app.ActivityThread: java.lang.Object access$600(android.app.ActivityThread)>($r3);

        entermonitor r1;

     label1:
        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        staticinvoke <android.app.ActivityThread: long access$702(android.app.ActivityThread,long)>($r4, l0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setProcessState(int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        int i0;
        android.app.ActivityThread $r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        i0 := @parameter0: int;

        $r1 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r1.<android.app.ActivityThread: void updateProcessState(int,boolean)>(i0, 1);

        return;
    }

    public void setSchedulingGroup(int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        int i0, $i1;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        i0 := @parameter0: int;

     label1:
        $i1 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void setProcessGroup(int,int)>($i1, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed setting process group to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityThread", $r7, $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void startBinderTracking()
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread $r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        $r1 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r1.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(150, null);

        return;
    }

    public void stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.ParcelFileDescriptor r1, $r3;
        android.app.ActivityThread $r2;
        java.lang.Throwable $r4, $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

     label1:
        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r3 = virtualinvoke r1.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(151, $r3);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r4;

     label4:
        $r5 := @caughtexception;

     label5:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void unstableProviderDied(android.os.IBinder)
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.os.IBinder r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r2.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(142, r1);

        return;
    }

    public void updateHttpProxy()
    {
        android.app.ActivityThread$ApplicationThread r0;
        android.app.ActivityThread $r1, $r3, $r4;
        android.app.Application $r2;
        android.content.Context r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        $r1 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.app.Application getApplication()>();

        if $r2 == null goto label1;

        $r4 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.Application getApplication()>();

        goto label2;

     label1:
        $r3 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        r5 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ContextImpl getSystemContext()>();

     label2:
        staticinvoke <android.app.ActivityThread: void updateHttpProxy(android.content.Context)>(r5);

        return;
    }

    public void updatePackageCompatibilityInfo(java.lang.String, android.content.res.CompatibilityInfo)
    {
        android.app.ActivityThread$ApplicationThread r0;
        java.lang.String r1;
        android.content.res.CompatibilityInfo r2;
        android.app.ActivityThread$UpdateCompatibilityData $r4;
        android.app.ActivityThread $r5;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.res.CompatibilityInfo;

        $r4 = new android.app.ActivityThread$UpdateCompatibilityData;

        specialinvoke $r4.<android.app.ActivityThread$UpdateCompatibilityData: void <init>()>();

        $r4.<android.app.ActivityThread$UpdateCompatibilityData: java.lang.String pkg> = r1;

        $r4.<android.app.ActivityThread$UpdateCompatibilityData: android.content.res.CompatibilityInfo info> = r2;

        $r5 = r0.<android.app.ActivityThread$ApplicationThread: android.app.ActivityThread this$0>;

        virtualinvoke $r5.<android.app.ActivityThread: void sendMessage(int,java.lang.Object)>(139, $r4);

        return;
    }

    public final void updateTimePrefs(int)
    {
        android.app.ActivityThread$ApplicationThread r0;
        int i0;
        java.lang.Boolean r1;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label3;

     label1:
        if i0 != 1 goto label2;

        r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label3;

     label2:
        r1 = null;

     label3:
        staticinvoke <java.text.DateFormat: void set24HourTimePref(java.lang.Boolean)>(r1);

        return;
    }

    public void updateTimeZone()
    {
        android.app.ActivityThread$ApplicationThread r0;

        r0 := @this: android.app.ActivityThread$ApplicationThread;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>(null);

        return;
    }

    public static void <clinit>()
    {
        <android.app.ActivityThread$ApplicationThread: java.lang.String DB_INFO_FORMAT> = "  %8s %8s %14s %14s  %s";

        return;
    }
}
