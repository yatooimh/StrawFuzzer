public class android.app.ActivityView extends android.view.ViewGroup implements android.window.TaskEmbedder$Host
{
    private static final java.lang.String TAG;
    private final dalvik.system.CloseGuard mGuard;
    private boolean mOpened;
    private final android.graphics.Matrix mScreenSurfaceMatrix;
    private final android.app.ActivityView$SurfaceCallback mSurfaceCallback;
    private final android.view.SurfaceView mSurfaceView;
    private final android.graphics.Region mTapExcludeRegion;
    private android.window.TaskEmbedder mTaskEmbedder;
    private final int[] mTmpArray;
    private final android.graphics.Rect mTmpRect;
    private final android.view.SurfaceControl$Transaction mTmpTransaction;
    private final android.graphics.Point mWindowPosition;

    public void <init>(android.content.Context)
    {
        android.app.ActivityView r0;
        android.content.Context r1;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.app.ActivityView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.app.ActivityView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, boolean)
    {
        android.app.ActivityView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;
        boolean z0;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean,boolean)>(r1, r2, i0, z0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, boolean, boolean)
    {
        android.app.ActivityView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;
        boolean z0, z1;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<android.app.ActivityView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean,boolean,boolean)>(r1, r2, i0, z0, z1, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, boolean, boolean, boolean)
    {
        android.app.ActivityView r0;
        android.util.AttributeSet r1;
        int i0;
        boolean z0, z1, z2, $z3;
        dalvik.system.CloseGuard $r2, $r17;
        android.view.SurfaceControl$Transaction $r3;
        android.graphics.Point $r4;
        int[] $r5;
        android.graphics.Rect $r6;
        android.graphics.Matrix $r7;
        android.graphics.Region $r8;
        android.window.VirtualDisplayTaskEmbedder $r9;
        android.view.SurfaceView $r10, $r11, $r13, $r16;
        float $f0;
        android.app.ActivityView$SurfaceCallback $r12, $r15;
        android.view.SurfaceHolder $r14;
        android.window.TaskOrganizerTaskEmbedder $r18;
        android.content.Context r19;

        r0 := @this: android.app.ActivityView;

        r19 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r19, r1, i0);

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.app.ActivityView: dalvik.system.CloseGuard mGuard> = $r2;

        $r3 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r3.<android.view.SurfaceControl$Transaction: void <init>()>();

        r0.<android.app.ActivityView: android.view.SurfaceControl$Transaction mTmpTransaction> = $r3;

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        r0.<android.app.ActivityView: android.graphics.Point mWindowPosition> = $r4;

        $r5 = newarray (int)[2];

        r0.<android.app.ActivityView: int[] mTmpArray> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<android.app.ActivityView: android.graphics.Rect mTmpRect> = $r6;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        r0.<android.app.ActivityView: android.graphics.Matrix mScreenSurfaceMatrix> = $r7;

        $r8 = new android.graphics.Region;

        specialinvoke $r8.<android.graphics.Region: void <init>()>();

        r0.<android.app.ActivityView: android.graphics.Region mTapExcludeRegion> = $r8;

        $z3 = virtualinvoke r0.<android.app.ActivityView: boolean useTaskOrganizer()>();

        if $z3 == 0 goto label1;

        $r18 = new android.window.TaskOrganizerTaskEmbedder;

        specialinvoke $r18.<android.window.TaskOrganizerTaskEmbedder: void <init>(android.content.Context,android.window.TaskEmbedder$Host)>(r19, r0);

        r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder> = $r18;

        goto label2;

     label1:
        $r9 = new android.window.VirtualDisplayTaskEmbedder;

        specialinvoke $r9.<android.window.VirtualDisplayTaskEmbedder: void <init>(android.content.Context,android.window.TaskEmbedder$Host,boolean,boolean)>(r19, r0, z0, z1);

        r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder> = $r9;

     label2:
        $r10 = new android.view.SurfaceView;

        specialinvoke $r10.<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int,boolean)>(r19, null, 0, 0, z2);

        r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView> = $r10;

        $f0 = specialinvoke r0.<android.view.ViewGroup: float getAlpha()>();

        virtualinvoke $r10.<android.view.SurfaceView: void setAlpha(float)>($f0);

        $r11 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r11.<android.view.SurfaceView: void setUseAlpha()>();

        $r12 = new android.app.ActivityView$SurfaceCallback;

        specialinvoke $r12.<android.app.ActivityView$SurfaceCallback: void <init>(android.app.ActivityView,android.app.ActivityView$1)>(r0, null);

        r0.<android.app.ActivityView: android.app.ActivityView$SurfaceCallback mSurfaceCallback> = $r12;

        $r13 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        $r14 = virtualinvoke $r13.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r15 = r0.<android.app.ActivityView: android.app.ActivityView$SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r14.<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>($r15);

        $r16 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke r0.<android.app.ActivityView: void addView(android.view.View)>($r16);

        r0.<android.app.ActivityView: boolean mOpened> = 1;

        $r17 = r0.<android.app.ActivityView: dalvik.system.CloseGuard mGuard>;

        virtualinvoke $r17.<dalvik.system.CloseGuard: void open(java.lang.String)>("release");

        return;
    }

    static android.window.TaskEmbedder access$200(android.app.ActivityView)
    {
        android.app.ActivityView r0;
        android.window.TaskEmbedder $r1;

        r0 := @parameter0: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        return $r1;
    }

    static android.view.SurfaceView access$300(android.app.ActivityView)
    {
        android.app.ActivityView r0;
        android.view.SurfaceView $r1;

        r0 := @parameter0: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        return $r1;
    }

    static boolean access$400(android.app.ActivityView, android.view.SurfaceControl)
    {
        android.app.ActivityView r0;
        android.view.SurfaceControl r1;
        boolean $z0;

        r0 := @parameter0: android.app.ActivityView;

        r1 := @parameter1: android.view.SurfaceControl;

        $z0 = specialinvoke r0.<android.app.ActivityView: boolean initTaskEmbedder(android.view.SurfaceControl)>(r1);

        return $z0;
    }

    static android.view.SurfaceControl$Transaction access$500(android.app.ActivityView)
    {
        android.app.ActivityView r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @parameter0: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.view.SurfaceControl$Transaction mTmpTransaction>;

        return $r1;
    }

    private boolean initTaskEmbedder(android.view.SurfaceControl)
    {
        android.app.ActivityView r0;
        android.view.SurfaceControl r1;
        android.window.TaskEmbedder $r2;
        boolean $z0;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.view.SurfaceControl;

        $r2 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        $z0 = virtualinvoke $r2.<android.window.TaskEmbedder: boolean initialize(android.view.SurfaceControl)>(r1);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ActivityView", "Failed to initialize ActivityView");

        return 0;

     label1:
        return 1;
    }

    private void performRelease()
    {
        android.app.ActivityView r0;
        boolean $z0, $z1;
        android.view.SurfaceView $r1;
        android.view.SurfaceHolder $r2;
        android.app.ActivityView$SurfaceCallback $r3;
        android.window.TaskEmbedder $r4, $r5, $r7;
        dalvik.system.CloseGuard $r6;

        r0 := @this: android.app.ActivityView;

        $z0 = r0.<android.app.ActivityView: boolean mOpened>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        $r2 = virtualinvoke $r1.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r3 = r0.<android.app.ActivityView: android.app.ActivityView$SurfaceCallback mSurfaceCallback>;

        interfaceinvoke $r2.<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>($r3);

        $r4 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        $z1 = virtualinvoke $r4.<android.window.TaskEmbedder: boolean isInitialized()>();

        if $z1 == 0 goto label2;

        $r7 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r7.<android.window.TaskEmbedder: void release()>();

     label2:
        $r5 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r5.<android.window.TaskEmbedder: void setListener(android.window.TaskEmbedder$Listener)>(null);

        $r6 = r0.<android.app.ActivityView: dalvik.system.CloseGuard mGuard>;

        virtualinvoke $r6.<dalvik.system.CloseGuard: void close()>();

        r0.<android.app.ActivityView: boolean mOpened> = 0;

        return;
    }

    public boolean canReceivePointerEvents()
    {
        android.app.ActivityView r0;
        boolean $z0;

        r0 := @this: android.app.ActivityView;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean canReceivePointerEvents()>();

        return $z0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.app.ActivityView r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.app.ActivityView;

     label1:
        $r2 = r0.<android.app.ActivityView: dalvik.system.CloseGuard mGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.app.ActivityView: dalvik.system.CloseGuard mGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

        specialinvoke r0.<android.app.ActivityView: void performRelease()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.app.ActivityView r0;
        android.graphics.Region r1;
        android.window.TaskEmbedder $r2;
        boolean $z0, $z1, z2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.graphics.Region;

        $r2 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        $z0 = virtualinvoke $r2.<android.window.TaskEmbedder: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public float getAlpha()
    {
        android.app.ActivityView r0;
        android.view.SurfaceView $r1;
        float $f0;

        r0 := @this: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        $f0 = virtualinvoke $r1.<android.view.SurfaceView: float getAlpha()>();

        return $f0;
    }

    public float getCornerRadius()
    {
        android.app.ActivityView r0;
        android.view.SurfaceView $r1;
        float $f0;

        r0 := @this: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        $f0 = virtualinvoke $r1.<android.view.SurfaceView: float getCornerRadius()>();

        return $f0;
    }

    public android.graphics.Point getPositionInWindow()
    {
        android.app.ActivityView r0;
        android.graphics.Point r1, $r4;
        int[] r2, $r3;
        int $i0, $i1;

        r0 := @this: android.app.ActivityView;

        $r3 = r0.<android.app.ActivityView: int[] mTmpArray>;

        virtualinvoke r0.<android.app.ActivityView: void getLocationInWindow(int[])>($r3);

        r1 = r0.<android.app.ActivityView: android.graphics.Point mWindowPosition>;

        r2 = r0.<android.app.ActivityView: int[] mTmpArray>;

        $i1 = r2[0];

        $i0 = r2[1];

        virtualinvoke r1.<android.graphics.Point: void set(int,int)>($i1, $i0);

        $r4 = r0.<android.app.ActivityView: android.graphics.Point mWindowPosition>;

        return $r4;
    }

    public android.graphics.Rect getScreenBounds()
    {
        android.app.ActivityView r0;
        android.graphics.Rect $r1, $r2;

        r0 := @this: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.graphics.Rect mTmpRect>;

        virtualinvoke r0.<android.app.ActivityView: void getBoundsOnScreen(android.graphics.Rect)>($r1);

        $r2 = r0.<android.app.ActivityView: android.graphics.Rect mTmpRect>;

        return $r2;
    }

    public android.graphics.Matrix getScreenToTaskMatrix()
    {
        android.app.ActivityView r0;
        android.graphics.Matrix r1, $r4, $r5, $r6;
        int[] r2, $r3;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: android.app.ActivityView;

        $r3 = r0.<android.app.ActivityView: int[] mTmpArray>;

        virtualinvoke r0.<android.app.ActivityView: void getLocationOnScreen(int[])>($r3);

        $r4 = r0.<android.app.ActivityView: android.graphics.Matrix mScreenSurfaceMatrix>;

        $r5 = virtualinvoke r0.<android.app.ActivityView: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r4.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r5);

        r1 = r0.<android.app.ActivityView: android.graphics.Matrix mScreenSurfaceMatrix>;

        r2 = r0.<android.app.ActivityView: int[] mTmpArray>;

        $i0 = r2[0];

        $f1 = (float) $i0;

        $i1 = r2[1];

        $f0 = (float) $i1;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f1, $f0);

        $r6 = r0.<android.app.ActivityView: android.graphics.Matrix mScreenSurfaceMatrix>;

        return $r6;
    }

    public boolean getSurfaceClipBounds(android.graphics.Rect)
    {
        android.app.ActivityView r0;
        android.graphics.Rect r1;
        android.view.SurfaceView $r2;
        boolean $z0;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        $z0 = virtualinvoke $r2.<android.view.SurfaceView: boolean getClipBounds(android.graphics.Rect)>(r1);

        return $z0;
    }

    public android.graphics.Region getTapExcludeRegion()
    {
        android.app.ActivityView r0;
        boolean $z0, $z1;
        android.graphics.Region $r1, $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Point r4;
        android.view.ViewParent r5;

        r0 := @this: android.app.ActivityView;

        $z0 = virtualinvoke r0.<android.app.ActivityView: boolean isAttachedToWindow()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<android.app.ActivityView: boolean canReceivePointerEvents()>();

        if $z1 == 0 goto label2;

        r4 = virtualinvoke r0.<android.app.ActivityView: android.graphics.Point getPositionInWindow()>();

        $r2 = r0.<android.app.ActivityView: android.graphics.Region mTapExcludeRegion>;

        $i0 = r4.<android.graphics.Point: int x>;

        $i1 = r4.<android.graphics.Point: int y>;

        $i2 = r4.<android.graphics.Point: int x>;

        $i3 = virtualinvoke r0.<android.app.ActivityView: int getWidth()>();

        $i4 = $i2 + $i3;

        $i5 = r4.<android.graphics.Point: int y>;

        $i6 = virtualinvoke r0.<android.app.ActivityView: int getHeight()>();

        $i7 = $i5 + $i6;

        virtualinvoke $r2.<android.graphics.Region: boolean set(int,int,int,int)>($i0, $i1, $i4, $i7);

        r5 = virtualinvoke r0.<android.app.ActivityView: android.view.ViewParent getParent()>();

        if r5 == null goto label1;

        $r3 = r0.<android.app.ActivityView: android.graphics.Region mTapExcludeRegion>;

        interfaceinvoke r5.<android.view.ViewParent: void subtractObscuredTouchableRegion(android.graphics.Region,android.view.View)>($r3, r0);

     label1:
        goto label3;

     label2:
        $r1 = r0.<android.app.ActivityView: android.graphics.Region mTapExcludeRegion>;

        virtualinvoke $r1.<android.graphics.Region: void setEmpty()>();

     label3:
        $r6 = r0.<android.app.ActivityView: android.graphics.Region mTapExcludeRegion>;

        return $r6;
    }

    public android.hardware.display.VirtualDisplay getVirtualDisplay()
    {
        android.app.ActivityView r0;
        android.window.TaskEmbedder $r1;
        android.hardware.display.VirtualDisplay $r2;

        r0 := @this: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        $r2 = virtualinvoke $r1.<android.window.TaskEmbedder: android.hardware.display.VirtualDisplay getVirtualDisplay()>();

        return $r2;
    }

    public int getVirtualDisplayId()
    {
        android.app.ActivityView r0;
        android.window.TaskEmbedder $r1;
        int $i0;

        r0 := @this: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        $i0 = virtualinvoke $r1.<android.window.TaskEmbedder: int getDisplayId()>();

        return $i0;
    }

    public android.view.IWindow getWindow()
    {
        android.app.ActivityView r0;
        android.view.IWindow $r1;

        r0 := @this: android.app.ActivityView;

        $r1 = specialinvoke r0.<android.view.ViewGroup: android.view.IWindow getWindow()>();

        return $r1;
    }

    public void onLayout(boolean, int, int, int, int)
    {
        android.app.ActivityView r0;
        boolean z0;
        int i0, i1, i2, i3, $i4, $i5;
        android.view.SurfaceView $r1;

        r0 := @this: android.app.ActivityView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        $i5 = i2 - i0;

        $i4 = i3 - i1;

        virtualinvoke $r1.<android.view.SurfaceView: void layout(int,int,int,int)>(0, 0, $i5, $i4);

        return;
    }

    public void onLocationChanged()
    {
        android.app.ActivityView r0;
        android.window.TaskEmbedder $r1;

        r0 := @this: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r1.<android.window.TaskEmbedder: void notifyBoundsChanged()>();

        return;
    }

    public void onTaskBackgroundColorChanged(android.window.TaskEmbedder, int)
    {
        android.app.ActivityView r0;
        int i0;
        android.window.TaskEmbedder r1;
        android.view.SurfaceView r2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.window.TaskEmbedder;

        i0 := @parameter1: int;

        r2 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.SurfaceView: void setResizeBackgroundColor(int)>(i0);

     label1:
        return;
    }

    protected void onVisibilityChanged(android.view.View, int)
    {
        android.app.ActivityView r0;
        android.view.View r1;
        int i0;
        android.view.SurfaceView $r2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void onVisibilityChanged(android.view.View,int)>(r1, i0);

        $r2 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r2.<android.view.SurfaceView: void setVisibility(int)>(i0);

        return;
    }

    public void performBackPress()
    {
        android.app.ActivityView r0;
        android.window.TaskEmbedder $r1;

        r0 := @this: android.app.ActivityView;

        $r1 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r1.<android.window.TaskEmbedder: void performBackPress()>();

        return;
    }

    public void release()
    {
        android.app.ActivityView r0;

        r0 := @this: android.app.ActivityView;

        specialinvoke r0.<android.app.ActivityView: void performRelease()>();

        return;
    }

    public void setAlpha(float)
    {
        android.app.ActivityView r0;
        float f0;
        android.view.SurfaceView r1;

        r0 := @this: android.app.ActivityView;

        f0 := @parameter0: float;

        specialinvoke r0.<android.view.ViewGroup: void setAlpha(float)>(f0);

        r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.SurfaceView: void setAlpha(float)>(f0);

     label1:
        return;
    }

    public void setCallback(android.app.ActivityView$StateCallback)
    {
        android.app.ActivityView r0;
        android.app.ActivityView$StateCallback r1;
        android.app.ActivityView$StateCallbackAdapter $r2;
        android.window.TaskEmbedder $r3, $r4;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.app.ActivityView$StateCallback;

        if r1 != null goto label1;

        $r4 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r4.<android.window.TaskEmbedder: void setListener(android.window.TaskEmbedder$Listener)>(null);

        return;

     label1:
        $r3 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        $r2 = new android.app.ActivityView$StateCallbackAdapter;

        specialinvoke $r2.<android.app.ActivityView$StateCallbackAdapter: void <init>(android.app.ActivityView,android.app.ActivityView$StateCallback,android.app.ActivityView$1)>(r0, r1, null);

        virtualinvoke $r3.<android.window.TaskEmbedder: void setListener(android.window.TaskEmbedder$Listener)>($r2);

        return;
    }

    public void setCornerRadius(float)
    {
        android.app.ActivityView r0;
        float f0;
        android.view.SurfaceView $r1;

        r0 := @this: android.app.ActivityView;

        f0 := @parameter0: float;

        $r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r1.<android.view.SurfaceView: void setCornerRadius(float)>(f0);

        return;
    }

    public void setForwardedInsets(android.graphics.Insets)
    {
        android.app.ActivityView r0;
        android.graphics.Insets r1;
        android.window.TaskEmbedder $r2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.graphics.Insets;

        $r2 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r2.<android.window.TaskEmbedder: void setForwardedInsets(android.graphics.Insets)>(r1);

        return;
    }

    public void setSurfaceClipBounds(android.graphics.Rect)
    {
        android.app.ActivityView r0;
        android.graphics.Rect r1;
        android.view.SurfaceView $r2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r2.<android.view.SurfaceView: void setClipBounds(android.graphics.Rect)>(r1);

        return;
    }

    public void setSurfaceClippingEnabled(boolean)
    {
        android.app.ActivityView r0;
        boolean z0;
        android.view.SurfaceView $r1;

        r0 := @this: android.app.ActivityView;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.app.ActivityView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r1.<android.view.SurfaceView: void setEnableSurfaceClipping(boolean)>(z0);

        return;
    }

    public void startActivity(android.app.PendingIntent)
    {
        android.app.ActivityView r0;
        android.app.PendingIntent r1;
        android.window.TaskEmbedder $r2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.app.PendingIntent;

        $r2 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r2.<android.window.TaskEmbedder: void startActivity(android.app.PendingIntent)>(r1);

        return;
    }

    public void startActivity(android.app.PendingIntent, android.content.Intent, android.app.ActivityOptions)
    {
        android.app.ActivityView r0;
        android.app.PendingIntent r1;
        android.content.Intent r2;
        android.app.ActivityOptions r3;
        android.window.TaskEmbedder $r4;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: android.content.Intent;

        r3 := @parameter2: android.app.ActivityOptions;

        $r4 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r4.<android.window.TaskEmbedder: void startActivity(android.app.PendingIntent,android.content.Intent,android.app.ActivityOptions)>(r1, r2, r3);

        return;
    }

    public void startActivity(android.content.Intent)
    {
        android.app.ActivityView r0;
        android.content.Intent r1;
        android.window.TaskEmbedder $r2;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r2.<android.window.TaskEmbedder: void startActivity(android.content.Intent)>(r1);

        return;
    }

    public void startActivity(android.content.Intent, android.os.UserHandle)
    {
        android.app.ActivityView r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.window.TaskEmbedder $r3;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r3.<android.window.TaskEmbedder: void startActivity(android.content.Intent,android.os.UserHandle)>(r1, r2);

        return;
    }

    public void startShortcutActivity(android.content.pm.ShortcutInfo, android.app.ActivityOptions, android.graphics.Rect)
    {
        android.app.ActivityView r0;
        android.content.pm.ShortcutInfo r1;
        android.app.ActivityOptions r2;
        android.graphics.Rect r3;
        android.window.TaskEmbedder $r4;

        r0 := @this: android.app.ActivityView;

        r1 := @parameter0: android.content.pm.ShortcutInfo;

        r2 := @parameter1: android.app.ActivityOptions;

        r3 := @parameter2: android.graphics.Rect;

        $r4 = r0.<android.app.ActivityView: android.window.TaskEmbedder mTaskEmbedder>;

        virtualinvoke $r4.<android.window.TaskEmbedder: void startShortcutActivity(android.content.pm.ShortcutInfo,android.app.ActivityOptions,android.graphics.Rect)>(r1, r2, r3);

        return;
    }

    protected boolean useTaskOrganizer()
    {
        android.app.ActivityView r0;

        r0 := @this: android.app.ActivityView;

        return 0;
    }

    public static void <clinit>()
    {
        <android.app.ActivityView: java.lang.String TAG> = "ActivityView";

        return;
    }
}
