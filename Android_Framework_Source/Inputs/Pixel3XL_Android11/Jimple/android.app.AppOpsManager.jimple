public class android.app.AppOpsManager extends java.lang.Object
{
    public static final long CALL_BACK_ON_CHANGED_LISTENER_WITH_SWITCHED_OP_CHANGE;
    public static final int CALL_BACK_ON_SWITCHED_OP;
    private static final int COLLECT_ASYNC;
    private static final int COLLECT_SELF;
    private static final int COLLECT_SYNC;
    private static final java.lang.String DEBUG_LOGGING_ENABLE_PROP;
    private static final java.lang.String DEBUG_LOGGING_OPS_PROP;
    private static final java.lang.String DEBUG_LOGGING_PACKAGES_PROP;
    private static final java.lang.String DEBUG_LOGGING_TAG;
    private static final int DONT_COLLECT;
    public static final int FILTER_BY_ATTRIBUTION_TAG;
    public static final int FILTER_BY_OP_NAMES;
    public static final int FILTER_BY_PACKAGE_NAME;
    public static final int FILTER_BY_UID;
    private static final int FLAGS_MASK;
    public static final int HISTORICAL_MODE_DISABLED;
    public static final int HISTORICAL_MODE_ENABLED_ACTIVE;
    public static final int HISTORICAL_MODE_ENABLED_PASSIVE;
    public static final java.lang.String KEY_BG_STATE_SETTLE_TIME;
    public static final java.lang.String KEY_FG_SERVICE_STATE_SETTLE_TIME;
    public static final java.lang.String KEY_HISTORICAL_OPS;
    public static final java.lang.String KEY_TOP_STATE_SETTLE_TIME;
    public static final int MAX_PRIORITY_UID_STATE;
    private static final int MAX_UNFORWARDED_OPS;
    public static final int MIN_PRIORITY_UID_STATE;
    public static final int MODE_ALLOWED;
    public static final int MODE_DEFAULT;
    public static final int MODE_ERRORED;
    public static final int MODE_FOREGROUND;
    public static final int MODE_IGNORED;
    public static final java.lang.String[] MODE_NAMES;
    public static final boolean NOTE_OP_COLLECTION_ENABLED;
    public static final java.lang.String OPSTR_ACCEPT_HANDOVER;
    public static final java.lang.String OPSTR_ACCESS_ACCESSIBILITY;
    public static final java.lang.String OPSTR_ACCESS_MEDIA_LOCATION;
    public static final java.lang.String OPSTR_ACCESS_NOTIFICATIONS;
    public static final java.lang.String OPSTR_ACTIVATE_PLATFORM_VPN;
    public static final java.lang.String OPSTR_ACTIVATE_VPN;
    public static final java.lang.String OPSTR_ACTIVITY_RECOGNITION;
    public static final java.lang.String OPSTR_ADD_VOICEMAIL;
    public static final java.lang.String OPSTR_ANSWER_PHONE_CALLS;
    public static final java.lang.String OPSTR_ASSIST_SCREENSHOT;
    public static final java.lang.String OPSTR_ASSIST_STRUCTURE;
    public static final java.lang.String OPSTR_AUDIO_ACCESSIBILITY_VOLUME;
    public static final java.lang.String OPSTR_AUDIO_ALARM_VOLUME;
    public static final java.lang.String OPSTR_AUDIO_BLUETOOTH_VOLUME;
    public static final java.lang.String OPSTR_AUDIO_MASTER_VOLUME;
    public static final java.lang.String OPSTR_AUDIO_MEDIA_VOLUME;
    public static final java.lang.String OPSTR_AUDIO_NOTIFICATION_VOLUME;
    public static final java.lang.String OPSTR_AUDIO_RING_VOLUME;
    public static final java.lang.String OPSTR_AUDIO_VOICE_VOLUME;
    public static final java.lang.String OPSTR_AUTO_REVOKE_MANAGED_BY_INSTALLER;
    public static final java.lang.String OPSTR_AUTO_REVOKE_PERMISSIONS_IF_UNUSED;
    public static final java.lang.String OPSTR_BIND_ACCESSIBILITY_SERVICE;
    public static final java.lang.String OPSTR_BLUETOOTH_SCAN;
    public static final java.lang.String OPSTR_BODY_SENSORS;
    public static final java.lang.String OPSTR_CALL_PHONE;
    public static final java.lang.String OPSTR_CAMERA;
    public static final java.lang.String OPSTR_CHANGE_WIFI_STATE;
    public static final java.lang.String OPSTR_COARSE_LOCATION;
    public static final java.lang.String OPSTR_FINE_LOCATION;
    public static final java.lang.String OPSTR_GET_ACCOUNTS;
    public static final java.lang.String OPSTR_GET_USAGE_STATS;
    public static final java.lang.String OPSTR_GPS;
    public static final java.lang.String OPSTR_INSTANT_APP_START_FOREGROUND;
    public static final java.lang.String OPSTR_INTERACT_ACROSS_PROFILES;
    public static final java.lang.String OPSTR_LEGACY_STORAGE;
    public static final java.lang.String OPSTR_LOADER_USAGE_STATS;
    public static final java.lang.String OPSTR_MANAGE_EXTERNAL_STORAGE;
    public static final java.lang.String OPSTR_MANAGE_IPSEC_TUNNELS;
    public static final java.lang.String OPSTR_MOCK_LOCATION;
    public static final java.lang.String OPSTR_MONITOR_HIGH_POWER_LOCATION;
    public static final java.lang.String OPSTR_MONITOR_LOCATION;
    public static final java.lang.String OPSTR_MUTE_MICROPHONE;
    public static final java.lang.String OPSTR_NEIGHBORING_CELLS;
    public static final java.lang.String OPSTR_NO_ISOLATED_STORAGE;
    public static final java.lang.String OPSTR_PICTURE_IN_PICTURE;
    public static final java.lang.String OPSTR_PLAY_AUDIO;
    public static final java.lang.String OPSTR_POST_NOTIFICATION;
    public static final java.lang.String OPSTR_PROCESS_OUTGOING_CALLS;
    public static final java.lang.String OPSTR_PROJECT_MEDIA;
    public static final java.lang.String OPSTR_QUERY_ALL_PACKAGES;
    public static final java.lang.String OPSTR_READ_CALENDAR;
    public static final java.lang.String OPSTR_READ_CALL_LOG;
    public static final java.lang.String OPSTR_READ_CELL_BROADCASTS;
    public static final java.lang.String OPSTR_READ_CLIPBOARD;
    public static final java.lang.String OPSTR_READ_CONTACTS;
    public static final java.lang.String OPSTR_READ_DEVICE_IDENTIFIERS;
    public static final java.lang.String OPSTR_READ_EXTERNAL_STORAGE;
    public static final java.lang.String OPSTR_READ_ICC_SMS;
    public static final java.lang.String OPSTR_READ_MEDIA_AUDIO;
    public static final java.lang.String OPSTR_READ_MEDIA_IMAGES;
    public static final java.lang.String OPSTR_READ_MEDIA_VIDEO;
    public static final java.lang.String OPSTR_READ_PHONE_NUMBERS;
    public static final java.lang.String OPSTR_READ_PHONE_STATE;
    public static final java.lang.String OPSTR_READ_SMS;
    public static final java.lang.String OPSTR_RECEIVE_EMERGENCY_BROADCAST;
    public static final java.lang.String OPSTR_RECEIVE_MMS;
    public static final java.lang.String OPSTR_RECEIVE_SMS;
    public static final java.lang.String OPSTR_RECEIVE_WAP_PUSH;
    public static final java.lang.String OPSTR_RECORD_AUDIO;
    public static final java.lang.String OPSTR_REQUEST_DELETE_PACKAGES;
    public static final java.lang.String OPSTR_REQUEST_INSTALL_PACKAGES;
    public static final java.lang.String OPSTR_RUN_ANY_IN_BACKGROUND;
    public static final java.lang.String OPSTR_RUN_IN_BACKGROUND;
    public static final java.lang.String OPSTR_SEND_SMS;
    public static final java.lang.String OPSTR_SMS_FINANCIAL_TRANSACTIONS;
    public static final java.lang.String OPSTR_START_FOREGROUND;
    public static final java.lang.String OPSTR_SYSTEM_ALERT_WINDOW;
    public static final java.lang.String OPSTR_TAKE_AUDIO_FOCUS;
    public static final java.lang.String OPSTR_TAKE_MEDIA_BUTTONS;
    public static final java.lang.String OPSTR_TOAST_WINDOW;
    public static final java.lang.String OPSTR_TURN_SCREEN_ON;
    public static final java.lang.String OPSTR_USE_BIOMETRIC;
    public static final java.lang.String OPSTR_USE_FINGERPRINT;
    public static final java.lang.String OPSTR_USE_SIP;
    public static final java.lang.String OPSTR_VIBRATE;
    public static final java.lang.String OPSTR_WAKE_LOCK;
    public static final java.lang.String OPSTR_WIFI_SCAN;
    public static final java.lang.String OPSTR_WRITE_CALENDAR;
    public static final java.lang.String OPSTR_WRITE_CALL_LOG;
    public static final java.lang.String OPSTR_WRITE_CLIPBOARD;
    public static final java.lang.String OPSTR_WRITE_CONTACTS;
    public static final java.lang.String OPSTR_WRITE_EXTERNAL_STORAGE;
    public static final java.lang.String OPSTR_WRITE_ICC_SMS;
    public static final java.lang.String OPSTR_WRITE_MEDIA_AUDIO;
    public static final java.lang.String OPSTR_WRITE_MEDIA_IMAGES;
    public static final java.lang.String OPSTR_WRITE_MEDIA_VIDEO;
    public static final java.lang.String OPSTR_WRITE_SETTINGS;
    public static final java.lang.String OPSTR_WRITE_SMS;
    public static final java.lang.String OPSTR_WRITE_WALLPAPER;
    public static final int OP_ACCEPT_HANDOVER;
    public static final int OP_ACCESS_ACCESSIBILITY;
    public static final int OP_ACCESS_MEDIA_LOCATION;
    public static final int OP_ACCESS_NOTIFICATIONS;
    public static final int OP_ACTIVATE_PLATFORM_VPN;
    public static final int OP_ACTIVATE_VPN;
    public static final int OP_ACTIVITY_RECOGNITION;
    public static final int OP_ADD_VOICEMAIL;
    public static final int OP_ANSWER_PHONE_CALLS;
    public static final int OP_ASSIST_SCREENSHOT;
    public static final int OP_ASSIST_STRUCTURE;
    public static final int OP_AUDIO_ACCESSIBILITY_VOLUME;
    public static final int OP_AUDIO_ALARM_VOLUME;
    public static final int OP_AUDIO_BLUETOOTH_VOLUME;
    public static final int OP_AUDIO_MASTER_VOLUME;
    public static final int OP_AUDIO_MEDIA_VOLUME;
    public static final int OP_AUDIO_NOTIFICATION_VOLUME;
    public static final int OP_AUDIO_RING_VOLUME;
    public static final int OP_AUDIO_VOICE_VOLUME;
    public static final int OP_AUTO_REVOKE_MANAGED_BY_INSTALLER;
    public static final int OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED;
    public static final int OP_BIND_ACCESSIBILITY_SERVICE;
    public static final int OP_BLUETOOTH_SCAN;
    public static final int OP_BODY_SENSORS;
    public static final int OP_CALL_PHONE;
    public static final int OP_CAMERA;
    public static final int OP_CHANGE_WIFI_STATE;
    public static final int OP_COARSE_LOCATION;
    private static final int OP_DEPRECATED_1;
    public static final int OP_FINE_LOCATION;
    public static final int OP_FLAGS_ALL;
    public static final int OP_FLAGS_ALL_TRUSTED;
    public static final int OP_FLAG_SELF;
    public static final int OP_FLAG_TRUSTED_PROXIED;
    public static final int OP_FLAG_TRUSTED_PROXY;
    public static final int OP_FLAG_UNTRUSTED_PROXIED;
    public static final int OP_FLAG_UNTRUSTED_PROXY;
    public static final int OP_GET_ACCOUNTS;
    public static final int OP_GET_USAGE_STATS;
    public static final int OP_GPS;
    public static final int OP_INSTANT_APP_START_FOREGROUND;
    public static final int OP_INTERACT_ACROSS_PROFILES;
    public static final int OP_LEGACY_STORAGE;
    public static final int OP_LOADER_USAGE_STATS;
    public static final int OP_MANAGE_EXTERNAL_STORAGE;
    public static final int OP_MANAGE_IPSEC_TUNNELS;
    public static final int OP_MOCK_LOCATION;
    public static final int OP_MONITOR_HIGH_POWER_LOCATION;
    public static final int OP_MONITOR_LOCATION;
    public static final int OP_MUTE_MICROPHONE;
    public static final int OP_NEIGHBORING_CELLS;
    public static final int OP_NONE;
    public static final int OP_NO_ISOLATED_STORAGE;
    public static final int OP_PICTURE_IN_PICTURE;
    public static final int OP_PLAY_AUDIO;
    public static final int OP_POST_NOTIFICATION;
    public static final int OP_PROCESS_OUTGOING_CALLS;
    public static final int OP_PROJECT_MEDIA;
    public static final int OP_QUERY_ALL_PACKAGES;
    public static final int OP_READ_CALENDAR;
    public static final int OP_READ_CALL_LOG;
    public static final int OP_READ_CELL_BROADCASTS;
    public static final int OP_READ_CLIPBOARD;
    public static final int OP_READ_CONTACTS;
    public static final int OP_READ_DEVICE_IDENTIFIERS;
    public static final int OP_READ_EXTERNAL_STORAGE;
    public static final int OP_READ_ICC_SMS;
    public static final int OP_READ_MEDIA_AUDIO;
    public static final int OP_READ_MEDIA_IMAGES;
    public static final int OP_READ_MEDIA_VIDEO;
    public static final int OP_READ_PHONE_NUMBERS;
    public static final int OP_READ_PHONE_STATE;
    public static final int OP_READ_SMS;
    public static final int OP_RECEIVE_EMERGECY_SMS;
    public static final int OP_RECEIVE_MMS;
    public static final int OP_RECEIVE_SMS;
    public static final int OP_RECEIVE_WAP_PUSH;
    public static final int OP_RECORD_AUDIO;
    public static final int OP_REQUEST_DELETE_PACKAGES;
    public static final int OP_REQUEST_INSTALL_PACKAGES;
    public static final int OP_RUN_ANY_IN_BACKGROUND;
    public static final int OP_RUN_IN_BACKGROUND;
    public static final int OP_SEND_SMS;
    public static final int OP_SMS_FINANCIAL_TRANSACTIONS;
    public static final int OP_START_FOREGROUND;
    public static final int OP_SYSTEM_ALERT_WINDOW;
    public static final int OP_TAKE_AUDIO_FOCUS;
    public static final int OP_TAKE_MEDIA_BUTTONS;
    public static final int OP_TOAST_WINDOW;
    public static final int OP_TURN_SCREEN_ON;
    public static final int OP_USE_BIOMETRIC;
    public static final int OP_USE_FINGERPRINT;
    public static final int OP_USE_SIP;
    public static final int OP_VIBRATE;
    public static final int OP_WAKE_LOCK;
    public static final int OP_WIFI_SCAN;
    public static final int OP_WRITE_CALENDAR;
    public static final int OP_WRITE_CALL_LOG;
    public static final int OP_WRITE_CLIPBOARD;
    public static final int OP_WRITE_CONTACTS;
    public static final int OP_WRITE_EXTERNAL_STORAGE;
    public static final int OP_WRITE_ICC_SMS;
    public static final int OP_WRITE_MEDIA_AUDIO;
    public static final int OP_WRITE_MEDIA_IMAGES;
    public static final int OP_WRITE_MEDIA_VIDEO;
    public static final int OP_WRITE_SETTINGS;
    public static final int OP_WRITE_SMS;
    public static final int OP_WRITE_WALLPAPER;
    private static final int[] RUNTIME_AND_APPOP_PERMISSIONS_OPS;
    public static final int SAMPLING_STRATEGY_BOOT_TIME_SAMPLING;
    public static final int SAMPLING_STRATEGY_DEFAULT;
    public static final int SAMPLING_STRATEGY_RARELY_USED;
    public static final int SAMPLING_STRATEGY_UNIFORM;
    private static final byte SHOULD_COLLECT_NOTE_OP;
    private static final byte SHOULD_COLLECT_NOTE_OP_NOT_INITIALIZED;
    private static final byte SHOULD_NOT_COLLECT_NOTE_OP;
    public static final int[] UID_STATES;
    public static final int UID_STATE_BACKGROUND;
    public static final int UID_STATE_CACHED;
    public static final int UID_STATE_FOREGROUND;
    public static final int UID_STATE_FOREGROUND_SERVICE;
    public static final int UID_STATE_FOREGROUND_SERVICE_LOCATION;
    public static final int UID_STATE_MAX_LAST_NON_RESTRICTED;
    private static final int UID_STATE_OFFSET;
    public static final int UID_STATE_PERSISTENT;
    public static final int UID_STATE_TOP;
    public static final int WATCH_FOREGROUND_CHANGES;
    public static final int _NUM_OP;
    private static final java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction;
    private static final byte[] sAppOpsToNote;
    private static final java.lang.ThreadLocal sBinderThreadCallingUid;
    static android.os.IBinder sClientId;
    private static com.android.internal.app.MessageSamplingConfig sConfig;
    private static final java.lang.Object sLock;
    private static android.app.AppOpsManager$OnOpNotedCallback sMessageCollector;
    private static android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback;
    private static android.app.AppOpsManager$RestrictionBypass[] sOpAllowSystemRestrictionBypass;
    private static int[] sOpDefaultMode;
    private static boolean[] sOpDisableReset;
    private static java.lang.String[] sOpNames;
    private static java.lang.String[] sOpPerms;
    private static java.lang.String[] sOpRestrictions;
    private static java.util.HashMap sOpStrToOp;
    private static java.lang.String[] sOpToString;
    private static int[] sOpToSwitch;
    private static java.util.HashMap sPermToOp;
    static com.android.internal.app.IAppOpsService sService;
    private static java.util.ArrayList sUnforwardedOps;
    private final android.util.ArrayMap mActiveWatchers;
    final android.content.Context mContext;
    private final android.util.ArrayMap mModeWatchers;
    private final android.util.ArrayMap mNotedWatchers;
    final com.android.internal.app.IAppOpsService mService;
    private final android.util.ArrayMap mStartedWatchers;

    static void <clinit>()
    {
        int[] r0, $r5, $r6, $r7, $r20, $r27, $r30, $r63, $r66;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20;
        java.lang.Object $r1;
        java.util.ArrayList $r2;
        android.app.AppOpsManager$1 $r3;
        java.lang.String[] $r4, $r8, $r9, $r10, $r11, $r36, $r39, $r45, $r48, $r54, $r57, $r81, $r84, $r93, r110, r111;
        android.app.AppOpsManager$RestrictionBypass[] $r12, $r90;
        android.app.AppOpsManager$RestrictionBypass $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        boolean[] $r21, $r72, $r75;
        java.util.HashMap $r22, $r23, $r101, $r106;
        java.lang.ThreadLocal $r24, $r25;
        byte[] $r26;
        java.lang.StringBuilder $r28, $r37, $r46, $r55, $r64, $r73, $r82, $r91;
        java.lang.IllegalStateException $r34, $r43, $r52, $r61, $r70, $r79, $r88, $r97;
        java.lang.String $r35, $r44, $r53, $r62, $r71, $r80, $r89, $r98, $r100, $r102, $r105, $r107;
        com.android.internal.app.MessageSamplingConfig $r99;
        java.lang.Integer $r103, $r108;

        <android.app.AppOpsManager: int _NUM_OP> = 100;

        <android.app.AppOpsManager: int WATCH_FOREGROUND_CHANGES> = 1;

        <android.app.AppOpsManager: int UID_STATE_TOP> = 200;

        <android.app.AppOpsManager: int UID_STATE_PERSISTENT> = 100;

        <android.app.AppOpsManager: int UID_STATE_OFFSET> = 31;

        <android.app.AppOpsManager: int UID_STATE_MAX_LAST_NON_RESTRICTED> = 500;

        <android.app.AppOpsManager: int UID_STATE_FOREGROUND_SERVICE_LOCATION> = 300;

        <android.app.AppOpsManager: int UID_STATE_FOREGROUND_SERVICE> = 400;

        <android.app.AppOpsManager: int UID_STATE_FOREGROUND> = 500;

        <android.app.AppOpsManager: int UID_STATE_CACHED> = 700;

        <android.app.AppOpsManager: int UID_STATE_BACKGROUND> = 600;

        <android.app.AppOpsManager: byte SHOULD_NOT_COLLECT_NOTE_OP> = 1;

        <android.app.AppOpsManager: byte SHOULD_COLLECT_NOTE_OP_NOT_INITIALIZED> = 0;

        <android.app.AppOpsManager: byte SHOULD_COLLECT_NOTE_OP> = 2;

        <android.app.AppOpsManager: int SAMPLING_STRATEGY_UNIFORM> = 1;

        <android.app.AppOpsManager: int SAMPLING_STRATEGY_RARELY_USED> = 2;

        <android.app.AppOpsManager: int SAMPLING_STRATEGY_DEFAULT> = 0;

        <android.app.AppOpsManager: int SAMPLING_STRATEGY_BOOT_TIME_SAMPLING> = 3;

        <android.app.AppOpsManager: int OP_WRITE_WALLPAPER> = 48;

        <android.app.AppOpsManager: int OP_WRITE_SMS> = 15;

        <android.app.AppOpsManager: int OP_WRITE_SETTINGS> = 23;

        <android.app.AppOpsManager: int OP_WRITE_MEDIA_VIDEO> = 84;

        <android.app.AppOpsManager: int OP_WRITE_MEDIA_IMAGES> = 86;

        <android.app.AppOpsManager: int OP_WRITE_MEDIA_AUDIO> = 82;

        <android.app.AppOpsManager: int OP_WRITE_ICC_SMS> = 22;

        <android.app.AppOpsManager: int OP_WRITE_EXTERNAL_STORAGE> = 60;

        <android.app.AppOpsManager: int OP_WRITE_CONTACTS> = 5;

        <android.app.AppOpsManager: int OP_WRITE_CLIPBOARD> = 30;

        <android.app.AppOpsManager: int OP_WRITE_CALL_LOG> = 7;

        <android.app.AppOpsManager: int OP_WRITE_CALENDAR> = 9;

        <android.app.AppOpsManager: int OP_WIFI_SCAN> = 10;

        <android.app.AppOpsManager: int OP_WAKE_LOCK> = 40;

        <android.app.AppOpsManager: int OP_VIBRATE> = 3;

        <android.app.AppOpsManager: int OP_USE_SIP> = 53;

        <android.app.AppOpsManager: int OP_USE_FINGERPRINT> = 55;

        <android.app.AppOpsManager: int OP_USE_BIOMETRIC> = 78;

        <android.app.AppOpsManager: int OP_TURN_SCREEN_ON> = 61;

        <android.app.AppOpsManager: int OP_TOAST_WINDOW> = 45;

        <android.app.AppOpsManager: int OP_TAKE_MEDIA_BUTTONS> = 31;

        <android.app.AppOpsManager: int OP_TAKE_AUDIO_FOCUS> = 32;

        <android.app.AppOpsManager: int OP_SYSTEM_ALERT_WINDOW> = 24;

        <android.app.AppOpsManager: int OP_START_FOREGROUND> = 76;

        <android.app.AppOpsManager: int OP_SMS_FINANCIAL_TRANSACTIONS> = 80;

        <android.app.AppOpsManager: int OP_SEND_SMS> = 20;

        <android.app.AppOpsManager: int OP_RUN_IN_BACKGROUND> = 63;

        <android.app.AppOpsManager: int OP_RUN_ANY_IN_BACKGROUND> = 70;

        <android.app.AppOpsManager: int OP_REQUEST_INSTALL_PACKAGES> = 66;

        <android.app.AppOpsManager: int OP_REQUEST_DELETE_PACKAGES> = 72;

        <android.app.AppOpsManager: int OP_RECORD_AUDIO> = 27;

        <android.app.AppOpsManager: int OP_RECEIVE_WAP_PUSH> = 19;

        <android.app.AppOpsManager: int OP_RECEIVE_SMS> = 16;

        <android.app.AppOpsManager: int OP_RECEIVE_MMS> = 18;

        <android.app.AppOpsManager: int OP_RECEIVE_EMERGECY_SMS> = 17;

        <android.app.AppOpsManager: int OP_READ_SMS> = 14;

        <android.app.AppOpsManager: int OP_READ_PHONE_STATE> = 51;

        <android.app.AppOpsManager: int OP_READ_PHONE_NUMBERS> = 65;

        <android.app.AppOpsManager: int OP_READ_MEDIA_VIDEO> = 83;

        <android.app.AppOpsManager: int OP_READ_MEDIA_IMAGES> = 85;

        <android.app.AppOpsManager: int OP_READ_MEDIA_AUDIO> = 81;

        <android.app.AppOpsManager: int OP_READ_ICC_SMS> = 21;

        <android.app.AppOpsManager: int OP_READ_EXTERNAL_STORAGE> = 59;

        <android.app.AppOpsManager: int OP_READ_DEVICE_IDENTIFIERS> = 89;

        <android.app.AppOpsManager: int OP_READ_CONTACTS> = 4;

        <android.app.AppOpsManager: int OP_READ_CLIPBOARD> = 29;

        <android.app.AppOpsManager: int OP_READ_CELL_BROADCASTS> = 57;

        <android.app.AppOpsManager: int OP_READ_CALL_LOG> = 6;

        <android.app.AppOpsManager: int OP_READ_CALENDAR> = 8;

        <android.app.AppOpsManager: int OP_QUERY_ALL_PACKAGES> = 91;

        <android.app.AppOpsManager: int OP_PROJECT_MEDIA> = 46;

        <android.app.AppOpsManager: int OP_PROCESS_OUTGOING_CALLS> = 54;

        <android.app.AppOpsManager: int OP_POST_NOTIFICATION> = 11;

        <android.app.AppOpsManager: int OP_PLAY_AUDIO> = 28;

        <android.app.AppOpsManager: int OP_PICTURE_IN_PICTURE> = 67;

        <android.app.AppOpsManager: int OP_NO_ISOLATED_STORAGE> = 99;

        <android.app.AppOpsManager: int OP_NONE> = -1;

        <android.app.AppOpsManager: int OP_NEIGHBORING_CELLS> = 12;

        <android.app.AppOpsManager: int OP_MUTE_MICROPHONE> = 44;

        <android.app.AppOpsManager: int OP_MONITOR_LOCATION> = 41;

        <android.app.AppOpsManager: int OP_MONITOR_HIGH_POWER_LOCATION> = 42;

        <android.app.AppOpsManager: int OP_MOCK_LOCATION> = 58;

        <android.app.AppOpsManager: int OP_MANAGE_IPSEC_TUNNELS> = 75;

        <android.app.AppOpsManager: int OP_MANAGE_EXTERNAL_STORAGE> = 92;

        <android.app.AppOpsManager: int OP_LOADER_USAGE_STATS> = 95;

        <android.app.AppOpsManager: int OP_LEGACY_STORAGE> = 87;

        <android.app.AppOpsManager: int OP_INTERACT_ACROSS_PROFILES> = 93;

        <android.app.AppOpsManager: int OP_INSTANT_APP_START_FOREGROUND> = 68;

        <android.app.AppOpsManager: int OP_GPS> = 2;

        <android.app.AppOpsManager: int OP_GET_USAGE_STATS> = 43;

        <android.app.AppOpsManager: int OP_GET_ACCOUNTS> = 62;

        <android.app.AppOpsManager: int OP_FLAG_UNTRUSTED_PROXY> = 4;

        <android.app.AppOpsManager: int OP_FLAG_UNTRUSTED_PROXIED> = 16;

        <android.app.AppOpsManager: int OP_FLAG_TRUSTED_PROXY> = 2;

        <android.app.AppOpsManager: int OP_FLAG_TRUSTED_PROXIED> = 8;

        <android.app.AppOpsManager: int OP_FLAG_SELF> = 1;

        <android.app.AppOpsManager: int OP_FLAGS_ALL_TRUSTED> = 13;

        <android.app.AppOpsManager: int OP_FLAGS_ALL> = 31;

        <android.app.AppOpsManager: int OP_FINE_LOCATION> = 1;

        <android.app.AppOpsManager: int OP_DEPRECATED_1> = 96;

        <android.app.AppOpsManager: int OP_COARSE_LOCATION> = 0;

        <android.app.AppOpsManager: int OP_CHANGE_WIFI_STATE> = 71;

        <android.app.AppOpsManager: int OP_CAMERA> = 26;

        <android.app.AppOpsManager: int OP_CALL_PHONE> = 13;

        <android.app.AppOpsManager: int OP_BODY_SENSORS> = 56;

        <android.app.AppOpsManager: int OP_BLUETOOTH_SCAN> = 77;

        <android.app.AppOpsManager: int OP_BIND_ACCESSIBILITY_SERVICE> = 73;

        <android.app.AppOpsManager: int OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED> = 97;

        <android.app.AppOpsManager: int OP_AUTO_REVOKE_MANAGED_BY_INSTALLER> = 98;

        <android.app.AppOpsManager: int OP_AUDIO_VOICE_VOLUME> = 34;

        <android.app.AppOpsManager: int OP_AUDIO_RING_VOLUME> = 35;

        <android.app.AppOpsManager: int OP_AUDIO_NOTIFICATION_VOLUME> = 38;

        <android.app.AppOpsManager: int OP_AUDIO_MEDIA_VOLUME> = 36;

        <android.app.AppOpsManager: int OP_AUDIO_MASTER_VOLUME> = 33;

        <android.app.AppOpsManager: int OP_AUDIO_BLUETOOTH_VOLUME> = 39;

        <android.app.AppOpsManager: int OP_AUDIO_ALARM_VOLUME> = 37;

        <android.app.AppOpsManager: int OP_AUDIO_ACCESSIBILITY_VOLUME> = 64;

        <android.app.AppOpsManager: int OP_ASSIST_STRUCTURE> = 49;

        <android.app.AppOpsManager: int OP_ASSIST_SCREENSHOT> = 50;

        <android.app.AppOpsManager: int OP_ANSWER_PHONE_CALLS> = 69;

        <android.app.AppOpsManager: int OP_ADD_VOICEMAIL> = 52;

        <android.app.AppOpsManager: int OP_ACTIVITY_RECOGNITION> = 79;

        <android.app.AppOpsManager: int OP_ACTIVATE_VPN> = 47;

        <android.app.AppOpsManager: int OP_ACTIVATE_PLATFORM_VPN> = 94;

        <android.app.AppOpsManager: int OP_ACCESS_NOTIFICATIONS> = 25;

        <android.app.AppOpsManager: int OP_ACCESS_MEDIA_LOCATION> = 90;

        <android.app.AppOpsManager: int OP_ACCESS_ACCESSIBILITY> = 88;

        <android.app.AppOpsManager: int OP_ACCEPT_HANDOVER> = 74;

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_WALLPAPER> = "android:write_wallpaper";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_SMS> = "android:write_sms";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_SETTINGS> = "android:write_settings";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_MEDIA_VIDEO> = "android:write_media_video";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_MEDIA_IMAGES> = "android:write_media_images";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_MEDIA_AUDIO> = "android:write_media_audio";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_ICC_SMS> = "android:write_icc_sms";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_EXTERNAL_STORAGE> = "android:write_external_storage";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_CONTACTS> = "android:write_contacts";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_CLIPBOARD> = "android:write_clipboard";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_CALL_LOG> = "android:write_call_log";

        <android.app.AppOpsManager: java.lang.String OPSTR_WRITE_CALENDAR> = "android:write_calendar";

        <android.app.AppOpsManager: java.lang.String OPSTR_WIFI_SCAN> = "android:wifi_scan";

        <android.app.AppOpsManager: java.lang.String OPSTR_WAKE_LOCK> = "android:wake_lock";

        <android.app.AppOpsManager: java.lang.String OPSTR_VIBRATE> = "android:vibrate";

        <android.app.AppOpsManager: java.lang.String OPSTR_USE_SIP> = "android:use_sip";

        <android.app.AppOpsManager: java.lang.String OPSTR_USE_FINGERPRINT> = "android:use_fingerprint";

        <android.app.AppOpsManager: java.lang.String OPSTR_USE_BIOMETRIC> = "android:use_biometric";

        <android.app.AppOpsManager: java.lang.String OPSTR_TURN_SCREEN_ON> = "android:turn_screen_on";

        <android.app.AppOpsManager: java.lang.String OPSTR_TOAST_WINDOW> = "android:toast_window";

        <android.app.AppOpsManager: java.lang.String OPSTR_TAKE_MEDIA_BUTTONS> = "android:take_media_buttons";

        <android.app.AppOpsManager: java.lang.String OPSTR_TAKE_AUDIO_FOCUS> = "android:take_audio_focus";

        <android.app.AppOpsManager: java.lang.String OPSTR_SYSTEM_ALERT_WINDOW> = "android:system_alert_window";

        <android.app.AppOpsManager: java.lang.String OPSTR_START_FOREGROUND> = "android:start_foreground";

        <android.app.AppOpsManager: java.lang.String OPSTR_SMS_FINANCIAL_TRANSACTIONS> = "android:sms_financial_transactions";

        <android.app.AppOpsManager: java.lang.String OPSTR_SEND_SMS> = "android:send_sms";

        <android.app.AppOpsManager: java.lang.String OPSTR_RUN_IN_BACKGROUND> = "android:run_in_background";

        <android.app.AppOpsManager: java.lang.String OPSTR_RUN_ANY_IN_BACKGROUND> = "android:run_any_in_background";

        <android.app.AppOpsManager: java.lang.String OPSTR_REQUEST_INSTALL_PACKAGES> = "android:request_install_packages";

        <android.app.AppOpsManager: java.lang.String OPSTR_REQUEST_DELETE_PACKAGES> = "android:request_delete_packages";

        <android.app.AppOpsManager: java.lang.String OPSTR_RECORD_AUDIO> = "android:record_audio";

        <android.app.AppOpsManager: java.lang.String OPSTR_RECEIVE_WAP_PUSH> = "android:receive_wap_push";

        <android.app.AppOpsManager: java.lang.String OPSTR_RECEIVE_SMS> = "android:receive_sms";

        <android.app.AppOpsManager: java.lang.String OPSTR_RECEIVE_MMS> = "android:receive_mms";

        <android.app.AppOpsManager: java.lang.String OPSTR_RECEIVE_EMERGENCY_BROADCAST> = "android:receive_emergency_broadcast";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_SMS> = "android:read_sms";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_PHONE_STATE> = "android:read_phone_state";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_PHONE_NUMBERS> = "android:read_phone_numbers";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_MEDIA_VIDEO> = "android:read_media_video";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_MEDIA_IMAGES> = "android:read_media_images";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_MEDIA_AUDIO> = "android:read_media_audio";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_ICC_SMS> = "android:read_icc_sms";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_EXTERNAL_STORAGE> = "android:read_external_storage";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_DEVICE_IDENTIFIERS> = "android:read_device_identifiers";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_CONTACTS> = "android:read_contacts";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_CLIPBOARD> = "android:read_clipboard";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_CELL_BROADCASTS> = "android:read_cell_broadcasts";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_CALL_LOG> = "android:read_call_log";

        <android.app.AppOpsManager: java.lang.String OPSTR_READ_CALENDAR> = "android:read_calendar";

        <android.app.AppOpsManager: java.lang.String OPSTR_QUERY_ALL_PACKAGES> = "android:query_all_packages";

        <android.app.AppOpsManager: java.lang.String OPSTR_PROJECT_MEDIA> = "android:project_media";

        <android.app.AppOpsManager: java.lang.String OPSTR_PROCESS_OUTGOING_CALLS> = "android:process_outgoing_calls";

        <android.app.AppOpsManager: java.lang.String OPSTR_POST_NOTIFICATION> = "android:post_notification";

        <android.app.AppOpsManager: java.lang.String OPSTR_PLAY_AUDIO> = "android:play_audio";

        <android.app.AppOpsManager: java.lang.String OPSTR_PICTURE_IN_PICTURE> = "android:picture_in_picture";

        <android.app.AppOpsManager: java.lang.String OPSTR_NO_ISOLATED_STORAGE> = "android:no_isolated_storage";

        <android.app.AppOpsManager: java.lang.String OPSTR_NEIGHBORING_CELLS> = "android:neighboring_cells";

        <android.app.AppOpsManager: java.lang.String OPSTR_MUTE_MICROPHONE> = "android:mute_microphone";

        <android.app.AppOpsManager: java.lang.String OPSTR_MONITOR_LOCATION> = "android:monitor_location";

        <android.app.AppOpsManager: java.lang.String OPSTR_MONITOR_HIGH_POWER_LOCATION> = "android:monitor_location_high_power";

        <android.app.AppOpsManager: java.lang.String OPSTR_MOCK_LOCATION> = "android:mock_location";

        <android.app.AppOpsManager: java.lang.String OPSTR_MANAGE_IPSEC_TUNNELS> = "android:manage_ipsec_tunnels";

        <android.app.AppOpsManager: java.lang.String OPSTR_MANAGE_EXTERNAL_STORAGE> = "android:manage_external_storage";

        <android.app.AppOpsManager: java.lang.String OPSTR_LOADER_USAGE_STATS> = "android:loader_usage_stats";

        <android.app.AppOpsManager: java.lang.String OPSTR_LEGACY_STORAGE> = "android:legacy_storage";

        <android.app.AppOpsManager: java.lang.String OPSTR_INTERACT_ACROSS_PROFILES> = "android:interact_across_profiles";

        <android.app.AppOpsManager: java.lang.String OPSTR_INSTANT_APP_START_FOREGROUND> = "android:instant_app_start_foreground";

        <android.app.AppOpsManager: java.lang.String OPSTR_GPS> = "android:gps";

        <android.app.AppOpsManager: java.lang.String OPSTR_GET_USAGE_STATS> = "android:get_usage_stats";

        <android.app.AppOpsManager: java.lang.String OPSTR_GET_ACCOUNTS> = "android:get_accounts";

        <android.app.AppOpsManager: java.lang.String OPSTR_FINE_LOCATION> = "android:fine_location";

        <android.app.AppOpsManager: java.lang.String OPSTR_COARSE_LOCATION> = "android:coarse_location";

        <android.app.AppOpsManager: java.lang.String OPSTR_CHANGE_WIFI_STATE> = "android:change_wifi_state";

        <android.app.AppOpsManager: java.lang.String OPSTR_CAMERA> = "android:camera";

        <android.app.AppOpsManager: java.lang.String OPSTR_CALL_PHONE> = "android:call_phone";

        <android.app.AppOpsManager: java.lang.String OPSTR_BODY_SENSORS> = "android:body_sensors";

        <android.app.AppOpsManager: java.lang.String OPSTR_BLUETOOTH_SCAN> = "android:bluetooth_scan";

        <android.app.AppOpsManager: java.lang.String OPSTR_BIND_ACCESSIBILITY_SERVICE> = "android:bind_accessibility_service";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUTO_REVOKE_PERMISSIONS_IF_UNUSED> = "android:auto_revoke_permissions_if_unused";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUTO_REVOKE_MANAGED_BY_INSTALLER> = "android:auto_revoke_managed_by_installer";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_VOICE_VOLUME> = "android:audio_voice_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_RING_VOLUME> = "android:audio_ring_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_NOTIFICATION_VOLUME> = "android:audio_notification_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_MEDIA_VOLUME> = "android:audio_media_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_MASTER_VOLUME> = "android:audio_master_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_BLUETOOTH_VOLUME> = "android:audio_bluetooth_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_ALARM_VOLUME> = "android:audio_alarm_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_AUDIO_ACCESSIBILITY_VOLUME> = "android:audio_accessibility_volume";

        <android.app.AppOpsManager: java.lang.String OPSTR_ASSIST_STRUCTURE> = "android:assist_structure";

        <android.app.AppOpsManager: java.lang.String OPSTR_ASSIST_SCREENSHOT> = "android:assist_screenshot";

        <android.app.AppOpsManager: java.lang.String OPSTR_ANSWER_PHONE_CALLS> = "android:answer_phone_calls";

        <android.app.AppOpsManager: java.lang.String OPSTR_ADD_VOICEMAIL> = "android:add_voicemail";

        <android.app.AppOpsManager: java.lang.String OPSTR_ACTIVITY_RECOGNITION> = "android:activity_recognition";

        <android.app.AppOpsManager: java.lang.String OPSTR_ACTIVATE_VPN> = "android:activate_vpn";

        <android.app.AppOpsManager: java.lang.String OPSTR_ACTIVATE_PLATFORM_VPN> = "android:activate_platform_vpn";

        <android.app.AppOpsManager: java.lang.String OPSTR_ACCESS_NOTIFICATIONS> = "android:access_notifications";

        <android.app.AppOpsManager: java.lang.String OPSTR_ACCESS_MEDIA_LOCATION> = "android:access_media_location";

        <android.app.AppOpsManager: java.lang.String OPSTR_ACCESS_ACCESSIBILITY> = "android:access_accessibility";

        <android.app.AppOpsManager: java.lang.String OPSTR_ACCEPT_HANDOVER> = "android:accept_handover";

        <android.app.AppOpsManager: boolean NOTE_OP_COLLECTION_ENABLED> = 0;

        <android.app.AppOpsManager: int MODE_IGNORED> = 1;

        <android.app.AppOpsManager: int MODE_FOREGROUND> = 4;

        <android.app.AppOpsManager: int MODE_ERRORED> = 2;

        <android.app.AppOpsManager: int MODE_DEFAULT> = 3;

        <android.app.AppOpsManager: int MODE_ALLOWED> = 0;

        <android.app.AppOpsManager: int MIN_PRIORITY_UID_STATE> = 700;

        <android.app.AppOpsManager: int MAX_UNFORWARDED_OPS> = 10;

        <android.app.AppOpsManager: int MAX_PRIORITY_UID_STATE> = 100;

        <android.app.AppOpsManager: java.lang.String KEY_TOP_STATE_SETTLE_TIME> = "top_state_settle_time";

        <android.app.AppOpsManager: java.lang.String KEY_HISTORICAL_OPS> = "historical_ops";

        <android.app.AppOpsManager: java.lang.String KEY_FG_SERVICE_STATE_SETTLE_TIME> = "fg_service_state_settle_time";

        <android.app.AppOpsManager: java.lang.String KEY_BG_STATE_SETTLE_TIME> = "bg_state_settle_time";

        <android.app.AppOpsManager: int HISTORICAL_MODE_ENABLED_PASSIVE> = 2;

        <android.app.AppOpsManager: int HISTORICAL_MODE_ENABLED_ACTIVE> = 1;

        <android.app.AppOpsManager: int HISTORICAL_MODE_DISABLED> = 0;

        <android.app.AppOpsManager: int FLAGS_MASK> = -1;

        <android.app.AppOpsManager: int FILTER_BY_UID> = 1;

        <android.app.AppOpsManager: int FILTER_BY_PACKAGE_NAME> = 2;

        <android.app.AppOpsManager: int FILTER_BY_OP_NAMES> = 8;

        <android.app.AppOpsManager: int FILTER_BY_ATTRIBUTION_TAG> = 4;

        <android.app.AppOpsManager: int DONT_COLLECT> = 0;

        <android.app.AppOpsManager: java.lang.String DEBUG_LOGGING_TAG> = "AppOpsManager";

        <android.app.AppOpsManager: java.lang.String DEBUG_LOGGING_PACKAGES_PROP> = "appops.logging_packages";

        <android.app.AppOpsManager: java.lang.String DEBUG_LOGGING_OPS_PROP> = "appops.logging_ops";

        <android.app.AppOpsManager: java.lang.String DEBUG_LOGGING_ENABLE_PROP> = "appops.logging_enabled";

        <android.app.AppOpsManager: int COLLECT_SYNC> = 2;

        <android.app.AppOpsManager: int COLLECT_SELF> = 1;

        <android.app.AppOpsManager: int COLLECT_ASYNC> = 3;

        <android.app.AppOpsManager: int CALL_BACK_ON_SWITCHED_OP> = 2;

        <android.app.AppOpsManager: long CALL_BACK_ON_CHANGED_LISTENER_WITH_SWITCHED_OP_CHANGE> = 148180766L;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.app.AppOpsManager: java.lang.Object sLock> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <android.app.AppOpsManager: java.util.ArrayList sUnforwardedOps> = $r2;

        $r3 = new android.app.AppOpsManager$1;

        specialinvoke $r3.<android.app.AppOpsManager$1: void <init>()>();

        <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sMessageCollector> = $r3;

        $r4 = newarray (java.lang.String)[5];

        $r4[0] = "allow";

        $r4[1] = "ignore";

        $r4[2] = "deny";

        $r4[3] = "default";

        $r4[4] = "foreground";

        <android.app.AppOpsManager: java.lang.String[] MODE_NAMES> = $r4;

        $r5 = newarray (int)[7];

        $r5[0] = 100;

        $r5[1] = 200;

        $r5[2] = 300;

        $r5[3] = 400;

        $r5[4] = 500;

        $r5[5] = 600;

        $r5[6] = 700;

        <android.app.AppOpsManager: int[] UID_STATES> = $r5;

        $r6 = newarray (int)[47];

        $r6[0] = 4;

        $r6[1] = 5;

        $r6[2] = 62;

        $r6[3] = 8;

        $r6[4] = 9;

        $r6[5] = 20;

        $r6[6] = 16;

        $r6[7] = 14;

        $r6[8] = 19;

        $r6[9] = 18;

        $r6[10] = 57;

        $r6[11] = 59;

        $r6[12] = 60;

        $r6[13] = 90;

        $r6[14] = 0;

        $r6[15] = 1;

        $r6[16] = 51;

        $r6[17] = 65;

        $r6[18] = 13;

        $r6[19] = 6;

        $r6[20] = 7;

        $r6[21] = 52;

        $r6[22] = 53;

        $r6[23] = 54;

        $r6[24] = 69;

        $r6[25] = 74;

        $r6[26] = 27;

        $r6[27] = 26;

        $r6[28] = 56;

        $r6[29] = 79;

        $r6[30] = 81;

        $r6[31] = 82;

        $r6[32] = 83;

        $r6[33] = 84;

        $r6[34] = 85;

        $r6[35] = 86;

        $r6[36] = 25;

        $r6[37] = 24;

        $r6[38] = 23;

        $r6[39] = 66;

        $r6[40] = 76;

        $r6[41] = 80;

        $r6[42] = 75;

        $r6[43] = 68;

        $r6[44] = 92;

        $r6[45] = 93;

        $r6[46] = 95;

        <android.app.AppOpsManager: int[] RUNTIME_AND_APPOP_PERMISSIONS_OPS> = $r6;

        $r7 = newarray (int)[100];

        $r7[0] = 0;

        $r7[1] = 0;

        $r7[2] = 0;

        $r7[3] = 3;

        $r7[4] = 4;

        $r7[5] = 5;

        $r7[6] = 6;

        $r7[7] = 7;

        $r7[8] = 8;

        $r7[9] = 9;

        $r7[10] = 0;

        $r7[11] = 11;

        $r7[12] = 0;

        $r7[13] = 13;

        $r7[14] = 14;

        $r7[15] = 15;

        $r7[16] = 16;

        $r7[17] = 16;

        $r7[18] = 18;

        $r7[19] = 19;

        $r7[20] = 20;

        $r7[21] = 14;

        $r7[22] = 15;

        $r7[23] = 23;

        $r7[24] = 24;

        $r7[25] = 25;

        $r7[26] = 26;

        $r7[27] = 27;

        $r7[28] = 28;

        $r7[29] = 29;

        $r7[30] = 30;

        $r7[31] = 31;

        $r7[32] = 32;

        $r7[33] = 33;

        $r7[34] = 34;

        $r7[35] = 35;

        $r7[36] = 36;

        $r7[37] = 37;

        $r7[38] = 38;

        $r7[39] = 39;

        $r7[40] = 40;

        $r7[41] = 0;

        $r7[42] = 0;

        $r7[43] = 43;

        $r7[44] = 44;

        $r7[45] = 45;

        $r7[46] = 46;

        $r7[47] = 47;

        $r7[48] = 48;

        $r7[49] = 49;

        $r7[50] = 50;

        $r7[51] = 51;

        $r7[52] = 52;

        $r7[53] = 53;

        $r7[54] = 54;

        $r7[55] = 55;

        $r7[56] = 56;

        $r7[57] = 57;

        $r7[58] = 58;

        $r7[59] = 59;

        $r7[60] = 60;

        $r7[61] = 61;

        $r7[62] = 62;

        $r7[63] = 63;

        $r7[64] = 64;

        $r7[65] = 65;

        $r7[66] = 66;

        $r7[67] = 67;

        $r7[68] = 68;

        $r7[69] = 69;

        $r7[70] = 70;

        $r7[71] = 71;

        $r7[72] = 72;

        $r7[73] = 73;

        $r7[74] = 74;

        $r7[75] = 75;

        $r7[76] = 76;

        $r7[77] = 0;

        $r7[78] = 78;

        $r7[79] = 79;

        $r7[80] = 80;

        $r7[81] = 81;

        $r7[82] = 82;

        $r7[83] = 83;

        $r7[84] = 84;

        $r7[85] = 85;

        $r7[86] = 86;

        $r7[87] = 87;

        $r7[88] = 88;

        $r7[89] = 89;

        $r7[90] = 90;

        $r7[91] = 91;

        $r7[92] = 92;

        $r7[93] = 93;

        $r7[94] = 94;

        $r7[95] = 95;

        $r7[96] = 96;

        $r7[97] = 97;

        $r7[98] = 98;

        $r7[99] = 99;

        <android.app.AppOpsManager: int[] sOpToSwitch> = $r7;

        $r8 = newarray (java.lang.String)[100];

        $r8[0] = "android:coarse_location";

        $r8[1] = "android:fine_location";

        $r8[2] = "android:gps";

        $r8[3] = "android:vibrate";

        $r8[4] = "android:read_contacts";

        $r8[5] = "android:write_contacts";

        $r8[6] = "android:read_call_log";

        $r8[7] = "android:write_call_log";

        $r8[8] = "android:read_calendar";

        $r8[9] = "android:write_calendar";

        $r8[10] = "android:wifi_scan";

        $r8[11] = "android:post_notification";

        $r8[12] = "android:neighboring_cells";

        $r8[13] = "android:call_phone";

        $r8[14] = "android:read_sms";

        $r8[15] = "android:write_sms";

        $r8[16] = "android:receive_sms";

        $r8[17] = "android:receive_emergency_broadcast";

        $r8[18] = "android:receive_mms";

        $r8[19] = "android:receive_wap_push";

        $r8[20] = "android:send_sms";

        $r8[21] = "android:read_icc_sms";

        $r8[22] = "android:write_icc_sms";

        $r8[23] = "android:write_settings";

        $r8[24] = "android:system_alert_window";

        $r8[25] = "android:access_notifications";

        $r8[26] = "android:camera";

        $r8[27] = "android:record_audio";

        $r8[28] = "android:play_audio";

        $r8[29] = "android:read_clipboard";

        $r8[30] = "android:write_clipboard";

        $r8[31] = "android:take_media_buttons";

        $r8[32] = "android:take_audio_focus";

        $r8[33] = "android:audio_master_volume";

        $r8[34] = "android:audio_voice_volume";

        $r8[35] = "android:audio_ring_volume";

        $r8[36] = "android:audio_media_volume";

        $r8[37] = "android:audio_alarm_volume";

        $r8[38] = "android:audio_notification_volume";

        $r8[39] = "android:audio_bluetooth_volume";

        $r8[40] = "android:wake_lock";

        $r8[41] = "android:monitor_location";

        $r8[42] = "android:monitor_location_high_power";

        $r8[43] = "android:get_usage_stats";

        $r8[44] = "android:mute_microphone";

        $r8[45] = "android:toast_window";

        $r8[46] = "android:project_media";

        $r8[47] = "android:activate_vpn";

        $r8[48] = "android:write_wallpaper";

        $r8[49] = "android:assist_structure";

        $r8[50] = "android:assist_screenshot";

        $r8[51] = "android:read_phone_state";

        $r8[52] = "android:add_voicemail";

        $r8[53] = "android:use_sip";

        $r8[54] = "android:process_outgoing_calls";

        $r8[55] = "android:use_fingerprint";

        $r8[56] = "android:body_sensors";

        $r8[57] = "android:read_cell_broadcasts";

        $r8[58] = "android:mock_location";

        $r8[59] = "android:read_external_storage";

        $r8[60] = "android:write_external_storage";

        $r8[61] = "android:turn_screen_on";

        $r8[62] = "android:get_accounts";

        $r8[63] = "android:run_in_background";

        $r8[64] = "android:audio_accessibility_volume";

        $r8[65] = "android:read_phone_numbers";

        $r8[66] = "android:request_install_packages";

        $r8[67] = "android:picture_in_picture";

        $r8[68] = "android:instant_app_start_foreground";

        $r8[69] = "android:answer_phone_calls";

        $r8[70] = "android:run_any_in_background";

        $r8[71] = "android:change_wifi_state";

        $r8[72] = "android:request_delete_packages";

        $r8[73] = "android:bind_accessibility_service";

        $r8[74] = "android:accept_handover";

        $r8[75] = "android:manage_ipsec_tunnels";

        $r8[76] = "android:start_foreground";

        $r8[77] = "android:bluetooth_scan";

        $r8[78] = "android:use_biometric";

        $r8[79] = "android:activity_recognition";

        $r8[80] = "android:sms_financial_transactions";

        $r8[81] = "android:read_media_audio";

        $r8[82] = "android:write_media_audio";

        $r8[83] = "android:read_media_video";

        $r8[84] = "android:write_media_video";

        $r8[85] = "android:read_media_images";

        $r8[86] = "android:write_media_images";

        $r8[87] = "android:legacy_storage";

        $r8[88] = "android:access_accessibility";

        $r8[89] = "android:read_device_identifiers";

        $r8[90] = "android:access_media_location";

        $r8[91] = "android:query_all_packages";

        $r8[92] = "android:manage_external_storage";

        $r8[93] = "android:interact_across_profiles";

        $r8[94] = "android:activate_platform_vpn";

        $r8[95] = "android:loader_usage_stats";

        $r8[96] = "";

        $r8[97] = "android:auto_revoke_permissions_if_unused";

        $r8[98] = "android:auto_revoke_managed_by_installer";

        $r8[99] = "android:no_isolated_storage";

        <android.app.AppOpsManager: java.lang.String[] sOpToString> = $r8;

        $r9 = newarray (java.lang.String)[100];

        $r9[0] = "COARSE_LOCATION";

        $r9[1] = "FINE_LOCATION";

        $r9[2] = "GPS";

        $r9[3] = "VIBRATE";

        $r9[4] = "READ_CONTACTS";

        $r9[5] = "WRITE_CONTACTS";

        $r9[6] = "READ_CALL_LOG";

        $r9[7] = "WRITE_CALL_LOG";

        $r9[8] = "READ_CALENDAR";

        $r9[9] = "WRITE_CALENDAR";

        $r9[10] = "WIFI_SCAN";

        $r9[11] = "POST_NOTIFICATION";

        $r9[12] = "NEIGHBORING_CELLS";

        $r9[13] = "CALL_PHONE";

        $r9[14] = "READ_SMS";

        $r9[15] = "WRITE_SMS";

        $r9[16] = "RECEIVE_SMS";

        $r9[17] = "RECEIVE_EMERGECY_SMS";

        $r9[18] = "RECEIVE_MMS";

        $r9[19] = "RECEIVE_WAP_PUSH";

        $r9[20] = "SEND_SMS";

        $r9[21] = "READ_ICC_SMS";

        $r9[22] = "WRITE_ICC_SMS";

        $r9[23] = "WRITE_SETTINGS";

        $r9[24] = "SYSTEM_ALERT_WINDOW";

        $r9[25] = "ACCESS_NOTIFICATIONS";

        $r9[26] = "CAMERA";

        $r9[27] = "RECORD_AUDIO";

        $r9[28] = "PLAY_AUDIO";

        $r9[29] = "READ_CLIPBOARD";

        $r9[30] = "WRITE_CLIPBOARD";

        $r9[31] = "TAKE_MEDIA_BUTTONS";

        $r9[32] = "TAKE_AUDIO_FOCUS";

        $r9[33] = "AUDIO_MASTER_VOLUME";

        $r9[34] = "AUDIO_VOICE_VOLUME";

        $r9[35] = "AUDIO_RING_VOLUME";

        $r9[36] = "AUDIO_MEDIA_VOLUME";

        $r9[37] = "AUDIO_ALARM_VOLUME";

        $r9[38] = "AUDIO_NOTIFICATION_VOLUME";

        $r9[39] = "AUDIO_BLUETOOTH_VOLUME";

        $r9[40] = "WAKE_LOCK";

        $r9[41] = "MONITOR_LOCATION";

        $r9[42] = "MONITOR_HIGH_POWER_LOCATION";

        $r9[43] = "GET_USAGE_STATS";

        $r9[44] = "MUTE_MICROPHONE";

        $r9[45] = "TOAST_WINDOW";

        $r9[46] = "PROJECT_MEDIA";

        $r9[47] = "ACTIVATE_VPN";

        $r9[48] = "WRITE_WALLPAPER";

        $r9[49] = "ASSIST_STRUCTURE";

        $r9[50] = "ASSIST_SCREENSHOT";

        $r9[51] = "READ_PHONE_STATE";

        $r9[52] = "ADD_VOICEMAIL";

        $r9[53] = "USE_SIP";

        $r9[54] = "PROCESS_OUTGOING_CALLS";

        $r9[55] = "USE_FINGERPRINT";

        $r9[56] = "BODY_SENSORS";

        $r9[57] = "READ_CELL_BROADCASTS";

        $r9[58] = "MOCK_LOCATION";

        $r9[59] = "READ_EXTERNAL_STORAGE";

        $r9[60] = "WRITE_EXTERNAL_STORAGE";

        $r9[61] = "TURN_ON_SCREEN";

        $r9[62] = "GET_ACCOUNTS";

        $r9[63] = "RUN_IN_BACKGROUND";

        $r9[64] = "AUDIO_ACCESSIBILITY_VOLUME";

        $r9[65] = "READ_PHONE_NUMBERS";

        $r9[66] = "REQUEST_INSTALL_PACKAGES";

        $r9[67] = "PICTURE_IN_PICTURE";

        $r9[68] = "INSTANT_APP_START_FOREGROUND";

        $r9[69] = "ANSWER_PHONE_CALLS";

        $r9[70] = "RUN_ANY_IN_BACKGROUND";

        $r9[71] = "CHANGE_WIFI_STATE";

        $r9[72] = "REQUEST_DELETE_PACKAGES";

        $r9[73] = "BIND_ACCESSIBILITY_SERVICE";

        $r9[74] = "ACCEPT_HANDOVER";

        $r9[75] = "MANAGE_IPSEC_TUNNELS";

        $r9[76] = "START_FOREGROUND";

        $r9[77] = "BLUETOOTH_SCAN";

        $r9[78] = "USE_BIOMETRIC";

        $r9[79] = "ACTIVITY_RECOGNITION";

        $r9[80] = "SMS_FINANCIAL_TRANSACTIONS";

        $r9[81] = "READ_MEDIA_AUDIO";

        $r9[82] = "WRITE_MEDIA_AUDIO";

        $r9[83] = "READ_MEDIA_VIDEO";

        $r9[84] = "WRITE_MEDIA_VIDEO";

        $r9[85] = "READ_MEDIA_IMAGES";

        $r9[86] = "WRITE_MEDIA_IMAGES";

        $r9[87] = "LEGACY_STORAGE";

        $r9[88] = "ACCESS_ACCESSIBILITY";

        $r9[89] = "READ_DEVICE_IDENTIFIERS";

        $r9[90] = "ACCESS_MEDIA_LOCATION";

        $r9[91] = "QUERY_ALL_PACKAGES";

        $r9[92] = "MANAGE_EXTERNAL_STORAGE";

        $r9[93] = "INTERACT_ACROSS_PROFILES";

        $r9[94] = "ACTIVATE_PLATFORM_VPN";

        $r9[95] = "LOADER_USAGE_STATS";

        $r9[96] = "deprecated";

        $r9[97] = "AUTO_REVOKE_PERMISSIONS_IF_UNUSED";

        $r9[98] = "AUTO_REVOKE_MANAGED_BY_INSTALLER";

        $r9[99] = "NO_ISOLATED_STORAGE";

        <android.app.AppOpsManager: java.lang.String[] sOpNames> = $r9;

        $r10 = newarray (java.lang.String)[100];

        $r10[0] = "android.permission.ACCESS_COARSE_LOCATION";

        $r10[1] = "android.permission.ACCESS_FINE_LOCATION";

        $r10[2] = null;

        $r10[3] = "android.permission.VIBRATE";

        $r10[4] = "android.permission.READ_CONTACTS";

        $r10[5] = "android.permission.WRITE_CONTACTS";

        $r10[6] = "android.permission.READ_CALL_LOG";

        $r10[7] = "android.permission.WRITE_CALL_LOG";

        $r10[8] = "android.permission.READ_CALENDAR";

        $r10[9] = "android.permission.WRITE_CALENDAR";

        $r10[10] = "android.permission.ACCESS_WIFI_STATE";

        $r10[11] = null;

        $r10[12] = null;

        $r10[13] = "android.permission.CALL_PHONE";

        $r10[14] = "android.permission.READ_SMS";

        $r10[15] = null;

        $r10[16] = "android.permission.RECEIVE_SMS";

        $r10[17] = "android.permission.RECEIVE_EMERGENCY_BROADCAST";

        $r10[18] = "android.permission.RECEIVE_MMS";

        $r10[19] = "android.permission.RECEIVE_WAP_PUSH";

        $r10[20] = "android.permission.SEND_SMS";

        $r10[21] = "android.permission.READ_SMS";

        $r10[22] = null;

        $r10[23] = "android.permission.WRITE_SETTINGS";

        $r10[24] = "android.permission.SYSTEM_ALERT_WINDOW";

        $r10[25] = "android.permission.ACCESS_NOTIFICATIONS";

        $r10[26] = "android.permission.CAMERA";

        $r10[27] = "android.permission.RECORD_AUDIO";

        $r10[28] = null;

        $r10[29] = null;

        $r10[30] = null;

        $r10[31] = null;

        $r10[32] = null;

        $r10[33] = null;

        $r10[34] = null;

        $r10[35] = null;

        $r10[36] = null;

        $r10[37] = null;

        $r10[38] = null;

        $r10[39] = null;

        $r10[40] = "android.permission.WAKE_LOCK";

        $r10[41] = null;

        $r10[42] = null;

        $r10[43] = "android.permission.PACKAGE_USAGE_STATS";

        $r10[44] = null;

        $r10[45] = null;

        $r10[46] = null;

        $r10[47] = null;

        $r10[48] = null;

        $r10[49] = null;

        $r10[50] = null;

        $r10[51] = "android.permission.READ_PHONE_STATE";

        $r10[52] = "com.android.voicemail.permission.ADD_VOICEMAIL";

        $r10[53] = "android.permission.USE_SIP";

        $r10[54] = "android.permission.PROCESS_OUTGOING_CALLS";

        $r10[55] = "android.permission.USE_FINGERPRINT";

        $r10[56] = "android.permission.BODY_SENSORS";

        $r10[57] = "android.permission.READ_CELL_BROADCASTS";

        $r10[58] = null;

        $r10[59] = "android.permission.READ_EXTERNAL_STORAGE";

        $r10[60] = "android.permission.WRITE_EXTERNAL_STORAGE";

        $r10[61] = null;

        $r10[62] = "android.permission.GET_ACCOUNTS";

        $r10[63] = null;

        $r10[64] = null;

        $r10[65] = "android.permission.READ_PHONE_NUMBERS";

        $r10[66] = "android.permission.REQUEST_INSTALL_PACKAGES";

        $r10[67] = null;

        $r10[68] = "android.permission.INSTANT_APP_FOREGROUND_SERVICE";

        $r10[69] = "android.permission.ANSWER_PHONE_CALLS";

        $r10[70] = null;

        $r10[71] = "android.permission.CHANGE_WIFI_STATE";

        $r10[72] = "android.permission.REQUEST_DELETE_PACKAGES";

        $r10[73] = "android.permission.BIND_ACCESSIBILITY_SERVICE";

        $r10[74] = "android.permission.ACCEPT_HANDOVER";

        $r10[75] = "android.permission.MANAGE_IPSEC_TUNNELS";

        $r10[76] = "android.permission.FOREGROUND_SERVICE";

        $r10[77] = null;

        $r10[78] = "android.permission.USE_BIOMETRIC";

        $r10[79] = "android.permission.ACTIVITY_RECOGNITION";

        $r10[80] = "android.permission.SMS_FINANCIAL_TRANSACTIONS";

        $r10[81] = null;

        $r10[82] = null;

        $r10[83] = null;

        $r10[84] = null;

        $r10[85] = null;

        $r10[86] = null;

        $r10[87] = null;

        $r10[88] = null;

        $r10[89] = null;

        $r10[90] = "android.permission.ACCESS_MEDIA_LOCATION";

        $r10[91] = null;

        $r10[92] = "android.permission.MANAGE_EXTERNAL_STORAGE";

        $r10[93] = "android.permission.INTERACT_ACROSS_PROFILES";

        $r10[94] = null;

        $r10[95] = "android.permission.LOADER_USAGE_STATS";

        $r10[96] = null;

        $r10[97] = null;

        $r10[98] = null;

        $r10[99] = null;

        <android.app.AppOpsManager: java.lang.String[] sOpPerms> = $r10;

        $r11 = newarray (java.lang.String)[100];

        $r11[0] = "no_share_location";

        $r11[1] = "no_share_location";

        $r11[2] = "no_share_location";

        $r11[3] = null;

        $r11[4] = null;

        $r11[5] = null;

        $r11[6] = "no_outgoing_calls";

        $r11[7] = "no_outgoing_calls";

        $r11[8] = null;

        $r11[9] = null;

        $r11[10] = "no_share_location";

        $r11[11] = null;

        $r11[12] = null;

        $r11[13] = null;

        $r11[14] = "no_sms";

        $r11[15] = "no_sms";

        $r11[16] = "no_sms";

        $r11[17] = null;

        $r11[18] = "no_sms";

        $r11[19] = null;

        $r11[20] = "no_sms";

        $r11[21] = "no_sms";

        $r11[22] = "no_sms";

        $r11[23] = null;

        $r11[24] = "no_create_windows";

        $r11[25] = null;

        $r11[26] = "no_camera";

        $r11[27] = "no_record_audio";

        $r11[28] = null;

        $r11[29] = null;

        $r11[30] = null;

        $r11[31] = null;

        $r11[32] = null;

        $r11[33] = "no_adjust_volume";

        $r11[34] = "no_adjust_volume";

        $r11[35] = "no_adjust_volume";

        $r11[36] = "no_adjust_volume";

        $r11[37] = "no_adjust_volume";

        $r11[38] = "no_adjust_volume";

        $r11[39] = "no_adjust_volume";

        $r11[40] = null;

        $r11[41] = "no_share_location";

        $r11[42] = "no_share_location";

        $r11[43] = null;

        $r11[44] = "no_unmute_microphone";

        $r11[45] = "no_create_windows";

        $r11[46] = null;

        $r11[47] = null;

        $r11[48] = "no_wallpaper";

        $r11[49] = null;

        $r11[50] = null;

        $r11[51] = null;

        $r11[52] = null;

        $r11[53] = null;

        $r11[54] = null;

        $r11[55] = null;

        $r11[56] = null;

        $r11[57] = null;

        $r11[58] = null;

        $r11[59] = null;

        $r11[60] = null;

        $r11[61] = null;

        $r11[62] = null;

        $r11[63] = null;

        $r11[64] = "no_adjust_volume";

        $r11[65] = null;

        $r11[66] = null;

        $r11[67] = null;

        $r11[68] = null;

        $r11[69] = null;

        $r11[70] = null;

        $r11[71] = null;

        $r11[72] = null;

        $r11[73] = null;

        $r11[74] = null;

        $r11[75] = null;

        $r11[76] = null;

        $r11[77] = null;

        $r11[78] = null;

        $r11[79] = null;

        $r11[80] = "no_sms";

        $r11[81] = null;

        $r11[82] = null;

        $r11[83] = null;

        $r11[84] = null;

        $r11[85] = null;

        $r11[86] = null;

        $r11[87] = null;

        $r11[88] = null;

        $r11[89] = null;

        $r11[90] = null;

        $r11[91] = null;

        $r11[92] = null;

        $r11[93] = null;

        $r11[94] = null;

        $r11[95] = null;

        $r11[96] = null;

        $r11[97] = null;

        $r11[98] = null;

        $r11[99] = null;

        <android.app.AppOpsManager: java.lang.String[] sOpRestrictions> = $r11;

        $r12 = newarray (android.app.AppOpsManager$RestrictionBypass)[100];

        $r13 = new android.app.AppOpsManager$RestrictionBypass;

        specialinvoke $r13.<android.app.AppOpsManager$RestrictionBypass: void <init>(boolean,boolean)>(1, 0);

        $r12[0] = $r13;

        $r14 = new android.app.AppOpsManager$RestrictionBypass;

        specialinvoke $r14.<android.app.AppOpsManager$RestrictionBypass: void <init>(boolean,boolean)>(1, 0);

        $r12[1] = $r14;

        $r12[2] = null;

        $r12[3] = null;

        $r12[4] = null;

        $r12[5] = null;

        $r12[6] = null;

        $r12[7] = null;

        $r12[8] = null;

        $r12[9] = null;

        $r15 = new android.app.AppOpsManager$RestrictionBypass;

        specialinvoke $r15.<android.app.AppOpsManager$RestrictionBypass: void <init>(boolean,boolean)>(1, 0);

        $r12[10] = $r15;

        $r12[11] = null;

        $r12[12] = null;

        $r12[13] = null;

        $r12[14] = null;

        $r12[15] = null;

        $r12[16] = null;

        $r12[17] = null;

        $r12[18] = null;

        $r12[19] = null;

        $r12[20] = null;

        $r12[21] = null;

        $r12[22] = null;

        $r12[23] = null;

        $r16 = new android.app.AppOpsManager$RestrictionBypass;

        specialinvoke $r16.<android.app.AppOpsManager$RestrictionBypass: void <init>(boolean,boolean)>(1, 0);

        $r12[24] = $r16;

        $r12[25] = null;

        $r12[26] = null;

        $r17 = new android.app.AppOpsManager$RestrictionBypass;

        specialinvoke $r17.<android.app.AppOpsManager$RestrictionBypass: void <init>(boolean,boolean)>(0, 1);

        $r12[27] = $r17;

        $r12[28] = null;

        $r12[29] = null;

        $r12[30] = null;

        $r12[31] = null;

        $r12[32] = null;

        $r12[33] = null;

        $r12[34] = null;

        $r12[35] = null;

        $r12[36] = null;

        $r12[37] = null;

        $r12[38] = null;

        $r12[39] = null;

        $r12[40] = null;

        $r12[41] = null;

        $r12[42] = null;

        $r12[43] = null;

        $r12[44] = null;

        $r18 = new android.app.AppOpsManager$RestrictionBypass;

        specialinvoke $r18.<android.app.AppOpsManager$RestrictionBypass: void <init>(boolean,boolean)>(1, 0);

        $r12[45] = $r18;

        $r12[46] = null;

        $r12[47] = null;

        $r12[48] = null;

        $r12[49] = null;

        $r12[50] = null;

        $r12[51] = null;

        $r12[52] = null;

        $r12[53] = null;

        $r12[54] = null;

        $r12[55] = null;

        $r12[56] = null;

        $r12[57] = null;

        $r12[58] = null;

        $r12[59] = null;

        $r12[60] = null;

        $r12[61] = null;

        $r12[62] = null;

        $r12[63] = null;

        $r12[64] = null;

        $r12[65] = null;

        $r12[66] = null;

        $r12[67] = null;

        $r12[68] = null;

        $r12[69] = null;

        $r12[70] = null;

        $r12[71] = null;

        $r12[72] = null;

        $r12[73] = null;

        $r12[74] = null;

        $r12[75] = null;

        $r12[76] = null;

        $r19 = new android.app.AppOpsManager$RestrictionBypass;

        specialinvoke $r19.<android.app.AppOpsManager$RestrictionBypass: void <init>(boolean,boolean)>(1, 0);

        $r12[77] = $r19;

        $r12[78] = null;

        $r12[79] = null;

        $r12[80] = null;

        $r12[81] = null;

        $r12[82] = null;

        $r12[83] = null;

        $r12[84] = null;

        $r12[85] = null;

        $r12[86] = null;

        $r12[87] = null;

        $r12[88] = null;

        $r12[89] = null;

        $r12[90] = null;

        $r12[91] = null;

        $r12[92] = null;

        $r12[93] = null;

        $r12[94] = null;

        $r12[95] = null;

        $r12[96] = null;

        $r12[97] = null;

        $r12[98] = null;

        $r12[99] = null;

        <android.app.AppOpsManager: android.app.AppOpsManager$RestrictionBypass[] sOpAllowSystemRestrictionBypass> = $r12;

        $r20 = newarray (int)[100];

        $r20[0] = 0;

        $r20[1] = 0;

        $r20[2] = 0;

        $r20[3] = 0;

        $r20[4] = 0;

        $r20[5] = 0;

        $r20[6] = 0;

        $r20[7] = 0;

        $r20[8] = 0;

        $r20[9] = 0;

        $r20[10] = 0;

        $r20[11] = 0;

        $r20[12] = 0;

        $r20[13] = 0;

        $r20[14] = 0;

        $r20[15] = 1;

        $r20[16] = 0;

        $r20[17] = 0;

        $r20[18] = 0;

        $r20[19] = 0;

        $r20[20] = 0;

        $r20[21] = 0;

        $r20[22] = 0;

        $r20[23] = 3;

        $i2 = staticinvoke <android.app.AppOpsManager: int getSystemAlertWindowDefault()>();

        $r20[24] = $i2;

        $r20[25] = 0;

        $r20[26] = 0;

        $r20[27] = 0;

        $r20[28] = 0;

        $r20[29] = 0;

        $r20[30] = 0;

        $r20[31] = 0;

        $r20[32] = 0;

        $r20[33] = 0;

        $r20[34] = 0;

        $r20[35] = 0;

        $r20[36] = 0;

        $r20[37] = 0;

        $r20[38] = 0;

        $r20[39] = 0;

        $r20[40] = 0;

        $r20[41] = 0;

        $r20[42] = 0;

        $r20[43] = 3;

        $r20[44] = 0;

        $r20[45] = 0;

        $r20[46] = 1;

        $r20[47] = 1;

        $r20[48] = 0;

        $r20[49] = 0;

        $r20[50] = 0;

        $r20[51] = 0;

        $r20[52] = 0;

        $r20[53] = 0;

        $r20[54] = 0;

        $r20[55] = 0;

        $r20[56] = 0;

        $r20[57] = 0;

        $r20[58] = 2;

        $r20[59] = 0;

        $r20[60] = 0;

        $r20[61] = 0;

        $r20[62] = 0;

        $r20[63] = 0;

        $r20[64] = 0;

        $r20[65] = 0;

        $r20[66] = 3;

        $r20[67] = 0;

        $r20[68] = 3;

        $r20[69] = 0;

        $r20[70] = 0;

        $r20[71] = 0;

        $r20[72] = 0;

        $r20[73] = 0;

        $r20[74] = 0;

        $r20[75] = 2;

        $r20[76] = 0;

        $r20[77] = 0;

        $r20[78] = 0;

        $r20[79] = 0;

        $r20[80] = 3;

        $r20[81] = 0;

        $r20[82] = 2;

        $r20[83] = 0;

        $r20[84] = 2;

        $r20[85] = 0;

        $r20[86] = 2;

        $r20[87] = 3;

        $r20[88] = 0;

        $r20[89] = 2;

        $r20[90] = 0;

        $r20[91] = 3;

        $r20[92] = 3;

        $r20[93] = 3;

        $r20[94] = 1;

        $r20[95] = 3;

        $r20[96] = 1;

        $r20[97] = 3;

        $r20[98] = 0;

        $r20[99] = 2;

        <android.app.AppOpsManager: int[] sOpDefaultMode> = $r20;

        $r21 = newarray (boolean)[100];

        $r21[0] = 0;

        $r21[1] = 0;

        $r21[2] = 0;

        $r21[3] = 0;

        $r21[4] = 0;

        $r21[5] = 0;

        $r21[6] = 0;

        $r21[7] = 0;

        $r21[8] = 0;

        $r21[9] = 0;

        $r21[10] = 0;

        $r21[11] = 0;

        $r21[12] = 0;

        $r21[13] = 0;

        $r21[14] = 1;

        $r21[15] = 1;

        $r21[16] = 1;

        $r21[17] = 0;

        $r21[18] = 0;

        $r21[19] = 1;

        $r21[20] = 1;

        $r21[21] = 0;

        $r21[22] = 0;

        $r21[23] = 0;

        $r21[24] = 0;

        $r21[25] = 0;

        $r21[26] = 0;

        $r21[27] = 0;

        $r21[28] = 0;

        $r21[29] = 0;

        $r21[30] = 0;

        $r21[31] = 0;

        $r21[32] = 0;

        $r21[33] = 0;

        $r21[34] = 0;

        $r21[35] = 0;

        $r21[36] = 0;

        $r21[37] = 0;

        $r21[38] = 0;

        $r21[39] = 0;

        $r21[40] = 0;

        $r21[41] = 0;

        $r21[42] = 0;

        $r21[43] = 0;

        $r21[44] = 0;

        $r21[45] = 0;

        $r21[46] = 0;

        $r21[47] = 0;

        $r21[48] = 0;

        $r21[49] = 0;

        $r21[50] = 0;

        $r21[51] = 0;

        $r21[52] = 0;

        $r21[53] = 0;

        $r21[54] = 0;

        $r21[55] = 0;

        $r21[56] = 0;

        $r21[57] = 1;

        $r21[58] = 0;

        $r21[59] = 0;

        $r21[60] = 0;

        $r21[61] = 0;

        $r21[62] = 0;

        $r21[63] = 0;

        $r21[64] = 0;

        $r21[65] = 0;

        $r21[66] = 0;

        $r21[67] = 0;

        $r21[68] = 0;

        $r21[69] = 0;

        $r21[70] = 0;

        $r21[71] = 0;

        $r21[72] = 0;

        $r21[73] = 0;

        $r21[74] = 0;

        $r21[75] = 0;

        $r21[76] = 0;

        $r21[77] = 0;

        $r21[78] = 0;

        $r21[79] = 0;

        $r21[80] = 0;

        $r21[81] = 0;

        $r21[82] = 0;

        $r21[83] = 0;

        $r21[84] = 0;

        $r21[85] = 0;

        $r21[86] = 0;

        $r21[87] = 1;

        $r21[88] = 0;

        $r21[89] = 0;

        $r21[90] = 0;

        $r21[91] = 0;

        $r21[92] = 0;

        $r21[93] = 0;

        $r21[94] = 0;

        $r21[95] = 0;

        $r21[96] = 0;

        $r21[97] = 0;

        $r21[98] = 0;

        $r21[99] = 1;

        <android.app.AppOpsManager: boolean[] sOpDisableReset> = $r21;

        $r22 = new java.util.HashMap;

        specialinvoke $r22.<java.util.HashMap: void <init>()>();

        <android.app.AppOpsManager: java.util.HashMap sOpStrToOp> = $r22;

        $r23 = new java.util.HashMap;

        specialinvoke $r23.<java.util.HashMap: void <init>()>();

        <android.app.AppOpsManager: java.util.HashMap sPermToOp> = $r23;

        $r24 = new java.lang.ThreadLocal;

        specialinvoke $r24.<java.lang.ThreadLocal: void <init>()>();

        <android.app.AppOpsManager: java.lang.ThreadLocal sBinderThreadCallingUid> = $r24;

        $r25 = new java.lang.ThreadLocal;

        specialinvoke $r25.<java.lang.ThreadLocal: void <init>()>();

        <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction> = $r25;

        $r26 = newarray (byte)[100];

        <android.app.AppOpsManager: byte[] sAppOpsToNote> = $r26;

        $r27 = <android.app.AppOpsManager: int[] sOpToSwitch>;

        $i3 = lengthof $r27;

        if $i3 != 100 goto label14;

        $r36 = <android.app.AppOpsManager: java.lang.String[] sOpToString>;

        $i5 = lengthof $r36;

        if $i5 != 100 goto label13;

        $r45 = <android.app.AppOpsManager: java.lang.String[] sOpNames>;

        $i7 = lengthof $r45;

        if $i7 != 100 goto label12;

        $r54 = <android.app.AppOpsManager: java.lang.String[] sOpPerms>;

        $i9 = lengthof $r54;

        if $i9 != 100 goto label11;

        $r63 = <android.app.AppOpsManager: int[] sOpDefaultMode>;

        $i11 = lengthof $r63;

        if $i11 != 100 goto label10;

        $r72 = <android.app.AppOpsManager: boolean[] sOpDisableReset>;

        $i13 = lengthof $r72;

        if $i13 != 100 goto label09;

        $r81 = <android.app.AppOpsManager: java.lang.String[] sOpRestrictions>;

        $i15 = lengthof $r81;

        if $i15 != 100 goto label08;

        $r90 = <android.app.AppOpsManager: android.app.AppOpsManager$RestrictionBypass[] sOpAllowSystemRestrictionBypass>;

        $i17 = lengthof $r90;

        if $i17 != 100 goto label07;

        i19 = 0;

     label01:
        if i19 >= 100 goto label03;

        r110 = <android.app.AppOpsManager: java.lang.String[] sOpToString>;

        $r105 = r110[i19];

        if $r105 == null goto label02;

        $r106 = <android.app.AppOpsManager: java.util.HashMap sOpStrToOp>;

        $r107 = r110[i19];

        $r108 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i19);

        virtualinvoke $r106.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r107, $r108);

     label02:
        i19 = i19 + 1;

        goto label01;

     label03:
        r0 = <android.app.AppOpsManager: int[] RUNTIME_AND_APPOP_PERMISSIONS_OPS>;

        i0 = lengthof r0;

        i20 = 0;

     label04:
        if i20 >= i0 goto label06;

        i1 = r0[i20];

        r111 = <android.app.AppOpsManager: java.lang.String[] sOpPerms>;

        $r100 = r111[i1];

        if $r100 == null goto label05;

        $r101 = <android.app.AppOpsManager: java.util.HashMap sPermToOp>;

        $r102 = r111[i1];

        $r103 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r101.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r102, $r103);

     label05:
        i20 = i20 + 1;

        goto label04;

     label06:
        $r99 = new com.android.internal.app.MessageSamplingConfig;

        specialinvoke $r99.<com.android.internal.app.MessageSamplingConfig: void <init>(int,int,long)>(-1, 0, 0L);

        <android.app.AppOpsManager: com.android.internal.app.MessageSamplingConfig sConfig> = $r99;

        return;

     label07:
        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpAllowSYstemRestrictionsBypass length ");

        $r93 = <android.app.AppOpsManager: java.lang.String[] sOpRestrictions>;

        $i18 = lengthof $r93;

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r97 = new java.lang.IllegalStateException;

        $r98 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r97.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r98);

        throw $r97;

     label08:
        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpRestrictions length ");

        $r84 = <android.app.AppOpsManager: java.lang.String[] sOpRestrictions>;

        $i16 = lengthof $r84;

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r88 = new java.lang.IllegalStateException;

        $r89 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r88.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r89);

        throw $r88;

     label09:
        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpDisableReset length ");

        $r75 = <android.app.AppOpsManager: boolean[] sOpDisableReset>;

        $i14 = lengthof $r75;

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r79 = new java.lang.IllegalStateException;

        $r80 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r79.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r80);

        throw $r79;

     label10:
        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpDefaultMode length ");

        $r66 = <android.app.AppOpsManager: int[] sOpDefaultMode>;

        $i12 = lengthof $r66;

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r70 = new java.lang.IllegalStateException;

        $r71 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r70.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r71);

        throw $r70;

     label11:
        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpPerms length ");

        $r57 = <android.app.AppOpsManager: java.lang.String[] sOpPerms>;

        $i10 = lengthof $r57;

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r61 = new java.lang.IllegalStateException;

        $r62 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r62);

        throw $r61;

     label12:
        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpNames length ");

        $r48 = <android.app.AppOpsManager: java.lang.String[] sOpNames>;

        $i8 = lengthof $r48;

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r52 = new java.lang.IllegalStateException;

        $r53 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r53);

        throw $r52;

     label13:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpToString length ");

        $r39 = <android.app.AppOpsManager: java.lang.String[] sOpToString>;

        $i6 = lengthof $r39;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r43 = new java.lang.IllegalStateException;

        $r44 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r44);

        throw $r43;

     label14:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sOpToSwitch length ");

        $r30 = <android.app.AppOpsManager: int[] sOpToSwitch>;

        $i4 = lengthof $r30;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r34 = new java.lang.IllegalStateException;

        $r35 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35);

        throw $r34;

        return;
    }

    void <init>(android.content.Context, com.android.internal.app.IAppOpsService)
    {
        android.app.AppOpsManager r0;
        android.content.Context r1;
        com.android.internal.app.IAppOpsService r2;
        android.util.ArrayMap $r3, $r4, $r5, $r6;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.app.IAppOpsService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.AppOpsManager: android.util.ArrayMap mModeWatchers> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.AppOpsManager: android.util.ArrayMap mActiveWatchers> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.AppOpsManager: android.util.ArrayMap mStartedWatchers> = $r5;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.AppOpsManager: android.util.ArrayMap mNotedWatchers> = $r6;

        r0.<android.app.AppOpsManager: android.content.Context mContext> = r1;

        r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService> = r2;

        return;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = staticinvoke <android.app.AppOpsManager: boolean isCollectingStackTraces()>();

        return $z0;
    }

    static com.android.internal.app.MessageSamplingConfig access$100()
    {
        com.android.internal.app.MessageSamplingConfig $r0;

        $r0 = <android.app.AppOpsManager: com.android.internal.app.MessageSamplingConfig sConfig>;

        return $r0;
    }

    static com.android.internal.app.MessageSamplingConfig access$102(com.android.internal.app.MessageSamplingConfig)
    {
        com.android.internal.app.MessageSamplingConfig r0;

        r0 := @parameter0: com.android.internal.app.MessageSamplingConfig;

        <android.app.AppOpsManager: com.android.internal.app.MessageSamplingConfig sConfig> = r0;

        return r0;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <android.app.AppOpsManager: java.lang.String getFormattedStackTrace()>();

        return $r0;
    }

    static com.android.internal.app.IAppOpsService access$300()
    {
        com.android.internal.app.IAppOpsService $r0;

        $r0 = staticinvoke <android.app.AppOpsManager: com.android.internal.app.IAppOpsService getService()>();

        return $r0;
    }

    static android.app.AppOpsManager$NoteOpEvent access$400(android.util.LongSparseArray, int, int, int)
    {
        android.util.LongSparseArray r0;
        int i0, i1, i2;
        android.app.AppOpsManager$NoteOpEvent $r1;

        r0 := @parameter0: android.util.LongSparseArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = staticinvoke <android.app.AppOpsManager: android.app.AppOpsManager$NoteOpEvent getLastEvent(android.util.LongSparseArray,int,int,int)>(r0, i0, i1, i2);

        return $r1;
    }

    static android.util.LongSparseLongArray access$5000(android.os.Parcel)
    {
        android.os.Parcel r0;
        android.util.LongSparseLongArray $r1;

        r0 := @parameter0: android.os.Parcel;

        $r1 = staticinvoke <android.app.AppOpsManager: android.util.LongSparseLongArray readLongSparseLongArrayFromParcel(android.os.Parcel)>(r0);

        return $r1;
    }

    static long access$5100(android.util.LongSparseLongArray, int, int, int)
    {
        android.util.LongSparseLongArray r0;
        int i0, i1, i2;
        long $l3;

        r0 := @parameter0: android.util.LongSparseLongArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l3 = staticinvoke <android.app.AppOpsManager: long sumForFlagsInStates(android.util.LongSparseLongArray,int,int,int)>(r0, i0, i1, i2);

        return $l3;
    }

    static void access$5200(android.util.LongSparseLongArray, android.os.Parcel)
    {
        android.util.LongSparseLongArray r0;
        android.os.Parcel r1;

        r0 := @parameter0: android.util.LongSparseLongArray;

        r1 := @parameter1: android.os.Parcel;

        staticinvoke <android.app.AppOpsManager: void writeLongSparseLongArrayToParcel(android.util.LongSparseLongArray,android.os.Parcel)>(r0, r1);

        return;
    }

    static boolean access$5300(android.util.LongSparseLongArray, android.util.LongSparseLongArray)
    {
        android.util.LongSparseLongArray r0, r1;
        boolean $z0;

        r0 := @parameter0: android.util.LongSparseLongArray;

        r1 := @parameter1: android.util.LongSparseLongArray;

        $z0 = staticinvoke <android.app.AppOpsManager: boolean equalsLongSparseLongArray(android.util.LongSparseLongArray,android.util.LongSparseLongArray)>(r0, r1);

        return $z0;
    }

    static android.util.LongSparseArray access$5400(android.util.LongSparseLongArray, android.util.LongSparseArray)
    {
        android.util.LongSparseLongArray r0;
        android.util.LongSparseArray r1, $r2;

        r0 := @parameter0: android.util.LongSparseLongArray;

        r1 := @parameter1: android.util.LongSparseArray;

        $r2 = staticinvoke <android.app.AppOpsManager: android.util.LongSparseArray collectKeys(android.util.LongSparseLongArray,android.util.LongSparseArray)>(r0, r1);

        return $r2;
    }

    static java.lang.String[] access$600()
    {
        java.lang.String[] $r0;

        $r0 = <android.app.AppOpsManager: java.lang.String[] sOpToString>;

        return $r0;
    }

    private java.lang.String buildSecurityExceptionMsg(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1;
        java.lang.String r1, $r9, $r11;
        java.lang.StringBuilder $r3;
        java.lang.String[] $r8;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from uid ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed to perform ");

        $r8 = <android.app.AppOpsManager: java.lang.String[] sOpNames>;

        $r9 = $r8[i0];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private static android.util.LongSparseArray collectKeys(android.util.LongSparseLongArray, android.util.LongSparseArray)
    {
        android.util.LongSparseLongArray r0;
        android.util.LongSparseArray r1, $r2, r3, r4;
        int i0, i2;
        long $l1;

        r0 := @parameter0: android.util.LongSparseLongArray;

        r1 := @parameter1: android.util.LongSparseArray;

        r3 = r1;

        if r0 == null goto label3;

        r4 = r1;

        if r1 != null goto label1;

        $r2 = new android.util.LongSparseArray;

        specialinvoke $r2.<android.util.LongSparseArray: void <init>()>();

        r4 = $r2;

     label1:
        i0 = virtualinvoke r0.<android.util.LongSparseLongArray: int size()>();

        i2 = 0;

     label2:
        r3 = r4;

        if i2 >= i0 goto label3;

        $l1 = virtualinvoke r0.<android.util.LongSparseLongArray: long keyAt(int)>(i2);

        virtualinvoke r4.<android.util.LongSparseArray: void put(long,java.lang.Object)>($l1, null);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r3;
    }

    private void collectNoteOpCallsForValidation(int)
    {
        android.app.AppOpsManager r0;
        int i0;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        return;
    }

    private void collectNotedOpForSelf(int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0;
        java.lang.Object r1;
        android.app.AppOpsManager$OnOpNotedCallback r2, $r4, $r6;
        android.app.SyncNotedAppOp r3, $r5;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        r1 = <android.app.AppOpsManager: java.lang.Object sLock>;

        entermonitor r1;

     label1:
        $r4 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r4 == null goto label2;

        r2 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        r3 = new android.app.SyncNotedAppOp;

        specialinvoke r3.<android.app.SyncNotedAppOp: void <init>(int,java.lang.String)>(i0, r8);

        virtualinvoke r2.<android.app.AppOpsManager$OnOpNotedCallback: void onSelfNoted(android.app.SyncNotedAppOp)>(r3);

     label2:
        exitmonitor r1;

     label3:
        $r6 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sMessageCollector>;

        $r5 = new android.app.SyncNotedAppOp;

        specialinvoke $r5.<android.app.SyncNotedAppOp: void <init>(int,java.lang.String)>(i0, r8);

        virtualinvoke $r6.<android.app.AppOpsManager$OnOpNotedCallback: void onSelfNoted(android.app.SyncNotedAppOp)>($r5);

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void collectNotedOpSync(int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, $i1;
        java.lang.String r1;
        long[] r2, r11;
        java.lang.ThreadLocal $r3, $r8;
        java.lang.Object $r4, $r5;
        long $l2, $l3, $l4, $l5, $l6, $l7;
        android.util.ArrayMap $r7, r9, r10;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r9 = (android.util.ArrayMap) $r4;

        r10 = r9;

        if r9 != null goto label1;

        $r7 = new android.util.ArrayMap;

        specialinvoke $r7.<android.util.ArrayMap: void <init>(int)>(1);

        r10 = $r7;

        $r8 = <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction>;

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>($r7);

     label1:
        $r5 = virtualinvoke r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (long[]) $r5;

        r11 = r2;

        if r2 != null goto label2;

        r11 = newarray (long)[2];

        virtualinvoke r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r11);

     label2:
        if i0 >= 64 goto label3;

        $l6 = 1L << i0;

        $l5 = r11[0];

        $l7 = $l6 | $l5;

        r11[0] = $l7;

        goto label4;

     label3:
        $i1 = i0 - 64;

        $l3 = 1L << $i1;

        $l2 = r11[1];

        $l4 = $l3 | $l2;

        r11[1] = $l4;

     label4:
        return;
    }

    private static boolean equalsLongSparseLongArray(android.util.LongSparseLongArray, android.util.LongSparseLongArray)
    {
        android.util.LongSparseLongArray r0, r1;
        int i0, $i1, $i2, i9;
        long $l3, $l4, $l6, $l7;
        byte $b5, $b8;

        r0 := @parameter0: android.util.LongSparseLongArray;

        r1 := @parameter1: android.util.LongSparseLongArray;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label8;

        if r1 != null goto label2;

        goto label8;

     label2:
        $i1 = virtualinvoke r0.<android.util.LongSparseLongArray: int size()>();

        $i2 = virtualinvoke r1.<android.util.LongSparseLongArray: int size()>();

        if $i1 == $i2 goto label3;

        return 0;

     label3:
        i0 = virtualinvoke r0.<android.util.LongSparseLongArray: int size()>();

        i9 = 0;

     label4:
        if i9 >= i0 goto label7;

        $l3 = virtualinvoke r0.<android.util.LongSparseLongArray: long keyAt(int)>(i9);

        $l4 = virtualinvoke r1.<android.util.LongSparseLongArray: long keyAt(int)>(i9);

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label6;

        $l6 = virtualinvoke r0.<android.util.LongSparseLongArray: long valueAt(int)>(i9);

        $l7 = virtualinvoke r1.<android.util.LongSparseLongArray: long valueAt(int)>(i9);

        $b8 = $l6 cmp $l7;

        if $b8 == 0 goto label5;

        goto label6;

     label5:
        i9 = i9 + 1;

        goto label4;

     label6:
        return 0;

     label7:
        return 1;

     label8:
        return 0;
    }

    public static int extractFlagsFromKey(long)
    {
        long l0, $l1;
        int $i2;

        l0 := @parameter0: long;

        $l1 = -1L & l0;

        $i2 = (int) $l1;

        return $i2;
    }

    public static int extractUidStateFromKey(long)
    {
        long l0, $l1;
        int $i2;

        l0 := @parameter0: long;

        $l1 = l0 >> 31;

        $i2 = (int) $l1;

        return $i2;
    }

    public static void finishNotedAppOpsCollection()
    {
        java.lang.ThreadLocal $r0, $r1;

        $r0 = <android.app.AppOpsManager: java.lang.ThreadLocal sBinderThreadCallingUid>;

        virtualinvoke $r0.<java.lang.ThreadLocal: void remove()>();

        $r1 = <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction>;

        virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>();

        return;
    }

    public static java.lang.String flagsToString(int)
    {
        int i0, $i1, $i2, i3;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;

        i3 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        if i3 == 0 goto label3;

        $i1 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i3);

        i0 = 1 << $i1;

        i3 = i3 & i0;

        $i2 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

     label2:
        $r3 = staticinvoke <android.app.AppOpsManager: java.lang.String getFlagName(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label1;

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static android.os.IBinder getClientId()
    {
        android.os.IBinder $r0, r3;
        java.lang.Throwable $r1;
        android.os.Binder r2;

        entermonitor class "Landroid/app/AppOpsManager;";

     label1:
        $r0 = <android.app.AppOpsManager: android.os.IBinder sClientId>;

        if $r0 != null goto label2;

        r2 = new android.os.Binder;

        specialinvoke r2.<android.os.Binder: void <init>()>();

        <android.app.AppOpsManager: android.os.IBinder sClientId> = r2;

     label2:
        r3 = <android.app.AppOpsManager: android.os.IBinder sClientId>;

        exitmonitor class "Landroid/app/AppOpsManager;";

     label3:
        return r3;

     label4:
        $r1 := @caughtexception;

     label5:
        exitmonitor class "Landroid/app/AppOpsManager;";

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static final java.lang.String getFlagName(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 4 goto label3;

        if i0 == 8 goto label2;

        if i0 == 16 goto label1;

        return "unknown";

     label1:
        return "upd";

     label2:
        return "tpd";

     label3:
        return "up";

     label4:
        return "tp";

     label5:
        return "s";
    }

    private static java.lang.String getFormattedStackTrace()
    {
        java.lang.StackTraceElement[] r0;
        java.lang.Exception $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r6, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63;
        java.lang.StackTraceElement $r5, $r7, $r10, $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r44, $r48, $r52, $r54, $r58, $r60;
        java.lang.Class $r12, $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r46, $r50, $r56, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>()>();

        r0 = virtualinvoke $r2.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        i6 = 0;

        i7 = 0;

     label01:
        $i0 = lengthof r0;

        if i7 >= $i0 goto label03;

        $r44 = r0[i7];

        $r45 = virtualinvoke $r44.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r46 = class "Landroid/app/AppOpsManager;";

        $r47 = virtualinvoke $r46.<java.lang.Class: java.lang.String getName()>();

        $z9 = virtualinvoke $r45.<java.lang.String: boolean startsWith(java.lang.String)>($r47);

        if $z9 != 0 goto label02;

        $r48 = r0[i7];

        $r49 = virtualinvoke $r48.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r50 = class "Landroid/os/Parcel;";

        $r51 = virtualinvoke $r50.<java.lang.Class: java.lang.String getName()>();

        $z10 = virtualinvoke $r49.<java.lang.String: boolean startsWith(java.lang.String)>($r51);

        if $z10 != 0 goto label02;

        $r52 = r0[i7];

        $r53 = virtualinvoke $r52.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z11 = virtualinvoke $r53.<java.lang.String: boolean contains(java.lang.CharSequence)>("$Stub$Proxy");

        if $z11 != 0 goto label02;

        $r54 = r0[i7];

        $r55 = virtualinvoke $r54.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r56 = class "Landroid/database/DatabaseUtils;";

        $r57 = virtualinvoke $r56.<java.lang.Class: java.lang.String getName()>();

        $z12 = virtualinvoke $r55.<java.lang.String: boolean startsWith(java.lang.String)>($r57);

        if $z12 != 0 goto label02;

        $r58 = r0[i7];

        $r59 = virtualinvoke $r58.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z13 = virtualinvoke $r59.<java.lang.String: boolean startsWith(java.lang.String)>("android.content.ContentProviderProxy");

        if $z13 != 0 goto label02;

        $r60 = r0[i7];

        $r61 = virtualinvoke $r60.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r62 = class "Landroid/content/ContentResolver;";

        $r63 = virtualinvoke $r62.<java.lang.Class: java.lang.String getName()>();

        $z14 = virtualinvoke $r61.<java.lang.String: boolean startsWith(java.lang.String)>($r63);

        if $z14 == 0 goto label03;

     label02:
        i6 = i7;

        i7 = i7 + 1;

        goto label01;

     label03:
        $i1 = lengthof r0;

        i8 = $i1 - 1;

        $i2 = lengthof r0;

        i9 = $i2 - 1;

     label04:
        if i9 < 0 goto label06;

        $r10 = r0[i9];

        $r11 = virtualinvoke $r10.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r12 = class "Landroid/os/HandlerThread;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>($r13);

        if $z0 != 0 goto label05;

        $r14 = r0[i9];

        $r15 = virtualinvoke $r14.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r16 = class "Landroid/os/Handler;";

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>($r17);

        if $z1 != 0 goto label05;

        $r18 = r0[i9];

        $r19 = virtualinvoke $r18.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r20 = class "Landroid/os/Looper;";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke $r19.<java.lang.String: boolean startsWith(java.lang.String)>($r21);

        if $z2 != 0 goto label05;

        $r22 = r0[i9];

        $r23 = virtualinvoke $r22.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r24 = class "Landroid/os/Binder;";

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>($r25);

        if $z3 != 0 goto label05;

        $r26 = r0[i9];

        $r27 = virtualinvoke $r26.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r28 = class "Lcom/android/internal/os/RuntimeInit;";

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $z4 = virtualinvoke $r27.<java.lang.String: boolean startsWith(java.lang.String)>($r29);

        if $z4 != 0 goto label05;

        $r30 = r0[i9];

        $r31 = virtualinvoke $r30.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r32 = class "Lcom/android/internal/os/ZygoteInit;";

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $z5 = virtualinvoke $r31.<java.lang.String: boolean startsWith(java.lang.String)>($r33);

        if $z5 != 0 goto label05;

        $r34 = r0[i9];

        $r35 = virtualinvoke $r34.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r36 = class "Landroid/app/ActivityThread;";

        $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>();

        $z6 = virtualinvoke $r35.<java.lang.String: boolean startsWith(java.lang.String)>($r37);

        if $z6 != 0 goto label05;

        $r38 = r0[i9];

        $r39 = virtualinvoke $r38.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r40 = class "Ljava/lang/reflect/Method;";

        $r41 = virtualinvoke $r40.<java.lang.Class: java.lang.String getName()>();

        $z7 = virtualinvoke $r39.<java.lang.String: boolean startsWith(java.lang.String)>($r41);

        if $z7 != 0 goto label05;

        $r42 = r0[i9];

        $r43 = virtualinvoke $r42.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z8 = virtualinvoke $r43.<java.lang.String: boolean startsWith(java.lang.String)>("com.android.server.SystemServer");

        if $z8 == 0 goto label06;

     label05:
        i8 = i9;

        i9 = i9 + -1;

        goto label04;

     label06:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i10 = i6;

     label07:
        if i10 > i8 goto label10;

        if i10 == i6 goto label08;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label08:
        $i3 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        $r5 = r0[i10];

        $r6 = virtualinvoke $r5.<java.lang.StackTraceElement: java.lang.String toString()>();

        $i4 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        if $i5 <= 600 goto label09;

        goto label10;

     label09:
        $r7 = r0[i10];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        i10 = i10 + 1;

        goto label07;

     label10:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static android.app.AppOpsManager$NoteOpEvent getLastEvent(android.util.LongSparseArray, int, int, int)
    {
        android.util.LongSparseArray r0;
        int i0, i1, i2, i3, i4, i5, $i6, i11, i12;
        int[] r1;
        android.app.AppOpsManager$NoteOpEvent r2, r4, r5;
        long $l7, $l8, $l9;
        java.lang.Object $r3;
        byte $b10;

        r0 := @parameter0: android.util.LongSparseArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i11 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        r4 = null;

     label2:
        if i11 == 0 goto label9;

        $i6 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i11);

        i2 = 1 << $i6;

        i3 = i11 & i2;

        r1 = <android.app.AppOpsManager: int[] UID_STATES>;

        i4 = lengthof r1;

        i12 = 0;

     label3:
        if i12 >= i4 goto label8;

        i5 = r1[i12];

        if i5 < i0 goto label6;

        if i5 <= i1 goto label4;

        r5 = r4;

        goto label7;

     label4:
        $l7 = staticinvoke <android.app.AppOpsManager: long makeKey(int,int)>(i5, i2);

        $r3 = virtualinvoke r0.<android.util.LongSparseArray: java.lang.Object get(long)>($l7);

        r2 = (android.app.AppOpsManager$NoteOpEvent) $r3;

        if r4 == null goto label5;

        r5 = r4;

        if r2 == null goto label7;

        r5 = r4;

        $l8 = virtualinvoke r2.<android.app.AppOpsManager$NoteOpEvent: long getNoteTime()>();

        $l9 = virtualinvoke r4.<android.app.AppOpsManager$NoteOpEvent: long getNoteTime()>();

        $b10 = $l8 cmp $l9;

        if $b10 <= 0 goto label7;

     label5:
        r5 = r2;

        goto label7;

     label6:
        r5 = r4;

     label7:
        i12 = i12 + 1;

        r4 = r5;

        goto label3;

     label8:
        i11 = i3;

        goto label2;

     label9:
        return r4;
    }

    private int getNotedOpCollectionMode(int, java.lang.String, int)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i3, $i4;
        boolean z0, $z1;
        byte[] $r1, $r6, $r7, $r13;
        byte $b2, $b5, $b6, $b7;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3, r14;
        java.lang.String $r4, r10, r11;
        com.android.internal.app.IAppOpsService $r5;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.Integer r15;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r11 = r10;

        if r10 != null goto label01;

        r11 = "android";

     label01:
        $r1 = <android.app.AppOpsManager: byte[] sAppOpsToNote>;

        $b2 = $r1[i1];

        if $b2 != 0 goto label06;

     label02:
        $r5 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        z0 = interfaceinvoke $r5.<com.android.internal.app.IAppOpsService: boolean shouldCollectNotes(int)>(i1);

     label03:
        if z0 == 0 goto label04;

        $r7 = <android.app.AppOpsManager: byte[] sAppOpsToNote>;

        $b6 = (byte) 2;

        $r7[i1] = $b6;

        goto label06;

     label04:
        $r6 = <android.app.AppOpsManager: byte[] sAppOpsToNote>;

        $b5 = (byte) 1;

        $r6[i1] = $b5;

        goto label06;

     label05:
        $r9 := @caughtexception;

        return 0;

     label06:
        $r13 = <android.app.AppOpsManager: byte[] sAppOpsToNote>;

        $b7 = $r13[i1];

        if $b7 == 2 goto label07;

        return 0;

     label07:
        r14 = <android.app.AppOpsManager: java.lang.Object sLock>;

        entermonitor r14;

     label08:
        $i3 = staticinvoke <android.os.Process: int myUid()>();

        if i0 != $i3 goto label10;

        $r4 = staticinvoke <android.app.ActivityThread: java.lang.String currentOpPackageName()>();

        $z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label10;

        exitmonitor r14;

     label09:
        return 1;

     label10:
        exitmonitor r14;

     label11:
        $r2 = <android.app.AppOpsManager: java.lang.ThreadLocal sBinderThreadCallingUid>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r15 = (java.lang.Integer) $r3;

        if r15 == null goto label12;

        $i4 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        if $i4 != i0 goto label12;

        return 2;

     label12:
        return 3;

     label13:
        $r8 := @caughtexception;

     label14:
        exitmonitor r14;

     label15:
        throw $r8;

        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public static int getNumOps()
    {
        return 100;
    }

    public static java.lang.String[] getOpStrs()
    {
        java.lang.String[] r0, $r2;
        int $i0;
        java.lang.Object[] $r1;

        r0 = <android.app.AppOpsManager: java.lang.String[] sOpToString>;

        $i0 = lengthof r0;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r0, $i0);

        $r2 = (java.lang.String[]) $r1;

        return $r2;
    }

    private static com.android.internal.app.IAppOpsService getService()
    {
        java.lang.Object r0;
        com.android.internal.app.IAppOpsService $r1, $r3, r5;
        android.os.IBinder $r2;
        java.lang.Throwable $r4;

        r0 = <android.app.AppOpsManager: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        $r1 = <android.app.AppOpsManager: com.android.internal.app.IAppOpsService sService>;

        if $r1 != null goto label2;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("appops");

        $r3 = staticinvoke <com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService asInterface(android.os.IBinder)>($r2);

        <android.app.AppOpsManager: com.android.internal.app.IAppOpsService sService> = $r3;

     label2:
        r5 = <android.app.AppOpsManager: com.android.internal.app.IAppOpsService sService>;

        exitmonitor r0;

     label3:
        return r5;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static int getSystemAlertWindowDefault()
    {
        boolean $z0, $z1;
        android.app.Application r0;
        android.content.pm.PackageManager r1;

        r0 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        if r0 != null goto label1;

        return 3;

     label1:
        r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>("android.software.leanback", 0);

        if $z1 != 0 goto label2;

        return 1;

     label2:
        return 3;
    }

    public static android.os.IBinder getToken(com.android.internal.app.IAppOpsService)
    {
        com.android.internal.app.IAppOpsService r0;
        android.os.IBinder $r1;

        r0 := @parameter0: com.android.internal.app.IAppOpsService;

        $r1 = staticinvoke <android.app.AppOpsManager: android.os.IBinder getClientId()>();

        return $r1;
    }

    public static java.lang.String getUidStateName(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 100 goto label7;

        if i0 == 200 goto label6;

        if i0 == 300 goto label5;

        if i0 == 400 goto label4;

        if i0 == 500 goto label3;

        if i0 == 600 goto label2;

        if i0 == 700 goto label1;

        return "unknown";

     label1:
        return "cch";

     label2:
        return "bg";

     label3:
        return "fg";

     label4:
        return "fgsvc";

     label5:
        return "fgsvcl";

     label6:
        return "top";

     label7:
        return "pers";
    }

    public static java.lang.String historicalModeToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return "UNKNOWN";

     label1:
        return "HISTORICAL_MODE_ENABLED_PASSIVE";

     label2:
        return "HISTORICAL_MODE_ENABLED_ACTIVE";

     label3:
        return "HISTORICAL_MODE_DISABLED";
    }

    private static boolean isCollectingStackTraces()
    {
        com.android.internal.app.MessageSamplingConfig $r0, $r1;
        int $i0;
        long $l1, $l2;
        byte $b3;

        $r0 = <android.app.AppOpsManager: com.android.internal.app.MessageSamplingConfig sConfig>;

        $i0 = virtualinvoke $r0.<com.android.internal.app.MessageSamplingConfig: int getSampledOpCode()>();

        if $i0 != -1 goto label1;

        $r1 = <android.app.AppOpsManager: com.android.internal.app.MessageSamplingConfig sConfig>;

        $l1 = virtualinvoke $r1.<com.android.internal.app.MessageSamplingConfig: long getExpirationTimeSinceBootMillis()>();

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static boolean isListeningForOpNoted()
    {
        android.app.AppOpsManager$OnOpNotedCallback $r0;
        boolean $z0, z1;

        $r0 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r0 != null goto label2;

        $z0 = staticinvoke <android.app.AppOpsManager: boolean isCollectingStackTraces()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public static java.lang.String keyToString(long)
    {
        long l0;
        int i1, i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r6, $r9;

        l0 := @parameter0: long;

        i1 = staticinvoke <android.app.AppOpsManager: int extractUidStateFromKey(long)>(l0);

        i2 = staticinvoke <android.app.AppOpsManager: int extractFlagsFromKey(long)>(l0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = staticinvoke <android.app.AppOpsManager: java.lang.String getUidStateName(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r6 = staticinvoke <android.app.AppOpsManager: java.lang.String flagsToString(int)>(i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void lambda$getHistoricalOps$0(java.util.function.Consumer, android.app.AppOpsManager$HistoricalOps)
    {
        java.util.function.Consumer r0;
        android.app.AppOpsManager$HistoricalOps r1;

        r0 := @parameter0: java.util.function.Consumer;

        r1 := @parameter1: android.app.AppOpsManager$HistoricalOps;

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>(r1);

        return;
    }

    static void lambda$getHistoricalOps$1(java.util.concurrent.Executor, java.util.function.Consumer, android.os.Bundle)
    {
        java.util.function.Consumer r0;
        long l0;
        android.app._$$Lambda$AppOpsManager$frSyqmhVUmNbhMckfMS3PSwTMlw r1;
        android.os.Parcelable $r2;
        java.lang.Throwable $r3;
        java.util.concurrent.Executor r4;
        android.os.Bundle r5;
        android.app.AppOpsManager$HistoricalOps r6;

        r4 := @parameter0: java.util.concurrent.Executor;

        r0 := @parameter1: java.util.function.Consumer;

        r5 := @parameter2: android.os.Bundle;

        $r2 = virtualinvoke r5.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("historical_ops");

        r6 = (android.app.AppOpsManager$HistoricalOps) $r2;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = new android.app._$$Lambda$AppOpsManager$frSyqmhVUmNbhMckfMS3PSwTMlw;

        specialinvoke r1.<android.app._$$Lambda$AppOpsManager$frSyqmhVUmNbhMckfMS3PSwTMlw: void <init>(java.util.function.Consumer,android.app.AppOpsManager$HistoricalOps)>(r0, r6);

        interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void lambda$getHistoricalOpsFromDiskRaw$2(java.util.function.Consumer, android.app.AppOpsManager$HistoricalOps)
    {
        java.util.function.Consumer r0;
        android.app.AppOpsManager$HistoricalOps r1;

        r0 := @parameter0: java.util.function.Consumer;

        r1 := @parameter1: android.app.AppOpsManager$HistoricalOps;

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>(r1);

        return;
    }

    static void lambda$getHistoricalOpsFromDiskRaw$3(java.util.concurrent.Executor, java.util.function.Consumer, android.os.Bundle)
    {
        java.util.function.Consumer r0;
        long l0;
        android.app._$$Lambda$AppOpsManager$VfNXTtJaOeEFrdIj0oDWr_N9nks r1;
        android.os.Parcelable $r2;
        java.lang.Throwable $r3;
        java.util.concurrent.Executor r4;
        android.os.Bundle r5;
        android.app.AppOpsManager$HistoricalOps r6;

        r4 := @parameter0: java.util.concurrent.Executor;

        r0 := @parameter1: java.util.function.Consumer;

        r5 := @parameter2: android.os.Bundle;

        $r2 = virtualinvoke r5.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("historical_ops");

        r6 = (android.app.AppOpsManager$HistoricalOps) $r2;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = new android.app._$$Lambda$AppOpsManager$VfNXTtJaOeEFrdIj0oDWr_N9nks;

        specialinvoke r1.<android.app._$$Lambda$AppOpsManager$VfNXTtJaOeEFrdIj0oDWr_N9nks: void <init>(java.util.function.Consumer,android.app.AppOpsManager$HistoricalOps)>(r0, r6);

        interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void lambda$setOnOpNotedCallback$4(android.app.AsyncNotedAppOp)
    {
        android.app.AsyncNotedAppOp r0;
        android.app.AppOpsManager$OnOpNotedCallback $r1;

        r0 := @parameter0: android.app.AsyncNotedAppOp;

        $r1 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        virtualinvoke $r1.<android.app.AppOpsManager$OnOpNotedCallback: void onAsyncNoted(android.app.AsyncNotedAppOp)>(r0);

        return;
    }

    static void lambda$setOnOpNotedCallback$5(android.app.AsyncNotedAppOp)
    {
        android.app.AsyncNotedAppOp r0;
        android.app.AppOpsManager$OnOpNotedCallback $r1;

        r0 := @parameter0: android.app.AsyncNotedAppOp;

        $r1 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        virtualinvoke $r1.<android.app.AppOpsManager$OnOpNotedCallback: void onAsyncNoted(android.app.AsyncNotedAppOp)>(r0);

        return;
    }

    public static int leftCircularDistance(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i1 + i2;

        $i4 = $i3 - i0;

        $i5 = $i4 % i2;

        return $i5;
    }

    public static long makeKey(int, int)
    {
        int i0, i1;
        long $l2, $l3, $l4, $l5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = (long) i0;

        $l4 = $l2 << 31;

        $l3 = (long) i1;

        $l5 = $l4 | $l3;

        return $l5;
    }

    public static java.lang.String modeToName(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, $r4;
        java.lang.String[] r5;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        r5 = <android.app.AppOpsManager: java.lang.String[] MODE_NAMES>;

        $i1 = lengthof r5;

        if i0 >= $i1 goto label1;

        $r4 = r5[i0];

        return $r4;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mode=");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static android.app.AppOpsManager$RestrictionBypass opAllowSystemBypassRestriction(int)
    {
        int i0;
        android.app.AppOpsManager$RestrictionBypass[] $r0;
        android.app.AppOpsManager$RestrictionBypass $r1;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: android.app.AppOpsManager$RestrictionBypass[] sOpAllowSystemRestrictionBypass>;

        $r1 = $r0[i0];

        return $r1;
    }

    public static boolean opAllowsReset(int)
    {
        int i0;
        boolean[] $r0;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: boolean[] sOpDisableReset>;

        $z0 = $r0[i0];

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public static int opToDefaultMode(int)
    {
        int i0, $i1;
        int[] $r0;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: int[] sOpDefaultMode>;

        $i1 = $r0[i0];

        return $i1;
    }

    public static int opToDefaultMode(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r0);

        $i1 = staticinvoke <android.app.AppOpsManager: int opToDefaultMode(int)>($i0);

        return $i1;
    }

    public static java.lang.String opToName(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String[] r4;
        java.lang.String r5;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return "NONE";

     label1:
        r4 = <android.app.AppOpsManager: java.lang.String[] sOpNames>;

        $i1 = lengthof r4;

        if i0 >= $i1 goto label2;

        r5 = r4[i0];

        goto label3;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown(");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r5;
    }

    public static java.lang.String opToPermission(int)
    {
        int i0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: java.lang.String[] sOpPerms>;

        $r1 = $r0[i0];

        return $r1;
    }

    public static java.lang.String opToPermission(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r0);

        $r1 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPermission(int)>($i0);

        return $r1;
    }

    public static java.lang.String opToPublicName(int)
    {
        int i0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: java.lang.String[] sOpToString>;

        $r1 = $r0[i0];

        return $r1;
    }

    public static java.lang.String opToRestriction(int)
    {
        int i0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: java.lang.String[] sOpRestrictions>;

        $r1 = $r0[i0];

        return $r1;
    }

    public static int opToSwitch(int)
    {
        int i0, $i1;
        int[] $r0;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: int[] sOpToSwitch>;

        $i1 = $r0[i0];

        return $i1;
    }

    public static int parseHistoricalMode(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;
        int i0;
        byte b1;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        if i0 == 155185419 goto label3;

        if i0 == 885538210 goto label2;

     label1:
        goto label4;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("HISTORICAL_MODE_ENABLED_PASSIVE");

        if $z1 == 0 goto label1;

        b1 = 1;

        goto label5;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("HISTORICAL_MODE_ENABLED_ACTIVE");

        if $z0 == 0 goto label1;

        b1 = 0;

        goto label5;

     label4:
        b1 = -1;

     label5:
        if b1 == 0 goto label7;

        if b1 == 1 goto label6;

        return 0;

     label6:
        return 2;

     label7:
        return 1;
    }

    public static android.app.AppOpsManager$PausedNotedAppOpsCollection pauseNotedAppOpsCollection()
    {
        java.lang.Integer r0;
        android.util.ArrayMap r1;
        java.lang.ThreadLocal $r2, $r4, $r6, $r7;
        java.lang.Object $r3, $r5;
        android.app.AppOpsManager$PausedNotedAppOpsCollection $r8;
        int $i0;

        $r2 = <android.app.AppOpsManager: java.lang.ThreadLocal sBinderThreadCallingUid>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (java.lang.Integer) $r3;

        if r0 == null goto label1;

        $r4 = <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.util.ArrayMap) $r5;

        $r6 = <android.app.AppOpsManager: java.lang.ThreadLocal sBinderThreadCallingUid>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void remove()>();

        $r7 = <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void remove()>();

        $r8 = new android.app.AppOpsManager$PausedNotedAppOpsCollection;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        specialinvoke $r8.<android.app.AppOpsManager$PausedNotedAppOpsCollection: void <init>(int,android.util.ArrayMap)>($i0, r1);

        return $r8;

     label1:
        return null;
    }

    public static java.lang.String permissionToOp(java.lang.String)
    {
        java.util.HashMap $r0;
        java.lang.Object $r1;
        java.lang.String[] $r2;
        int $i0;
        java.lang.String $r3, r4;
        java.lang.Integer r5;

        r4 := @parameter0: java.lang.String;

        $r0 = <android.app.AppOpsManager: java.util.HashMap sPermToOp>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.lang.Integer) $r1;

        if r5 != null goto label1;

        return null;

     label1:
        $r2 = <android.app.AppOpsManager: java.lang.String[] sOpToString>;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $r3 = $r2[$i0];

        return $r3;
    }

    public static int permissionToOpCode(java.lang.String)
    {
        java.util.HashMap $r0;
        java.lang.Object $r1;
        java.lang.String r2;
        java.lang.Integer r3;
        int i0;

        r2 := @parameter0: java.lang.String;

        $r0 = <android.app.AppOpsManager: java.util.HashMap sPermToOp>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.lang.Integer) $r1;

        if r3 == null goto label1;

        i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    public static void prefixParcelWithAppOpsIfNeeded(android.os.Parcel)
    {
        android.os.Parcel r0;
        android.util.ArrayMap r1;
        int i0, i3;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3, $r4, $r6, $r8;
        java.lang.String $r5;
        long[] $r7, $r9;
        long $l1, $l2;

        r0 := @parameter0: android.os.Parcel;

        $r2 = <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.util.ArrayMap) $r3;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(-127);

        i0 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(i0);

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r4 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        $r5 = (java.lang.String) $r4;

        virtualinvoke r0.<android.os.Parcel: void writeString(java.lang.String)>($r5);

        $r6 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r7 = (long[]) $r6;

        $l1 = $r7[0];

        virtualinvoke r0.<android.os.Parcel: void writeLong(long)>($l1);

        $r8 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r9 = (long[]) $r8;

        $l2 = $r9[1];

        virtualinvoke r0.<android.os.Parcel: void writeLong(long)>($l2);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static void readAndLogNotedAppops(android.os.Parcel)
    {
        int i0, $i5, $i6, $i8, i11, i12, $i13, i14;
        java.lang.String r0, r15;
        java.util.BitSet r1;
        java.util.ArrayList r2, $r6, $r7;
        long $l1, $l2, $l3, $l7, $l9;
        byte $b4, $b10;
        android.app.SyncNotedAppOp $r3, r14;
        android.app.AppOpsManager$OnOpNotedCallback $r4, $r5, r13;
        java.lang.Throwable $r9;
        android.os.Parcel r10;
        long[] r11;
        java.lang.Object r12;
        android.app.AsyncNotedAppOp r16;

        r10 := @parameter0: android.os.Parcel;

        i0 = virtualinvoke r10.<android.os.Parcel: int readInt()>();

        i11 = 0;

     label01:
        if i11 >= i0 goto label17;

        r0 = virtualinvoke r10.<android.os.Parcel: java.lang.String readString()>();

        r11 = newarray (long)[2];

        $l1 = virtualinvoke r10.<android.os.Parcel: long readLong()>();

        r11[0] = $l1;

        $l2 = virtualinvoke r10.<android.os.Parcel: long readLong()>();

        r11[1] = $l2;

        $l3 = r11[0];

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label02;

        $l9 = r11[1];

        $b10 = $l9 cmp 0L;

        if $b10 == 0 goto label13;

     label02:
        r1 = staticinvoke <java.util.BitSet: java.util.BitSet valueOf(long[])>(r11);

        r12 = <android.app.AppOpsManager: java.lang.Object sLock>;

        entermonitor r12;

     label03:
        i12 = virtualinvoke r1.<java.util.BitSet: int nextSetBit(int)>(0);

     label04:
        if i12 == -1 goto label10;

     label05:
        $r5 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r5 == null goto label07;

        r13 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        r14 = new android.app.SyncNotedAppOp;

        specialinvoke r14.<android.app.SyncNotedAppOp: void <init>(int,java.lang.String)>(i12, r0);

        virtualinvoke r13.<android.app.AppOpsManager$OnOpNotedCallback: void onNoted(android.app.SyncNotedAppOp)>(r14);

     label06:
        goto label08;

     label07:
        r15 = staticinvoke <android.app.AppOpsManager: java.lang.String getFormattedStackTrace()>();

        r2 = <android.app.AppOpsManager: java.util.ArrayList sUnforwardedOps>;

        r16 = new android.app.AsyncNotedAppOp;

        $i6 = staticinvoke <android.os.Process: int myUid()>();

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r16.<android.app.AsyncNotedAppOp: void <init>(int,int,java.lang.String,java.lang.String,long)>(i12, $i6, r0, r15, $l7);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r16);

        $r6 = <android.app.AppOpsManager: java.util.ArrayList sUnforwardedOps>;

        $i8 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i8 <= 10 goto label08;

        $r7 = <android.app.AppOpsManager: java.util.ArrayList sUnforwardedOps>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object remove(int)>(0);

     label08:
        $i13 = i12 + 1;

        i12 = virtualinvoke r1.<java.util.BitSet: int nextSetBit(int)>($i13);

     label09:
        goto label04;

     label10:
        exitmonitor r12;

     label11:
        i14 = virtualinvoke r1.<java.util.BitSet: int nextSetBit(int)>(0);

     label12:
        if i14 == -1 goto label13;

        $r4 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sMessageCollector>;

        $r3 = new android.app.SyncNotedAppOp;

        specialinvoke $r3.<android.app.SyncNotedAppOp: void <init>(int,java.lang.String)>(i14, r0);

        virtualinvoke $r4.<android.app.AppOpsManager$OnOpNotedCallback: void onNoted(android.app.SyncNotedAppOp)>($r3);

        $i5 = i14 + 1;

        i14 = virtualinvoke r1.<java.util.BitSet: int nextSetBit(int)>($i5);

        goto label12;

     label13:
        i11 = i11 + 1;

        goto label01;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r12;

     label16:
        throw $r9;

     label17:
        return;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private static android.util.LongSparseLongArray readLongSparseLongArrayFromParcel(android.os.Parcel)
    {
        android.os.Parcel r0;
        int i0, i3;
        android.util.LongSparseLongArray $r2;
        long $l1, $l2;

        r0 := @parameter0: android.os.Parcel;

        i0 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        if i0 >= 0 goto label1;

        return null;

     label1:
        $r2 = new android.util.LongSparseLongArray;

        specialinvoke $r2.<android.util.LongSparseLongArray: void <init>(int)>(i0);

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $l1 = virtualinvoke r0.<android.os.Parcel: long readLong()>();

        $l2 = virtualinvoke r0.<android.os.Parcel: long readLong()>();

        virtualinvoke $r2.<android.util.LongSparseLongArray: void append(long,long)>($l1, $l2);

        i3 = i3 + 1;

        goto label2;

     label3:
        return $r2;
    }

    public static int resolveFirstUnrestrictedUidState(int)
    {
        int i0;

        i0 := @parameter0: int;

        return 500;
    }

    public static int resolveLastRestrictedUidState(int)
    {
        int i0;

        i0 := @parameter0: int;

        return 600;
    }

    public static void resumeNotedAppOpsCollection(android.app.AppOpsManager$PausedNotedAppOpsCollection)
    {
        android.app.AppOpsManager$PausedNotedAppOpsCollection r0;
        int $i0;
        java.lang.ThreadLocal $r1, $r5;
        java.lang.Integer $r2;
        android.util.ArrayMap $r3, $r4;

        r0 := @parameter0: android.app.AppOpsManager$PausedNotedAppOpsCollection;

        if r0 == null goto label1;

        $r1 = <android.app.AppOpsManager: java.lang.ThreadLocal sBinderThreadCallingUid>;

        $i0 = r0.<android.app.AppOpsManager$PausedNotedAppOpsCollection: int mUid>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

        $r3 = r0.<android.app.AppOpsManager$PausedNotedAppOpsCollection: android.util.ArrayMap mCollectedNotedAppOps>;

        if $r3 == null goto label1;

        $r5 = <android.app.AppOpsManager: java.lang.ThreadLocal sAppOpsNotedInThisBinderTransaction>;

        $r4 = r0.<android.app.AppOpsManager$PausedNotedAppOpsCollection: android.util.ArrayMap mCollectedNotedAppOps>;

        virtualinvoke $r5.<java.lang.ThreadLocal: void set(java.lang.Object)>($r4);

     label1:
        return;
    }

    public static void startNotedAppOpsCollection(int)
    {
        int i0;
        java.lang.ThreadLocal $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r0 = <android.app.AppOpsManager: java.lang.ThreadLocal sBinderThreadCallingUid>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        return;
    }

    public static int strDebugOpToOp(java.lang.String)
    {
        java.lang.String r0, $r5, $r6;
        int $i0, i1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.lang.String[] r7;

        r0 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        r7 = <android.app.AppOpsManager: java.lang.String[] sOpNames>;

        $i0 = lengthof r7;

        if i1 >= $i0 goto label3;

        $r6 = r7[i1];

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown operation string: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static int strOpToOp(java.lang.String)
    {
        java.lang.String r0, $r7;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        int $i0;
        java.lang.Integer r8;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.app.AppOpsManager: java.util.HashMap sOpStrToOp>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (java.lang.Integer) $r2;

        if r8 == null goto label1;

        $i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown operation string: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private static long sumForFlagsInStates(android.util.LongSparseLongArray, int, int, int)
    {
        android.util.LongSparseLongArray r0;
        int i0, i1, i2, i3, i4, i5, $i6, i9, i11;
        int[] r1;
        long $l7, $l8, l10, l12;

        r0 := @parameter0: android.util.LongSparseLongArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i9 := @parameter3: int;

        if r0 != null goto label1;

        return 0L;

     label1:
        l10 = 0L;

     label2:
        if i9 == 0 goto label7;

        $i6 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i9);

        i2 = 1 << $i6;

        i3 = i9 & i2;

        r1 = <android.app.AppOpsManager: int[] UID_STATES>;

        i4 = lengthof r1;

        i11 = 0;

     label3:
        if i11 >= i4 goto label6;

        i5 = r1[i11];

        l12 = l10;

        if i5 < i0 goto label5;

        if i5 <= i1 goto label4;

        l12 = l10;

        goto label5;

     label4:
        $l7 = staticinvoke <android.app.AppOpsManager: long makeKey(int,int)>(i5, i2);

        $l8 = virtualinvoke r0.<android.util.LongSparseLongArray: long get(long)>($l7);

        l12 = l10 + $l8;

     label5:
        i11 = i11 + 1;

        l10 = l12;

        goto label3;

     label6:
        i9 = i3;

        goto label2;

     label7:
        return l10;
    }

    public static java.lang.String toReceiverId(android.app.PendingIntent)
    {
        android.app.PendingIntent r0;
        java.lang.String $r1;

        r0 := @parameter0: android.app.PendingIntent;

        $r1 = virtualinvoke r0.<android.app.PendingIntent: java.lang.String getTag(java.lang.String)>("");

        return $r1;
    }

    public static java.lang.String toReceiverId(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r8, $r10;
        int $i0;
        android.app.PendingIntent $r9;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof android.app.PendingIntent;

        if $z0 == 0 goto label1;

        $r9 = (android.app.PendingIntent) r0;

        $r10 = staticinvoke <android.app.AppOpsManager: java.lang.String toReceiverId(android.app.PendingIntent)>($r9);

        return $r10;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String uidStateToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 100 goto label7;

        if i0 == 200 goto label6;

        if i0 == 300 goto label5;

        if i0 == 400 goto label4;

        if i0 == 500 goto label3;

        if i0 == 600 goto label2;

        if i0 == 700 goto label1;

        return "UNKNOWN";

     label1:
        return "UID_STATE_CACHED";

     label2:
        return "UID_STATE_BACKGROUND";

     label3:
        return "UID_STATE_FOREGROUND";

     label4:
        return "UID_STATE_FOREGROUND_SERVICE";

     label5:
        return "UID_STATE_FOREGROUND_SERVICE_LOCATION";

     label6:
        return "UID_STATE_TOP";

     label7:
        return "UID_STATE_PERSISTENT";
    }

    private static void writeLongSparseLongArrayToParcel(android.util.LongSparseLongArray, android.os.Parcel)
    {
        android.util.LongSparseLongArray r0;
        android.os.Parcel r1;
        int i0, i3;
        long $l1, $l2;

        r0 := @parameter0: android.util.LongSparseLongArray;

        r1 := @parameter1: android.os.Parcel;

        if r0 == null goto label3;

        i0 = virtualinvoke r0.<android.util.LongSparseLongArray: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $l1 = virtualinvoke r0.<android.util.LongSparseLongArray: long keyAt(int)>(i3);

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l1);

        $l2 = virtualinvoke r0.<android.util.LongSparseLongArray: long valueAt(int)>(i3);

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l2);

        i3 = i3 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(-1);

     label4:
        return;
    }

    public void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)
    {
        android.app.AppOpsManager r0;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.AppOpsManager$HistoricalOps r4;

        r0 := @this: android.app.AppOpsManager;

        r4 := @parameter0: android.app.AppOpsManager$HistoricalOps;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkAudioOp(int, int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2, i3;
        java.lang.SecurityException r1;
        com.android.internal.app.IAppOpsService $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        r6 := @parameter3: java.lang.String;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        i3 = interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>(i0, i2, i1, r6);

     label2:
        if i3 == 2 goto label3;

        return i3;

     label3:
        r1 = new java.lang.SecurityException;

        $r3 = specialinvoke r0.<android.app.AppOpsManager: java.lang.String buildSecurityExceptionMsg(int,int,java.lang.String)>(i0, i1, r6);

        specialinvoke r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r3);

        throw r1;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public int checkAudioOpNoThrow(int, int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2, i3;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.AppOpsManager;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        i3 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>(i2, i0, i1, r4);

     label2:
        return i3;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkOp(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        java.lang.SecurityException r1;
        com.android.internal.app.IAppOpsService $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        i2 = interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>(i0, i1, r6);

     label2:
        if i2 == 2 goto label3;

        return i2;

     label3:
        r1 = new java.lang.SecurityException;

        $r3 = specialinvoke r0.<android.app.AppOpsManager: java.lang.String buildSecurityExceptionMsg(int,int,java.lang.String)>(i0, i1, r6);

        specialinvoke r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r3);

        throw r1;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public int checkOp(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)>($i1, i0, r2);

        return $i2;
    }

    public int checkOpNoThrow(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.AppOpsManager;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        i2 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>(i1, i0, r4);

     label2:
        if i2 != 4 goto label3;

        i2 = 0;

        goto label3;

     label3:
        return i2;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public int checkOpNoThrow(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>($i1, i0, r2);

        return $i2;
    }

    public void checkPackage(int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, $i1;
        java.lang.SecurityException r1;
        java.lang.StringBuilder r2;
        com.android.internal.app.IAppOpsService $r3;
        java.lang.String $r8, r11;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r11 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $i1 = interfaceinvoke $r3.<com.android.internal.app.IAppOpsService: int checkPackage(int,java.lang.String)>(i0, r11);

        if $i1 != 0 goto label3;

     label2:
        return;

     label3:
        r1 = new java.lang.SecurityException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not belong to ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw r1;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public void clearHistory()
    {
        android.app.AppOpsManager r0;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void clearHistory()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()
    {
        android.app.AppOpsManager r0;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.RuntimeAppOpAccessMessage r4;

        r0 := @this: android.app.AppOpsManager;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        r4 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void finishOp(int)
    {
        android.app.AppOpsManager r0;
        int i0, $i1;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r1 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        virtualinvoke r0.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)>(i0, $i1, $r2, null);

        return;
    }

    public void finishOp(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        virtualinvoke r0.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, null);

        return;
    }

    public void finishOp(int, int, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1;
        java.lang.String r1, r6;
        com.android.internal.app.IAppOpsService $r2;
        android.os.IBinder $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $r3 = staticinvoke <android.app.AppOpsManager: android.os.IBinder getClientId()>();

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>($r3, i0, i1, r6, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void finishOp(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        virtualinvoke r0.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)>($i1, i0, r2, null);

        return;
    }

    public void finishOp(java.lang.String, int, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2, r3;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        virtualinvoke r0.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)>($i1, i0, r2, r3);

        return;
    }

    public void getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.app.AppOpsManager r0;
        java.util.concurrent.Executor r1;
        java.util.function.Consumer r2;
        com.android.internal.app.IAppOpsService r3;
        int i0, i1, i4;
        java.lang.String r4, r5;
        java.util.List r6;
        long l2, l3;
        android.os.RemoteCallback r7;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        android.app.AppOpsManager$HistoricalOpsRequest r12;
        android.app._$$Lambda$AppOpsManager$4Zbi7CSLEt0nvOmfJBVYtJkauTQ r13;

        r0 := @this: android.app.AppOpsManager;

        r12 := @parameter0: android.app.AppOpsManager$HistoricalOpsRequest;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.util.function.Consumer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "executor cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "callback cannot be null");

     label1:
        r3 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        i0 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: int access$5600(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r4 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: java.lang.String access$5700(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r5 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: java.lang.String access$5800(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r6 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: java.util.List access$5900(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        i1 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: int access$6000(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        l2 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: long access$6100(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        l3 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: long access$6200(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        i4 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: int access$6300(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r7 = new android.os.RemoteCallback;

        r13 = new android.app._$$Lambda$AppOpsManager$4Zbi7CSLEt0nvOmfJBVYtJkauTQ;

        specialinvoke r13.<android.app._$$Lambda$AppOpsManager$4Zbi7CSLEt0nvOmfJBVYtJkauTQ: void <init>(java.util.concurrent.Executor,java.util.function.Consumer)>(r1, r2);

        specialinvoke r7.<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener)>(r13);

        interfaceinvoke r3.<com.android.internal.app.IAppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>(i0, r4, r5, r6, i1, l2, l3, i4, r7);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getHistoricalOpsFromDiskRaw(android.app.AppOpsManager$HistoricalOpsRequest, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.app.AppOpsManager r0;
        java.util.concurrent.Executor r1;
        java.util.function.Consumer r2;
        com.android.internal.app.IAppOpsService r3;
        int i0, i1, i4;
        java.lang.String r4, r5;
        java.util.List r6;
        long l2, l3;
        android.app._$$Lambda$AppOpsManager$5k42P8tID8pwpGFZvo7VQyru20E r7;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        android.app.AppOpsManager$HistoricalOpsRequest r12;
        android.os.RemoteCallback r13;

        r0 := @this: android.app.AppOpsManager;

        r12 := @parameter0: android.app.AppOpsManager$HistoricalOpsRequest;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.util.function.Consumer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "executor cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "callback cannot be null");

     label1:
        r3 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        i0 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: int access$5600(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r4 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: java.lang.String access$5700(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r5 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: java.lang.String access$5800(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r6 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: java.util.List access$5900(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        i1 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: int access$6000(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        l2 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: long access$6100(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        l3 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: long access$6200(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        i4 = staticinvoke <android.app.AppOpsManager$HistoricalOpsRequest: int access$6300(android.app.AppOpsManager$HistoricalOpsRequest)>(r12);

        r13 = new android.os.RemoteCallback;

        r7 = new android.app._$$Lambda$AppOpsManager$5k42P8tID8pwpGFZvo7VQyru20E;

        specialinvoke r7.<android.app._$$Lambda$AppOpsManager$5k42P8tID8pwpGFZvo7VQyru20E: void <init>(java.util.concurrent.Executor,java.util.function.Consumer)>(r1, r2);

        specialinvoke r13.<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener)>(r7);

        interfaceinvoke r3.<com.android.internal.app.IAppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>(i0, r4, r5, r6, i1, l2, l3, i4, r13);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getOpsForPackage(int, java.lang.String, int[])
    {
        android.app.AppOpsManager r0;
        int i0;
        int[] r1;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        java.util.List r6;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: int[];

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        r6 = interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])>(i0, r5, r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public transient java.util.List getOpsForPackage(int, java.lang.String, java.lang.String[])
    {
        android.app.AppOpsManager r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String[] r1;
        int[] r2, r8;
        com.android.internal.app.IAppOpsService $r3;
        java.lang.String $r4, r7;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.util.List r9, r10;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String[];

        r8 = null;

        if r1 == null goto label2;

        $i1 = lengthof r1;

        r2 = newarray (int)[$i1];

        i4 = 0;

     label1:
        r8 = r2;

        $i2 = lengthof r1;

        if i4 >= $i2 goto label2;

        $r4 = r1[i4];

        $i3 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>($r4);

        r2[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r3 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        r9 = interfaceinvoke $r3.<com.android.internal.app.IAppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])>(i0, r7, r8);

     label3:
        if r9 != null goto label6;

     label4:
        r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label5:
        return r10;

     label6:
        return r9;

     label7:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public java.util.List getPackagesForOps(int[])
    {
        android.app.AppOpsManager r0;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;
        java.util.List r5;

        r0 := @this: android.app.AppOpsManager;

        r4 := @parameter0: int[];

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        r5 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: java.util.List getPackagesForOps(int[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPackagesForOps(java.lang.String[])
    {
        android.app.AppOpsManager r0;
        int i0, $i1, i2;
        int[] r1;
        java.lang.String $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        java.lang.String[] r6;
        java.util.List r7;

        r0 := @this: android.app.AppOpsManager;

        r6 := @parameter0: java.lang.String[];

        i0 = lengthof r6;

        r1 = newarray (int)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = <android.app.AppOpsManager: java.util.HashMap sOpStrToOp>;

        $r2 = r6[i2];

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r1[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        r7 = virtualinvoke r0.<android.app.AppOpsManager: java.util.List getPackagesForOps(int[])>(r1);

        if r7 == null goto label3;

        goto label4;

     label3:
        r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label4:
        return r7;
    }

    public boolean isOpActive(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<android.app.AppOpsManager: boolean isOperationActive(int,int,java.lang.String)>($i1, i0, r2);

        return $z0;
    }

    public boolean isOperationActive(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1;
        boolean z0;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        z0 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: boolean isOperationActive(int,int,java.lang.String)>(i0, i1, r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int noteOp(int)
    {
        android.app.AppOpsManager r0;
        int i0, $i1, $i2;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r1 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)>(i0, $i1, $r2, null, null);

        return $i2;
    }

    public int noteOp(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        java.lang.String r1;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r1, null, null);

        return $i2;
    }

    public int noteOp(int, int, java.lang.String, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        java.lang.String r1, r2, r3, $r5;
        java.lang.SecurityException $r4;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r1, r2, r3);

        if i2 == 2 goto label1;

        return i2;

     label1:
        $r4 = new java.lang.SecurityException;

        $r5 = specialinvoke r0.<android.app.AppOpsManager: java.lang.String buildSecurityExceptionMsg(int,int,java.lang.String)>(i0, i1, r1);

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public int noteOp(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, i0, r2, null, null);

        return $i1;
    }

    public int noteOp(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)>($i1, i0, r2, r3, r4);

        return $i2;
    }

    public int noteOpNoThrow(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        java.lang.String r1;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r1, null, null);

        return $i2;
    }

    public int noteOpNoThrow(int, int, java.lang.String, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2, i3, i4;
        java.lang.String r1, r6, r7;
        com.android.internal.app.IAppOpsService r2;
        android.os.RemoteException $r3, $r4, $r5, r8;
        boolean z0, z1;
        java.lang.RuntimeException $r9;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r7 := @parameter4: java.lang.String;

     label01:
        specialinvoke r0.<android.app.AppOpsManager: void collectNoteOpCallsForValidation(int)>(i0);

     label02:
        i1 = specialinvoke r0.<android.app.AppOpsManager: int getNotedOpCollectionMode(int,java.lang.String,int)>(i3, r6, i0);

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        if $i2 != 1000 goto label04;

     label03:
        z0 = 1;

        goto label05;

     label04:
        z0 = 0;

     label05:
        if i1 != 3 goto label08;

        if r7 != null goto label08;

     label06:
        r7 = staticinvoke <android.app.AppOpsManager: java.lang.String getFormattedStackTrace()>();

     label07:
        z0 = 1;

        goto label08;

     label08:
        r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

     label09:
        if i1 != 3 goto label10;

        z1 = 1;

        goto label11;

     label10:
        z1 = 0;

     label11:
        i4 = interfaceinvoke r2.<com.android.internal.app.IAppOpsService: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>(i0, i3, r6, r1, z1, r7, z0);

     label12:
        if i4 != 0 goto label17;

        if i1 != 1 goto label15;

     label13:
        specialinvoke r0.<android.app.AppOpsManager: void collectNotedOpForSelf(int,java.lang.String)>(i0, r1);

     label14:
        goto label17;

     label15:
        if i1 != 2 goto label17;

     label16:
        specialinvoke r0.<android.app.AppOpsManager: void collectNotedOpSync(int,java.lang.String)>(i0, r1);

     label17:
        return i4;

     label18:
        $r3 := @caughtexception;

        r8 = $r3;

        goto label21;

     label19:
        $r5 := @caughtexception;

        r8 = $r5;

        goto label21;

     label20:
        $r4 := @caughtexception;

        r8 = $r4;

     label21:
        $r9 = virtualinvoke r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label01 to label02 with label20;
        catch android.os.RemoteException from label02 to label03 with label19;
        catch android.os.RemoteException from label06 to label07 with label19;
        catch android.os.RemoteException from label08 to label09 with label18;
        catch android.os.RemoteException from label11 to label12 with label18;
        catch android.os.RemoteException from label13 to label14 with label18;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public int noteOpNoThrow(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, i0, r2, null, null);

        return $i1;
    }

    public int noteOpNoThrow(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>($i1, i0, r2, r3, r4);

        return $i2;
    }

    public int noteProxyOp(int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteProxyOp(int,java.lang.String,int,java.lang.String,java.lang.String)>(i0, r1, $i1, null, null);

        return $i2;
    }

    public int noteProxyOp(int, java.lang.String, int, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2, $i3;
        java.lang.String r1, r2, $r6, $r16, $r19, r20;
        java.lang.StringBuilder $r3;
        android.content.Context $r5;
        java.lang.String[] $r15;
        java.lang.SecurityException $r18;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r20 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteProxyOpNoThrow(int,java.lang.String,int,java.lang.String,java.lang.String)>(i0, r1, i1, r20, r2);

        if i2 == 2 goto label1;

        return i2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Proxy package ");

        $r5 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from uid ");

        $i3 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or calling package ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from uid ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed to perform ");

        $r15 = <android.app.AppOpsManager: java.lang.String[] sOpNames>;

        $r16 = $r15[i0];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = new java.lang.SecurityException;

        $r19 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw $r18;
    }

    public int noteProxyOp(java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int $i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>(r1, r2, $i0, null, null);

        return $i1;
    }

    public int noteProxyOp(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteProxyOp(int,java.lang.String,int,java.lang.String,java.lang.String)>($i1, r2, i0, r3, r4);

        return $i2;
    }

    public int noteProxyOpNoThrow(int, java.lang.String, int, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2, $i3, i4, i5;
        java.lang.String r1, r3, r4, r11, r12;
        com.android.internal.app.IAppOpsService r2;
        android.os.RemoteException $r5, $r6, $r7, $r8, $r9, $r10, r13;
        boolean z0, z1;
        android.content.Context $r14, $r15, r16;
        java.lang.RuntimeException $r17;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r11 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r12 := @parameter4: java.lang.String;

        i1 = staticinvoke <android.os.Process: int myUid()>();

     label01:
        specialinvoke r0.<android.app.AppOpsManager: void collectNoteOpCallsForValidation(int)>(i0);

        i2 = specialinvoke r0.<android.app.AppOpsManager: int getNotedOpCollectionMode(int,java.lang.String,int)>(i4, r11, i0);

     label02:
        if i1 != 1000 goto label03;

        z0 = 1;

        goto label04;

     label03:
        z0 = 0;

     label04:
        if i2 != 3 goto label08;

        if r12 != null goto label08;

     label05:
        r12 = staticinvoke <android.app.AppOpsManager: java.lang.String getFormattedStackTrace()>();

     label06:
        z0 = 1;

        goto label08;

     label07:
        $r5 := @caughtexception;

        r13 = $r5;

        goto label26;

     label08:
        r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $r14 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        r3 = virtualinvoke $r14.<android.content.Context: java.lang.String getOpPackageName()>();

        $r15 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        r4 = virtualinvoke $r15.<android.content.Context: java.lang.String getAttributionTag()>();

     label09:
        if i2 != 3 goto label10;

        z1 = 1;

        goto label11;

     label10:
        z1 = 0;

     label11:
        i5 = interfaceinvoke r2.<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>(i0, i4, r11, r1, i1, r3, r4, z1, r12, z0);

     label12:
        if i5 != 0 goto label22;

        if i2 != 1 goto label16;

     label13:
        specialinvoke r0.<android.app.AppOpsManager: void collectNotedOpForSelf(int,java.lang.String)>(i0, r1);

     label14:
        goto label22;

     label15:
        $r7 := @caughtexception;

        r13 = $r7;

        goto label26;

     label16:
        if i2 != 2 goto label21;

     label17:
        r16 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

     label18:
        $i3 = virtualinvoke r16.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.UPDATE_APP_OPS_STATS", -1, i1);

        if $i3 != 0 goto label22;

        specialinvoke r0.<android.app.AppOpsManager: void collectNotedOpSync(int,java.lang.String)>(i0, r1);

     label19:
        goto label22;

     label20:
        $r9 := @caughtexception;

        r13 = $r9;

        goto label26;

     label21:
        goto label22;

     label22:
        return i5;

     label23:
        $r8 := @caughtexception;

        r13 = $r8;

        goto label26;

     label24:
        $r10 := @caughtexception;

        r13 = $r10;

        goto label26;

     label25:
        $r6 := @caughtexception;

        r13 = $r6;

     label26:
        $r17 = virtualinvoke r13.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r17;

        catch android.os.RemoteException from label01 to label02 with label25;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label08 to label09 with label24;
        catch android.os.RemoteException from label11 to label12 with label23;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch android.os.RemoteException from label17 to label18 with label23;
        catch android.os.RemoteException from label18 to label19 with label20;
    }

    public int noteProxyOpNoThrow(java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int $i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>(r1, r2, $i0, null, null);

        return $i1;
    }

    public int noteProxyOpNoThrow(java.lang.String, java.lang.String, int)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>(r1, r2, i0, null, null);

        return $i1;
    }

    public int noteProxyOpNoThrow(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int noteProxyOpNoThrow(int,java.lang.String,int,java.lang.String,java.lang.String)>($i1, r2, i0, r3, r4);

        return $i2;
    }

    public void offsetHistory(long)
    {
        android.app.AppOpsManager r0;
        long l0;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void offsetHistory(long)>(l0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void rebootHistory(long)
    {
        android.app.AppOpsManager r0;
        long l0;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void rebootHistory(long)>(l0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reloadNonHistoricalState()
    {
        android.app.AppOpsManager r0;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void reloadNonHistoricalState()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resetAllModes()
    {
        android.app.AppOpsManager r0;
        android.content.Context $r2;
        com.android.internal.app.IAppOpsService $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.AppOpsManager;

     label1:
        $r3 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $r2 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        interfaceinvoke $r3.<com.android.internal.app.IAppOpsService: void resetAllModes(int,java.lang.String)>($i0, null);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resetHistoryParameters()
    {
        android.app.AppOpsManager r0;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void resetHistoryParameters()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setHistoryParameters(int, long, int)
    {
        android.app.AppOpsManager r0;
        int i0, i2;
        long l1;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void setHistoryParameters(int,long,int)>(i0, l1, i2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMode(int, int, java.lang.String, int)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: void setMode(int,int,java.lang.String,int)>(i0, i1, r4, i2);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMode(java.lang.String, int, java.lang.String, int)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        java.lang.String r1, r5;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $i2 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r5);

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void setMode(int,int,java.lang.String,int)>($i2, i0, r1, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNotedAppOpsCollector(android.app.AppOpsManager$AppOpsCollector)
    {
        android.app.AppOpsManager r0;
        java.lang.Object r1;
        android.os.HandlerExecutor r2;
        android.app.AppOpsManager$OnOpNotedCallback $r3;
        boolean $z0;
        android.os.Handler $r4;
        java.lang.Throwable $r5;
        android.app.AppOpsManager$AppOpsCollector r6;

        r0 := @this: android.app.AppOpsManager;

        r6 := @parameter0: android.app.AppOpsManager$AppOpsCollector;

        r1 = <android.app.AppOpsManager: java.lang.Object sLock>;

        entermonitor r1;

        if r6 == null goto label4;

     label1:
        $z0 = staticinvoke <android.app.AppOpsManager: boolean isListeningForOpNoted()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.app.AppOpsManager: void setOnOpNotedCallback(java.util.concurrent.Executor,android.app.AppOpsManager$OnOpNotedCallback)>(null, null);

     label2:
        r2 = new android.os.HandlerExecutor;

        $r4 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        specialinvoke r2.<android.os.HandlerExecutor: void <init>(android.os.Handler)>($r4);

        virtualinvoke r0.<android.app.AppOpsManager: void setOnOpNotedCallback(java.util.concurrent.Executor,android.app.AppOpsManager$OnOpNotedCallback)>(r2, r6);

     label3:
        goto label5;

     label4:
        $r3 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r3 == null goto label5;

        virtualinvoke r0.<android.app.AppOpsManager: void setOnOpNotedCallback(java.util.concurrent.Executor,android.app.AppOpsManager$OnOpNotedCallback)>(null, null);

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setOnOpNotedCallback(java.util.concurrent.Executor, android.app.AppOpsManager$OnOpNotedCallback)
    {
        android.app.AppOpsManager r0;
        java.lang.Object r1, $r16, $r19;
        android.app.AsyncNotedAppOp r2, r42;
        android.app.AppOpsManager$OnOpNotedCallback $r3, $r8, $r17, $r18, $r20, $r21, $r22, $r26, r35;
        android.content.Context $r5, $r10, $r23;
        com.android.internal.app.IAppOpsService $r6, $r11, $r24;
        java.lang.String $r7, $r12, $r25;
        com.android.internal.app.IAppOpsAsyncNotedCallback $r9, $r27;
        java.util.ArrayList $r13, $r14, $r15;
        android.os.RemoteException $r28, $r31;
        java.lang.Throwable $r30, $r33;
        java.util.concurrent.Executor r34, r40, r43;
        boolean z2, z3, z4, z5, z6;
        java.util.List r37, r38;
        int i0, i1, i2, i3;
        android.app._$$Lambda$AppOpsManager$PD824BJSYMsBzJsejbPpl76LS7s r41;
        android.app._$$Lambda$AppOpsManager$znmOchbf1jfrWSIXDpZNTtYuDQY r44;

        r0 := @this: android.app.AppOpsManager;

        r34 := @parameter0: java.util.concurrent.Executor;

        r35 := @parameter1: android.app.AppOpsManager$OnOpNotedCallback;

        if r35 != null goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        if r34 != null goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        if z2 != z3 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>(z4);

        r1 = <android.app.AppOpsManager: java.lang.Object sLock>;

        entermonitor r1;

        if r35 != null goto label16;

        z5 = 0;

     label07:
        $r22 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r22 == null goto label09;

     label08:
        z5 = 1;

     label09:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z5, "No callback is currently registered");

     label10:
        $r24 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $r23 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r25 = virtualinvoke $r23.<android.content.Context: java.lang.String getPackageName()>();

        $r26 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        $r27 = staticinvoke <android.app.AppOpsManager$OnOpNotedCallback: com.android.internal.app.IAppOpsAsyncNotedCallback access$6400(android.app.AppOpsManager$OnOpNotedCallback)>($r26);

        interfaceinvoke $r24.<com.android.internal.app.IAppOpsService: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>($r25, $r27);

     label11:
        goto label14;

     label12:
        $r28 := @caughtexception;

     label13:
        virtualinvoke $r28.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label14:
        <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback> = null;

     label15:
        goto label38;

     label16:
        z6 = 0;

     label17:
        $r3 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r3 != null goto label19;

     label18:
        z6 = 1;

     label19:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z6, "Another callback is already registered");

        staticinvoke <android.app.AppOpsManager$OnOpNotedCallback: java.util.concurrent.Executor access$6502(android.app.AppOpsManager$OnOpNotedCallback,java.util.concurrent.Executor)>(r35, r34);

        <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback> = r35;

     label20:
        r37 = null;

     label21:
        $r6 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $r5 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        $r8 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        $r9 = staticinvoke <android.app.AppOpsManager$OnOpNotedCallback: com.android.internal.app.IAppOpsAsyncNotedCallback access$6400(android.app.AppOpsManager$OnOpNotedCallback)>($r8);

        interfaceinvoke $r6.<com.android.internal.app.IAppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>($r7, $r9);

        $r11 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $r10 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r12 = virtualinvoke $r10.<android.content.Context: java.lang.String getPackageName()>();

        r38 = interfaceinvoke $r11.<com.android.internal.app.IAppOpsService: java.util.List extractAsyncOps(java.lang.String)>($r12);

     label22:
        r37 = r38;

        goto label25;

     label23:
        $r31 := @caughtexception;

     label24:
        virtualinvoke $r31.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label25:
        if r37 == null goto label31;

     label26:
        i0 = interfaceinvoke r37.<java.util.List: int size()>();

     label27:
        i1 = 0;

     label28:
        if i1 >= i0 goto label31;

     label29:
        $r19 = interfaceinvoke r37.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (android.app.AsyncNotedAppOp) $r19;

        $r20 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r20 == null goto label30;

        $r21 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        r40 = virtualinvoke $r21.<android.app.AppOpsManager$OnOpNotedCallback: java.util.concurrent.Executor getAsyncNotedExecutor()>();

        r41 = new android.app._$$Lambda$AppOpsManager$PD824BJSYMsBzJsejbPpl76LS7s;

        specialinvoke r41.<android.app._$$Lambda$AppOpsManager$PD824BJSYMsBzJsejbPpl76LS7s: void <init>(android.app.AsyncNotedAppOp)>(r2);

        interfaceinvoke r40.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r41);

     label30:
        i1 = i1 + 1;

        goto label28;

     label31:
        entermonitor r0;

     label32:
        $r13 = <android.app.AppOpsManager: java.util.ArrayList sUnforwardedOps>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

     label33:
        i3 = 0;

     label34:
        if i3 >= i2 goto label37;

     label35:
        $r15 = <android.app.AppOpsManager: java.util.ArrayList sUnforwardedOps>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r42 = (android.app.AsyncNotedAppOp) $r16;

        $r17 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        if $r17 == null goto label36;

        $r18 = <android.app.AppOpsManager: android.app.AppOpsManager$OnOpNotedCallback sOnOpNotedCallback>;

        r43 = virtualinvoke $r18.<android.app.AppOpsManager$OnOpNotedCallback: java.util.concurrent.Executor getAsyncNotedExecutor()>();

        r44 = new android.app._$$Lambda$AppOpsManager$znmOchbf1jfrWSIXDpZNTtYuDQY;

        specialinvoke r44.<android.app._$$Lambda$AppOpsManager$znmOchbf1jfrWSIXDpZNTtYuDQY: void <init>(android.app.AsyncNotedAppOp)>(r42);

        interfaceinvoke r43.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r44);

     label36:
        i3 = i3 + 1;

        goto label34;

     label37:
        $r14 = <android.app.AppOpsManager: java.util.ArrayList sUnforwardedOps>;

        virtualinvoke $r14.<java.util.ArrayList: void clear()>();

        exitmonitor r0;

     label38:
        exitmonitor r1;

     label39:
        return;

     label40:
        $r33 := @caughtexception;

     label41:
        exitmonitor r0;

     label42:
        throw $r33;

     label43:
        $r30 := @caughtexception;

     label44:
        exitmonitor r1;

     label45:
        throw $r30;

        catch java.lang.Throwable from label07 to label08 with label43;
        catch java.lang.Throwable from label09 to label10 with label43;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label43;
        catch java.lang.Throwable from label13 to label14 with label43;
        catch java.lang.Throwable from label14 to label15 with label43;
        catch java.lang.Throwable from label17 to label18 with label43;
        catch java.lang.Throwable from label19 to label20 with label43;
        catch android.os.RemoteException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label43;
        catch java.lang.Throwable from label24 to label25 with label43;
        catch java.lang.Throwable from label26 to label27 with label43;
        catch java.lang.Throwable from label29 to label30 with label43;
        catch java.lang.Throwable from label31 to label32 with label43;
        catch java.lang.Throwable from label32 to label33 with label40;
        catch java.lang.Throwable from label35 to label36 with label40;
        catch java.lang.Throwable from label37 to label38 with label40;
        catch java.lang.Throwable from label38 to label39 with label43;
        catch java.lang.Throwable from label41 to label42 with label40;
        catch java.lang.Throwable from label42 to label43 with label43;
        catch java.lang.Throwable from label44 to label45 with label43;
    }

    public void setRestriction(int, int, int, java.lang.String[])
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2, i3;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r4 := @parameter3: java.lang.String[];

     label1:
        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: void setAudioRestriction(int,int,int,int,java.lang.String[])>(i0, i1, i3, i2, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUidMode(int, int, int)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void setUidMode(int,int,int)>(i0, i1, i2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUidMode(java.lang.String, int, int)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.AppOpsManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        $i2 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r4);

        interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: void setUidMode(int,int,int)>($i2, i0, i1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserRestriction(int, boolean, android.os.IBinder)
    {
        android.app.AppOpsManager r0;
        int i0;
        boolean z0;
        android.os.IBinder r1;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.IBinder;

        virtualinvoke r0.<android.app.AppOpsManager: void setUserRestriction(int,boolean,android.os.IBinder,java.lang.String[])>(i0, z0, r1, null);

        return;
    }

    public void setUserRestriction(int, boolean, android.os.IBinder, java.lang.String[])
    {
        android.app.AppOpsManager r0;
        int i0, $i1;
        boolean z0;
        android.os.IBinder r1;
        java.lang.String[] r2;
        android.content.Context $r3;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.IBinder;

        r2 := @parameter3: java.lang.String[];

        $r3 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.app.AppOpsManager: void setUserRestrictionForUser(int,boolean,android.os.IBinder,java.lang.String[],int)>(i0, z0, r1, r2, $i1);

        return;
    }

    public void setUserRestrictionForUser(int, boolean, android.os.IBinder, java.lang.String[], int)
    {
        android.app.AppOpsManager r0;
        int i0, i1;
        boolean z0;
        java.lang.String[] r1;
        com.android.internal.app.IAppOpsService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.os.IBinder r5;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r5 := @parameter2: android.os.IBinder;

        r1 := @parameter3: java.lang.String[];

        i1 := @parameter4: int;

     label1:
        $r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r2.<com.android.internal.app.IAppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>(i0, z0, r5, i1, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int startOp(int)
    {
        android.app.AppOpsManager r0;
        int i0, $i1, $i2;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r1 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>(i0, $i1, $r2, 0, null, null);

        return $i2;
    }

    public int startOp(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        java.lang.String r1;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>(i0, i1, r1, 0, null, null);

        return $i2;
    }

    public int startOp(int, int, java.lang.String, boolean)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>(i0, i1, r1, z0, null, null);

        return $i2;
    }

    public int startOp(int, int, java.lang.String, boolean, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        java.lang.String r1, r2, r3, $r5;
        boolean z0;
        java.lang.SecurityException $r4;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String;

        i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>(i0, i1, r1, z0, r2, r3);

        if i2 == 2 goto label1;

        return i2;

     label1:
        $r4 = new java.lang.SecurityException;

        $r5 = specialinvoke r0.<android.app.AppOpsManager: java.lang.String buildSecurityExceptionMsg(int,int,java.lang.String)>(i0, i1, r1);

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public int startOp(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, i0, r2, null, null);

        return $i1;
    }

    public int startOp(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOp(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>($i1, i0, r2, 0, r3, r4);

        return $i2;
    }

    public int startOpNoThrow(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        java.lang.String r1;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>(i0, i1, r1, 0, null, null);

        return $i2;
    }

    public int startOpNoThrow(int, int, java.lang.String, boolean)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>(i0, i1, r1, z0, null, null);

        return $i2;
    }

    public int startOpNoThrow(int, int, java.lang.String, boolean, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, $i2, i3, i4;
        boolean z0, z1, z2;
        java.lang.String r1, r7, r8;
        com.android.internal.app.IAppOpsService r2;
        android.os.IBinder r3;
        android.os.RemoteException $r4, $r5, $r6, r9;
        java.lang.RuntimeException $r10;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        r7 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.lang.String;

        r8 := @parameter5: java.lang.String;

     label01:
        specialinvoke r0.<android.app.AppOpsManager: void collectNoteOpCallsForValidation(int)>(i0);

     label02:
        i1 = specialinvoke r0.<android.app.AppOpsManager: int getNotedOpCollectionMode(int,java.lang.String,int)>(i3, r7, i0);

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        if $i2 != 1000 goto label04;

     label03:
        z1 = 1;

        goto label05;

     label04:
        z1 = 0;

     label05:
        if i1 != 3 goto label08;

        if r8 != null goto label08;

     label06:
        r8 = staticinvoke <android.app.AppOpsManager: java.lang.String getFormattedStackTrace()>();

     label07:
        z1 = 1;

        goto label08;

     label08:
        r2 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        r3 = staticinvoke <android.app.AppOpsManager: android.os.IBinder getClientId()>();

     label09:
        if i1 != 3 goto label10;

        z2 = 1;

        goto label11;

     label10:
        z2 = 0;

     label11:
        i4 = interfaceinvoke r2.<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>(r3, i0, i3, r7, r1, z0, z2, r8, z1);

     label12:
        if i4 != 0 goto label17;

        if i1 != 1 goto label15;

     label13:
        specialinvoke r0.<android.app.AppOpsManager: void collectNotedOpForSelf(int,java.lang.String)>(i0, r1);

     label14:
        goto label17;

     label15:
        if i1 != 2 goto label17;

     label16:
        specialinvoke r0.<android.app.AppOpsManager: void collectNotedOpSync(int,java.lang.String)>(i0, r1);

     label17:
        return i4;

     label18:
        $r6 := @caughtexception;

        r9 = $r6;

        goto label21;

     label19:
        $r4 := @caughtexception;

        r9 = $r4;

        goto label21;

     label20:
        $r5 := @caughtexception;

        r9 = $r5;

     label21:
        $r10 = virtualinvoke r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label01 to label02 with label20;
        catch android.os.RemoteException from label02 to label03 with label19;
        catch android.os.RemoteException from label06 to label07 with label19;
        catch android.os.RemoteException from label08 to label09 with label18;
        catch android.os.RemoteException from label11 to label12 with label18;
        catch android.os.RemoteException from label13 to label14 with label18;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public int startOpNoThrow(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, i0, r2, null, null);

        return $i1;
    }

    public int startOpNoThrow(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>($i1, i0, r2, 0, r3, r4);

        return $i2;
    }

    public void startWatchingActive(int[], android.app.AppOpsManager$OnOpActiveChangedListener)
    {
        android.app.AppOpsManager r0;
        int[] r1;
        android.app.AppOpsManager$OnOpActiveChangedListener r2;
        java.lang.String[] r3;
        int $i0, $i1, $i2, i3;
        android.content.Context $r4;
        java.util.concurrent.Executor $r5;
        java.lang.String $r6;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.app.AppOpsManager$OnOpActiveChangedListener;

        $i0 = lengthof r1;

        r3 = newarray (java.lang.String)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $i2 = r1[i3];

        $r6 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPublicName(int)>($i2);

        r3[i3] = $r6;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = r0.<android.app.AppOpsManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        virtualinvoke r0.<android.app.AppOpsManager: void startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)>(r3, $r5, r2);

        return;
    }

    public void startWatchingActive(java.lang.String[], java.util.concurrent.Executor, android.app.AppOpsManager$OnOpActiveChangedListener)
    {
        android.app.AppOpsManager r0;
        android.app.AppOpsManager$OnOpActiveChangedListener r1;
        android.util.ArrayMap r2, $r7, $r10;
        android.app.AppOpsManager$3 r3;
        java.lang.Object $r8;
        com.android.internal.app.IAppOpsActiveCallback $r9;
        int $i0, $i1, $i2, i3;
        com.android.internal.app.IAppOpsService $r12;
        java.lang.String $r13;
        android.os.RemoteException $r14;
        java.lang.RuntimeException $r15;
        java.lang.Throwable $r16;
        java.lang.String[] r17;
        java.util.concurrent.Executor r18;
        int[] r19;

        r0 := @this: android.app.AppOpsManager;

        r17 := @parameter0: java.lang.String[];

        r18 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.app.AppOpsManager$OnOpActiveChangedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r17);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r18);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mActiveWatchers>;

        entermonitor r2;

     label01:
        $r7 = r0.<android.app.AppOpsManager: android.util.ArrayMap mActiveWatchers>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (com.android.internal.app.IAppOpsActiveCallback) $r8;

        if $r9 == null goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        r3 = new android.app.AppOpsManager$3;

        specialinvoke r3.<android.app.AppOpsManager$3: void <init>(android.app.AppOpsManager,java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)>(r0, r18, r1);

        $r10 = r0.<android.app.AppOpsManager: android.util.ArrayMap mActiveWatchers>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        exitmonitor r2;

     label04:
        $i0 = lengthof r17;

        r19 = newarray (int)[$i0];

        i3 = 0;

     label05:
        $i1 = lengthof r17;

        if i3 >= $i1 goto label06;

        $r13 = r17[i3];

        $i2 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>($r13);

        r19[i3] = $i2;

        i3 = i3 + 1;

        goto label05;

     label06:
        $r12 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r12.<com.android.internal.app.IAppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>(r19, r3);

     label07:
        return;

     label08:
        $r14 := @caughtexception;

        $r15 = virtualinvoke $r14.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r15;

     label09:
        $r16 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void startWatchingMode(int, java.lang.String, int, android.app.AppOpsManager$OnOpChangedListener)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        android.app.AppOpsManager$OnOpChangedListener r1;
        android.util.ArrayMap r2, $r4, $r7;
        com.android.internal.app.IAppOpsCallback r3, r13;
        boolean z0;
        java.lang.Object $r5;
        com.android.internal.app.IAppOpsService $r6;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        java.lang.Throwable $r11;
        java.lang.String r12;
        android.app.AppOpsManager$2 r16;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r1 := @parameter3: android.app.AppOpsManager$OnOpChangedListener;

        r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mModeWatchers>;

        entermonitor r2;

     label01:
        $r4 = r0.<android.app.AppOpsManager: android.util.ArrayMap mModeWatchers>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.internal.app.IAppOpsCallback) $r5;

     label02:
        r13 = r3;

        if r3 != null goto label05;

     label03:
        r16 = new android.app.AppOpsManager$2;

        r13 = r16;

        specialinvoke r16.<android.app.AppOpsManager$2: void <init>(android.app.AppOpsManager,android.app.AppOpsManager$OnOpChangedListener)>(r0, r1);

     label04:
        $r7 = r0.<android.app.AppOpsManager: android.util.ArrayMap mModeWatchers>;

        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r16);

     label05:
        z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148180766L);

     label06:
        i2 = i1;

        if z0 != 0 goto label07;

        i2 = i1 | 2;

     label07:
        $r6 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r6.<com.android.internal.app.IAppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>(i0, r12, i2, r13);

     label08:
        exitmonitor r2;

     label09:
        return;

     label10:
        $r9 := @caughtexception;

     label11:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void startWatchingMode(int, java.lang.String, android.app.AppOpsManager$OnOpChangedListener)
    {
        android.app.AppOpsManager r0;
        int i0;
        java.lang.String r1;
        android.app.AppOpsManager$OnOpChangedListener r2;

        r0 := @this: android.app.AppOpsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.app.AppOpsManager$OnOpChangedListener;

        virtualinvoke r0.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)>(i0, r1, 0, r2);

        return;
    }

    public void startWatchingMode(java.lang.String, java.lang.String, int, android.app.AppOpsManager$OnOpChangedListener)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;
        android.app.AppOpsManager$OnOpChangedListener r3;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.app.AppOpsManager$OnOpChangedListener;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        virtualinvoke r0.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)>($i1, r2, i0, r3);

        return;
    }

    public void startWatchingMode(java.lang.String, java.lang.String, android.app.AppOpsManager$OnOpChangedListener)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        android.app.AppOpsManager$OnOpChangedListener r3;
        int $i0;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.AppOpsManager$OnOpChangedListener;

        $i0 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        virtualinvoke r0.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>($i0, r2, r3);

        return;
    }

    public void startWatchingNoted(int[], android.app.AppOpsManager$OnOpNotedListener)
    {
        android.app.AppOpsManager r0;
        android.app.AppOpsManager$OnOpNotedListener r1;
        android.util.ArrayMap r2, $r4, $r7;
        android.app.AppOpsManager$5 r3;
        java.lang.Object $r5;
        com.android.internal.app.IAppOpsNotedCallback $r6;
        com.android.internal.app.IAppOpsService $r9;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        java.lang.Throwable $r12;
        int[] r13;

        r0 := @this: android.app.AppOpsManager;

        r13 := @parameter0: int[];

        r1 := @parameter1: android.app.AppOpsManager$OnOpNotedListener;

        r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mNotedWatchers>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.app.AppOpsManager: android.util.ArrayMap mNotedWatchers>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (com.android.internal.app.IAppOpsNotedCallback) $r5;

        if $r6 == null goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        r3 = new android.app.AppOpsManager$5;

        specialinvoke r3.<android.app.AppOpsManager$5: void <init>(android.app.AppOpsManager,android.app.AppOpsManager$OnOpNotedListener)>(r0, r1);

        $r7 = r0.<android.app.AppOpsManager: android.util.ArrayMap mNotedWatchers>;

        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        exitmonitor r2;

     label4:
        $r9 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r9.<com.android.internal.app.IAppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>(r13, r3);

     label5:
        return;

     label6:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label7:
        $r12 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void startWatchingStarted(int[], android.app.AppOpsManager$OnOpStartedListener)
    {
        android.app.AppOpsManager r0;
        android.app.AppOpsManager$OnOpStartedListener r1;
        android.util.ArrayMap r2, $r4, $r5;
        android.app.AppOpsManager$4 r3;
        boolean $z0;
        com.android.internal.app.IAppOpsService $r7;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        int[] r11;

        r0 := @this: android.app.AppOpsManager;

        r11 := @parameter0: int[];

        r1 := @parameter1: android.app.AppOpsManager$OnOpStartedListener;

        r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mStartedWatchers>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.app.AppOpsManager: android.util.ArrayMap mStartedWatchers>;

        $z0 = virtualinvoke $r4.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        r3 = new android.app.AppOpsManager$4;

        specialinvoke r3.<android.app.AppOpsManager$4: void <init>(android.app.AppOpsManager,android.app.AppOpsManager$OnOpStartedListener)>(r0, r1);

        $r5 = r0.<android.app.AppOpsManager: android.util.ArrayMap mStartedWatchers>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        exitmonitor r2;

     label4:
        $r7 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r7.<com.android.internal.app.IAppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>(r11, r3);

     label5:
        return;

     label6:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void stopWatchingActive(android.app.AppOpsManager$OnOpActiveChangedListener)
    {
        android.app.AppOpsManager r0;
        android.util.ArrayMap r1, $r2;
        java.lang.Object $r3;
        com.android.internal.app.IAppOpsService $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        android.app.AppOpsManager$OnOpActiveChangedListener r8;
        com.android.internal.app.IAppOpsActiveCallback r9;

        r0 := @this: android.app.AppOpsManager;

        r8 := @parameter0: android.app.AppOpsManager$OnOpActiveChangedListener;

        r1 = r0.<android.app.AppOpsManager: android.util.ArrayMap mActiveWatchers>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mActiveWatchers>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        r9 = (com.android.internal.app.IAppOpsActiveCallback) $r3;

     label02:
        if r9 == null goto label07;

     label03:
        $r4 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)>(r9);

     label04:
        goto label07;

     label05:
        $r5 := @caughtexception;

     label06:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void stopWatchingMode(android.app.AppOpsManager$OnOpChangedListener)
    {
        android.app.AppOpsManager r0;
        android.util.ArrayMap r1, $r2;
        java.lang.Object $r3;
        com.android.internal.app.IAppOpsService $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        android.app.AppOpsManager$OnOpChangedListener r8;
        com.android.internal.app.IAppOpsCallback r9;

        r0 := @this: android.app.AppOpsManager;

        r8 := @parameter0: android.app.AppOpsManager$OnOpChangedListener;

        r1 = r0.<android.app.AppOpsManager: android.util.ArrayMap mModeWatchers>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mModeWatchers>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        r9 = (com.android.internal.app.IAppOpsCallback) $r3;

     label02:
        if r9 == null goto label07;

     label03:
        $r4 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>(r9);

     label04:
        goto label07;

     label05:
        $r5 := @caughtexception;

     label06:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void stopWatchingNoted(android.app.AppOpsManager$OnOpNotedListener)
    {
        android.app.AppOpsManager r0;
        android.util.ArrayMap r1, $r2;
        java.lang.Object $r3;
        com.android.internal.app.IAppOpsService $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.app.AppOpsManager$OnOpNotedListener r8;
        com.android.internal.app.IAppOpsNotedCallback r9;

        r0 := @this: android.app.AppOpsManager;

        r8 := @parameter0: android.app.AppOpsManager$OnOpNotedListener;

        r1 = r0.<android.app.AppOpsManager: android.util.ArrayMap mNotedWatchers>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mNotedWatchers>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        r9 = (com.android.internal.app.IAppOpsNotedCallback) $r3;

     label02:
        if r9 == null goto label07;

     label03:
        $r4 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: void stopWatchingNoted(com.android.internal.app.IAppOpsNotedCallback)>(r9);

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

     label06:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void stopWatchingStarted(android.app.AppOpsManager$OnOpStartedListener)
    {
        android.app.AppOpsManager r0;
        android.util.ArrayMap r1, $r2;
        java.lang.Object $r3;
        com.android.internal.app.IAppOpsService $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        android.app.AppOpsManager$OnOpStartedListener r8;
        com.android.internal.app.IAppOpsStartedCallback r9;

        r0 := @this: android.app.AppOpsManager;

        r8 := @parameter0: android.app.AppOpsManager$OnOpStartedListener;

        r1 = r0.<android.app.AppOpsManager: android.util.ArrayMap mStartedWatchers>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.app.AppOpsManager: android.util.ArrayMap mStartedWatchers>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        r9 = (com.android.internal.app.IAppOpsStartedCallback) $r3;

     label02:
        if r9 == null goto label07;

     label03:
        $r4 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: void stopWatchingStarted(com.android.internal.app.IAppOpsStartedCallback)>(r9);

     label04:
        goto label07;

     label05:
        $r5 := @caughtexception;

     label06:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int unsafeCheckOp(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)>($i1, i0, r2);

        return $i2;
    }

    public int unsafeCheckOpNoThrow(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>($i1, i0, r2);

        return $i2;
    }

    public int unsafeCheckOpRaw(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)>(r1, i0, r2);

        return $i1;
    }

    public int unsafeCheckOpRawNoThrow(int, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        int i0, i1, i2;
        com.android.internal.app.IAppOpsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.AppOpsManager;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

     label1:
        $r1 = r0.<android.app.AppOpsManager: com.android.internal.app.IAppOpsService mService>;

        i2 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: int checkOperationRaw(int,int,java.lang.String)>(i1, i0, r4);

     label2:
        return i2;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int unsafeCheckOpRawNoThrow(java.lang.String, int, java.lang.String)
    {
        android.app.AppOpsManager r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;

        r0 := @this: android.app.AppOpsManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r1);

        $i2 = virtualinvoke r0.<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(int,int,java.lang.String)>($i1, i0, r2);

        return $i2;
    }
}
