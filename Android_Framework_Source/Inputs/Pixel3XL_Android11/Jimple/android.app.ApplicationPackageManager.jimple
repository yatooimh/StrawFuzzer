public class android.app.ApplicationPackageManager extends android.content.pm.PackageManager
{
    public static final java.lang.String APP_PERMISSION_BUTTON_ALLOW_ALWAYS;
    private static final boolean DEBUG_ICONS;
    public static final boolean DEBUG_TRACE_GRANTS;
    public static final boolean DEBUG_TRACE_PERMISSION_UPDATES;
    private static final int DEFAULT_EPHEMERAL_COOKIE_MAX_SIZE_BYTES;
    public static final java.lang.String PERMISSION_CONTROLLER_RESOURCE_PACKAGE;
    private static final java.lang.String TAG;
    private static final android.app.PropertyInvalidatedCache mHasSystemFeatureCache;
    private static final int sDefaultFlags;
    private static android.util.ArrayMap sIconCache;
    private static android.util.ArrayMap sStringCache;
    private static final java.lang.Object sSync;
    private android.content.pm.dex.ArtManager mArtManager;
    volatile int mCachedSafeMode;
    private final android.app.ContextImpl mContext;
    private final java.util.ArrayList mDelegates;
    private android.content.pm.PackageInstaller mInstaller;
    private final java.lang.Object mLock;
    private final android.content.pm.IPackageManager mPM;
    private final java.util.Map mPermissionListeners;
    private final android.permission.IPermissionManager mPermissionManager;
    private java.lang.String mPermissionsControllerPackageName;
    private android.os.UserManager mUserManager;
    private volatile boolean mUserUnlocked;

    static void <clinit>()
    {
        android.app.ApplicationPackageManager$1 $r0;
        java.lang.Object $r1;
        android.util.ArrayMap $r2, $r3;

        <android.app.ApplicationPackageManager: int sDefaultFlags> = 1024;

        <android.app.ApplicationPackageManager: java.lang.String TAG> = "ApplicationPackageManager";

        <android.app.ApplicationPackageManager: java.lang.String PERMISSION_CONTROLLER_RESOURCE_PACKAGE> = "com.android.permissioncontroller";

        <android.app.ApplicationPackageManager: int DEFAULT_EPHEMERAL_COOKIE_MAX_SIZE_BYTES> = 16384;

        <android.app.ApplicationPackageManager: boolean DEBUG_TRACE_PERMISSION_UPDATES> = 0;

        <android.app.ApplicationPackageManager: boolean DEBUG_TRACE_GRANTS> = 0;

        <android.app.ApplicationPackageManager: boolean DEBUG_ICONS> = 0;

        <android.app.ApplicationPackageManager: java.lang.String APP_PERMISSION_BUTTON_ALLOW_ALWAYS> = "app_permission_button_allow_always";

        $r0 = new android.app.ApplicationPackageManager$1;

        specialinvoke $r0.<android.app.ApplicationPackageManager$1: void <init>(int,java.lang.String)>(256, "cache_key.has_system_feature");

        <android.app.ApplicationPackageManager: android.app.PropertyInvalidatedCache mHasSystemFeatureCache> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.app.ApplicationPackageManager: java.lang.Object sSync> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache> = $r3;

        return;
    }

    protected void <init>(android.app.ContextImpl, android.content.pm.IPackageManager)
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl r1;
        android.content.pm.IPackageManager r2;
        android.permission.IPermissionManager $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.app.ContextImpl;

        r2 := @parameter1: android.content.pm.IPackageManager;

        $r3 = staticinvoke <android.app.ActivityThread: android.permission.IPermissionManager getPermissionManager()>();

        specialinvoke r0.<android.app.ApplicationPackageManager: void <init>(android.app.ContextImpl,android.content.pm.IPackageManager,android.permission.IPermissionManager)>(r1, r2, $r3);

        return;
    }

    protected void <init>(android.app.ContextImpl, android.content.pm.IPackageManager, android.permission.IPermissionManager)
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl r1;
        android.content.pm.IPackageManager r2;
        android.permission.IPermissionManager r3;
        java.lang.Object $r4;
        java.util.ArrayList $r5;
        android.util.ArrayMap $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.app.ContextImpl;

        r2 := @parameter1: android.content.pm.IPackageManager;

        r3 := @parameter2: android.permission.IPermissionManager;

        specialinvoke r0.<android.content.pm.PackageManager: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.app.ApplicationPackageManager: java.lang.Object mLock> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.app.ApplicationPackageManager: java.util.ArrayList mDelegates> = $r5;

        r0.<android.app.ApplicationPackageManager: int mCachedSafeMode> = -1;

        r0.<android.app.ApplicationPackageManager: boolean mUserUnlocked> = 0;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.ApplicationPackageManager: java.util.Map mPermissionListeners> = $r6;

        r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext> = r1;

        r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM> = r2;

        r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager> = r3;

        return;
    }

    static void configurationChanged()
    {
        java.lang.Object r0;
        android.util.ArrayMap $r2, $r3;
        java.lang.Throwable $r4;

        r0 = <android.app.ApplicationPackageManager: java.lang.Object sSync>;

        entermonitor r0;

     label1:
        $r2 = <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache>;

        virtualinvoke $r2.<android.util.ArrayMap: void clear()>();

        $r3 = <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache>;

        virtualinvoke $r3.<android.util.ArrayMap: void clear()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.graphics.drawable.Drawable getBadgedDrawable(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.Rect, boolean)
    {
        android.app.ApplicationPackageManager r0;
        android.graphics.Rect r1, $r22;
        boolean z0, $z1, $z2, $z3, z4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11;
        android.graphics.Bitmap$Config $r3;
        android.graphics.Canvas $r4;
        android.graphics.drawable.BitmapDrawable $r5, $r8, $r14, $r15;
        android.app.ContextImpl $r6;
        android.content.res.Resources $r7;
        android.graphics.Bitmap $r9, $r16, r19;
        float $f0, $f1;
        android.graphics.drawable.Drawable r17, r18;
        java.lang.StringBuilder $r20;
        java.lang.IllegalArgumentException $r23;
        java.lang.String $r24;

        r0 := @this: android.app.ApplicationPackageManager;

        r17 := @parameter0: android.graphics.drawable.Drawable;

        r18 := @parameter1: android.graphics.drawable.Drawable;

        r1 := @parameter2: android.graphics.Rect;

        z0 := @parameter3: boolean;

        i0 = virtualinvoke r17.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i1 = virtualinvoke r17.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if z0 == 0 goto label01;

        $z2 = r17 instanceof android.graphics.drawable.BitmapDrawable;

        if $z2 == 0 goto label01;

        $r15 = (android.graphics.drawable.BitmapDrawable) r17;

        $r16 = virtualinvoke $r15.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        $z3 = virtualinvoke $r16.<android.graphics.Bitmap: boolean isMutable()>();

        if $z3 == 0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        if z4 == 0 goto label03;

        $r14 = (android.graphics.drawable.BitmapDrawable) r17;

        r19 = virtualinvoke $r14.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        goto label04;

     label03:
        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r19 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i1, $r3);

     label04:
        $r4 = new android.graphics.Canvas;

        specialinvoke $r4.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r19);

        if z4 != 0 goto label05;

        virtualinvoke r17.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, i0, i1);

        virtualinvoke r17.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r4);

     label05:
        if r1 == null goto label07;

        $i3 = r1.<android.graphics.Rect: int left>;

        if $i3 < 0 goto label06;

        $i4 = r1.<android.graphics.Rect: int top>;

        if $i4 < 0 goto label06;

        $i5 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        if $i5 > i0 goto label06;

        $i6 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if $i6 > i1 goto label06;

        $i7 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i8 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        virtualinvoke r18.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i7, $i8);

        virtualinvoke $r4.<android.graphics.Canvas: int save()>();

        $i10 = r1.<android.graphics.Rect: int left>;

        $f1 = (float) $i10;

        $i11 = r1.<android.graphics.Rect: int top>;

        $f0 = (float) $i11;

        virtualinvoke $r4.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        virtualinvoke r18.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r4);

        virtualinvoke $r4.<android.graphics.Canvas: void restore()>();

        goto label08;

     label06:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Badge location ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in badged drawable bounds ");

        $r22 = new android.graphics.Rect;

        specialinvoke $r22.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, i0, i1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label07:
        virtualinvoke r18.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, i0, i1);

        virtualinvoke r18.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r4);

     label08:
        if z4 != 0 goto label10;

        $r5 = new android.graphics.drawable.BitmapDrawable;

        $r6 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r7 = virtualinvoke $r6.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r7, r19);

        $z1 = r17 instanceof android.graphics.drawable.BitmapDrawable;

        if $z1 == 0 goto label09;

        $r8 = (android.graphics.drawable.BitmapDrawable) r17;

        $r9 = virtualinvoke $r8.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        $i2 = virtualinvoke $r9.<android.graphics.Bitmap: int getDensity()>();

        virtualinvoke $r5.<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>($i2);

     label09:
        return $r5;

     label10:
        return r17;
    }

    private android.graphics.drawable.Drawable getCachedIcon(android.app.ApplicationPackageManager$ResourceName)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.Object r1, $r3, $r4;
        android.util.ArrayMap $r2, $r5;
        java.lang.Throwable $r7;
        android.app.ApplicationPackageManager$ResourceName r8;
        java.lang.ref.WeakReference r9;
        android.graphics.drawable.Drawable$ConstantState r10;
        android.graphics.drawable.Drawable r11;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: android.app.ApplicationPackageManager$ResourceName;

        r1 = <android.app.ApplicationPackageManager: java.lang.Object sSync>;

        entermonitor r1;

     label01:
        $r2 = <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (java.lang.ref.WeakReference) $r3;

     label02:
        if r9 == null goto label08;

     label03:
        $r4 = virtualinvoke r9.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r10 = (android.graphics.drawable.Drawable$ConstantState) $r4;

     label04:
        if r10 == null goto label07;

     label05:
        r11 = virtualinvoke r10.<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>();

        exitmonitor r1;

     label06:
        return r11;

     label07:
        $r5 = <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

     label08:
        exitmonitor r1;

     label09:
        return null;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private java.lang.CharSequence getCachedString(android.app.ApplicationPackageManager$ResourceName)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.Object r1, $r3, $r4;
        android.util.ArrayMap $r2, $r5;
        java.lang.Throwable $r7;
        android.app.ApplicationPackageManager$ResourceName r8;
        java.lang.ref.WeakReference r9;
        java.lang.CharSequence r10;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: android.app.ApplicationPackageManager$ResourceName;

        r1 = <android.app.ApplicationPackageManager: java.lang.Object sSync>;

        entermonitor r1;

     label01:
        $r2 = <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (java.lang.ref.WeakReference) $r3;

     label02:
        if r9 == null goto label08;

     label03:
        $r4 = virtualinvoke r9.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r10 = (java.lang.CharSequence) $r4;

     label04:
        if r10 == null goto label07;

     label05:
        exitmonitor r1;

     label06:
        return r10;

     label07:
        $r5 = <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

     label08:
        exitmonitor r1;

     label09:
        return null;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private android.graphics.drawable.Drawable getDrawableForDensity(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, i2;
        android.app.ContextImpl $r1, $r4;
        android.content.res.Resources $r2, $r5;
        android.graphics.drawable.Drawable $r3;
        android.util.DisplayMetrics $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1;

        if i1 > 0 goto label1;

        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r5 = virtualinvoke $r4.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i2 = $r6.<android.util.DisplayMetrics: int densityDpi>;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>(i0, i2);

        return $r3;
    }

    private android.content.Intent getLaunchIntentForPackageAndCategory(java.lang.String, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent $r2, $r5;
        int $i0;
        java.lang.Object $r7, $r11;
        android.content.pm.ResolveInfo $r8, $r12;
        android.content.pm.ActivityInfo $r9, $r13;
        java.lang.String $r10, $r14, r16, r17;
        java.util.List r18;

        r0 := @this: android.app.ApplicationPackageManager;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.lang.String;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>(r17);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r16);

        r18 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>($r2, 0);

        if r18 == null goto label2;

        $i0 = interfaceinvoke r18.<java.util.List: int size()>();

        if $i0 > 0 goto label1;

        goto label2;

     label1:
        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(android.content.Intent)>($r2);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r7 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (android.content.pm.ResolveInfo) $r7;

        $r9 = $r8.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r10 = $r9.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r11 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (android.content.pm.ResolveInfo) $r11;

        $r13 = $r12.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r14 = $r13.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r10, $r14);

        return $r5;

     label2:
        return null;
    }

    private android.graphics.drawable.Drawable getProfileIconForDensity(android.os.UserHandle, int, int)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        int i0, i1, $i2;
        boolean $z0;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.os.UserHandle;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<android.app.ApplicationPackageManager: boolean hasUserBadge(int)>($i2);

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>(i0, i1);

        return $r2;

     label1:
        return null;
    }

    private int getUserBadgeColor(android.os.UserHandle, boolean)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        boolean z0, $z1;
        android.os.UserManager $r2, $r6;
        int $i0, $i1, $i2, $i3;
        android.app.ContextImpl $r3;
        android.content.res.Resources $r4;
        android.content.res.Configuration $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.os.UserHandle;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = virtualinvoke $r3.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z1 = virtualinvoke $r5.<android.content.res.Configuration: boolean isNightModeActive()>();

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()>();

        $i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $i3 = virtualinvoke $r6.<android.os.UserManager: int getUserBadgeDarkColor(int)>($i2);

        return $i3;

     label1:
        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $i1 = virtualinvoke $r2.<android.os.UserManager: int getUserBadgeColor(int)>($i0);

        return $i1;
    }

    static void handlePackageBroadcast(int, java.lang.String[], boolean)
    {
        boolean z0, $z1, $z2, z3, z4;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.String r0, $r9, $r15;
        java.lang.Object r1, $r7, $r13;
        android.app.ActivityThread $r2;
        java.lang.Runtime $r3;
        android.util.ArrayMap $r4, $r5, $r6, $r10, $r12, $r16;
        android.app.ApplicationPackageManager$ResourceName $r8, $r14;
        java.lang.Throwable $r18;
        java.lang.String[] r19;

        i4 := @parameter0: int;

        r19 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        z3 = 0;

        if i4 != 1 goto label01;

        z3 = 1;

     label01:
        if r19 == null goto label21;

        $i1 = lengthof r19;

        if $i1 <= 0 goto label21;

        z4 = 0;

        i0 = lengthof r19;

        i5 = 0;

     label02:
        if i5 >= i0 goto label18;

        r0 = r19[i5];

        r1 = <android.app.ApplicationPackageManager: java.lang.Object sSync>;

        entermonitor r1;

     label03:
        $r4 = <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache>;

        $i2 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        i6 = $i2 - 1;

     label04:
        if i6 < 0 goto label08;

     label05:
        $r12 = <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i6);

        $r14 = (android.app.ApplicationPackageManager$ResourceName) $r13;

        $r15 = $r14.<android.app.ApplicationPackageManager$ResourceName: java.lang.String packageName>;

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label07;

        $r16 = <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache>;

        virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i6);

     label06:
        z4 = 1;

     label07:
        i6 = i6 + -1;

        goto label04;

     label08:
        $r5 = <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache>;

        $i3 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        i7 = $i3 - 1;

     label09:
        if i7 < 0 goto label13;

     label10:
        $r6 = <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i7);

        $r8 = (android.app.ApplicationPackageManager$ResourceName) $r7;

        $r9 = $r8.<android.app.ApplicationPackageManager$ResourceName: java.lang.String packageName>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label12;

        $r10 = <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i7);

     label11:
        z4 = 1;

     label12:
        i7 = i7 + -1;

        goto label09;

     label13:
        exitmonitor r1;

     label14:
        i5 = i5 + 1;

        goto label02;

     label15:
        $r18 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r18;

     label18:
        if z4 != 0 goto label19;

        if z0 == 0 goto label21;

     label19:
        if z3 == 0 goto label20;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r3.<java.lang.Runtime: void gc()>();

        goto label21;

     label20:
        $r2 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        virtualinvoke $r2.<android.app.ActivityThread: void scheduleGcIdler()>();

     label21:
        return;

        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private boolean hasUserBadge(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.os.UserManager $r1;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()>();

        $z0 = virtualinvoke $r1.<android.os.UserManager: boolean hasBadge(int)>(i0);

        return $z0;
    }

    private int installExistingPackageAsUser(java.lang.String, int, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, i2;
        android.content.pm.PackageManager$NameNotFoundException r1;
        java.lang.StringBuilder r2;
        android.content.pm.IPackageManager $r3;
        java.lang.String $r7, r10;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r10 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i2 = interfaceinvoke $r3.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>(r10, i0, 4194304, i1, null);

     label2:
        if i2 == -3 goto label3;

        return i2;

     label3:
        r1 = new android.content.pm.PackageManager$NameNotFoundException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist");

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r7);

        throw r1;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public static void invalidateHasSystemFeatureCache()
    {
        android.app.PropertyInvalidatedCache $r0;

        $r0 = <android.app.ApplicationPackageManager: android.app.PropertyInvalidatedCache mHasSystemFeatureCache>;

        virtualinvoke $r0.<android.app.PropertyInvalidatedCache: void invalidateCache()>();

        return;
    }

    private boolean isPackageCandidateVolume(android.app.ContextImpl, android.content.pm.ApplicationInfo, android.os.storage.VolumeInfo, android.content.pm.IPackageManager)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.os.storage.VolumeInfo r2;
        android.content.pm.IPackageManager r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z10, z11;
        java.lang.String $r4, $r5, $r6;
        int $i0, $i1, $i2;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.app.ContextImpl r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r9 := @parameter0: android.app.ContextImpl;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        r2 := @parameter2: android.os.storage.VolumeInfo;

        r3 := @parameter3: android.content.pm.IPackageManager;

        z0 = virtualinvoke r0.<android.app.ApplicationPackageManager: boolean isForceAllowOnExternal(android.content.Context)>(r9);

        $r4 = "private";

        $r5 = virtualinvoke r2.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        z8 = 1;

        if z1 == 0 goto label03;

        z10 = 1;

        $z6 = virtualinvoke r1.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z6 != 0 goto label02;

        $z7 = virtualinvoke r0.<android.app.ApplicationPackageManager: boolean isAllow3rdPartyOnInternal(android.content.Context)>(r9);

        if $z7 == 0 goto label01;

        z10 = 1;

        goto label02;

     label01:
        z10 = 0;

     label02:
        return z10;

     label03:
        $z2 = virtualinvoke r1.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z2 == 0 goto label04;

        return 0;

     label04:
        if z0 != 0 goto label06;

        $i1 = r1.<android.content.pm.ApplicationInfo: int installLocation>;

        if $i1 == 1 goto label05;

        $i2 = r1.<android.content.pm.ApplicationInfo: int installLocation>;

        if $i2 != -1 goto label06;

     label05:
        return 0;

     label06:
        $z3 = virtualinvoke r2.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z3 != 0 goto label07;

        return 0;

     label07:
        $z4 = virtualinvoke r2.<android.os.storage.VolumeInfo: boolean isPrimaryPhysical()>();

        if $z4 == 0 goto label08;

        $z5 = virtualinvoke r1.<android.content.pm.ApplicationInfo: boolean isInternal()>();

        return $z5;

     label08:
        $r6 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        z11 = interfaceinvoke r3.<android.content.pm.IPackageManager: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)>($r6);

     label09:
        if z11 == 0 goto label10;

        return 0;

     label10:
        $i0 = virtualinvoke r2.<android.os.storage.VolumeInfo: int getType()>();

        if $i0 != 1 goto label11;

        goto label12;

     label11:
        z8 = 0;

     label12:
        return z8;

     label13:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label08 to label09 with label13;
    }

    private static boolean isPrimaryStorageCandidateVolume(android.os.storage.VolumeInfo)
    {
        android.os.storage.VolumeInfo r0;
        boolean z0, $z1, z2;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @parameter0: android.os.storage.VolumeInfo;

        $r1 = "private";

        $r2 = virtualinvoke r0.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        z2 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r0.<android.os.storage.VolumeInfo: int getType()>();

        if $i0 != 1 goto label3;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    private static android.content.pm.ApplicationInfo maybeAdjustApplicationInfo(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0, $r10;
        java.lang.String r1, $r2, $r3, $r5, $r9, $r11, r12, r14;
        dalvik.system.VMRuntime $r4;
        java.lang.StringBuilder $r6;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r2 == null goto label3;

        $r3 = r0.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        if $r3 == null goto label3;

        $r4 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        r1 = virtualinvoke $r4.<dalvik.system.VMRuntime: java.lang.String vmInstructionSet()>();

        $r5 = r0.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        r12 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ro.dalvik.vm.isa.");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>($r9);

        $z0 = virtualinvoke r14.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r12 = r14;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z1 == 0 goto label3;

        $r10 = new android.content.pm.ApplicationInfo;

        specialinvoke $r10.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>(r0);

        $r11 = r0.<android.content.pm.ApplicationInfo: java.lang.String secondaryNativeLibraryDir>;

        $r10.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir> = $r11;

        return $r10;

     label3:
        return r0;
    }

    private void onImplicitDirectBoot(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        android.app.ContextImpl $r1, $r4;
        java.lang.Object $r2, $r5;
        android.os.UserManager $r3, $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.os.StrictMode: boolean vmImplicitDirectBootEnabled()>();

        if $z0 == 0 goto label4;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        if i0 != $i1 goto label3;

        $z2 = r0.<android.app.ApplicationPackageManager: boolean mUserUnlocked>;

        if $z2 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r5 = virtualinvoke $r4.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r6 = (android.os.UserManager) $r5;

        $z3 = virtualinvoke $r6.<android.os.UserManager: boolean isUserUnlockingOrUnlocked(int)>(i0);

        if $z3 == 0 goto label2;

        r0.<android.app.ApplicationPackageManager: boolean mUserUnlocked> = 1;

        goto label4;

     label2:
        staticinvoke <android.os.StrictMode: void onImplicitDirectBoot()>();

        goto label4;

     label3:
        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r3 = (android.os.UserManager) $r2;

        $z1 = virtualinvoke $r3.<android.os.UserManager: boolean isUserUnlockingOrUnlocked(int)>(i0);

        if $z1 != 0 goto label4;

        staticinvoke <android.os.StrictMode: void onImplicitDirectBoot()>();

     label4:
        return;
    }

    private void putCachedIcon(android.app.ApplicationPackageManager$ResourceName, android.graphics.drawable.Drawable)
    {
        android.app.ApplicationPackageManager r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Object r2;
        android.util.ArrayMap r3;
        java.lang.ref.WeakReference r4;
        android.graphics.drawable.Drawable$ConstantState $r5;
        java.lang.Throwable $r7;
        android.app.ApplicationPackageManager$ResourceName r8;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: android.app.ApplicationPackageManager$ResourceName;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = <android.app.ApplicationPackageManager: java.lang.Object sSync>;

        entermonitor r2;

     label1:
        r3 = <android.app.ApplicationPackageManager: android.util.ArrayMap sIconCache>;

        r4 = new java.lang.ref.WeakReference;

        $r5 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        specialinvoke r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r5);

        virtualinvoke r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r4);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void putCachedString(android.app.ApplicationPackageManager$ResourceName, java.lang.CharSequence)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.CharSequence r1;
        java.lang.Object r2;
        android.util.ArrayMap r3;
        java.lang.ref.WeakReference r4;
        java.lang.Throwable $r6;
        android.app.ApplicationPackageManager$ResourceName r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.app.ApplicationPackageManager$ResourceName;

        r1 := @parameter1: java.lang.CharSequence;

        r2 = <android.app.ApplicationPackageManager: java.lang.Object sSync>;

        entermonitor r2;

     label1:
        r3 = <android.app.ApplicationPackageManager: android.util.ArrayMap sStringCache>;

        r4 = new java.lang.ref.WeakReference;

        specialinvoke r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        virtualinvoke r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r4);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static boolean shouldTraceGrant(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return 0;
    }

    private int updateFlagsForApplication(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForPackage(int,int)>(i0, i1);

        return $i2;
    }

    private int updateFlagsForComponent(int, int, android.content.Intent)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2, $i3, i4, $i5;
        android.content.Intent r1;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.content.Intent;

        i4 = i0;

        if r1 == null goto label1;

        i4 = i0;

        $i2 = virtualinvoke r1.<android.content.Intent: int getFlags()>();

        $i3 = $i2 & 256;

        if $i3 == 0 goto label1;

        i4 = i0 | 268435456;

     label1:
        $i5 = 269221888 & i4;

        if $i5 != 0 goto label2;

        specialinvoke r0.<android.app.ApplicationPackageManager: void onImplicitDirectBoot(int)>(i1);

     label2:
        return i4;
    }

    private int updateFlagsForPackage(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2, $i3;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & 15;

        if $i2 == 0 goto label1;

        $i3 = 269221888 & i0;

        if $i3 != 0 goto label1;

        specialinvoke r0.<android.app.ApplicationPackageManager: void onImplicitDirectBoot(int)>(i1);

     label1:
        return i0;
    }

    public void addCrossProfileIntentFilter(android.content.IntentFilter, int, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, i2;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.IntentFilter r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>(r6, $r3, i0, i1, i2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)
    {
        android.app.ApplicationPackageManager r0;
        java.util.Map r1, $r3, $r7;
        android.app.ApplicationPackageManager$OnPermissionsChangeListenerDelegate r2;
        java.lang.Object $r4;
        android.os.Looper $r5;
        android.permission.IPermissionManager $r6;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        java.lang.Throwable $r11;
        android.content.pm.PackageManager$OnPermissionsChangedListener r12;

        r0 := @this: android.app.ApplicationPackageManager;

        r12 := @parameter0: android.content.pm.PackageManager$OnPermissionsChangedListener;

        r1 = r0.<android.app.ApplicationPackageManager: java.util.Map mPermissionListeners>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.app.ApplicationPackageManager: java.util.Map mPermissionListeners>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        if $r4 == null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r2 = new android.app.ApplicationPackageManager$OnPermissionsChangeListenerDelegate;

        $r5 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke r2.<android.app.ApplicationPackageManager$OnPermissionsChangeListenerDelegate: void <init>(android.app.ApplicationPackageManager,android.content.pm.PackageManager$OnPermissionsChangedListener,android.os.Looper)>(r0, r12, $r5);

     label04:
        $r6 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        interfaceinvoke $r6.<android.permission.IPermissionManager: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>(r2);

        $r7 = r0.<android.app.ApplicationPackageManager: java.util.Map mPermissionListeners>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r2);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r9 := @caughtexception;

     label08:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void addPackageToPreferred(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ApplicationPackageManager", "addPackageToPreferred() is a no-op");

        return;
    }

    public boolean addPermission(android.content.pm.PermissionInfo)
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.pm.PermissionInfo r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: android.content.pm.PermissionInfo;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        z0 = interfaceinvoke $r1.<android.permission.IPermissionManager: boolean addPermission(android.content.pm.PermissionInfo,boolean)>(r4, 0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addPermissionAsync(android.content.pm.PermissionInfo)
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.pm.PermissionInfo r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: android.content.pm.PermissionInfo;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        z0 = interfaceinvoke $r1.<android.permission.IPermissionManager: boolean addPermission(android.content.pm.PermissionInfo,boolean)>(r4, 1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.content.ComponentName[] r1;
        android.content.ComponentName r2;
        android.content.pm.IPackageManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.IntentFilter r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.ComponentName[];

        r2 := @parameter3: android.content.ComponentName;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r3.<android.content.pm.IPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>(r6, i0, r1, r2, $i1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addPreferredActivityAsUser(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        android.content.ComponentName[] r1;
        android.content.ComponentName r2;
        android.content.pm.IPackageManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.IntentFilter r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.ComponentName[];

        r2 := @parameter3: android.content.ComponentName;

        i1 := @parameter4: int;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r3.<android.content.pm.IPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>(r6, i0, r1, r2, i1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r5;
        int i0, i1;
        boolean z0;
        android.permission.IPermissionManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        z0 = interfaceinvoke $r2.<android.permission.IPermissionManager: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>(r5, r1, i0, i1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean arePermissionsIndividuallyControlled()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891500);

        return $z0;
    }

    public boolean canRequestPackageInstalls()
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.app.ContextImpl $r2;
        android.content.pm.IPackageManager $r3;
        java.lang.String $r4;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        z0 = interfaceinvoke $r3.<android.content.pm.IPackageManager: boolean canRequestPackageInstalls(java.lang.String,int)>($r4, $i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4, r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String[];

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkPermission(java.lang.String, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r2;
        int $i0, $i1;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $i1 = staticinvoke <android.permission.PermissionManager: int checkPackageNamePermission(java.lang.String,java.lang.String,int)>(r1, r2, $i0);

        return $i1;
    }

    public int checkSignatures(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, i2;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i2 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int checkUidSignatures(int,int)>(i1, i0);

     label2:
        return i2;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkSignatures(java.lang.String, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r5;
        int i0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int checkSignatures(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageDataObserver r1;
        android.content.pm.IPackageManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.IPackageDataObserver;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>(r5, r1, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearCrossProfileIntentFilters(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.app.ContextImpl $r2;
        android.content.pm.IPackageManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        interfaceinvoke $r3.<android.content.pm.IPackageManager: void clearCrossProfileIntentFilters(int,java.lang.String)>(i0, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearInstantAppCookie()
    {
        android.app.ApplicationPackageManager r0;

        r0 := @this: android.app.ApplicationPackageManager;

        virtualinvoke r0.<android.app.ApplicationPackageManager: void updateInstantAppCookie(byte[])>(null);

        return;
    }

    public void clearPackagePreferredActivities(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r1.<android.content.pm.IPackageManager: void clearPackagePreferredActivities(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4, r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String[];

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageDataObserver r1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.IPackageDataObserver;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void deleteApplicationCacheFilesAsUser(java.lang.String, int, android.content.pm.IPackageDataObserver)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageDataObserver r1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.pm.IPackageDataObserver;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>(r5, i0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void deletePackage(java.lang.String, android.content.pm.IPackageDeleteObserver, int)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        android.content.pm.IPackageDeleteObserver r2;
        int i0, $i1;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageDeleteObserver;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        virtualinvoke r0.<android.app.ApplicationPackageManager: void deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)>(r1, r2, i0, $i1);

        return;
    }

    public void deletePackageAsUser(java.lang.String, android.content.pm.IPackageDeleteObserver, int, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageDeleteObserver r1;
        int i0, i1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.IPackageDeleteObserver;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>(r5, -1, r1, i1, i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void disableHasSystemFeatureCache()
    {
        android.app.ApplicationPackageManager r0;
        android.app.PropertyInvalidatedCache $r1;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = <android.app.ApplicationPackageManager: android.app.PropertyInvalidatedCache mHasSystemFeatureCache>;

        virtualinvoke $r1.<android.app.PropertyInvalidatedCache: void disableLocal()>();

        return;
    }

    public void extendVerificationTimeout(int, int, long)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        long l2;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void extendVerificationTimeout(int,int,long)>(i0, i1, l2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void flushPackageRestrictionsAsUser(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void flushPackageRestrictionsAsUser(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void freeStorage(java.lang.String, long, android.content.IntentSender)
    {
        android.app.ApplicationPackageManager r0;
        long l0;
        android.content.IntentSender r1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 := @parameter2: android.content.IntentSender;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>(r5, l0, 0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void freeStorageAndNotify(java.lang.String, long, android.content.pm.IPackageDataObserver)
    {
        android.app.ApplicationPackageManager r0;
        long l0;
        android.content.pm.IPackageDataObserver r1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 := @parameter2: android.content.pm.IPackageDataObserver;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>(r5, l0, 0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.ComponentName r1;
        android.content.pm.ActivityInfo $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>(r1, 1024);

        $r3 = virtualinvoke $r2.<android.content.pm.ActivityInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>(r0);

        return $r3;
    }

    public android.graphics.drawable.Drawable getActivityBanner(android.content.Intent) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        android.content.pm.ResolveInfo r2;
        android.content.ComponentName $r3, $r8;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.String $r5;
        android.content.pm.ActivityInfo $r6;
        android.graphics.drawable.Drawable $r7, $r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        $r3 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r3 == null goto label1;

        $r8 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r9 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)>($r8);

        return $r9;

     label1:
        r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r1, 65536);

        if r2 == null goto label2;

        $r6 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = virtualinvoke $r6.<android.content.pm.ActivityInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>(r0);

        return $r7;

     label2:
        $r4 = new android.content.pm.PackageManager$NameNotFoundException;

        $r5 = virtualinvoke r1.<android.content.Intent: java.lang.String toUri(int)>(0);

        specialinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.ComponentName r1;
        android.content.pm.ActivityInfo $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>(r1, 1024);

        $r3 = virtualinvoke $r2.<android.content.pm.ActivityInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>(r0);

        return $r3;
    }

    public android.graphics.drawable.Drawable getActivityIcon(android.content.Intent) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        android.content.pm.ResolveInfo r2;
        android.content.ComponentName $r3, $r8;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.String $r5;
        android.content.pm.ActivityInfo $r6;
        android.graphics.drawable.Drawable $r7, $r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        $r3 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r3 == null goto label1;

        $r8 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r9 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>($r8);

        return $r9;

     label1:
        r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r1, 65536);

        if r2 == null goto label2;

        $r6 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = virtualinvoke $r6.<android.content.pm.ActivityInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>(r0);

        return $r7;

     label2:
        $r4 = new android.content.pm.PackageManager$NameNotFoundException;

        $r5 = virtualinvoke r1.<android.content.Intent: java.lang.String toUri(int)>(0);

        specialinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.ActivityInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, null);

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(r7, $i2, i1);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        $r4 = virtualinvoke r7.<android.content.ComponentName: java.lang.String toString()>();

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.ComponentName r1;
        android.content.pm.ActivityInfo $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>(r1, 1024);

        $r3 = virtualinvoke $r2.<android.content.pm.ActivityInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>(r0);

        return $r3;
    }

    public android.graphics.drawable.Drawable getActivityLogo(android.content.Intent) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        android.content.pm.ResolveInfo r2;
        android.content.ComponentName $r3, $r8;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.String $r5;
        android.content.pm.ActivityInfo $r6;
        android.graphics.drawable.Drawable $r7, $r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        $r3 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r3 == null goto label1;

        $r8 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r9 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>($r8);

        return $r9;

     label1:
        r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r1, 65536);

        if r2 == null goto label2;

        $r6 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = virtualinvoke $r6.<android.content.pm.ActivityInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>(r0);

        return $r7;

     label2:
        $r4 = new android.content.pm.PackageManager$NameNotFoundException;

        $r5 = virtualinvoke r1.<android.content.Intent: java.lang.String toUri(int)>(0);

        specialinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public java.util.List getAllIntentFilters(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        java.util.List $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.ParceledListSlice r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r6 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)>(r5);

     label2:
        if r6 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r7;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.util.List getAllPermissionGroups(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.permission.IPermissionManager $r1;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.ParceledListSlice r5;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        r5 = interfaceinvoke $r1.<android.permission.IPermissionManager: android.content.pm.ParceledListSlice getAllPermissionGroups(int)>(i0);

     label2:
        if r5 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r6 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r6;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.lang.String getAppPredictionServicePackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getAppPredictionServicePackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = virtualinvoke r1.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>(r0);

        return $r2;
    }

    public android.graphics.drawable.Drawable getApplicationBanner(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        android.content.pm.ApplicationInfo $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 1024);

        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)>($r2);

        return $r3;
    }

    public int getApplicationEnabledSetting(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        i0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: int getApplicationEnabledSetting(java.lang.String,int)>(r4, $i1);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getApplicationHiddenSettingAsUser(java.lang.String, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        boolean z0;
        android.content.pm.IPackageManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>(r5, $i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = virtualinvoke r1.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>(r0);

        return $r2;
    }

    public android.graphics.drawable.Drawable getApplicationIcon(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        android.content.pm.ApplicationInfo $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 1024);

        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>($r2);

        return $r3;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.pm.ApplicationInfo $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String, int, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.pm.ApplicationInfo r2, $r4;
        android.content.pm.PackageManager$NameNotFoundException $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForApplication(int,int)>(i0, i1);

        r2 = staticinvoke <android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUserCached(java.lang.String,int,int)>(r1, $i2, i1);

        if r2 == null goto label1;

        $r4 = staticinvoke <android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo maybeAdjustApplicationInfo(android.content.pm.ApplicationInfo)>(r2);

        return $r4;

     label1:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r3;
    }

    public java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.CharSequence $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = virtualinvoke r1.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r0);

        return $r2;
    }

    public android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = virtualinvoke r1.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>(r0);

        return $r2;
    }

    public android.graphics.drawable.Drawable getApplicationLogo(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        android.content.pm.ApplicationInfo $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 1024);

        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>($r2);

        return $r3;
    }

    public android.content.pm.dex.ArtManager getArtManager()
    {
        android.app.ApplicationPackageManager r0;
        java.lang.Object r1;
        android.content.pm.IPackageManager $r2;
        android.app.ContextImpl $r3;
        android.content.pm.dex.IArtManager $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.pm.dex.ArtManager r8, r9, r11;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 = r0.<android.app.ApplicationPackageManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r8 = r0.<android.app.ApplicationPackageManager: android.content.pm.dex.ArtManager mArtManager>;

     label02:
        if r8 != null goto label07;

     label03:
        r9 = new android.content.pm.dex.ArtManager;

        $r3 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r4 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.dex.IArtManager getArtManager()>();

        specialinvoke r9.<android.content.pm.dex.ArtManager: void <init>(android.content.Context,android.content.pm.dex.IArtManager)>($r3, $r4);

        r0.<android.app.ApplicationPackageManager: android.content.pm.dex.ArtManager mArtManager> = r9;

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

     label06:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label07:
        r11 = r0.<android.app.ApplicationPackageManager: android.content.pm.dex.ArtManager mArtManager>;

        exitmonitor r1;

     label08:
        return r11;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public java.lang.String getAttentionServicePackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getAttentionServicePackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getBackgroundPermissionOptionLabel()
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.app.ContextImpl $r1;
        android.content.res.Resources $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String r4;
        android.content.Context r5;
        java.lang.CharSequence r6;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        r4 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.lang.String getPermissionControllerPackageName()>();

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        r5 = virtualinvoke $r1.<android.app.ContextImpl: android.content.Context createPackageContext(java.lang.String,int)>(r4, 0);

        $r2 = virtualinvoke r5.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r2.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("app_permission_button_allow_always", "string", "com.android.permissioncontroller");

     label2:
        if i0 == 0 goto label5;

     label3:
        r6 = virtualinvoke r5.<android.content.Context: java.lang.CharSequence getText(int)>(i0);

     label4:
        return r6;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApplicationPackageManager", "Permission controller not found.", $r3);

     label7:
        return "";

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label6;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label6;
    }

    public android.content.Intent getCarLaunchIntentForPackage(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        android.content.Intent $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackageAndCategory(java.lang.String,java.lang.String)>(r1, "android.intent.category.CAR_LAUNCHER");

        return $r2;
    }

    public android.content.pm.ChangedPackages getChangedPackages(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.pm.ChangedPackages r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ChangedPackages getChangedPackages(int,int)>(i0, $i1);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getComponentEnabledSetting(android.content.ComponentName)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: android.content.ComponentName;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        i0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: int getComponentEnabledSetting(android.content.ComponentName,int)>(r4, $i1);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getContentCaptureServicePackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getContentCaptureServicePackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getDeclaredSharedLibraries(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.ParceledListSlice r6;
        java.util.List r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $i1 = virtualinvoke $r1.<android.app.ContextImpl: int getUserId()>();

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)>(r5, i0, $i1);

     label2:
        if r6 == null goto label5;

     label3:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label4:
        goto label6;

     label5:
        r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label6:
        return r7;

     label7:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public android.graphics.drawable.Drawable getDefaultActivityIcon()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: android.graphics.drawable.Drawable getDrawable(int)>(17301651);

        return $r2;
    }

    public java.lang.String getDefaultBrowserPackageNameAsUser(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        r4 = interfaceinvoke $r1.<android.permission.IPermissionManager: java.lang.String getDefaultBrowser(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDefaultTextClassifierPackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getDefaultTextClassifierPackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.app.ApplicationPackageManager$ResourceName $r2;
        android.content.res.Resources $r3;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5, $r14, $r23;
        java.lang.String $r7, $r11, $r16, $r19, $r21, $r25, $r27, r28;
        android.content.pm.PackageManager$NameNotFoundException $r12, $r22;
        android.content.res.Resources$NotFoundException $r13;
        android.content.pm.ApplicationInfo r29, r31;
        android.graphics.drawable.Drawable r30, r33;

        r0 := @this: android.app.ApplicationPackageManager;

        r28 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r29 := @parameter2: android.content.pm.ApplicationInfo;

        $r2 = new android.app.ApplicationPackageManager$ResourceName;

        specialinvoke $r2.<android.app.ApplicationPackageManager$ResourceName: void <init>(java.lang.String,int)>(r28, i0);

        r30 = specialinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getCachedIcon(android.app.ApplicationPackageManager$ResourceName)>($r2);

        if r30 == null goto label01;

        return r30;

     label01:
        r31 = r29;

        if r29 != null goto label05;

     label02:
        r31 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r28, 1024);

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        return null;

     label05:
        if i0 == 0 goto label13;

     label06:
        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>(r31);

        r33 = virtualinvoke $r3.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>(i0, null);

     label07:
        if r33 == null goto label09;

     label08:
        specialinvoke r0.<android.app.ApplicationPackageManager: void putCachedIcon(android.app.ApplicationPackageManager$ResourceName,android.graphics.drawable.Drawable)>($r2, r33);

     label09:
        return r33;

     label10:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure retrieving icon 0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in package ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r11, $r4);

        goto label13;

     label11:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure retrieving resources for ");

        $r16 = r31.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r19 = virtualinvoke $r13.<android.content.res.Resources$NotFoundException: java.lang.String getMessage()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        goto label13;

     label12:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure retrieving resources for ");

        $r25 = r31.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r27);

     label13:
        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label04;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label12;
        catch android.content.res.Resources$NotFoundException from label06 to label07 with label11;
        catch java.lang.Exception from label06 to label07 with label10;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label12;
        catch android.content.res.Resources$NotFoundException from label08 to label09 with label11;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public java.lang.CharSequence getHarmfulAppWarning(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.CharSequence getHarmfulAppWarning(java.lang.String,int)>(r4, $i0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getHomeActivities(java.util.List)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.util.List;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.ComponentName getHomeActivities(java.util.List)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getIncidentReportApproverPackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getIncidentReportApproverPackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getInstallReason(java.lang.String, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        int i0, $i1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        i0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int getInstallReason(java.lang.String,int)>(r5, $i1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.InstallSourceInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>(r6);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r6);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.util.List getInstalledApplications(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        java.util.List $r1;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r1 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List getInstalledApplicationsAsUser(int,int)>(i0, $i1);

        return $r1;
    }

    public java.util.List getInstalledApplicationsAsUser(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.IPackageManager $r1;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.ParceledListSlice r5;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForApplication(int,int)>(i0, i1);

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>($i2, i1);

     label2:
        if r5 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r6 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r6;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.util.List getInstalledModules(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.util.List getInstalledModules(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getInstalledPackages(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        java.util.List $r1;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r1 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(i0, $i1);

        return $r1;
    }

    public java.util.List getInstalledPackagesAsUser(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.IPackageManager $r1;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.ParceledListSlice r5;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForPackage(int,int)>(i0, i1);

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>($i2, i1);

     label2:
        if r5 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r6 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r6;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.lang.String getInstallerPackageName(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4, r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getInstantAppAndroidId(java.lang.String, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        android.content.pm.IPackageManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5, r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: java.lang.String getInstantAppAndroidId(java.lang.String,int)>(r5, $i0);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public byte[] getInstantAppCookie()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        byte[] r6, r7;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: byte[] getInstantAppCookie(java.lang.String,int)>($r3, $i0);

     label2:
        if r6 == null goto label3;

        return r6;

     label3:
        r7 = <libcore.util.EmptyArray: byte[] BYTE>;

     label4:
        return r7;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getInstantAppCookieMaxBytes()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "ephemeral_cookie_max_size_bytes", 16384);

        return $i0;
    }

    public int getInstantAppCookieMaxSize()
    {
        android.app.ApplicationPackageManager r0;
        int $i0;

        r0 := @this: android.app.ApplicationPackageManager;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getInstantAppCookieMaxBytes()>();

        return $i0;
    }

    public android.graphics.drawable.Drawable getInstantAppIcon(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        int $i0;
        android.graphics.drawable.BitmapDrawable $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.graphics.Bitmap r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        r6 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>(r5, $i0);

     label2:
        if r6 == null goto label5;

     label3:
        $r2 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r2.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(null, r6);

     label4:
        return $r2;

     label5:
        return null;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.content.ComponentName getInstantAppInstallerComponent()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.ComponentName getInstantAppInstallerComponent()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getInstantAppResolverSettingsComponent()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.ComponentName getInstantAppResolverSettingsComponent()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getInstantApps()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        int $i0;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.ParceledListSlice r5;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstantApps(int)>($i0);

     label2:
        if r5 == null goto label4;

     label3:
        $r2 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        return $r2;

     label4:
        r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label5:
        return r6;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.InstrumentationInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>(r7, i0);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        $r4 = virtualinvoke r7.<android.content.ComponentName: java.lang.String toString()>();

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.util.List getIntentFilterVerifications(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        java.util.List $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.ParceledListSlice r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r6 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)>(r5);

     label2:
        if r6 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r7;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public int getIntentVerificationStatusAsUser(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        int i0, i1;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i1 = interfaceinvoke $r1.<android.content.pm.IPackageManager: int getIntentVerificationStatus(java.lang.String,int)>(r4, i0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.KeySet getKeySetByAlias(java.lang.String, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r7;
        android.content.pm.IPackageManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.pm.KeySet r8;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

     label1:
        $r4 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r8 = interfaceinvoke $r4.<android.content.pm.IPackageManager: android.content.pm.KeySet getKeySetByAlias(java.lang.String,java.lang.String)>(r7, r1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.Intent getLaunchIntentForPackage(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.util.List r2, r20;
        android.content.Intent $r3, $r8;
        int $i0, $i1;
        java.lang.Object $r10, $r14;
        android.content.pm.ResolveInfo $r11, $r15;
        android.content.pm.ActivityInfo $r12, $r16;
        java.lang.String $r13, $r17, r19;

        r0 := @this: android.app.ApplicationPackageManager;

        r19 := @parameter0: java.lang.String;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.INFO");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r19);

        r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>($r3, 0);

        if r2 == null goto label1;

        r20 = r2;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 > 0 goto label2;

     label1:
        virtualinvoke $r3.<android.content.Intent: void removeCategory(java.lang.String)>("android.intent.category.INFO");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.LAUNCHER");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r19);

        r20 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>($r3, 0);

     label2:
        if r20 == null goto label4;

        $i0 = interfaceinvoke r20.<java.util.List: int size()>();

        if $i0 > 0 goto label3;

        goto label4;

     label3:
        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(android.content.Intent)>($r3);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r10 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (android.content.pm.ResolveInfo) $r10;

        $r12 = $r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r13 = $r12.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r14 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (android.content.pm.ResolveInfo) $r14;

        $r16 = $r15.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r17 = $r16.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r8.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r13, $r17);

        return $r8;

     label4:
        return null;
    }

    public android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        android.content.Intent $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackageAndCategory(java.lang.String,java.lang.String)>(r1, "android.intent.category.LEANBACK_LAUNCHER");

        return $r2;
    }

    public java.util.Set getMimeGroup(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.util.ArraySet $r1;
        android.app.ContextImpl $r2;
        android.content.pm.IPackageManager $r3;
        java.lang.String $r4, r8;
        java.util.List $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: java.lang.String;

     label1:
        $r1 = new android.util.ArraySet;

        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r5 = interfaceinvoke $r3.<android.content.pm.IPackageManager: java.util.List getMimeGroup(java.lang.String,java.lang.String)>($r4, r8);

        specialinvoke $r1.<android.util.ArraySet: void <init>(java.util.Collection)>($r5);

     label2:
        return $r1;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.ModuleInfo getModuleInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageManager $r1;
        java.lang.StringBuilder $r2;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.String $r6, r9;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.content.pm.ModuleInfo r10;

        r0 := @this: android.app.ApplicationPackageManager;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r10 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>(r9, i0);

     label2:
        if r10 == null goto label3;

        return r10;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No module info for package: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r5 = new android.content.pm.PackageManager$NameNotFoundException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public int getMoveStatus(int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int i0, i1;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int getMoveStatus(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getNameForUid(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getNameForUid(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getNamesForUids(int[])
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;
        java.lang.String[] r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: int[];

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String[] getNamesForUids(int[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPackageCandidateVolumes(android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.app.ContextImpl $r2;
        java.lang.Object $r3;
        android.content.pm.IPackageManager $r4;
        android.os.storage.StorageManager $r5;
        java.util.List $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r5 = (android.os.storage.StorageManager) $r3;

        $r4 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r6 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List getPackageCandidateVolumes(android.content.pm.ApplicationInfo,android.os.storage.StorageManager,android.content.pm.IPackageManager)>(r1, $r5, $r4);

        return $r6;
    }

    protected java.util.List getPackageCandidateVolumes(android.content.pm.ApplicationInfo, android.os.storage.StorageManager, android.content.pm.IPackageManager)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.content.pm.IPackageManager r2;
        android.os.storage.VolumeInfo r3, r4;
        java.util.ArrayList $r5;
        boolean $z0, $z1, $z3;
        java.lang.Object $r6;
        android.app.ContextImpl $r7;
        android.os.storage.StorageManager r8;
        java.util.List r9;
        java.util.Iterator r11;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        r8 := @parameter1: android.os.storage.StorageManager;

        r2 := @parameter2: android.content.pm.IPackageManager;

        r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.storage.VolumeInfo getPackageCurrentVolume(android.content.pm.ApplicationInfo,android.os.storage.StorageManager)>(r1, r8);

        r9 = virtualinvoke r8.<android.os.storage.StorageManager: java.util.List getVolumes()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r11 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.os.storage.VolumeInfo) $r6;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r4, r3);

        if $z1 != 0 goto label2;

        $r7 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $z3 = specialinvoke r0.<android.app.ApplicationPackageManager: boolean isPackageCandidateVolume(android.app.ContextImpl,android.content.pm.ApplicationInfo,android.os.storage.VolumeInfo,android.content.pm.IPackageManager)>($r7, r1, r4, r2);

        if $z3 == 0 goto label3;

     label2:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        goto label1;

     label4:
        return $r5;
    }

    public android.os.storage.VolumeInfo getPackageCurrentVolume(android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.app.ContextImpl $r2;
        java.lang.Object $r3;
        android.os.storage.StorageManager $r4;
        android.os.storage.VolumeInfo $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r4 = (android.os.storage.StorageManager) $r3;

        $r5 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.storage.VolumeInfo getPackageCurrentVolume(android.content.pm.ApplicationInfo,android.os.storage.StorageManager)>(r1, $r4);

        return $r5;
    }

    protected android.os.storage.VolumeInfo getPackageCurrentVolume(android.content.pm.ApplicationInfo, android.os.storage.StorageManager)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.os.storage.StorageManager r2;
        boolean $z0;
        java.lang.String $r3;
        android.os.storage.VolumeInfo $r4, $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        r2 := @parameter1: android.os.storage.StorageManager;

        $z0 = virtualinvoke r1.<android.content.pm.ApplicationInfo: boolean isInternal()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeById(java.lang.String)>("private");

        return $r5;

     label1:
        $r3 = r1.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        $r4 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>($r3);

        return $r4;
    }

    public int[] getPackageGids(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int[] $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String,int)>(r1, 0);

        return $r2;
    }

    public int[] getPackageGids(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        int[] r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForPackage(int,int)>(i0, i1);

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int[] getPackageGids(java.lang.String,int,int)>(r6, $i2, i1);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r6);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.PackageInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.pm.VersionedPackage r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.pm.VersionedPackage;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForPackage(int,int)>(i0, i1);

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>(r7, $i2, i1);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        $r4 = virtualinvoke r7.<android.content.pm.VersionedPackage: java.lang.String toString()>();

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.content.pm.PackageInfo getPackageInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.pm.PackageInfo $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String, int, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.pm.PackageInfo r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForPackage(int,int)>(i0, i1);

        r2 = staticinvoke <android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfoAsUserCached(java.lang.String,int,int)>(r1, $i2, i1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r3;
    }

    public android.content.pm.PackageInstaller getPackageInstaller()
    {
        android.app.ApplicationPackageManager r0;
        java.lang.Object r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.IPackageInstaller $r3;
        android.app.ContextImpl $r4;
        java.lang.String $r5;
        int $i0;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.content.pm.PackageInstaller r9, r10, r12;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 = r0.<android.app.ApplicationPackageManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r9 = r0.<android.app.ApplicationPackageManager: android.content.pm.PackageInstaller mInstaller>;

     label02:
        if r9 != null goto label07;

     label03:
        r10 = new android.content.pm.PackageInstaller;

        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r3 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.IPackageInstaller getPackageInstaller()>();

        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r5 = virtualinvoke $r4.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        specialinvoke r10.<android.content.pm.PackageInstaller: void <init>(android.content.pm.IPackageInstaller,java.lang.String,int)>($r3, $r5, $i0);

        r0.<android.app.ApplicationPackageManager: android.content.pm.PackageInstaller mInstaller> = r10;

     label04:
        goto label07;

     label05:
        $r7 := @caughtexception;

     label06:
        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label07:
        r12 = r0.<android.app.ApplicationPackageManager: android.content.pm.PackageInstaller mInstaller>;

        exitmonitor r1;

     label08:
        return r12;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void getPackageSizeInfoAsUser(java.lang.String, int, android.content.pm.IPackageStatsObserver)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.content.pm.IPackageStatsObserver r1;
        android.app.ContextImpl $r2;
        android.content.pm.ApplicationInfo $r3;
        java.lang.UnsupportedOperationException $r4;
        android.os.RemoteException $r5;
        java.lang.String r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.pm.IPackageStatsObserver;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r2.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 >= 26 goto label5;

        if r1 == null goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ApplicationPackageManager", "Shame on you for calling the hidden API getPackageSizeInfoAsUser(). Shame!");

     label1:
        interfaceinvoke r1.<android.content.pm.IPackageStatsObserver: void onGetStatsCompleted(android.content.pm.PackageStats,boolean)>(null, 0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

     label5:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Shame on you for calling the hidden API getPackageSizeInfoAsUser(). Shame!");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPackageUid(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, $i1, $i2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $i2 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getPackageUidAsUser(java.lang.String,int,int)>(r1, i0, $i1);

        return $i2;
    }

    public int getPackageUidAsUser(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getPackageUidAsUser(java.lang.String,int,int)>(r1, 0, i0);

        return $i1;
    }

    public int getPackageUidAsUser(java.lang.String, int, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1, i2, i3;
        android.content.pm.IPackageManager $r1;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForPackage(int,int)>(i2, i0);

        i3 = interfaceinvoke $r1.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>(r5, $i1, i0);

     label2:
        if i3 < 0 goto label3;

        return i3;

     label3:
        $r2 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r2.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r5);

        throw $r2;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.lang.String[] getPackagesForUid(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPackagesHoldingPermissions(java.lang.String[], int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.IPackageManager $r1;
        java.util.List $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String[] r5;
        android.content.pm.ParceledListSlice r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForPackage(int,int)>(i0, i1);

        r6 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>(r5, $i2, i1);

     label2:
        if r6 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r7;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.lang.String getPermissionControllerPackageName()
    {
        android.app.ApplicationPackageManager r0;
        java.lang.Object r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3, r7, r9;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 = r0.<android.app.ApplicationPackageManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r7 = r0.<android.app.ApplicationPackageManager: java.lang.String mPermissionsControllerPackageName>;

     label02:
        if r7 != null goto label07;

     label03:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r3 = interfaceinvoke $r2.<android.content.pm.IPackageManager: java.lang.String getPermissionControllerPackageName()>();

        r0.<android.app.ApplicationPackageManager: java.lang.String mPermissionsControllerPackageName> = $r3;

     label04:
        goto label07;

     label05:
        $r4 := @caughtexception;

     label06:
        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label07:
        r9 = r0.<android.app.ApplicationPackageManager: java.lang.String mPermissionsControllerPackageName>;

        exitmonitor r1;

     label08:
        return r9;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int getPermissionFlags(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r6;
        android.os.UserHandle r2;
        int i0, $i1;
        android.permission.IPermissionManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        i0 = interfaceinvoke $r3.<android.permission.IPermissionManager: int getPermissionFlags(java.lang.String,java.lang.String,int)>(r6, r1, $i1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.PermissionGroupInfo r1;
        android.permission.IPermissionManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        r1 = interfaceinvoke $r2.<android.permission.IPermissionManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>(r6, i0);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r6);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.app.ContextImpl $r1;
        android.permission.IPermissionManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6, r7;
        android.content.pm.PermissionInfo r8;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        r7 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        $r2 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        r8 = interfaceinvoke $r2.<android.permission.IPermissionManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>(r6, r7, i0);

     label2:
        if r8 == null goto label3;

        return r8;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r6);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public int getPreferredActivities(java.util.List, java.util.List, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.util.List r1, r6;
        java.lang.String r2;
        int i0;
        android.content.pm.IPackageManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i0 = interfaceinvoke $r3.<android.content.pm.IPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>(r6, r1, r2);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPreferredPackages(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        java.util.List $r1;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ApplicationPackageManager", "getPreferredPackages() is a no-op");

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public java.util.List getPrimaryStorageCandidateVolumes()
    {
        android.app.ApplicationPackageManager r0;
        android.os.storage.VolumeInfo r1, r11;
        android.app.ContextImpl $r3;
        java.lang.Object $r4, $r7;
        java.util.ArrayList $r5;
        java.lang.String $r6;
        boolean $z0, $z1, $z3, $z5;
        android.os.storage.StorageManager r8;
        java.util.List r9;
        java.util.Iterator r10;

        r0 := @this: android.app.ApplicationPackageManager;

        $r3 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = virtualinvoke $r3.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r8 = (android.os.storage.StorageManager) $r4;

        r1 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.storage.VolumeInfo getPrimaryStorageCurrentVolume()>();

        r9 = virtualinvoke r8.<android.os.storage.StorageManager: java.util.List getVolumes()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke r8.<android.os.storage.StorageManager: java.lang.String getPrimaryStorageUuid()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", $r6);

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        goto label5;

     label1:
        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.os.storage.VolumeInfo) $r7;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r11, r1);

        if $z1 != 0 goto label3;

        $z3 = staticinvoke <android.app.ApplicationPackageManager: boolean isPrimaryStorageCandidateVolume(android.os.storage.VolumeInfo)>(r11);

        if $z3 == 0 goto label4;

     label3:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r11);

     label4:
        goto label2;

     label5:
        return $r5;
    }

    public android.os.storage.VolumeInfo getPrimaryStorageCurrentVolume()
    {
        android.app.ApplicationPackageManager r0;
        android.os.storage.StorageManager r1;
        android.app.ContextImpl $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        android.os.storage.VolumeInfo $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r1 = (android.os.storage.StorageManager) $r3;

        $r4 = virtualinvoke r1.<android.os.storage.StorageManager: java.lang.String getPrimaryStorageUuid()>();

        $r5 = virtualinvoke r1.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByQualifiedUuid(java.lang.String)>($r4);

        return $r5;
    }

    public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.ProviderInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, null);

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>(r7, $i2, i1);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        $r4 = virtualinvoke r7.<android.content.ComponentName: java.lang.String toString()>();

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.ActivityInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, null);

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>(r7, $i2, i1);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        $r4 = virtualinvoke r7.<android.content.ComponentName: java.lang.String toString()>();

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.content.res.Resources getResourcesForActivity(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.ComponentName r1;
        android.content.pm.ActivityInfo $r2;
        android.content.pm.ApplicationInfo $r3;
        android.content.res.Resources $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>(r1, 1024);

        $r3 = $r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>($r3);

        return $r4;
    }

    public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        android.app.ActivityThread r2, $r16;
        java.lang.String $r3, $r11, $r14, r19;
        boolean $z0, z1;
        int $i0, $i1;
        android.app.ContextImpl $r4, $r5, $r15, $r17;
        android.app.LoadedApk $r6;
        java.lang.String[] $r7, $r8, r20;
        java.lang.StringBuilder $r9;
        android.content.pm.PackageManager$NameNotFoundException $r13;
        android.content.res.Resources $r18, r21;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r3 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("system");

        if $z0 == 0 goto label1;

        $r15 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r16 = $r15.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r17 = virtualinvoke $r16.<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()>();

        $r18 = virtualinvoke $r17.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        return $r18;

     label1:
        $i0 = r1.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != $i1 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        r2 = $r4.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        if z1 == 0 goto label4;

        r19 = r1.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        goto label5;

     label4:
        r19 = r1.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

     label5:
        if z1 == 0 goto label6;

        r20 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        goto label7;

     label6:
        r20 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] splitPublicSourceDirs>;

     label7:
        $r8 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] resourceDirs>;

        $r7 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r5 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r6 = $r5.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r21 = virtualinvoke r2.<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.app.LoadedApk)>(r19, r20, $r8, $r7, 0, $r6);

        if r21 == null goto label8;

        return r21;

     label8:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open ");

        $r11 = r1.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = new android.content.pm.PackageManager$NameNotFoundException;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r14);

        throw $r13;
    }

    public android.content.res.Resources getResourcesForApplication(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        android.content.pm.ApplicationInfo $r2;
        android.content.res.Resources $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 1024);

        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>($r2);

        return $r3;
    }

    public android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        java.lang.StringBuilder $r1, $r8;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r6, $r13, r20;
        boolean $z0;
        android.content.pm.IPackageManager $r7;
        android.content.pm.PackageManager$NameNotFoundException $r12;
        android.app.ContextImpl $r14, $r16;
        android.app.ActivityThread $r15;
        android.content.res.Resources $r17, r22;
        android.os.RemoteException $r18;
        java.lang.RuntimeException $r19;
        android.content.pm.ApplicationInfo r21;

        r0 := @this: android.app.ApplicationPackageManager;

        r20 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 0 goto label7;

        $r6 = "system";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r20);

        if $z0 == 0 goto label1;

        $r14 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r15 = $r14.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r16 = virtualinvoke $r15.<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()>();

        $r17 = virtualinvoke $r16.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        return $r17;

     label1:
        $r7 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r21 = interfaceinvoke $r7.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r20, 1024, i0);

     label2:
        if r21 == null goto label5;

     label3:
        r22 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>(r21);

     label4:
        return r22;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist");

        $r12 = new android.content.pm.PackageManager$NameNotFoundException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label6:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

     label7:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call does not support special user #");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.ServiceInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, null);

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r7, $i2, i1);

     label2:
        if r1 == null goto label3;

        return r1;

     label3:
        $r3 = new android.content.pm.PackageManager$NameNotFoundException;

        $r4 = virtualinvoke r7.<android.content.ComponentName: java.lang.String toString()>();

        specialinvoke $r3.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.lang.String getServicesSystemSharedLibraryPackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getServicesSystemSharedLibraryPackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getSetupWizardPackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getSetupWizardPackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getSharedLibraries(int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        java.util.List $r1;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r1 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List getSharedLibrariesAsUser(int,int)>(i0, $i1);

        return $r1;
    }

    public java.util.List getSharedLibrariesAsUser(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3;
        java.util.List $r4, r8;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.pm.ParceledListSlice r7;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        r7 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>($r3, i0, i1);

     label2:
        if r7 != null goto label4;

     label3:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label4:
        r8 = virtualinvoke r7.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r8;

     label6:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.lang.String getSharedSystemSharedLibraryPackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getSharedSystemSharedLibraryPackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.KeySet getSigningKeySet(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.KeySet r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.KeySet getSigningKeySet(java.lang.String)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getSuspendedPackageAppExtras()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.os.Bundle r6;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)>($r3, $i0);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        java.lang.String $r2, r6;
        android.content.pm.IPackageManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        boolean z1;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

     label1:
        r1 = new android.content.ComponentName;

        $r2 = <android.app.ApplicationPackageManager: java.lang.String APP_DETAILS_ACTIVITY_CLASS_NAME>;

        specialinvoke r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r6, $r2);

        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        i0 = interfaceinvoke $r3.<android.content.pm.IPackageManager: int getComponentEnabledSetting(android.content.ComponentName,int)>(r1, $i1);

     label2:
        z1 = 1;

        if i0 == 1 goto label4;

        if i0 != 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public android.content.pm.FeatureInfo[] getSystemAvailableFeatures()
    {
        android.app.ApplicationPackageManager r0;
        java.util.List r1;
        android.content.pm.IPackageManager $r2;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        android.content.pm.FeatureInfo $r4;
        android.content.pm.FeatureInfo[] $r5, r9;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.pm.ParceledListSlice r8;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r8 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getSystemAvailableFeatures()>();

     label2:
        if r8 != null goto label4;

     label3:
        $r5 = newarray (android.content.pm.FeatureInfo)[0];

        return $r5;

     label4:
        r1 = virtualinvoke r8.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r9 = newarray (android.content.pm.FeatureInfo)[$i0];

     label5:
        i2 = 0;

     label6:
        $i1 = lengthof r9;

        if i2 >= $i1 goto label8;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (android.content.pm.FeatureInfo) $r3;

        r9[i2] = $r4;

     label7:
        i2 = i2 + 1;

        goto label6;

     label8:
        return r9;

     label9:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch android.os.RemoteException from label4 to label5 with label9;
        catch android.os.RemoteException from label6 to label7 with label9;
    }

    public java.lang.String getSystemCaptionsServicePackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getSystemCaptionsServicePackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getSystemSharedLibraryNames()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String[] getSystemSharedLibraryNames()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getSystemTextClassifierPackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getSystemTextClassifierPackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getText(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.app.ApplicationPackageManager$ResourceName $r2;
        android.content.res.Resources $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r13;
        java.lang.String $r7, $r11, $r15, $r17, r19;
        android.content.pm.PackageManager$NameNotFoundException $r12, $r18;
        android.content.pm.ApplicationInfo r20, r22;
        java.lang.CharSequence r21, r24;

        r0 := @this: android.app.ApplicationPackageManager;

        r19 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r20 := @parameter2: android.content.pm.ApplicationInfo;

        $r2 = new android.app.ApplicationPackageManager$ResourceName;

        specialinvoke $r2.<android.app.ApplicationPackageManager$ResourceName: void <init>(java.lang.String,int)>(r19, i0);

        r21 = specialinvoke r0.<android.app.ApplicationPackageManager: java.lang.CharSequence getCachedString(android.app.ApplicationPackageManager$ResourceName)>($r2);

        if r21 == null goto label1;

        return r21;

     label1:
        r22 = r20;

        if r20 != null goto label5;

     label2:
        r22 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r19, 1024);

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        return null;

     label5:
        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>(r22);

        r24 = virtualinvoke $r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(i0);

        specialinvoke r0.<android.app.ApplicationPackageManager: void putCachedString(android.app.ApplicationPackageManager$ResourceName,java.lang.CharSequence)>($r2, r24);

     label6:
        return r24;

     label7:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure retrieving text 0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in package ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r11, $r4);

        goto label9;

     label8:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure retrieving resources for ");

        $r15 = r22.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

     label9:
        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label4;
        catch android.content.pm.PackageManager$NameNotFoundException from label5 to label6 with label8;
        catch java.lang.RuntimeException from label5 to label6 with label7;
    }

    public int getUidForSharedUser(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageManager $r2;
        java.lang.StringBuilder $r3;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        java.lang.String $r7, r10;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r10 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int getUidForSharedUser(java.lang.String)>(r10);

     label2:
        if i0 == -1 goto label3;

        return i0;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No shared userid for user:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = new android.content.pm.PackageManager$NameNotFoundException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.lang.String[] getUnsuspendablePackages(java.lang.String[])
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String[] r5, r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String[];

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $i0 = virtualinvoke $r1.<android.app.ContextImpl: int getUserId()>();

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>(r5, $i0);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable getUserBadgeForDensity(android.os.UserHandle, int)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        int i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable r2, r3;
        android.os.UserManager $r4;
        android.graphics.drawable.LayerDrawable $r5;
        android.graphics.drawable.Drawable[] $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.os.UserHandle;

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getProfileIconForDensity(android.os.UserHandle,int,int)>(r1, 17302383, i0);

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()>();

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $i2 = virtualinvoke $r4.<android.os.UserManager: int getUserBadgeResId(int)>($i1);

        r3 = specialinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>($i2, i0);

        $i3 = specialinvoke r0.<android.app.ApplicationPackageManager: int getUserBadgeColor(android.os.UserHandle,boolean)>(r1, 0);

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setTint(int)>($i3);

        $r5 = new android.graphics.drawable.LayerDrawable;

        $r6 = newarray (android.graphics.drawable.Drawable)[2];

        $r6[0] = r2;

        $r6[1] = r3;

        specialinvoke $r5.<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>($r6);

        return $r5;
    }

    public android.graphics.drawable.Drawable getUserBadgeForDensityNoBackground(android.os.UserHandle, int)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        int i0, $i1, $i2, $i3, $i4;
        android.graphics.drawable.Drawable r2;
        boolean $z0;
        android.os.UserManager $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.os.UserHandle;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<android.app.ApplicationPackageManager: boolean hasUserBadge(int)>($i1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()>();

        $i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $i3 = virtualinvoke $r3.<android.os.UserManager: int getUserBadgeNoBackgroundResId(int)>($i2);

        r2 = specialinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>($i3, i0);

        if r2 == null goto label2;

        $i4 = specialinvoke r0.<android.app.ApplicationPackageManager: int getUserBadgeColor(android.os.UserHandle,boolean)>(r1, 1);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setTint(int)>($i4);

     label2:
        return r2;
    }

    public android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable, android.os.UserHandle, android.graphics.Rect, int)
    {
        android.app.ApplicationPackageManager r0;
        android.graphics.drawable.Drawable r1, $r3, r5;
        android.graphics.Rect r2;
        int i0;
        android.os.UserHandle r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r4 := @parameter1: android.os.UserHandle;

        r2 := @parameter2: android.graphics.Rect;

        i0 := @parameter3: int;

        r5 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getUserBadgeForDensity(android.os.UserHandle,int)>(r4, i0);

        if r5 != null goto label1;

        return r1;

     label1:
        $r3 = specialinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getBadgedDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.Rect,boolean)>(r1, r5, r2, 1);

        return $r3;
    }

    public android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        android.graphics.drawable.Drawable r1, $r6, $r7;
        android.os.UserHandle r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        android.util.LauncherIcons $r3;
        android.app.ContextImpl $r4;
        android.os.UserManager $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: android.os.UserHandle;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<android.app.ApplicationPackageManager: boolean hasUserBadge(int)>($i0);

        if $z0 != 0 goto label1;

        return r1;

     label1:
        $r3 = new android.util.LauncherIcons;

        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        specialinvoke $r3.<android.util.LauncherIcons: void <init>(android.content.Context)>($r4);

        $r5 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()>();

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $i2 = virtualinvoke $r5.<android.os.UserManager: int getUserIconBadgeResId(int)>($i1);

        $i3 = specialinvoke r0.<android.app.ApplicationPackageManager: int getUserBadgeColor(android.os.UserHandle,boolean)>(r2, 0);

        $r6 = virtualinvoke $r3.<android.util.LauncherIcons: android.graphics.drawable.Drawable getBadgeDrawable(int,int)>($i2, $i3);

        $r7 = specialinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getBadgedDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.Rect,boolean)>(r1, $r6, null, 1);

        return $r7;
    }

    public java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.CharSequence r1, $r4;
        android.os.UserHandle r2;
        android.os.UserManager $r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()>();

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.lang.CharSequence getBadgedLabelForUser(java.lang.CharSequence,android.os.UserHandle)>(r1, r2);

        return $r4;
    }

    public int getUserId()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        int $i0;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $i0 = virtualinvoke $r1.<android.app.ContextImpl: int getUserId()>();

        return $i0;
    }

    android.os.UserManager getUserManager()
    {
        android.app.ApplicationPackageManager r0;
        java.lang.Object r1;
        android.os.UserManager $r2, $r4, r6;
        android.app.ContextImpl $r3;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 = r0.<android.app.ApplicationPackageManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.os.UserManager mUserManager>;

        if $r2 != null goto label2;

        $r3 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        r0.<android.app.ApplicationPackageManager: android.os.UserManager mUserManager> = $r4;

     label2:
        r6 = r0.<android.app.ApplicationPackageManager: android.os.UserManager mUserManager>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.pm.VerifierDeviceIdentity r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getWellbeingPackageName()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: java.lang.String getWellbeingPackageName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getWhitelistedRestrictedPermissions(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        android.permission.IPermissionManager $r1;
        android.util.ArraySet $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        java.util.List r6;
        java.util.Set r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        r6 = interfaceinvoke $r1.<android.permission.IPermissionManager: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)>(r5, i0, i1);

     label2:
        if r6 == null goto label4;

     label3:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>(java.util.Collection)>(r6);

        return $r2;

     label4:
        r7 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label5:
        return r7;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public android.content.res.XmlResourceParser getXml(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.res.Resources $r1;
        android.content.pm.PackageManager$NameNotFoundException $r2, $r16;
        java.lang.StringBuilder $r3, $r9;
        java.lang.String $r5, $r7, $r11, $r15, r17;
        java.lang.RuntimeException $r8;
        android.content.pm.ApplicationInfo r18, r19;
        android.content.res.XmlResourceParser r21;

        r0 := @this: android.app.ApplicationPackageManager;

        r17 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r18 := @parameter2: android.content.pm.ApplicationInfo;

        r19 = r18;

        if r18 != null goto label4;

     label1:
        r19 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r17, 1024);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        return null;

     label4:
        $r1 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>(r19);

        r21 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

     label5:
        return r21;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure retrieving resources for ");

        $r5 = r19.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r7);

        goto label8;

     label7:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure retrieving xml 0x");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in package ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r15, $r8);

     label8:
        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label4 to label5 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label4 to label5 with label6;
    }

    public void grantRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r6;
        android.os.UserHandle r2;
        android.content.pm.IPackageManager $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r3.<android.content.pm.IPackageManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>(r6, r1, $i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasSigningCertificate(int, byte[], int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        byte[] r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        r4 := @parameter1: byte[];

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: boolean hasUidSigningCertificate(int,byte[],int)>(i0, r4, i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasSigningCertificate(java.lang.String, byte[], int)
    {
        android.app.ApplicationPackageManager r0;
        byte[] r1;
        int i0;
        boolean z0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>(r5, r1, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasSystemFeature(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String,int)>(r1, 0);

        return $z0;
    }

    public boolean hasSystemFeature(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0;
        android.app.ApplicationPackageManager$HasSystemFeatureQuery $r2;
        android.app.PropertyInvalidatedCache $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = <android.app.ApplicationPackageManager: android.app.PropertyInvalidatedCache mHasSystemFeatureCache>;

        $r2 = new android.app.ApplicationPackageManager$HasSystemFeatureQuery;

        specialinvoke $r2.<android.app.ApplicationPackageManager$HasSystemFeatureQuery: void <init>(java.lang.String,int)>(r1, i0);

        $r4 = virtualinvoke $r3.<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public int installExistingPackage(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int installExistingPackage(java.lang.String,int)>(r1, 0);

        return $i0;
    }

    public int installExistingPackage(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, $i1, $i2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int installExistingPackageAsUser(java.lang.String,int,int)>(r1, i0, $i1);

        return $i2;
    }

    public int installExistingPackageAsUser(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<android.app.ApplicationPackageManager: int installExistingPackageAsUser(java.lang.String,int,int)>(r1, 0, i0);

        return $i1;
    }

    protected boolean isAllow3rdPartyOnInternal(android.content.Context)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Context r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891340);

        return $z0;
    }

    public boolean isAutoRevokeWhitelisted()
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.app.ContextImpl $r2;
        android.content.pm.IPackageManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r3.<android.content.pm.IPackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)>($r4);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAutoRevokeWhitelisted(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        boolean z0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        z0 = interfaceinvoke $r1.<android.permission.IPermissionManager: boolean isAutoRevokeWhitelisted(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceUpgrading()
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean isDeviceUpgrading()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected boolean isForceAllowOnExternal(android.content.Context)
    {
        android.app.ApplicationPackageManager r0;
        int $i0;
        android.content.Context r1;
        android.content.ContentResolver r2;
        boolean z0;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Context;

        r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r2, "force_allow_on_external", 0);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isInstantApp()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r0.<android.app.ApplicationPackageManager: boolean isInstantApp(java.lang.String)>($r2);

        return $z0;
    }

    public boolean isInstantApp(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        z0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: boolean isInstantApp(java.lang.String,int)>(r4, $i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPackageAvailable(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        z0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: boolean isPackageAvailable(java.lang.String,int)>(r4, $i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPackageStateProtected(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: boolean isPackageStateProtected(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPackageSuspended()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $z0 = virtualinvoke r0.<android.app.ApplicationPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>($r2, $i0);

        return $z0;
    }

    public boolean isPackageSuspended(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        boolean z0;
        int $i0;
        java.lang.Throwable $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        z0 = virtualinvoke r0.<android.app.ApplicationPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>(r1, $i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public boolean isPackageSuspendedForUser(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPermissionRevokedByPolicy(java.lang.String, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r5;
        boolean z0;
        android.permission.IPermissionManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        z0 = interfaceinvoke $r2.<android.permission.IPermissionManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>(r5, r1, $i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSafeMode()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r2;
        boolean $z0, z1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int i0, i2;
        byte b1;

        r0 := @this: android.app.ApplicationPackageManager;

     label01:
        i0 = r0.<android.app.ApplicationPackageManager: int mCachedSafeMode>;

     label02:
        z1 = 1;

        if i0 >= 0 goto label07;

     label03:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $z0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean isSafeMode()>();

        if $z0 == 0 goto label05;

     label04:
        b1 = 1;

        goto label06;

     label05:
        b1 = 0;

     label06:
        r0.<android.app.ApplicationPackageManager: int mCachedSafeMode> = b1;

     label07:
        i2 = r0.<android.app.ApplicationPackageManager: int mCachedSafeMode>;

     label08:
        if i2 == 0 goto label09;

        goto label10;

     label09:
        z1 = 0;

     label10:
        return z1;

     label11:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label11;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch android.os.RemoteException from label07 to label08 with label11;
    }

    public boolean isSignedBy(java.lang.String, android.content.pm.KeySet)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.KeySet r1;
        boolean z0;
        android.content.pm.IPackageManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.String r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.KeySet;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

     label1:
        $r4 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r4.<android.content.pm.IPackageManager: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>(r7, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSignedByExactly(java.lang.String, android.content.pm.KeySet)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.KeySet r1;
        boolean z0;
        android.content.pm.IPackageManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.String r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.KeySet;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

     label1:
        $r4 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r4.<android.content.pm.IPackageManager: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>(r7, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUpgrade()
    {
        android.app.ApplicationPackageManager r0;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        $z0 = virtualinvoke r0.<android.app.ApplicationPackageManager: boolean isDeviceUpgrading()>();

        return $z0;
    }

    public boolean isWirelessConsentModeEnabled()
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.app.ApplicationPackageManager;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891598);

        return $z0;
    }

    public android.graphics.drawable.Drawable loadItemIcon(android.content.pm.PackageItemInfo, android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.PackageItemInfo r1;
        int $i0, $i1;
        android.os.UserHandle $r2;
        android.graphics.drawable.Drawable $r3, r5;
        android.content.pm.ApplicationInfo r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.PackageItemInfo;

        r4 := @parameter1: android.content.pm.ApplicationInfo;

        r5 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable loadUnbadgedItemIcon(android.content.pm.PackageItemInfo,android.content.pm.ApplicationInfo)>(r1, r4);

        $i0 = r1.<android.content.pm.PackageItemInfo: int showUserIcon>;

        if $i0 == -10000 goto label1;

        return r5;

     label1:
        $r2 = new android.os.UserHandle;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        specialinvoke $r2.<android.os.UserHandle: void <init>(int)>($i1);

        $r3 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)>(r5, $r2);

        return $r3;
    }

    public android.graphics.drawable.Drawable loadUnbadgedItemIcon(android.content.pm.PackageItemInfo, android.content.pm.ApplicationInfo)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.PackageItemInfo r1;
        int i0, $i1, $i2;
        java.lang.String $r2, $r3;
        android.app.ContextImpl $r4;
        android.content.res.Resources $r5;
        android.graphics.drawable.Drawable $r6, r8, r9, r10;
        android.content.pm.ApplicationInfo r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.pm.PackageItemInfo;

        r7 := @parameter1: android.content.pm.ApplicationInfo;

        $i1 = r1.<android.content.pm.PackageItemInfo: int showUserIcon>;

        if $i1 == -10000 goto label1;

        i0 = r1.<android.content.pm.PackageItemInfo: int showUserIcon>;

        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r5 = virtualinvoke $r4.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $r6 = staticinvoke <com.android.internal.util.UserIcons: android.graphics.drawable.Drawable getDefaultUserIcon(android.content.res.Resources,int,boolean)>($r5, i0, 0);

        return $r6;

     label1:
        r8 = null;

        $r2 = r1.<android.content.pm.PackageItemInfo: java.lang.String packageName>;

        if $r2 == null goto label2;

        $r3 = r1.<android.content.pm.PackageItemInfo: java.lang.String packageName>;

        $i2 = r1.<android.content.pm.PackageItemInfo: int icon>;

        r8 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>($r3, $i2, r7);

     label2:
        r9 = r8;

        if r8 != null goto label3;

        r9 = r8;

        if r1 == r7 goto label3;

        r9 = r8;

        if r7 == null goto label3;

        r9 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable loadUnbadgedItemIcon(android.content.pm.PackageItemInfo,android.content.pm.ApplicationInfo)>(r7, r7);

     label3:
        r10 = r9;

        if r9 != null goto label4;

        r10 = virtualinvoke r1.<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager)>(r0);

     label4:
        return r10;
    }

    public int movePackage(java.lang.String, android.os.storage.VolumeInfo)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        java.lang.String $r1, $r2, r6, r8, r9;
        boolean $z0, $z1;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.os.storage.VolumeInfo r7;
        android.content.pm.IPackageManager $r10;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: android.os.storage.VolumeInfo;

     label1:
        $r2 = "private";

        $r1 = r7.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        r8 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

     label2:
        goto label6;

     label3:
        $z1 = virtualinvoke r7.<android.os.storage.VolumeInfo: boolean isPrimaryPhysical()>();

        if $z1 == 0 goto label5;

     label4:
        r8 = "primary_physical";

        goto label6;

     label5:
        r9 = r7.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        r8 = (java.lang.String) r9;

     label6:
        $r10 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i0 = interfaceinvoke $r10.<android.content.pm.IPackageManager: int movePackage(java.lang.String,java.lang.String)>(r6, r8);

     label7:
        return i0;

     label8:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public int movePrimaryStorage(android.os.storage.VolumeInfo)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        java.lang.String $r1, $r2, r7, r8;
        boolean $z0, $z1;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.os.storage.VolumeInfo r6;
        android.content.pm.IPackageManager $r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: android.os.storage.VolumeInfo;

     label1:
        $r2 = "private";

        $r1 = r6.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        r7 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

     label2:
        goto label6;

     label3:
        $z1 = virtualinvoke r6.<android.os.storage.VolumeInfo: boolean isPrimaryPhysical()>();

        if $z1 == 0 goto label5;

     label4:
        r7 = "primary_physical";

        goto label6;

     label5:
        r8 = r6.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        r7 = (java.lang.String) r8;

     label6:
        $r9 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        i0 = interfaceinvoke $r9.<android.content.pm.IPackageManager: int movePrimaryStorage(java.lang.String)>(r7);

     label7:
        return i0;

     label8:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public java.util.List queryBroadcastReceivers(android.content.Intent, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        int i0, $i1;
        java.util.List $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public java.util.List queryBroadcastReceiversAsUser(android.content.Intent, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        java.util.List $r5, r10;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.Intent r8;
        android.content.pm.ParceledListSlice r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke r8.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, r8);

        r9 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>(r8, $r4, $i2, i1);

     label2:
        if r9 != null goto label4;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label4:
        r10 = virtualinvoke r9.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r10;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.util.List queryContentProviders(java.lang.String, int, int)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.util.List $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int,java.lang.String)>(r1, i0, i1, null);

        return $r2;
    }

    public java.util.List queryContentProviders(java.lang.String, int, int, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1, r5;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.ParceledListSlice r6;
        java.util.List r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i3 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i1, $i2, null);

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>(r5, i0, $i3, r1);

     label2:
        if r6 == null goto label5;

     label3:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label4:
        goto label6;

     label5:
        r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label6:
        return r7;

     label7:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public java.util.List queryInstrumentation(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.content.pm.IPackageManager $r1;
        java.util.List $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.ParceledListSlice r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        r6 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String,int)>(r5, i0);

     label2:
        if r6 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r7;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.util.List queryIntentActivities(android.content.Intent, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        int i0, $i1;
        java.util.List $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public java.util.List queryIntentActivitiesAsUser(android.content.Intent, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        java.util.List $r5, r10;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.Intent r8;
        android.content.pm.ParceledListSlice r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke r8.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, r8);

        r9 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(r8, $r4, $i2, i1);

     label2:
        if r9 != null goto label4;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label4:
        r10 = virtualinvoke r9.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r10;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.util.List queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent[] r1;
        android.content.Intent r2, r12;
        int i0, i1, i2, $i3, i4;
        android.content.ContentResolver r3;
        android.app.ContextImpl $r4;
        android.content.pm.IPackageManager $r5;
        java.lang.String $r6, r14;
        java.util.List $r7, r16;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.ComponentName r10;
        java.lang.String[] r11, r13;
        android.content.pm.ParceledListSlice r15;

        r0 := @this: android.app.ApplicationPackageManager;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.Intent[];

        r2 := @parameter2: android.content.Intent;

        i0 := @parameter3: int;

        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        r3 = virtualinvoke $r4.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r11 = null;

        if r1 == null goto label05;

        i2 = lengthof r1;

        i4 = 0;

     label01:
        if i4 >= i2 goto label04;

        r12 = r1[i4];

        r13 = r11;

        if r12 == null goto label03;

        r14 = virtualinvoke r12.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>(r3);

        r13 = r11;

        if r14 == null goto label03;

        r13 = r11;

        if r11 != null goto label02;

        r13 = newarray (java.lang.String)[i2];

     label02:
        r13[i4] = r14;

     label03:
        i4 = i4 + 1;

        r11 = r13;

        goto label01;

     label04:
        goto label06;

     label05:
        r11 = null;

     label06:
        $r5 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r6 = virtualinvoke r2.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>(r3);

        $i3 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, r2);

        r15 = interfaceinvoke $r5.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>(r10, r1, r11, r2, $r6, $i3, i1);

     label07:
        if r15 != null goto label09;

     label08:
        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label09:
        r16 = virtualinvoke r15.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label10:
        return r16;

     label11:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label06 to label07 with label11;
        catch android.os.RemoteException from label08 to label09 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    public java.util.List queryIntentContentProviders(android.content.Intent, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        int i0, $i1;
        java.util.List $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryIntentContentProvidersAsUser(android.content.Intent,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public java.util.List queryIntentContentProvidersAsUser(android.content.Intent, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        java.util.List $r5, r10;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.Intent r8;
        android.content.pm.ParceledListSlice r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke r8.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, r8);

        r9 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>(r8, $r4, $i2, i1);

     label2:
        if r9 != null goto label4;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label4:
        r10 = virtualinvoke r9.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r10;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.util.List queryIntentServices(android.content.Intent, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        int i0, $i1;
        java.util.List $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public java.util.List queryIntentServicesAsUser(android.content.Intent, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        java.util.List $r5, r10;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.Intent r8;
        android.content.pm.ParceledListSlice r9;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke r8.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, r8);

        r9 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>(r8, $r4, $i2, i1);

     label2:
        if r9 != null goto label4;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label4:
        r10 = virtualinvoke r9.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r10;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.util.List queryPermissionsByGroup(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.permission.IPermissionManager $r1;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.ParceledListSlice r6;
        java.util.List r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        r6 = interfaceinvoke $r1.<android.permission.IPermissionManager: android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String,int)>(r5, i0);

     label2:
        if r6 == null goto label5;

     label3:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label4:
        if r7 == null goto label5;

        return r7;

     label5:
        $r2 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r2.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r5);

        throw $r2;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void registerDexModule(java.lang.String, android.content.pm.PackageManager$DexModuleRegisterCallback)
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.PackageManager$DexModuleRegisterCallback r1;
        int i0, i1, $i2;
        android.app.ContextImpl $r3;
        android.content.pm.IPackageManager $r4;
        java.lang.String $r5, $r12, $r14, r15;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9;
        boolean z0;
        android.system.StructStat r16;
        android.app.ApplicationPackageManager$DexModuleRegisterCallbackDelegate r17, r20;
        java.lang.StringBuilder r21;
        android.system.ErrnoException r22;

        r0 := @this: android.app.ApplicationPackageManager;

        r15 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.PackageManager$DexModuleRegisterCallback;

        z0 = 0;

     label1:
        r16 = staticinvoke <android.system.Os: android.system.StructStat stat(java.lang.String)>(r15);

        i0 = <android.system.OsConstants: int S_IROTH>;

        i1 = r16.<android.system.StructStat: int st_mode>;

     label2:
        $i2 = i0 & i1;

        if $i2 == 0 goto label3;

        z0 = 1;

     label3:
        r17 = null;

        if r1 == null goto label4;

        r20 = new android.app.ApplicationPackageManager$DexModuleRegisterCallbackDelegate;

        specialinvoke r20.<android.app.ApplicationPackageManager$DexModuleRegisterCallbackDelegate: void <init>(android.content.pm.PackageManager$DexModuleRegisterCallback)>(r1);

        r17 = r20;

     label4:
        $r4 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r3 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r5 = virtualinvoke $r3.<android.app.ContextImpl: java.lang.String getPackageName()>();

        interfaceinvoke $r4.<android.content.pm.IPackageManager: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>($r5, r15, z0, r17);

     label5:
        return;

     label6:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r8;

     label7:
        $r9 := @caughtexception;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get stat the module file: ");

        r22 = (android.system.ErrnoException) $r9;

        $r12 = virtualinvoke r22.<android.system.ErrnoException: java.lang.String getMessage()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.pm.PackageManager$DexModuleRegisterCallback: void onDexModuleRegistered(java.lang.String,boolean,java.lang.String)>(r15, 0, $r14);

        return;

        catch android.system.ErrnoException from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void registerMoveCallback(android.content.pm.PackageManager$MoveCallback, android.os.Handler)
    {
        android.app.ApplicationPackageManager r0;
        android.os.Handler r1;
        java.util.ArrayList r2, $r6;
        android.app.ApplicationPackageManager$MoveCallbackDelegate r3;
        android.os.Looper $r4;
        android.content.pm.IPackageManager $r5;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9;
        android.content.pm.PackageManager$MoveCallback r10;

        r0 := @this: android.app.ApplicationPackageManager;

        r10 := @parameter0: android.content.pm.PackageManager$MoveCallback;

        r1 := @parameter1: android.os.Handler;

        r2 = r0.<android.app.ApplicationPackageManager: java.util.ArrayList mDelegates>;

        entermonitor r2;

     label01:
        r3 = new android.app.ApplicationPackageManager$MoveCallbackDelegate;

        $r4 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke r3.<android.app.ApplicationPackageManager$MoveCallbackDelegate: void <init>(android.content.pm.PackageManager$MoveCallback,android.os.Looper)>(r10, $r4);

     label02:
        $r5 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r5.<android.content.pm.IPackageManager: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>(r3);

     label03:
        $r6 = r0.<android.app.ApplicationPackageManager: java.util.ArrayList mDelegates>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label04:
        exitmonitor r2;

     label05:
        return;

     label06:
        $r7 := @caughtexception;

     label07:
        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)
    {
        android.app.ApplicationPackageManager r0;
        java.util.Map r1, $r3, $r6;
        android.permission.IOnPermissionsChangeListener r2;
        java.lang.Object $r4;
        android.permission.IPermissionManager $r5;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;
        android.content.pm.PackageManager$OnPermissionsChangedListener r11;

        r0 := @this: android.app.ApplicationPackageManager;

        r11 := @parameter0: android.content.pm.PackageManager$OnPermissionsChangedListener;

        r1 = r0.<android.app.ApplicationPackageManager: java.util.Map mPermissionListeners>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.app.ApplicationPackageManager: java.util.Map mPermissionListeners>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        r2 = (android.permission.IOnPermissionsChangeListener) $r4;

     label02:
        if r2 == null goto label07;

     label03:
        $r5 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        interfaceinvoke $r5.<android.permission.IPermissionManager: void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>(r2);

        $r6 = r0.<android.app.ApplicationPackageManager: java.util.Map mPermissionListeners>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r11);

     label04:
        goto label07;

     label05:
        $r8 := @caughtexception;

     label06:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void removePackageFromPreferred(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ApplicationPackageManager", "removePackageFromPreferred() is a no-op");

        return;
    }

    public void removePermission(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        interfaceinvoke $r1.<android.permission.IPermissionManager: void removePermission(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r5;
        int i0, i1;
        boolean z0;
        android.permission.IPermissionManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        z0 = interfaceinvoke $r2.<android.permission.IPermissionManager: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>(r5, r1, i0, i1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.content.ComponentName[] r1;
        android.content.ComponentName r2;
        android.content.pm.IPackageManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.IntentFilter r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.ComponentName[];

        r2 := @parameter3: android.content.ComponentName;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r3.<android.content.pm.IPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>(r6, i0, r1, r2, $i1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void replacePreferredActivityAsUser(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        android.content.ComponentName[] r1;
        android.content.ComponentName r2;
        android.content.pm.IPackageManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.IntentFilter r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.ComponentName[];

        r2 := @parameter3: android.content.ComponentName;

        i1 := @parameter4: int;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r3.<android.content.pm.IPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>(r6, i0, r1, r2, i1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.ResolveInfo resolveActivity(android.content.Intent, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        int i0, $i1;
        android.content.pm.ResolveInfo $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.Intent r7;
        android.content.pm.ResolveInfo r8;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke r7.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, r7);

        r8 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>(r7, $r4, $i2, i1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.pm.ProviderInfo $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo resolveContentProviderAsUser(java.lang.String,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public android.content.pm.ProviderInfo resolveContentProviderAsUser(java.lang.String, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.content.pm.ProviderInfo r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, null);

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>(r4, $i2, i1);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.ResolveInfo resolveService(android.content.Intent, int)
    {
        android.app.ApplicationPackageManager r0;
        android.content.Intent r1;
        int i0, $i1;
        android.content.pm.ResolveInfo $r2;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveServiceAsUser(android.content.Intent,int,int)>(r1, i0, $i1);

        return $r2;
    }

    public android.content.pm.ResolveInfo resolveServiceAsUser(android.content.Intent, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.Intent r7;
        android.content.pm.ResolveInfo r8;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke r7.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $i2 = specialinvoke r0.<android.app.ApplicationPackageManager: int updateFlagsForComponent(int,int,android.content.Intent)>(i0, i1, r7);

        r8 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>(r7, $r4, $i2, i1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r2;
        android.os.UserHandle r3;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.UserHandle;

        virtualinvoke r0.<android.app.ApplicationPackageManager: void revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle,java.lang.String)>(r1, r2, r3, null);

        return;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r3, r7;
        android.os.UserHandle r2;
        android.permission.IPermissionManager $r4;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        r3 := @parameter3: java.lang.String;

     label1:
        $r4 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.permission.IPermissionManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>(r7, r1, $i0, r3);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendDeviceCustomizationReadyBroadcast()
    {
        android.app.ApplicationPackageManager r0;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void sendDeviceCustomizationReadyBroadcast()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setApplicationCategoryHint(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void setApplicationCategoryHint(java.lang.String,int,java.lang.String)>(r6, i0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setApplicationEnabledSetting(java.lang.String, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.IPackageManager $r1;
        android.app.ContextImpl $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        interfaceinvoke $r1.<android.content.pm.IPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>(r6, i0, i1, $i2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setApplicationHiddenSettingAsUser(java.lang.String, boolean, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        android.os.UserHandle r1;
        android.content.pm.IPackageManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        boolean z0, z1;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.UserHandle;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        z1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>(r5, z0, $i0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setAutoRevokeWhitelisted(java.lang.String, boolean)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        boolean z0, z1;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        z1 = interfaceinvoke $r1.<android.permission.IPermissionManager: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)>(r4, z0, i0);

     label2:
        return z1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setComponentEnabledSetting(android.content.ComponentName, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1, $i2;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r1.<android.content.pm.IPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>(r4, i0, i1, $i2);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setDefaultBrowserPackageNameAsUser(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0;
        boolean z0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        z0 = interfaceinvoke $r1.<android.permission.IPermissionManager: boolean setDefaultBrowser(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] setDistractingPackageRestrictions(java.lang.String[], int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String[] r5, r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $i1 = virtualinvoke $r1.<android.app.ContextImpl: int getUserId()>();

        r6 = interfaceinvoke $r2.<android.content.pm.IPackageManager: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>(r5, i0, $i1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setHarmfulAppWarning(java.lang.String, java.lang.CharSequence)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.CharSequence r1;
        android.content.pm.IPackageManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void setHarmfulAppWarning(java.lang.String,java.lang.CharSequence,int)>(r5, r1, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setInstallerPackageName(java.lang.String, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r5;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setInstantAppCookie(byte[])
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        byte[] r6;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: byte[];

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        z0 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean setInstantAppCookie(java.lang.String,byte[],int)>($r3, r6, $i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMimeGroup(java.lang.String, java.util.Set)
    {
        android.app.ApplicationPackageManager r0;
        java.util.Set r1;
        android.content.pm.IPackageManager r2;
        java.lang.String r3, r8;
        java.util.ArrayList r4;
        android.app.ContextImpl $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Set;

     label1:
        r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r5 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        r3 = virtualinvoke $r5.<android.app.ContextImpl: java.lang.String getPackageName()>();

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        interfaceinvoke r2.<android.content.pm.IPackageManager: void setMimeGroup(java.lang.String,java.lang.String,java.util.List)>(r3, r8, r4);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] setPackagesSuspended(java.lang.String[], boolean, android.os.PersistableBundle, android.os.PersistableBundle, android.content.pm.SuspendDialogInfo)
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.os.PersistableBundle r1, r2;
        android.content.pm.SuspendDialogInfo r3;
        android.app.ContextImpl $r4;
        android.content.pm.IPackageManager $r5;
        java.lang.String $r6;
        int $i0;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.String[] r9, r10;

        r0 := @this: android.app.ApplicationPackageManager;

        r9 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.PersistableBundle;

        r2 := @parameter3: android.os.PersistableBundle;

        r3 := @parameter4: android.content.pm.SuspendDialogInfo;

     label1:
        $r5 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r4 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r6 = virtualinvoke $r4.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        r10 = interfaceinvoke $r5.<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>(r9, z0, r1, r2, r3, $r6, $i0);

     label2:
        return r10;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] setPackagesSuspended(java.lang.String[], boolean, android.os.PersistableBundle, android.os.PersistableBundle, java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String[] r1, $r4;
        boolean z0, $z1;
        android.os.PersistableBundle r2, r3;
        android.content.pm.SuspendDialogInfo$Builder $r5, $r6;
        java.lang.String r7;
        android.content.pm.SuspendDialogInfo r8;

        r0 := @this: android.app.ApplicationPackageManager;

        r1 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.PersistableBundle;

        r3 := @parameter3: android.os.PersistableBundle;

        r7 := @parameter4: java.lang.String;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

        if $z1 != 0 goto label1;

        $r5 = new android.content.pm.SuspendDialogInfo$Builder;

        specialinvoke $r5.<android.content.pm.SuspendDialogInfo$Builder: void <init>()>();

        $r6 = virtualinvoke $r5.<android.content.pm.SuspendDialogInfo$Builder: android.content.pm.SuspendDialogInfo$Builder setMessage(java.lang.String)>(r7);

        r8 = virtualinvoke $r6.<android.content.pm.SuspendDialogInfo$Builder: android.content.pm.SuspendDialogInfo build()>();

        goto label2;

     label1:
        r8 = null;

     label2:
        $r4 = virtualinvoke r0.<android.app.ApplicationPackageManager: java.lang.String[] setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo)>(r1, z0, r2, r3, r8);

        return $r4;
    }

    public void setSyntheticAppDetailsActivityEnabled(java.lang.String, boolean)
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.content.ComponentName r1;
        java.lang.String $r2, r5;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.IPackageManager r6;
        byte b1;

        r0 := @this: android.app.ApplicationPackageManager;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        r1 = new android.content.ComponentName;

        $r2 = <android.app.ApplicationPackageManager: java.lang.String APP_DETAILS_ACTIVITY_CLASS_NAME>;

        specialinvoke r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r5, $r2);

        r6 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

     label2:
        if z0 == 0 goto label3;

        b1 = 0;

        goto label4;

     label3:
        b1 = 2;

     label4:
        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke r6.<android.content.pm.IPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>(r1, b1, 1, $i0);

     label5:
        return;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void setSystemAppState(java.lang.String, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, $i1, $i2;
        android.content.pm.IPackageManager $r1, $r2, $r3, $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.String r7;

        r0 := @this: android.app.ApplicationPackageManager;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 == 0 goto label7;

        if i0 == 1 goto label5;

        if i0 == 2 goto label3;

        if i0 == 3 goto label1;

        goto label8;

     label1:
        $r4 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i2 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r4.<android.content.pm.IPackageManager: boolean setSystemAppInstallState(java.lang.String,boolean,int)>(r7, 0, $i2);

     label2:
        goto label8;

     label3:
        $r3 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $i1 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r3.<android.content.pm.IPackageManager: boolean setSystemAppInstallState(java.lang.String,boolean,int)>(r7, 1, $i1);

     label4:
        goto label8;

     label5:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void setSystemAppHiddenUntilInstalled(java.lang.String,boolean)>(r7, 0);

     label6:
        goto label8;

     label7:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r1.<android.content.pm.IPackageManager: void setSystemAppHiddenUntilInstalled(java.lang.String,boolean)>(r7, 1);

     label8:
        return;

     label9:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch android.os.RemoteException from label5 to label6 with label9;
        catch android.os.RemoteException from label7 to label8 with label9;
    }

    public void setUpdateAvailable(java.lang.String, boolean)
    {
        android.app.ApplicationPackageManager r0;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r1.<android.content.pm.IPackageManager: void setUpdateAvailable(java.lang.String,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean shouldShowRequestPermissionRationale(java.lang.String)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r6;
        boolean z0;
        android.app.ContextImpl $r2;
        android.permission.IPermissionManager $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ApplicationPackageManager;

        r6 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        r1 = virtualinvoke $r2.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r3 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        z0 = interfaceinvoke $r3.<android.permission.IPermissionManager: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>(r6, r1, $i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterMoveCallback(android.content.pm.PackageManager$MoveCallback)
    {
        android.app.ApplicationPackageManager r0;
        java.util.ArrayList r1, $r5;
        java.util.Iterator r2;
        android.app.ApplicationPackageManager$MoveCallbackDelegate r3;
        android.content.pm.PackageManager$MoveCallback r4, r11;
        boolean $z0;
        java.lang.Object $r6;
        android.content.pm.IPackageManager $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.app.ApplicationPackageManager;

        r11 := @parameter0: android.content.pm.PackageManager$MoveCallback;

        r1 = r0.<android.app.ApplicationPackageManager: java.util.ArrayList mDelegates>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.app.ApplicationPackageManager: java.util.ArrayList mDelegates>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.app.ApplicationPackageManager$MoveCallbackDelegate) $r6;

        r4 = r3.<android.app.ApplicationPackageManager$MoveCallbackDelegate: android.content.pm.PackageManager$MoveCallback mCallback>;

     label03:
        if r4 != r11 goto label09;

     label04:
        $r7 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r7.<android.content.pm.IPackageManager: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>(r3);

     label05:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label06:
        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label09:
        goto label02;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r10 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void updateInstantAppCookie(byte[])
    {
        android.app.ApplicationPackageManager r0;
        android.app.ContextImpl $r1;
        android.content.pm.IPackageManager $r2;
        java.lang.String $r3, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        byte[] r11;

        r0 := @this: android.app.ApplicationPackageManager;

        r11 := @parameter0: byte[];

        if r11 == null goto label2;

        $i1 = lengthof r11;

        $i2 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getInstantAppCookieMaxBytes()>();

        if $i1 > $i2 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("instant cookie longer than ");

        $i3 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getInstantAppCookieMaxBytes()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        $r1 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r3 = virtualinvoke $r1.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r0.<android.app.ApplicationPackageManager: int getUserId()>();

        interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean setInstantAppCookie(java.lang.String,byte[],int)>($r3, r11, $i0);

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean updateIntentVerificationStatusAsUser(java.lang.String, int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.ApplicationPackageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        z0 = interfaceinvoke $r1.<android.content.pm.IPackageManager: boolean updateIntentVerificationStatus(java.lang.String,int,int)>(r4, i0, i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updatePermissionFlags(java.lang.String, java.lang.String, int, int, android.os.UserHandle)
    {
        android.app.ApplicationPackageManager r0;
        java.lang.String r1, r8;
        int i0, i1, $i2, $i3;
        android.os.UserHandle r2;
        android.app.ContextImpl $r3;
        android.content.pm.ApplicationInfo $r4;
        android.permission.IPermissionManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        boolean z0;

        r0 := @this: android.app.ApplicationPackageManager;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.os.UserHandle;

     label1:
        $r3 = r0.<android.app.ApplicationPackageManager: android.app.ContextImpl mContext>;

        $r4 = virtualinvoke $r3.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 < 29 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        $r5 = r0.<android.app.ApplicationPackageManager: android.permission.IPermissionManager mPermissionManager>;

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r5.<android.permission.IPermissionManager: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>(r8, r1, i0, i1, z0, $i3);

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void verifyIntentFilter(int, int, java.util.List)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: java.util.List;

     label1:
        $r1 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r1.<android.content.pm.IPackageManager: void verifyIntentFilter(int,int,java.util.List)>(i0, i1, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void verifyPendingInstall(int, int)
    {
        android.app.ApplicationPackageManager r0;
        int i0, i1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ApplicationPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.ApplicationPackageManager: android.content.pm.IPackageManager mPM>;

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void verifyPendingInstall(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
