class android.app.ContextImpl extends android.content.Context
{
    private static final boolean DEBUG;
    static final int STATE_INITIALIZING;
    static final int STATE_NOT_FOUND;
    static final int STATE_READY;
    static final int STATE_UNINITIALIZED;
    private static final java.lang.String TAG;
    private static final java.lang.String XATTR_INODE_CACHE;
    private static final java.lang.String XATTR_INODE_CODE_CACHE;
    private static android.util.ArrayMap sSharedPrefsCache;
    private final java.lang.String mAttributionTag;
    private android.view.autofill.AutofillManager$AutofillClient mAutofillClient;
    private android.content.AutofillOptions mAutofillOptions;
    private final java.lang.String mBasePackageName;
    private java.io.File mCacheDir;
    private java.lang.ClassLoader mClassLoader;
    private java.io.File mCodeCacheDir;
    private android.content.ContentCaptureOptions mContentCaptureOptions;
    private final android.app.ContextImpl$ApplicationContentResolver mContentResolver;
    private java.io.File mCratesDir;
    private java.io.File mDatabasesDir;
    private android.view.Display mDisplay;
    private java.io.File mFilesDir;
    private final int mFlags;
    private boolean mIsAssociatedWithDisplay;
    private boolean mIsSystemOrSystemUiContext;
    private boolean mIsUiContext;
    final android.app.ActivityThread mMainThread;
    private java.io.File mNoBackupFilesDir;
    private final java.lang.String mOpPackageName;
    private android.content.Context mOuterContext;
    final android.app.LoadedApk mPackageInfo;
    private android.content.pm.PackageManager mPackageManager;
    private java.io.File mPreferencesDir;
    private android.content.Context mReceiverRestrictedContext;
    private android.content.res.Resources mResources;
    private final android.app.ResourcesManager mResourcesManager;
    final java.lang.Object[] mServiceCache;
    final int[] mServiceInitializationStateArray;
    private android.util.ArrayMap mSharedPrefsPaths;
    private java.lang.String mSplitName;
    private final java.lang.Object mSync;
    private android.content.res.Resources$Theme mTheme;
    private int mThemeResource;
    private final android.os.IBinder mToken;
    private final android.os.UserHandle mUser;

    private void <init>(android.app.ContextImpl, android.app.ActivityThread, android.app.LoadedApk, java.lang.String, java.lang.String, android.os.IBinder, android.os.UserHandle, int, java.lang.ClassLoader, java.lang.String)
    {
        android.app.ContextImpl r0, r17;
        android.app.ActivityThread r1;
        java.lang.String r2, r3, r6, $r10, $r12, r23, r24;
        android.os.UserHandle r4, r22;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.ClassLoader r5;
        java.lang.Object $r7;
        int[] $r8;
        android.app.ResourcesManager $r9;
        android.app.ContextImpl$ApplicationContentResolver $r11;
        android.content.res.Resources $r13;
        android.view.Display $r14;
        boolean $z0, $z1, $z2, $z3;
        java.io.File $r15, $r16, r21;
        android.app.LoadedApk r18;
        android.os.IBinder r19;
        java.lang.Object[] r20;
        android.content.pm.ApplicationInfo r25;

        r0 := @this: android.app.ContextImpl;

        r17 := @parameter0: android.app.ContextImpl;

        r1 := @parameter1: android.app.ActivityThread;

        r18 := @parameter2: android.app.LoadedApk;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r19 := @parameter5: android.os.IBinder;

        r4 := @parameter6: android.os.UserHandle;

        i0 := @parameter7: int;

        r5 := @parameter8: java.lang.ClassLoader;

        r6 := @parameter9: java.lang.String;

        specialinvoke r0.<android.content.Context: void <init>()>();

        r0.<android.app.ContextImpl: int mThemeResource> = 0;

        r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme> = null;

        r0.<android.app.ContextImpl: android.content.Context mReceiverRestrictedContext> = null;

        r0.<android.app.ContextImpl: java.lang.String mSplitName> = null;

        r0.<android.app.ContextImpl: android.view.autofill.AutofillManager$AutofillClient mAutofillClient> = null;

        r0.<android.app.ContextImpl: android.content.ContentCaptureOptions mContentCaptureOptions> = null;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<android.app.ContextImpl: java.lang.Object mSync> = $r7;

        r20 = staticinvoke <android.app.SystemServiceRegistry: java.lang.Object[] createServiceCache()>();

        r0.<android.app.ContextImpl: java.lang.Object[] mServiceCache> = r20;

        $i1 = lengthof r20;

        $r8 = newarray (int)[$i1];

        r0.<android.app.ContextImpl: int[] mServiceInitializationStateArray> = $r8;

        r0.<android.app.ContextImpl: android.content.Context mOuterContext> = r0;

        i6 = i0;

        $i2 = i0 & 24;

        if $i2 != 0 goto label2;

        r21 = virtualinvoke r18.<android.app.LoadedApk: java.io.File getDataDirFile()>();

        $r15 = virtualinvoke r18.<android.app.LoadedApk: java.io.File getCredentialProtectedDataDirFile()>();

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r21, $r15);

        if $z2 == 0 goto label1;

        i6 = i0 | 16;

        goto label2;

     label1:
        i6 = i0;

        $r16 = virtualinvoke r18.<android.app.LoadedApk: java.io.File getDeviceProtectedDataDirFile()>();

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r21, $r16);

        if $z3 == 0 goto label2;

        i6 = i0 | 8;

     label2:
        r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread> = r1;

        r0.<android.app.ContextImpl: android.os.IBinder mToken> = r19;

        r0.<android.app.ContextImpl: int mFlags> = i6;

        r22 = r4;

        if r4 != null goto label3;

        r22 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

     label3:
        r0.<android.app.ContextImpl: android.os.UserHandle mUser> = r22;

        r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo> = r18;

        r0.<android.app.ContextImpl: java.lang.String mSplitName> = r3;

        r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader> = r5;

        $r9 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        r0.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager> = $r9;

        if r17 == null goto label4;

        $r12 = r17.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        r0.<android.app.ContextImpl: java.lang.String mBasePackageName> = $r12;

        r23 = r17.<android.app.ContextImpl: java.lang.String mOpPackageName>;

        $r13 = r17.<android.app.ContextImpl: android.content.res.Resources mResources>;

        virtualinvoke r0.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r13);

        $r14 = r17.<android.app.ContextImpl: android.view.Display mDisplay>;

        r0.<android.app.ContextImpl: android.view.Display mDisplay> = $r14;

        $z0 = r17.<android.app.ContextImpl: boolean mIsAssociatedWithDisplay>;

        r0.<android.app.ContextImpl: boolean mIsAssociatedWithDisplay> = $z0;

        $z1 = r17.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext>;

        r0.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext> = $z1;

        r24 = r23;

        goto label6;

     label4:
        $r10 = r18.<android.app.LoadedApk: java.lang.String mPackageName>;

        r0.<android.app.ContextImpl: java.lang.String mBasePackageName> = $r10;

        r25 = virtualinvoke r18.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i3 = r25.<android.content.pm.ApplicationInfo: int uid>;

        if $i3 != 1000 goto label5;

        $i4 = r25.<android.content.pm.ApplicationInfo: int uid>;

        $i5 = staticinvoke <android.os.Process: int myUid()>();

        if $i4 == $i5 goto label5;

        r24 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        goto label6;

     label5:
        r24 = r0.<android.app.ContextImpl: java.lang.String mBasePackageName>;

     label6:
        if r6 == null goto label7;

        r24 = r6;

        goto label7;

     label7:
        r0.<android.app.ContextImpl: java.lang.String mOpPackageName> = r24;

        r0.<android.app.ContextImpl: java.lang.String mAttributionTag> = r2;

        $r11 = new android.app.ContextImpl$ApplicationContentResolver;

        specialinvoke $r11.<android.app.ContextImpl$ApplicationContentResolver: void <init>(android.content.Context,android.app.ActivityThread)>(r0, r1);

        r0.<android.app.ContextImpl: android.app.ContextImpl$ApplicationContentResolver mContentResolver> = $r11;

        return;
    }

    private boolean bindServiceCommon(android.content.Intent, android.content.ServiceConnection, int, java.lang.String, android.os.Handler, java.util.concurrent.Executor, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.os.Handler r1;
        java.util.concurrent.Executor r2;
        android.os.UserHandle r3;
        android.app.LoadedApk r4, $r12, $r13;
        int i0, $i1, i2, $i3, i4;
        java.lang.IllegalArgumentException $r5, $r16;
        java.lang.RuntimeException $r6, $r18;
        android.content.Context $r7, $r15;
        android.os.IBinder $r8, $r27;
        java.lang.String $r11, r22, $r29, $r30;
        android.content.pm.ApplicationInfo $r14;
        android.os.RemoteException $r17, $r19, r33;
        android.content.Intent r20;
        android.content.ServiceConnection r21;
        android.app.IServiceConnection r23;
        android.app.IActivityManager $r24;
        android.app.ActivityThread $r25;
        android.app.ActivityThread$ApplicationThread $r26;
        android.content.ContentResolver $r28;
        boolean z0;
        java.lang.SecurityException r31;
        java.lang.StringBuilder r32;

        r0 := @this: android.app.ContextImpl;

        r20 := @parameter0: android.content.Intent;

        r21 := @parameter1: android.content.ServiceConnection;

        i2 := @parameter2: int;

        r22 := @parameter3: java.lang.String;

        r1 := @parameter4: android.os.Handler;

        r2 := @parameter5: java.util.concurrent.Executor;

        r3 := @parameter6: android.os.UserHandle;

        if r21 == null goto label18;

        if r1 == null goto label02;

        if r2 != null goto label01;

        goto label02;

     label01:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Handler and Executor both supplied");

        throw $r16;

     label02:
        r4 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r4 == null goto label17;

        if r2 == null goto label03;

        $r15 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        r23 = virtualinvoke r4.<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,java.util.concurrent.Executor,int)>(r21, $r15, r2, i2);

        goto label04;

     label03:
        $r7 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        r23 = virtualinvoke r4.<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>(r21, $r7, r1, i2);

     label04:
        specialinvoke r0.<android.app.ContextImpl: void validateServiceIntent(android.content.Intent)>(r20);

     label05:
        $r8 = virtualinvoke r0.<android.app.ContextImpl: android.os.IBinder getActivityToken()>();

        if $r8 != null goto label09;

     label06:
        $i1 = i2 & 1;

        if $i1 != 0 goto label09;

     label07:
        $r12 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r12 == null goto label09;

        $r13 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r14 = virtualinvoke $r13.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r14.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label08:
        if i0 >= 14 goto label09;

        i2 = i2 | 32;

        goto label09;

     label09:
        virtualinvoke r20.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r24 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r25 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r26 = virtualinvoke $r25.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r27 = virtualinvoke r0.<android.app.ContextImpl: android.os.IBinder getActivityToken()>();

        $r28 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r29 = virtualinvoke r20.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r28);

        $r30 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        $i3 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        i4 = interfaceinvoke $r24.<android.app.IActivityManager: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>($r26, $r27, r20, $r29, r23, i2, r22, $r30, $i3);

     label10:
        if i4 < 0 goto label13;

        if i4 == 0 goto label11;

        z0 = 1;

        goto label12;

     label11:
        z0 = 0;

     label12:
        return z0;

     label13:
        r31 = new java.lang.SecurityException;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to bind to service ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        $r11 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw r31;

     label14:
        $r17 := @caughtexception;

        r33 = $r17;

        goto label16;

     label15:
        $r19 := @caughtexception;

        r33 = $r19;

     label16:
        $r18 = virtualinvoke r33.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r18;

     label17:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r6;

     label18:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connection is null");

        throw $r5;

        catch android.os.RemoteException from label05 to label06 with label15;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch android.os.RemoteException from label13 to label14 with label14;
    }

    private void checkMode(int)
    {
        android.app.ContextImpl r0;
        int i0, $i1, $i2, $i3;
        android.content.pm.ApplicationInfo $r1;
        java.lang.SecurityException $r2, $r3;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r1.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 < 24 goto label3;

        $i2 = i0 & 1;

        if $i2 != 0 goto label2;

        $i3 = i0 & 2;

        if $i3 != 0 goto label1;

        goto label3;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("MODE_WORLD_WRITEABLE no longer supported");

        throw $r3;

     label2:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("MODE_WORLD_READABLE no longer supported");

        throw $r2;

     label3:
        return;
    }

    static android.app.ContextImpl createActivityContext(android.app.ActivityThread, android.app.LoadedApk, android.content.pm.ActivityInfo, android.os.IBinder, int, android.content.res.Configuration)
    {
        android.os.IBinder r0;
        android.content.res.Configuration r1;
        android.app.ResourcesManager r2;
        java.lang.String r3, $r9, $r17, $r18;
        java.lang.String[] r4, r5, r24;
        java.lang.IllegalArgumentException $r6;
        android.content.pm.ApplicationInfo $r7, $r10;
        boolean $z0, $z1;
        android.app.ContextImpl $r8;
        android.app.Application $r11, $r12;
        android.content.res.Resources $r13, $r14, $r15;
        android.view.Display $r16;
        java.lang.Throwable $r19;
        android.content.pm.PackageManager$NameNotFoundException $r20;
        android.app.ActivityThread r21;
        android.app.LoadedApk r22;
        android.content.pm.ActivityInfo r23;
        int i0;
        java.lang.ClassLoader r25;
        java.lang.RuntimeException r28;
        android.content.res.CompatibilityInfo r30;
        java.util.List r31;

        r21 := @parameter0: android.app.ActivityThread;

        r22 := @parameter1: android.app.LoadedApk;

        r23 := @parameter2: android.content.pm.ActivityInfo;

        r0 := @parameter3: android.os.IBinder;

        i0 := @parameter4: int;

        r1 := @parameter5: android.content.res.Configuration;

        if r22 == null goto label14;

        r24 = virtualinvoke r22.<android.app.LoadedApk: java.lang.String[] getSplitResDirs()>();

        r25 = virtualinvoke r22.<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>();

        $r7 = virtualinvoke r22.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $z0 = virtualinvoke $r7.<android.content.pm.ApplicationInfo: boolean requestsIsolatedSplitLoading()>();

        if $z0 == 0 goto label07;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, "SplitDependencies");

     label01:
        $r17 = r23.<android.content.pm.ActivityInfo: java.lang.String splitName>;

        r25 = virtualinvoke r22.<android.app.LoadedApk: java.lang.ClassLoader getSplitClassLoader(java.lang.String)>($r17);

        $r18 = r23.<android.content.pm.ActivityInfo: java.lang.String splitName>;

        r24 = virtualinvoke r22.<android.app.LoadedApk: java.lang.String[] getSplitPaths(java.lang.String)>($r18);

     label02:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        goto label07;

     label03:
        $r19 := @caughtexception;

        goto label06;

     label04:
        $r20 := @caughtexception;

     label05:
        r28 = new java.lang.RuntimeException;

        specialinvoke r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r20);

        throw r28;

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw $r19;

     label07:
        $r8 = new android.app.ContextImpl;

        $r9 = r23.<android.content.pm.ActivityInfo: java.lang.String splitName>;

        specialinvoke $r8.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(null, r21, r22, null, $r9, r0, null, 0, r25, null);

        $r8.<android.app.ContextImpl: boolean mIsUiContext> = 1;

        $r8.<android.app.ContextImpl: boolean mIsAssociatedWithDisplay> = 1;

        $z1 = staticinvoke <android.app.ContextImpl: boolean isSystemOrSystemUI(android.content.Context)>($r8);

        $r8.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext> = $z1;

        if i0 == -1 goto label08;

        goto label09;

     label08:
        i0 = 0;

     label09:
        if i0 != 0 goto label10;

        r30 = virtualinvoke r22.<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        goto label11;

     label10:
        r30 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

     label11:
        r2 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        r3 = virtualinvoke r22.<android.app.LoadedApk: java.lang.String getResDir()>();

        r4 = virtualinvoke r22.<android.app.LoadedApk: java.lang.String[] getOverlayDirs()>();

        $r10 = virtualinvoke r22.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r5 = $r10.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r11 = virtualinvoke r22.<android.app.LoadedApk: android.app.Application getApplication()>();

        if $r11 != null goto label12;

        r31 = null;

        goto label13;

     label12:
        $r12 = virtualinvoke r22.<android.app.LoadedApk: android.app.Application getApplication()>();

        $r13 = virtualinvoke $r12.<android.app.Application: android.content.res.Resources getResources()>();

        r31 = virtualinvoke $r13.<android.content.res.Resources: java.util.List getLoaders()>();

     label13:
        $r14 = virtualinvoke r2.<android.app.ResourcesManager: android.content.res.Resources createBaseTokenResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader,java.util.List)>(r0, r3, r24, r4, r5, i0, r1, r30, r25, r31);

        virtualinvoke $r8.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r14);

        $r15 = virtualinvoke $r8.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $r16 = virtualinvoke r2.<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.content.res.Resources)>(i0, $r15);

        $r8.<android.app.ContextImpl: android.view.Display mDisplay> = $r16;

        return $r8;

     label14:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("packageInfo");

        throw $r6;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
    }

    static android.app.ContextImpl createAppContext(android.app.ActivityThread, android.app.LoadedApk)
    {
        android.app.ActivityThread r0;
        android.app.LoadedApk r1;
        android.app.ContextImpl $r2;

        r0 := @parameter0: android.app.ActivityThread;

        r1 := @parameter1: android.app.LoadedApk;

        $r2 = staticinvoke <android.app.ContextImpl: android.app.ContextImpl createAppContext(android.app.ActivityThread,android.app.LoadedApk,java.lang.String)>(r0, r1, null);

        return $r2;
    }

    static android.app.ContextImpl createAppContext(android.app.ActivityThread, android.app.LoadedApk, java.lang.String)
    {
        android.app.LoadedApk r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        android.app.ContextImpl $r3;
        android.content.res.Resources $r4;
        boolean $z0;
        android.app.ActivityThread r5;

        r5 := @parameter0: android.app.ActivityThread;

        r0 := @parameter1: android.app.LoadedApk;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $r3 = new android.app.ContextImpl;

        specialinvoke $r3.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(null, r5, r0, null, null, null, null, 0, null, r1);

        $r4 = virtualinvoke r0.<android.app.LoadedApk: android.content.res.Resources getResources()>();

        virtualinvoke $r3.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r4);

        $z0 = staticinvoke <android.app.ContextImpl: boolean isSystemOrSystemUI(android.content.Context)>($r3);

        $r3.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext> = $z0;

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("packageInfo");

        throw $r2;
    }

    private static android.content.res.Resources createResources(android.os.IBinder, android.app.LoadedApk, java.lang.String, int, android.content.res.Configuration, android.content.res.CompatibilityInfo, java.util.List)
    {
        android.app.LoadedApk r0;
        int i0;
        android.content.res.Configuration r1;
        android.content.res.CompatibilityInfo r2;
        java.util.List r3;
        java.lang.String[] r4, $r7, $r9;
        android.app.ResourcesManager $r5;
        java.lang.String $r6, r14;
        android.content.pm.ApplicationInfo $r8;
        android.content.res.Resources $r10;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        java.lang.RuntimeException $r12;
        android.os.IBinder r13;
        java.lang.ClassLoader r15;

        r13 := @parameter0: android.os.IBinder;

        r0 := @parameter1: android.app.LoadedApk;

        r14 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r1 := @parameter4: android.content.res.Configuration;

        r2 := @parameter5: android.content.res.CompatibilityInfo;

        r3 := @parameter6: java.util.List;

     label1:
        r4 = virtualinvoke r0.<android.app.LoadedApk: java.lang.String[] getSplitPaths(java.lang.String)>(r14);

        r15 = virtualinvoke r0.<android.app.LoadedApk: java.lang.ClassLoader getSplitClassLoader(java.lang.String)>(r14);

     label2:
        $r5 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        $r6 = virtualinvoke r0.<android.app.LoadedApk: java.lang.String getResDir()>();

        $r7 = virtualinvoke r0.<android.app.LoadedApk: java.lang.String[] getOverlayDirs()>();

        $r8 = virtualinvoke r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r9 = $r8.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r10 = virtualinvoke $r5.<android.app.ResourcesManager: android.content.res.Resources getResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader,java.util.List)>(r13, $r6, r4, $r7, $r9, i0, r1, r2, r15, r3);

        return $r10;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    static android.app.ContextImpl createSystemContext(android.app.ActivityThread)
    {
        android.app.LoadedApk $r1;
        android.app.ContextImpl $r2;
        android.content.res.Resources $r3, $r5;
        android.app.ResourcesManager $r4, $r7;
        android.content.res.Configuration $r6;
        android.util.DisplayMetrics $r8;
        android.app.ActivityThread r9;

        r9 := @parameter0: android.app.ActivityThread;

        $r1 = new android.app.LoadedApk;

        specialinvoke $r1.<android.app.LoadedApk: void <init>(android.app.ActivityThread)>(r9);

        $r2 = new android.app.ContextImpl;

        specialinvoke $r2.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(null, r9, $r1, null, null, null, null, 0, null, null);

        $r3 = virtualinvoke $r1.<android.app.LoadedApk: android.content.res.Resources getResources()>();

        virtualinvoke $r2.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r3);

        $r5 = $r2.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r4 = $r2.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r6 = virtualinvoke $r4.<android.app.ResourcesManager: android.content.res.Configuration getConfiguration()>();

        $r7 = $r2.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r8 = virtualinvoke $r7.<android.app.ResourcesManager: android.util.DisplayMetrics getDisplayMetrics()>();

        virtualinvoke $r5.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>($r6, $r8);

        $r2.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext> = 1;

        return $r2;
    }

    static android.app.ContextImpl createSystemUiContext(android.app.ContextImpl)
    {
        android.app.ContextImpl r0, $r1;

        r0 := @parameter0: android.app.ContextImpl;

        $r1 = staticinvoke <android.app.ContextImpl: android.app.ContextImpl createSystemUiContext(android.app.ContextImpl,int)>(r0, 0);

        return $r1;
    }

    static android.app.ContextImpl createSystemUiContext(android.app.ContextImpl, int)
    {
        int i0;
        android.app.LoadedApk r0;
        android.app.ContextImpl $r1, r5;
        android.app.ActivityThread $r2;
        android.content.res.CompatibilityInfo $r3;
        android.content.res.Resources $r4;

        r5 := @parameter0: android.app.ContextImpl;

        i0 := @parameter1: int;

        r0 = r5.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r1 = new android.app.ContextImpl;

        $r2 = r5.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        specialinvoke $r1.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(null, $r2, r0, null, null, null, null, 0, null, null);

        $r3 = virtualinvoke r0.<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r4 = staticinvoke <android.app.ContextImpl: android.content.res.Resources createResources(android.os.IBinder,android.app.LoadedApk,java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.List)>(null, r0, null, i0, null, $r3, null);

        virtualinvoke $r1.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r4);

        virtualinvoke $r1.<android.app.ContextImpl: void updateDisplay(int)>(i0);

        $r1.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext> = 1;

        return $r1;
    }

    private void enforce(java.lang.String, int, boolean, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r14, r22, r23, r25;
        int i0, i1;
        boolean z0;
        java.lang.StringBuilder $r4, $r6, $r15, $r19;
        java.lang.SecurityException $r13;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r22 := @parameter4: java.lang.String;

        if i0 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r22 == null goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        r23 = "";

     label2:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        if z0 == 0 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        r25 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have ");

        r25 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = new java.lang.SecurityException;

        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label5:
        return;
    }

    private void enforceForUri(int, int, boolean, int, android.net.Uri, java.lang.String)
    {
        android.app.ContextImpl r0;
        int i0, i1, i2;
        boolean z0;
        android.net.Uri r1;
        java.lang.StringBuilder $r4, $r6, $r18, $r22;
        java.lang.String $r11, $r17, r25, r26, r28;
        java.lang.SecurityException $r16;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 := @parameter3: int;

        r1 := @parameter4: android.net.Uri;

        r25 := @parameter5: java.lang.String;

        if i1 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r25 == null goto label1;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        r26 = "";

     label2:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        if z0 == 0 goto label3;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        r28 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have ");

        r28 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r11 = specialinvoke r0.<android.app.ContextImpl: java.lang.String uriModeFlagToString(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" permission on ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = new java.lang.SecurityException;

        $r17 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label5:
        return;
    }

    private java.io.File[] ensureExternalDirsExistOrFilter(java.io.File[], boolean)
    {
        android.app.ContextImpl r0;
        java.io.File[] r1, r3;
        boolean z0, $z1, $z2, $z3;
        android.os.storage.StorageManager r2;
        java.io.File r4, r14;
        java.lang.Object $r6;
        int $i0, $i1, i3;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r13;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.io.File[];

        z0 := @parameter1: boolean;

        $r6 = virtualinvoke r0.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r2 = (android.os.storage.StorageManager) $r6;

        $i0 = lengthof r1;

        r3 = newarray (java.io.File)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label7;

        r4 = r1[i3];

        r14 = r4;

        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label6;

        if z0 == 0 goto label3;

     label2:
        $z3 = virtualinvoke r4.<java.io.File: boolean mkdirs()>();

        if $z3 != 0 goto label4;

     label3:
        $z2 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label4;

        virtualinvoke r2.<android.os.storage.StorageManager: void mkdirs(java.io.File)>(r4);

     label4:
        r14 = r4;

        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to ensure ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r13);

        r14 = null;

     label6:
        r3[i3] = r14;

        i3 = i3 + 1;

        goto label1;

     label7:
        return r3;

        catch java.lang.Exception from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static java.io.File ensurePrivateCacheDirExists(java.io.File, java.lang.String)
    {
        java.io.File r0, $r2;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getCacheAppGid(int)>($i0);

        $r2 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File,int,int,java.lang.String)>(r0, 1529, $i1, r1);

        return $r2;
    }

    private static java.io.File ensurePrivateDirExists(java.io.File)
    {
        java.io.File r0, $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File,int,int,java.lang.String)>(r0, 505, -1, null);

        return $r1;
    }

    private static java.io.File ensurePrivateDirExists(java.io.File, int, int, java.lang.String)
    {
        java.io.File r0, $r4;
        int i0, i1, $i3, $i4;
        java.lang.String r1, $r2, $r5, $r11, $r13, $r19, $r21, r22;
        boolean $z0;
        long $l2;
        java.nio.ByteOrder $r3;
        java.lang.Throwable $r6, $r14;
        android.system.StructStat r25;
        byte[] r26;
        java.lang.StringBuilder r29, r30;
        android.system.ErrnoException r31, r32, r33;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label11;

        r22 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

     label01:
        staticinvoke <android.system.Os: void mkdir(java.lang.String,int)>(r22, i0);

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>(r22, i0);

     label02:
        if i1 == -1 goto label04;

     label03:
        staticinvoke <android.system.Os: void chown(java.lang.String,int,int)>(r22, -1, i1);

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

        r31 = (android.system.ErrnoException) $r6;

        $i4 = r31.<android.system.ErrnoException: int errno>;

        $i3 = <android.system.OsConstants: int EEXIST>;

        if $i4 != $i3 goto label06;

        goto label07;

     label06:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to ensure ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        r32 = (android.system.ErrnoException) $r6;

        $r11 = virtualinvoke r32.<android.system.ErrnoException: java.lang.String getMessage()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r13);

     label07:
        if r1 == null goto label11;

     label08:
        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        r25 = staticinvoke <android.system.Os: android.system.StructStat stat(java.lang.String)>($r2);

        r26 = newarray (byte)[8];

        $l2 = r25.<android.system.StructStat: long st_ino>;

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        staticinvoke <libcore.io.Memory: void pokeLong(byte[],int,long,java.nio.ByteOrder)>(r26, 0, $l2, $r3);

        $r4 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void setxattr(java.lang.String,java.lang.String,byte[],int)>($r5, r1, r26, 0);

     label09:
        goto label11;

     label10:
        $r14 := @caughtexception;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to update ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        r33 = (android.system.ErrnoException) $r14;

        $r19 = virtualinvoke r33.<android.system.ErrnoException: java.lang.String getMessage()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r21);

     label11:
        return r0;

        catch android.system.ErrnoException from label01 to label02 with label05;
        catch android.system.ErrnoException from label03 to label04 with label05;
        catch android.system.ErrnoException from label08 to label09 with label10;
    }

    static java.io.File getCodeCacheDirBeforeBind(java.io.File)
    {
        java.io.File r0, $r1;

        r0 := @parameter0: java.io.File;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "code_cache");

        return $r1;
    }

    private java.io.File getDatabasesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.io.File $r2, $r5, r7, r8, $r9, r10;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ContextImpl: java.io.File mDatabasesDir>;

        if $r2 != null goto label4;

        $r3 = "android";

        $r4 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        r7 = new java.io.File;

        specialinvoke r7.<java.io.File: void <init>(java.lang.String)>("/data/system");

        r0.<android.app.ContextImpl: java.io.File mDatabasesDir> = r7;

     label2:
        goto label4;

     label3:
        r8 = new java.io.File;

        $r5 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        specialinvoke r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "databases");

        r0.<android.app.ContextImpl: java.io.File mDatabasesDir> = r8;

     label4:
        $r9 = r0.<android.app.ContextImpl: java.io.File mDatabasesDir>;

        r10 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File)>($r9);

        exitmonitor r1;

     label5:
        return r10;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static android.app.ContextImpl getImpl(android.content.Context)
    {
        android.content.Context r0, r3;
        boolean $z0;
        android.app.ContextImpl $r1;
        android.content.ContextWrapper $r2;

        r3 := @parameter0: android.content.Context;

     label1:
        $z0 = r3 instanceof android.content.ContextWrapper;

        if $z0 == 0 goto label2;

        $r2 = (android.content.ContextWrapper) r3;

        r0 = virtualinvoke $r2.<android.content.ContextWrapper: android.content.Context getBaseContext()>();

        if r0 == null goto label2;

        r3 = r0;

        goto label1;

     label2:
        $r1 = (android.app.ContextImpl) r3;

        return $r1;
    }

    private java.io.File getPreferencesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.io.File $r2, $r3, $r4, r6, r7;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ContextImpl: java.io.File mPreferencesDir>;

        if $r2 != null goto label2;

        r6 = new java.io.File;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        specialinvoke r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "shared_prefs");

        r0.<android.app.ContextImpl: java.io.File mPreferencesDir> = r6;

     label2:
        $r3 = r0.<android.app.ContextImpl: java.io.File mPreferencesDir>;

        r7 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File)>($r3);

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.util.ArrayMap getSharedPreferencesCacheLocked()
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        android.util.ArrayMap r2, $r3, $r4, $r6, $r7, $r9, r10;
        java.lang.Object $r5;

        r0 := @this: android.app.ContextImpl;

        $r3 = <android.app.ContextImpl: android.util.ArrayMap sSharedPrefsCache>;

        if $r3 != null goto label1;

        $r9 = new android.util.ArrayMap;

        specialinvoke $r9.<android.util.ArrayMap: void <init>()>();

        <android.app.ContextImpl: android.util.ArrayMap sSharedPrefsCache> = $r9;

     label1:
        r1 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r4 = <android.app.ContextImpl: android.util.ArrayMap sSharedPrefsCache>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.util.ArrayMap) $r5;

        r10 = r2;

        if r2 != null goto label2;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r10 = $r6;

        $r7 = <android.app.ContextImpl: android.util.ArrayMap sSharedPrefsCache>;

        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label2:
        return r10;
    }

    private android.app.WallpaperManager getWallpaperManager()
    {
        android.app.ContextImpl r0;
        java.lang.Object $r1;
        android.app.WallpaperManager $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/WallpaperManager;");

        $r2 = (android.app.WallpaperManager) $r1;

        return $r2;
    }

    private void initializeTheme()
    {
        android.app.ContextImpl r0;
        android.content.res.Resources$Theme $r1, $r2, $r4;
        int $i0;
        android.content.res.Resources $r3;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        if $r1 != null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme> = $r4;

     label1:
        $r2 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        $i0 = r0.<android.app.ContextImpl: int mThemeResource>;

        virtualinvoke $r2.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i0, 1);

        return;
    }

    private boolean isOuterUiContext()
    {
        android.app.ContextImpl r0;
        android.content.Context $r1, $r2;
        boolean $z0, z1;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $z0 = virtualinvoke $r2.<android.content.Context: boolean isUiContext()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isSystemOrSystemUI(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0, z1;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.app.ActivityThread: boolean isSystem()>();

        if $z0 != 0 goto label2;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r0.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.STATUS_BAR_SERVICE", $i0, $i1);

        if $i2 != 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private static boolean isUiComponent(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.lang.String;

        $r1 = "window";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        $r2 = "layout_inflater";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r3 = "wallpaper";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private java.io.File makeFilename(java.io.File, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r7, $r10;
        char $c0;
        int $i1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r6;
        java.io.File $r8, r11;
        dalvik.system.BlockGuard$VmPolicy $r9;

        r0 := @this: android.app.ContextImpl;

        r11 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c0);

        if $i1 >= 0 goto label1;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r11, r1);

        $r9 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$VmPolicy getVmPolicy()>();

        $r10 = virtualinvoke $r8.<java.io.File: java.lang.String getPath()>();

        interfaceinvoke $r9.<dalvik.system.BlockGuard$VmPolicy: void onPathAccess(java.lang.String)>($r10);

        return $r8;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains a path separator");

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private static int moveFiles(java.io.File, java.io.File, java.lang.String)
    {
        java.io.File r0, $r2, r20, r23;
        int i0, i3, i4, i5;
        android.app.ContextImpl$1 $r1;
        java.lang.String $r3, $r9, $r12, $r19, r21;
        java.lang.StringBuilder $r4, $r14, r27;
        boolean $z0;
        java.lang.Throwable $r13;
        java.io.File[] r22;
        java.io.IOException r26;

        r20 := @parameter0: java.io.File;

        r0 := @parameter1: java.io.File;

        r21 := @parameter2: java.lang.String;

        $r1 = new android.app.ContextImpl$1;

        specialinvoke $r1.<android.app.ContextImpl$1: void <init>(java.lang.String)>(r21);

        r22 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File,java.io.FilenameFilter)>(r20, $r1);

        i3 = 0;

        i0 = lengthof r22;

        i4 = 0;

     label1:
        if i4 >= i0 goto label8;

        r23 = r22[i4];

        $r2 = new java.io.File;

        $r3 = virtualinvoke r23.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Migrating ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ContextImpl", $r9);

     label2:
        staticinvoke <android.os.FileUtils: void copyFileOrThrow(java.io.File,java.io.File)>(r23, $r2);

        staticinvoke <android.os.FileUtils: void copyPermissions(java.io.File,java.io.File)>(r23, $r2);

        $z0 = virtualinvoke r23.<java.io.File: boolean delete()>();

        if $z0 == 0 goto label5;

     label3:
        i5 = i3;

        if i3 == -1 goto label4;

        i5 = i3 + 1;

     label4:
        i3 = i5;

        goto label7;

     label5:
        r26 = new java.io.IOException;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to clean up ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r12 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw r26;

     label6:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to migrate ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r19);

        i3 = -1;

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        return i3;

        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label5 to label6 with label6;
    }

    private android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver, int, android.content.IntentFilter, java.lang.String, android.os.Handler, android.content.Context, int)
    {
        android.app.ContextImpl r0;
        int i0, i1;
        android.content.IntentFilter r1;
        java.lang.String r2, $r20, $r21;
        android.content.Context r3;
        java.lang.ClassLoader $r4;
        android.app.LoadedApk $r5, $r9;
        android.app.LoadedApk$ReceiverDispatcher $r6;
        android.app.ActivityThread $r7, $r8, $r11, $r18;
        android.app.Instrumentation $r10;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        android.content.BroadcastReceiver r14;
        android.os.Handler r15;
        android.content.IIntentReceiver r16;
        android.app.IActivityManager $r17;
        android.app.ActivityThread$ApplicationThread $r19;
        android.content.Intent r22;

        r0 := @this: android.app.ContextImpl;

        r14 := @parameter0: android.content.BroadcastReceiver;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.IntentFilter;

        r2 := @parameter3: java.lang.String;

        r15 := @parameter4: android.os.Handler;

        r3 := @parameter5: android.content.Context;

        i1 := @parameter6: int;

        if r14 == null goto label4;

        $r5 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r5 == null goto label2;

        if r3 == null goto label2;

        if r15 != null goto label1;

        $r11 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r15 = virtualinvoke $r11.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label1;

     label1:
        $r9 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r10 = virtualinvoke $r8.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r16 = virtualinvoke $r9.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r14, r3, r15, $r10, 1);

        goto label5;

     label2:
        if r15 != null goto label3;

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r15 = virtualinvoke $r7.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label3;

     label3:
        $r6 = new android.app.LoadedApk$ReceiverDispatcher;

        specialinvoke $r6.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r14, r3, r15, null, 1);

        r16 = virtualinvoke $r6.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        goto label5;

     label4:
        r16 = null;

     label5:
        $r17 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r18 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r19 = virtualinvoke $r18.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r20 = r0.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        $r21 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        r22 = interfaceinvoke $r17.<android.app.IActivityManager: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>($r19, $r20, $r21, r16, r1, r2, i0, i1);

     label6:
        if r22 == null goto label8;

     label7:
        $r4 = virtualinvoke r0.<android.app.ContextImpl: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke r22.<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>($r4);

        virtualinvoke r22.<android.content.Intent: void prepareToEnterProcess()>();

     label8:
        return r22;

     label9:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

        catch android.os.RemoteException from label5 to label6 with label9;
        catch android.os.RemoteException from label7 to label8 with label9;
    }

    private int resolveUserId(android.net.Uri)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int $i0, $i1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        $i1 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r1, $i0);

        return $i1;
    }

    static void setFilePermissionsFromMode(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, $i1, $i2, i4, i5, i6, i7;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i5 = i4 | 432;

        i6 = i5;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i6 = i5 | 4;

     label1:
        i7 = i6;

        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        i7 = i6 | 2;

     label2:
        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>(r0, i7, -1, -1);

        return;
    }

    private android.content.ComponentName startServiceCommon(android.content.Intent, boolean, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.app.IActivityManager $r1;
        android.app.ActivityThread $r2;
        android.app.ActivityThread$ApplicationThread $r3;
        android.content.ContentResolver $r4;
        java.lang.String $r5, $r6, $r7, $r8, $r12, $r14, $r15, $r19, $r21, $r22, $r26, $r28;
        int $i0;
        boolean $z0, z1, z2, z3;
        android.os.RemoteException $r29;
        java.lang.RuntimeException $r30;
        android.content.Intent r31;
        android.os.UserHandle r32;
        android.content.ComponentName r33;
        java.lang.IllegalStateException r34;
        java.lang.StringBuilder r35, r37, r39;
        java.lang.SecurityException r36, r38;

        r0 := @this: android.app.ContextImpl;

        r31 := @parameter0: android.content.Intent;

        z1 := @parameter1: boolean;

        r32 := @parameter2: android.os.UserHandle;

     label01:
        specialinvoke r0.<android.app.ContextImpl: void validateServiceIntent(android.content.Intent)>(r31);

        virtualinvoke r31.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r3 = virtualinvoke $r2.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r5 = virtualinvoke r31.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

        $r6 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r32.<android.os.UserHandle: int getIdentifier()>();

        r33 = interfaceinvoke $r1.<android.app.IActivityManager: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>($r3, r31, $r5, z1, $r6, $r7, $i0);

     label02:
        if r33 == null goto label12;

     label03:
        $r8 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getPackageName()>();

        z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("!");

     label04:
        if z2 != 0 goto label11;

     label05:
        $r15 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getPackageName()>();

        z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("!!");

     label06:
        if z3 != 0 goto label10;

     label07:
        $r22 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("?");

        if $z0 != 0 goto label09;

     label08:
        goto label12;

     label09:
        r34 = new java.lang.IllegalStateException;

        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to start service ");

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r26 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw r34;

     label10:
        r36 = new java.lang.SecurityException;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to start service ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r19 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r36.<java.lang.SecurityException: void <init>(java.lang.String)>($r21);

        throw r36;

     label11:
        r38 = new java.lang.SecurityException;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to start service ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission ");

        $r12 = virtualinvoke r33.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r38.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw r38;

     label12:
        return r33;

     label13:
        $r29 := @caughtexception;

        $r30 = virtualinvoke $r29.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r30;

        catch android.os.RemoteException from label01 to label02 with label13;
        catch android.os.RemoteException from label03 to label04 with label13;
        catch android.os.RemoteException from label05 to label06 with label13;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch android.os.RemoteException from label09 to label10 with label13;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    private boolean stopServiceCommon(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        int i0, $i1;
        java.lang.StringBuilder r1;
        android.app.IActivityManager $r2;
        android.app.ActivityThread $r3;
        android.app.ActivityThread$ApplicationThread $r4;
        android.content.ContentResolver $r5;
        java.lang.String $r6, $r9;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        android.content.Intent r12;
        android.os.UserHandle r13;
        boolean z0;
        java.lang.SecurityException r14;

        r0 := @this: android.app.ContextImpl;

        r12 := @parameter0: android.content.Intent;

        r13 := @parameter1: android.os.UserHandle;

     label1:
        specialinvoke r0.<android.app.ContextImpl: void validateServiceIntent(android.content.Intent)>(r12);

        virtualinvoke r12.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke r12.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

        $i1 = virtualinvoke r13.<android.os.UserHandle: int getIdentifier()>();

        i0 = interfaceinvoke $r2.<android.app.IActivityManager: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>($r4, r12, $r6, $i1);

     label2:
        if i0 < 0 goto label5;

        if i0 == 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        r14 = new java.lang.SecurityException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to stop service ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw r14;

     label6:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    private java.lang.String uriModeFlagToString(int)
    {
        android.app.ContextImpl r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r1, $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, $r7;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("read and ");

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write and ");

     label2:
        $i3 = i0 & 64;

        if $i3 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persistable and ");

     label3:
        $i4 = i0 & 128;

        if $i4 == 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prefix and ");

     label4:
        $i5 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i5 <= 5 goto label5;

        $i6 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i7 = $i6 - 5;

        virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>($i7);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission mode flags: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void validateServiceIntent(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.ComponentName $r2;
        java.lang.String $r3, $r9, $r14, $r16;
        android.content.pm.ApplicationInfo $r4;
        int $i0;
        java.lang.StringBuilder $r5, $r10;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r2 != null goto label2;

        $r3 = virtualinvoke r1.<android.content.Intent: java.lang.String getPackage()>();

        if $r3 != null goto label2;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 >= 21 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Implicit intents with startService are not safe: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = staticinvoke <android.os.Debug: java.lang.String getCallers(int,int)>(2, 3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r16);

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Intent must be explicit: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        return;
    }

    private void warnIfCallingFromSystemProcess()
    {
        android.app.ContextImpl r0;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;

        r0 := @this: android.app.ContextImpl;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != 1000 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling a method in the system process without a qualified user: ");

        $r4 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ContextImpl", $r6);

     label1:
        return;
    }

    public boolean bindIsolatedService(android.content.Intent, int, java.lang.String, java.util.concurrent.Executor, android.content.ServiceConnection)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        int i0;
        java.lang.String r2;
        java.util.concurrent.Executor r3;
        android.content.ServiceConnection r4;
        java.lang.NullPointerException $r5;
        android.os.UserHandle $r6;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.util.concurrent.Executor;

        r4 := @parameter4: android.content.ServiceConnection;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        if r2 == null goto label1;

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.os.UserHandle getUser()>();

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean bindServiceCommon(android.content.Intent,android.content.ServiceConnection,int,java.lang.String,android.os.Handler,java.util.concurrent.Executor,android.os.UserHandle)>(r1, r4, i0, r2, null, r3, $r6);

        return $z0;

     label1:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null instanceName");

        throw $r5;
    }

    public boolean bindService(android.content.Intent, int, java.util.concurrent.Executor, android.content.ServiceConnection)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        int i0;
        java.util.concurrent.Executor r2;
        android.content.ServiceConnection r3;
        android.os.UserHandle $r4;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: android.content.ServiceConnection;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.os.UserHandle getUser()>();

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean bindServiceCommon(android.content.Intent,android.content.ServiceConnection,int,java.lang.String,android.os.Handler,java.util.concurrent.Executor,android.os.UserHandle)>(r1, r3, i0, null, null, r2, $r4);

        return $z0;
    }

    public boolean bindService(android.content.Intent, android.content.ServiceConnection, int)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        android.app.ActivityThread $r3;
        android.os.Handler $r4;
        android.os.UserHandle $r5;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r3 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.os.Handler getHandler()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.os.UserHandle getUser()>();

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean bindServiceCommon(android.content.Intent,android.content.ServiceConnection,int,java.lang.String,android.os.Handler,java.util.concurrent.Executor,android.os.UserHandle)>(r1, r2, i0, null, $r4, null, $r5);

        return $z0;
    }

    public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.Handler, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        android.os.Handler r3;
        android.os.UserHandle r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.Handler;

        r4 := @parameter4: android.os.UserHandle;

        if r3 == null goto label1;

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean bindServiceCommon(android.content.Intent,android.content.ServiceConnection,int,java.lang.String,android.os.Handler,java.util.concurrent.Executor,android.os.UserHandle)>(r1, r2, i0, null, r3, null, r4);

        return $z0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handler must not be null.");

        throw $r5;
    }

    public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        android.os.UserHandle r3;
        android.app.ActivityThread $r4;
        android.os.Handler $r5;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.UserHandle;

        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.os.Handler getHandler()>();

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean bindServiceCommon(android.content.Intent,android.content.ServiceConnection,int,java.lang.String,android.os.Handler,java.util.concurrent.Executor,android.os.UserHandle)>(r1, r2, i0, null, $r5, null, r3);

        return $z0;
    }

    public boolean canLoadUnsafeResources()
    {
        android.app.ContextImpl r0;
        boolean z0, z1;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getOpPackageName()>();

        z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $i0 = r0.<android.app.ContextImpl: int mFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    public int checkCallingOrSelfPermission(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r1, $i0, $i1);

        return $i2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;
    }

    public int checkCallingOrSelfUriPermission(android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, $i1, $i2, i0);

        return $i3;
    }

    public int checkCallingPermission(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label2;

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if i0 == $i1 goto label1;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r1, i0, $i2);

        return $i3;

     label1:
        return -1;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;
    }

    public int checkCallingUriPermission(android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        if i1 == $i2 goto label1;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, i1, $i3, i0);

        return $i4;

     label1:
        return -1;
    }

    public int checkPermission(java.lang.String, int, int)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label1;

        $i2 = staticinvoke <android.permission.PermissionManager: int checkPermission(java.lang.String,int,int)>(r1, i0, i1);

        return $i2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;
    }

    public int checkPermission(java.lang.String, int, int, android.os.IBinder)
    {
        android.app.ContextImpl r0;
        int i0, i1, i2;
        android.os.IBinder r1;
        java.lang.IllegalArgumentException $r2;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.app.ContextImpl;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: android.os.IBinder;

        if r6 == null goto label4;

     label1:
        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        i2 = interfaceinvoke $r3.<android.app.IActivityManager: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>(r6, i1, i0, r1);

     label2:
        return i2;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkSelfPermission(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r1, $i0, $i1);

        return $i2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;
    }

    public int checkUriPermission(android.net.Uri, int, int, int)
    {
        android.app.ContextImpl r0;
        int i0, i1, $i2, i3, i4;
        android.app.IActivityManager $r1;
        android.net.Uri $r2, r5;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.ContextImpl;

        r5 := @parameter0: android.net.Uri;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r5);

        $i2 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r5);

        i4 = interfaceinvoke $r1.<android.app.IActivityManager: int checkUriPermission(android.net.Uri,int,int,int,int,android.os.IBinder)>($r2, i3, i0, i1, $i2, null);

     label2:
        return i4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkUriPermission(android.net.Uri, int, int, int, android.os.IBinder)
    {
        android.app.ContextImpl r0;
        int i0, i1, $i2, i3, i4;
        android.os.IBinder r1;
        android.app.IActivityManager $r2;
        android.net.Uri $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.ContextImpl;

        r6 := @parameter0: android.net.Uri;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: android.os.IBinder;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r6);

        $i2 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r6);

        i4 = interfaceinvoke $r2.<android.app.IActivityManager: int checkUriPermission(android.net.Uri,int,int,int,int,android.os.IBinder)>($r3, i3, i0, i1, $i2, r1);

     label2:
        return i4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        java.lang.String r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i6 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $i2 = i1 & 1;

        if $i2 == 0 goto label2;

        if r2 == null goto label1;

        $i5 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r2, i6, i0);

        if $i5 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i3 = i1 & 2;

        if $i3 == 0 goto label4;

        if r3 == null goto label3;

        $i4 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r3, i6, i0);

        if $i4 != 0 goto label4;

     label3:
        return 0;

     label4:
        if r1 == null goto label5;

        i7 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, i6, i0, i1);

        goto label6;

     label5:
        i7 = -1;

     label6:
        return i7;
    }

    public void clearWallpaper() throws java.io.IOException
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        virtualinvoke $r1.<android.app.WallpaperManager: void clear()>();

        return;
    }

    public android.content.Context createApplicationContext(android.content.pm.ApplicationInfo, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ContextImpl r0, $r13;
        android.content.pm.ApplicationInfo r1;
        android.content.res.Resources $r3, $r20, $r21;
        android.app.ActivityThread $r4, $r15;
        android.content.res.CompatibilityInfo $r5, $r19;
        int $i0, $i1, $i2, i3, i4;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r12;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        android.os.UserHandle $r14;
        android.os.IBinder $r16, $r17;
        android.view.DisplayAdjustments $r18;
        android.app.LoadedApk r22;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        i3 := @parameter1: int;

        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r3 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r5 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $i0 = i3 | 1073741824;

        r22 = virtualinvoke $r4.<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>(r1, $r5, $i0);

        if r22 == null goto label1;

        $r13 = new android.app.ContextImpl;

        $r15 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r16 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r14 = new android.os.UserHandle;

        $i1 = r1.<android.content.pm.ApplicationInfo: int uid>;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        specialinvoke $r14.<android.os.UserHandle: void <init>(int)>($i2);

        specialinvoke $r13.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r15, r22, null, null, $r16, $r14, i3, null, null);

        i4 = virtualinvoke r0.<android.app.ContextImpl: int getDisplayId()>();

        $r17 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r18 = virtualinvoke r0.<android.app.ContextImpl: android.view.DisplayAdjustments getDisplayAdjustments(int)>(i4);

        $r19 = virtualinvoke $r18.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r20 = staticinvoke <android.app.ContextImpl: android.content.res.Resources createResources(android.os.IBinder,android.app.LoadedApk,java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.List)>($r17, r22, null, i4, null, $r19, null);

        virtualinvoke $r13.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r20);

        $r21 = $r13.<android.app.ContextImpl: android.content.res.Resources mResources>;

        if $r21 == null goto label1;

        return $r13;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r8 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r11 = new android.content.pm.PackageManager$NameNotFoundException;

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    public android.content.Context createAttributionContext(java.lang.String)
    {
        android.app.ContextImpl r0, $r2;
        java.lang.String r1, $r6;
        java.lang.ClassLoader $r3;
        int $i0;
        android.os.UserHandle $r4;
        android.os.IBinder $r5;
        android.app.LoadedApk $r7;
        android.app.ActivityThread $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.app.ContextImpl;

        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r6 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r5 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r4 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i0 = r0.<android.app.ContextImpl: int mFlags>;

        $r3 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        specialinvoke $r2.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r8, $r7, r1, $r6, $r5, $r4, $i0, $r3, null);

        return $r2;
    }

    android.app.ContextImpl createBaseWindowContext(android.os.IBinder)
    {
        android.app.ContextImpl r0, $r1;
        java.lang.ClassLoader $r2;
        int $i0;
        android.os.UserHandle $r3;
        java.lang.String $r4, $r5;
        android.app.LoadedApk $r6;
        android.app.ActivityThread $r7;
        android.os.IBinder r8;

        r0 := @this: android.app.ContextImpl;

        r8 := @parameter0: android.os.IBinder;

        $r1 = new android.app.ContextImpl;

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r5 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r4 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r3 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i0 = r0.<android.app.ContextImpl: int mFlags>;

        $r2 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        specialinvoke $r1.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r7, $r6, $r5, $r4, r8, $r3, $i0, $r2, null);

        $r1.<android.app.ContextImpl: boolean mIsUiContext> = 1;

        $r1.<android.app.ContextImpl: boolean mIsAssociatedWithDisplay> = 1;

        return $r1;
    }

    public android.content.Context createConfigurationContext(android.content.res.Configuration)
    {
        android.app.ContextImpl r0, $r4;
        android.content.res.Configuration r1;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.ClassLoader $r5;
        android.os.UserHandle $r6;
        android.os.IBinder $r7, $r12;
        java.lang.String $r8, $r9, $r14;
        android.app.LoadedApk $r10, $r13;
        android.app.ActivityThread $r11;
        android.view.DisplayAdjustments $r15;
        android.content.res.CompatibilityInfo $r16;
        android.content.res.Resources $r17, $r19;
        java.util.List $r18;
        boolean $z0, $z1, z2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.res.Configuration;

        if r1 == null goto label4;

        $r4 = new android.app.ContextImpl;

        $r11 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r10 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r9 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r8 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r7 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r6 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i1 = r0.<android.app.ContextImpl: int mFlags>;

        $r5 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        specialinvoke $r4.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r11, $r10, $r9, $r8, $r7, $r6, $i1, $r5, null);

        i0 = virtualinvoke r0.<android.app.ContextImpl: int getDisplayId()>();

        $r12 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r13 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r14 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r15 = virtualinvoke r0.<android.app.ContextImpl: android.view.DisplayAdjustments getDisplayAdjustments(int)>(i0);

        $r16 = virtualinvoke $r15.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r17 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r18 = virtualinvoke $r17.<android.content.res.Resources: java.util.List getLoaders()>();

        $r19 = staticinvoke <android.app.ContextImpl: android.content.res.Resources createResources(android.os.IBinder,android.app.LoadedApk,java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.List)>($r12, $r13, $r14, i0, r1, $r16, $r18);

        virtualinvoke $r4.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r19);

        $z0 = virtualinvoke r0.<android.app.ContextImpl: boolean isUiContext()>();

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<android.app.ContextImpl: boolean isOuterUiContext()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        $r4.<android.app.ContextImpl: boolean mIsUiContext> = z2;

        return $r4;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("overrideConfiguration must not be null");

        throw $r3;
    }

    public android.content.Context createContextAsUser(android.os.UserHandle, int)
    {
        android.app.ContextImpl r0;
        int i0;
        java.lang.String $r1, $r5, $r8;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r7;
        android.os.UserHandle r9;
        android.content.Context r10;

        r0 := @this: android.app.ContextImpl;

        r9 := @parameter0: android.os.UserHandle;

        i0 := @parameter1: int;

     label1:
        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        r10 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r1, i0, r9);

     label2:
        return r10;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Own package not found: package=");

        $r5 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public android.content.Context createContextForSplit(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ContextImpl r0, $r7;
        java.lang.ClassLoader r1;
        java.lang.String[] r2, $r18, $r22;
        int i0, $i1;
        android.app.LoadedApk $r3, $r5, $r6, $r11, $r14, $r17, $r19, $r21;
        android.content.pm.ApplicationInfo $r4, $r20;
        boolean $z0;
        android.os.UserHandle $r8;
        android.os.IBinder $r9, $r15;
        java.lang.String $r10, $r16, r27;
        android.app.ActivityThread $r12;
        android.app.ResourcesManager $r13;
        android.content.res.CompatibilityInfo $r23;
        android.content.res.Resources $r24, $r26;
        java.util.List $r25;

        r0 := @this: android.app.ContextImpl;

        r27 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r4 = virtualinvoke $r3.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $z0 = virtualinvoke $r4.<android.content.pm.ApplicationInfo: boolean requestsIsolatedSplitLoading()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r5 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r1 = virtualinvoke $r5.<android.app.LoadedApk: java.lang.ClassLoader getSplitClassLoader(java.lang.String)>(r27);

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r2 = virtualinvoke $r6.<android.app.LoadedApk: java.lang.String[] getSplitPaths(java.lang.String)>(r27);

        $r7 = new android.app.ContextImpl;

        $r12 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r11 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r10 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r9 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r8 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i1 = r0.<android.app.ContextImpl: int mFlags>;

        specialinvoke $r7.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r12, $r11, $r10, r27, $r9, $r8, $i1, r1, null);

        i0 = virtualinvoke r0.<android.app.ContextImpl: int getDisplayId()>();

        $r13 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        $r15 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r14 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r16 = virtualinvoke $r14.<android.app.LoadedApk: java.lang.String getResDir()>();

        $r17 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r18 = virtualinvoke $r17.<android.app.LoadedApk: java.lang.String[] getOverlayDirs()>();

        $r19 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r20 = virtualinvoke $r19.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r22 = $r20.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r21 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r23 = virtualinvoke $r21.<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r24 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r25 = virtualinvoke $r24.<android.content.res.Resources: java.util.List getLoaders()>();

        $r26 = virtualinvoke $r13.<android.app.ResourcesManager: android.content.res.Resources getResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader,java.util.List)>($r15, $r16, r2, $r18, $r22, i0, null, $r23, r1, $r25);

        virtualinvoke $r7.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r26);

        return $r7;
    }

    public android.content.Context createCredentialProtectedStorageContext()
    {
        android.app.ContextImpl r0, $r1;
        int i0, $i1, $i2;
        java.lang.ClassLoader $r2;
        android.os.UserHandle $r3;
        android.os.IBinder $r4;
        java.lang.String $r5, $r6;
        android.app.LoadedApk $r7;
        android.app.ActivityThread $r8;

        r0 := @this: android.app.ContextImpl;

        i0 = r0.<android.app.ContextImpl: int mFlags>;

        $r1 = new android.app.ContextImpl;

        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r6 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r5 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r4 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r3 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i1 = i0 & -9;

        $i2 = $i1 | 16;

        $r2 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        specialinvoke $r1.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r8, $r7, $r6, $r5, $r4, $r3, $i2, $r2, null);

        return $r1;
    }

    public android.content.Context createDeviceProtectedStorageContext()
    {
        android.app.ContextImpl r0, $r1;
        int i0, $i1, $i2;
        java.lang.ClassLoader $r2;
        android.os.UserHandle $r3;
        android.os.IBinder $r4;
        java.lang.String $r5, $r6;
        android.app.LoadedApk $r7;
        android.app.ActivityThread $r8;

        r0 := @this: android.app.ContextImpl;

        i0 = r0.<android.app.ContextImpl: int mFlags>;

        $r1 = new android.app.ContextImpl;

        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r6 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r5 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r4 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r3 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i1 = i0 & -17;

        $i2 = $i1 | 8;

        $r2 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        specialinvoke $r1.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r8, $r7, $r6, $r5, $r4, $r3, $i2, $r2, null);

        return $r1;
    }

    public android.content.Context createDisplayContext(android.view.Display)
    {
        android.app.ContextImpl r0, $r4;
        android.view.Display r1;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.ClassLoader $r5;
        android.os.UserHandle $r6;
        android.os.IBinder $r7, $r12;
        java.lang.String $r8, $r9, $r14;
        android.app.LoadedApk $r10, $r13;
        android.app.ActivityThread $r11;
        android.view.DisplayAdjustments $r15;
        android.content.res.CompatibilityInfo $r16;
        android.content.res.Resources $r17, $r19;
        java.util.List $r18;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.view.Display;

        if r1 == null goto label1;

        $r4 = new android.app.ContextImpl;

        $r11 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r10 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r9 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r8 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r7 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r6 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i1 = r0.<android.app.ContextImpl: int mFlags>;

        $r5 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        specialinvoke $r4.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r11, $r10, $r9, $r8, $r7, $r6, $i1, $r5, null);

        i0 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        $r12 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r13 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r14 = r0.<android.app.ContextImpl: java.lang.String mSplitName>;

        $r15 = virtualinvoke r0.<android.app.ContextImpl: android.view.DisplayAdjustments getDisplayAdjustments(int)>(i0);

        $r16 = virtualinvoke $r15.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r17 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r18 = virtualinvoke $r17.<android.content.res.Resources: java.util.List getLoaders()>();

        $r19 = staticinvoke <android.app.ContextImpl: android.content.res.Resources createResources(android.os.IBinder,android.app.LoadedApk,java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.List)>($r12, $r13, $r14, i0, null, $r16, $r18);

        virtualinvoke $r4.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r19);

        $r4.<android.app.ContextImpl: android.view.Display mDisplay> = r1;

        $r4.<android.app.ContextImpl: boolean mIsAssociatedWithDisplay> = 1;

        return $r4;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("display must not be null");

        throw $r3;
    }

    public android.content.Context createPackageContext(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0;
        android.os.UserHandle $r2;
        android.content.Context $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>(r1, i0, $r2);

        return $r3;
    }

    public android.content.Context createPackageContextAsUser(java.lang.String, int, android.os.UserHandle) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ContextImpl r0, $r3, $r17;
        java.lang.String r1, $r5, $r16, $r19;
        android.app.LoadedApk r2, $r6;
        boolean $z0, $z1;
        android.os.IBinder $r4, $r18, $r21;
        android.app.ActivityThread $r7, $r9, $r20;
        android.content.res.Resources $r8, $r24, $r25;
        android.content.res.CompatibilityInfo $r10, $r23;
        int $i0, $i1, i2, i3;
        java.lang.StringBuilder $r11;
        android.content.pm.PackageManager$NameNotFoundException $r15;
        android.view.DisplayAdjustments $r22;
        android.os.UserHandle r26;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r26 := @parameter2: android.os.UserHandle;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("system");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z1 == 0 goto label1;

        goto label3;

     label1:
        $r9 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r10 = virtualinvoke $r8.<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $i0 = i2 | 1073741824;

        $i1 = virtualinvoke r26.<android.os.UserHandle: int getIdentifier()>();

        r2 = virtualinvoke $r9.<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int,int)>(r1, $r10, $i0, $i1);

        if r2 == null goto label2;

        $r17 = new android.app.ContextImpl;

        $r20 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r19 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r18 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        specialinvoke $r17.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r20, r2, $r19, null, $r18, r26, i2, null, null);

        i3 = virtualinvoke r0.<android.app.ContextImpl: int getDisplayId()>();

        $r21 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r22 = virtualinvoke r0.<android.app.ContextImpl: android.view.DisplayAdjustments getDisplayAdjustments(int)>(i3);

        $r23 = virtualinvoke $r22.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r24 = staticinvoke <android.app.ContextImpl: android.content.res.Resources createResources(android.os.IBinder,android.app.LoadedApk,java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.List)>($r21, r2, null, i3, null, $r23, null);

        virtualinvoke $r17.<android.app.ContextImpl: void setResources(android.content.res.Resources)>($r24);

        $r25 = $r17.<android.app.ContextImpl: android.content.res.Resources mResources>;

        if $r25 == null goto label2;

        return $r17;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r15 = new android.content.pm.PackageManager$NameNotFoundException;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label3:
        $r3 = new android.app.ContextImpl;

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r5 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        $r4 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        specialinvoke $r3.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,java.lang.String,java.lang.String,android.os.IBinder,android.os.UserHandle,int,java.lang.ClassLoader,java.lang.String)>(r0, $r7, $r6, $r5, null, $r4, r26, i2, null, null);

        return $r3;
    }

    public android.app.WindowContext createWindowContext(int, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        int i0;
        android.os.Bundle r1;
        android.view.Display $r2;
        java.lang.UnsupportedOperationException $r3;
        android.app.WindowContext $r4;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.view.Display getDisplay()>();

        if $r2 == null goto label1;

        $r4 = new android.app.WindowContext;

        specialinvoke $r4.<android.app.WindowContext: void <init>(android.content.Context,int,android.os.Bundle)>(r0, i0, r1);

        return $r4;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("WindowContext can only be created from other visual contexts, such as Activity or one created with Context#createDisplayContext(Display)");

        throw $r3;
    }

    public volatile android.content.Context createWindowContext(int, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        int i0;
        android.os.Bundle r1;
        android.app.WindowContext $r2;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.app.WindowContext createWindowContext(int,android.os.Bundle)>(i0, r1);

        return $r2;
    }

    android.content.res.Resources createWindowContextResources()
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.lang.String[] r2, r3, r4;
        int i0;
        java.util.List r5;
        android.app.LoadedApk $r6, $r7, $r8, $r9, $r16;
        android.content.pm.ApplicationInfo $r10;
        android.content.res.Resources $r11, $r15;
        java.lang.ClassLoader $r12;
        android.os.IBinder $r13;
        android.app.ResourcesManager $r14;
        android.content.res.CompatibilityInfo r17;

        r0 := @this: android.app.ContextImpl;

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r1 = virtualinvoke $r6.<android.app.LoadedApk: java.lang.String getResDir()>();

        $r7 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r2 = virtualinvoke $r7.<android.app.LoadedApk: java.lang.String[] getSplitResDirs()>();

        $r8 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r3 = virtualinvoke $r8.<android.app.LoadedApk: java.lang.String[] getOverlayDirs()>();

        $r9 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r10 = virtualinvoke $r9.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r4 = $r10.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        i0 = virtualinvoke r0.<android.app.ContextImpl: int getDisplayId()>();

        if i0 != 0 goto label1;

        $r16 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r17 = virtualinvoke $r16.<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        goto label2;

     label1:
        r17 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

     label2:
        $r11 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        r5 = virtualinvoke $r11.<android.content.res.Resources: java.util.List getLoaders()>();

        $r14 = r0.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r13 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        $r12 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        $r15 = virtualinvoke $r14.<android.app.ResourcesManager: android.content.res.Resources createBaseTokenResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader,java.util.List)>($r13, r1, r2, r3, r4, i0, null, r17, $r12, r5);

        return $r15;
    }

    public java.lang.String[] databaseList()
    {
        android.app.ContextImpl r0;
        java.io.File $r1;
        java.lang.String[] $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDatabasesDir()>();

        $r2 = staticinvoke <android.os.FileUtils: java.lang.String[] listOrEmpty(java.io.File)>($r1);

        return $r2;
    }

    public boolean deleteDatabase(java.lang.String)
    {
        android.app.ContextImpl r0;
        boolean z0;
        java.io.File $r1;
        java.lang.Exception $r2;
        java.lang.String r3;

        r0 := @this: android.app.ContextImpl;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)>(r3);

        z0 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>($r1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean deleteFile(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File $r2, $r3;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        $r3 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean delete()>();

        return $z0;
    }

    public boolean deleteSharedPreferences(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.io.File r1, r6;
        android.util.ArrayMap $r2;
        boolean $z2, $z3, z4;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: android.app.ContextImpl;

        r5 := @parameter0: java.lang.String;

        entermonitor class "Landroid/app/ContextImpl;";

     label1:
        r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getSharedPreferencesPath(java.lang.String)>(r5);

        r6 = staticinvoke <android.app.SharedPreferencesImpl: java.io.File makeBackupFile(java.io.File)>(r1);

        $r2 = specialinvoke r0.<android.app.ContextImpl: android.util.ArrayMap getSharedPreferencesCacheLocked()>();

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r1.<java.io.File: boolean delete()>();

        virtualinvoke r6.<java.io.File: boolean delete()>();

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r6.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label3;

     label2:
        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        exitmonitor class "Landroid/app/ContextImpl;";

     label5:
        return z4;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor class "Landroid/app/ContextImpl;";

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        int $i0, $i1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)>(r1, $i0, 1, $i1, r2);

        return;
    }

    public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, $i1, $i2;
        java.lang.String r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, i0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i0, $i1, 1, $i2, r1, r2);

        return;
    }

    public void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        int $i0, $i1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingPermission(java.lang.String)>(r1);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)>(r1, $i0, 0, $i1, r2);

        return;
    }

    public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, $i1, $i2;
        java.lang.String r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingUriPermission(android.net.Uri,int)>(r1, i0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i0, $i1, 0, $i2, r1, r2);

        return;
    }

    public void enforcePermission(java.lang.String, int, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r1, i0, i1);

        specialinvoke r0.<android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)>(r1, $i2, 0, i1, r2);

        return;
    }

    public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, i1, i2, $i3;
        java.lang.String r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, i0, i1, i2);

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i2, $i3, 0, i1, r1, r2);

        return;
    }

    public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        java.lang.String r2, r3, r4;
        int i0, i1, i2, $i3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: java.lang.String;

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>(r1, r2, r3, i0, i1, i2);

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i2, $i3, 0, i1, r1, r4);

        return;
    }

    public java.lang.String[] fileList()
    {
        android.app.ContextImpl r0;
        java.io.File $r1;
        java.lang.String[] $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        $r2 = staticinvoke <android.os.FileUtils: java.lang.String[] listOrEmpty(java.io.File)>($r1);

        return $r2;
    }

    public android.os.IBinder getActivityToken()
    {
        android.app.ContextImpl r0;
        android.os.IBinder $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.os.IBinder mToken>;

        return $r1;
    }

    public android.content.Context getApplicationContext()
    {
        android.app.ContextImpl r0;
        android.app.ActivityThread $r1;
        android.app.LoadedApk r2;
        android.app.Application r3;

        r0 := @this: android.app.ContextImpl;

        r2 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<android.app.LoadedApk: android.app.Application getApplication()>();

        goto label2;

     label1:
        $r1 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r3 = virtualinvoke $r1.<android.app.ActivityThread: android.app.Application getApplication()>();

     label2:
        return r3;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk r1;
        java.lang.RuntimeException $r2;
        android.content.pm.ApplicationInfo $r3;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        return $r3;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;
    }

    public android.content.res.AssetManager getAssets()
    {
        android.app.ContextImpl r0;
        android.content.res.Resources $r1;
        android.content.res.AssetManager $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        return $r2;
    }

    public java.lang.String getAttributionTag()
    {
        android.app.ContextImpl r0;
        java.lang.String $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: java.lang.String mAttributionTag>;

        return $r1;
    }

    public android.view.autofill.AutofillManager$AutofillClient getAutofillClient()
    {
        android.app.ContextImpl r0;
        android.view.autofill.AutofillManager$AutofillClient $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.view.autofill.AutofillManager$AutofillClient mAutofillClient>;

        return $r1;
    }

    public android.content.AutofillOptions getAutofillOptions()
    {
        android.app.ContextImpl r0;
        android.content.AutofillOptions $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.AutofillOptions mAutofillOptions>;

        return $r1;
    }

    public java.lang.String getBasePackageName()
    {
        android.app.ContextImpl r0;
        java.lang.String r1;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

     label2:
        return r1;
    }

    public java.io.File getCacheDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.io.File $r2, $r3, $r4, r6, r7;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ContextImpl: java.io.File mCacheDir>;

        if $r2 != null goto label2;

        r6 = new java.io.File;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        specialinvoke r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "cache");

        r0.<android.app.ContextImpl: java.io.File mCacheDir> = r6;

     label2:
        $r3 = r0.<android.app.ContextImpl: java.io.File mCacheDir>;

        r7 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateCacheDirExists(java.io.File,java.lang.String)>($r3, "user.inode_cache");

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        android.app.ContextImpl r0;
        java.lang.ClassLoader r1;
        android.app.LoadedApk r2;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.ClassLoader mClassLoader>;

        if r1 == null goto label1;

        goto label3;

     label1:
        r2 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r2 == null goto label2;

        r1 = virtualinvoke r2.<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>();

        goto label3;

     label2:
        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label3:
        return r1;
    }

    public java.io.File getCodeCacheDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.io.File $r2, $r3, $r4, $r5, r7;
        java.lang.Throwable $r6;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ContextImpl: java.io.File mCodeCacheDir>;

        if $r2 != null goto label2;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        $r5 = staticinvoke <android.app.ContextImpl: java.io.File getCodeCacheDirBeforeBind(java.io.File)>($r4);

        r0.<android.app.ContextImpl: java.io.File mCodeCacheDir> = $r5;

     label2:
        $r3 = r0.<android.app.ContextImpl: java.io.File mCodeCacheDir>;

        r7 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateCacheDirExists(java.io.File,java.lang.String)>($r3, "user.inode_code_cache");

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.ContentCaptureOptions getContentCaptureOptions()
    {
        android.app.ContextImpl r0;
        android.content.ContentCaptureOptions $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.ContentCaptureOptions mContentCaptureOptions>;

        return $r1;
    }

    public android.content.ContentResolver getContentResolver()
    {
        android.app.ContextImpl r0;
        android.app.ContextImpl$ApplicationContentResolver $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.ContextImpl$ApplicationContentResolver mContentResolver>;

        return $r1;
    }

    public java.io.File getCrateDir(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.nio.file.Path r1, $r3, $r4, $r5, r14;
        boolean $z0;
        java.io.File $r2, $r6, $r7, $r9, $r10, $r11;
        java.lang.Throwable $r12;
        java.lang.String r13;
        java.lang.Object r15;

        r0 := @this: android.app.ContextImpl;

        r13 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r13);

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "invalidated crateId");

        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.nio.file.Path toPath()>();

        r14 = interfaceinvoke $r3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("crates");

        $r4 = interfaceinvoke r14.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(r13);

        $r5 = interfaceinvoke $r4.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        r1 = interfaceinvoke $r5.<java.nio.file.Path: java.nio.file.Path normalize()>();

        r15 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r15;

     label1:
        $r6 = r0.<android.app.ContextImpl: java.io.File mCratesDir>;

        if $r6 != null goto label2;

        $r11 = interfaceinvoke r14.<java.nio.file.Path: java.io.File toFile()>();

        r0.<android.app.ContextImpl: java.io.File mCratesDir> = $r11;

     label2:
        $r7 = r0.<android.app.ContextImpl: java.io.File mCratesDir>;

        staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File)>($r7);

        exitmonitor r15;

     label3:
        $r9 = interfaceinvoke r1.<java.nio.file.Path: java.io.File toFile()>();

        $r10 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File)>($r9);

        return $r10;

     label4:
        $r12 := @caughtexception;

     label5:
        exitmonitor r15;

     label6:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.io.File getDataDir()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r2, $r9, $r22, $r23;
        java.lang.StringBuilder $r3, $r10, $r16;
        java.lang.String $r5, $r8, $r12, $r15, $r18, $r20;
        java.lang.RuntimeException $r7, $r14;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.Throwable $r21;
        java.io.File r24;

        r0 := @this: android.app.ContextImpl;

        $r2 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r2 == null goto label6;

        $z0 = virtualinvoke r0.<android.app.ContextImpl: boolean isCredentialProtectedStorage()>();

        if $z0 == 0 goto label1;

        $r23 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r24 = virtualinvoke $r23.<android.app.LoadedApk: java.io.File getCredentialProtectedDataDirFile()>();

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<android.app.ContextImpl: boolean isDeviceProtectedStorage()>();

        if $z1 == 0 goto label2;

        $r22 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r24 = virtualinvoke $r22.<android.app.LoadedApk: java.io.File getDeviceProtectedDataDirFile()>();

        goto label3;

     label2:
        $r9 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        r24 = virtualinvoke $r9.<android.app.LoadedApk: java.io.File getDataDirFile()>();

     label3:
        if r24 == null goto label5;

        $z2 = virtualinvoke r24.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label4;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != 1000 goto label4;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data directory doesn\'t exist for package ");

        $r18 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new java.lang.Throwable;

        specialinvoke $r21.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("ContextImpl", $r20, $r21);

     label4:
        return r24;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No data directory found for package ");

        $r12 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new java.lang.RuntimeException;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No package details found for package ");

        $r5 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public java.io.File getDatabasePath(java.lang.String)
    {
        android.app.ContextImpl r0;
        char $c0, $c1, $c2, $c4;
        java.io.File $r2, $r3, $r5, r9;
        int $i3, $i5;
        java.lang.String $r4, $r6, $r7, r8;
        boolean $z0, $z1;

        r0 := @this: android.app.ContextImpl;

        r8 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r8.<java.lang.String: char charAt(int)>(0);

        $c1 = <java.io.File: char separatorChar>;

        if $c0 != $c1 goto label2;

        $r3 = new java.io.File;

        $c2 = <java.io.File: char separatorChar>;

        $i3 = virtualinvoke r8.<java.lang.String: int lastIndexOf(int)>($c2);

        $r4 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $r5 = new java.io.File;

        $c4 = <java.io.File: char separatorChar>;

        $i5 = virtualinvoke r8.<java.lang.String: int lastIndexOf(int)>($c4);

        $r6 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i5);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r6);

        r9 = $r5;

        $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r3.<java.io.File: boolean mkdir()>();

        if $z1 == 0 goto label1;

        $r7 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r7, 505, -1, -1);

     label1:
        goto label3;

     label2:
        $r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDatabasesDir()>();

        r9 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, r8);

     label3:
        return r9;
    }

    public java.io.File getDir(java.lang.String, int)
    {
        android.app.ContextImpl r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.io.File $r5, r9;
        boolean $z0;
        java.lang.String $r6, r7, r8;

        r0 := @this: android.app.ContextImpl;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.ContextImpl: void checkMode(int)>(i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        r9 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r5, r8);

        $z0 = virtualinvoke r9.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r9.<java.io.File: boolean mkdir()>();

        $r6 = virtualinvoke r9.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r6, i0, 505);

     label1:
        return r9;
    }

    public android.view.Display getDisplay()
    {
        android.app.ContextImpl r0;
        boolean $z0, $z1;
        android.view.Display $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.app.ContextImpl;

        $z0 = r0.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext>;

        if $z0 != 0 goto label2;

        $z1 = r0.<android.app.ContextImpl: boolean mIsAssociatedWithDisplay>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Tried to obtain display from a Context not associated with  one. Only visual Contexts (such as Activity or one created with Context#createWindowContext) or ones created with Context#createDisplayContext are associated with displays. Other types of Contexts are typically related to background entities and may return an arbitrary display.");

        throw $r2;

     label2:
        $r1 = virtualinvoke r0.<android.app.ContextImpl: android.view.Display getDisplayNoVerify()>();

        return $r1;
    }

    public android.view.DisplayAdjustments getDisplayAdjustments(int)
    {
        android.app.ContextImpl r0;
        int i0;
        android.content.res.Resources $r1;
        android.view.DisplayAdjustments $r2;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.view.DisplayAdjustments getDisplayAdjustments()>();

        return $r2;
    }

    public int getDisplayId()
    {
        android.app.ContextImpl r0;
        android.view.Display r1;
        int i0;

        r0 := @this: android.app.ContextImpl;

        r1 = virtualinvoke r0.<android.app.ContextImpl: android.view.Display getDisplayNoVerify()>();

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    public android.view.Display getDisplayNoVerify()
    {
        android.app.ContextImpl r0;
        android.view.Display r1, $r4;
        android.content.res.Resources $r2;
        android.app.ResourcesManager $r3;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        if r1 != null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r2 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r4 = virtualinvoke $r3.<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.content.res.Resources)>(0, $r2);

        return $r4;

     label1:
        return r1;
    }

    public java.io.File getExternalCacheDir()
    {
        android.app.ContextImpl r0;
        int $i0;
        java.io.File[] r1;
        java.io.File r2;

        r0 := @this: android.app.ContextImpl;

        r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File[] getExternalCacheDirs()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        r2 = r1[0];

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public java.io.File[] getExternalCacheDirs()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.lang.String $r2;
        java.io.File[] $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)>($r2);

        r5 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureExternalDirsExistOrFilter(java.io.File[],boolean)>($r3, 0);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.io.File getExternalFilesDir(java.lang.String)
    {
        android.app.ContextImpl r0;
        int $i0;
        java.lang.String r1;
        java.io.File[] r2;
        java.io.File r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.app.ContextImpl: java.io.File[] getExternalFilesDirs(java.lang.String)>(r1);

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 <= 0 goto label1;

        r3 = r2[0];

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public java.io.File[] getExternalFilesDirs(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.io.File[] r2, r7, r8;
        java.lang.String $r3, r6;
        java.lang.String[] $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ContextImpl;

        r6 := @parameter0: java.lang.String;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        r2 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)>($r3);

     label2:
        r7 = r2;

        if r6 == null goto label4;

     label3:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r6;

        r7 = staticinvoke <android.os.Environment: java.io.File[] buildPaths(java.io.File[],java.lang.String[])>(r2, $r4);

     label4:
        r8 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureExternalDirsExistOrFilter(java.io.File[],boolean)>(r7, 1);

        exitmonitor r1;

     label5:
        return r8;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.io.File[] getExternalMediaDirs()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.lang.String $r2;
        java.io.File[] $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)>($r2);

        r5 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureExternalDirsExistOrFilter(java.io.File[],boolean)>($r3, 1);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.io.File getFileStreamPath(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File $r2, $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        $r3 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, r1);

        return $r3;
    }

    public java.io.File getFilesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.io.File $r2, $r3, $r4, r6, r7;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ContextImpl: java.io.File mFilesDir>;

        if $r2 != null goto label2;

        r6 = new java.io.File;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        specialinvoke r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "files");

        r0.<android.app.ContextImpl: java.io.File mFilesDir> = r6;

     label2:
        $r3 = r0.<android.app.ContextImpl: java.io.File mFilesDir>;

        r7 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File)>($r3);

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.app.IApplicationThread getIApplicationThread()
    {
        android.app.ContextImpl r0;
        android.app.ActivityThread $r1;
        android.app.ActivityThread$ApplicationThread $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        return $r2;
    }

    public java.util.concurrent.Executor getMainExecutor()
    {
        android.app.ContextImpl r0;
        android.app.ActivityThread $r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: java.util.concurrent.Executor getExecutor()>();

        return $r2;
    }

    public android.os.Looper getMainLooper()
    {
        android.app.ContextImpl r0;
        android.app.ActivityThread $r1;
        android.os.Looper $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.os.Looper getLooper()>();

        return $r2;
    }

    public android.os.Handler getMainThreadHandler()
    {
        android.app.ContextImpl r0;
        android.app.ActivityThread $r1;
        android.os.Handler $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.os.Handler getHandler()>();

        return $r2;
    }

    public java.io.File getNoBackupFilesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.io.File $r2, $r3, $r4, r6, r7;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ContextImpl: java.io.File mNoBackupFilesDir>;

        if $r2 != null goto label2;

        r6 = new java.io.File;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDataDir()>();

        specialinvoke r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "no_backup");

        r0.<android.app.ContextImpl: java.io.File mNoBackupFilesDir> = r6;

     label2:
        $r3 = r0.<android.app.ContextImpl: java.io.File mNoBackupFilesDir>;

        r7 = staticinvoke <android.app.ContextImpl: java.io.File ensurePrivateDirExists(java.io.File)>($r3);

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.io.File getObbDir()
    {
        android.app.ContextImpl r0;
        int $i0;
        java.io.File[] r1;
        java.io.File r2;

        r0 := @this: android.app.ContextImpl;

        r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File[] getObbDirs()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        r2 = r1[0];

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public java.io.File[] getObbDirs()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        java.lang.String $r2;
        java.io.File[] $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)>($r2);

        r5 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureExternalDirsExistOrFilter(java.io.File[],boolean)>($r3, 1);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getOpPackageName()
    {
        android.app.ContextImpl r0;
        java.lang.String r1;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.String mOpPackageName>;

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getBasePackageName()>();

     label2:
        return r1;
    }

    final android.content.Context getOuterContext()
    {
        android.app.ContextImpl r0;
        android.content.Context $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.Context mOuterContext>;

        return $r1;
    }

    public java.lang.String getPackageCodePath()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk r1;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.app.LoadedApk: java.lang.String getAppDir()>();

        return $r3;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;
    }

    public android.content.pm.PackageManager getPackageManager()
    {
        android.app.ContextImpl r0;
        android.permission.IPermissionManager r1;
        android.app.ApplicationPackageManager $r2;
        android.content.pm.PackageManager r3;
        android.content.pm.IPackageManager r4;

        r0 := @this: android.app.ContextImpl;

        r3 = r0.<android.app.ContextImpl: android.content.pm.PackageManager mPackageManager>;

        if r3 == null goto label1;

        return r3;

     label1:
        r4 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        r1 = staticinvoke <android.app.ActivityThread: android.permission.IPermissionManager getPermissionManager()>();

        if r4 == null goto label2;

        if r1 == null goto label2;

        $r2 = new android.app.ApplicationPackageManager;

        specialinvoke $r2.<android.app.ApplicationPackageManager: void <init>(android.app.ContextImpl,android.content.pm.IPackageManager,android.permission.IPermissionManager)>(r0, r4, r1);

        r0.<android.app.ContextImpl: android.content.pm.PackageManager mPackageManager> = $r2;

        return $r2;

     label2:
        return null;
    }

    public java.lang.String getPackageName()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk r1;
        java.lang.String $r2;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.app.LoadedApk: java.lang.String getPackageName()>();

        return $r2;

     label1:
        return "android";
    }

    public java.lang.String getPackageResourcePath()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk r1;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.app.LoadedApk: java.lang.String getResDir()>();

        return $r3;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;
    }

    public java.io.File getPreloadsFileCache()
    {
        android.app.ContextImpl r0;
        java.lang.String $r1;
        java.io.File $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataPreloadsFileCacheDirectory(java.lang.String)>($r1);

        return $r2;
    }

    final android.content.Context getReceiverRestrictedContext()
    {
        android.app.ContextImpl r0;
        android.app.ReceiverRestrictedContext $r1;
        android.content.Context $r2, r3;

        r0 := @this: android.app.ContextImpl;

        r3 = r0.<android.app.ContextImpl: android.content.Context mReceiverRestrictedContext>;

        if r3 == null goto label1;

        return r3;

     label1:
        $r1 = new android.app.ReceiverRestrictedContext;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r1.<android.app.ReceiverRestrictedContext: void <init>(android.content.Context)>($r2);

        r0.<android.app.ContextImpl: android.content.Context mReceiverRestrictedContext> = $r1;

        return $r1;
    }

    public android.content.res.Resources getResources()
    {
        android.app.ContextImpl r0;
        android.content.res.Resources $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        return $r1;
    }

    public android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection, android.os.Handler, int)
    {
        android.app.ContextImpl r0;
        android.content.ServiceConnection r1;
        android.os.Handler r2;
        int i0;
        android.app.LoadedApk $r3;
        android.content.Context $r4;
        android.app.IServiceConnection $r5;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.ServiceConnection;

        r2 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r5 = virtualinvoke $r3.<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>(r1, $r4, r2, i0);

        return $r5;
    }

    public android.content.SharedPreferences getSharedPreferences(java.io.File, int)
    {
        android.app.ContextImpl r0;
        int i0, $i1, $i2, $i3, $i4;
        android.util.ArrayMap r1;
        java.lang.Object $r2, $r6;
        android.content.pm.ApplicationInfo $r3, $r4;
        boolean $z0, $z1;
        android.os.UserManager $r7;
        java.lang.Throwable $r8;
        java.io.File r9;
        android.app.SharedPreferencesImpl r10, r12;
        java.lang.IllegalStateException r11;

        r0 := @this: android.app.ContextImpl;

        r9 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        entermonitor class "Landroid/app/ContextImpl;";

     label01:
        r1 = specialinvoke r0.<android.app.ContextImpl: android.util.ArrayMap getSharedPreferencesCacheLocked()>();

        $r2 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        r10 = (android.app.SharedPreferencesImpl) $r2;

     label02:
        if r10 != null goto label08;

     label03:
        specialinvoke r0.<android.app.ContextImpl: void checkMode(int)>(i0);

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i3 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 < 26 goto label06;

        $z0 = virtualinvoke r0.<android.app.ContextImpl: boolean isCredentialProtectedStorage()>();

        if $z0 == 0 goto label06;

        $r6 = virtualinvoke r0.<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r7 = (android.os.UserManager) $r6;

        $i4 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z1 = virtualinvoke $r7.<android.os.UserManager: boolean isUserUnlockingOrUnlocked(int)>($i4);

        if $z1 == 0 goto label05;

     label04:
        goto label06;

     label05:
        r11 = new java.lang.IllegalStateException;

        specialinvoke r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SharedPreferences in credential encrypted storage are not available until after user is unlocked");

        throw r11;

     label06:
        r12 = new android.app.SharedPreferencesImpl;

        specialinvoke r12.<android.app.SharedPreferencesImpl: void <init>(java.io.File,int)>(r9, i0);

        virtualinvoke r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r12);

        exitmonitor class "Landroid/app/ContextImpl;";

     label07:
        return r12;

     label08:
        exitmonitor class "Landroid/app/ContextImpl;";

     label09:
        $i1 = i0 & 4;

        if $i1 != 0 goto label10;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 >= 11 goto label11;

     label10:
        virtualinvoke r10.<android.app.SharedPreferencesImpl: void startReloadIfChangedUnexpectedly()>();

     label11:
        return r10;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor class "Landroid/app/ContextImpl;";

     label14:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public android.content.SharedPreferences getSharedPreferences(java.lang.String, int)
    {
        android.app.ContextImpl r0;
        int i0, $i1;
        java.io.File r1, r14;
        android.app.LoadedApk $r2;
        android.content.pm.ApplicationInfo $r3;
        android.util.ArrayMap $r4, $r7, $r12, r13;
        java.lang.Object $r5;
        android.content.SharedPreferences $r6;
        java.lang.Throwable $r9;
        java.lang.String r10, r11;

        r0 := @this: android.app.ContextImpl;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r11 = r10;

        $r2 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r3 = virtualinvoke $r2.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 >= 19 goto label01;

        r11 = r10;

        if r10 != null goto label01;

        r11 = "null";

     label01:
        entermonitor class "Landroid/app/ContextImpl;";

     label02:
        $r12 = r0.<android.app.ContextImpl: android.util.ArrayMap mSharedPrefsPaths>;

        if $r12 != null goto label03;

        r13 = new android.util.ArrayMap;

        specialinvoke r13.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.ContextImpl: android.util.ArrayMap mSharedPrefsPaths> = r13;

     label03:
        $r4 = r0.<android.app.ContextImpl: android.util.ArrayMap mSharedPrefsPaths>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r1 = (java.io.File) $r5;

     label04:
        r14 = r1;

        if r1 != null goto label06;

     label05:
        r14 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getSharedPreferencesPath(java.lang.String)>(r11);

        $r7 = r0.<android.app.ContextImpl: android.util.ArrayMap mSharedPrefsPaths>;

        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r14);

     label06:
        exitmonitor class "Landroid/app/ContextImpl;";

     label07:
        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.io.File,int)>(r14, i0);

        return $r6;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor class "Landroid/app/ContextImpl;";

     label10:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.io.File getSharedPreferencesPath(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r7;
        java.io.File r2, $r8;
        java.lang.StringBuilder $r4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File getPreferencesDir()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>(r2, $r7);

        return $r8;
    }

    public java.lang.Object getSystemService(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r6, $r16, r18;
        boolean $z0, $z1, $z2, z3, $z4;
        java.lang.StringBuilder $r4, $r12;
        android.content.Context $r9;
        java.lang.IllegalAccessException $r11;
        java.lang.Object $r19;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.os.StrictMode: boolean vmIncorrectContextUseEnabled()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<android.app.ContextImpl: boolean isUiContext()>();

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<android.app.ContextImpl: boolean isOuterUiContext()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        $z4 = staticinvoke <android.app.ContextImpl: boolean isUiComponent(java.lang.String)>(r1);

        if $z4 == 0 goto label4;

        if z3 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to access visual service ");

        $r6 = staticinvoke <android.app.SystemServiceRegistry: java.lang.String getSystemServiceClassName(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from a non-visual Context:");

        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        r18 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalAccessException;

        specialinvoke $r11.<java.lang.IllegalAccessException: void <init>(java.lang.String)>(r18);

        staticinvoke <android.os.StrictMode: void onIncorrectContextUsed(java.lang.String,java.lang.Throwable)>("Visual services, such as WindowManager, WallpaperService or LayoutInflater should be accessed from Activity or other visual Context. Use an Activity or a Context created with Context#createWindowContext(int, Bundle), which are adjusted to the configuration and visual bounds of an area on screen.", $r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Visual services, such as WindowManager, WallpaperService or LayoutInflater should be accessed from Activity or other visual Context. Use an Activity or a Context created with Context#createWindowContext(int, Bundle), which are adjusted to the configuration and visual bounds of an area on screen.");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ContextImpl", $r16, $r11);

     label4:
        $r19 = staticinvoke <android.app.SystemServiceRegistry: java.lang.Object getSystemService(android.app.ContextImpl,java.lang.String)>(r0, r1);

        return $r19;
    }

    public java.lang.String getSystemServiceName(java.lang.Class)
    {
        android.app.ContextImpl r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <android.app.SystemServiceRegistry: java.lang.String getSystemServiceName(java.lang.Class)>(r1);

        return $r2;
    }

    public android.content.res.Resources$Theme getTheme()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        android.content.res.Resources$Theme $r2, r6, r7;
        int $i0, $i1, $i2;
        android.content.Context $r3;
        android.content.pm.ApplicationInfo $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        if $r2 == null goto label3;

        r6 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        exitmonitor r1;

     label2:
        return r6;

     label3:
        $i0 = r0.<android.app.ContextImpl: int mThemeResource>;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $i2 = staticinvoke <android.content.res.Resources: int selectDefaultTheme(int,int)>($i0, $i1);

        r0.<android.app.ContextImpl: int mThemeResource> = $i2;

        specialinvoke r0.<android.app.ContextImpl: void initializeTheme()>();

        r7 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        exitmonitor r1;

     label4:
        return r7;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int getThemeResId()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.app.ContextImpl;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        i0 = r0.<android.app.ContextImpl: int mThemeResource>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.os.UserHandle getUser()
    {
        android.app.ContextImpl r0;
        android.os.UserHandle $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        return $r1;
    }

    public int getUserId()
    {
        android.app.ContextImpl r0;
        android.os.UserHandle $r1;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i0 = virtualinvoke $r1.<android.os.UserHandle: int getIdentifier()>();

        return $i0;
    }

    public android.graphics.drawable.Drawable getWallpaper()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $r2 = virtualinvoke $r1.<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()>();

        return $r2;
    }

    public int getWallpaperDesiredMinimumHeight()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $i0 = virtualinvoke $r1.<android.app.WallpaperManager: int getDesiredMinimumHeight()>();

        return $i0;
    }

    public int getWallpaperDesiredMinimumWidth()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $i0 = virtualinvoke $r1.<android.app.WallpaperManager: int getDesiredMinimumWidth()>();

        return $i0;
    }

    public void grantUriPermission(java.lang.String, android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1, $r5;
        int i0, $i1;
        android.app.IActivityManager $r2;
        android.app.ActivityThread $r3;
        android.app.ActivityThread$ApplicationThread $r4;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.lang.String r8;

        r0 := @this: android.app.ContextImpl;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r5 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r1);

        $i1 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r1);

        interfaceinvoke $r2.<android.app.IActivityManager: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>($r4, r8, $r5, i0, $i1);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void installSystemApplicationInfo(android.content.pm.ApplicationInfo, java.lang.ClassLoader)
    {
        android.app.ContextImpl r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.ClassLoader r2;
        android.app.LoadedApk $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        virtualinvoke $r3.<android.app.LoadedApk: void installSystemApplicationInfo(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>(r1, r2);

        return;
    }

    public boolean isCredentialProtectedStorage()
    {
        android.app.ContextImpl r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.app.ContextImpl;

        $i0 = r0.<android.app.ContextImpl: int mFlags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDeviceProtectedStorage()
    {
        android.app.ContextImpl r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.app.ContextImpl;

        $i0 = r0.<android.app.ContextImpl: int mFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isRestricted()
    {
        android.app.ContextImpl r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.app.ContextImpl;

        $i0 = r0.<android.app.ContextImpl: int mFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isUiContext()
    {
        android.app.ContextImpl r0;
        boolean $z0, $z1, z2;

        r0 := @this: android.app.ContextImpl;

        $z0 = r0.<android.app.ContextImpl: boolean mIsSystemOrSystemUiContext>;

        if $z0 != 0 goto label2;

        $z1 = r0.<android.app.ContextImpl: boolean mIsUiContext>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean moveDatabaseFrom(android.content.Context, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.io.File $r1, $r2, r7, r8;
        java.lang.String $r3, r6;
        int $i0;
        java.lang.Throwable $r4;
        android.content.Context r5;
        boolean z0;

        r0 := @this: android.app.ContextImpl;

        r5 := @parameter0: android.content.Context;

        r6 := @parameter1: java.lang.String;

        entermonitor class "Landroid/app/ContextImpl;";

     label1:
        r7 = virtualinvoke r5.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(r6);

        r8 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)>(r6);

        $r1 = virtualinvoke r7.<java.io.File: java.io.File getParentFile()>();

        $r2 = virtualinvoke r8.<java.io.File: java.io.File getParentFile()>();

        $r3 = virtualinvoke r7.<java.io.File: java.lang.String getName()>();

        $i0 = staticinvoke <android.app.ContextImpl: int moveFiles(java.io.File,java.io.File,java.lang.String)>($r1, $r2, $r3);

        if $i0 == -1 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor class "Landroid/app/ContextImpl;";

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor class "Landroid/app/ContextImpl;";

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean moveSharedPreferencesFrom(android.content.Context, java.lang.String)
    {
        android.app.ContextImpl r0;
        int i0;
        android.util.ArrayMap r1;
        java.io.File $r2, $r3, r10, r11;
        java.lang.String $r4, r9;
        java.lang.Throwable $r7;
        android.content.Context r8;
        boolean z0;

        r0 := @this: android.app.ContextImpl;

        r8 := @parameter0: android.content.Context;

        r9 := @parameter1: java.lang.String;

        entermonitor class "Landroid/app/ContextImpl;";

     label01:
        r10 = virtualinvoke r8.<android.content.Context: java.io.File getSharedPreferencesPath(java.lang.String)>(r9);

        r11 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getSharedPreferencesPath(java.lang.String)>(r9);

        $r2 = virtualinvoke r10.<java.io.File: java.io.File getParentFile()>();

        $r3 = virtualinvoke r11.<java.io.File: java.io.File getParentFile()>();

        $r4 = virtualinvoke r10.<java.io.File: java.lang.String getName()>();

        i0 = staticinvoke <android.app.ContextImpl: int moveFiles(java.io.File,java.io.File,java.lang.String)>($r2, $r3, $r4);

     label02:
        if i0 <= 0 goto label04;

     label03:
        r1 = specialinvoke r0.<android.app.ContextImpl: android.util.ArrayMap getSharedPreferencesCacheLocked()>();

        virtualinvoke r1.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r10);

        virtualinvoke r1.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r11);

     label04:
        if i0 == -1 goto label05;

        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor class "Landroid/app/ContextImpl;";

     label07:
        return z0;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor class "Landroid/app/ContextImpl;";

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.io.FileInputStream openFileInput(java.lang.String) throws java.io.FileNotFoundException
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.FileInputStream $r2;
        java.io.File $r3, $r4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.FileInputStream;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        $r4 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r3, r1);

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        return $r2;
    }

    public java.io.FileOutputStream openFileOutput(java.lang.String, int) throws java.io.FileNotFoundException
    {
        android.app.ContextImpl r0;
        int i0, $i1;
        java.io.File $r1, r8, r11;
        java.lang.String $r2, $r4, $r6, r7;
        java.lang.Throwable $r3;
        java.io.FileOutputStream $r5, r9;
        boolean z1;

        r0 := @this: android.app.ContextImpl;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.ContextImpl: void checkMode(int)>(i0);

        $i1 = 32768 & i0;

        if $i1 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        r8 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r1, r7);

     label3:
        r9 = new java.io.FileOutputStream;

        specialinvoke r9.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r8, z1);

        $r2 = virtualinvoke r8.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r2, i0, 0);

     label4:
        return r9;

     label5:
        $r3 := @caughtexception;

        r11 = virtualinvoke r8.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke r11.<java.io.File: boolean mkdir()>();

        $r4 = virtualinvoke r11.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r4, 505, -1, -1);

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r8, z1);

        $r6 = virtualinvoke r8.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r6, i0, 0);

        return $r5;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>(r1, i0, r2, null);

        return $r3;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        android.app.ContextImpl r0;
        int i0, $i1, $i2, i3, i4;
        android.database.DatabaseErrorHandler r1;
        java.lang.String $r2, $r3, r4;
        android.database.sqlite.SQLiteDatabase$CursorFactory r5;
        java.io.File r6;
        android.database.sqlite.SQLiteDatabase r7;

        r0 := @this: android.app.ContextImpl;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r5 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r1 := @parameter3: android.database.DatabaseErrorHandler;

        specialinvoke r0.<android.app.ContextImpl: void checkMode(int)>(i0);

        r6 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)>(r4);

        i3 = 268435456;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        i3 = 268435456 | 536870912;

     label1:
        i4 = i3;

        $i2 = i0 & 16;

        if $i2 == 0 goto label2;

        i4 = i3 | 16;

     label2:
        $r2 = virtualinvoke r6.<java.io.File: java.lang.String getPath()>();

        r7 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>($r2, r5, i4, r1);

        $r3 = virtualinvoke r6.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r3, i0, 0);

        return r7;
    }

    public android.graphics.drawable.Drawable peekWallpaper()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $r2 = virtualinvoke $r1.<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()>();

        return $r2;
    }

    final void performFinalCleanup(java.lang.String, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        android.app.LoadedApk $r3;
        android.content.Context $r4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        virtualinvoke $r3.<android.app.LoadedApk: void removeContextRegistrations(android.content.Context,java.lang.String,java.lang.String)>($r4, r1, r2);

        return;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        android.content.Intent $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r1, r2, null, null);

        return $r3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, int)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        int i0;
        android.content.Intent $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>(r1, r2, null, null, i0);

        return $r3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.String r3;
        android.os.Handler r4;
        int $i0;
        android.content.Context $r5;
        android.content.Intent $r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Handler;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r6 = specialinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,int,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context,int)>(r1, $i0, r2, r3, r4, $r5, 0);

        return $r6;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler, int)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.String r3;
        android.os.Handler r4;
        int i0, $i1;
        android.content.Context $r5;
        android.content.Intent $r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r6 = specialinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,int,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context,int)>(r1, $i1, r2, r3, r4, $r5, i0);

        return $r6;
    }

    public android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.os.UserHandle r2;
        android.content.IntentFilter r3;
        java.lang.String r4;
        android.os.Handler r5;
        int $i0;
        android.content.Context $r6;
        android.content.Intent $r7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.content.IntentFilter;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.os.Handler;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r7 = specialinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,int,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context,int)>(r1, $i0, r3, r4, r5, $r6, 0);

        return $r7;
    }

    public android.content.Intent registerReceiverForAllUsers(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.String r3;
        android.os.Handler r4;
        android.os.UserHandle $r5;
        android.content.Intent $r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Handler;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r1, $r5, r2, r3, r4);

        return $r6;
    }

    public void reloadSharedPreferences()
    {
        android.app.ContextImpl r0;
        android.util.ArrayMap r1;
        android.app.SharedPreferencesImpl r2, $r5;
        java.util.ArrayList $r3;
        int $i0, $i1, i2, i3;
        java.lang.Object $r4, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.app.ContextImpl;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        entermonitor class "Landroid/app/ContextImpl;";

     label01:
        r1 = specialinvoke r0.<android.app.ContextImpl: android.util.ArrayMap getSharedPreferencesCacheLocked()>();

     label02:
        i2 = 0;

     label03:
        $i0 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label07;

        $r6 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        r2 = (android.app.SharedPreferencesImpl) $r6;

     label04:
        if r2 == null goto label06;

     label05:
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        exitmonitor class "Landroid/app/ContextImpl;";

     label08:
        i3 = 0;

     label09:
        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i3 >= $i1 goto label10;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r5 = (android.app.SharedPreferencesImpl) $r4;

        virtualinvoke $r5.<android.app.SharedPreferencesImpl: void startReloadIfChangedUnexpectedly()>();

        i3 = i3 + 1;

        goto label09;

     label10:
        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor class "Landroid/app/ContextImpl;";

     label13:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void removeStickyBroadcast(android.content.Intent)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        android.content.ContentResolver $r2;
        android.app.IActivityManager $r3;
        android.app.ActivityThread $r4;
        android.app.ActivityThread$ApplicationThread $r5;
        int $i0;
        android.content.Intent $r6, r11, r12;
        android.net.Uri $r7;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: android.app.ContextImpl;

        r11 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r1 = virtualinvoke r11.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

        r12 = r11;

        if r1 == null goto label1;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(android.content.Intent)>(r11);

        r12 = $r6;

        $r7 = virtualinvoke $r6.<android.content.Intent: android.net.Uri getData()>();

        virtualinvoke $r6.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r7, r1);

     label1:
        virtualinvoke r12.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>($r5, r12, $i0);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        java.lang.String r2;
        android.content.ContentResolver $r3;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        int $i0;
        android.content.Intent $r7, r12, r13;
        android.net.Uri $r8;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: android.app.ContextImpl;

        r12 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r12.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        r13 = r12;

        if r2 == null goto label1;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(android.content.Intent)>(r12);

        r13 = $r7;

        $r8 = virtualinvoke $r7.<android.content.Intent: android.net.Uri getData()>();

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r8, r2);

     label1:
        virtualinvoke r13.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>($r6, r13, $i0);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void revokeUriPermission(android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        int i0, $i1;
        android.app.IActivityManager $r1;
        android.app.ActivityThread $r2;
        android.app.ActivityThread$ApplicationThread $r3;
        android.net.Uri $r4, r7;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.ContextImpl;

        r7 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r3 = virtualinvoke $r2.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r4 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r7);

        $i1 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r7);

        interfaceinvoke $r1.<android.app.IActivityManager: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>($r3, null, $r4, i0, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void revokeUriPermission(java.lang.String, android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1, $r5;
        int i0, $i1;
        android.app.IActivityManager $r2;
        android.app.ActivityThread $r3;
        android.app.ActivityThread$ApplicationThread $r4;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.lang.String r8;

        r0 := @this: android.app.ContextImpl;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r5 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r1);

        $i1 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r1);

        interfaceinvoke $r2.<android.app.IActivityManager: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>($r4, r8, $r5, i0, $i1);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    final void scheduleFinalCleanup(java.lang.String, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        android.app.ActivityThread $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        virtualinvoke $r3.<android.app.ActivityThread: void scheduleContextCleanup(android.app.ContextImpl,java.lang.String,java.lang.String)>(r0, r1, r2);

        return;
    }

    public void sendBroadcast(android.content.Intent)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r6;
        android.content.ContentResolver $r2;
        android.app.IActivityManager $r3;
        android.app.ActivityThread $r4;
        android.app.ActivityThread$ApplicationThread $r5;
        int $i0;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.content.Intent r9;

        r0 := @this: android.app.ContextImpl;

        r9 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r1 = virtualinvoke r9.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

     label1:
        virtualinvoke r9.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r6 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r3.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r5, $r6, r9, r1, null, -1, null, null, null, -1, null, 0, 0, $i0);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r7, r11;
        android.content.ContentResolver $r2;
        java.lang.String[] $r3, r12;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        int $i0;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.Intent r10;

        r0 := @this: android.app.ContextImpl;

        r10 := @parameter0: android.content.Intent;

        r11 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r1 = virtualinvoke r10.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

        if r11 != null goto label1;

        r12 = null;

        goto label2;

     label1:
        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r11;

        r12 = $r3;

     label2:
        virtualinvoke r10.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r6, $r7, r10, r1, null, -1, null, null, r12, -1, null, 0, 0, $i0);

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String, int)
    {
        android.app.ContextImpl r0;
        int i0, $i1;
        java.lang.String r1, $r7, r11;
        android.content.ContentResolver $r2;
        java.lang.String[] $r3, r12;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.Intent r10;

        r0 := @this: android.app.ContextImpl;

        r10 := @parameter0: android.content.Intent;

        r11 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r1 = virtualinvoke r10.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

        if r11 != null goto label1;

        r12 = null;

        goto label2;

     label1:
        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r11;

        r12 = $r3;

     label2:
        virtualinvoke r10.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r6, $r7, r10, r1, null, -1, null, null, r12, i0, null, 0, 0, $i1);

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.os.Bundle r1;
        java.lang.String r2, $r8, r12;
        android.content.ContentResolver $r3;
        java.lang.String[] $r4, r13;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        int $i0;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.content.Intent r11;

        r0 := @this: android.app.ContextImpl;

        r11 := @parameter0: android.content.Intent;

        r12 := @parameter1: java.lang.String;

        r1 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r11.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        if r12 != null goto label1;

        r13 = null;

        goto label2;

     label1:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r12;

        r13 = $r4;

     label2:
        virtualinvoke r11.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r8 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r7, $r8, r11, r2, null, -1, null, null, r13, -1, r1, 0, 0, $i0);

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        java.lang.String r2, $r7;
        android.content.ContentResolver $r3;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        int $i0;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.Intent r10;

        r0 := @this: android.app.ContextImpl;

        r10 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r10.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

     label1:
        virtualinvoke r10.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r6, $r7, r10, r2, null, -1, null, null, null, -1, null, 0, 0, $i0);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<android.app.ContextImpl: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)>(r1, r2, r3, -1);

        return;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, int)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        int i0, $i1;
        java.lang.String r2, $r8, r12;
        android.content.ContentResolver $r3;
        java.lang.String[] $r4, r13;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.content.Intent r11;

        r0 := @this: android.app.ContextImpl;

        r11 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        r12 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r11.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        if r12 != null goto label1;

        r13 = null;

        goto label2;

     label1:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r12;

        r13 = $r4;

     label2:
        virtualinvoke r11.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r8 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r7, $r8, r11, r2, null, -1, null, null, r13, i0, null, 0, 0, $i1);

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        android.os.Bundle r2;
        java.lang.String r3, $r9, r13;
        android.content.ContentResolver $r4;
        java.lang.String[] $r5, r14;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        int $i0;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        android.content.Intent r12;

        r0 := @this: android.app.ContextImpl;

        r12 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        r13 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.Bundle;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r12.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

        if r13 != null goto label1;

        r14 = null;

        goto label2;

     label1:
        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r13;

        r14 = $r5;

     label2:
        virtualinvoke r12.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r6 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r9 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r6.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r8, $r9, r12, r3, null, -1, null, null, r14, -1, r2, 0, 0, $i0);

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void sendBroadcastAsUserMultiplePermissions(android.content.Intent, android.os.UserHandle, java.lang.String[])
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        java.lang.String[] r2;
        java.lang.String r3, $r8;
        android.content.ContentResolver $r4;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        int $i0;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.content.Intent r11;

        r0 := @this: android.app.ContextImpl;

        r11 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        r2 := @parameter2: java.lang.String[];

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r11.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

     label1:
        virtualinvoke r11.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r8 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r7, $r8, r11, r3, null, -1, null, null, r2, -1, null, 0, 0, $i0);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendBroadcastMultiplePermissions(android.content.Intent, java.lang.String[])
    {
        android.app.ContextImpl r0;
        java.lang.String[] r1;
        java.lang.String r2, $r7;
        android.content.ContentResolver $r3;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        int $i0;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.Intent r10;

        r0 := @this: android.app.ContextImpl;

        r10 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String[];

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r10.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

     label1:
        virtualinvoke r10.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r6, $r7, r10, r2, null, -1, null, null, r1, -1, null, 0, 0, $i0);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendOrderedBroadcast(android.content.Intent, int, java.lang.String, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, java.lang.String, android.os.Bundle, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.String r2, r3, r6;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        android.os.Bundle r7, r8;
        boolean $z0;
        android.os.UserHandle $r9;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.content.BroadcastReceiver;

        r5 := @parameter5: android.os.Handler;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: android.os.Bundle;

        r8 := @parameter8: android.os.Bundle;

        i1 = -1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label1;

        i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r3);

     label1:
        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.os.UserHandle getUser()>();

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, $r9, r2, i1, r8, r4, r5, i0, r6, r7);

        return;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r7, r11;
        android.content.ContentResolver $r2;
        java.lang.String[] $r3, r12;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        int $i0;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.Intent r10;

        r0 := @this: android.app.ContextImpl;

        r10 := @parameter0: android.content.Intent;

        r11 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r1 = virtualinvoke r10.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

        if r11 != null goto label1;

        r12 = null;

        goto label2;

     label1:
        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r11;

        r12 = $r3;

     label2:
        virtualinvoke r10.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r6, $r7, r10, r1, null, -1, null, null, r12, -1, null, 1, 0, $i0);

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r5;
        int i0, i1;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        android.os.Bundle r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.BroadcastReceiver;

        r4 := @parameter4: android.os.Handler;

        i1 := @parameter5: int;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: android.os.Bundle;

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle,android.os.Bundle)>(r1, r2, i0, r3, r4, i1, r5, r6, null);

        return;
    }

    void sendOrderedBroadcast(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        int i0, i1, $i2;
        java.lang.String r1, $r8, r21, r26;
        android.os.Bundle r2, r3;
        java.lang.String[] $r4, r27;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6, $r12, $r15, $r17;
        android.app.ActivityThread$ApplicationThread $r7;
        android.app.LoadedApk $r9, $r13;
        android.app.LoadedApk$ReceiverDispatcher $r10;
        android.content.Context $r11, $r14;
        android.app.Instrumentation $r16;
        android.os.RemoteException $r18;
        java.lang.RuntimeException $r19;
        android.content.Intent r20;
        android.content.BroadcastReceiver r22;
        android.os.Handler r23;
        android.content.IIntentReceiver r24;
        android.content.ContentResolver $r25;

        r0 := @this: android.app.ContextImpl;

        r20 := @parameter0: android.content.Intent;

        r21 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r22 := @parameter3: android.content.BroadcastReceiver;

        r23 := @parameter4: android.os.Handler;

        i1 := @parameter5: int;

        r1 := @parameter6: java.lang.String;

        r2 := @parameter7: android.os.Bundle;

        r3 := @parameter8: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        if r22 == null goto label4;

        $r9 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r9 == null goto label2;

        if r23 != null goto label1;

        $r17 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r23 = virtualinvoke $r17.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label1;

     label1:
        $r13 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r14 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r15 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r16 = virtualinvoke $r15.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r24 = virtualinvoke $r13.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r22, $r14, r23, $r16, 0);

        goto label5;

     label2:
        if r23 != null goto label3;

        $r12 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r23 = virtualinvoke $r12.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label3;

     label3:
        $r10 = new android.app.LoadedApk$ReceiverDispatcher;

        $r11 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r10.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r22, $r11, r23, null, 0);

        r24 = virtualinvoke $r10.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        goto label5;

     label4:
        r24 = null;

     label5:
        $r25 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r26 = virtualinvoke r20.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r25);

        if r21 != null goto label6;

        r27 = null;

        goto label7;

     label6:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r21;

        r27 = $r4;

     label7:
        virtualinvoke r20.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r8 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r7, $r8, r20, r26, r24, i1, r1, r2, r27, i0, r3, 1, 0, $i2);

     label8:
        return;

     label9:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

        catch android.os.RemoteException from label7 to label8 with label9;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r5;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        int i0;
        android.os.Bundle r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.BroadcastReceiver;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.Bundle;

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle,android.os.Bundle)>(r1, r2, -1, r3, r4, i0, r5, r6, null);

        return;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.os.Bundle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r6;
        android.os.Bundle r3, r7;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        int i0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.content.BroadcastReceiver;

        r5 := @parameter4: android.os.Handler;

        i0 := @parameter5: int;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: android.os.Bundle;

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle,android.os.Bundle)>(r1, r2, -1, r4, r5, i0, r6, r7, r3);

        return;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r3, r6;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        int i0, i1;
        android.os.Bundle r7;
        boolean $z0;
        android.os.UserHandle $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.BroadcastReceiver;

        r5 := @parameter4: android.os.Handler;

        i0 := @parameter5: int;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: android.os.Bundle;

        i1 = -1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label1;

        i1 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>(r3);

     label1:
        $r8 = virtualinvoke r0.<android.app.ContextImpl: android.os.UserHandle getUser()>();

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, $r8, r2, i1, r4, r5, i0, r6, r7);

        return;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r6;
        int i0, i1;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        android.os.Bundle r7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: android.content.BroadcastReceiver;

        r5 := @parameter5: android.os.Handler;

        i1 := @parameter6: int;

        r6 := @parameter7: java.lang.String;

        r7 := @parameter8: android.os.Bundle;

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r2, r3, i0, null, r4, r5, i1, r6, r7);

        return;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, int, android.os.Bundle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        int i0, i1, $i2;
        android.os.Bundle r2, r4;
        java.lang.String r3, $r9, r22, r27;
        java.lang.String[] $r5, r28;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7, $r13, $r16, $r18;
        android.app.ActivityThread$ApplicationThread $r8;
        android.app.LoadedApk $r10, $r14;
        android.app.LoadedApk$ReceiverDispatcher $r11;
        android.content.Context $r12, $r15;
        android.app.Instrumentation $r17;
        android.os.RemoteException $r19;
        java.lang.RuntimeException $r20;
        android.content.Intent r21;
        android.content.BroadcastReceiver r23;
        android.os.Handler r24;
        android.content.IIntentReceiver r25;
        android.content.ContentResolver $r26;

        r0 := @this: android.app.ContextImpl;

        r21 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        r22 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r2 := @parameter4: android.os.Bundle;

        r23 := @parameter5: android.content.BroadcastReceiver;

        r24 := @parameter6: android.os.Handler;

        i1 := @parameter7: int;

        r3 := @parameter8: java.lang.String;

        r4 := @parameter9: android.os.Bundle;

        if r23 == null goto label4;

        $r10 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r10 == null goto label2;

        if r24 != null goto label1;

        $r18 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r24 = virtualinvoke $r18.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label1;

     label1:
        $r14 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r15 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r16 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r17 = virtualinvoke $r16.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r25 = virtualinvoke $r14.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r23, $r15, r24, $r17, 0);

        goto label5;

     label2:
        if r24 != null goto label3;

        $r13 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r24 = virtualinvoke $r13.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label3;

     label3:
        $r11 = new android.app.LoadedApk$ReceiverDispatcher;

        $r12 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r11.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r23, $r12, r24, null, 0);

        r25 = virtualinvoke $r11.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        goto label5;

     label4:
        r25 = null;

     label5:
        $r26 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r27 = virtualinvoke r21.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r26);

        if r22 != null goto label6;

        r28 = null;

        goto label7;

     label6:
        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r22;

        r28 = $r5;

     label7:
        virtualinvoke r21.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r6 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r9 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r6.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r8, $r9, r21, r27, r25, i1, r3, r4, r28, i0, r2, 1, 0, $i2);

     label8:
        return;

     label9:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r20;

        catch android.os.RemoteException from label7 to label8 with label9;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r6;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        int i0;
        android.os.Bundle r7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.BroadcastReceiver;

        r5 := @parameter4: android.os.Handler;

        i0 := @parameter5: int;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: android.os.Bundle;

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r2, r3, -1, null, r4, r5, i0, r6, r7);

        return;
    }

    public void sendStickyBroadcast(android.content.Intent)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r6;
        android.content.ContentResolver $r2;
        android.app.IActivityManager $r3;
        android.app.ActivityThread $r4;
        android.app.ActivityThread$ApplicationThread $r5;
        int $i0;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.content.Intent r9;

        r0 := @this: android.app.ContextImpl;

        r9 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r1 = virtualinvoke r9.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

     label1:
        virtualinvoke r9.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r6 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r3.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r5, $r6, r9, r1, null, -1, null, null, null, -1, null, 0, 1, $i0);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        java.lang.String r2, $r7;
        android.content.ContentResolver $r3;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        int $i0;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.Intent r10;

        r0 := @this: android.app.ContextImpl;

        r10 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r10.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

     label1:
        virtualinvoke r10.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r6, $r7, r10, r2, null, -1, null, null, null, -1, null, 0, 1, $i0);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        android.os.Bundle r2;
        java.lang.String r3, $r8;
        android.content.ContentResolver $r4;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        int $i0;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.content.Intent r11;

        r0 := @this: android.app.ContextImpl;

        r11 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        r2 := @parameter2: android.os.Bundle;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r11.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

     label1:
        virtualinvoke r11.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r8 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r7, $r8, r11, r3, null, -1, null, null, null, -1, r2, 0, 1, $i0);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        int i0, $i2;
        java.lang.String r1, r19, $r23;
        android.os.Bundle r2;
        android.app.LoadedApk $r3, $r7;
        android.app.LoadedApk$ReceiverDispatcher $r4;
        android.content.Context $r5, $r8;
        android.app.ActivityThread $r6, $r9, $r11, $r21;
        android.app.Instrumentation $r10;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        android.content.Intent r14;
        android.content.BroadcastReceiver r15;
        android.os.Handler r16;
        android.content.IIntentReceiver r17;
        android.content.ContentResolver $r18;
        android.app.IActivityManager $r20;
        android.app.ActivityThread$ApplicationThread $r22;

        r0 := @this: android.app.ContextImpl;

        r14 := @parameter0: android.content.Intent;

        r15 := @parameter1: android.content.BroadcastReceiver;

        r16 := @parameter2: android.os.Handler;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        if r15 == null goto label4;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r3 == null goto label2;

        if r16 != null goto label1;

        $r11 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r16 = virtualinvoke $r11.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label1;

     label1:
        $r7 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r8 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r9 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r10 = virtualinvoke $r9.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r17 = virtualinvoke $r7.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r15, $r8, r16, $r10, 0);

        goto label5;

     label2:
        if r16 != null goto label3;

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r16 = virtualinvoke $r6.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label3;

     label3:
        $r4 = new android.app.LoadedApk$ReceiverDispatcher;

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r4.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r15, $r5, r16, null, 0);

        r17 = virtualinvoke $r4.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        goto label5;

     label4:
        r17 = null;

     label5:
        $r18 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r19 = virtualinvoke r14.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r18);

     label6:
        virtualinvoke r14.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r20 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r21 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r22 = virtualinvoke $r21.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r23 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r20.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r22, $r23, r14, r19, r17, i0, r1, r2, null, -1, null, 1, 1, $i2);

     label7:
        return;

     label8:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.os.UserHandle r1;
        int i0, $i2;
        java.lang.String r2, r20, $r24;
        android.os.Bundle r3;
        android.app.LoadedApk $r4, $r8;
        android.app.LoadedApk$ReceiverDispatcher $r5;
        android.content.Context $r6, $r9;
        android.app.ActivityThread $r7, $r10, $r12, $r22;
        android.app.Instrumentation $r11;
        android.os.RemoteException $r13;
        java.lang.RuntimeException $r14;
        android.content.Intent r15;
        android.content.BroadcastReceiver r16;
        android.os.Handler r17;
        android.content.IIntentReceiver r18;
        android.content.ContentResolver $r19;
        android.app.IActivityManager $r21;
        android.app.ActivityThread$ApplicationThread $r23;

        r0 := @this: android.app.ContextImpl;

        r15 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.UserHandle;

        r16 := @parameter2: android.content.BroadcastReceiver;

        r17 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.String;

        r3 := @parameter6: android.os.Bundle;

        if r16 == null goto label4;

        $r4 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r4 == null goto label2;

        if r17 != null goto label1;

        $r12 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r17 = virtualinvoke $r12.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label1;

     label1:
        $r8 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r10 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r11 = virtualinvoke $r10.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r18 = virtualinvoke $r8.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r16, $r9, r17, $r11, 0);

        goto label5;

     label2:
        if r17 != null goto label3;

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r17 = virtualinvoke $r7.<android.app.ActivityThread: android.os.Handler getHandler()>();

        goto label3;

     label3:
        $r5 = new android.app.LoadedApk$ReceiverDispatcher;

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r5.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r16, $r6, r17, null, 0);

        r18 = virtualinvoke $r5.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        goto label5;

     label4:
        r18 = null;

     label5:
        $r19 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r20 = virtualinvoke r15.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r19);

     label6:
        virtualinvoke r15.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r21 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r22 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r23 = virtualinvoke $r22.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r24 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        $i2 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r21.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>($r23, $r24, r15, r20, r18, i0, r2, r3, null, -1, null, 1, 1, $i2);

     label7:
        return;

     label8:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r14;

        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void setAutofillClient(android.view.autofill.AutofillManager$AutofillClient)
    {
        android.app.ContextImpl r0;
        android.view.autofill.AutofillManager$AutofillClient r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.view.autofill.AutofillManager$AutofillClient;

        r0.<android.app.ContextImpl: android.view.autofill.AutofillManager$AutofillClient mAutofillClient> = r1;

        return;
    }

    public void setAutofillOptions(android.content.AutofillOptions)
    {
        android.app.ContextImpl r0;
        android.content.AutofillOptions r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.AutofillOptions;

        r0.<android.app.ContextImpl: android.content.AutofillOptions mAutofillOptions> = r1;

        return;
    }

    public void setContentCaptureOptions(android.content.ContentCaptureOptions)
    {
        android.app.ContextImpl r0;
        android.content.ContentCaptureOptions r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.ContentCaptureOptions;

        r0.<android.app.ContextImpl: android.content.ContentCaptureOptions mContentCaptureOptions> = r1;

        return;
    }

    final void setOuterContext(android.content.Context)
    {
        android.app.ContextImpl r0;
        android.content.Context r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Context;

        r0.<android.app.ContextImpl: android.content.Context mOuterContext> = r1;

        return;
    }

    void setResources(android.content.res.Resources)
    {
        android.app.ContextImpl r0;
        android.content.res.Resources r1;
        boolean $z0;
        android.content.res.CompatResources $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.res.Resources;

        $z0 = r1 instanceof android.content.res.CompatResources;

        if $z0 == 0 goto label1;

        $r2 = (android.content.res.CompatResources) r1;

        virtualinvoke $r2.<android.content.res.CompatResources: void setContext(android.content.Context)>(r0);

     label1:
        r0.<android.app.ContextImpl: android.content.res.Resources mResources> = r1;

        return;
    }

    public void setTheme(int)
    {
        android.app.ContextImpl r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        r1 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $i1 = r0.<android.app.ContextImpl: int mThemeResource>;

        if $i1 == i0 goto label2;

        r0.<android.app.ContextImpl: int mThemeResource> = i0;

        specialinvoke r0.<android.app.ContextImpl: void initializeTheme()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setWallpaper(android.graphics.Bitmap) throws java.io.IOException
    {
        android.app.ContextImpl r0;
        android.graphics.Bitmap r1;
        android.app.WallpaperManager $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        virtualinvoke $r2.<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>(r1);

        return;
    }

    public void setWallpaper(java.io.InputStream) throws java.io.IOException
    {
        android.app.ContextImpl r0;
        java.io.InputStream r1;
        android.app.WallpaperManager $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.io.InputStream;

        $r2 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        virtualinvoke $r2.<android.app.WallpaperManager: void setStream(java.io.InputStream)>(r1);

        return;
    }

    public void startActivities(android.content.Intent[])
    {
        android.app.ContextImpl r0;
        android.content.Intent[] r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent[];

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        virtualinvoke r0.<android.app.ContextImpl: void startActivities(android.content.Intent[],android.os.Bundle)>(r1, null);

        return;
    }

    public void startActivities(android.content.Intent[], android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent[] r1;
        android.os.Bundle r2;
        android.content.Intent $r3;
        int $i0, $i1;
        android.util.AndroidRuntimeException $r4;
        android.app.ActivityThread $r5, $r8;
        android.app.Instrumentation $r6;
        android.content.Context $r7;
        android.app.ActivityThread$ApplicationThread $r9;
        android.app.Activity $r10;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent[];

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r3 = r1[0];

        $i0 = virtualinvoke $r3.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r9 = virtualinvoke $r8.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r10 = (android.app.Activity) null;

        virtualinvoke $r6.<android.app.Instrumentation: void execStartActivities(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle)>($r7, $r9, null, $r10, r1, r2);

        return;

     label1:
        $r4 = new android.util.AndroidRuntimeException;

        specialinvoke $r4.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Calling startActivities() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag on first Intent. Is this really what you want?");

        throw $r4;
    }

    public int startActivitiesAsUser(android.content.Intent[], android.os.Bundle, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent[] r1;
        android.os.Bundle r2;
        android.os.UserHandle r3;
        android.content.Intent $r4;
        int $i0, $i1, $i2, $i3;
        android.util.AndroidRuntimeException $r5;
        android.app.ActivityThread $r6, $r9;
        android.app.Instrumentation $r7;
        android.content.Context $r8;
        android.app.ActivityThread$ApplicationThread $r10;
        android.app.Activity $r11;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent[];

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.UserHandle;

        $r4 = r1[0];

        $i0 = virtualinvoke $r4.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r8 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r9 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r10 = virtualinvoke $r9.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r11 = (android.app.Activity) null;

        $i2 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        $i3 = virtualinvoke $r7.<android.app.Instrumentation: int execStartActivitiesAsUser(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle,int)>($r8, $r10, null, $r11, r1, r2, $i2);

        return $i3;

     label1:
        $r5 = new android.util.AndroidRuntimeException;

        specialinvoke $r5.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Calling startActivities() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag on first Intent. Is this really what you want?");

        throw $r5;
    }

    public void startActivity(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        virtualinvoke r0.<android.app.ContextImpl: void startActivity(android.content.Intent,android.os.Bundle)>(r1, null);

        return;
    }

    public void startActivity(android.content.Intent, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.Bundle r2;
        int i0, $i1, $i2, $i3;
        android.content.pm.ApplicationInfo $r3;
        android.util.AndroidRuntimeException $r5;
        android.app.ActivityOptions $r6;
        android.app.ActivityThread $r7, $r10;
        android.app.Instrumentation $r8;
        android.content.Context $r9;
        android.app.ActivityThread$ApplicationThread $r11;
        android.app.Activity $r12;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $i1 = virtualinvoke r1.<android.content.Intent: int getFlags()>();

        $i2 = $i1 & 268435456;

        if $i2 != 0 goto label3;

        if i0 < 24 goto label1;

        if i0 < 28 goto label3;

     label1:
        if r2 == null goto label2;

        $r6 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions fromBundle(android.os.Bundle)>(r2);

        $i3 = virtualinvoke $r6.<android.app.ActivityOptions: int getLaunchTaskId()>();

        if $i3 == -1 goto label2;

        goto label3;

     label2:
        $r5 = new android.util.AndroidRuntimeException;

        specialinvoke $r5.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?");

        throw $r5;

     label3:
        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r10 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r11 = virtualinvoke $r10.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r12 = (android.app.Activity) null;

        virtualinvoke $r8.<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)>($r9, $r11, null, $r12, r1, -1, r2);

        return;
    }

    public void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.os.Bundle r1;
        android.os.UserHandle r2;
        android.app.IActivityTaskManager r3;
        android.app.ActivityThread$ApplicationThread r4;
        java.lang.String r5, r6, $r9;
        android.content.ContentResolver r7;
        android.app.ActivityThread $r8;
        int $i0;
        android.os.RemoteException $r10, $r11, $r12, r14;
        android.content.Intent r13;
        java.lang.RuntimeException $r15;

        r0 := @this: android.app.ContextImpl;

        r13 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: android.os.UserHandle;

     label1:
        r3 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

     label2:
        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r8.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        r5 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getBasePackageName()>();

        r6 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getAttributionTag()>();

        r7 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

     label3:
        $r9 = virtualinvoke r13.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>(r7);

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r3.<android.app.IActivityTaskManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(r4, r5, r6, r13, $r9, null, null, 0, 268435456, null, r1, $i0);

     label4:
        return;

     label5:
        $r12 := @caughtexception;

        r14 = $r12;

        goto label8;

     label6:
        $r11 := @caughtexception;

        r14 = $r11;

        goto label8;

     label7:
        $r10 := @caughtexception;

        r14 = $r10;

     label8:
        $r15 = virtualinvoke r14.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r15;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void startActivityAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        virtualinvoke r0.<android.app.ContextImpl: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>(r1, null, r2);

        return;
    }

    public android.content.ComponentName startForegroundService(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle $r2;
        android.content.ComponentName $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $r3 = specialinvoke r0.<android.app.ContextImpl: android.content.ComponentName startServiceCommon(android.content.Intent,boolean,android.os.UserHandle)>(r1, 1, $r2);

        return $r3;
    }

    public android.content.ComponentName startForegroundServiceAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.ComponentName $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = specialinvoke r0.<android.app.ContextImpl: android.content.ComponentName startServiceCommon(android.content.Intent,boolean,android.os.UserHandle)>(r1, 1, r2);

        return $r3;
    }

    public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        android.os.Bundle r2;
        boolean z0;
        android.app.IActivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.ContextImpl;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        if r2 == null goto label2;

     label1:
        virtualinvoke r2.<android.os.Bundle: boolean setAllowFds(boolean)>(0);

     label2:
        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        z0 = interfaceinvoke $r3.<android.app.IActivityManager: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>(r6, r1, 0, r2, null, null, $i0, null);

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) throws android.content.IntentSender$SendIntentException
    {
        android.app.ContextImpl r0;
        android.content.IntentSender r1;
        android.content.Intent r2;
        int i0, i1, i2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.IntentSender;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        virtualinvoke r0.<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>(r1, r2, i0, i1, i2, null);

        return;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) throws android.content.IntentSender$SendIntentException
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        int i0, i1, i2, i3;
        android.os.Bundle r2;
        android.app.IActivityTaskManager r3;
        android.app.ActivityThread$ApplicationThread r4;
        android.app.ActivityThread $r5;
        android.content.ContentResolver $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.content.IntentSender r9;
        java.lang.String r10;
        android.content.IIntentSender r11;
        android.os.IBinder r12;
        android.content.IntentSender$SendIntentException r13;

        r0 := @this: android.app.ContextImpl;

        r9 := @parameter0: android.content.IntentSender;

        r1 := @parameter1: android.content.Intent;

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r2 := @parameter5: android.os.Bundle;

        r10 = null;

        if r1 == null goto label02;

     label01:
        virtualinvoke r1.<android.content.Intent: boolean migrateExtraStreamToClipData(android.content.Context)>(r0);

        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>(r0);

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r10 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r6);

     label02:
        r3 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

     label03:
        if r9 == null goto label06;

     label04:
        r11 = virtualinvoke r9.<android.content.IntentSender: android.content.IIntentSender getTarget()>();

     label05:
        goto label07;

     label06:
        r11 = null;

     label07:
        if r9 == null goto label10;

     label08:
        r12 = virtualinvoke r9.<android.content.IntentSender: android.os.IBinder getWhitelistToken()>();

     label09:
        goto label11;

     label10:
        r12 = null;

     label11:
        i3 = interfaceinvoke r3.<android.app.IActivityTaskManager: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>(r4, r11, r12, r1, r10, null, null, 0, i2, i0, r2);

     label12:
        if i3 == -96 goto label15;

     label13:
        staticinvoke <android.app.Instrumentation: void checkStartActivityResult(int,java.lang.Object)>(i3, null);

     label14:
        return;

     label15:
        r13 = new android.content.IntentSender$SendIntentException;

        specialinvoke r13.<android.content.IntentSender$SendIntentException: void <init>()>();

        throw r13;

     label16:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label01 to label02 with label16;
        catch android.os.RemoteException from label02 to label03 with label16;
        catch android.os.RemoteException from label04 to label05 with label16;
        catch android.os.RemoteException from label08 to label09 with label16;
        catch android.os.RemoteException from label11 to label12 with label16;
        catch android.os.RemoteException from label13 to label14 with label16;
        catch android.os.RemoteException from label15 to label16 with label16;
    }

    public android.content.ComponentName startService(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle $r2;
        android.content.ComponentName $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $r3 = specialinvoke r0.<android.app.ContextImpl: android.content.ComponentName startServiceCommon(android.content.Intent,boolean,android.os.UserHandle)>(r1, 0, $r2);

        return $r3;
    }

    public android.content.ComponentName startServiceAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.ComponentName $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = specialinvoke r0.<android.app.ContextImpl: android.content.ComponentName startServiceCommon(android.content.Intent,boolean,android.os.UserHandle)>(r1, 0, r2);

        return $r3;
    }

    public boolean stopService(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle $r2;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean stopServiceCommon(android.content.Intent,android.os.UserHandle)>(r1, $r2);

        return $z0;
    }

    public boolean stopServiceAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean stopServiceCommon(android.content.Intent,android.os.UserHandle)>(r1, r2);

        return $z0;
    }

    public void unbindService(android.content.ServiceConnection)
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.RuntimeException $r3, $r7;
        android.content.Context $r4;
        android.app.IActivityManager $r5;
        android.os.RemoteException $r6;
        android.content.ServiceConnection r8;
        android.app.IServiceConnection r9;

        r0 := @this: android.app.ContextImpl;

        r8 := @parameter0: android.content.ServiceConnection;

        if r8 == null goto label5;

        r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r1 == null goto label4;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        r9 = virtualinvoke r1.<android.app.LoadedApk: android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)>($r4, r8);

     label1:
        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r5.<android.app.IActivityManager: boolean unbindService(android.app.IServiceConnection)>(r9);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connection is null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterReceiver(android.content.BroadcastReceiver)
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk r1;
        java.lang.RuntimeException $r2, $r6;
        android.content.Context $r3;
        android.app.IActivityManager $r4;
        android.os.RemoteException $r5;
        android.content.BroadcastReceiver r7;
        android.content.IIntentReceiver r8;

        r0 := @this: android.app.ContextImpl;

        r7 := @parameter0: android.content.BroadcastReceiver;

        r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r1 == null goto label4;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        r8 = virtualinvoke r1.<android.app.LoadedApk: android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)>($r3, r7);

     label1:
        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r4.<android.app.IActivityManager: void unregisterReceiver(android.content.IIntentReceiver)>(r8);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateDisplay(int)
    {
        android.app.ContextImpl r0;
        int i0;
        android.content.res.Resources $r1;
        android.app.ResourcesManager $r2;
        android.view.Display $r3;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r1 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r3 = virtualinvoke $r2.<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.content.res.Resources)>(i0, $r1);

        r0.<android.app.ContextImpl: android.view.Display mDisplay> = $r3;

        r0.<android.app.ContextImpl: boolean mIsAssociatedWithDisplay> = 1;

        return;
    }

    public void updateServiceGroup(android.content.ServiceConnection, int, int)
    {
        android.app.ContextImpl r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1, $r7;
        java.lang.RuntimeException $r2, $r11;
        android.content.Context $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;
        android.app.IActivityManager $r9;
        android.os.RemoteException $r10;
        android.content.ServiceConnection r12;
        android.app.LoadedApk r13;
        android.app.IServiceConnection r14;

        r0 := @this: android.app.ContextImpl;

        r12 := @parameter0: android.content.ServiceConnection;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r12 == null goto label6;

        r13 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if r13 == null goto label5;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        r14 = virtualinvoke r13.<android.app.LoadedApk: android.app.IServiceConnection lookupServiceDispatcher(android.content.ServiceConnection,android.content.Context)>(r12, $r3);

        if r14 == null goto label4;

     label1:
        $r9 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r9.<android.app.IActivityManager: void updateServiceGroup(android.app.IServiceConnection,int,int)>(r14, i0, i1);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServiceConnection not currently bound: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label5:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connection is null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.app.ContextImpl: java.lang.String XATTR_INODE_CODE_CACHE> = "user.inode_code_cache";

        <android.app.ContextImpl: java.lang.String XATTR_INODE_CACHE> = "user.inode_cache";

        <android.app.ContextImpl: java.lang.String TAG> = "ContextImpl";

        <android.app.ContextImpl: int STATE_UNINITIALIZED> = 0;

        <android.app.ContextImpl: int STATE_READY> = 2;

        <android.app.ContextImpl: int STATE_NOT_FOUND> = 3;

        <android.app.ContextImpl: int STATE_INITIALIZING> = 1;

        <android.app.ContextImpl: boolean DEBUG> = 0;

        return;
    }
}
