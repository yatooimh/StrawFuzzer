public class android.app.DownloadManager$Request extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    public static final int NETWORK_BLUETOOTH;
    public static final int NETWORK_MOBILE;
    public static final int NETWORK_WIFI;
    private static final int SCANNABLE_VALUE_NO;
    private static final int SCANNABLE_VALUE_YES;
    public static final int VISIBILITY_HIDDEN;
    public static final int VISIBILITY_VISIBLE;
    public static final int VISIBILITY_VISIBLE_NOTIFY_COMPLETED;
    public static final int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION;
    private int mAllowedNetworkTypes;
    private java.lang.CharSequence mDescription;
    private android.net.Uri mDestinationUri;
    private int mFlags;
    private boolean mIsVisibleInDownloadsUi;
    private boolean mMeteredAllowed;
    private java.lang.String mMimeType;
    private int mNotificationVisibility;
    private java.util.List mRequestHeaders;
    private boolean mRoamingAllowed;
    private boolean mScannable;
    private java.lang.CharSequence mTitle;
    private android.net.Uri mUri;

    static void <clinit>()
    {
        <android.app.DownloadManager$Request: int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION> = 3;

        <android.app.DownloadManager$Request: int VISIBILITY_VISIBLE_NOTIFY_COMPLETED> = 1;

        <android.app.DownloadManager$Request: int VISIBILITY_VISIBLE> = 0;

        <android.app.DownloadManager$Request: int VISIBILITY_HIDDEN> = 2;

        <android.app.DownloadManager$Request: int SCANNABLE_VALUE_YES> = 0;

        <android.app.DownloadManager$Request: int SCANNABLE_VALUE_NO> = 2;

        <android.app.DownloadManager$Request: int NETWORK_WIFI> = 2;

        <android.app.DownloadManager$Request: int NETWORK_MOBILE> = 1;

        <android.app.DownloadManager$Request: int NETWORK_BLUETOOTH> = 4;

        <android.app.DownloadManager$Request: boolean $assertionsDisabled> = 0;

        return;
    }

    public void <init>(android.net.Uri)
    {
        android.app.DownloadManager$Request r0;
        android.net.Uri r1;
        java.util.ArrayList $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, r8;
        boolean $z0, $z1;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: android.net.Uri;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.app.DownloadManager$Request: java.util.List mRequestHeaders> = $r2;

        r0.<android.app.DownloadManager$Request: int mAllowedNetworkTypes> = -1;

        r0.<android.app.DownloadManager$Request: boolean mRoamingAllowed> = 1;

        r0.<android.app.DownloadManager$Request: boolean mMeteredAllowed> = 1;

        r0.<android.app.DownloadManager$Request: int mFlags> = 0;

        r0.<android.app.DownloadManager$Request: boolean mIsVisibleInDownloadsUi> = 1;

        r0.<android.app.DownloadManager$Request: boolean mScannable> = 0;

        r0.<android.app.DownloadManager$Request: int mNotificationVisibility> = 0;

        if r1 == null goto label3;

        r8 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        if r8 == null goto label2;

        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 == 0 goto label2;

     label1:
        r0.<android.app.DownloadManager$Request: android.net.Uri mUri> = r1;

        return;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only download HTTP/HTTPS URIs: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        throw null;
    }

    void <init>(java.lang.String)
    {
        android.app.DownloadManager$Request r0;
        java.lang.String r1;
        java.util.ArrayList $r2;
        android.net.Uri $r3;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.app.DownloadManager$Request: java.util.List mRequestHeaders> = $r2;

        r0.<android.app.DownloadManager$Request: int mAllowedNetworkTypes> = -1;

        r0.<android.app.DownloadManager$Request: boolean mRoamingAllowed> = 1;

        r0.<android.app.DownloadManager$Request: boolean mMeteredAllowed> = 1;

        r0.<android.app.DownloadManager$Request: int mFlags> = 0;

        r0.<android.app.DownloadManager$Request: boolean mIsVisibleInDownloadsUi> = 1;

        r0.<android.app.DownloadManager$Request: boolean mScannable> = 0;

        r0.<android.app.DownloadManager$Request: int mNotificationVisibility> = 0;

        $r3 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1);

        r0.<android.app.DownloadManager$Request: android.net.Uri mUri> = $r3;

        return;
    }

    private void encodeHttpHeaders(android.content.ContentValues)
    {
        android.app.DownloadManager$Request r0;
        android.content.ContentValues r1;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4, $r6, $r10;
        java.lang.StringBuilder $r5, $r13;
        java.lang.String $r7, $r11, $r16, r19;
        int i0;
        android.util.Pair r17;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: android.content.ContentValues;

        i0 = 0;

        $r3 = r0.<android.app.DownloadManager$Request: java.util.List mRequestHeaders>;

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r17 = (android.util.Pair) $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r17.<android.util.Pair: java.lang.Object first>;

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = r17.<android.util.Pair: java.lang.Object second>;

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r19 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http_header_");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r16, r19);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void putIfNonNull(android.content.ContentValues, java.lang.String, java.lang.Object)
    {
        android.app.DownloadManager$Request r0;
        android.content.ContentValues r1;
        java.lang.String r2, $r4;
        java.lang.Object r3;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: android.content.ContentValues;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        if r3 == null goto label1;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>(r2, $r4);

     label1:
        return;
    }

    private void setDestinationFromBase(java.io.File, java.lang.String)
    {
        android.app.DownloadManager$Request r0;
        java.io.File r1;
        java.lang.String r2;
        java.lang.NullPointerException $r3;
        android.net.Uri $r4, $r5;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        if r2 == null goto label1;

        $r4 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>(r1);

        $r5 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r4, r2);

        r0.<android.app.DownloadManager$Request: android.net.Uri mDestinationUri> = $r5;

        return;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("subPath cannot be null");

        throw $r3;
    }

    public android.app.DownloadManager$Request addRequestHeader(java.lang.String, java.lang.String)
    {
        android.app.DownloadManager$Request r0;
        java.lang.String r1, r2, r7;
        java.lang.NullPointerException $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.util.List $r5;
        android.util.Pair $r6;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z0 != 0 goto label2;

        r7 = r2;

        if r2 != null goto label1;

        r7 = "";

     label1:
        $r5 = r0.<android.app.DownloadManager$Request: java.util.List mRequestHeaders>;

        $r6 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r1, r7);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        return r0;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("header may not contain \':\'");

        throw $r4;

     label3:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("header cannot be null");

        throw $r3;
    }

    public void allowScanningByMediaScanner()
    {
        android.app.DownloadManager$Request r0;

        r0 := @this: android.app.DownloadManager$Request;

        r0.<android.app.DownloadManager$Request: boolean mScannable> = 1;

        return;
    }

    public android.app.DownloadManager$Request setAllowedNetworkTypes(int)
    {
        android.app.DownloadManager$Request r0;
        int i0;

        r0 := @this: android.app.DownloadManager$Request;

        i0 := @parameter0: int;

        r0.<android.app.DownloadManager$Request: int mAllowedNetworkTypes> = i0;

        return r0;
    }

    public android.app.DownloadManager$Request setAllowedOverMetered(boolean)
    {
        android.app.DownloadManager$Request r0;
        boolean z0;

        r0 := @this: android.app.DownloadManager$Request;

        z0 := @parameter0: boolean;

        r0.<android.app.DownloadManager$Request: boolean mMeteredAllowed> = z0;

        return r0;
    }

    public android.app.DownloadManager$Request setAllowedOverRoaming(boolean)
    {
        android.app.DownloadManager$Request r0;
        boolean z0;

        r0 := @this: android.app.DownloadManager$Request;

        z0 := @parameter0: boolean;

        r0.<android.app.DownloadManager$Request: boolean mRoamingAllowed> = z0;

        return r0;
    }

    public android.app.DownloadManager$Request setDescription(java.lang.CharSequence)
    {
        android.app.DownloadManager$Request r0;
        java.lang.CharSequence r1;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<android.app.DownloadManager$Request: java.lang.CharSequence mDescription> = r1;

        return r0;
    }

    public android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context, java.lang.String, java.lang.String)
    {
        android.app.DownloadManager$Request r0;
        java.lang.String r1, $r5, $r8, $r10, $r14, r16;
        java.lang.IllegalStateException $r2, $r7, $r13;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3, $r9;
        android.content.Context r15;
        java.io.File r17;

        r0 := @this: android.app.DownloadManager$Request;

        r15 := @parameter0: android.content.Context;

        r16 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r17 = virtualinvoke r15.<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>(r16);

        if r17 == null goto label5;

        $z0 = virtualinvoke r17.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke r17.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label1;

        goto label3;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r17.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists and is not a directory");

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label2:
        $z1 = virtualinvoke r17.<java.io.File: boolean mkdirs()>();

        if $z1 == 0 goto label4;

     label3:
        specialinvoke r0.<android.app.DownloadManager$Request: void setDestinationFromBase(java.io.File,java.lang.String)>(r17, r1);

        return r0;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create directory: ");

        $r5 = virtualinvoke r17.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label5:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to get external storage files directory");

        throw $r2;
    }

    public android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String, java.lang.String)
    {
        android.app.DownloadManager$Request r0;
        java.io.File r1;
        android.os.Bundle r2;
        java.lang.IllegalStateException $r3, $r11, $r17, $r26;
        android.content.pm.ApplicationInfo $r4;
        int $i0;
        android.content.ContentResolver $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r7, $r13, $r22;
        java.lang.String $r9, $r12, $r14, $r18, $r24, $r27, r28, r29;
        java.lang.Throwable $r19, $r20;
        android.os.RemoteException $r21;
        android.app.Application r30;
        android.content.ContentProviderClient r33;

        r0 := @this: android.app.DownloadManager$Request;

        r28 := @parameter0: java.lang.String;

        r29 := @parameter1: java.lang.String;

        r1 = staticinvoke <android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>(r28);

        if r1 == null goto label17;

        r30 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        $r4 = virtualinvoke r30.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 >= 29 goto label05;

        $z0 = staticinvoke <android.os.Environment: boolean isExternalStorageLegacy()>();

        if $z0 != 0 goto label01;

        goto label05;

     label01:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label03;

        $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label02;

        goto label09;

     label02:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists and is not a directory");

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label03:
        $z2 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if $z2 == 0 goto label04;

        goto label09;

     label04:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create directory: ");

        $r9 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label05:
        $r5 = virtualinvoke r30.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r33 = virtualinvoke $r5.<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>("downloads");

     label06:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("dir_type", r28);

        virtualinvoke r33.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("create_external_public_dir", null, r2);

     label07:
        if r33 == null goto label09;

     label08:
        virtualinvoke r33.<android.content.ContentProviderClient: void close()>();

     label09:
        specialinvoke r0.<android.app.DownloadManager$Request: void setDestinationFromBase(java.io.File,java.lang.String)>(r1, r29);

        return r0;

     label10:
        $r20 := @caughtexception;

        if r33 == null goto label15;

     label11:
        virtualinvoke r33.<android.content.ContentProviderClient: void close()>();

     label12:
        goto label15;

     label13:
        $r19 := @caughtexception;

     label14:
        virtualinvoke $r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

     label15:
        throw $r20;

     label16:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create directory: ");

        $r24 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = new java.lang.IllegalStateException;

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label17:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to get external storage public directory");

        throw $r3;

        catch android.os.RemoteException from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch android.os.RemoteException from label14 to label15 with label16;
        catch android.os.RemoteException from label15 to label16 with label16;
    }

    public android.app.DownloadManager$Request setDestinationUri(android.net.Uri)
    {
        android.app.DownloadManager$Request r0;
        android.net.Uri r1;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: android.net.Uri;

        r0.<android.app.DownloadManager$Request: android.net.Uri mDestinationUri> = r1;

        return r0;
    }

    public android.app.DownloadManager$Request setMimeType(java.lang.String)
    {
        android.app.DownloadManager$Request r0;
        java.lang.String r1;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: java.lang.String;

        r0.<android.app.DownloadManager$Request: java.lang.String mMimeType> = r1;

        return r0;
    }

    public android.app.DownloadManager$Request setNotificationVisibility(int)
    {
        android.app.DownloadManager$Request r0;
        int i0;

        r0 := @this: android.app.DownloadManager$Request;

        i0 := @parameter0: int;

        r0.<android.app.DownloadManager$Request: int mNotificationVisibility> = i0;

        return r0;
    }

    public android.app.DownloadManager$Request setRequiresCharging(boolean)
    {
        android.app.DownloadManager$Request r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.app.DownloadManager$Request;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.app.DownloadManager$Request: int mFlags>;

        $i3 = $i2 | 1;

        r0.<android.app.DownloadManager$Request: int mFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.app.DownloadManager$Request: int mFlags>;

        $i1 = $i0 & -2;

        r0.<android.app.DownloadManager$Request: int mFlags> = $i1;

     label2:
        return r0;
    }

    public android.app.DownloadManager$Request setRequiresDeviceIdle(boolean)
    {
        android.app.DownloadManager$Request r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.app.DownloadManager$Request;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.app.DownloadManager$Request: int mFlags>;

        $i3 = $i2 | 2;

        r0.<android.app.DownloadManager$Request: int mFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.app.DownloadManager$Request: int mFlags>;

        $i1 = $i0 & -3;

        r0.<android.app.DownloadManager$Request: int mFlags> = $i1;

     label2:
        return r0;
    }

    public android.app.DownloadManager$Request setShowRunningNotification(boolean)
    {
        android.app.DownloadManager$Request r0, r1;
        boolean z0;

        r0 := @this: android.app.DownloadManager$Request;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r1 = virtualinvoke r0.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setNotificationVisibility(int)>(0);

        goto label2;

     label1:
        r1 = virtualinvoke r0.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setNotificationVisibility(int)>(2);

     label2:
        return r1;
    }

    public android.app.DownloadManager$Request setTitle(java.lang.CharSequence)
    {
        android.app.DownloadManager$Request r0;
        java.lang.CharSequence r1;

        r0 := @this: android.app.DownloadManager$Request;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<android.app.DownloadManager$Request: java.lang.CharSequence mTitle> = r1;

        return r0;
    }

    public android.app.DownloadManager$Request setVisibleInDownloadsUi(boolean)
    {
        android.app.DownloadManager$Request r0;
        boolean z0;

        r0 := @this: android.app.DownloadManager$Request;

        z0 := @parameter0: boolean;

        r0.<android.app.DownloadManager$Request: boolean mIsVisibleInDownloadsUi> = z0;

        return r0;
    }

    android.content.ContentValues toContentValues(java.lang.String)
    {
        android.app.DownloadManager$Request r0;
        android.content.ContentValues $r2;
        android.net.Uri $r3, $r19, r22;
        java.lang.String $r4, $r11, $r20, r21;
        java.lang.Boolean $r5, $r14, $r15, $r17;
        java.lang.Integer $r6, $r7, $r12, $r13, $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r8;
        java.lang.CharSequence $r9, $r10;
        int $i0, $i1, $i2;
        byte b3;

        r0 := @this: android.app.DownloadManager$Request;

        r21 := @parameter0: java.lang.String;

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        $r3 = r0.<android.app.DownloadManager$Request: android.net.Uri mUri>;

        $r4 = virtualinvoke $r3.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("uri", $r4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("is_public_api", $r5);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("notificationpackage", r21);

        r22 = r0.<android.app.DownloadManager$Request: android.net.Uri mDestinationUri>;

        b3 = 2;

        if r22 == null goto label1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("destination", $r18);

        $r19 = r0.<android.app.DownloadManager$Request: android.net.Uri mDestinationUri>;

        $r20 = virtualinvoke $r19.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("hint", $r20);

        goto label2;

     label1:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("destination", $r6);

     label2:
        $z0 = r0.<android.app.DownloadManager$Request: boolean mScannable>;

        if $z0 == 0 goto label3;

        b3 = 0;

        goto label3;

     label3:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b3);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("scanned", $r7);

        $r8 = r0.<android.app.DownloadManager$Request: java.util.List mRequestHeaders>;

        $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        specialinvoke r0.<android.app.DownloadManager$Request: void encodeHttpHeaders(android.content.ContentValues)>($r2);

     label4:
        $r9 = r0.<android.app.DownloadManager$Request: java.lang.CharSequence mTitle>;

        specialinvoke r0.<android.app.DownloadManager$Request: void putIfNonNull(android.content.ContentValues,java.lang.String,java.lang.Object)>($r2, "title", $r9);

        $r10 = r0.<android.app.DownloadManager$Request: java.lang.CharSequence mDescription>;

        specialinvoke r0.<android.app.DownloadManager$Request: void putIfNonNull(android.content.ContentValues,java.lang.String,java.lang.Object)>($r2, "description", $r10);

        $r11 = r0.<android.app.DownloadManager$Request: java.lang.String mMimeType>;

        specialinvoke r0.<android.app.DownloadManager$Request: void putIfNonNull(android.content.ContentValues,java.lang.String,java.lang.Object)>($r2, "mimetype", $r11);

        $i0 = r0.<android.app.DownloadManager$Request: int mNotificationVisibility>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("visibility", $r12);

        $i1 = r0.<android.app.DownloadManager$Request: int mAllowedNetworkTypes>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("allowed_network_types", $r13);

        $z2 = r0.<android.app.DownloadManager$Request: boolean mRoamingAllowed>;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("allow_roaming", $r14);

        $z3 = r0.<android.app.DownloadManager$Request: boolean mMeteredAllowed>;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("allow_metered", $r15);

        $i2 = r0.<android.app.DownloadManager$Request: int mFlags>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("flags", $r16);

        $z4 = r0.<android.app.DownloadManager$Request: boolean mIsVisibleInDownloadsUi>;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("is_visible_in_downloads_ui", $r17);

        return $r2;
    }
}
