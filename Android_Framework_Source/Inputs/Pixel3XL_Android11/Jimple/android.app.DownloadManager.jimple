public class android.app.DownloadManager extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    public static final java.lang.String ACTION_DOWNLOAD_COMPLETE;
    public static final java.lang.String ACTION_DOWNLOAD_COMPLETED;
    public static final java.lang.String ACTION_NOTIFICATION_CLICKED;
    public static final java.lang.String ACTION_VIEW_DOWNLOADS;
    public static final java.lang.String COLUMN_ALLOW_WRITE;
    public static final java.lang.String COLUMN_BYTES_DOWNLOADED_SO_FAR;
    public static final java.lang.String COLUMN_DESCRIPTION;
    public static final java.lang.String COLUMN_DESTINATION;
    public static final java.lang.String COLUMN_FILE_NAME_HINT;
    public static final java.lang.String COLUMN_ID;
    public static final java.lang.String COLUMN_LAST_MODIFIED_TIMESTAMP;
    public static final java.lang.String COLUMN_LOCAL_FILENAME;
    public static final java.lang.String COLUMN_LOCAL_URI;
    public static final java.lang.String COLUMN_MEDIAPROVIDER_URI;
    public static final java.lang.String COLUMN_MEDIASTORE_URI;
    public static final java.lang.String COLUMN_MEDIA_TYPE;
    public static final java.lang.String COLUMN_REASON;
    public static final java.lang.String COLUMN_STATUS;
    public static final java.lang.String COLUMN_TITLE;
    public static final java.lang.String COLUMN_TOTAL_SIZE_BYTES;
    public static final java.lang.String COLUMN_URI;
    public static final int ERROR_BLOCKED;
    public static final int ERROR_CANNOT_RESUME;
    public static final int ERROR_DEVICE_NOT_FOUND;
    public static final int ERROR_FILE_ALREADY_EXISTS;
    public static final int ERROR_FILE_ERROR;
    public static final int ERROR_HTTP_DATA_ERROR;
    public static final int ERROR_INSUFFICIENT_SPACE;
    public static final int ERROR_TOO_MANY_REDIRECTS;
    public static final int ERROR_UNHANDLED_HTTP_CODE;
    public static final int ERROR_UNKNOWN;
    public static final java.lang.String EXTRA_DOWNLOAD_ID;
    public static final java.lang.String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS;
    public static final java.lang.String INTENT_EXTRAS_SORT_BY_SIZE;
    private static final java.lang.String NON_DOWNLOADMANAGER_DOWNLOAD;
    public static final int PAUSED_QUEUED_FOR_WIFI;
    public static final int PAUSED_UNKNOWN;
    public static final int PAUSED_WAITING_FOR_NETWORK;
    public static final int PAUSED_WAITING_TO_RETRY;
    public static final int STATUS_FAILED;
    public static final int STATUS_PAUSED;
    public static final int STATUS_PENDING;
    public static final int STATUS_RUNNING;
    public static final int STATUS_SUCCESSFUL;
    public static final java.lang.String[] UNDERLYING_COLUMNS;
    private boolean mAccessFilename;
    private android.net.Uri mBaseUri;
    private final java.lang.String mPackageName;
    private final android.content.ContentResolver mResolver;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <android.app.DownloadManager: int STATUS_SUCCESSFUL> = 8;

        <android.app.DownloadManager: int STATUS_RUNNING> = 2;

        <android.app.DownloadManager: int STATUS_PENDING> = 1;

        <android.app.DownloadManager: int STATUS_PAUSED> = 4;

        <android.app.DownloadManager: int STATUS_FAILED> = 16;

        <android.app.DownloadManager: int PAUSED_WAITING_TO_RETRY> = 1;

        <android.app.DownloadManager: int PAUSED_WAITING_FOR_NETWORK> = 2;

        <android.app.DownloadManager: int PAUSED_UNKNOWN> = 4;

        <android.app.DownloadManager: int PAUSED_QUEUED_FOR_WIFI> = 3;

        <android.app.DownloadManager: java.lang.String NON_DOWNLOADMANAGER_DOWNLOAD> = "non-dwnldmngr-download-dont-retry2download";

        <android.app.DownloadManager: java.lang.String INTENT_EXTRAS_SORT_BY_SIZE> = "android.app.DownloadManager.extra_sortBySize";

        <android.app.DownloadManager: java.lang.String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS> = "extra_click_download_ids";

        <android.app.DownloadManager: java.lang.String EXTRA_DOWNLOAD_ID> = "extra_download_id";

        <android.app.DownloadManager: int ERROR_UNKNOWN> = 1000;

        <android.app.DownloadManager: int ERROR_UNHANDLED_HTTP_CODE> = 1002;

        <android.app.DownloadManager: int ERROR_TOO_MANY_REDIRECTS> = 1005;

        <android.app.DownloadManager: int ERROR_INSUFFICIENT_SPACE> = 1006;

        <android.app.DownloadManager: int ERROR_HTTP_DATA_ERROR> = 1004;

        <android.app.DownloadManager: int ERROR_FILE_ERROR> = 1001;

        <android.app.DownloadManager: int ERROR_FILE_ALREADY_EXISTS> = 1009;

        <android.app.DownloadManager: int ERROR_DEVICE_NOT_FOUND> = 1007;

        <android.app.DownloadManager: int ERROR_CANNOT_RESUME> = 1008;

        <android.app.DownloadManager: int ERROR_BLOCKED> = 1010;

        <android.app.DownloadManager: java.lang.String COLUMN_URI> = "uri";

        <android.app.DownloadManager: java.lang.String COLUMN_TOTAL_SIZE_BYTES> = "total_size";

        <android.app.DownloadManager: java.lang.String COLUMN_TITLE> = "title";

        <android.app.DownloadManager: java.lang.String COLUMN_STATUS> = "status";

        <android.app.DownloadManager: java.lang.String COLUMN_REASON> = "reason";

        <android.app.DownloadManager: java.lang.String COLUMN_MEDIA_TYPE> = "media_type";

        <android.app.DownloadManager: java.lang.String COLUMN_MEDIASTORE_URI> = "mediastore_uri";

        <android.app.DownloadManager: java.lang.String COLUMN_MEDIAPROVIDER_URI> = "mediaprovider_uri";

        <android.app.DownloadManager: java.lang.String COLUMN_LOCAL_URI> = "local_uri";

        <android.app.DownloadManager: java.lang.String COLUMN_LOCAL_FILENAME> = "local_filename";

        <android.app.DownloadManager: java.lang.String COLUMN_LAST_MODIFIED_TIMESTAMP> = "last_modified_timestamp";

        <android.app.DownloadManager: java.lang.String COLUMN_ID> = "_id";

        <android.app.DownloadManager: java.lang.String COLUMN_FILE_NAME_HINT> = "hint";

        <android.app.DownloadManager: java.lang.String COLUMN_DESTINATION> = "destination";

        <android.app.DownloadManager: java.lang.String COLUMN_DESCRIPTION> = "description";

        <android.app.DownloadManager: java.lang.String COLUMN_BYTES_DOWNLOADED_SO_FAR> = "bytes_so_far";

        <android.app.DownloadManager: java.lang.String COLUMN_ALLOW_WRITE> = "allow_write";

        <android.app.DownloadManager: java.lang.String ACTION_VIEW_DOWNLOADS> = "android.intent.action.VIEW_DOWNLOADS";

        <android.app.DownloadManager: java.lang.String ACTION_NOTIFICATION_CLICKED> = "android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED";

        <android.app.DownloadManager: java.lang.String ACTION_DOWNLOAD_COMPLETED> = "android.intent.action.DOWNLOAD_COMPLETED";

        <android.app.DownloadManager: java.lang.String ACTION_DOWNLOAD_COMPLETE> = "android.intent.action.DOWNLOAD_COMPLETE";

        <android.app.DownloadManager: boolean $assertionsDisabled> = 0;

        $r0 = newarray (java.lang.String)[16];

        $r0[0] = "_id";

        $r0[1] = "local_filename";

        $r0[2] = "mediaprovider_uri";

        $r0[3] = "destination";

        $r0[4] = "title";

        $r0[5] = "description";

        $r0[6] = "uri";

        $r0[7] = "status";

        $r0[8] = "hint";

        $r0[9] = "media_type";

        $r0[10] = "total_size";

        $r0[11] = "last_modified_timestamp";

        $r0[12] = "bytes_so_far";

        $r0[13] = "allow_write";

        $r0[14] = "local_uri";

        $r0[15] = "reason";

        <android.app.DownloadManager: java.lang.String[] UNDERLYING_COLUMNS> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.app.DownloadManager r0;
        android.content.Context r1;
        android.net.Uri $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0;
        boolean z0;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r0.<android.app.DownloadManager: android.net.Uri mBaseUri> = $r2;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<android.app.DownloadManager: android.content.ContentResolver mResolver> = $r3;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        r0.<android.app.DownloadManager: java.lang.String mPackageName> = $r4;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 >= 24 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<android.app.DownloadManager: boolean mAccessFilename> = z0;

        return;
    }

    private static java.lang.String extractDisplayName(java.lang.String)
    {
        java.lang.String r0, $r1, r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(47);

        if $i0 != -1 goto label2;

        return r0;

     label2:
        r2 = r0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label3;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label3:
        $i1 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(47);

        $i2 = $i1 + 1;

        $r1 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r1;
    }

    private static java.lang.String extractFileExtension(java.lang.String)
    {
        int i0, $i1;
        java.lang.String $r0, r1, r2;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <android.app.DownloadManager: java.lang.String extractDisplayName(java.lang.String)>(r1);

        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 != -1 goto label2;

        return null;

     label2:
        $i1 = i0 + 1;

        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r0;
    }

    public static long getActiveNetworkWarningBytes(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        return -1L;
    }

    public static java.lang.Long getMaxBytesOverMobile(android.content.Context)
    {
        long l0;
        android.content.ContentResolver $r0;
        java.lang.Long $r1;
        android.provider.Settings$SettingNotFoundException $r2;
        android.content.Context r3;

        r3 := @parameter0: android.content.Context;

     label1:
        $r0 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>($r0, "download_manager_max_bytes_over_mobile");

     label2:
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)
    {
        long l0;
        android.content.ContentResolver $r0;
        java.lang.Long $r1;
        android.provider.Settings$SettingNotFoundException $r2;
        android.content.Context r3;

        r3 := @parameter0: android.content.Context;

     label1:
        $r0 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>($r0, "download_manager_recommended_max_bytes_over_mobile");

     label2:
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    static java.lang.String[] getWhereArgsForIds(long[])
    {
        long[] r0;
        int $i0;
        java.lang.String[] $r1, $r2;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        $r1 = newarray (java.lang.String)[$i0];

        $r2 = staticinvoke <android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[],java.lang.String[])>(r0, $r1);

        return $r2;
    }

    static java.lang.String[] getWhereArgsForIds(long[], java.lang.String[])
    {
        long[] r0;
        java.lang.String[] r1;
        int $i0, i2;
        long $l1;
        java.lang.String $r2;

        r0 := @parameter0: long[];

        r1 := @parameter1: java.lang.String[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        $l1 = r0[i2];

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    static java.lang.String getWhereClauseForIds(long[])
    {
        long[] r0;
        java.lang.StringBuilder $r2;
        int $i0, i1;
        java.lang.String $r5;

        r0 := @parameter0: long[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OR ");

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ? ");

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static boolean isActiveNetworkExpensive(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        return 0;
    }

    private static java.lang.String resolveMimeType(java.io.File)
    {
        java.lang.String $r0, $r3, r5, r6;
        android.webkit.MimeTypeMap $r1;
        java.util.Locale $r2;
        java.io.File r4;

        r4 := @parameter0: java.io.File;

        $r0 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        r5 = staticinvoke <android.app.DownloadManager: java.lang.String extractFileExtension(java.lang.String)>($r0);

        if r5 != null goto label1;

        return "application/octet-stream";

     label1:
        $r1 = staticinvoke <android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>();

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r3 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        r6 = virtualinvoke $r1.<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>($r3);

        if r6 != null goto label2;

        return "application/octet-stream";

     label2:
        return r6;
    }

    private static void validateArgumentIsNonEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r5, r6;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can\'t be null");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean)
    {
        android.app.DownloadManager r0;
        java.lang.String r1, r2, r3, r4;
        boolean z0, z1;
        long l0, $l1;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        l0 := @parameter5: long;

        z1 := @parameter6: boolean;

        $l1 = virtualinvoke r0.<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean,android.net.Uri,android.net.Uri)>(r1, r2, z0, r3, r4, l0, z1, 0, null, null);

        return $l1;
    }

    public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean, android.net.Uri, android.net.Uri)
    {
        android.app.DownloadManager r0;
        java.lang.String r1, r2, r3, r4;
        boolean z0, z1;
        long l0, $l1;
        android.net.Uri r5, r6;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        l0 := @parameter5: long;

        z1 := @parameter6: boolean;

        r5 := @parameter7: android.net.Uri;

        r6 := @parameter8: android.net.Uri;

        $l1 = virtualinvoke r0.<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean,android.net.Uri,android.net.Uri)>(r1, r2, z0, r3, r4, l0, z1, 0, r5, r6);

        return $l1;
    }

    public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean, boolean)
    {
        android.app.DownloadManager r0;
        java.lang.String r1, r2, r3, r4;
        boolean z0, z1, z2;
        long l0, $l1;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        l0 := @parameter5: long;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        $l1 = virtualinvoke r0.<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean,android.net.Uri,android.net.Uri)>(r1, r2, z0, r3, r4, l0, z1, z2, null, null);

        return $l1;
    }

    public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean, boolean, android.net.Uri, android.net.Uri)
    {
        android.app.DownloadManager r0;
        java.lang.String r1, r2, r3, $r12, $r20, $r21, r24;
        boolean z0, z1, z2;
        long l0, $l3;
        android.net.Uri r4, $r18, r25, r28;
        byte $b2;
        java.lang.IllegalArgumentException $r5;
        android.app.DownloadManager$Request $r6, $r7, $r8, $r23, r26;
        java.lang.Integer $r10, $r13, $r15, $r16, $r17;
        java.io.File $r11;
        java.lang.Long $r14;
        android.content.ContentResolver $r19;
        android.content.ContentValues r27;
        int i4, i5, i6;

        r0 := @this: android.app.DownloadManager;

        r24 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        l0 := @parameter5: long;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        r25 := @parameter8: android.net.Uri;

        r4 := @parameter9: android.net.Uri;

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("title", r24);

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("description", r1);

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("path", r3);

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("mimeType", r2);

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label9;

        if r25 == null goto label1;

        $r23 = new android.app.DownloadManager$Request;

        specialinvoke $r23.<android.app.DownloadManager$Request: void <init>(android.net.Uri)>(r25);

        r26 = $r23;

        goto label2;

     label1:
        $r6 = new android.app.DownloadManager$Request;

        specialinvoke $r6.<android.app.DownloadManager$Request: void <init>(java.lang.String)>("non-dwnldmngr-download-dont-retry2download");

        r26 = $r6;

     label2:
        $r7 = virtualinvoke r26.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setTitle(java.lang.CharSequence)>(r24);

        $r8 = virtualinvoke $r7.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDescription(java.lang.CharSequence)>(r1);

        virtualinvoke $r8.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setMimeType(java.lang.String)>(r2);

        if r4 == null goto label3;

        $r21 = virtualinvoke r4.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke r26.<android.app.DownloadManager$Request: android.app.DownloadManager$Request addRequestHeader(java.lang.String,java.lang.String)>("Referer", $r21);

     label3:
        r27 = virtualinvoke r26.<android.app.DownloadManager$Request: android.content.ContentValues toContentValues(java.lang.String)>(null);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("destination", $r10);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("_data", r3);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>(r3);

        $r12 = staticinvoke <android.app.DownloadManager: java.lang.String resolveMimeType(java.io.File)>($r11);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("mimetype", $r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("status", $r13);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("total_bytes", $r14);

        if z0 == 0 goto label4;

        i4 = 0;

        goto label5;

     label4:
        i4 = 2;

     label5:
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("scanned", $r15);

        if z1 == 0 goto label6;

        i5 = 3;

        goto label7;

     label6:
        i5 = 2;

     label7:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("visibility", $r16);

        i6 = (int) z2;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke r27.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("allow_write", $r17);

        $r19 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r18 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r28 = virtualinvoke $r19.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r18, r27);

        if r28 != null goto label8;

        return -1L;

     label8:
        $r20 = virtualinvoke r28.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r20);

        return $l3;

     label9:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" invalid value for param: totalBytes");

        throw $r5;
    }

    public long enqueue(android.app.DownloadManager$Request)
    {
        android.app.DownloadManager r0;
        java.lang.String $r1, $r5;
        android.net.Uri $r2, $r4;
        android.content.ContentResolver $r3;
        long $l0;
        android.app.DownloadManager$Request r6;
        android.content.ContentValues r7;

        r0 := @this: android.app.DownloadManager;

        r6 := @parameter0: android.app.DownloadManager$Request;

        $r1 = r0.<android.app.DownloadManager: java.lang.String mPackageName>;

        r7 = virtualinvoke r6.<android.app.DownloadManager$Request: android.content.ContentValues toContentValues(java.lang.String)>($r1);

        $r3 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r2 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        $r4 = virtualinvoke $r3.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r2, r7);

        $r5 = virtualinvoke $r4.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

        return $l0;
    }

    public transient void forceDownload(long[])
    {
        android.app.DownloadManager r0;
        long[] r1;
        android.content.ContentValues $r3;
        java.lang.Integer $r4, $r5, $r6;
        android.content.ContentResolver $r7;
        android.net.Uri $r8;
        java.lang.String $r9;
        java.lang.String[] $r10;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: long[];

        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(190);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("status", $r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("control", $r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("bypass_recommended_size_limit", $r6);

        $r7 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r8 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $r9 = staticinvoke <android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>(r1);

        $r10 = staticinvoke <android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>(r1);

        virtualinvoke $r7.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r8, $r3, $r9, $r10);

        return;
    }

    public android.net.Uri getDownloadUri(long)
    {
        android.app.DownloadManager r0;
        long l0;
        android.net.Uri $r1, $r2;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r1 = <android.provider.Downloads$Impl: android.net.Uri ALL_DOWNLOADS_CONTENT_URI>;

        $r2 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r1, l0);

        return $r2;
    }

    public java.lang.String getMimeTypeForDownloadedFile(long)
    {
        android.app.DownloadManager r0;
        long l0;
        java.lang.String r1;
        android.app.DownloadManager$Query $r2, r5;
        long[] $r3;
        boolean $z0;
        int $i1;
        java.lang.Throwable $r4;
        android.database.Cursor r6, r7;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r2 = new android.app.DownloadManager$Query;

        specialinvoke $r2.<android.app.DownloadManager$Query: void <init>()>();

        $r3 = newarray (long)[1];

        $r3[0] = l0;

        r5 = virtualinvoke $r2.<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>($r3);

        r6 = null;

     label01:
        r7 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>(r5);

     label02:
        if r7 != null goto label04;

        if r7 == null goto label03;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        r6 = r7;

     label05:
        $z0 = interfaceinvoke r7.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label10;

     label06:
        r6 = r7;

     label07:
        $i1 = interfaceinvoke r7.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("media_type");

        r1 = interfaceinvoke r7.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label08:
        if r7 == null goto label09;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label09:
        return r1;

     label10:
        if r7 == null goto label11;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label11:
        return null;

     label12:
        $r4 := @caughtexception;

        if r6 == null goto label13;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label13:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
    }

    public android.net.Uri getUriForDownloadedFile(long)
    {
        android.app.DownloadManager r0;
        long l0;
        android.net.Uri r1, $r4;
        android.app.DownloadManager$Query $r2, r6;
        long[] $r3;
        boolean $z0;
        int $i1, $i2;
        java.lang.Throwable $r5;
        android.database.Cursor r7, r8;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r2 = new android.app.DownloadManager$Query;

        specialinvoke $r2.<android.app.DownloadManager$Query: void <init>()>();

        $r3 = newarray (long)[1];

        $r3[0] = l0;

        r6 = virtualinvoke $r2.<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>($r3);

        r7 = null;

     label01:
        r8 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>(r6);

     label02:
        if r8 != null goto label04;

        if r8 == null goto label03;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        r7 = r8;

     label05:
        $z0 = interfaceinvoke r8.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label12;

     label06:
        r7 = r8;

     label07:
        $i1 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("status");

        $i2 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>($i1);

        if 8 != $i2 goto label12;

     label08:
        r7 = r8;

     label09:
        $r4 = <android.provider.Downloads$Impl: android.net.Uri ALL_DOWNLOADS_CONTENT_URI>;

        r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r4, l0);

     label10:
        if r8 == null goto label11;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label11:
        return r1;

     label12:
        if r8 == null goto label13;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label13:
        return null;

     label14:
        $r5 := @caughtexception;

        if r7 == null goto label15;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label15:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
    }

    public transient int markRowDeleted(long[])
    {
        android.app.DownloadManager r0;
        long[] r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        android.content.ContentResolver $r3;
        android.net.Uri $r4;
        java.lang.String $r5;
        java.lang.String[] $r6;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: long[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 == 0 goto label1;

        $r3 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r4 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $r5 = staticinvoke <android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>(r1);

        $r6 = staticinvoke <android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>(r1);

        $i1 = virtualinvoke $r3.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r4, $r5, $r6);

        return $i1;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input param \'ids\' can\'t be null");

        throw $r2;
    }

    public void onMediaStoreDownloadsDeleted(android.util.LongSparseArray)
    {
        android.app.DownloadManager r0;
        android.os.Bundle r1;
        long[] r2;
        java.lang.String[] r3;
        android.net.Uri $r4;
        android.content.ContentResolver $r5;
        int $i0, $i1, $i2, i4;
        long $l3;
        java.lang.Object $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9, $r11;
        android.os.RemoteException $r10;
        android.util.LongSparseArray r12;
        android.content.ContentProviderClient r13;

        r0 := @this: android.app.DownloadManager;

        r12 := @parameter0: android.util.LongSparseArray;

     label01:
        $r5 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r4 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        r13 = virtualinvoke $r5.<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>($r4);

     label02:
        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        $i0 = virtualinvoke r12.<android.util.LongSparseArray: int size()>();

        r2 = newarray (long)[$i0];

        $i1 = virtualinvoke r12.<android.util.LongSparseArray: int size()>();

        r3 = newarray (java.lang.String)[$i1];

        $i2 = virtualinvoke r12.<android.util.LongSparseArray: int size()>();

        i4 = $i2 - 1;

     label03:
        if i4 < 0 goto label06;

     label04:
        $l3 = virtualinvoke r12.<android.util.LongSparseArray: long keyAt(int)>(i4);

        r2[i4] = $l3;

        $r7 = virtualinvoke r12.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i4);

        $r8 = (java.lang.String) $r7;

        r3[i4] = $r8;

     label05:
        i4 = i4 + -1;

        goto label03;

     label06:
        virtualinvoke r1.<android.os.Bundle: void putLongArray(java.lang.String,long[])>("ids", r2);

        virtualinvoke r1.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("mime_types", r3);

        virtualinvoke r13.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("mediastore_downloads_deleted", null, r1);

     label07:
        if r13 == null goto label09;

     label08:
        virtualinvoke r13.<android.content.ContentProviderClient: void close()>();

     label09:
        goto label17;

     label10:
        $r11 := @caughtexception;

        if r13 == null goto label15;

     label11:
        virtualinvoke r13.<android.content.ContentProviderClient: void close()>();

     label12:
        goto label15;

     label13:
        $r9 := @caughtexception;

     label14:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label15:
        throw $r11;

     label16:
        $r10 := @caughtexception;

     label17:
        return;

        catch android.os.RemoteException from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch android.os.RemoteException from label14 to label15 with label16;
        catch android.os.RemoteException from label15 to label16 with label16;
    }

    public android.os.ParcelFileDescriptor openDownloadedFile(long) throws java.io.FileNotFoundException
    {
        android.app.DownloadManager r0;
        long l0;
        android.content.ContentResolver $r1;
        android.net.Uri $r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r1 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r2 = virtualinvoke r0.<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>(l0);

        $r3 = virtualinvoke $r1.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>($r2, "r");

        return $r3;
    }

    public android.database.Cursor query(android.app.DownloadManager$Query)
    {
        android.app.DownloadManager r0;
        android.app.DownloadManager$Query r1;
        java.lang.String[] $r2;
        android.database.Cursor $r3;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: android.app.DownloadManager$Query;

        $r2 = <android.app.DownloadManager: java.lang.String[] UNDERLYING_COLUMNS>;

        $r3 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query,java.lang.String[])>(r1, $r2);

        return $r3;
    }

    public android.database.Cursor query(android.app.DownloadManager$Query, java.lang.String[])
    {
        android.app.DownloadManager r0;
        java.lang.String[] r1;
        android.net.Uri $r2, $r5;
        android.content.ContentResolver $r3;
        android.app.DownloadManager$CursorTranslator $r4;
        boolean $z0;
        android.app.DownloadManager$Query r6;
        android.database.Cursor r7;

        r0 := @this: android.app.DownloadManager;

        r6 := @parameter0: android.app.DownloadManager$Query;

        r1 := @parameter1: java.lang.String[];

        $r3 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r2 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        r7 = virtualinvoke r6.<android.app.DownloadManager$Query: android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)>($r3, r1, $r2);

        if r7 != null goto label1;

        return null;

     label1:
        $r4 = new android.app.DownloadManager$CursorTranslator;

        $r5 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $z0 = r0.<android.app.DownloadManager: boolean mAccessFilename>;

        specialinvoke $r4.<android.app.DownloadManager$CursorTranslator: void <init>(android.database.Cursor,android.net.Uri,boolean)>(r7, $r5, $z0);

        return $r4;
    }

    public transient int remove(long[])
    {
        android.app.DownloadManager r0;
        long[] r1;
        int $i0;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: long[];

        $i0 = virtualinvoke r0.<android.app.DownloadManager: int markRowDeleted(long[])>(r1);

        return $i0;
    }

    public boolean rename(android.content.Context, long, java.lang.String)
    {
        android.app.DownloadManager r0;
        long l0;
        java.lang.String r1, $r6, $r12, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r35, $r42, $r48, $r51, r56;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        java.lang.StringBuilder $r2, $r31, $r36, r67, r69, r71, r73, r76;
        java.lang.SecurityException $r5;
        android.app.DownloadManager$Query $r7, $r9;
        long[] $r8, r63;
        int $i1, $i2, $i3, $i4;
        java.io.File $r28, $r29, $r30, r59;
        java.lang.IllegalStateException $r34, $r41, r66, r68, r70, r72, r75;
        android.content.ContentResolver $r43, $r45, $r49;
        android.content.ContentValues $r47;
        android.net.Uri $r50;
        java.lang.String[] $r52;
        java.lang.Throwable $r53, $r54;
        android.content.Context r55;
        android.database.Cursor r58;

        r0 := @this: android.app.DownloadManager;

        r55 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        r56 := @parameter2: java.lang.String;

        $z1 = staticinvoke <android.os.FileUtils: boolean isValidFatFilename(java.lang.String)>(r56);

        if $z1 == 0 goto label21;

        $r7 = new android.app.DownloadManager$Query;

        specialinvoke $r7.<android.app.DownloadManager$Query: void <init>()>();

        z5 = 1;

        $r8 = newarray (long)[1];

        $r8[0] = l0;

        $r9 = virtualinvoke $r7.<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>($r8);

        r58 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>($r9);

        if r58 == null goto label15;

     label01:
        $z2 = interfaceinvoke r58.<android.database.Cursor: boolean moveToFirst()>();

        if $z2 == 0 goto label13;

        $i1 = interfaceinvoke r58.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("status");

        $i2 = interfaceinvoke r58.<android.database.Cursor: int getInt(int)>($i1);

        if $i2 != 8 goto label12;

        $i3 = interfaceinvoke r58.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("local_filename");

        r1 = interfaceinvoke r58.<android.database.Cursor: java.lang.String getString(int)>($i3);

     label02:
        if r1 == null goto label11;

     label03:
        r59 = new java.io.File;

        specialinvoke r59.<java.io.File: void <init>(java.lang.String)>(r1);

        z0 = virtualinvoke r59.<java.io.File: boolean exists()>();

     label04:
        if z0 == 0 goto label10;

        if r58 == null goto label05;

        interfaceinvoke r58.<android.database.Cursor: void close()>();

     label05:
        $r28 = new java.io.File;

        specialinvoke $r28.<java.io.File: void <init>(java.lang.String)>(r1);

        $r29 = new java.io.File;

        $r30 = virtualinvoke $r28.<java.io.File: java.io.File getParentFile()>();

        specialinvoke $r29.<java.io.File: void <init>(java.io.File,java.lang.String)>($r30, r56);

        $z3 = virtualinvoke $r29.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label09;

        $z4 = virtualinvoke $r28.<java.io.File: boolean renameTo(java.io.File)>($r29);

        if $z4 == 0 goto label08;

        $r43 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        staticinvoke <android.provider.MediaStore: android.net.Uri scanFile(android.content.ContentResolver,java.io.File)>($r43, $r28);

        $r45 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        staticinvoke <android.provider.MediaStore: android.net.Uri scanFile(android.content.ContentResolver,java.io.File)>($r45, $r29);

        $r47 = new android.content.ContentValues;

        specialinvoke $r47.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r47.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("title", r56);

        $r48 = virtualinvoke $r29.<java.io.File: java.lang.String toString()>();

        virtualinvoke $r47.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("_data", $r48);

        virtualinvoke $r47.<android.content.ContentValues: void putNull(java.lang.String)>("mediaprovider_uri");

        r63 = newarray (long)[1];

        r63[0] = l0;

        $r49 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r50 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $r51 = staticinvoke <android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>(r63);

        $r52 = staticinvoke <android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>(r63);

        $i4 = virtualinvoke $r49.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r50, $r47, $r51, $r52);

        if $i4 != 1 goto label06;

        goto label07;

     label06:
        z5 = 0;

     label07:
        return z5;

     label08:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename file from ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r41 = new java.lang.IllegalStateException;

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r42);

        throw $r41;

     label09:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File already exists: ");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r34 = new java.lang.IllegalStateException;

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r35);

        throw $r34;

     label10:
        r66 = new java.lang.IllegalStateException;

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Downloaded file doesn\'t exist anymore: ");

        $r25 = staticinvoke <android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)>(r58);

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r66.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw r66;

     label11:
        r68 = new java.lang.IllegalStateException;

        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Download doesn\'t have a valid file path: ");

        $r21 = staticinvoke <android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)>(r58);

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r68.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw r68;

     label12:
        r70 = new java.lang.IllegalStateException;

        r71 = new java.lang.StringBuilder;

        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Download is not completed yet: ");

        $r17 = staticinvoke <android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)>(r58);

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r70.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw r70;

     label13:
        r72 = new java.lang.IllegalStateException;

        r73 = new java.lang.StringBuilder;

        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing download id=");

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r15 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r72.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw r72;

     label14:
        $r54 := @caughtexception;

        goto label16;

     label15:
        r75 = new java.lang.IllegalStateException;

        r76 = new java.lang.StringBuilder;

        specialinvoke r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing cursor for download id=");

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r75.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw r75;

     label16:
        if r58 == null goto label20;

     label17:
        interfaceinvoke r58.<android.database.Cursor: void close()>();

     label18:
        goto label20;

     label19:
        $r53 := @caughtexception;

        virtualinvoke $r54.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r53);

     label20:
        throw $r54;

     label21:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid filename");

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    public transient void restartDownload(long[])
    {
        android.app.DownloadManager r0;
        boolean z0;
        int i0, $i2, $i3;
        java.lang.IllegalArgumentException r1;
        android.app.DownloadManager$Query $r2, $r3;
        android.content.ContentValues $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;
        android.content.ContentResolver $r9;
        android.net.Uri $r10;
        java.lang.String $r11, $r15;
        java.lang.String[] $r12;
        long $l4;
        java.lang.Throwable $r16;
        long[] r17;
        android.database.Cursor r18;
        java.lang.StringBuilder r19;

        r0 := @this: android.app.DownloadManager;

        r17 := @parameter0: long[];

        $r2 = new android.app.DownloadManager$Query;

        specialinvoke $r2.<android.app.DownloadManager$Query: void <init>()>();

        $r3 = virtualinvoke $r2.<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>(r17);

        r18 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>($r3);

     label01:
        interfaceinvoke r18.<android.database.Cursor: boolean moveToFirst()>();

     label02:
        z0 = interfaceinvoke r18.<android.database.Cursor: boolean isAfterLast()>();

     label03:
        if z0 != 0 goto label09;

     label04:
        $i2 = interfaceinvoke r18.<android.database.Cursor: int getColumnIndex(java.lang.String)>("status");

        i0 = interfaceinvoke r18.<android.database.Cursor: int getInt(int)>($i2);

     label05:
        if i0 == 8 goto label07;

        if i0 != 16 goto label06;

        goto label07;

     label06:
        r1 = new java.lang.IllegalArgumentException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot restart incomplete download: ");

        $i3 = interfaceinvoke r18.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        $l4 = interfaceinvoke r18.<android.database.Cursor: long getLong(int)>($i3);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r15 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw r1;

     label07:
        interfaceinvoke r18.<android.database.Cursor: boolean moveToNext()>();

     label08:
        goto label02;

     label09:
        interfaceinvoke r18.<android.database.Cursor: void close()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("current_bytes", $r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("total_bytes", $r6);

        virtualinvoke $r4.<android.content.ContentValues: void putNull(java.lang.String)>("_data");

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(190);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("status", $r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("numfailed", $r8);

        $r9 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r10 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $r11 = staticinvoke <android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>(r17);

        $r12 = staticinvoke <android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>(r17);

        virtualinvoke $r9.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r10, $r4, $r11, $r12);

        return;

     label10:
        $r16 := @caughtexception;

        interfaceinvoke r18.<android.database.Cursor: void close()>();

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public void setAccessAllDownloads(boolean)
    {
        android.app.DownloadManager r0;
        boolean z0;
        android.net.Uri $r1, $r2;

        r0 := @this: android.app.DownloadManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = <android.provider.Downloads$Impl: android.net.Uri ALL_DOWNLOADS_CONTENT_URI>;

        r0.<android.app.DownloadManager: android.net.Uri mBaseUri> = $r2;

        goto label2;

     label1:
        $r1 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r0.<android.app.DownloadManager: android.net.Uri mBaseUri> = $r1;

     label2:
        return;
    }

    public void setAccessFilename(boolean)
    {
        android.app.DownloadManager r0;
        boolean z0;

        r0 := @this: android.app.DownloadManager;

        z0 := @parameter0: boolean;

        r0.<android.app.DownloadManager: boolean mAccessFilename> = z0;

        return;
    }
}
