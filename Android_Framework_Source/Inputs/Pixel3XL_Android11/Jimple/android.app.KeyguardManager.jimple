public class android.app.KeyguardManager extends java.lang.Object
{
    public static final java.lang.String ACTION_CONFIRM_DEVICE_CREDENTIAL;
    public static final java.lang.String ACTION_CONFIRM_DEVICE_CREDENTIAL_WITH_USER;
    public static final java.lang.String ACTION_CONFIRM_FRP_CREDENTIAL;
    public static final java.lang.String EXTRA_ALTERNATE_BUTTON_LABEL;
    public static final java.lang.String EXTRA_DESCRIPTION;
    public static final java.lang.String EXTRA_DISALLOW_BIOMETRICS_IF_POLICY_EXISTS;
    public static final java.lang.String EXTRA_TITLE;
    public static final int RESULT_ALTERNATE;
    private static final java.lang.String TAG;
    private final android.app.IActivityManager mAm;
    private final android.content.Context mContext;
    private final android.app.INotificationManager mNotificationManager;
    private final android.app.trust.ITrustManager mTrustManager;
    private final android.view.IWindowManager mWM;

    void <init>(android.content.Context) throws android.os.ServiceManager$ServiceNotFoundException
    {
        android.app.KeyguardManager r0;
        android.content.Context r1;
        android.view.IWindowManager $r2;
        android.app.IActivityManager $r3;
        android.os.IBinder $r4, $r6;
        android.app.trust.ITrustManager $r5;
        android.app.INotificationManager $r7;

        r0 := @this: android.app.KeyguardManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.KeyguardManager: android.content.Context mContext> = r1;

        $r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        r0.<android.app.KeyguardManager: android.view.IWindowManager mWM> = $r2;

        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r0.<android.app.KeyguardManager: android.app.IActivityManager mAm> = $r3;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("trust");

        $r5 = staticinvoke <android.app.trust.ITrustManager$Stub: android.app.trust.ITrustManager asInterface(android.os.IBinder)>($r4);

        r0.<android.app.KeyguardManager: android.app.trust.ITrustManager mTrustManager> = $r5;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("notification");

        $r7 = staticinvoke <android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>($r6);

        r0.<android.app.KeyguardManager: android.app.INotificationManager mNotificationManager> = $r7;

        return;
    }

    static android.content.Context access$000(android.app.KeyguardManager)
    {
        android.app.KeyguardManager r0;
        android.content.Context $r1;

        r0 := @parameter0: android.app.KeyguardManager;

        $r1 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        return $r1;
    }

    static android.view.IWindowManager access$100(android.app.KeyguardManager)
    {
        android.app.KeyguardManager r0;
        android.view.IWindowManager $r1;

        r0 := @parameter0: android.app.KeyguardManager;

        $r1 = r0.<android.app.KeyguardManager: android.view.IWindowManager mWM>;

        return $r1;
    }

    private boolean checkInitialLockMethodUsage()
    {
        android.app.KeyguardManager r0;
        android.content.Context $r1, $r3;
        int $i0;
        java.lang.SecurityException $r2;
        android.content.pm.PackageManager $r4;
        boolean $z0;

        r0 := @this: android.app.KeyguardManager;

        $r1 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SET_INITIAL_LOCK");

        if $i0 != 0 goto label2;

        $r3 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r4.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_INITIAL_LOCK permission.");

        throw $r2;
    }

    private java.lang.String getSettingsPackageForIntent(android.content.Intent)
    {
        android.app.KeyguardManager r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        int $i0;
        java.lang.Object $r3;
        android.content.pm.ResolveInfo $r4;
        android.content.pm.ActivityInfo $r5;
        java.lang.String $r6;
        android.content.Intent r7;
        java.util.List r8;

        r0 := @this: android.app.KeyguardManager;

        r7 := @parameter0: android.content.Intent;

        $r1 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r8 = virtualinvoke $r2.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>(r7, 1048576);

        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        if $i0 >= 0 goto label1;

        $r3 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (android.content.pm.ResolveInfo) $r3;

        $r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        return $r6;

     label1:
        return "com.android.settings";
    }

    public android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence, java.lang.CharSequence)
    {
        android.app.KeyguardManager r0;
        java.lang.CharSequence r1, r2;
        boolean $z0;
        android.content.Intent $r4;
        java.lang.String $r7;

        r0 := @this: android.app.KeyguardManager;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        $z0 = virtualinvoke r0.<android.app.KeyguardManager: boolean isDeviceSecure()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.CONFIRM_DEVICE_CREDENTIAL");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.app.extra.TITLE", r1);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.app.extra.DESCRIPTION", r2);

        $r7 = specialinvoke r0.<android.app.KeyguardManager: java.lang.String getSettingsPackageForIntent(android.content.Intent)>($r4);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r7);

        return $r4;
    }

    public android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        android.app.KeyguardManager r0;
        java.lang.CharSequence r1, r2;
        int i0;
        boolean $z0;
        android.content.Intent $r4;
        java.lang.String $r8;

        r0 := @this: android.app.KeyguardManager;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<android.app.KeyguardManager: boolean isDeviceSecure(int)>(i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.CONFIRM_DEVICE_CREDENTIAL_WITH_USER");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.app.extra.TITLE", r1);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.app.extra.DESCRIPTION", r2);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.USER_ID", i0);

        $r8 = specialinvoke r0.<android.app.KeyguardManager: java.lang.String getSettingsPackageForIntent(android.content.Intent)>($r4);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r8);

        return $r4;
    }

    public android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence, java.lang.CharSequence, int, boolean)
    {
        android.app.KeyguardManager r0;
        java.lang.CharSequence r1, r3;
        int i0;
        boolean z0;
        android.content.Intent r4;

        r0 := @this: android.app.KeyguardManager;

        r3 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r4 = virtualinvoke r0.<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence,int)>(r3, r1, i0);

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("check_dpm", z0);

        return r4;
    }

    public android.content.Intent createConfirmFactoryResetCredentialIntent(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)
    {
        android.app.KeyguardManager r0;
        java.lang.CharSequence r1, r2, r17;
        android.content.Context $r3, $r5;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r4, r20;
        android.content.ContentResolver $r6;
        int $i1;
        java.lang.IllegalStateException $r7;
        android.os.IBinder $r8;
        android.content.Intent $r9;
        java.lang.String $r13;
        android.os.RemoteException $r15;
        java.lang.RuntimeException $r16;
        android.service.persistentdata.IPersistentDataBlockService r18;

        r0 := @this: android.app.KeyguardManager;

        r17 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.CharSequence;

        $r3 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>($r3);

        if $z0 == 0 goto label9;

        $r5 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "device_provisioned", 0);

        if $i1 != 0 goto label8;

     label1:
        $r8 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("persistent_data_block");

        r18 = staticinvoke <android.service.persistentdata.IPersistentDataBlockService$Stub: android.service.persistentdata.IPersistentDataBlockService asInterface(android.os.IBinder)>($r8);

     label2:
        if r18 == null goto label6;

     label3:
        $z1 = interfaceinvoke r18.<android.service.persistentdata.IPersistentDataBlockService: boolean hasFrpCredentialHandle()>();

        if $z1 != 0 goto label5;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("KeyguardManager", "The persistent data block does not have a factory reset credential.");

     label4:
        return null;

     label5:
        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.CONFIRM_FRP_CREDENTIAL");

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.app.extra.TITLE", r17);

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.app.extra.DESCRIPTION", r1);

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.app.extra.ALTERNATE_BUTTON_LABEL", r2);

        $r13 = specialinvoke r0.<android.app.KeyguardManager: java.lang.String getSettingsPackageForIntent(android.content.Intent)>($r9);

        virtualinvoke $r9.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r13);

        return $r9;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyguardManager", "No persistent data block service");

        r20 = new java.lang.UnsupportedOperationException;

        specialinvoke r20.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not supported on this device");

        throw r20;

     label7:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r16;

     label8:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyguardManager", "Factory reset credential cannot be verified after provisioning.");

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("must not be provisioned yet");

        throw $r7;

     label9:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeyguardManager", "Factory reset credentials not supported.");

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not supported on this device");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label6 to label7 with label7;
    }

    public void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)
    {
        android.app.KeyguardManager r0;
        android.view.IWindowManager r1;
        android.app.KeyguardManager$2 r2;
        android.os.RemoteException $r3;
        android.app.KeyguardManager$OnKeyguardExitResult r4;

        r0 := @this: android.app.KeyguardManager;

        r4 := @parameter0: android.app.KeyguardManager$OnKeyguardExitResult;

     label1:
        r1 = r0.<android.app.KeyguardManager: android.view.IWindowManager mWM>;

        r2 = new android.app.KeyguardManager$2;

        specialinvoke r2.<android.app.KeyguardManager$2: void <init>(android.app.KeyguardManager,android.app.KeyguardManager$OnKeyguardExitResult)>(r0, r4);

        interfaceinvoke r1.<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMinLockLength(boolean, int)
    {
        android.app.KeyguardManager r0;
        boolean z0, $z1;
        android.app.admin.PasswordMetrics r1, $r6;
        android.content.Context $r2, $r4;
        java.lang.Object $r3;
        android.app.admin.DevicePolicyManager $r5;
        int $i0, $i1, i2, i3;

        r0 := @this: android.app.KeyguardManager;

        z0 := @parameter0: boolean;

        i2 := @parameter1: int;

        $z1 = specialinvoke r0.<android.app.KeyguardManager: boolean checkInitialLockMethodUsage()>();

        if $z1 != 0 goto label1;

        return -1;

     label1:
        i3 = staticinvoke <android.app.admin.PasswordMetrics: int sanitizeComplexityLevel(int)>(i2);

        $r2 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r5 = (android.app.admin.DevicePolicyManager) $r3;

        $r4 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int getUserId()>();

        r1 = virtualinvoke $r5.<android.app.admin.DevicePolicyManager: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)>($i0);

        $r6 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics applyComplexity(android.app.admin.PasswordMetrics,boolean,int)>(r1, z0, i3);

        $i1 = $r6.<android.app.admin.PasswordMetrics: int length>;

        return $i1;
    }

    public boolean getPrivateNotificationsAllowed()
    {
        android.app.KeyguardManager r0;
        boolean z0;
        android.app.INotificationManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.KeyguardManager;

     label1:
        $r2 = r0.<android.app.KeyguardManager: android.app.INotificationManager mNotificationManager>;

        z0 = interfaceinvoke $r2.<android.app.INotificationManager: boolean getPrivateNotificationsAllowed()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean inKeyguardRestrictedInputMode()
    {
        android.app.KeyguardManager r0;
        boolean $z0;

        r0 := @this: android.app.KeyguardManager;

        $z0 = virtualinvoke r0.<android.app.KeyguardManager: boolean isKeyguardLocked()>();

        return $z0;
    }

    public boolean isDeviceLocked()
    {
        android.app.KeyguardManager r0;
        android.content.Context $r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.KeyguardManager;

        $r1 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $z0 = virtualinvoke r0.<android.app.KeyguardManager: boolean isDeviceLocked(int)>($i0);

        return $z0;
    }

    public boolean isDeviceLocked(int)
    {
        android.app.KeyguardManager r0;
        int i0;
        boolean z0;
        android.app.trust.ITrustManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.KeyguardManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.app.KeyguardManager: android.app.trust.ITrustManager mTrustManager>;

        z0 = interfaceinvoke $r2.<android.app.trust.ITrustManager: boolean isDeviceLocked(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceSecure()
    {
        android.app.KeyguardManager r0;
        android.content.Context $r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.KeyguardManager;

        $r1 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $z0 = virtualinvoke r0.<android.app.KeyguardManager: boolean isDeviceSecure(int)>($i0);

        return $z0;
    }

    public boolean isDeviceSecure(int)
    {
        android.app.KeyguardManager r0;
        int i0;
        boolean z0;
        android.app.trust.ITrustManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.KeyguardManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.app.KeyguardManager: android.app.trust.ITrustManager mTrustManager>;

        z0 = interfaceinvoke $r2.<android.app.trust.ITrustManager: boolean isDeviceSecure(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isKeyguardLocked()
    {
        android.app.KeyguardManager r0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.KeyguardManager;

     label1:
        $r2 = r0.<android.app.KeyguardManager: android.view.IWindowManager mWM>;

        z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean isKeyguardLocked()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isKeyguardSecure()
    {
        android.app.KeyguardManager r0;
        boolean z0;
        android.content.Context $r2;
        android.view.IWindowManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.KeyguardManager;

     label1:
        $r3 = r0.<android.app.KeyguardManager: android.view.IWindowManager mWM>;

        $r2 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        z0 = interfaceinvoke $r3.<android.view.IWindowManager: boolean isKeyguardSecure(int)>($i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isValidLockPasswordComplexity(int, byte[], int)
    {
        android.app.KeyguardManager r0;
        int i0, $i1, $i2, i3, i4;
        byte[] r1;
        android.app.admin.PasswordMetrics r2;
        android.content.Context $r3, $r5;
        java.lang.Object $r4;
        android.app.admin.DevicePolicyManager $r6;
        java.util.List $r7;
        boolean z0, z1, z2;

        r0 := @this: android.app.KeyguardManager;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i3 := @parameter2: int;

        z0 = specialinvoke r0.<android.app.KeyguardManager: boolean checkInitialLockMethodUsage()>();

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        i4 = staticinvoke <android.app.admin.PasswordMetrics: int sanitizeComplexityLevel(int)>(i3);

        $r3 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r6 = (android.app.admin.DevicePolicyManager) $r4;

        $r5 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r5.<android.content.Context: int getUserId()>();

        r2 = virtualinvoke $r6.<android.app.admin.DevicePolicyManager: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)>($i1);

        if i0 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        $r7 = staticinvoke <android.app.admin.PasswordMetrics: java.util.List validatePassword(android.app.admin.PasswordMetrics,int,boolean,byte[])>(r2, i4, z2, r1);

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i2 != 0 goto label4;

        z1 = 1;

     label4:
        return z1;
    }

    public android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)
    {
        android.app.KeyguardManager r0;
        java.lang.String r1;
        android.app.KeyguardManager$KeyguardLock $r2;

        r0 := @this: android.app.KeyguardManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.app.KeyguardManager$KeyguardLock;

        specialinvoke $r2.<android.app.KeyguardManager$KeyguardLock: void <init>(android.app.KeyguardManager,java.lang.String)>(r0, r1);

        return $r2;
    }

    public void requestDismissKeyguard(android.app.Activity, android.app.KeyguardManager$KeyguardDismissCallback)
    {
        android.app.KeyguardManager r0;
        android.app.Activity r1;
        android.app.KeyguardManager$KeyguardDismissCallback r2;

        r0 := @this: android.app.KeyguardManager;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: android.app.KeyguardManager$KeyguardDismissCallback;

        virtualinvoke r0.<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)>(r1, null, r2);

        return;
    }

    public void requestDismissKeyguard(android.app.Activity, java.lang.CharSequence, android.app.KeyguardManager$KeyguardDismissCallback)
    {
        android.app.KeyguardManager r0;
        java.lang.CharSequence r1;
        android.app.KeyguardManager$KeyguardDismissCallback r2;
        android.app.IActivityTaskManager r3;
        android.os.IBinder r4;
        android.app.KeyguardManager$1 r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.app.Activity r8;

        r0 := @this: android.app.KeyguardManager;

        r8 := @parameter0: android.app.Activity;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: android.app.KeyguardManager$KeyguardDismissCallback;

     label1:
        r3 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        r4 = virtualinvoke r8.<android.app.Activity: android.os.IBinder getActivityToken()>();

        r5 = new android.app.KeyguardManager$1;

        specialinvoke r5.<android.app.KeyguardManager$1: void <init>(android.app.KeyguardManager,android.app.KeyguardManager$KeyguardDismissCallback,android.app.Activity)>(r0, r2, r8);

        interfaceinvoke r3.<android.app.IActivityTaskManager: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>(r4, r5, r1);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setLock(int, byte[], int)
    {
        android.app.KeyguardManager r0;
        int i0, i1, i2;
        byte[] r1;
        boolean $z0, $z1, $z2, z6;
        com.android.internal.widget.LockPatternUtils $r2;
        android.content.Context $r3, $r4;
        java.nio.charset.Charset $r5;
        com.android.internal.widget.LockscreenCredential $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Throwable $r12;
        java.lang.Exception $r13;
        java.util.List r15;
        java.lang.String r16, r17;

        r0 := @this: android.app.KeyguardManager;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<android.app.KeyguardManager: boolean checkInitialLockMethodUsage()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r2 = new com.android.internal.widget.LockPatternUtils;

        $r3 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        specialinvoke $r2.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r3);

        $r4 = r0.<android.app.KeyguardManager: android.content.Context mContext>;

        i2 = virtualinvoke $r4.<android.content.Context: int getUserId()>();

        $z1 = virtualinvoke r0.<android.app.KeyguardManager: boolean isDeviceSecure(int)>(i2);

        if $z1 == 0 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyguardManager", "Password already set, rejecting call to setLock");

        return 0;

     label02:
        $z2 = virtualinvoke r0.<android.app.KeyguardManager: boolean isValidLockPasswordComplexity(int,byte[],int)>(i0, r1, i1);

        if $z2 != 0 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyguardManager", "Password is not valid, rejecting call to setLock");

        return 0;

     label03:
        z6 = 0;

        if i0 == 0 goto label12;

        if i0 == 1 goto label09;

        if i0 == 2 goto label06;

     label04:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyguardManager", "Unknown lock type, returning a failure");

     label05:
        goto label15;

     label06:
        r15 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List byteArrayToPattern(byte[])>(r1);

     label07:
        $r10 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPattern(java.util.List)>(r15);

        $r11 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>($r10, $r11, i2);

        interfaceinvoke r15.<java.util.List: void clear()>();

     label08:
        z6 = 1;

        goto label15;

     label09:
        r16 = new java.lang.String;

        specialinvoke r16.<java.lang.String: void <init>(byte[])>(r1);

     label10:
        $r8 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPin(java.lang.CharSequence)>(r16);

        $r9 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>($r8, $r9, i2);

     label11:
        z6 = 1;

        goto label15;

     label12:
        r17 = new java.lang.String;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        specialinvoke r17.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r1, $r5);

     label13:
        $r6 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPassword(java.lang.CharSequence)>(r17);

        $r7 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>($r6, $r7, i2);

     label14:
        z6 = 1;

     label15:
        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r1, 0);

        goto label20;

     label16:
        $r12 := @caughtexception;

        goto label21;

     label17:
        $r13 := @caughtexception;

     label18:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeyguardManager", "Save lock exception", $r13);

     label19:
        z6 = 0;

        goto label15;

     label20:
        return z6;

     label21:
        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r1, 0);

        throw $r12;

        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Exception from label06 to label07 with label17;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Exception from label10 to label11 with label17;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Exception from label12 to label13 with label17;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
    }

    public void setPrivateNotificationsAllowed(boolean)
    {
        android.app.KeyguardManager r0;
        boolean z0;
        android.app.INotificationManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.KeyguardManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.app.KeyguardManager: android.app.INotificationManager mNotificationManager>;

        interfaceinvoke $r2.<android.app.INotificationManager: void setPrivateNotificationsAllowed(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.app.KeyguardManager: java.lang.String TAG> = "KeyguardManager";

        <android.app.KeyguardManager: int RESULT_ALTERNATE> = 1;

        <android.app.KeyguardManager: java.lang.String EXTRA_TITLE> = "android.app.extra.TITLE";

        <android.app.KeyguardManager: java.lang.String EXTRA_DISALLOW_BIOMETRICS_IF_POLICY_EXISTS> = "check_dpm";

        <android.app.KeyguardManager: java.lang.String EXTRA_DESCRIPTION> = "android.app.extra.DESCRIPTION";

        <android.app.KeyguardManager: java.lang.String EXTRA_ALTERNATE_BUTTON_LABEL> = "android.app.extra.ALTERNATE_BUTTON_LABEL";

        <android.app.KeyguardManager: java.lang.String ACTION_CONFIRM_FRP_CREDENTIAL> = "android.app.action.CONFIRM_FRP_CREDENTIAL";

        <android.app.KeyguardManager: java.lang.String ACTION_CONFIRM_DEVICE_CREDENTIAL_WITH_USER> = "android.app.action.CONFIRM_DEVICE_CREDENTIAL_WITH_USER";

        <android.app.KeyguardManager: java.lang.String ACTION_CONFIRM_DEVICE_CREDENTIAL> = "android.app.action.CONFIRM_DEVICE_CREDENTIAL";

        return;
    }
}
