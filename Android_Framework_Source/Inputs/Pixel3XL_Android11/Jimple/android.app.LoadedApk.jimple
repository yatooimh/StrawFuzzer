public final class android.app.LoadedApk extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    static final boolean DEBUG;
    private static final java.lang.String PROPERTY_NAME_APPEND_NATIVE;
    static final java.lang.String TAG;
    private final android.app.ActivityThread mActivityThread;
    private android.app.AppComponentFactory mAppComponentFactory;
    private java.lang.String mAppDir;
    private android.app.Application mApplication;
    private android.content.pm.ApplicationInfo mApplicationInfo;
    private final java.lang.ClassLoader mBaseClassLoader;
    private java.lang.ClassLoader mClassLoader;
    private java.io.File mCredentialProtectedDataDirFile;
    private java.lang.String mDataDir;
    private java.io.File mDataDirFile;
    private java.lang.ClassLoader mDefaultClassLoader;
    private java.io.File mDeviceProtectedDataDirFile;
    private final android.view.DisplayAdjustments mDisplayAdjustments;
    private final boolean mIncludeCode;
    private java.lang.String mLibDir;
    private java.lang.String[] mOverlayDirs;
    final java.lang.String mPackageName;
    private final android.util.ArrayMap mReceivers;
    private final boolean mRegisterPackage;
    private java.lang.String mResDir;
    android.content.res.Resources mResources;
    private final boolean mSecurityViolation;
    private final android.util.ArrayMap mServices;
    private java.lang.String[] mSplitAppDirs;
    private java.lang.String[] mSplitClassLoaderNames;
    private android.app.LoadedApk$SplitDependencyLoaderImpl mSplitLoader;
    private java.lang.String[] mSplitNames;
    private java.lang.String[] mSplitResDirs;
    private final android.util.ArrayMap mUnboundServices;
    private final android.util.ArrayMap mUnregisteredReceivers;

    static void <clinit>()
    {
        <android.app.LoadedApk: java.lang.String TAG> = "LoadedApk";

        <android.app.LoadedApk: java.lang.String PROPERTY_NAME_APPEND_NATIVE> = "pi.append_native_lib_paths";

        <android.app.LoadedApk: boolean DEBUG> = 0;

        <android.app.LoadedApk: boolean $assertionsDisabled> = 0;

        return;
    }

    void <init>(android.app.ActivityThread)
    {
        android.app.LoadedApk r0;
        android.view.DisplayAdjustments $r1;
        android.util.ArrayMap $r2, $r3, $r4, $r5;
        android.content.pm.ApplicationInfo $r6, $r8, $r9, $r10;
        android.content.res.Resources $r7;
        java.lang.ClassLoader $r11, $r12, r15;
        android.app.ActivityThread r13;
        android.app.AppComponentFactory r16;

        r0 := @this: android.app.LoadedApk;

        r13 := @parameter0: android.app.ActivityThread;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.view.DisplayAdjustments;

        specialinvoke $r1.<android.view.DisplayAdjustments: void <init>()>();

        r0.<android.app.LoadedApk: android.view.DisplayAdjustments mDisplayAdjustments> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mUnregisteredReceivers> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mServices> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mUnboundServices> = $r5;

        r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread> = r13;

        $r6 = new android.content.pm.ApplicationInfo;

        specialinvoke $r6.<android.content.pm.ApplicationInfo: void <init>()>();

        r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo> = $r6;

        $r6.<android.content.pm.ApplicationInfo: java.lang.String packageName> = "android";

        r0.<android.app.LoadedApk: java.lang.String mPackageName> = "android";

        r0.<android.app.LoadedApk: java.lang.String mAppDir> = null;

        r0.<android.app.LoadedApk: java.lang.String mResDir> = null;

        r0.<android.app.LoadedApk: java.lang.String[] mSplitAppDirs> = null;

        r0.<android.app.LoadedApk: java.lang.String[] mSplitResDirs> = null;

        r0.<android.app.LoadedApk: java.lang.String[] mSplitClassLoaderNames> = null;

        r0.<android.app.LoadedApk: java.lang.String[] mOverlayDirs> = null;

        r0.<android.app.LoadedApk: java.lang.String mDataDir> = null;

        r0.<android.app.LoadedApk: java.io.File mDataDirFile> = null;

        r0.<android.app.LoadedApk: java.io.File mDeviceProtectedDataDirFile> = null;

        r0.<android.app.LoadedApk: java.io.File mCredentialProtectedDataDirFile> = null;

        r0.<android.app.LoadedApk: java.lang.String mLibDir> = null;

        r0.<android.app.LoadedApk: java.lang.ClassLoader mBaseClassLoader> = null;

        r0.<android.app.LoadedApk: boolean mSecurityViolation> = 0;

        r0.<android.app.LoadedApk: boolean mIncludeCode> = 1;

        r0.<android.app.LoadedApk: boolean mRegisterPackage> = 0;

        $r7 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r0.<android.app.LoadedApk: android.content.res.Resources mResources> = $r7;

        r15 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader> = r15;

        $r8 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        r16 = specialinvoke r0.<android.app.LoadedApk: android.app.AppComponentFactory createAppFactory(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>($r8, r15);

        r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory> = r16;

        $r11 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        $r9 = new android.content.pm.ApplicationInfo;

        $r10 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        specialinvoke $r9.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>($r10);

        $r12 = virtualinvoke r16.<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>($r11, $r9);

        r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader> = $r12;

        return;
    }

    public void <init>(android.app.ActivityThread, android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, java.lang.ClassLoader, boolean, boolean, boolean)
    {
        android.app.LoadedApk r0;
        android.app.ActivityThread r1;
        android.content.pm.ApplicationInfo r2, $r13;
        android.content.res.CompatibilityInfo r3;
        java.lang.ClassLoader r4, $r12;
        boolean z0, z1, z2;
        android.view.DisplayAdjustments $r5, $r11;
        android.util.ArrayMap $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        android.app.AppComponentFactory $r14;

        r0 := @this: android.app.LoadedApk;

        r1 := @parameter0: android.app.ActivityThread;

        r2 := @parameter1: android.content.pm.ApplicationInfo;

        r3 := @parameter2: android.content.res.CompatibilityInfo;

        r4 := @parameter3: java.lang.ClassLoader;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new android.view.DisplayAdjustments;

        specialinvoke $r5.<android.view.DisplayAdjustments: void <init>()>();

        r0.<android.app.LoadedApk: android.view.DisplayAdjustments mDisplayAdjustments> = $r5;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers> = $r6;

        $r7 = new android.util.ArrayMap;

        specialinvoke $r7.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mUnregisteredReceivers> = $r7;

        $r8 = new android.util.ArrayMap;

        specialinvoke $r8.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mServices> = $r8;

        $r9 = new android.util.ArrayMap;

        specialinvoke $r9.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.LoadedApk: android.util.ArrayMap mUnboundServices> = $r9;

        r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread> = r1;

        specialinvoke r0.<android.app.LoadedApk: void setApplicationInfo(android.content.pm.ApplicationInfo)>(r2);

        $r10 = r2.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        r0.<android.app.LoadedApk: java.lang.String mPackageName> = $r10;

        r0.<android.app.LoadedApk: java.lang.ClassLoader mBaseClassLoader> = r4;

        r0.<android.app.LoadedApk: boolean mSecurityViolation> = z0;

        r0.<android.app.LoadedApk: boolean mIncludeCode> = z1;

        r0.<android.app.LoadedApk: boolean mRegisterPackage> = z2;

        $r11 = r0.<android.app.LoadedApk: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r11.<android.view.DisplayAdjustments: void setCompatibilityInfo(android.content.res.CompatibilityInfo)>(r3);

        $r13 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r12 = r0.<android.app.LoadedApk: java.lang.ClassLoader mBaseClassLoader>;

        $r14 = specialinvoke r0.<android.app.LoadedApk: android.app.AppComponentFactory createAppFactory(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>($r13, $r12);

        r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory> = $r14;

        return;
    }

    static java.lang.String[] access$000(android.app.LoadedApk)
    {
        android.app.LoadedApk r0;
        java.lang.String[] $r1;

        r0 := @parameter0: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String[] mSplitNames>;

        return $r1;
    }

    static void access$100(android.app.LoadedApk, java.util.List)
    {
        android.app.LoadedApk r0;
        java.util.List r1;

        r0 := @parameter0: android.app.LoadedApk;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.LoadedApk: void createOrUpdateClassLoaderLocked(java.util.List)>(r1);

        return;
    }

    static java.lang.ClassLoader access$200(android.app.LoadedApk)
    {
        android.app.LoadedApk r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

        return $r1;
    }

    static java.lang.String[] access$300(android.app.LoadedApk)
    {
        android.app.LoadedApk r0;
        java.lang.String[] $r1;

        r0 := @parameter0: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String[] mSplitResDirs>;

        return $r1;
    }

    static java.lang.String[] access$400(android.app.LoadedApk)
    {
        android.app.LoadedApk r0;
        java.lang.String[] $r1;

        r0 := @parameter0: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String[] mSplitAppDirs>;

        return $r1;
    }

    static java.lang.String[] access$500(android.app.LoadedApk)
    {
        android.app.LoadedApk r0;
        java.lang.String[] $r1;

        r0 := @parameter0: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String[] mSplitClassLoaderNames>;

        return $r1;
    }

    private static android.content.pm.ApplicationInfo adjustNativeLibraryPaths(android.content.pm.ApplicationInfo)
    {
        java.lang.String r0, $r1, $r2, $r4, $r8, $r10, $r11, r13, r15;
        dalvik.system.VMRuntime $r3;
        java.lang.StringBuilder $r5;
        boolean $z0, $z1;
        android.content.pm.ApplicationInfo $r9, r12;

        r12 := @parameter0: android.content.pm.ApplicationInfo;

        $r1 = r12.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r1 == null goto label3;

        $r2 = r12.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        if $r2 == null goto label3;

        $r3 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        r0 = virtualinvoke $r3.<dalvik.system.VMRuntime: java.lang.String vmInstructionSet()>();

        $r4 = r12.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        r13 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ro.dalvik.vm.isa.");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>($r8);

        $z0 = virtualinvoke r15.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r13 = r15;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 == 0 goto label3;

        $r9 = new android.content.pm.ApplicationInfo;

        specialinvoke $r9.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>(r12);

        $r10 = $r9.<android.content.pm.ApplicationInfo: java.lang.String secondaryNativeLibraryDir>;

        $r9.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir> = $r10;

        $r11 = $r9.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        $r9.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r11;

        return $r9;

     label3:
        return r12;
    }

    private android.os.StrictMode$ThreadPolicy allowThreadDiskReads()
    {
        android.app.LoadedApk r0;
        android.app.ActivityThread $r1;
        android.os.StrictMode$ThreadPolicy $r2;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>();

        return $r2;
    }

    private static void appendApkLibPathIfNeeded(java.lang.String, android.content.pm.ApplicationInfo, java.util.List)
    {
        java.lang.String r0, $r4, $r8, $r10;
        android.content.pm.ApplicationInfo r1;
        java.util.List r2;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        r2 := @parameter2: java.util.List;

        if r2 == null goto label1;

        $r4 = r1.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r4 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z0 == 0 goto label1;

        $i0 = r1.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 26 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/lib/");

        $r8 = r1.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

     label1:
        return;
    }

    private static void appendSharedLibrariesLibPathsIfNeeded(java.util.List, android.content.pm.ApplicationInfo, java.util.Set, java.util.List)
    {
        android.content.pm.ApplicationInfo r0;
        java.util.Set r1;
        java.util.List r2, $r5, r8, r10;
        android.content.pm.SharedLibraryInfo r3;
        boolean $z0, $z2;
        java.lang.Object $r4, $r6;
        java.lang.String $r7;
        java.util.Iterator r9, r11;

        r8 := @parameter0: java.util.List;

        r0 := @parameter1: android.content.pm.ApplicationInfo;

        r1 := @parameter2: java.util.Set;

        r2 := @parameter3: java.util.List;

        if r8 != null goto label1;

        return;

     label1:
        r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.SharedLibraryInfo) $r4;

        r10 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.util.List getAllCodePaths()>();

        interfaceinvoke r1.<java.util.Set: boolean addAll(java.util.Collection)>(r10);

        r11 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        staticinvoke <android.app.LoadedApk: void appendApkLibPathIfNeeded(java.lang.String,android.content.pm.ApplicationInfo,java.util.List)>($r7, r0, r2);

        goto label3;

     label4:
        $r5 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        staticinvoke <android.app.LoadedApk: void appendSharedLibrariesLibPathsIfNeeded(java.util.List,android.content.pm.ApplicationInfo,java.util.Set,java.util.List)>($r5, r0, r1, r2);

        goto label2;

     label5:
        return;
    }

    private android.app.AppComponentFactory createAppFactory(android.content.pm.ApplicationInfo, java.lang.ClassLoader)
    {
        android.app.LoadedApk r0;
        java.lang.ClassLoader r1;
        boolean $z0;
        java.lang.String $r2, $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        android.content.pm.ApplicationInfo r7;
        android.app.AppComponentFactory r8, $r10;

        r0 := @this: android.app.LoadedApk;

        r7 := @parameter0: android.content.pm.ApplicationInfo;

        r1 := @parameter1: java.lang.ClassLoader;

        $z0 = r0.<android.app.LoadedApk: boolean mIncludeCode>;

        if $z0 == 0 goto label4;

        $r2 = r7.<android.content.pm.ApplicationInfo: java.lang.String appComponentFactory>;

        if $r2 == null goto label4;

        if r1 == null goto label4;

     label1:
        $r3 = r7.<android.content.pm.ApplicationInfo: java.lang.String appComponentFactory>;

        $r4 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        r8 = (android.app.AppComponentFactory) $r5;

     label2:
        return r8;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LoadedApk", "Unable to instantiate appComponentFactory", $r6);

     label4:
        $r10 = <android.app.AppComponentFactory: android.app.AppComponentFactory DEFAULT>;

        return $r10;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private void createOrUpdateClassLoaderLocked(java.util.List)
    {
        android.app.LoadedApk r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, $z18, z19, z20;
        java.lang.String $r2, $r7, $r8, $r16, $r26, $r43, $r45, $r50, $r52, $r57, $r59, $r63, $r67, $r75, $r76, $r77, $r79, $r94, $r96, r105, $r107, $r109, r112, r115, r117, r119, r121, r122, r127, r133;
        android.app.ActivityThread $r3, $r15, $r47, $r110, $r113, r118;
        java.util.ArrayList $r4, $r5;
        android.content.pm.ApplicationInfo $r6, $r10, $r11, $r21, $r24, $r25, $r28, $r33, $r34, $r39, $r70, $r72, $r73, $r83, $r84, $r85, $r106, $r108, $r111, r120;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.ClassLoader $r9, $r13, $r14, $r18, $r20, $r27, $r31, $r32, $r36, $r37, $r40, $r41, $r80, $r81, $r82, $r86, $r87, r100, r130, $r134;
        android.app.AppComponentFactory $r12, $r29, $r35, $r42, r101;
        android.app.ApplicationLoaders $r17, $r19, $r23, $r38;
        java.util.List $r22, r99, r129;
        java.lang.Object $r30;
        android.content.pm.IPackageManager $r44, $r49, $r78;
        android.os.GraphicsEnvironment $r46;
        android.os.Bundle $r48;
        java.lang.StringBuilder $r55, $r65, $r92, r123;
        java.lang.String[] $r60;
        java.nio.file.Path $r61, $r62;
        java.util.Optional $r71;
        android.app.IActivityManager $r74;
        android.os.RemoteException $r88, $r91, $r97;
        java.lang.RuntimeException $r89, $r98;
        java.lang.Throwable $r90;
        android.os.StrictMode$ThreadPolicy r126, r128, r131;

        r0 := @this: android.app.LoadedApk;

        r99 := @parameter0: java.util.List;

        $r2 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z1 == 0 goto label04;

        $r80 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

        if $r80 == null goto label01;

        return;

     label01:
        r100 = r0.<android.app.LoadedApk: java.lang.ClassLoader mBaseClassLoader>;

        if r100 == null goto label02;

        r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader> = r100;

        goto label03;

     label02:
        $r81 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader> = $r81;

     label03:
        $r83 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r82 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        r101 = specialinvoke r0.<android.app.LoadedApk: android.app.AppComponentFactory createAppFactory(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>($r83, $r82);

        r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory> = r101;

        $r86 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        $r84 = new android.content.pm.ApplicationInfo;

        $r85 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        specialinvoke $r84.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>($r85);

        $r87 = virtualinvoke r101.<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>($r86, $r84);

        r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader> = $r87;

        return;

     label04:
        $r3 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        if $r3 == null goto label08;

        $r76 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $r77 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        $z13 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r76, $r77);

        if $z13 != 0 goto label08;

        $z14 = r0.<android.app.LoadedApk: boolean mIncludeCode>;

        if $z14 == 0 goto label08;

     label05:
        $r78 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        $r79 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        interfaceinvoke $r78.<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>($r79, 6);

     label06:
        goto label08;

     label07:
        $r88 := @caughtexception;

        $r89 = virtualinvoke $r88.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r89;

     label08:
        $z15 = r0.<android.app.LoadedApk: boolean mRegisterPackage>;

        if $z15 == 0 goto label12;

     label09:
        $r74 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r75 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        interfaceinvoke $r74.<android.app.IActivityManager: void addPackageDependency(java.lang.String)>($r75);

     label10:
        goto label12;

     label11:
        $r97 := @caughtexception;

        $r98 = virtualinvoke $r97.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r98;

     label12:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(10);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(10);

        $r6 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $z2 = virtualinvoke $r6.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z2 == 0 goto label13;

        $r73 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $z12 = virtualinvoke $r73.<android.content.pm.ApplicationInfo: boolean isUpdatedSystemApp()>();

        if $z12 != 0 goto label13;

        z16 = 1;

        goto label14;

     label13:
        z16 = 0;

     label14:
        r105 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.library.path");

        z0 = virtualinvoke r105.<java.lang.String: boolean contains(java.lang.CharSequence)>("/vendor/lib");

        z17 = z16;

        $r106 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r107 = virtualinvoke $r106.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        if $r107 == null goto label15;

        z17 = z16;

        $r72 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $z10 = virtualinvoke $r72.<android.content.pm.ApplicationInfo: boolean isVendor()>();

        if $z10 == 0 goto label15;

        z17 = z16;

        $z11 = z0 ^ 1;

        if $z11 == 0 goto label15;

        z17 = 0;

     label15:
        $r108 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r109 = virtualinvoke $r108.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        if $r109 == null goto label16;

        $r70 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $z8 = virtualinvoke $r70.<android.content.pm.ApplicationInfo: boolean isProduct()>();

        if $z8 == 0 goto label16;

        $r71 = staticinvoke <android.sysprop.VndkProperties: java.util.Optional product_vndk_version()>();

        $z9 = virtualinvoke $r71.<java.util.Optional: boolean isPresent()>();

        if $z9 == 0 goto label16;

        z17 = 0;

        goto label16;

     label16:
        $r110 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        $r111 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        staticinvoke <android.app.LoadedApk: void makePaths(android.app.ActivityThread,boolean,android.content.pm.ApplicationInfo,java.util.List,java.util.List)>($r110, z17, $r111, $r4, $r5);

        r112 = r0.<android.app.LoadedApk: java.lang.String mDataDir>;

        $r113 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        if $r113 != null goto label17;

        r112 = "";

     label17:
        if z17 == 0 goto label18;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r112);

        $r57 = <java.io.File: java.lang.String pathSeparator>;

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke r0.<android.app.LoadedApk: java.lang.String getAppDir()>();

        $r60 = newarray (java.lang.String)[0];

        $r61 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r59, $r60);

        $r62 = interfaceinvoke $r61.<java.nio.file.Path: java.nio.file.Path getParent()>();

        $r63 = interfaceinvoke $r62.<java.nio.file.Path: java.lang.String toString()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        r115 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r115);

        $r67 = <java.io.File: java.lang.String pathSeparator>;

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        r112 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label18;

     label18:
        $r7 = <java.io.File: java.lang.String pathSeparator>;

        r117 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>($r7, $r5);

        r118 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        if r118 == null goto label24;

        r119 = virtualinvoke r118.<android.app.ActivityThread: java.lang.String getStringCoreSetting(java.lang.String,java.lang.String)>("gpu_debug_app", "");

        $z6 = virtualinvoke r119.<java.lang.String: boolean isEmpty()>();

        if $z6 != 0 goto label24;

        $r43 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $z7 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>(r119);

        if $z7 == 0 goto label24;

     label19:
        $r44 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        $r45 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $i4 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r120 = interfaceinvoke $r44.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>($r45, 128, $i4);

        $r46 = staticinvoke <android.os.GraphicsEnvironment: android.os.GraphicsEnvironment getInstance()>();

        $r47 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        $r48 = virtualinvoke $r47.<android.app.ActivityThread: android.os.Bundle getCoreSettings()>();

        $r49 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        $r50 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        r121 = virtualinvoke $r46.<android.os.GraphicsEnvironment: java.lang.String getDebugLayerPathsFromSettings(android.os.Bundle,android.content.pm.IPackageManager,java.lang.String,android.content.pm.ApplicationInfo)>($r48, $r49, $r50, r120);

     label20:
        r122 = r112;

        if r121 == null goto label22;

     label21:
        r123 = new java.lang.StringBuilder;

        specialinvoke r123.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r112);

        $r52 = <java.io.File: java.lang.String pathSeparator>;

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r121);

        r122 = virtualinvoke r123.<java.lang.StringBuilder: java.lang.String toString()>();

     label22:
        r112 = r122;

        goto label24;

     label23:
        $r91 := @caughtexception;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException when fetching debug layer paths for: ");

        $r94 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94);

        $r96 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityThread", $r96);

     label24:
        $z18 = r0.<android.app.LoadedApk: boolean mIncludeCode>;

        if $z18 != 0 goto label27;

        $r31 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        if $r31 != null goto label25;

        r126 = specialinvoke r0.<android.app.LoadedApk: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>();

        $r38 = staticinvoke <android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>();

        $r39 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $i3 = $r39.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $r40 = r0.<android.app.LoadedApk: java.lang.ClassLoader mBaseClassLoader>;

        $r41 = virtualinvoke $r38.<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.ClassLoader,java.lang.String)>("", $i3, z17, r117, r112, $r40, null);

        r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader> = $r41;

        specialinvoke r0.<android.app.LoadedApk: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r126);

        $r42 = <android.app.AppComponentFactory: android.app.AppComponentFactory DEFAULT>;

        r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory> = $r42;

        goto label25;

     label25:
        $r32 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

        if $r32 != null goto label26;

        $r35 = r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory>;

        $r36 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        $r33 = new android.content.pm.ApplicationInfo;

        $r34 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        specialinvoke $r33.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>($r34);

        $r37 = virtualinvoke $r35.<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>($r36, $r33);

        r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader> = $r37;

     label26:
        return;

     label27:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 != 1 goto label28;

        $r30 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        r127 = (java.lang.String) $r30;

        goto label29;

     label28:
        $r8 = <java.io.File: java.lang.String pathSeparator>;

        r127 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>($r8, $r4);

     label29:
        $r9 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        if $r9 != null goto label30;

        r128 = specialinvoke r0.<android.app.LoadedApk: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>();

        $r21 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r22 = $r21.<android.content.pm.ApplicationInfo: java.util.List sharedLibraryInfos>;

        r129 = specialinvoke r0.<android.app.LoadedApk: java.util.List createSharedLibrariesLoaders(java.util.List,boolean,java.lang.String,java.lang.String)>($r22, z17, r117, r112);

        $r23 = staticinvoke <android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>();

        $r24 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $i2 = $r24.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $r27 = r0.<android.app.LoadedApk: java.lang.ClassLoader mBaseClassLoader>;

        $r25 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r26 = $r25.<android.content.pm.ApplicationInfo: java.lang.String classLoaderName>;

        r130 = virtualinvoke $r23.<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoaderWithSharedLibraries(java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.ClassLoader,java.lang.String,java.util.List)>(r127, $i2, z17, r117, r112, $r27, $r26, r129);

        r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader> = r130;

        $r28 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r29 = specialinvoke r0.<android.app.LoadedApk: android.app.AppComponentFactory createAppFactory(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>($r28, r130);

        r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory> = $r29;

        specialinvoke r0.<android.app.LoadedApk: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r128);

        z19 = 1;

        goto label31;

     label30:
        z19 = 0;

     label31:
        $z3 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label35;

        $z5 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("pi.append_native_lib_paths", 1);

        if $z5 == 0 goto label35;

        r131 = specialinvoke r0.<android.app.LoadedApk: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>();

     label32:
        $r19 = staticinvoke <android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>();

        $r20 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        virtualinvoke $r19.<android.app.ApplicationLoaders: void addNative(java.lang.ClassLoader,java.util.Collection)>($r20, $r5);

     label33:
        specialinvoke r0.<android.app.LoadedApk: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r131);

        goto label35;

     label34:
        $r90 := @caughtexception;

        specialinvoke r0.<android.app.LoadedApk: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r131);

        throw $r90;

     label35:
        z20 = z19;

        if r99 == null goto label36;

        z20 = z19;

        $i1 = interfaceinvoke r99.<java.util.List: int size()>();

        if $i1 <= 0 goto label36;

        $r16 = <java.io.File: java.lang.String pathSeparator>;

        r133 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>($r16, r99);

        $r17 = staticinvoke <android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>();

        $r18 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        virtualinvoke $r17.<android.app.ApplicationLoaders: void addPath(java.lang.ClassLoader,java.lang.String)>($r18, r133);

        z20 = 1;

     label36:
        if z20 == 0 goto label37;

        $z4 = staticinvoke <android.app.ActivityThread: boolean isSystem()>();

        if $z4 != 0 goto label37;

        $r15 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        if $r15 == null goto label37;

        specialinvoke r0.<android.app.LoadedApk: void setupJitProfileSupport()>();

     label37:
        $r134 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

        if $r134 != null goto label38;

        $r12 = r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory>;

        $r13 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        $r10 = new android.content.pm.ApplicationInfo;

        $r11 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        specialinvoke $r10.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>($r11);

        $r14 = virtualinvoke $r12.<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>($r13, $r10);

        r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader> = $r14;

     label38:
        return;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch android.os.RemoteException from label19 to label20 with label23;
        catch android.os.RemoteException from label21 to label22 with label23;
        catch java.lang.Throwable from label32 to label33 with label34;
    }

    private java.util.List createSharedLibrariesLoaders(java.util.List, boolean, java.lang.String, java.lang.String)
    {
        android.app.LoadedApk r0;
        boolean z0, $z1;
        java.lang.String r1, r2;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        android.content.pm.SharedLibraryInfo $r6;
        java.lang.ClassLoader $r7;
        java.util.List r8;
        java.util.Iterator r9;

        r0 := @this: android.app.LoadedApk;

        r8 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        if r8 != null goto label1;

        return null;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.pm.SharedLibraryInfo) $r5;

        $r7 = virtualinvoke r0.<android.app.LoadedApk: java.lang.ClassLoader createSharedLibraryLoader(android.content.pm.SharedLibraryInfo,boolean,java.lang.String,java.lang.String)>($r6, z0, r1, r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        return $r4;
    }

    private static java.lang.String[] getLibrariesFor(java.lang.String)
    {
        android.content.pm.IPackageManager $r0;
        int $i0;
        java.lang.String[] $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.content.pm.ApplicationInfo r5;

        r4 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r5 = interfaceinvoke $r0.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r4, 1024, $i0);

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r1 = r5.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        return $r1;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private android.app.IServiceConnection getServiceDispatcherCommon(android.content.ServiceConnection, android.content.Context, android.os.Handler, java.util.concurrent.Executor, int)
    {
        android.app.LoadedApk r0;
        android.content.Context r1;
        int i0;
        android.util.ArrayMap r2, r3, $r4, $r8, r17;
        java.lang.Object $r5, $r10;
        android.app.LoadedApk$ServiceDispatcher $r6, r15, r16;
        java.lang.Throwable $r11;
        android.content.ServiceConnection r12;
        android.os.Handler r13;
        java.util.concurrent.Executor r14;
        android.app.IServiceConnection r18;

        r0 := @this: android.app.LoadedApk;

        r12 := @parameter0: android.content.ServiceConnection;

        r1 := @parameter1: android.content.Context;

        r13 := @parameter2: android.os.Handler;

        r14 := @parameter3: java.util.concurrent.Executor;

        i0 := @parameter4: int;

        r2 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        entermonitor r2;

        r15 = null;

     label01:
        $r4 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.util.ArrayMap) $r5;

     label02:
        if r3 == null goto label04;

     label03:
        $r10 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        r15 = (android.app.LoadedApk$ServiceDispatcher) $r10;

     label04:
        if r15 != null goto label13;

        if r14 == null goto label07;

     label05:
        r16 = new android.app.LoadedApk$ServiceDispatcher;

        specialinvoke r16.<android.app.LoadedApk$ServiceDispatcher: void <init>(android.content.ServiceConnection,android.content.Context,java.util.concurrent.Executor,int)>(r12, r1, r14, i0);

     label06:
        goto label08;

     label07:
        $r6 = new android.app.LoadedApk$ServiceDispatcher;

        specialinvoke $r6.<android.app.LoadedApk$ServiceDispatcher: void <init>(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>(r12, r1, r13, i0);

        r16 = $r6;

     label08:
        r17 = r3;

        if r3 != null goto label11;

     label09:
        r17 = new android.util.ArrayMap;

        specialinvoke r17.<android.util.ArrayMap: void <init>()>();

     label10:
        $r8 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r17);

     label11:
        virtualinvoke r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r16);

     label12:
        goto label15;

     label13:
        virtualinvoke r15.<android.app.LoadedApk$ServiceDispatcher: void validate(android.content.Context,android.os.Handler,java.util.concurrent.Executor)>(r1, r13, r14);

     label14:
        r16 = r15;

     label15:
        r18 = virtualinvoke r16.<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>();

        exitmonitor r2;

     label16:
        return r18;

     label17:
        $r11 := @caughtexception;

     label18:
        exitmonitor r2;

     label19:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void initializeJavaContextClassLoader()
    {
        android.app.LoadedApk r0;
        java.lang.String r1, $r3, $r8, $r9;
        int $i0;
        android.content.pm.ApplicationInfo $r4, $r7;
        java.lang.Thread $r5;
        boolean $z1, z2, z3, z4;
        android.content.pm.PackageInfo r10;
        java.lang.Object r11;
        android.app.LoadedApk$WarningContextClassLoader r12;
        java.lang.ClassLoader r13;

        r0 := @this: android.app.LoadedApk;

        staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        $r3 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r10 = staticinvoke <android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUserCached(java.lang.String,int,int)>($r3, 268435456, $i0);

        r1 = r10.<android.content.pm.PackageInfo: java.lang.String sharedUserId>;

        if r1 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r4 = r10.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r4 == null goto label3;

        $r9 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $r7 = r10.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r8 = $r7.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label3;

        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        z4 = 1;

        if z2 != 0 goto label6;

        if z3 == 0 goto label5;

        z4 = 1;

        goto label6;

     label5:
        z4 = 0;

     label6:
        if z4 == 0 goto label7;

        r12 = new android.app.LoadedApk$WarningContextClassLoader;

        specialinvoke r12.<android.app.LoadedApk$WarningContextClassLoader: void <init>(android.app.LoadedApk$1)>(null);

        r11 = r12;

        goto label8;

     label7:
        r11 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

     label8:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r13 = (java.lang.ClassLoader) r11;

        virtualinvoke $r5.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r13);

        return;
    }

    public static void makePaths(android.app.ActivityThread, android.content.pm.ApplicationInfo, java.util.List)
    {
        android.app.ActivityThread r0;
        android.content.pm.ApplicationInfo r1;
        java.util.List r2;

        r0 := @parameter0: android.app.ActivityThread;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        r2 := @parameter2: java.util.List;

        staticinvoke <android.app.LoadedApk: void makePaths(android.app.ActivityThread,boolean,android.content.pm.ApplicationInfo,java.util.List,java.util.List)>(r0, 0, r1, r2, null);

        return;
    }

    public static void makePaths(android.app.ActivityThread, boolean, android.content.pm.ApplicationInfo, java.util.List, java.util.List)
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        android.content.pm.ApplicationInfo r0;
        java.util.List r1, r2, $r32;
        java.lang.String r3, r4, r5, r7, r8, $r11, $r12, $r15, $r16, $r18, $r19, r22, r24, r26, r28, r35, r36;
        java.lang.String[] r6, r9, $r10, $r20, r23, $r33, r34;
        int i0, $i1, i2, i3, i4, i5, i6;
        java.lang.Object $r13;
        java.lang.StringBuilder $r14, $r17;
        android.app.ActivityThread r21;
        java.util.Iterator r27;
        java.util.LinkedHashSet $r30;

        r21 := @parameter0: android.app.ActivityThread;

        z0 := @parameter1: boolean;

        r0 := @parameter2: android.content.pm.ApplicationInfo;

        r1 := @parameter3: java.util.List;

        r2 := @parameter4: java.util.List;

        r3 = r0.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        r22 = r0.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        interfaceinvoke r1.<java.util.List: void clear()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r10 = r0.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        if $r10 == null goto label01;

        $z12 = virtualinvoke r0.<android.content.pm.ApplicationInfo: boolean requestsIsolatedSplitLoading()>();

        if $z12 != 0 goto label01;

        $r20 = r0.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, $r20);

     label01:
        if r2 == null goto label02;

        interfaceinvoke r2.<java.util.List: void clear()>();

     label02:
        r23 = null;

        if r21 == null goto label08;

        r4 = r21.<android.app.ActivityThread: java.lang.String mInstrumentationPackageName>;

        r5 = r21.<android.app.ActivityThread: java.lang.String mInstrumentationAppDir>;

        r6 = r21.<android.app.ActivityThread: java.lang.String[] mInstrumentationSplitAppDirs>;

        r7 = r21.<android.app.ActivityThread: java.lang.String mInstrumentationLibDir>;

        r8 = r21.<android.app.ActivityThread: java.lang.String mInstrumentedAppDir>;

        r9 = r21.<android.app.ActivityThread: java.lang.String[] mInstrumentedSplitAppDirs>;

        r24 = r21.<android.app.ActivityThread: java.lang.String mInstrumentedLibDir>;

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z6 != 0 goto label03;

        r23 = null;

        $z11 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z11 == 0 goto label08;

     label03:
        interfaceinvoke r1.<java.util.List: void clear()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

        $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z7 != 0 goto label04;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r8);

     label04:
        $z8 = virtualinvoke r0.<android.content.pm.ApplicationInfo: boolean requestsIsolatedSplitLoading()>();

        if $z8 != 0 goto label06;

        if r6 == null goto label05;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, r6);

     label05:
        $z10 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z10 != 0 goto label06;

        if r9 == null goto label06;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, r9);

     label06:
        if r2 == null goto label07;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

        $z9 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r24);

        if $z9 != 0 goto label07;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r24);

     label07:
        r23 = null;

        $z13 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z13 != 0 goto label08;

        r23 = staticinvoke <android.app.LoadedApk: java.lang.String[] getLibrariesFor(java.lang.String)>(r4);

     label08:
        if r2 == null goto label15;

        $z4 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label09;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r22);

     label09:
        $r11 = r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r11 == null goto label14;

        $i1 = r0.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 >= 24 goto label12;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/fake-libs");

        $r18 = r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        $z5 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitAbi(java.lang.String)>($r18);

        if $z5 == 0 goto label10;

        r26 = "64";

        goto label11;

     label10:
        r26 = "";

     label11:
        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r19);

     label12:
        r27 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z14 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label14;

        $r13 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.lang.String) $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/lib/");

        $r15 = r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label13;

     label14:
        if z0 == 0 goto label15;

        $r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.library.path");

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

     label15:
        $r30 = new java.util.LinkedHashSet;

        specialinvoke $r30.<java.util.LinkedHashSet: void <init>()>();

        $r32 = r0.<android.content.pm.ApplicationInfo: java.util.List sharedLibraryInfos>;

        staticinvoke <android.app.LoadedApk: void appendSharedLibrariesLibPathsIfNeeded(java.util.List,android.content.pm.ApplicationInfo,java.util.Set,java.util.List)>($r32, r0, $r30, r2);

        $r33 = r0.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        if $r33 == null goto label18;

        i2 = 0;

        r34 = r0.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        i0 = lengthof r34;

        i3 = 0;

     label16:
        if i3 >= i0 goto label18;

        r35 = r34[i3];

        i4 = i2;

        $z2 = interfaceinvoke $r30.<java.util.Set: boolean contains(java.lang.Object)>(r35);

        if $z2 != 0 goto label17;

        i4 = i2;

        $z3 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r35);

        if $z3 != 0 goto label17;

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>(i2, r35);

        i4 = i2 + 1;

        staticinvoke <android.app.LoadedApk: void appendApkLibPathIfNeeded(java.lang.String,android.content.pm.ApplicationInfo,java.util.List)>(r35, r0, r2);

     label17:
        i3 = i3 + 1;

        i2 = i4;

        goto label16;

     label18:
        if r23 == null goto label21;

        i5 = lengthof r23;

        i6 = 0;

     label19:
        if i6 >= i5 goto label21;

        r36 = r23[i6];

        $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r36);

        if $z1 != 0 goto label20;

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>(0, r36);

        staticinvoke <android.app.LoadedApk: void appendApkLibPathIfNeeded(java.lang.String,android.content.pm.ApplicationInfo,java.util.List)>(r36, r0, r2);

     label20:
        i6 = i6 + 1;

        goto label19;

     label21:
        return;
    }

    private void rewriteRValues(java.lang.ClassLoader, java.lang.String, int)
    {
        android.app.LoadedApk r0;
        java.lang.String r1, $r4, $r14, $r20;
        int i0;
        java.lang.Class[] $r5;
        java.lang.Class $r6, r25;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.ClassNotFoundException $r10;
        java.lang.Throwable $r15, $r21, $r22, r28;
        java.lang.ClassLoader r23;
        java.lang.reflect.Method r26;
        java.lang.StringBuilder r33, r34, r36;
        java.lang.RuntimeException r35;
        java.lang.reflect.InvocationTargetException r37;

        r0 := @this: android.app.LoadedApk;

        r23 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".R");

        $r4 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        r25 = virtualinvoke r23.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r4);

     label2:
        $r5 = newarray (java.lang.Class)[1];

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $r5[0] = $r6;

        r26 = virtualinvoke r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("onResourcesLoaded", $r5);

     label3:
        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        virtualinvoke r26.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);

     label4:
        return;

     label5:
        $r15 := @caughtexception;

        r37 = (java.lang.reflect.InvocationTargetException) $r15;

        r28 = virtualinvoke r37.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        goto label7;

     label6:
        $r22 := @caughtexception;

        r28 = $r22;

     label7:
        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rewrite resource references for ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r35 = new java.lang.RuntimeException;

        $r20 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r35.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r28);

        throw r35;

     label8:
        $r21 := @caughtexception;

        return;

     label9:
        $r10 := @caughtexception;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No resource references to update in package ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LoadedApk", $r14);

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label9;
        catch java.lang.NoSuchMethodException from label2 to label3 with label8;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
    }

    private void setApplicationInfo(android.content.pm.ApplicationInfo)
    {
        android.app.LoadedApk r0;
        int i0, $i1, $i2;
        android.content.pm.ApplicationInfo r1, r18;
        java.lang.String $r2, $r4, $r5, $r6, $r8, $r10, r19;
        java.lang.String[] $r3, $r12, $r13, $r14, $r15, r20;
        java.io.File $r7, $r9, $r11;
        boolean $z0, $z1;
        android.app.LoadedApk$SplitDependencyLoaderImpl $r16;
        android.util.SparseArray $r17;

        r0 := @this: android.app.LoadedApk;

        r18 := @parameter0: android.content.pm.ApplicationInfo;

        i0 = staticinvoke <android.os.Process: int myUid()>();

        r1 = staticinvoke <android.app.LoadedApk: android.content.pm.ApplicationInfo adjustNativeLibraryPaths(android.content.pm.ApplicationInfo)>(r18);

        r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo> = r1;

        $r2 = r1.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        r0.<android.app.LoadedApk: java.lang.String mAppDir> = $r2;

        $i1 = r1.<android.content.pm.ApplicationInfo: int uid>;

        if $i1 != i0 goto label1;

        r19 = r1.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        goto label2;

     label1:
        r19 = r1.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

     label2:
        r0.<android.app.LoadedApk: java.lang.String mResDir> = r19;

        $r3 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] resourceDirs>;

        r0.<android.app.LoadedApk: java.lang.String[] mOverlayDirs> = $r3;

        $r4 = r1.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        r0.<android.app.LoadedApk: java.lang.String mDataDir> = $r4;

        $r5 = r1.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        r0.<android.app.LoadedApk: java.lang.String mLibDir> = $r5;

        $r6 = r1.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        $r7 = staticinvoke <android.os.FileUtils: java.io.File newFileOrNull(java.lang.String)>($r6);

        r0.<android.app.LoadedApk: java.io.File mDataDirFile> = $r7;

        $r8 = r1.<android.content.pm.ApplicationInfo: java.lang.String deviceProtectedDataDir>;

        $r9 = staticinvoke <android.os.FileUtils: java.io.File newFileOrNull(java.lang.String)>($r8);

        r0.<android.app.LoadedApk: java.io.File mDeviceProtectedDataDirFile> = $r9;

        $r10 = r1.<android.content.pm.ApplicationInfo: java.lang.String credentialProtectedDataDir>;

        $r11 = staticinvoke <android.os.FileUtils: java.io.File newFileOrNull(java.lang.String)>($r10);

        r0.<android.app.LoadedApk: java.io.File mCredentialProtectedDataDirFile> = $r11;

        $r12 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] splitNames>;

        r0.<android.app.LoadedApk: java.lang.String[] mSplitNames> = $r12;

        $r13 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        r0.<android.app.LoadedApk: java.lang.String[] mSplitAppDirs> = $r13;

        $i2 = r1.<android.content.pm.ApplicationInfo: int uid>;

        if $i2 != i0 goto label3;

        r20 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        goto label4;

     label3:
        r20 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] splitPublicSourceDirs>;

     label4:
        r0.<android.app.LoadedApk: java.lang.String[] mSplitResDirs> = r20;

        $r14 = r1.<android.content.pm.ApplicationInfo: java.lang.String[] splitClassLoaderNames>;

        r0.<android.app.LoadedApk: java.lang.String[] mSplitClassLoaderNames> = $r14;

        $z0 = virtualinvoke r1.<android.content.pm.ApplicationInfo: boolean requestsIsolatedSplitLoading()>();

        if $z0 == 0 goto label5;

        $r15 = r0.<android.app.LoadedApk: java.lang.String[] mSplitNames>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r15);

        if $z1 != 0 goto label5;

        $r16 = new android.app.LoadedApk$SplitDependencyLoaderImpl;

        $r17 = r1.<android.content.pm.ApplicationInfo: android.util.SparseArray splitDependencies>;

        specialinvoke $r16.<android.app.LoadedApk$SplitDependencyLoaderImpl: void <init>(android.app.LoadedApk,android.util.SparseArray)>(r0, $r17);

        r0.<android.app.LoadedApk: android.app.LoadedApk$SplitDependencyLoaderImpl mSplitLoader> = $r16;

     label5:
        return;
    }

    private void setThreadPolicy(android.os.StrictMode$ThreadPolicy)
    {
        android.app.LoadedApk r0;
        android.os.StrictMode$ThreadPolicy r1;
        android.app.ActivityThread $r2;

        r0 := @this: android.app.LoadedApk;

        r1 := @parameter0: android.os.StrictMode$ThreadPolicy;

        $r2 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        if $r2 == null goto label1;

        if r1 == null goto label1;

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r1);

     label1:
        return;
    }

    private void setupJitProfileSupport()
    {
        android.app.LoadedApk r0;
        boolean $z0, $z1;
        android.app.DexLoadReporter $r2, $r8;
        android.content.pm.ApplicationInfo $r3, $r5, $r6, $r11, $r18, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.util.ArrayList $r4;
        java.lang.String[] $r7, $r12, $r15, $r19;
        java.lang.String $r9, $r10, $r13, $r14, $r17, $r21, r22;
        java.lang.Object $r16;

        r0 := @this: android.app.LoadedApk;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("dalvik.vm.usejitprofiles", 0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <android.app.DexLoadReporter: android.app.DexLoadReporter getInstance()>();

        staticinvoke <dalvik.system.BaseDexClassLoader: void setReporter(dalvik.system.BaseDexClassLoader$Reporter)>($r2);

        $r3 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 == $i1 goto label2;

        return;

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $i2 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label3;

        $r20 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r21 = $r20.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r21);

     label3:
        $r6 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r7 = $r6.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        if $r7 == null goto label4;

        $r18 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r19 = $r18.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r4, $r19);

     label4:
        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        return;

     label5:
        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        i7 = $i4 - 1;

     label6:
        if i7 < 0 goto label9;

        if i7 != 0 goto label7;

        r22 = null;

        goto label8;

     label7:
        $r11 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r12 = $r11.<android.content.pm.ApplicationInfo: java.lang.String[] splitNames>;

        $i5 = i7 - 1;

        r22 = $r12[$i5];

     label8:
        $r13 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $i6 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r14 = staticinvoke <android.content.pm.dex.ArtManager: java.lang.String getCurrentProfilePath(java.lang.String,int,java.lang.String)>($r13, $i6, r22);

        $r15 = newarray (java.lang.String)[1];

        $r16 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i7);

        $r17 = (java.lang.String) $r16;

        $r15[0] = $r17;

        staticinvoke <dalvik.system.VMRuntime: void registerAppInfo(java.lang.String,java.lang.String[])>($r14, $r15);

        i7 = i7 + -1;

        goto label6;

     label9:
        $r8 = staticinvoke <android.app.DexLoadReporter: android.app.DexLoadReporter getInstance()>();

        $r10 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $r9 = r0.<android.app.LoadedApk: java.lang.String mDataDir>;

        virtualinvoke $r8.<android.app.DexLoadReporter: void registerAppDataDir(java.lang.String,java.lang.String)>($r10, $r9);

        return;
    }

    java.lang.ClassLoader createSharedLibraryLoader(android.content.pm.SharedLibraryInfo, boolean, java.lang.String, java.lang.String)
    {
        android.app.LoadedApk r0;
        boolean z0;
        java.lang.String r1, r2, $r6, r12;
        java.util.List r3, r4, $r5;
        int $i0, $i1;
        android.app.ApplicationLoaders $r7;
        android.content.pm.ApplicationInfo $r8;
        java.lang.ClassLoader $r9;
        java.lang.Object $r10;
        android.content.pm.SharedLibraryInfo r11;

        r0 := @this: android.app.LoadedApk;

        r11 := @parameter0: android.content.pm.SharedLibraryInfo;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 = virtualinvoke r11.<android.content.pm.SharedLibraryInfo: java.util.List getAllCodePaths()>();

        $r5 = virtualinvoke r11.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        r4 = specialinvoke r0.<android.app.LoadedApk: java.util.List createSharedLibrariesLoaders(java.util.List,boolean,java.lang.String,java.lang.String)>($r5, z0, r1, r2);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r12 = (java.lang.String) $r10;

        goto label2;

     label1:
        $r6 = <java.io.File: java.lang.String pathSeparator>;

        r12 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>($r6, r3);

     label2:
        $r7 = staticinvoke <android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>();

        $r8 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $i1 = $r8.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $r9 = virtualinvoke $r7.<android.app.ApplicationLoaders: java.lang.ClassLoader getSharedLibraryClassLoaderWithSharedLibraries(java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.ClassLoader,java.lang.String,java.util.List)>(r12, $i1, z0, r1, r2, null, null, r4);

        return $r9;
    }

    public android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context, android.content.BroadcastReceiver)
    {
        android.app.LoadedApk r0;
        android.content.BroadcastReceiver r1;
        android.util.ArrayMap r2, $r4, $r6, $r23, $r27, $r29, r33, r34, r35, r38;
        android.app.LoadedApk$ReceiverDispatcher r3, r39;
        java.lang.Object $r5, $r7, $r16, $r21, $r24;
        java.lang.String $r10, $r15, $r20;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r31;
        android.content.Context r32;
        java.lang.IllegalArgumentException r36, r41, r45;
        android.content.IIntentReceiver r37;
        java.lang.RuntimeException r40;
        java.lang.StringBuilder r42, r44, r46;
        java.lang.IllegalStateException r43;

        r0 := @this: android.app.LoadedApk;

        r32 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.BroadcastReceiver;

        r2 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        entermonitor r2;

     label01:
        $r4 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r32);

        r33 = (android.util.ArrayMap) $r5;

     label02:
        if r33 == null goto label13;

     label03:
        $r21 = virtualinvoke r33.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.app.LoadedApk$ReceiverDispatcher) $r21;

     label04:
        if r3 == null goto label13;

     label05:
        virtualinvoke r33.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        $i0 = virtualinvoke r33.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label06;

        $r29 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        virtualinvoke $r29.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r32);

     label06:
        $z0 = virtualinvoke r1.<android.content.BroadcastReceiver: boolean getDebugUnregister()>();

        if $z0 == 0 goto label11;

        $r23 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnregisteredReceivers>;

        $r24 = virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r32);

        r34 = (android.util.ArrayMap) $r24;

     label07:
        r35 = r34;

        if r34 != null goto label10;

     label08:
        r35 = new android.util.ArrayMap;

        specialinvoke r35.<android.util.ArrayMap: void <init>()>();

     label09:
        $r27 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnregisteredReceivers>;

        virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r35);

     label10:
        r36 = new java.lang.IllegalArgumentException;

        specialinvoke r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Originally unregistered here:");

        virtualinvoke r36.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        virtualinvoke r3.<android.app.LoadedApk$ReceiverDispatcher: void setUnregisterLocation(java.lang.RuntimeException)>(r36);

        virtualinvoke r35.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label11:
        r3.<android.app.LoadedApk$ReceiverDispatcher: boolean mForgotten> = 1;

        r37 = virtualinvoke r3.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        exitmonitor r2;

     label12:
        return r37;

     label13:
        $r6 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnregisteredReceivers>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r32);

        r38 = (android.util.ArrayMap) $r7;

     label14:
        if r38 == null goto label18;

     label15:
        $r16 = virtualinvoke r38.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r39 = (android.app.LoadedApk$ReceiverDispatcher) $r16;

     label16:
        if r39 != null goto label17;

        goto label18;

     label17:
        r40 = virtualinvoke r39.<android.app.LoadedApk$ReceiverDispatcher: java.lang.RuntimeException getUnregisterLocation()>();

        r41 = new java.lang.IllegalArgumentException;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unregistering Receiver ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that was already unregistered");

        $r20 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r40);

        throw r41;

     label18:
        if r32 != null goto label20;

     label19:
        r43 = new java.lang.IllegalStateException;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unbinding Receiver ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from Context that is no longer in use: ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r15 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw r43;

     label20:
        r45 = new java.lang.IllegalArgumentException;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Receiver not registered: ");

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r45;

     label21:
        $r31 := @caughtexception;

     label22:
        exitmonitor r2;

     label23:
        throw $r31;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public final android.app.IServiceConnection forgetServiceDispatcher(android.content.Context, android.content.ServiceConnection)
    {
        android.app.LoadedApk r0;
        android.content.ServiceConnection r1;
        android.util.ArrayMap r2, $r4, $r6, $r23, $r27, $r29, r33, r34, r35, r38;
        android.app.LoadedApk$ServiceDispatcher r3, r39;
        java.lang.Object $r5, $r7, $r16, $r21, $r24;
        java.lang.String $r10, $r15, $r20;
        int $i0, $i1, $i2;
        java.lang.Throwable $r31;
        android.content.Context r32;
        java.lang.IllegalArgumentException r36, r41, r45;
        android.app.IServiceConnection r37;
        java.lang.RuntimeException r40;
        java.lang.StringBuilder r42, r44, r46;
        java.lang.IllegalStateException r43;

        r0 := @this: android.app.LoadedApk;

        r32 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.ServiceConnection;

        r2 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        entermonitor r2;

     label01:
        $r4 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r32);

        r33 = (android.util.ArrayMap) $r5;

     label02:
        if r33 == null goto label13;

     label03:
        $r21 = virtualinvoke r33.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.app.LoadedApk$ServiceDispatcher) $r21;

     label04:
        if r3 == null goto label13;

     label05:
        virtualinvoke r33.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r3.<android.app.LoadedApk$ServiceDispatcher: void doForget()>();

        $i0 = virtualinvoke r33.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label06;

        $r29 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        virtualinvoke $r29.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r32);

     label06:
        $i1 = virtualinvoke r3.<android.app.LoadedApk$ServiceDispatcher: int getFlags()>();

        $i2 = $i1 & 2;

        if $i2 == 0 goto label11;

        $r23 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnboundServices>;

        $r24 = virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r32);

        r34 = (android.util.ArrayMap) $r24;

     label07:
        r35 = r34;

        if r34 != null goto label10;

     label08:
        r35 = new android.util.ArrayMap;

        specialinvoke r35.<android.util.ArrayMap: void <init>()>();

     label09:
        $r27 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnboundServices>;

        virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r35);

     label10:
        r36 = new java.lang.IllegalArgumentException;

        specialinvoke r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Originally unbound here:");

        virtualinvoke r36.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        virtualinvoke r3.<android.app.LoadedApk$ServiceDispatcher: void setUnbindLocation(java.lang.RuntimeException)>(r36);

        virtualinvoke r35.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label11:
        r37 = virtualinvoke r3.<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>();

        exitmonitor r2;

     label12:
        return r37;

     label13:
        $r6 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnboundServices>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r32);

        r38 = (android.util.ArrayMap) $r7;

     label14:
        if r38 == null goto label18;

     label15:
        $r16 = virtualinvoke r38.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r39 = (android.app.LoadedApk$ServiceDispatcher) $r16;

     label16:
        if r39 != null goto label17;

        goto label18;

     label17:
        r40 = virtualinvoke r39.<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()>();

        r41 = new java.lang.IllegalArgumentException;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unbinding Service ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that was already unbound");

        $r20 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r40);

        throw r41;

     label18:
        if r32 != null goto label20;

     label19:
        r43 = new java.lang.IllegalStateException;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unbinding Service ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from Context that is no longer in use: ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r15 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw r43;

     label20:
        r45 = new java.lang.IllegalArgumentException;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service not registered: ");

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r45;

     label21:
        $r31 := @caughtexception;

     label22:
        exitmonitor r2;

     label23:
        throw $r31;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public java.lang.String getAppDir()
    {
        android.app.LoadedApk r0;
        java.lang.String $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String mAppDir>;

        return $r1;
    }

    public android.app.AppComponentFactory getAppFactory()
    {
        android.app.LoadedApk r0;
        android.app.AppComponentFactory $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory>;

        return $r1;
    }

    android.app.Application getApplication()
    {
        android.app.LoadedApk r0;
        android.app.Application $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: android.app.Application mApplication>;

        return $r1;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo()
    {
        android.app.LoadedApk r0;
        android.content.pm.ApplicationInfo $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        return $r1;
    }

    public android.content.res.AssetManager getAssets()
    {
        android.app.LoadedApk r0;
        android.content.res.Resources $r1;
        android.content.res.AssetManager $r2;

        r0 := @this: android.app.LoadedApk;

        $r1 = virtualinvoke r0.<android.app.LoadedApk: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        return $r2;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        android.app.LoadedApk r0;
        java.lang.ClassLoader $r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: android.app.LoadedApk;

        entermonitor r0;

     label1:
        $r1 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

        if $r1 != null goto label2;

        specialinvoke r0.<android.app.LoadedApk: void createOrUpdateClassLoaderLocked(java.util.List)>(null);

     label2:
        r3 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

        exitmonitor r0;

     label3:
        return r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.res.CompatibilityInfo getCompatibilityInfo()
    {
        android.app.LoadedApk r0;
        android.view.DisplayAdjustments $r1;
        android.content.res.CompatibilityInfo $r2;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r2 = virtualinvoke $r1.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        return $r2;
    }

    public java.io.File getCredentialProtectedDataDirFile()
    {
        android.app.LoadedApk r0;
        java.io.File $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.io.File mCredentialProtectedDataDirFile>;

        return $r1;
    }

    public java.lang.String getDataDir()
    {
        android.app.LoadedApk r0;
        java.lang.String $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String mDataDir>;

        return $r1;
    }

    public java.io.File getDataDirFile()
    {
        android.app.LoadedApk r0;
        java.io.File $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.io.File mDataDirFile>;

        return $r1;
    }

    public java.io.File getDeviceProtectedDataDirFile()
    {
        android.app.LoadedApk r0;
        java.io.File $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.io.File mDeviceProtectedDataDirFile>;

        return $r1;
    }

    public java.lang.String getLibDir()
    {
        android.app.LoadedApk r0;
        java.lang.String $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String mLibDir>;

        return $r1;
    }

    public java.lang.String[] getOverlayDirs()
    {
        android.app.LoadedApk r0;
        java.lang.String[] $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String[] mOverlayDirs>;

        return $r1;
    }

    public java.lang.String getPackageName()
    {
        android.app.LoadedApk r0;
        java.lang.String $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        return $r1;
    }

    public android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver, android.content.Context, android.os.Handler, android.app.Instrumentation, boolean)
    {
        android.app.LoadedApk r0;
        android.content.Context r1;
        boolean z0;
        android.util.ArrayMap r2, r3, $r4, $r5, r12, r17;
        java.lang.Object $r6, $r7;
        java.lang.Throwable $r8;
        android.content.BroadcastReceiver r9;
        android.os.Handler r10;
        android.app.Instrumentation r11;
        android.app.LoadedApk$ReceiverDispatcher r13, r15;
        android.content.IIntentReceiver r18;

        r0 := @this: android.app.LoadedApk;

        r9 := @parameter0: android.content.BroadcastReceiver;

        r1 := @parameter1: android.content.Context;

        r10 := @parameter2: android.os.Handler;

        r11 := @parameter3: android.app.Instrumentation;

        z0 := @parameter4: boolean;

        r2 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        entermonitor r2;

        r12 = null;

        r13 = null;

        if z0 == 0 goto label06;

     label01:
        $r5 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.util.ArrayMap) $r6;

     label02:
        r13 = null;

        r12 = r3;

        if r3 == null goto label06;

     label03:
        $r7 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        r13 = (android.app.LoadedApk$ReceiverDispatcher) $r7;

     label04:
        r12 = r3;

        goto label06;

     label05:
        $r8 := @caughtexception;

        goto label16;

     label06:
        if r13 != null goto label13;

     label07:
        r15 = new android.app.LoadedApk$ReceiverDispatcher;

        specialinvoke r15.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r9, r1, r10, r11, z0);

     label08:
        r13 = r15;

        if z0 == 0 goto label14;

        r17 = r12;

        if r12 != null goto label11;

     label09:
        r17 = new android.util.ArrayMap;

        specialinvoke r17.<android.util.ArrayMap: void <init>()>();

     label10:
        $r4 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r17);

     label11:
        virtualinvoke r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r15);

     label12:
        r13 = r15;

        goto label14;

     label13:
        virtualinvoke r13.<android.app.LoadedApk$ReceiverDispatcher: void validate(android.content.Context,android.os.Handler)>(r1, r10);

     label14:
        r13.<android.app.LoadedApk$ReceiverDispatcher: boolean mForgotten> = 0;

        r18 = virtualinvoke r13.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        exitmonitor r2;

     label15:
        return r18;

     label16:
        exitmonitor r2;

     label17:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label13 to label14 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
    }

    public java.lang.String getResDir()
    {
        android.app.LoadedApk r0;
        java.lang.String $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String mResDir>;

        return $r1;
    }

    public android.content.res.Resources getResources()
    {
        android.app.LoadedApk r0;
        android.content.res.Resources $r1, $r2, $r10;
        android.app.ResourcesManager $r3;
        android.content.pm.ApplicationInfo $r4;
        java.lang.String $r5;
        java.lang.String[] $r6, $r7, r13;
        android.content.res.CompatibilityInfo $r8;
        java.lang.ClassLoader $r9;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        java.lang.AssertionError $r12;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: android.content.res.Resources mResources>;

        if $r1 != null goto label4;

     label1:
        r13 = virtualinvoke r0.<android.app.LoadedApk: java.lang.String[] getSplitPaths(java.lang.String)>(null);

     label2:
        $r3 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        $r5 = r0.<android.app.LoadedApk: java.lang.String mResDir>;

        $r6 = r0.<android.app.LoadedApk: java.lang.String[] mOverlayDirs>;

        $r4 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $r7 = $r4.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r8 = virtualinvoke r0.<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r9 = virtualinvoke r0.<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>();

        $r10 = virtualinvoke $r3.<android.app.ResourcesManager: android.content.res.Resources getResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader,java.util.List)>(null, $r5, r13, $r6, $r7, 0, null, $r8, $r9, null);

        r0.<android.app.LoadedApk: android.content.res.Resources mResources> = $r10;

        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("null split not found");

        throw $r12;

     label4:
        $r2 = r0.<android.app.LoadedApk: android.content.res.Resources mResources>;

        return $r2;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public final android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection, android.content.Context, android.os.Handler, int)
    {
        android.app.LoadedApk r0;
        android.content.ServiceConnection r1;
        android.content.Context r2;
        android.os.Handler r3;
        int i0;
        android.app.IServiceConnection $r4;

        r0 := @this: android.app.LoadedApk;

        r1 := @parameter0: android.content.ServiceConnection;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.Handler;

        i0 := @parameter3: int;

        $r4 = specialinvoke r0.<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcherCommon(android.content.ServiceConnection,android.content.Context,android.os.Handler,java.util.concurrent.Executor,int)>(r1, r2, r3, null, i0);

        return $r4;
    }

    public final android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection, android.content.Context, java.util.concurrent.Executor, int)
    {
        android.app.LoadedApk r0;
        android.content.ServiceConnection r1;
        android.content.Context r2;
        java.util.concurrent.Executor r3;
        int i0;
        android.app.IServiceConnection $r4;

        r0 := @this: android.app.LoadedApk;

        r1 := @parameter0: android.content.ServiceConnection;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.util.concurrent.Executor;

        i0 := @parameter3: int;

        $r4 = specialinvoke r0.<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcherCommon(android.content.ServiceConnection,android.content.Context,android.os.Handler,java.util.concurrent.Executor,int)>(r1, r2, null, r3, i0);

        return $r4;
    }

    public java.lang.String[] getSplitAppDirs()
    {
        android.app.LoadedApk r0;
        java.lang.String[] $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String[] mSplitAppDirs>;

        return $r1;
    }

    java.lang.ClassLoader getSplitClassLoader(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.LoadedApk r0;
        java.lang.String r1;
        android.app.LoadedApk$SplitDependencyLoaderImpl r2;
        java.lang.ClassLoader $r3, $r4;

        r0 := @this: android.app.LoadedApk;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.app.LoadedApk: android.app.LoadedApk$SplitDependencyLoaderImpl mSplitLoader>;

        if r2 != null goto label1;

        $r4 = r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader>;

        return $r4;

     label1:
        $r3 = virtualinvoke r2.<android.app.LoadedApk$SplitDependencyLoaderImpl: java.lang.ClassLoader getClassLoaderForSplit(java.lang.String)>(r1);

        return $r3;
    }

    java.lang.String[] getSplitPaths(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.LoadedApk r0;
        java.lang.String r1;
        android.app.LoadedApk$SplitDependencyLoaderImpl r2;
        java.lang.String[] $r3, $r4;

        r0 := @this: android.app.LoadedApk;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.app.LoadedApk: android.app.LoadedApk$SplitDependencyLoaderImpl mSplitLoader>;

        if r2 != null goto label1;

        $r4 = r0.<android.app.LoadedApk: java.lang.String[] mSplitResDirs>;

        return $r4;

     label1:
        $r3 = virtualinvoke r2.<android.app.LoadedApk$SplitDependencyLoaderImpl: java.lang.String[] getSplitPathsForSplit(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String[] getSplitResDirs()
    {
        android.app.LoadedApk r0;
        java.lang.String[] $r1;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: java.lang.String[] mSplitResDirs>;

        return $r1;
    }

    public int getTargetSdkVersion()
    {
        android.app.LoadedApk r0;
        android.content.pm.ApplicationInfo $r1;
        int $i0;

        r0 := @this: android.app.LoadedApk;

        $r1 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        $i0 = $r1.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        return $i0;
    }

    void installSystemApplicationInfo(android.content.pm.ApplicationInfo, java.lang.ClassLoader)
    {
        android.app.LoadedApk r0;
        java.lang.ClassLoader r1, $r4, $r5;
        android.content.pm.ApplicationInfo $r2, $r3, r6;
        android.app.AppComponentFactory r7;

        r0 := @this: android.app.LoadedApk;

        r6 := @parameter0: android.content.pm.ApplicationInfo;

        r1 := @parameter1: java.lang.ClassLoader;

        r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo> = r6;

        r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader> = r1;

        r7 = specialinvoke r0.<android.app.LoadedApk: android.app.AppComponentFactory createAppFactory(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>(r6, r1);

        r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory> = r7;

        $r4 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        $r2 = new android.content.pm.ApplicationInfo;

        $r3 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        specialinvoke $r2.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>($r3);

        $r5 = virtualinvoke r7.<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>($r4, $r2);

        r0.<android.app.LoadedApk: java.lang.ClassLoader mClassLoader> = $r5;

        return;
    }

    public boolean isSecurityViolation()
    {
        android.app.LoadedApk r0;
        boolean $z0;

        r0 := @this: android.app.LoadedApk;

        $z0 = r0.<android.app.LoadedApk: boolean mSecurityViolation>;

        return $z0;
    }

    public android.app.IServiceConnection lookupServiceDispatcher(android.content.ServiceConnection, android.content.Context)
    {
        android.app.LoadedApk r0;
        android.util.ArrayMap r1, r2, $r3;
        java.lang.Object $r4, $r5;
        java.lang.Throwable $r6;
        android.content.ServiceConnection r7;
        android.content.Context r8;
        android.app.LoadedApk$ServiceDispatcher r9;
        android.app.IServiceConnection r10;

        r0 := @this: android.app.LoadedApk;

        r7 := @parameter0: android.content.ServiceConnection;

        r8 := @parameter1: android.content.Context;

        r1 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r2 = (android.util.ArrayMap) $r4;

     label02:
        r9 = null;

        if r2 == null goto label04;

     label03:
        $r5 = virtualinvoke r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r9 = (android.app.LoadedApk$ServiceDispatcher) $r5;

     label04:
        if r9 == null goto label07;

     label05:
        r10 = virtualinvoke r9.<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>();

     label06:
        goto label08;

     label07:
        r10 = null;

     label08:
        exitmonitor r1;

     label09:
        return r10;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public android.app.Application makeApplication(boolean, android.app.Instrumentation)
    {
        android.app.LoadedApk r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.ClassLoader r1;
        int i0, i1, i2;
        android.content.pm.ApplicationInfo $r2;
        android.content.res.AssetManager $r3;
        android.app.ActivityThread $r4, $r5, $r7, $r19;
        android.app.Instrumentation $r6, $r20, r25;
        java.util.ArrayList $r8;
        java.lang.Object $r9;
        java.lang.String $r10, $r14, $r15, $r17, $r22, $r24, r27, r28, $r30;
        java.lang.Exception $r11, $r18;
        java.lang.StringBuilder $r12, $r21;
        java.lang.Class $r13;
        java.lang.RuntimeException $r16, $r23;
        android.app.Application r26, r29, r33;
        android.util.SparseArray r31;
        android.app.ContextImpl r32;

        r0 := @this: android.app.LoadedApk;

        z0 := @parameter0: boolean;

        r25 := @parameter1: android.app.Instrumentation;

        r26 = r0.<android.app.LoadedApk: android.app.Application mApplication>;

        if r26 == null goto label01;

        return r26;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "makeApplication");

        $r2 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        r27 = $r2.<android.content.pm.ApplicationInfo: java.lang.String className>;

        if z0 != 0 goto label02;

        r28 = r27;

        if r27 != null goto label03;

     label02:
        r28 = "android.app.Application";

     label03:
        r29 = null;

     label04:
        r1 = virtualinvoke r0.<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>();

     label05:
        r29 = null;

     label06:
        $r30 = r0.<android.app.LoadedApk: java.lang.String mPackageName>;

        $z3 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z3 != 0 goto label13;

     label07:
        r29 = null;

     label08:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "initializeJavaContextClassLoader");

     label09:
        r29 = null;

     label10:
        specialinvoke r0.<android.app.LoadedApk: void initializeJavaContextClassLoader()>();

     label11:
        r29 = null;

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

     label13:
        r29 = null;

     label14:
        $r3 = virtualinvoke r0.<android.app.LoadedApk: android.content.res.AssetManager getAssets()>();

        r31 = virtualinvoke $r3.<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers(boolean,boolean)>(0, 0);

     label15:
        i2 = 0;

        r29 = null;

     label16:
        i0 = virtualinvoke r31.<android.util.SparseArray: int size()>();

     label17:
        if i2 >= i0 goto label23;

        r29 = null;

     label18:
        i1 = virtualinvoke r31.<android.util.SparseArray: int keyAt(int)>(i2);

     label19:
        if i1 == 1 goto label22;

        if i1 != 127 goto label20;

        goto label22;

     label20:
        r29 = null;

     label21:
        $r9 = virtualinvoke r31.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r10 = (java.lang.String) $r9;

        specialinvoke r0.<android.app.LoadedApk: void rewriteRValues(java.lang.ClassLoader,java.lang.String,int)>(r1, $r10, i1);

     label22:
        i2 = i2 + 1;

        goto label17;

     label23:
        r29 = null;

     label24:
        $r4 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        r32 = staticinvoke <android.app.ContextImpl: android.app.ContextImpl createAppContext(android.app.ActivityThread,android.app.LoadedApk)>($r4, r0);

     label25:
        r29 = null;

     label26:
        staticinvoke <android.security.net.config.NetworkSecurityConfigProvider: void handleNewApplication(android.content.Context)>(r32);

     label27:
        r29 = null;

     label28:
        $r5 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        $r6 = $r5.<android.app.ActivityThread: android.app.Instrumentation mInstrumentation>;

        r33 = virtualinvoke $r6.<android.app.Instrumentation: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>(r1, r28, r32);

     label29:
        r29 = r33;

     label30:
        virtualinvoke r32.<android.app.ContextImpl: void setOuterContext(android.content.Context)>(r33);

     label31:
        r29 = r33;

        goto label33;

     label32:
        $r18 := @caughtexception;

        $r19 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        $r20 = $r19.<android.app.ActivityThread: android.app.Instrumentation mInstrumentation>;

        $z2 = virtualinvoke $r20.<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>(r29, $r18);

        if $z2 == 0 goto label39;

     label33:
        $r7 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        $r8 = $r7.<android.app.ActivityThread: java.util.ArrayList mAllApplications>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r29);

        r0.<android.app.LoadedApk: android.app.Application mApplication> = r29;

        if r25 == null goto label38;

     label34:
        virtualinvoke r25.<android.app.Instrumentation: void callApplicationOnCreate(android.app.Application)>(r29);

     label35:
        goto label38;

     label36:
        $r11 := @caughtexception;

        $z1 = virtualinvoke r25.<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>(r29, $r11);

        if $z1 == 0 goto label37;

        goto label38;

     label37:
        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create application ");

        $r13 = virtualinvoke r29.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = virtualinvoke $r11.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r11);

        throw $r16;

     label38:
        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return r29;

     label39:
        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to instantiate application ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r22 = virtualinvoke $r18.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r23 = new java.lang.RuntimeException;

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r18);

        throw $r23;

        catch java.lang.Exception from label04 to label05 with label32;
        catch java.lang.Exception from label06 to label07 with label32;
        catch java.lang.Exception from label08 to label09 with label32;
        catch java.lang.Exception from label10 to label11 with label32;
        catch java.lang.Exception from label12 to label13 with label32;
        catch java.lang.Exception from label14 to label15 with label32;
        catch java.lang.Exception from label16 to label17 with label32;
        catch java.lang.Exception from label18 to label19 with label32;
        catch java.lang.Exception from label21 to label22 with label32;
        catch java.lang.Exception from label24 to label25 with label32;
        catch java.lang.Exception from label26 to label27 with label32;
        catch java.lang.Exception from label28 to label29 with label32;
        catch java.lang.Exception from label30 to label31 with label32;
        catch java.lang.Exception from label34 to label35 with label36;
    }

    public void removeContextRegistrations(android.content.Context, java.lang.String, java.lang.String)
    {
        android.app.LoadedApk r0;
        java.lang.String r1, r2, $r19, $r22, $r33, $r36;
        boolean z0;
        android.util.ArrayMap $r3, $r5, $r7, $r9, r46, r47, r52, r53;
        java.lang.Object $r4, $r8, $r11, $r25;
        int $i0, $i2, i4, i5;
        android.content.ServiceConnection $r16;
        android.app.ServiceConnectionLeaked $r20, r55;
        java.lang.StackTraceElement[] $r21, $r35;
        android.app.IActivityManager $r23, $r37;
        android.app.IServiceConnection $r24;
        android.content.BroadcastReceiver $r30;
        android.app.IntentReceiverLeaked $r34, r49;
        android.content.IIntentReceiver $r38;
        java.lang.Throwable $r39, $r44;
        android.os.RemoteException $r40, $r42;
        java.lang.RuntimeException $r41, $r43;
        android.content.Context r45;
        android.app.LoadedApk$ReceiverDispatcher r48;
        java.lang.StringBuilder r50, r56;
        android.app.LoadedApk$ServiceDispatcher r54;

        r0 := @this: android.app.LoadedApk;

        r45 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 = staticinvoke <android.os.StrictMode: boolean vmRegistrationLeaksEnabled()>();

        r46 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        entermonitor r46;

     label01:
        $r3 = r0.<android.app.LoadedApk: android.util.ArrayMap mReceivers>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r45);

        r47 = (android.util.ArrayMap) $r4;

     label02:
        if r47 == null goto label10;

        i4 = 0;

     label03:
        $i2 = virtualinvoke r47.<android.util.ArrayMap: int size()>();

        if i4 >= $i2 goto label10;

        $r25 = virtualinvoke r47.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        r48 = (android.app.LoadedApk$ReceiverDispatcher) $r25;

        r49 = new android.app.IntentReceiverLeaked;

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has leaked IntentReceiver ");

        $r30 = virtualinvoke r48.<android.app.LoadedApk$ReceiverDispatcher: android.content.BroadcastReceiver getIntentReceiver()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that was originally registered here. Are you missing a call to unregisterReceiver()?");

        $r33 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r49.<android.app.IntentReceiverLeaked: void <init>(java.lang.String)>($r33);

        $r34 = virtualinvoke r48.<android.app.LoadedApk$ReceiverDispatcher: android.app.IntentReceiverLeaked getLocation()>();

        $r35 = virtualinvoke $r34.<android.app.IntentReceiverLeaked: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke r49.<android.app.IntentReceiverLeaked: void setStackTrace(java.lang.StackTraceElement[])>($r35);

        $r36 = virtualinvoke r49.<android.app.IntentReceiverLeaked: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityThread", $r36, r49);

     label04:
        if z0 == 0 goto label06;

     label05:
        staticinvoke <android.os.StrictMode: void onIntentReceiverLeaked(java.lang.Throwable)>(r49);

     label06:
        $r37 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r38 = virtualinvoke r48.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

        interfaceinvoke $r37.<android.app.IActivityManager: void unregisterReceiver(android.content.IIntentReceiver)>($r38);

     label07:
        i4 = i4 + 1;

        goto label03;

     label08:
        $r40 := @caughtexception;

     label09:
        $r41 = virtualinvoke $r40.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r41;

     label10:
        $r5 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnregisteredReceivers>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r45);

     label11:
        exitmonitor r46;

     label12:
        r52 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        entermonitor r52;

     label13:
        $r7 = r0.<android.app.LoadedApk: android.util.ArrayMap mServices>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r45);

        r53 = (android.util.ArrayMap) $r8;

     label14:
        if r53 == null goto label23;

        i5 = 0;

     label15:
        $i0 = virtualinvoke r53.<android.util.ArrayMap: int size()>();

        if i5 >= $i0 goto label23;

        $r11 = virtualinvoke r53.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        r54 = (android.app.LoadedApk$ServiceDispatcher) $r11;

        r55 = new android.app.ServiceConnectionLeaked;

        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has leaked ServiceConnection ");

        $r16 = virtualinvoke r54.<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that was originally bound here");

        $r19 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r55.<android.app.ServiceConnectionLeaked: void <init>(java.lang.String)>($r19);

        $r20 = virtualinvoke r54.<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()>();

        $r21 = virtualinvoke $r20.<android.app.ServiceConnectionLeaked: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke r55.<android.app.ServiceConnectionLeaked: void setStackTrace(java.lang.StackTraceElement[])>($r21);

        $r22 = virtualinvoke r55.<android.app.ServiceConnectionLeaked: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityThread", $r22, r55);

     label16:
        if z0 == 0 goto label18;

     label17:
        staticinvoke <android.os.StrictMode: void onServiceConnectionLeaked(java.lang.Throwable)>(r55);

     label18:
        $r23 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r24 = virtualinvoke r54.<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>();

        interfaceinvoke $r23.<android.app.IActivityManager: boolean unbindService(android.app.IServiceConnection)>($r24);

     label19:
        virtualinvoke r54.<android.app.LoadedApk$ServiceDispatcher: void doForget()>();

     label20:
        i5 = i5 + 1;

        goto label15;

     label21:
        $r42 := @caughtexception;

     label22:
        $r43 = virtualinvoke $r42.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r43;

     label23:
        $r9 = r0.<android.app.LoadedApk: android.util.ArrayMap mUnboundServices>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r45);

     label24:
        exitmonitor r52;

     label25:
        return;

     label26:
        $r44 := @caughtexception;

     label27:
        exitmonitor r52;

     label28:
        throw $r44;

     label29:
        $r39 := @caughtexception;

     label30:
        exitmonitor r46;

     label31:
        throw $r39;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label10 to label11 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch android.os.RemoteException from label18 to label19 with label21;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    public void setCompatibilityInfo(android.content.res.CompatibilityInfo)
    {
        android.app.LoadedApk r0;
        android.content.res.CompatibilityInfo r1;
        android.view.DisplayAdjustments $r2;

        r0 := @this: android.app.LoadedApk;

        r1 := @parameter0: android.content.res.CompatibilityInfo;

        $r2 = r0.<android.app.LoadedApk: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r2.<android.view.DisplayAdjustments: void setCompatibilityInfo(android.content.res.CompatibilityInfo)>(r1);

        return;
    }

    public void updateApplicationInfo(android.content.pm.ApplicationInfo, java.util.List)
    {
        android.app.LoadedApk r0;
        java.lang.ClassLoader r1, $r5;
        java.util.ArrayList $r2, $r4;
        android.app.ActivityThread $r3;
        int $i0, $i1, $i2;
        android.app.AppComponentFactory $r6;
        android.content.pm.ApplicationInfo $r7, r19;
        android.app.Application $r8, $r9;
        android.content.res.Resources $r10, $r11, r28;
        boolean $z2, $z3, $z5, z6;
        java.lang.Object $r12, $r14;
        java.lang.String $r13, $r15, $r16, r24, r25, r27, r31;
        android.content.pm.PackageManager$NameNotFoundException $r17;
        java.lang.Throwable $r18;
        java.util.List r20, r35;
        java.util.Iterator r23, r26;
        java.lang.String[] r29, r32, r33;
        android.app.ResourcesManager r30;
        android.content.res.CompatibilityInfo r34;
        java.lang.AssertionError r37;

        r0 := @this: android.app.LoadedApk;

        r19 := @parameter0: android.content.pm.ApplicationInfo;

        r20 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.LoadedApk: void setApplicationInfo(android.content.pm.ApplicationInfo)>(r19);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<android.app.LoadedApk: android.app.ActivityThread mActivityThread>;

        staticinvoke <android.app.LoadedApk: void makePaths(android.app.ActivityThread,android.content.pm.ApplicationInfo,java.util.List)>($r3, r19, $r2);

        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        if r20 == null goto label07;

        r23 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r12 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r12;

        $r13 = <java.io.File: java.lang.String separator>;

        $i1 = virtualinvoke r24.<java.lang.String: int lastIndexOf(java.lang.String)>($r13);

        r25 = virtualinvoke r24.<java.lang.String: java.lang.String substring(int)>($i1);

        r26 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label02:
        z6 = 0;

        $z3 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label04;

        $r14 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) $r14;

        $r15 = <java.io.File: java.lang.String separator>;

        $i2 = virtualinvoke r27.<java.lang.String: int lastIndexOf(java.lang.String)>($r15);

        $r16 = virtualinvoke r27.<java.lang.String: java.lang.String substring(int)>($i2);

        $z5 = virtualinvoke r25.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z5 == 0 goto label03;

        z6 = 1;

        goto label04;

     label03:
        goto label02;

     label04:
        if z6 != 0 goto label05;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r24);

     label05:
        goto label01;

     label06:
        goto label08;

     label07:
        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r2);

     label08:
        entermonitor r0;

     label09:
        specialinvoke r0.<android.app.LoadedApk: void createOrUpdateClassLoaderLocked(java.util.List)>($r4);

        r28 = r0.<android.app.LoadedApk: android.content.res.Resources mResources>;

     label10:
        if r28 == null goto label19;

     label11:
        r29 = virtualinvoke r0.<android.app.LoadedApk: java.lang.String[] getSplitPaths(java.lang.String)>(null);

     label12:
        r30 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        r31 = r0.<android.app.LoadedApk: java.lang.String mResDir>;

        r32 = r0.<android.app.LoadedApk: java.lang.String[] mOverlayDirs>;

        $r7 = r0.<android.app.LoadedApk: android.content.pm.ApplicationInfo mApplicationInfo>;

        r33 = $r7.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        r34 = virtualinvoke r0.<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        r1 = virtualinvoke r0.<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>();

        $r8 = r0.<android.app.LoadedApk: android.app.Application mApplication>;

        if $r8 != null goto label14;

     label13:
        r35 = null;

        goto label15;

     label14:
        $r9 = r0.<android.app.LoadedApk: android.app.Application mApplication>;

        $r10 = virtualinvoke $r9.<android.app.Application: android.content.res.Resources getResources()>();

        r35 = virtualinvoke $r10.<android.content.res.Resources: java.util.List getLoaders()>();

     label15:
        $r11 = virtualinvoke r30.<android.app.ResourcesManager: android.content.res.Resources getResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader,java.util.List)>(null, r31, r29, r32, r33, 0, null, r34, r1, r35);

        r0.<android.app.LoadedApk: android.content.res.Resources mResources> = $r11;

     label16:
        goto label19;

     label17:
        $r17 := @caughtexception;

     label18:
        r37 = new java.lang.AssertionError;

        specialinvoke r37.<java.lang.AssertionError: void <init>(java.lang.Object)>("null split not found");

        throw r37;

     label19:
        exitmonitor r0;

     label20:
        $r5 = r0.<android.app.LoadedApk: java.lang.ClassLoader mDefaultClassLoader>;

        $r6 = specialinvoke r0.<android.app.LoadedApk: android.app.AppComponentFactory createAppFactory(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>(r19, $r5);

        r0.<android.app.LoadedApk: android.app.AppComponentFactory mAppComponentFactory> = $r6;

        return;

     label21:
        $r18 := @caughtexception;

     label22:
        exitmonitor r0;

     label23:
        throw $r18;

        catch java.lang.Throwable from label09 to label10 with label21;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label17;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }
}
