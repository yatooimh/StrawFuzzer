public class android.app.NotificationManager extends java.lang.Object
{
    public static final java.lang.String ACTION_APP_BLOCK_STATE_CHANGED;
    public static final java.lang.String ACTION_AUTOMATIC_ZEN_RULE;
    public static final java.lang.String ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED;
    public static final java.lang.String ACTION_EFFECTS_SUPPRESSOR_CHANGED;
    public static final java.lang.String ACTION_INTERRUPTION_FILTER_CHANGED;
    public static final java.lang.String ACTION_INTERRUPTION_FILTER_CHANGED_INTERNAL;
    public static final java.lang.String ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED;
    public static final java.lang.String ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED;
    public static final java.lang.String ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED;
    public static final java.lang.String ACTION_NOTIFICATION_POLICY_CHANGED;
    public static final int AUTOMATIC_RULE_STATUS_DISABLED;
    public static final int AUTOMATIC_RULE_STATUS_ENABLED;
    public static final int AUTOMATIC_RULE_STATUS_REMOVED;
    public static final int AUTOMATIC_RULE_STATUS_UNKNOWN;
    public static final int BUBBLE_PREFERENCE_ALL;
    public static final int BUBBLE_PREFERENCE_NONE;
    public static final int BUBBLE_PREFERENCE_SELECTED;
    public static final java.lang.String EXTRA_AUTOMATIC_RULE_ID;
    public static final java.lang.String EXTRA_AUTOMATIC_ZEN_RULE_ID;
    public static final java.lang.String EXTRA_AUTOMATIC_ZEN_RULE_STATUS;
    public static final java.lang.String EXTRA_BLOCKED_STATE;
    public static final java.lang.String EXTRA_NOTIFICATION_CHANNEL_GROUP_ID;
    public static final java.lang.String EXTRA_NOTIFICATION_CHANNEL_ID;
    public static final int IMPORTANCE_DEFAULT;
    public static final int IMPORTANCE_HIGH;
    public static final int IMPORTANCE_LOW;
    public static final int IMPORTANCE_MAX;
    public static final int IMPORTANCE_MIN;
    public static final int IMPORTANCE_NONE;
    public static final int IMPORTANCE_UNSPECIFIED;
    public static final int INTERRUPTION_FILTER_ALARMS;
    public static final int INTERRUPTION_FILTER_ALL;
    public static final int INTERRUPTION_FILTER_NONE;
    public static final int INTERRUPTION_FILTER_PRIORITY;
    public static final int INTERRUPTION_FILTER_UNKNOWN;
    public static final java.lang.String META_DATA_AUTOMATIC_RULE_TYPE;
    public static final java.lang.String META_DATA_RULE_INSTANCE_LIMIT;
    private static java.lang.String TAG;
    public static final int VISIBILITY_NO_OVERRIDE;
    private static boolean localLOGV;
    private static android.app.INotificationManager sService;
    private android.content.Context mContext;

    static void <clinit>()
    {
        <android.app.NotificationManager: int VISIBILITY_NO_OVERRIDE> = -1000;

        <android.app.NotificationManager: java.lang.String META_DATA_RULE_INSTANCE_LIMIT> = "android.service.zen.automatic.ruleInstanceLimit";

        <android.app.NotificationManager: java.lang.String META_DATA_AUTOMATIC_RULE_TYPE> = "android.service.zen.automatic.ruleType";

        <android.app.NotificationManager: int INTERRUPTION_FILTER_UNKNOWN> = 0;

        <android.app.NotificationManager: int INTERRUPTION_FILTER_PRIORITY> = 2;

        <android.app.NotificationManager: int INTERRUPTION_FILTER_NONE> = 3;

        <android.app.NotificationManager: int INTERRUPTION_FILTER_ALL> = 1;

        <android.app.NotificationManager: int INTERRUPTION_FILTER_ALARMS> = 4;

        <android.app.NotificationManager: int IMPORTANCE_UNSPECIFIED> = -1000;

        <android.app.NotificationManager: int IMPORTANCE_NONE> = 0;

        <android.app.NotificationManager: int IMPORTANCE_MIN> = 1;

        <android.app.NotificationManager: int IMPORTANCE_MAX> = 5;

        <android.app.NotificationManager: int IMPORTANCE_LOW> = 2;

        <android.app.NotificationManager: int IMPORTANCE_HIGH> = 4;

        <android.app.NotificationManager: int IMPORTANCE_DEFAULT> = 3;

        <android.app.NotificationManager: java.lang.String EXTRA_NOTIFICATION_CHANNEL_ID> = "android.app.extra.NOTIFICATION_CHANNEL_ID";

        <android.app.NotificationManager: java.lang.String EXTRA_NOTIFICATION_CHANNEL_GROUP_ID> = "android.app.extra.NOTIFICATION_CHANNEL_GROUP_ID";

        <android.app.NotificationManager: java.lang.String EXTRA_BLOCKED_STATE> = "android.app.extra.BLOCKED_STATE";

        <android.app.NotificationManager: java.lang.String EXTRA_AUTOMATIC_ZEN_RULE_STATUS> = "android.app.extra.AUTOMATIC_ZEN_RULE_STATUS";

        <android.app.NotificationManager: java.lang.String EXTRA_AUTOMATIC_ZEN_RULE_ID> = "android.app.extra.AUTOMATIC_ZEN_RULE_ID";

        <android.app.NotificationManager: java.lang.String EXTRA_AUTOMATIC_RULE_ID> = "android.app.extra.AUTOMATIC_RULE_ID";

        <android.app.NotificationManager: int BUBBLE_PREFERENCE_SELECTED> = 2;

        <android.app.NotificationManager: int BUBBLE_PREFERENCE_NONE> = 0;

        <android.app.NotificationManager: int BUBBLE_PREFERENCE_ALL> = 1;

        <android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_UNKNOWN> = -1;

        <android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_REMOVED> = 3;

        <android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_ENABLED> = 1;

        <android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_DISABLED> = 2;

        <android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_POLICY_CHANGED> = "android.app.action.NOTIFICATION_POLICY_CHANGED";

        <android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED> = "android.app.action.NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED";

        <android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED> = "android.app.action.NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED";

        <android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED> = "android.app.action.NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED";

        <android.app.NotificationManager: java.lang.String ACTION_INTERRUPTION_FILTER_CHANGED_INTERNAL> = "android.app.action.INTERRUPTION_FILTER_CHANGED_INTERNAL";

        <android.app.NotificationManager: java.lang.String ACTION_INTERRUPTION_FILTER_CHANGED> = "android.app.action.INTERRUPTION_FILTER_CHANGED";

        <android.app.NotificationManager: java.lang.String ACTION_EFFECTS_SUPPRESSOR_CHANGED> = "android.os.action.ACTION_EFFECTS_SUPPRESSOR_CHANGED";

        <android.app.NotificationManager: java.lang.String ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED> = "android.app.action.AUTOMATIC_ZEN_RULE_STATUS_CHANGED";

        <android.app.NotificationManager: java.lang.String ACTION_AUTOMATIC_ZEN_RULE> = "android.app.action.AUTOMATIC_ZEN_RULE";

        <android.app.NotificationManager: java.lang.String ACTION_APP_BLOCK_STATE_CHANGED> = "android.app.action.APP_BLOCK_STATE_CHANGED";

        <android.app.NotificationManager: java.lang.String TAG> = "NotificationManager";

        <android.app.NotificationManager: boolean localLOGV> = 0;

        return;
    }

    void <init>(android.content.Context, android.os.Handler)
    {
        android.app.NotificationManager r0;
        android.content.Context r1;
        android.os.Handler r2;

        r0 := @this: android.app.NotificationManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.NotificationManager: android.content.Context mContext> = r1;

        return;
    }

    private static void checkRequired(java.lang.String, java.lang.Object)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object r6;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Object;

        if r6 == null goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is required");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void fixLegacySmallIcon(android.app.Notification, java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.Notification r1;
        java.lang.String r2;
        android.graphics.drawable.Icon $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.app.NotificationManager;

        r1 := @parameter0: android.app.Notification;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>();

        if $r3 != null goto label1;

        $i0 = r1.<android.app.Notification: int icon>;

        if $i0 == 0 goto label1;

        $i1 = r1.<android.app.Notification: int icon>;

        $r4 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>(r2, $i1);

        virtualinvoke r1.<android.app.Notification: void setSmallIcon(android.graphics.drawable.Icon)>($r4);

     label1:
        return;
    }

    private android.app.Notification fixNotification(android.app.Notification)
    {
        android.app.NotificationManager r0;
        android.app.Notification r1, $r6;
        android.content.Context $r2, $r3, $r5, $r17;
        android.net.Uri $r4, $r13, $r14, $r15;
        android.graphics.drawable.Icon $r7;
        java.lang.StringBuilder $r8;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, r16;
        boolean $z0;
        android.content.pm.ApplicationInfo $r18;
        int $i0;

        r0 := @this: android.app.NotificationManager;

        r1 := @parameter0: android.app.Notification;

        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r16 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r3 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        staticinvoke <android.app.Notification: void addFieldsFromContext(android.content.Context,android.app.Notification)>($r3, r1);

        $r4 = r1.<android.app.Notification: android.net.Uri sound>;

        if $r4 == null goto label1;

        $r13 = r1.<android.app.Notification: android.net.Uri sound>;

        $r14 = virtualinvoke $r13.<android.net.Uri: android.net.Uri getCanonicalUri()>();

        r1.<android.app.Notification: android.net.Uri sound> = $r14;

        $z0 = staticinvoke <android.os.StrictMode: boolean vmFileUriExposureEnabled()>();

        if $z0 == 0 goto label1;

        $r15 = r1.<android.app.Notification: android.net.Uri sound>;

        virtualinvoke $r15.<android.net.Uri: void checkFileUriExposed(java.lang.String)>("Notification.sound");

     label1:
        specialinvoke r0.<android.app.NotificationManager: void fixLegacySmallIcon(android.app.Notification,java.lang.String)>(r1, r16);

        $r17 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r18.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 <= 22 goto label3;

        $r7 = virtualinvoke r1.<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>();

        if $r7 == null goto label2;

        goto label3;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid notification (no valid small icon): ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label3:
        $r5 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        virtualinvoke r1.<android.app.Notification: void reduceImageSizes(android.content.Context)>($r5);

        $r6 = staticinvoke <android.app.Notification$Builder: android.app.Notification maybeCloneStrippedForDelivery(android.app.Notification)>(r1);

        return $r6;
    }

    public static android.app.NotificationManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.app.NotificationManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r2 = (android.app.NotificationManager) $r1;

        return $r2;
    }

    public static android.app.INotificationManager getService()
    {
        android.os.IBinder $r0;
        android.app.INotificationManager r1, r2;

        r1 = <android.app.NotificationManager: android.app.INotificationManager sService>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("notification");

        r2 = staticinvoke <android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>($r0);

        <android.app.NotificationManager: android.app.INotificationManager sService> = r2;

        return r2;
    }

    public static int zenModeFromInterruptionFilter(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        return i1;

     label1:
        return 3;

     label2:
        return 2;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static int zenModeToInterruptionFilter(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        return 0;

     label1:
        return 4;

     label2:
        return 3;

     label3:
        return 2;

     label4:
        return 1;
    }

    public java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.AutomaticZenRule r4;
        java.lang.String r5;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.app.AutomaticZenRule;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r5 = interfaceinvoke r1.<android.app.INotificationManager: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void allowAssistantAdjustment(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r1.<android.app.INotificationManager: void allowAssistantAdjustment(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean areBubblesAllowed()
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r5.<android.app.INotificationManager: boolean areBubblesAllowed(java.lang.String)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean areNotificationsEnabled()
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r5.<android.app.INotificationManager: boolean areNotificationsEnabled(java.lang.String)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean areNotificationsPaused()
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r5.<android.app.INotificationManager: boolean isPackagePaused(java.lang.String)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean canNotifyAsPackage(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.content.Context $r2, $r4;
        java.lang.String $r3, r7;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.NotificationManager;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int getUserId()>();

        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean canNotifyAsPackage(java.lang.String,java.lang.String,int)>($r3, r7, $i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void cancel(int)
    {
        android.app.NotificationManager r0;
        int i0;

        r0 := @this: android.app.NotificationManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.app.NotificationManager: void cancel(java.lang.String,int)>(null, i0);

        return;
    }

    public void cancel(java.lang.String, int)
    {
        android.app.NotificationManager r0;
        java.lang.String r1;
        int i0;
        android.content.Context $r2;
        android.os.UserHandle $r3;

        r0 := @this: android.app.NotificationManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.os.UserHandle getUser()>();

        virtualinvoke r0.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(r1, i0, $r3);

        return;
    }

    public void cancelAll()
    {
        android.app.NotificationManager r0;
        java.lang.String r1, r2, $r9;
        android.content.Context $r4, $r5;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r6;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        android.app.INotificationManager r12;

        r0 := @this: android.app.NotificationManager;

        r12 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        $r4 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = <android.app.NotificationManager: boolean localLOGV>;

        if $z0 == 0 goto label1;

        r2 = <android.app.NotificationManager: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": cancelAll()");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r2, $r9);

     label1:
        $r5 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int getUserId()>();

        interfaceinvoke r12.<android.app.INotificationManager: void cancelAllNotifications(java.lang.String,int)>(r1, $i0);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void cancelAsPackage(java.lang.String, java.lang.String, int)
    {
        android.app.NotificationManager r0;
        java.lang.String r1, $r4, r9;
        int i0, $i1;
        android.app.INotificationManager r2;
        android.content.Context $r3, $r5;
        android.os.UserHandle $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: android.app.NotificationManager;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r3 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        $r5 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.os.UserHandle getUser()>();

        $i1 = virtualinvoke $r6.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r2.<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>(r9, $r4, r1, i0, $i1);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void cancelAsUser(java.lang.String, int, android.os.UserHandle)
    {
        android.app.NotificationManager r0;
        int i0, $i1;
        android.os.UserHandle r1;
        android.app.INotificationManager r2;
        java.lang.String r3, r4, $r8, $r14, r17;
        android.content.Context $r6, $r7;
        boolean $z0;
        java.lang.StringBuilder $r9;
        android.os.RemoteException $r15;
        java.lang.RuntimeException $r16;

        r0 := @this: android.app.NotificationManager;

        r17 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.UserHandle;

        r2 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        $r6 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r3 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = <android.app.NotificationManager: boolean localLOGV>;

        if $z0 == 0 goto label1;

        r4 = <android.app.NotificationManager: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": cancel(");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r4, $r14);

     label1:
        $r7 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getOpPackageName()>();

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r2.<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>(r3, $r8, r17, i0, $i1);

     label2:
        return;

     label3:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r16;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void createNotificationChannel(android.app.NotificationChannel)
    {
        android.app.NotificationManager r0;
        android.app.NotificationChannel r1;
        android.app.NotificationChannel[] $r2;
        java.util.List $r3;

        r0 := @this: android.app.NotificationManager;

        r1 := @parameter0: android.app.NotificationChannel;

        $r2 = newarray (android.app.NotificationChannel)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        virtualinvoke r0.<android.app.NotificationManager: void createNotificationChannels(java.util.List)>($r3);

        return;
    }

    public void createNotificationChannelGroup(android.app.NotificationChannelGroup)
    {
        android.app.NotificationManager r0;
        android.app.NotificationChannelGroup r1;
        android.app.NotificationChannelGroup[] $r2;
        java.util.List $r3;

        r0 := @this: android.app.NotificationManager;

        r1 := @parameter0: android.app.NotificationChannelGroup;

        $r2 = newarray (android.app.NotificationChannelGroup)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        virtualinvoke r0.<android.app.NotificationManager: void createNotificationChannelGroups(java.util.List)>($r3);

        return;
    }

    public void createNotificationChannelGroups(java.util.List)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        java.lang.String r2;
        android.content.pm.ParceledListSlice r3;
        android.content.Context $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.util.List r7;

        r0 := @this: android.app.NotificationManager;

        r7 := @parameter0: java.util.List;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r4 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        r3 = new android.content.pm.ParceledListSlice;

        specialinvoke r3.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r7);

        interfaceinvoke r1.<android.app.INotificationManager: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>(r2, r3);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void createNotificationChannels(java.util.List)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        java.lang.String r2;
        android.content.pm.ParceledListSlice r3;
        android.content.Context $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.util.List r7;

        r0 := @this: android.app.NotificationManager;

        r7 := @parameter0: java.util.List;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r4 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        r3 = new android.content.pm.ParceledListSlice;

        specialinvoke r3.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r7);

        interfaceinvoke r1.<android.app.INotificationManager: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>(r2, r3);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void deleteNotificationChannel(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.content.Context $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.NotificationManager;

        r6 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r1.<android.app.INotificationManager: void deleteNotificationChannel(java.lang.String,java.lang.String)>($r3, r6);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void deleteNotificationChannelGroup(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.content.Context $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.NotificationManager;

        r6 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r1.<android.app.INotificationManager: void deleteNotificationChannelGroup(java.lang.String,java.lang.String)>($r3, r6);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void disallowAssistantAdjustment(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r1.<android.app.INotificationManager: void disallowAssistantAdjustment(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.service.notification.StatusBarNotification[] getActiveNotifications()
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.content.Context $r2, $r3;
        int $i0, $i1;
        android.service.notification.StatusBarNotification[] $r4, $r5, r12;
        java.lang.Object[] $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.String r9;
        android.content.pm.ParceledListSlice r10;
        java.util.List r11;

        r0 := @this: android.app.NotificationManager;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r9 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $r3 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int getUserId()>();

        r10 = interfaceinvoke r1.<android.app.INotificationManager: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>(r9, $i0);

     label2:
        if r10 == null goto label5;

     label3:
        r11 = virtualinvoke r10.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        $i1 = interfaceinvoke r11.<java.util.List: int size()>();

        $r5 = newarray (android.service.notification.StatusBarNotification)[$i1];

        $r6 = interfaceinvoke r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r12 = (android.service.notification.StatusBarNotification[]) $r6;

     label4:
        return r12;

     label5:
        $r4 = newarray (android.service.notification.StatusBarNotification)[0];

        return $r4;

     label6:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.List getAllowedAssistantAdjustments()
    {
        android.app.NotificationManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;
        java.util.List r6;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r5.<android.app.INotificationManager: java.util.List getAllowedAssistantAdjustments(java.lang.String)>($r2);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getAllowedNotificationAssistant()
    {
        android.app.NotificationManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.app.INotificationManager: android.content.ComponentName getAllowedNotificationAssistant()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.app.AutomaticZenRule r5;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r5 = interfaceinvoke r1.<android.app.INotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Map getAutomaticZenRules()
    {
        android.app.NotificationManager r0;
        java.util.List r1;
        java.util.HashMap r2;
        java.util.Iterator r3;
        android.service.notification.ZenModeConfig$ZenRule r4;
        java.lang.String r5, r7;
        android.app.AutomaticZenRule r6;
        android.content.ComponentName r8, r9;
        android.net.Uri r10;
        android.service.notification.ZenPolicy r11;
        int i0, $i1;
        boolean z0, $z1;
        java.lang.Object $r12;
        long $l2;
        android.os.RemoteException $r14, $r16, r33;
        java.lang.RuntimeException $r15;
        android.app.INotificationManager r17;

        r0 := @this: android.app.NotificationManager;

        r17 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label01:
        r1 = interfaceinvoke r17.<android.app.INotificationManager: java.util.List getZenRules()>();

     label02:
        r2 = new java.util.HashMap;

     label03:
        specialinvoke r2.<java.util.HashMap: void <init>()>();

     label04:
        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label19;

     label06:
        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.service.notification.ZenModeConfig$ZenRule) $r12;

     label07:
        r5 = r4.<android.service.notification.ZenModeConfig$ZenRule: java.lang.String id>;

     label08:
        r6 = new android.app.AutomaticZenRule;

     label09:
        r7 = r4.<android.service.notification.ZenModeConfig$ZenRule: java.lang.String name>;

     label10:
        r8 = r4.<android.service.notification.ZenModeConfig$ZenRule: android.content.ComponentName component>;

     label11:
        r9 = r4.<android.service.notification.ZenModeConfig$ZenRule: android.content.ComponentName configurationActivity>;

     label12:
        r10 = r4.<android.service.notification.ZenModeConfig$ZenRule: android.net.Uri conditionId>;

     label13:
        r11 = r4.<android.service.notification.ZenModeConfig$ZenRule: android.service.notification.ZenPolicy zenPolicy>;

     label14:
        $i1 = r4.<android.service.notification.ZenModeConfig$ZenRule: int zenMode>;

        i0 = staticinvoke <android.app.NotificationManager: int zenModeToInterruptionFilter(int)>($i1);

     label15:
        z0 = r4.<android.service.notification.ZenModeConfig$ZenRule: boolean enabled>;

     label16:
        $l2 = r4.<android.service.notification.ZenModeConfig$ZenRule: long creationTime>;

        specialinvoke r6.<android.app.AutomaticZenRule: void <init>(java.lang.String,android.content.ComponentName,android.content.ComponentName,android.net.Uri,android.service.notification.ZenPolicy,int,boolean,long)>(r7, r8, r9, r10, r11, i0, z0, $l2);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

     label17:
        goto label05;

     label18:
        $r14 := @caughtexception;

        r33 = $r14;

        goto label21;

     label19:
        return r2;

     label20:
        $r16 := @caughtexception;

        r33 = $r16;

     label21:
        $r15 = virtualinvoke r33.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r15;

        catch android.os.RemoteException from label01 to label02 with label20;
        catch android.os.RemoteException from label02 to label03 with label20;
        catch android.os.RemoteException from label03 to label04 with label20;
        catch android.os.RemoteException from label04 to label05 with label20;
        catch android.os.RemoteException from label05 to label06 with label20;
        catch android.os.RemoteException from label06 to label07 with label20;
        catch android.os.RemoteException from label07 to label08 with label20;
        catch android.os.RemoteException from label08 to label09 with label20;
        catch android.os.RemoteException from label09 to label10 with label20;
        catch android.os.RemoteException from label10 to label11 with label20;
        catch android.os.RemoteException from label11 to label12 with label20;
        catch android.os.RemoteException from label12 to label13 with label20;
        catch android.os.RemoteException from label13 to label14 with label20;
        catch android.os.RemoteException from label14 to label15 with label20;
        catch android.os.RemoteException from label15 to label16 with label20;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()
    {
        android.app.NotificationManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;
        android.app.NotificationManager$Policy r4;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.app.INotificationManager: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final int getCurrentInterruptionFilter()
    {
        android.app.NotificationManager r0;
        int i0, $i1;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $i1 = interfaceinvoke r3.<android.app.INotificationManager: int getZenMode()>();

        i0 = staticinvoke <android.app.NotificationManager: int zenModeToInterruptionFilter(int)>($i1);

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getEffectsSuppressor()
    {
        android.app.NotificationManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.app.INotificationManager: android.content.ComponentName getEffectsSuppressor()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getEnabledNotificationListenerPackages()
    {
        android.app.NotificationManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;
        java.util.List r4;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.app.INotificationManager: java.util.List getEnabledNotificationListenerPackages()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getEnabledNotificationListeners(int)
    {
        android.app.NotificationManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;
        java.util.List r4;

        r0 := @this: android.app.NotificationManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.app.INotificationManager: java.util.List getEnabledNotificationListeners(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getImportance()
    {
        android.app.NotificationManager r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        i0 = interfaceinvoke r5.<android.app.INotificationManager: int getPackageImportance(java.lang.String)>($r2);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.NotificationChannel getNotificationChannel(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.content.Context $r2, $r4, $r5;
        java.lang.String $r3, $r6, r9;
        int $i0;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.app.NotificationChannel r10;

        r0 := @this: android.app.NotificationManager;

        r9 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int getUserId()>();

        $r5 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        r10 = interfaceinvoke r1.<android.app.INotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)>($r3, $i0, $r6, r9);

     label2:
        return r10;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.NotificationChannel getNotificationChannel(java.lang.String, java.lang.String)
    {
        android.app.NotificationManager r0;
        java.lang.String r1, $r4, $r7, r10;
        android.app.INotificationManager r2;
        android.content.Context $r3, $r5, $r6;
        int $i0;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.app.NotificationChannel r11;

        r0 := @this: android.app.NotificationManager;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r3 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        $r5 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int getUserId()>();

        $r6 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        r11 = interfaceinvoke r2.<android.app.INotificationManager: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>($r4, $i0, $r7, r10, 1, r1);

     label2:
        return r11;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.content.Context $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.app.NotificationChannelGroup r7;

        r0 := @this: android.app.NotificationManager;

        r6 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        r7 = interfaceinvoke r1.<android.app.INotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)>($r3, r6);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getNotificationChannelGroups()
    {
        android.app.NotificationManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.app.INotificationManager r6;
        android.content.pm.ParceledListSlice r7;
        java.util.List r8;

        r0 := @this: android.app.NotificationManager;

        r6 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        r7 = interfaceinvoke r6.<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>($r2);

     label2:
        if r7 == null goto label5;

     label3:
        r8 = virtualinvoke r7.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label4:
        return r8;

     label5:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        return $r3;

     label6:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.List getNotificationChannels()
    {
        android.app.NotificationManager r0;
        android.content.Context $r1, $r3, $r5;
        java.lang.String $r2, $r4;
        int $i0;
        android.content.pm.ParceledListSlice $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.app.INotificationManager r9;
        java.util.List r10;

        r0 := @this: android.app.NotificationManager;

        r9 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int getUserId()>();

        $r6 = interfaceinvoke r9.<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String,java.lang.String,int)>($r2, $r4, $i0);

        r10 = virtualinvoke $r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r10;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getNotificationDelegate()
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.content.Context $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5, r6;

        r0 := @this: android.app.NotificationManager;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r5 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        r6 = interfaceinvoke r1.<android.app.INotificationManager: java.lang.String getNotificationDelegate(java.lang.String)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.NotificationManager$Policy getNotificationPolicy()
    {
        android.app.NotificationManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;
        android.app.NotificationManager$Policy r6;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r5.<android.app.INotificationManager: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)>($r2);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getRuleInstanceCount(android.content.ComponentName)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        int i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.app.INotificationManager: int getRuleInstanceCount(android.content.ComponentName)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getZenMode()
    {
        android.app.NotificationManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        i0 = interfaceinvoke r3.<android.app.INotificationManager: int getZenMode()>();

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.service.notification.ZenModeConfig getZenModeConfig()
    {
        android.app.NotificationManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;
        android.service.notification.ZenModeConfig r4;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.app.INotificationManager: android.service.notification.ZenModeConfig getZenModeConfig()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNotificationAssistantAccessGranted(android.content.ComponentName)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNotificationListenerAccessGranted(android.content.ComponentName)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean isNotificationListenerAccessGranted(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNotificationPolicyAccessGranted()
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke r5.<android.app.INotificationManager: boolean isNotificationPolicyAccessGranted(java.lang.String)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSystemConditionProviderEnabled(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean isSystemConditionProviderEnabled(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean matchesCallFilter(android.os.Bundle)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.Bundle r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.os.Bundle;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean matchesCallFilter(android.os.Bundle)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notify(int, android.app.Notification)
    {
        android.app.NotificationManager r0;
        int i0;
        android.app.Notification r1;

        r0 := @this: android.app.NotificationManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.app.Notification;

        virtualinvoke r0.<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>(null, i0, r1);

        return;
    }

    public void notify(java.lang.String, int, android.app.Notification)
    {
        android.app.NotificationManager r0;
        java.lang.String r1;
        int i0;
        android.app.Notification r2;
        android.content.Context $r3;
        android.os.UserHandle $r4;

        r0 := @this: android.app.NotificationManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.app.Notification;

        $r3 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.os.UserHandle getUser()>();

        virtualinvoke r0.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(r1, i0, r2, $r4);

        return;
    }

    public void notifyAsPackage(java.lang.String, java.lang.String, int, android.app.Notification)
    {
        android.app.NotificationManager r0;
        java.lang.String r1, r4, r5, $r17, r20;
        int i0, $i1;
        android.app.Notification r2, $r8;
        android.app.INotificationManager r3;
        java.lang.StringBuilder r6;
        android.content.Context $r7, $r9;
        boolean $z0;
        android.os.UserHandle $r10;
        android.os.RemoteException $r18;
        java.lang.RuntimeException $r19;

        r0 := @this: android.app.NotificationManager;

        r20 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: android.app.Notification;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        $r7 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r4 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $z0 = <android.app.NotificationManager: boolean localLOGV>;

        if $z0 == 0 goto label2;

        r5 = <android.app.NotificationManager: java.lang.String TAG>;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": notify(");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r5, $r17);

     label2:
        $r8 = specialinvoke r0.<android.app.NotificationManager: android.app.Notification fixNotification(android.app.Notification)>(r2);

        $r9 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.os.UserHandle getUser()>();

        $i1 = virtualinvoke $r10.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r3.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>(r20, r4, r1, i0, $r8, $i1);

     label3:
        return;

     label4:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void notifyAsUser(java.lang.String, int, android.app.Notification, android.os.UserHandle)
    {
        android.app.NotificationManager r0;
        int i0, $i1;
        android.app.Notification r1, $r10;
        android.os.UserHandle r2;
        android.app.INotificationManager r3;
        java.lang.String r4, r5, $r9, $r17, r20;
        java.lang.StringBuilder r6;
        android.content.Context $r7, $r8;
        boolean $z0;
        android.os.RemoteException $r18;
        java.lang.RuntimeException $r19;

        r0 := @this: android.app.NotificationManager;

        r20 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.app.Notification;

        r2 := @parameter3: android.os.UserHandle;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        $r7 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r4 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $z0 = <android.app.NotificationManager: boolean localLOGV>;

        if $z0 == 0 goto label2;

        r5 = <android.app.NotificationManager: java.lang.String TAG>;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": notify(");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r5, $r17);

     label2:
        $r8 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getOpPackageName()>();

        $r10 = specialinvoke r0.<android.app.NotificationManager: android.app.Notification fixNotification(android.app.Notification)>(r1);

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r3.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>(r4, $r9, r20, i0, $r10, $i1);

     label3:
        return;

     label4:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean removeAutomaticZenRule(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean removeAutomaticZenRule(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeAutomaticZenRules(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r1.<android.app.INotificationManager: boolean removeAutomaticZenRules(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition)
    {
        android.app.NotificationManager r0;
        android.service.notification.Condition r1;
        android.app.INotificationManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.NotificationManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.service.notification.Condition;

        r2 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r2.<android.app.INotificationManager: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void setInterruptionFilter(int)
    {
        android.app.NotificationManager r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.app.NotificationManager;

        i0 := @parameter0: int;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r5.<android.app.INotificationManager: void setInterruptionFilter(java.lang.String,int)>($r2, i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNotificationAssistantAccessGranted(android.content.ComponentName, boolean)
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r1.<android.app.INotificationManager: void setNotificationAssistantAccessGranted(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNotificationDelegate(java.lang.String)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        java.lang.String r2, r3, $r9, r12;
        android.content.Context $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: android.app.NotificationManager;

        r12 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        $r5 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = <android.app.NotificationManager: boolean localLOGV>;

        if $z0 == 0 goto label1;

        r3 = <android.app.NotificationManager: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": cancelAll()");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r3, $r9);

     label1:
        interfaceinvoke r1.<android.app.INotificationManager: void setNotificationDelegate(java.lang.String,java.lang.String)>(r2, r12);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNotificationListenerAccessGranted(android.content.ComponentName, boolean)
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r1.<android.app.INotificationManager: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNotificationListenerAccessGrantedForUser(android.content.ComponentName, int, boolean)
    {
        android.app.NotificationManager r0;
        int i0;
        boolean z0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r1.<android.app.INotificationManager: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean)>(r4, i0, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNotificationPolicy(android.app.NotificationManager$Policy)
    {
        android.app.NotificationManager r0;
        android.app.INotificationManager r1;
        android.content.Context $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.app.NotificationManager$Policy r6;

        r0 := @this: android.app.NotificationManager;

        r6 := @parameter0: android.app.NotificationManager$Policy;

        staticinvoke <android.app.NotificationManager: void checkRequired(java.lang.String,java.lang.Object)>("policy", r6);

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r2 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.app.INotificationManager: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)>($r3, r6);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNotificationPolicyAccessGranted(java.lang.String, boolean)
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.app.INotificationManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.NotificationManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r1.<android.app.INotificationManager: void setNotificationPolicyAccessGranted(java.lang.String,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setZenMode(int, android.net.Uri, java.lang.String)
    {
        android.app.NotificationManager r0;
        int i0;
        java.lang.String r1;
        android.app.INotificationManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.net.Uri r5;

        r0 := @this: android.app.NotificationManager;

        i0 := @parameter0: int;

        r5 := @parameter1: android.net.Uri;

        r1 := @parameter2: java.lang.String;

        r2 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r2.<android.app.INotificationManager: void setZenMode(int,android.net.Uri,java.lang.String)>(i0, r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean shouldHideSilentStatusBarIcons()
    {
        android.app.NotificationManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.app.NotificationManager;

        r5 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        $r1 = r0.<android.app.NotificationManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke r5.<android.app.INotificationManager: boolean shouldHideSilentStatusIcons(java.lang.String)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void silenceNotificationSound()
    {
        android.app.NotificationManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;

        r0 := @this: android.app.NotificationManager;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        interfaceinvoke r3.<android.app.INotificationManager: void silenceNotificationSound()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean updateAutomaticZenRule(java.lang.String, android.app.AutomaticZenRule)
    {
        android.app.NotificationManager r0;
        android.app.AutomaticZenRule r1;
        android.app.INotificationManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.NotificationManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.app.AutomaticZenRule;

        r2 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

     label1:
        z0 = interfaceinvoke r2.<android.app.INotificationManager: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
