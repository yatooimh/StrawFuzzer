public class android.app.QueuedWork extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final long DELAY;
    private static final java.lang.String LOG_TAG;
    private static final long MAX_WAIT_TIME_MILLIS;
    private static int mNumWaits;
    private static final com.android.internal.util.ExponentiallyBucketedHistogram mWaitTimes;
    private static boolean sCanDelay;
    private static final java.util.LinkedList sFinishers;
    private static android.os.Handler sHandler;
    private static final java.lang.Object sLock;
    private static java.lang.Object sProcessingWork;
    private static final java.util.LinkedList sWork;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.Object $r2, $r3;
        java.util.LinkedList $r4, $r5;
        com.android.internal.util.ExponentiallyBucketedHistogram $r6;

        <android.app.QueuedWork: long MAX_WAIT_TIME_MILLIS> = 512L;

        <android.app.QueuedWork: long DELAY> = 100L;

        <android.app.QueuedWork: boolean DEBUG> = 0;

        $r0 = class "Landroid/app/QueuedWork;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.app.QueuedWork: java.lang.String LOG_TAG> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <android.app.QueuedWork: java.lang.Object sLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        <android.app.QueuedWork: java.lang.Object sProcessingWork> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        <android.app.QueuedWork: java.util.LinkedList sFinishers> = $r4;

        <android.app.QueuedWork: android.os.Handler sHandler> = null;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        <android.app.QueuedWork: java.util.LinkedList sWork> = $r5;

        <android.app.QueuedWork: boolean sCanDelay> = 1;

        $r6 = new com.android.internal.util.ExponentiallyBucketedHistogram;

        specialinvoke $r6.<com.android.internal.util.ExponentiallyBucketedHistogram: void <init>(int)>(16);

        <android.app.QueuedWork: com.android.internal.util.ExponentiallyBucketedHistogram mWaitTimes> = $r6;

        <android.app.QueuedWork: int mNumWaits> = 0;

        return;
    }

    public void <init>()
    {
        android.app.QueuedWork r0;

        r0 := @this: android.app.QueuedWork;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000()
    {
        staticinvoke <android.app.QueuedWork: void processPendingWork()>();

        return;
    }

    public static void addFinisher(java.lang.Runnable)
    {
        java.lang.Object r0;
        java.util.LinkedList $r1;
        java.lang.Throwable $r2;
        java.lang.Runnable r3;

        r3 := @parameter0: java.lang.Runnable;

        r0 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        $r1 = <android.app.QueuedWork: java.util.LinkedList sFinishers>;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>(r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static android.os.Handler getHandler()
    {
        java.lang.Object r0;
        android.os.HandlerThread r1;
        android.os.Handler $r2, r6;
        android.os.Looper $r3;
        java.lang.Throwable $r4;
        android.app.QueuedWork$QueuedWorkHandler r5;

        r0 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        $r2 = <android.app.QueuedWork: android.os.Handler sHandler>;

        if $r2 != null goto label2;

        r1 = new android.os.HandlerThread;

        specialinvoke r1.<android.os.HandlerThread: void <init>(java.lang.String,int)>("queued-work-looper", -2);

        virtualinvoke r1.<android.os.HandlerThread: void start()>();

        r5 = new android.app.QueuedWork$QueuedWorkHandler;

        $r3 = virtualinvoke r1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r5.<android.app.QueuedWork$QueuedWorkHandler: void <init>(android.os.Looper)>($r3);

        <android.app.QueuedWork: android.os.Handler sHandler> = r5;

     label2:
        r6 = <android.app.QueuedWork: android.os.Handler sHandler>;

        exitmonitor r0;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static boolean hasPendingWork()
    {
        java.lang.Object r0;
        java.util.LinkedList $r2;
        boolean $z0, z1;
        java.lang.Throwable $r3;

        r0 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        $r2 = <android.app.QueuedWork: java.util.LinkedList sWork>;

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        exitmonitor r0;

     label5:
        return z1;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static void processPendingWork()
    {
        java.lang.Object r0, $r2, $r5, r9;
        java.util.LinkedList $r1, $r3, r10;
        android.os.Handler $r4;
        int $i0;
        boolean $z0;
        java.lang.Runnable $r6;
        java.lang.Throwable $r7, $r8;
        java.util.Iterator r11;

        r0 = <android.app.QueuedWork: java.lang.Object sProcessingWork>;

        entermonitor r0;

     label01:
        r9 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r9;

     label02:
        $r1 = <android.app.QueuedWork: java.util.LinkedList sWork>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object clone()>();

        r10 = (java.util.LinkedList) $r2;

        $r3 = <android.app.QueuedWork: java.util.LinkedList sWork>;

        virtualinvoke $r3.<java.util.LinkedList: void clear()>();

        $r4 = staticinvoke <android.app.QueuedWork: android.os.Handler getHandler()>();

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(1);

        exitmonitor r9;

     label03:
        $i0 = virtualinvoke r10.<java.util.LinkedList: int size()>();

        if $i0 <= 0 goto label06;

        r11 = virtualinvoke r10.<java.util.LinkedList: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r5 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Runnable) $r5;

        interfaceinvoke $r6.<java.lang.Runnable: void run()>();

     label05:
        goto label04;

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r9;

     label10:
        throw $r8;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public static void queue(java.lang.Runnable, boolean)
    {
        boolean z0, $z3;
        android.os.Handler r0;
        java.lang.Object r1;
        java.util.LinkedList $r2;
        java.lang.Throwable $r3;
        java.lang.Runnable r4;

        r4 := @parameter0: java.lang.Runnable;

        z0 := @parameter1: boolean;

        r0 = staticinvoke <android.app.QueuedWork: android.os.Handler getHandler()>();

        r1 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r1;

     label01:
        $r2 = <android.app.QueuedWork: java.util.LinkedList sWork>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r4);

     label02:
        if z0 == 0 goto label05;

     label03:
        $z3 = <android.app.QueuedWork: boolean sCanDelay>;

        if $z3 == 0 goto label05;

        virtualinvoke r0.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(1, 100L);

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<android.os.Handler: boolean sendEmptyMessage(int)>(1);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public static void removeFinisher(java.lang.Runnable)
    {
        java.lang.Object r0;
        java.util.LinkedList $r1;
        java.lang.Throwable $r2;
        java.lang.Runnable r3;

        r3 := @parameter0: java.lang.Runnable;

        r0 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        $r1 = <android.app.QueuedWork: java.util.LinkedList sFinishers>;

        virtualinvoke $r1.<java.util.LinkedList: boolean remove(java.lang.Object)>(r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void waitToFinish()
    {
        int i0, $i3, $i4, $i5;
        boolean $z0;
        long $l1, l7, l8;
        byte $b2, $b6;
        com.android.internal.util.ExponentiallyBucketedHistogram $r0, $r3;
        java.lang.Long $r1;
        java.lang.String $r2;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8;
        android.os.Handler r9;
        java.lang.Object r10, r12, $r14, r16;
        android.os.StrictMode$ThreadPolicy r11;
        java.util.LinkedList $r13;
        java.lang.Runnable r15;

        l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r9 = staticinvoke <android.app.QueuedWork: android.os.Handler getHandler()>();

        r10 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r10;

     label01:
        $z0 = virtualinvoke r9.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z0 == 0 goto label02;

        virtualinvoke r9.<android.os.Handler: void removeMessages(int)>(1);

     label02:
        <android.app.QueuedWork: boolean sCanDelay> = 0;

        exitmonitor r10;

     label03:
        r11 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>();

     label04:
        staticinvoke <android.app.QueuedWork: void processPendingWork()>();

     label05:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r11);

     label06:
        r12 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r12;

     label07:
        $r13 = <android.app.QueuedWork: java.util.LinkedList sFinishers>;

        $r14 = virtualinvoke $r13.<java.util.LinkedList: java.lang.Object poll()>();

        r15 = (java.lang.Runnable) $r14;

        exitmonitor r12;

     label08:
        if r15 != null goto label19;

        <android.app.QueuedWork: boolean sCanDelay> = 1;

        r16 = <android.app.QueuedWork: java.lang.Object sLock>;

        entermonitor r16;

     label09:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l8 = $l1 - l7;

     label10:
        $b2 = l8 cmp 0L;

        if $b2 > 0 goto label11;

        goto label14;

     label11:
        $r0 = <android.app.QueuedWork: com.android.internal.util.ExponentiallyBucketedHistogram mWaitTimes>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        $i3 = virtualinvoke $r1.<java.lang.Long: int intValue()>();

        virtualinvoke $r0.<com.android.internal.util.ExponentiallyBucketedHistogram: void add(int)>($i3);

        $i4 = <android.app.QueuedWork: int mNumWaits>;

        i0 = $i4 + 1;

        <android.app.QueuedWork: int mNumWaits> = i0;

     label12:
        $i5 = i0 % 1024;

        if $i5 == 0 goto label13;

        $b6 = l8 cmp 512L;

        if $b6 <= 0 goto label14;

     label13:
        $r3 = <android.app.QueuedWork: com.android.internal.util.ExponentiallyBucketedHistogram mWaitTimes>;

        $r2 = <android.app.QueuedWork: java.lang.String LOG_TAG>;

        virtualinvoke $r3.<com.android.internal.util.ExponentiallyBucketedHistogram: void log(java.lang.String,java.lang.CharSequence)>($r2, "waited: ");

     label14:
        exitmonitor r16;

     label15:
        return;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r16;

     label18:
        throw $r7;

     label19:
        interfaceinvoke r15.<java.lang.Runnable: void run()>();

     label20:
        goto label06;

     label21:
        $r8 := @caughtexception;

     label22:
        exitmonitor r12;

     label23:
        throw $r8;

     label24:
        $r4 := @caughtexception;

        <android.app.QueuedWork: boolean sCanDelay> = 1;

        throw $r4;

     label25:
        $r5 := @caughtexception;

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r11);

        throw $r5;

     label26:
        $r6 := @caughtexception;

     label27:
        exitmonitor r10;

     label28:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label23 to label24 with label24;
        catch java.lang.Throwable from label27 to label28 with label26;
    }
}
