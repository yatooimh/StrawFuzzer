class android.app.SystemServiceRegistry$16 extends android.app.SystemServiceRegistry$CachedServiceFetcher
{

    void <init>()
    {
        android.app.SystemServiceRegistry$16 r0;

        r0 := @this: android.app.SystemServiceRegistry$16;

        specialinvoke r0.<android.app.SystemServiceRegistry$CachedServiceFetcher: void <init>()>();

        return;
    }

    static android.os.IBinder lambda$createService$0()
    {
        android.os.IBinder $r0;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("tethering");

        return $r0;
    }

    public android.net.TetheringManager createService(android.app.ContextImpl)
    {
        android.app.SystemServiceRegistry$16 r0;
        android.app.ContextImpl r1;
        android.app.'-$$Lambda$SystemServiceRegistry$16$s6mZ42tuGUunhKa_5iwjLY5FGdM' $r3;
        android.net.TetheringManager r4;
        java.util.function.Supplier r5;

        r0 := @this: android.app.SystemServiceRegistry$16;

        r1 := @parameter0: android.app.ContextImpl;

        r4 = new android.net.TetheringManager;

        $r3 = <android.app._$$Lambda$SystemServiceRegistry$16$s6mZ42tuGUunhKa_5iwjLY5FGdM: android.app.'-$$Lambda$SystemServiceRegistry$16$s6mZ42tuGUunhKa_5iwjLY5FGdM' INSTANCE>;

        r5 = (java.util.function.Supplier) $r3;

        specialinvoke r4.<android.net.TetheringManager: void <init>(android.content.Context,java.util.function.Supplier)>(r1, r5);

        return r4;
    }

    public volatile java.lang.Object createService(android.app.ContextImpl) throws android.os.ServiceManager$ServiceNotFoundException
    {
        android.app.SystemServiceRegistry$16 r0;
        android.app.ContextImpl r1;
        android.net.TetheringManager $r2;

        r0 := @this: android.app.SystemServiceRegistry$16;

        r1 := @parameter0: android.app.ContextImpl;

        $r2 = virtualinvoke r0.<android.app.SystemServiceRegistry$16: android.net.TetheringManager createService(android.app.ContextImpl)>(r1);

        return $r2;
    }
}
