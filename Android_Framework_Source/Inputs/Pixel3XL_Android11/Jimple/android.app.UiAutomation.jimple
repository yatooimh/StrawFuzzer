public final class android.app.UiAutomation extends java.lang.Object
{
    private static final int CONNECTION_ID_UNDEFINED;
    private static final long CONNECT_TIMEOUT_MILLIS;
    private static final boolean DEBUG;
    public static final int FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES;
    private static final java.lang.String LOG_TAG;
    public static final int ROTATION_FREEZE_0;
    public static final int ROTATION_FREEZE_180;
    public static final int ROTATION_FREEZE_270;
    public static final int ROTATION_FREEZE_90;
    public static final int ROTATION_FREEZE_CURRENT;
    public static final int ROTATION_UNFREEZE;
    private android.accessibilityservice.IAccessibilityServiceClient mClient;
    private int mConnectionId;
    private final java.util.ArrayList mEventQueue;
    private int mFlags;
    private boolean mIsConnecting;
    private boolean mIsDestroyed;
    private long mLastEventTimeMillis;
    private final android.os.Handler mLocalCallbackHandler;
    private final java.lang.Object mLock;
    private android.app.UiAutomation$OnAccessibilityEventListener mOnAccessibilityEventListener;
    private android.os.HandlerThread mRemoteCallbackThread;
    private final android.app.IUiAutomationConnection mUiAutomationConnection;
    private boolean mWaitingForEventDelivery;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.app.UiAutomation: int ROTATION_UNFREEZE> = -2;

        <android.app.UiAutomation: int ROTATION_FREEZE_CURRENT> = -1;

        <android.app.UiAutomation: int ROTATION_FREEZE_90> = 1;

        <android.app.UiAutomation: int ROTATION_FREEZE_270> = 3;

        <android.app.UiAutomation: int ROTATION_FREEZE_180> = 2;

        <android.app.UiAutomation: int ROTATION_FREEZE_0> = 0;

        <android.app.UiAutomation: int FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES> = 1;

        <android.app.UiAutomation: boolean DEBUG> = 0;

        <android.app.UiAutomation: long CONNECT_TIMEOUT_MILLIS> = 5000L;

        <android.app.UiAutomation: int CONNECTION_ID_UNDEFINED> = -1;

        $r0 = class "Landroid/app/UiAutomation;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.app.UiAutomation: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(android.os.Looper, android.app.IUiAutomationConnection)
    {
        android.app.UiAutomation r0;
        android.os.Looper r1;
        android.app.IUiAutomationConnection r2;
        java.lang.Object $r3;
        java.util.ArrayList $r4;
        java.lang.IllegalArgumentException $r5, $r6;
        android.os.Handler $r7;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.app.IUiAutomationConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.app.UiAutomation: java.lang.Object mLock> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue> = $r4;

        r0.<android.app.UiAutomation: int mConnectionId> = -1;

        if r1 == null goto label2;

        if r2 == null goto label1;

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        r0.<android.app.UiAutomation: android.os.Handler mLocalCallbackHandler> = $r7;

        r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection> = r2;

        return;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection cannot be null!");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Looper cannot be null!");

        throw $r5;
    }

    static java.lang.Object access$000(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.app.UiAutomation;

        $r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        return $r1;
    }

    static int access$102(android.app.UiAutomation, int)
    {
        android.app.UiAutomation r0;
        int i0;

        r0 := @parameter0: android.app.UiAutomation;

        i0 := @parameter1: int;

        r0.<android.app.UiAutomation: int mConnectionId> = i0;

        return i0;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        return $r0;
    }

    static long access$302(android.app.UiAutomation, long)
    {
        android.app.UiAutomation r0;
        long l0;

        r0 := @parameter0: android.app.UiAutomation;

        l0 := @parameter1: long;

        r0.<android.app.UiAutomation: long mLastEventTimeMillis> = l0;

        return l0;
    }

    static boolean access$400(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        boolean $z0;

        r0 := @parameter0: android.app.UiAutomation;

        $z0 = r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery>;

        return $z0;
    }

    static java.util.ArrayList access$500(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.app.UiAutomation;

        $r1 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        return $r1;
    }

    static android.app.UiAutomation$OnAccessibilityEventListener access$600(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        android.app.UiAutomation$OnAccessibilityEventListener $r1;

        r0 := @parameter0: android.app.UiAutomation;

        $r1 = r0.<android.app.UiAutomation: android.app.UiAutomation$OnAccessibilityEventListener mOnAccessibilityEventListener>;

        return $r1;
    }

    static android.os.Handler access$700(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.app.UiAutomation;

        $r1 = r0.<android.app.UiAutomation: android.os.Handler mLocalCallbackHandler>;

        return $r1;
    }

    private boolean isConnectedLocked()
    {
        android.app.UiAutomation r0;
        int $i0;
        boolean z0;

        r0 := @this: android.app.UiAutomation;

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void throwIfConnectedLocked()
    {
        android.app.UiAutomation r0;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6;

        r0 := @this: android.app.UiAutomation;

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        if $i0 != -1 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UiAutomation not connected, ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void throwIfNotConnectedLocked()
    {
        android.app.UiAutomation r0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6;

        r0 := @this: android.app.UiAutomation;

        $z0 = specialinvoke r0.<android.app.UiAutomation: boolean isConnectedLocked()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UiAutomation not connected, ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void warnIfBetterCommand(java.lang.String)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("pm grant ");

        if $z0 == 0 goto label1;

        $r3 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, "UiAutomation.grantRuntimePermission() is more robust and should be used instead of \'pm grant\'");

        goto label2;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("pm revoke ");

        if $z1 == 0 goto label2;

        $r2 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "UiAutomation.revokeRuntimePermission() is more robust and should be used instead of \'pm revoke\'");

     label2:
        return;
    }

    public void adoptShellPermissionIdentity()
    {
        android.app.UiAutomation r0;
        android.app.IUiAutomationConnection $r2;
        int $i0;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;
        java.lang.Object r6;

        r0 := @this: android.app.UiAutomation;

        r6 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r6;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r6;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        interfaceinvoke $r2.<android.app.IUiAutomationConnection: void adoptShellPermissionIdentity(int,java.lang.String[])>($i0, null);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error executing adopting shell permission identity!", $r4);

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r6;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public transient void adoptShellPermissionIdentity(java.lang.String[])
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        android.app.IUiAutomationConnection $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.String[] r6;

        r0 := @this: android.app.UiAutomation;

        r6 := @parameter0: java.lang.String[];

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        interfaceinvoke $r2.<android.app.IUiAutomationConnection: void adoptShellPermissionIdentity(int,java.lang.String[])>($i0, r6);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error executing adopting shell permission identity!", $r3);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void clearWindowAnimationFrameStats()
    {
        android.app.UiAutomation r0;
        android.app.IUiAutomationConnection $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;
        java.lang.Object r6;

        r0 := @this: android.app.UiAutomation;

        r6 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r6;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r6;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r2.<android.app.IUiAutomationConnection: void clearWindowAnimationFrameStats()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error clearing window animation frame stats!", $r4);

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r6;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean clearWindowContentFrameStats(int)
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        android.app.IUiAutomationConnection $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        z0 = interfaceinvoke $r2.<android.app.IUiAutomationConnection: boolean clearWindowContentFrameStats(int)>(i0);

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error clearing window content frame stats!", $r3);

        return 0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void connect()
    {
        android.app.UiAutomation r0;

        r0 := @this: android.app.UiAutomation;

        virtualinvoke r0.<android.app.UiAutomation: void connect(int)>(0);

        return;
    }

    public void connect(int)
    {
        android.app.UiAutomation r0;
        int i0;
        long l1, $l2, l4, l5;
        boolean z0, $z1;
        java.lang.StringBuilder r1, $r13;
        android.os.HandlerThread $r2, r20;
        android.os.Looper $r3;
        android.app.IUiAutomationConnection $r4;
        byte $b3;
        java.lang.String $r7, $r17;
        java.lang.Object $r8, r19, r22;
        java.lang.Throwable $r9, $r10, $r11, $r18;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r16, r24;
        android.app.UiAutomation$IAccessibilityServiceClientImpl r21;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        r19 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r19;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfConnectedLocked()>();

        $z1 = r0.<android.app.UiAutomation: boolean mIsConnecting>;

        if $z1 == 0 goto label03;

        exitmonitor r19;

     label02:
        return;

     label03:
        r0.<android.app.UiAutomation: boolean mIsConnecting> = 1;

        r20 = new android.os.HandlerThread;

        specialinvoke r20.<android.os.HandlerThread: void <init>(java.lang.String)>("UiAutomation");

        r0.<android.app.UiAutomation: android.os.HandlerThread mRemoteCallbackThread> = r20;

        virtualinvoke r20.<android.os.HandlerThread: void start()>();

        r21 = new android.app.UiAutomation$IAccessibilityServiceClientImpl;

        $r2 = r0.<android.app.UiAutomation: android.os.HandlerThread mRemoteCallbackThread>;

        $r3 = virtualinvoke $r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r21.<android.app.UiAutomation$IAccessibilityServiceClientImpl: void <init>(android.app.UiAutomation,android.os.Looper)>(r0, $r3);

        r0.<android.app.UiAutomation: android.accessibilityservice.IAccessibilityServiceClient mClient> = r21;

        exitmonitor r19;

     label04:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r4.<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>(r21, i0);

        r0.<android.app.UiAutomation: int mFlags> = i0;

     label05:
        r22 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r22;

     label06:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label07:
        z0 = specialinvoke r0.<android.app.UiAutomation: boolean isConnectedLocked()>();

     label08:
        if z0 == 0 goto label12;

     label09:
        r0.<android.app.UiAutomation: boolean mIsConnecting> = 0;

     label10:
        exitmonitor r22;

     label11:
        return;

     label12:
        l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label13:
        $l2 = l4 - l1;

        l5 = 5000L - $l2;

        $b3 = l5 cmp 0L;

        if $b3 <= 0 goto label18;

     label14:
        $r8 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r8.<java.lang.Object: void wait(long)>(l5);

     label15:
        goto label17;

     label16:
        $r18 := @caughtexception;

     label17:
        goto label07;

     label18:
        r24 = new java.lang.RuntimeException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while connecting ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw r24;

     label19:
        $r10 := @caughtexception;

     label20:
        r0.<android.app.UiAutomation: boolean mIsConnecting> = 0;

     label21:
        throw $r10;

     label22:
        $r11 := @caughtexception;

     label23:
        exitmonitor r22;

     label24:
        throw $r11;

     label25:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while connecting ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r12);

        throw $r16;

     label26:
        $r9 := @caughtexception;

     label27:
        exitmonitor r19;

     label28:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch android.os.RemoteException from label04 to label05 with label25;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.InterruptedException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    public void destroy()
    {
        android.app.UiAutomation r0;

        r0 := @this: android.app.UiAutomation;

        virtualinvoke r0.<android.app.UiAutomation: void disconnect()>();

        r0.<android.app.UiAutomation: boolean mIsDestroyed> = 1;

        return;
    }

    public void disconnect()
    {
        android.app.UiAutomation r0;
        boolean $z0;
        java.lang.String $r3, $r12;
        android.app.IUiAutomationConnection $r4;
        android.os.HandlerThread $r5, $r7;
        java.lang.Throwable $r6, $r8;
        android.os.RemoteException $r9;
        java.lang.Object r13;
        java.lang.RuntimeException r16;
        java.lang.StringBuilder r17, r19;
        java.lang.IllegalStateException r18;

        r0 := @this: android.app.UiAutomation;

        r13 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r13;

     label01:
        $z0 = r0.<android.app.UiAutomation: boolean mIsConnecting>;

        if $z0 != 0 goto label08;

        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        r0.<android.app.UiAutomation: int mConnectionId> = -1;

        exitmonitor r13;

     label02:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r4.<android.app.IUiAutomationConnection: void disconnect()>();

     label03:
        $r5 = r0.<android.app.UiAutomation: android.os.HandlerThread mRemoteCallbackThread>;

        virtualinvoke $r5.<android.os.HandlerThread: boolean quit()>();

        r0.<android.app.UiAutomation: android.os.HandlerThread mRemoteCallbackThread> = null;

        return;

     label04:
        $r6 := @caughtexception;

        goto label07;

     label05:
        $r9 := @caughtexception;

     label06:
        r16 = new java.lang.RuntimeException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while disconnecting ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r9);

        throw r16;

     label07:
        $r7 = r0.<android.app.UiAutomation: android.os.HandlerThread mRemoteCallbackThread>;

        virtualinvoke $r7.<android.os.HandlerThread: boolean quit()>();

        r0.<android.app.UiAutomation: android.os.HandlerThread mRemoteCallbackThread> = null;

        throw $r6;

     label08:
        r18 = new java.lang.IllegalStateException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot call disconnect() while connecting ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r3 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw r18;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r13;

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void dropShellPermissionIdentity()
    {
        android.app.UiAutomation r0;
        android.app.IUiAutomationConnection $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.Object r6;

        r0 := @this: android.app.UiAutomation;

        r6 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r6;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r6;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r2.<android.app.IUiAutomationConnection: void dropShellPermissionIdentity()>();

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error executing dropping shell permission identity!", $r3);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r6;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(java.lang.Runnable, android.app.UiAutomation$AccessibilityEventFilter, long) throws java.util.concurrent.TimeoutException
    {
        android.app.UiAutomation r0;
        long l0, l1, $l2, l5, l7, l10, l11;
        java.util.ArrayList r1, $r2, $r3, $r4, $r5, $r11, $r14, $r19;
        byte $b3, $b4;
        java.lang.String $r10;
        java.lang.Object $r12, $r13, $r15, $r16, $r20, $r21, r37, r39, r41, r44, r50;
        android.view.accessibility.AccessibilityEvent $r17, $r22, r40;
        java.lang.Throwable $r18, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, r43, r49, r52;
        java.lang.Runnable r35;
        android.app.UiAutomation$AccessibilityEventFilter r36;
        boolean z2, z3, z4;
        int i8, i9, i13, i14;
        java.util.concurrent.TimeoutException r47;
        java.lang.StringBuilder r48;

        r0 := @this: android.app.UiAutomation;

        r35 := @parameter0: java.lang.Runnable;

        r36 := @parameter1: android.app.UiAutomation$AccessibilityEventFilter;

        l0 := @parameter2: long;

        r37 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r37;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        $r2 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery> = 1;

        exitmonitor r37;

     label02:
        l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        interfaceinvoke r35.<java.lang.Runnable: void run()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label03:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label04:
        r1 = new java.util.ArrayList;

     label05:
        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label06:
        r39 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

     label07:
        entermonitor r39;

     label08:
        $r4 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        exitmonitor r39;

     label09:
        z2 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

     label10:
        if z2 != 0 goto label27;

     label11:
        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        r40 = (android.view.accessibility.AccessibilityEvent) $r13;

        l7 = virtualinvoke r40.<android.view.accessibility.AccessibilityEvent: long getEventTime()>();

     label12:
        $b4 = l7 cmp l5;

        if $b4 >= 0 goto label13;

        goto label09;

     label13:
        z3 = interfaceinvoke r36.<android.app.UiAutomation$AccessibilityEventFilter: boolean accept(android.view.accessibility.AccessibilityEvent)>(r40);

     label14:
        if z3 == 0 goto label22;

        i8 = interfaceinvoke $r3.<java.util.List: int size()>();

        i9 = 0;

     label15:
        if i9 >= i8 goto label16;

        $r16 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i9);

        $r17 = (android.view.accessibility.AccessibilityEvent) $r16;

        virtualinvoke $r17.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        i9 = i9 + 1;

        goto label15;

     label16:
        r41 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r41;

     label17:
        r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery> = 0;

        $r14 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        virtualinvoke $r14.<java.util.ArrayList: void clear()>();

        $r15 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r15.<java.lang.Object: void notifyAll()>();

        exitmonitor r41;

     label18:
        return r40;

     label19:
        $r25 := @caughtexception;

     label20:
        exitmonitor r41;

     label21:
        throw $r25;

     label22:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r40);

     label23:
        goto label09;

     label24:
        $r18 := @caughtexception;

        r43 = $r18;

        goto label26;

     label25:
        $r31 := @caughtexception;

        r43 = $r31;

     label26:
        goto label48;

     label27:
        l10 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label28:
        $l2 = l10 - l1;

        l11 = l0 - $l2;

        $b3 = l11 cmp 0L;

        if $b3 <= 0 goto label40;

     label29:
        r44 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r44;

     label30:
        $r11 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        z4 = virtualinvoke $r11.<java.util.ArrayList: boolean isEmpty()>();

     label31:
        if z4 == 0 goto label35;

     label32:
        $r12 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r12.<java.lang.Object: void wait(long)>(l11);

     label33:
        goto label35;

     label34:
        $r28 := @caughtexception;

     label35:
        exitmonitor r44;

     label36:
        goto label04;

     label37:
        $r33 := @caughtexception;

     label38:
        exitmonitor r44;

     label39:
        throw $r33;

     label40:
        r47 = new java.util.concurrent.TimeoutException;

        r48 = new java.lang.StringBuilder;

        specialinvoke r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected event not received within: ");

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms among: ");

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r10 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r47.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r10);

        throw r47;

     label41:
        $r30 := @caughtexception;

        r43 = $r30;

        goto label48;

     label42:
        $r27 := @caughtexception;

        r49 = $r27;

     label43:
        exitmonitor r39;

     label44:
        throw r49;

     label45:
        $r23 := @caughtexception;

        r43 = $r23;

        goto label48;

     label46:
        $r29 := @caughtexception;

        r49 = $r29;

        goto label43;

     label47:
        $r24 := @caughtexception;

        r43 = $r24;

     label48:
        i13 = interfaceinvoke $r3.<java.util.List: int size()>();

        i14 = 0;

     label49:
        if i14 >= i13 goto label50;

        $r21 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i14);

        $r22 = (android.view.accessibility.AccessibilityEvent) $r21;

        virtualinvoke $r22.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        i14 = i14 + 1;

        goto label49;

     label50:
        r50 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r50;

     label51:
        r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery> = 0;

        $r19 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        virtualinvoke $r19.<java.util.ArrayList: void clear()>();

        $r20 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r20.<java.lang.Object: void notifyAll()>();

        exitmonitor r50;

     label52:
        throw r43;

     label53:
        $r26 := @caughtexception;

     label54:
        exitmonitor r50;

     label55:
        throw $r26;

     label56:
        $r34 := @caughtexception;

        r52 = $r34;

     label57:
        exitmonitor r37;

     label58:
        throw r52;

     label59:
        $r32 := @caughtexception;

        r52 = $r32;

        goto label57;

        catch java.lang.Throwable from label01 to label02 with label56;
        catch java.lang.Throwable from label03 to label04 with label47;
        catch java.lang.Throwable from label04 to label05 with label47;
        catch java.lang.Throwable from label05 to label06 with label47;
        catch java.lang.Throwable from label06 to label07 with label47;
        catch java.lang.Throwable from label07 to label08 with label47;
        catch java.lang.Throwable from label08 to label09 with label42;
        catch java.lang.Throwable from label09 to label10 with label47;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label27 to label28 with label41;
        catch java.lang.Throwable from label29 to label30 with label45;
        catch java.lang.Throwable from label30 to label31 with label37;
        catch java.lang.InterruptedException from label32 to label33 with label34;
        catch java.lang.Throwable from label32 to label33 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
        catch java.lang.Throwable from label39 to label40 with label45;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.lang.Throwable from label43 to label44 with label46;
        catch java.lang.Throwable from label44 to label45 with label45;
        catch java.lang.Throwable from label51 to label52 with label53;
        catch java.lang.Throwable from label54 to label55 with label53;
        catch java.lang.Throwable from label57 to label58 with label59;
    }

    public android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)
    {
        android.app.UiAutomation r0;
        android.os.ParcelFileDescriptor r1, r11, r12, r13, r14, r15, r17;
        android.app.IUiAutomationConnection $r2;
        java.lang.Throwable $r3, $r7, $r8;
        java.lang.String $r4, $r6, r9;
        android.os.RemoteException $r5;
        java.lang.Object r10;
        android.os.ParcelFileDescriptor[] r16;

        r0 := @this: android.app.UiAutomation;

        r9 := @parameter0: java.lang.String;

        r10 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r10;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r10;

     label02:
        specialinvoke r0.<android.app.UiAutomation: void warnIfBetterCommand(java.lang.String)>(r9);

        r11 = null;

        r12 = null;

        r13 = null;

        r14 = null;

        r15 = null;

     label03:
        r16 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>();

     label04:
        r1 = r16[0];

        r17 = r16[1];

        r15 = r17;

        r12 = r1;

        r13 = r17;

        r11 = r1;

        r14 = r17;

     label05:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r2.<android.app.IUiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>(r9, r17, null);

     label06:
        r12 = r1;

        r13 = r17;

        goto label14;

     label07:
        $r8 := @caughtexception;

        goto label15;

     label08:
        $r5 := @caughtexception;

        r15 = r13;

     label09:
        $r6 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Error executing shell command!", $r5);

     label10:
        goto label14;

     label11:
        $r3 := @caughtexception;

        r15 = r14;

     label12:
        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error executing shell command!", $r3);

     label13:
        r13 = r14;

        r12 = r11;

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r13);

        return r12;

     label15:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        throw $r8;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r10;

     label18:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.io.IOException from label03 to label04 with label11;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.io.IOException from label05 to label06 with label11;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label12 to label13 with label07;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public android.os.ParcelFileDescriptor[] executeShellCommandRw(java.lang.String)
    {
        android.app.UiAutomation r0;
        android.os.ParcelFileDescriptor r1, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r22, r24, r25;
        android.app.IUiAutomationConnection $r2;
        java.lang.Throwable $r3, $r6, $r7;
        android.os.RemoteException $r4;
        java.lang.String $r5, $r8, r9;
        java.lang.Object r10;
        android.os.ParcelFileDescriptor[] r21, r23, $r29;

        r0 := @this: android.app.UiAutomation;

        r9 := @parameter0: java.lang.String;

        r10 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r10;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r10;

     label02:
        specialinvoke r0.<android.app.UiAutomation: void warnIfBetterCommand(java.lang.String)>(r9);

        r11 = null;

        r12 = null;

        r13 = null;

        r14 = null;

        r15 = null;

        r16 = null;

        r17 = null;

        r18 = null;

        r19 = null;

        r20 = null;

     label03:
        r21 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>();

     label04:
        r1 = r21[0];

        r22 = r21[1];

        r15 = r22;

        r16 = null;

        r12 = r1;

        r13 = r22;

        r17 = null;

        r18 = null;

        r11 = r1;

        r14 = r22;

        r19 = null;

        r20 = null;

     label05:
        r23 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>();

     label06:
        r24 = r23[0];

        r25 = r23[1];

        r15 = r22;

        r16 = r24;

        r12 = r1;

        r13 = r22;

        r17 = r24;

        r18 = r25;

        r11 = r1;

        r14 = r22;

        r19 = r24;

        r20 = r25;

     label07:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r2.<android.app.IUiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>(r9, r22, r24);

     label08:
        r11 = r1;

        r13 = r22;

        r17 = r24;

        r18 = r25;

        goto label16;

     label09:
        $r6 := @caughtexception;

        goto label17;

     label10:
        $r4 := @caughtexception;

        r15 = r13;

        r16 = r17;

     label11:
        $r5 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error executing shell command!", $r4);

     label12:
        r11 = r12;

        goto label16;

     label13:
        $r7 := @caughtexception;

        r15 = r14;

        r16 = r19;

     label14:
        $r8 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Error executing shell command!", $r7);

     label15:
        r18 = r20;

        r17 = r19;

        r13 = r14;

     label16:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r13);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r17);

        $r29 = newarray (android.os.ParcelFileDescriptor)[2];

        $r29[0] = r11;

        $r29[1] = r18;

        return $r29;

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r16);

        throw $r6;

     label18:
        $r3 := @caughtexception;

     label19:
        exitmonitor r10;

     label20:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.io.IOException from label03 to label04 with label13;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.io.IOException from label05 to label06 with label13;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label13;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label14 to label15 with label09;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public android.view.accessibility.AccessibilityNodeInfo findFocus(int)
    {
        android.app.UiAutomation r0;
        int i0, $i2;
        android.view.accessibility.AccessibilityInteractionClient $r1;
        long $l1;
        android.view.accessibility.AccessibilityNodeInfo $r2;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i2 = r0.<android.app.UiAutomation: int mConnectionId>;

        $l1 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        $r2 = virtualinvoke $r1.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findFocus(int,int,long,int)>($i2, -2, $l1, i0);

        return $r2;
    }

    public int getConnectionId()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.app.UiAutomation;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getFlags()
    {
        android.app.UiAutomation r0;
        int $i0;

        r0 := @this: android.app.UiAutomation;

        $i0 = r0.<android.app.UiAutomation: int mFlags>;

        return $i0;
    }

    public android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        int i0;
        android.view.accessibility.AccessibilityInteractionClient $r3;
        android.view.accessibility.AccessibilityNodeInfo $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.UiAutomation;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        exitmonitor r1;

     label2:
        $r3 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $r4 = virtualinvoke $r3.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)>(i0);

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()
    {
        android.app.UiAutomation r0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.lang.Object r5;
        android.accessibilityservice.IAccessibilityServiceConnection r6;
        android.accessibilityservice.AccessibilityServiceInfo r7;

        r0 := @this: android.app.UiAutomation;

        r5 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        r6 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        exitmonitor r5;

     label2:
        if r6 == null goto label6;

     label3:
        r7 = interfaceinvoke r6.<android.accessibilityservice.IAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

     label4:
        return r7;

     label5:
        $r2 := @caughtexception;

        $r3 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Error while getting AccessibilityServiceInfo", $r2);

     label6:
        return null;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r5;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        android.app.IUiAutomationConnection $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        android.view.WindowAnimationFrameStats r6;

        r0 := @this: android.app.UiAutomation;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        r6 = interfaceinvoke $r2.<android.app.IUiAutomationConnection: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>();

     label3:
        return r6;

     label4:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error getting window animation frame stats!", $r3);

        return null;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.view.WindowContentFrameStats getWindowContentFrameStats(int)
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1;
        android.app.IUiAutomationConnection $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;
        android.view.WindowContentFrameStats r6;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        r6 = interfaceinvoke $r2.<android.app.IUiAutomationConnection: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>(i0);

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

        $r5 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error getting window content frame stats!", $r4);

        return null;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.util.List getWindows()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        int i0;
        android.view.accessibility.AccessibilityInteractionClient $r3;
        java.util.List $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.UiAutomation;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        exitmonitor r1;

     label2:
        $r3 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $r4 = virtualinvoke $r3.<android.view.accessibility.AccessibilityInteractionClient: java.util.List getWindows(int)>(i0);

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.util.SparseArray getWindowsOnAllDisplays()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        int i0;
        android.view.accessibility.AccessibilityInteractionClient $r3;
        android.util.SparseArray $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.UiAutomation;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        exitmonitor r1;

     label2:
        $r3 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $r4 = virtualinvoke $r3.<android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray getWindowsOnAllDisplays(int)>(i0);

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void grantRuntimePermission(java.lang.String, java.lang.String)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, r2;
        android.os.UserHandle $r3;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        virtualinvoke r0.<android.app.UiAutomation: void grantRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>(r1, r2, $r3);

        return;
    }

    public boolean grantRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, r2;
        android.os.UserHandle r3;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.UserHandle;

        virtualinvoke r0.<android.app.UiAutomation: void grantRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>(r1, r2, r3);

        return 1;
    }

    public void grantRuntimePermissionAsUser(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, r8;
        android.os.UserHandle r2;
        java.lang.Object r3;
        android.app.IUiAutomationConnection $r4;
        int $i0;
        java.lang.Exception $r5;
        java.lang.SecurityException $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.app.UiAutomation;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r3;

     label2:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.app.IUiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>(r8, r1, $i0);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Error granting runtime permission", $r5);

        throw $r6;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r3;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean injectInputEvent(android.view.InputEvent, boolean)
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        android.app.IUiAutomationConnection $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        android.view.InputEvent r6;
        boolean z0, z1;

        r0 := @this: android.app.UiAutomation;

        r6 := @parameter0: android.view.InputEvent;

        z0 := @parameter1: boolean;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        z1 = interfaceinvoke $r2.<android.app.IUiAutomationConnection: boolean injectInputEvent(android.view.InputEvent,boolean)>(r6, z0);

     label3:
        return z1;

     label4:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error while injecting input event!", $r3);

        return 0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isDestroyed()
    {
        android.app.UiAutomation r0;
        boolean $z0;

        r0 := @this: android.app.UiAutomation;

        $z0 = r0.<android.app.UiAutomation: boolean mIsDestroyed>;

        return $z0;
    }

    public final boolean performGlobalAction(int)
    {
        android.app.UiAutomation r0;
        int i0, $i1;
        boolean z0;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Object r5;
        android.accessibilityservice.IAccessibilityServiceConnection r6;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        r5 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.app.UiAutomation: int mConnectionId>;

        r6 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        exitmonitor r5;

     label2:
        if r6 == null goto label6;

     label3:
        z0 = interfaceinvoke r6.<android.accessibilityservice.IAccessibilityServiceConnection: boolean performGlobalAction(int)>(i0);

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error while calling performGlobalAction", $r3);

     label6:
        return 0;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r5;

     label9:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, r2;
        android.os.UserHandle $r3;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        virtualinvoke r0.<android.app.UiAutomation: void revokeRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>(r1, r2, $r3);

        return;
    }

    public boolean revokeRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, r2;
        android.os.UserHandle r3;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.UserHandle;

        virtualinvoke r0.<android.app.UiAutomation: void revokeRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>(r1, r2, r3);

        return 1;
    }

    public void revokeRuntimePermissionAsUser(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, r8;
        android.os.UserHandle r2;
        java.lang.Object r3;
        android.app.IUiAutomationConnection $r4;
        int $i0;
        java.lang.Exception $r5;
        java.lang.SecurityException $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.app.UiAutomation;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r3;

     label2:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r4.<android.app.IUiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>(r8, r1, $i0);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Error granting runtime permission", $r5);

        throw $r6;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r3;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setOnAccessibilityEventListener(android.app.UiAutomation$OnAccessibilityEventListener)
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.app.UiAutomation$OnAccessibilityEventListener r3;

        r0 := @this: android.app.UiAutomation;

        r3 := @parameter0: android.app.UiAutomation$OnAccessibilityEventListener;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.app.UiAutomation: android.app.UiAutomation$OnAccessibilityEventListener mOnAccessibilityEventListener> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean setRotation(int)
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        android.app.IUiAutomationConnection $r6;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        if i0 == -2 goto label4;

        if i0 == -1 goto label4;

        if i0 == 0 goto label4;

        if i0 == 1 goto label4;

        if i0 == 2 goto label4;

        if i0 != 3 goto label3;

        goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid rotation.");

        throw $r2;

     label4:
        $r6 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r6.<android.app.IUiAutomationConnection: boolean setRotation(int)>(i0);

     label5:
        return 1;

     label6:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error while setting rotation!", $r3);

        return 0;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setRunAsMonkey(boolean)
    {
        android.app.UiAutomation r0;
        boolean z0;
        java.lang.Object r1;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.UiAutomation;

        z0 := @parameter0: boolean;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void setUserIsMonkey(boolean)>(z0);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error while setting run as monkey!", $r3);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        android.accessibilityservice.IAccessibilityServiceConnection r2;
        android.view.accessibility.AccessibilityInteractionClient $r3;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        android.accessibilityservice.AccessibilityServiceInfo r8;

        r0 := @this: android.app.UiAutomation;

        r8 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        $r3 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        virtualinvoke $r3.<android.view.accessibility.AccessibilityInteractionClient: void clearCache()>();

        staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        r2 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        exitmonitor r1;

     label2:
        if r2 == null goto label6;

     label3:
        interfaceinvoke r2.<android.accessibilityservice.IAccessibilityServiceConnection: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r8);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Error while setting AccessibilityServiceInfo", $r5);

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void syncInputTransactions()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1;
        android.app.IUiAutomationConnection $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.app.UiAutomation;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        $r2 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r2.<android.app.IUiAutomationConnection: void syncInputTransactions()>();

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error while syncing input transactions!", $r3);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.graphics.Bitmap takeScreenshot()
    {
        android.app.UiAutomation r0;
        int i0, $i1, $i2;
        android.app.IUiAutomationConnection r1;
        android.hardware.display.DisplayManagerGlobal $r2;
        android.graphics.Point $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        java.lang.String $r6;
        java.lang.Object r7;
        android.view.Display r8;
        android.graphics.Rect r10;
        android.graphics.Bitmap r11;

        r0 := @this: android.app.UiAutomation;

        r7 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r7;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r7;

     label2:
        $r2 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        r8 = virtualinvoke $r2.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        $r3 = new android.graphics.Point;

        specialinvoke $r3.<android.graphics.Point: void <init>()>();

        virtualinvoke r8.<android.view.Display: void getRealSize(android.graphics.Point)>($r3);

        i0 = virtualinvoke r8.<android.view.Display: int getRotation()>();

     label3:
        r1 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        r10 = new android.graphics.Rect;

        $i2 = $r3.<android.graphics.Point: int x>;

        $i1 = $r3.<android.graphics.Point: int y>;

        specialinvoke r10.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i2, $i1);

        r11 = interfaceinvoke r1.<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect,int)>(r10, i0);

     label4:
        if r11 != null goto label5;

        return null;

     label5:
        virtualinvoke r11.<android.graphics.Bitmap: void setHasAlpha(boolean)>(0);

        return r11;

     label6:
        $r5 := @caughtexception;

        $r6 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Error while taking screnshot!", $r5);

        return null;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r7;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String toString()
    {
        android.app.UiAutomation r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1, $i2;
        java.lang.String $r4, $r11;

        r0 := @this: android.app.UiAutomation;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UiAutomation@");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[id=");

        $i1 = r0.<android.app.UiAutomation: int mConnectionId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", flags=");

        $i2 = r0.<android.app.UiAutomation: int mFlags>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public void waitForIdle(long, long) throws java.util.concurrent.TimeoutException
    {
        android.app.UiAutomation r0;
        long l0, l1, $l2, $l4, $l5, l7, l8, l9, $l10, $l11, l13;
        java.lang.Object r1, $r8;
        java.lang.StringBuilder r2;
        byte $b3, $b6, $b12;
        java.lang.String $r7;
        java.lang.Throwable $r9, $r10;
        java.util.concurrent.TimeoutException r12;

        r0 := @this: android.app.UiAutomation;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label02:
        l8 = l7;

     label03:
        $l2 = r0.<android.app.UiAutomation: long mLastEventTimeMillis>;

        $b3 = $l2 cmp 0L;

        if $b3 > 0 goto label05;

        r0.<android.app.UiAutomation: long mLastEventTimeMillis> = l7;

     label04:
        l8 = l7;

     label05:
        l9 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label06:
        $l10 = l9 - l8;

        $l11 = l1 - $l10;

        $b12 = $l11 cmp 0L;

        if $b12 <= 0 goto label15;

     label07:
        $l4 = r0.<android.app.UiAutomation: long mLastEventTimeMillis>;

        $l5 = l9 - $l4;

        l13 = l0 - $l5;

     label08:
        $b6 = l13 cmp 0L;

        if $b6 > 0 goto label11;

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r8 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r8.<java.lang.Object: void wait(long)>(l13);

     label12:
        goto label14;

     label13:
        $r10 := @caughtexception;

     label14:
        goto label05;

     label15:
        r12 = new java.util.concurrent.TimeoutException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No idle state with idle timeout: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" within global timeout: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r7);

        throw r12;

     label16:
        $r9 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.InterruptedException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }
}
