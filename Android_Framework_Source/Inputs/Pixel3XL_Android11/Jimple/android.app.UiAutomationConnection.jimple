public final class android.app.UiAutomationConnection extends android.app.IUiAutomationConnection$Stub
{
    private static final int INITIAL_FROZEN_ROTATION_UNSPECIFIED;
    private static final java.lang.String TAG;
    private final android.view.accessibility.IAccessibilityManager mAccessibilityManager;
    private final android.app.IActivityManager mActivityManager;
    private android.accessibilityservice.IAccessibilityServiceClient mClient;
    private int mInitialFrozenRotation;
    private boolean mIsShutdown;
    private final java.lang.Object mLock;
    private int mOwningUid;
    private final android.permission.IPermissionManager mPermissionManager;
    private final android.os.Binder mToken;
    private final android.view.IWindowManager mWindowManager;

    public void <init>()
    {
        android.app.UiAutomationConnection r0;
        android.os.IBinder $r1, $r3, $r5, $r7;
        android.view.IWindowManager $r2;
        android.view.accessibility.IAccessibilityManager $r4;
        android.permission.IPermissionManager $r6;
        android.app.IActivityManager $r8;
        java.lang.Object $r9;
        android.os.Binder $r10;

        r0 := @this: android.app.UiAutomationConnection;

        specialinvoke r0.<android.app.IUiAutomationConnection$Stub: void <init>()>();

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r2 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r1);

        r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager> = $r2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        $r4 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r3);

        r0.<android.app.UiAutomationConnection: android.view.accessibility.IAccessibilityManager mAccessibilityManager> = $r4;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("permissionmgr");

        $r6 = staticinvoke <android.permission.IPermissionManager$Stub: android.permission.IPermissionManager asInterface(android.os.IBinder)>($r5);

        r0.<android.app.UiAutomationConnection: android.permission.IPermissionManager mPermissionManager> = $r6;

        $r7 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("activity");

        $r8 = staticinvoke <android.app.IActivityManager$Stub: android.app.IActivityManager asInterface(android.os.IBinder)>($r7);

        r0.<android.app.UiAutomationConnection: android.app.IActivityManager mActivityManager> = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<android.app.UiAutomationConnection: java.lang.Object mLock> = $r9;

        $r10 = new android.os.Binder;

        specialinvoke $r10.<android.os.Binder: void <init>()>();

        r0.<android.app.UiAutomationConnection: android.os.Binder mToken> = $r10;

        r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation> = -1;

        return;
    }

    private boolean isConnectedLocked()
    {
        android.app.UiAutomationConnection r0;
        android.accessibilityservice.IAccessibilityServiceClient $r1;
        boolean z0;

        r0 := @this: android.app.UiAutomationConnection;

        $r1 = r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void registerUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient, int)
    {
        android.app.UiAutomationConnection r0;
        int i0, $i1, $i2;
        android.view.accessibility.IAccessibilityManager r1;
        android.os.IBinder $r3;
        android.accessibilityservice.AccessibilityServiceInfo $r4;
        android.os.Binder $r5;
        android.os.RemoteException $r6;
        java.lang.IllegalStateException $r7;
        android.accessibilityservice.IAccessibilityServiceClient r8;

        r0 := @this: android.app.UiAutomationConnection;

        r8 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        i0 := @parameter1: int;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        r1 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r3);

        $r4 = new android.accessibilityservice.AccessibilityServiceInfo;

        specialinvoke $r4.<android.accessibilityservice.AccessibilityServiceInfo: void <init>()>();

        $r4.<android.accessibilityservice.AccessibilityServiceInfo: int eventTypes> = -1;

        $r4.<android.accessibilityservice.AccessibilityServiceInfo: int feedbackType> = 16;

        $i1 = $r4.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i2 = $i1 | 65554;

        $r4.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i2;

        virtualinvoke $r4.<android.accessibilityservice.AccessibilityServiceInfo: void setCapabilities(int)>(15);

     label1:
        $r5 = r0.<android.app.UiAutomationConnection: android.os.Binder mToken>;

        interfaceinvoke r1.<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>($r5, r8, $r4, i0);

        r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient> = r8;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error while registering UiTestAutomationService.", $r6);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void restoreRotationStateLocked()
    {
        android.app.UiAutomationConnection r0;
        int $i0, $i1;
        android.view.IWindowManager $r2, $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.UiAutomationConnection;

     label1:
        $i0 = r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation>;

        if $i0 == -1 goto label3;

        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $i1 = r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation>;

        interfaceinvoke $r3.<android.view.IWindowManager: void freezeRotation(int)>($i1);

     label2:
        goto label4;

     label3:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void thawRotation()>();

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void storeRotationStateLocked()
    {
        android.app.UiAutomationConnection r0;
        android.view.IWindowManager $r2, $r3;
        boolean $z0;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.UiAutomationConnection;

     label1:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean isRotationFrozen()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $i0 = interfaceinvoke $r3.<android.view.IWindowManager: int getDefaultDisplayRotation()>();

        r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation> = $i0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void throwIfCalledByNotTrustedUidLocked()
    {
        android.app.UiAutomationConnection r0;
        int i0, i1;
        java.lang.SecurityException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = r0.<android.app.UiAutomationConnection: int mOwningUid>;

        if i0 == i1 goto label2;

        if i1 == 1000 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Calling from not trusted UID!");

        throw $r1;

     label2:
        return;
    }

    private void throwIfNotConnectedLocked()
    {
        android.app.UiAutomationConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not connected!");

        throw $r1;
    }

    private void throwIfShutdownLocked()
    {
        android.app.UiAutomationConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        $z0 = r0.<android.app.UiAutomationConnection: boolean mIsShutdown>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection shutdown!");

        throw $r1;
    }

    private void unregisterUiTestAutomationServiceLocked()
    {
        android.app.UiAutomationConnection r0;
        android.os.IBinder $r1;
        android.accessibilityservice.IAccessibilityServiceClient $r2;
        android.os.RemoteException $r3;
        java.lang.IllegalStateException $r4;
        android.view.accessibility.IAccessibilityManager r5;

        r0 := @this: android.app.UiAutomationConnection;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        r5 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r1);

     label1:
        $r2 = r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient>;

        interfaceinvoke r5.<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>($r2);

        r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient> = null;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error while unregistering UiTestAutomationService", $r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void adoptShellPermissionIdentity(int, java.lang.String[]) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        int i0;
        java.lang.Object r1;
        long l1;
        android.app.IActivityManager $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String[] r5;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String[];

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r2 = r0.<android.app.UiAutomationConnection: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r2.<android.app.IActivityManager: void startDelegateShellPermissionIdentity(int,java.lang.String[])>(i0, r5);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void clearWindowAnimationFrameStats()
    {
        android.app.UiAutomationConnection r0;
        long l0;
        java.lang.Throwable $r2, $r3;
        java.lang.Object r4;

        r0 := @this: android.app.UiAutomationConnection;

        r4 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r4;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r4;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        staticinvoke <android.view.SurfaceControl: boolean clearAnimationFrameStats()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r4;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean clearWindowContentFrameStats(int) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        int i0, i1;
        long l2;
        boolean z0;
        android.view.accessibility.IAccessibilityManager $r2;
        android.view.IWindowManager $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.Object r6;
        android.os.IBinder r7;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        r6 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r6;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r6;

     label02:
        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.accessibility.IAccessibilityManager mAccessibilityManager>;

        r7 = interfaceinvoke $r2.<android.view.accessibility.IAccessibilityManager: android.os.IBinder getWindowToken(int,int)>(i0, i1);

     label04:
        if r7 != null goto label05;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label05:
        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        z0 = interfaceinvoke $r3.<android.view.IWindowManager: boolean clearWindowContentFrameStats(android.os.IBinder)>(r7);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z0;

     label07:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void connect(android.accessibilityservice.IAccessibilityServiceClient, int)
    {
        android.app.UiAutomationConnection r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        android.accessibilityservice.IAccessibilityServiceClient r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.app.UiAutomationConnection;

        r4 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        i0 := @parameter1: int;

        if r4 == null goto label7;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 != 0 goto label3;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r0.<android.app.UiAutomationConnection: int mOwningUid> = $i1;

        specialinvoke r0.<android.app.UiAutomationConnection: void registerUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient,int)>(r4, i0);

        specialinvoke r0.<android.app.UiAutomationConnection: void storeRotationStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected.");

        throw r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Client cannot be null!");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void disconnect()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException r3;

        r0 := @this: android.app.UiAutomationConnection;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 == 0 goto label3;

        r0.<android.app.UiAutomationConnection: int mOwningUid> = -1;

        specialinvoke r0.<android.app.UiAutomationConnection: void unregisterUiTestAutomationServiceLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void restoreRotationStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        r3 = new java.lang.IllegalStateException;

        specialinvoke r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already disconnected.");

        throw r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void dropShellPermissionIdentity() throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1;
        long l0;
        android.app.IActivityManager $r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: android.app.UiAutomationConnection;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r2 = r0.<android.app.UiAutomationConnection: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r2.<android.app.IActivityManager: void stopDelegateShellPermissionIdentity()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void executeShellCommand(java.lang.String, android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        java.lang.Process r1;
        java.lang.Runtime $r2;
        java.lang.Thread $r3, $r5, $r9, r26, r28;
        android.app.UiAutomationConnection$1 $r4;
        android.app.UiAutomationConnection$Repeater $r6, $r10;
        java.io.FileInputStream $r7;
        java.io.FileDescriptor $r8, $r13;
        java.io.InputStream $r11;
        java.io.FileOutputStream $r12;
        java.lang.Throwable $r14, $r21;
        java.lang.StringBuilder $r15;
        java.lang.RuntimeException $r19;
        java.lang.String $r20, r22;
        android.os.ParcelFileDescriptor r23, r24;
        java.lang.Object r25;
        java.io.OutputStream r27;

        r0 := @this: android.app.UiAutomationConnection;

        r22 := @parameter0: java.lang.String;

        r23 := @parameter1: android.os.ParcelFileDescriptor;

        r24 := @parameter2: android.os.ParcelFileDescriptor;

        r25 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r25;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r25;

     label02:
        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        r1 = virtualinvoke $r2.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r22);

     label03:
        if r23 == null goto label04;

        $r9 = new java.lang.Thread;

        $r10 = new android.app.UiAutomationConnection$Repeater;

        $r11 = virtualinvoke r1.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r12 = new java.io.FileOutputStream;

        $r13 = virtualinvoke r23.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r13);

        specialinvoke $r10.<android.app.UiAutomationConnection$Repeater: void <init>(android.app.UiAutomationConnection,java.io.InputStream,java.io.OutputStream)>(r0, $r11, $r12);

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        r26 = $r9;

        virtualinvoke $r9.<java.lang.Thread: void start()>();

        goto label05;

     label04:
        r26 = null;

     label05:
        if r24 == null goto label06;

        r27 = virtualinvoke r1.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        $r5 = new java.lang.Thread;

        $r6 = new android.app.UiAutomationConnection$Repeater;

        $r7 = new java.io.FileInputStream;

        $r8 = virtualinvoke r24.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r8);

        specialinvoke $r6.<android.app.UiAutomationConnection$Repeater: void <init>(android.app.UiAutomationConnection,java.io.InputStream,java.io.OutputStream)>(r0, $r7, r27);

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);

        r28 = $r5;

        virtualinvoke $r5.<java.lang.Thread: void start()>();

        goto label07;

     label06:
        r28 = null;

     label07:
        $r3 = new java.lang.Thread;

        $r4 = new android.app.UiAutomationConnection$1;

        specialinvoke $r4.<android.app.UiAutomationConnection$1: void <init>(android.app.UiAutomationConnection,java.lang.Thread,java.lang.Thread,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,java.lang.Process)>(r0, r28, r26, r23, r24, r1);

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

        return;

     label08:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error running shell command \'");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = new java.lang.RuntimeException;

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r19;

     label09:
        $r21 := @caughtexception;

     label10:
        exitmonitor r25;

     label11:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.io.IOException from label02 to label03 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()
    {
        android.app.UiAutomationConnection r0;
        long l0;
        java.lang.Throwable $r2, $r3;
        java.lang.Object r4;
        android.view.WindowAnimationFrameStats r5;

        r0 := @this: android.app.UiAutomationConnection;

        r4 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r4;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r4;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        r5 = new android.view.WindowAnimationFrameStats;

        specialinvoke r5.<android.view.WindowAnimationFrameStats: void <init>()>();

        staticinvoke <android.view.SurfaceControl: boolean getAnimationFrameStats(android.view.WindowAnimationFrameStats)>(r5);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r5;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r4;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.view.WindowContentFrameStats getWindowContentFrameStats(int) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        int i0, i1;
        java.lang.Object r1;
        long l2;
        android.view.accessibility.IAccessibilityManager $r2;
        android.view.IWindowManager $r3;
        java.lang.Throwable $r4, $r5;
        android.os.IBinder r6;
        android.view.WindowContentFrameStats r7;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.accessibility.IAccessibilityManager mAccessibilityManager>;

        r6 = interfaceinvoke $r2.<android.view.accessibility.IAccessibilityManager: android.os.IBinder getWindowToken(int,int)>(i0, i1);

     label04:
        if r6 != null goto label05;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label05:
        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        r7 = interfaceinvoke $r3.<android.view.IWindowManager: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>(r6);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r7;

     label07:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r5;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void grantRuntimePermission(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        java.lang.String r1, r6;
        int i0;
        java.lang.Object r2;
        long l1;
        android.permission.IPermissionManager $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: android.app.UiAutomationConnection;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r2;

     label2:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r3 = r0.<android.app.UiAutomationConnection: android.permission.IPermissionManager mPermissionManager>;

        interfaceinvoke $r3.<android.permission.IPermissionManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>(r6, r1, i0);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean injectInputEvent(android.view.InputEvent, boolean)
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1;
        long l0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4, $r5;
        android.view.InputEvent r6;
        boolean z0, z1;
        byte b1;

        r0 := @this: android.app.UiAutomationConnection;

        r6 := @parameter0: android.view.InputEvent;

        z0 := @parameter1: boolean;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        if z0 == 0 goto label03;

        b1 = 2;

        goto label04;

     label03:
        b1 = 0;

     label04:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        z1 = interfaceinvoke $r2.<android.view.IWindowManager: boolean injectInputAfterTransactionsApplied(android.view.InputEvent,int)>(r6, b1);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z1;

     label07:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

     label08:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        java.lang.String r1, r6;
        int i0;
        java.lang.Object r2;
        long l1;
        android.permission.IPermissionManager $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: android.app.UiAutomationConnection;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r2;

     label2:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r3 = r0.<android.app.UiAutomationConnection: android.permission.IPermissionManager mPermissionManager>;

        interfaceinvoke $r3.<android.permission.IPermissionManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>(r6, r1, i0, null);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean setRotation(int)
    {
        android.app.UiAutomationConnection r0;
        int i0;
        java.lang.Object r1;
        long l1;
        android.view.IWindowManager $r2, $r3;
        java.lang.Throwable $r4, $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if i0 != -2 goto label05;

     label03:
        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r3.<android.view.IWindowManager: void thawRotation()>();

     label04:
        goto label06;

     label05:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void freezeRotation(int)>(i0);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label07:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

     label08:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void shutdown()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Throwable $r3;

        r0 := @this: android.app.UiAutomationConnection;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

     label2:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        r0.<android.app.UiAutomationConnection: boolean mIsShutdown> = 1;

        $z1 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<android.app.UiAutomationConnection: void disconnect()>();

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void syncInputTransactions()
    {
        android.app.UiAutomationConnection r0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        java.lang.Object r5;

        r0 := @this: android.app.UiAutomationConnection;

        r5 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r5;

     label2:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void syncInputTransactions()>();

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r5;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.graphics.Bitmap takeScreenshot(android.graphics.Rect, int)
    {
        android.app.UiAutomationConnection r0;
        int i0, $i2, $i3;
        java.lang.Object r1;
        long l1;
        java.lang.Throwable $r2, $r3;
        android.graphics.Rect r4;
        android.graphics.Bitmap r5;

        r0 := @this: android.app.UiAutomationConnection;

        r4 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $i2 = virtualinvoke r4.<android.graphics.Rect: int width()>();

        $i3 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        r5 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,int)>(r4, $i2, $i3, i0);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r5;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <android.app.UiAutomationConnection: java.lang.String TAG> = "UiAutomationConnection";

        <android.app.UiAutomationConnection: int INITIAL_FROZEN_ROTATION_UNSPECIFIED> = -1;

        return;
    }
}
