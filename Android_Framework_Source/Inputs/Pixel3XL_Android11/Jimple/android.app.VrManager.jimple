public class android.app.VrManager extends java.lang.Object
{
    private java.util.Map mCallbackMap;
    private final android.service.vr.IVrManager mService;

    public void <init>(android.service.vr.IVrManager)
    {
        android.app.VrManager r0;
        android.service.vr.IVrManager r1;
        android.util.ArrayMap $r2;

        r0 := @this: android.app.VrManager;

        r1 := @parameter0: android.service.vr.IVrManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.VrManager: java.util.Map mCallbackMap> = $r2;

        r0.<android.app.VrManager: android.service.vr.IVrManager mService> = r1;

        return;
    }

    public int getVr2dDisplayId()
    {
        android.app.VrManager r0;
        int i0;
        android.service.vr.IVrManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.VrManager;

     label1:
        $r2 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        i0 = interfaceinvoke $r2.<android.service.vr.IVrManager: int getVr2dDisplayId()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPersistentVrModeEnabled()
    {
        android.app.VrManager r0;
        boolean z0;
        android.service.vr.IVrManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.VrManager;

     label1:
        $r2 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        z0 = interfaceinvoke $r2.<android.service.vr.IVrManager: boolean getPersistentVrModeEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isVrModeEnabled()
    {
        android.app.VrManager r0;
        boolean z0;
        android.service.vr.IVrManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.VrManager;

     label1:
        $r2 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        z0 = interfaceinvoke $r2.<android.service.vr.IVrManager: boolean getVrModeState()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerVrStateCallback(java.util.concurrent.Executor, android.app.VrStateCallback)
    {
        android.app.VrManager r0;
        java.util.Map $r1, $r3;
        boolean $z0;
        android.app.VrManager$CallbackEntry $r2;
        android.service.vr.IVrStateCallbacks $r5;
        android.service.vr.IVrManager $r6, $r8;
        android.service.vr.IPersistentVrStateCallbacks $r7;
        java.lang.Exception $r9;
        android.os.RemoteException $r11;
        java.util.concurrent.Executor r12;
        android.app.VrStateCallback r13;

        r0 := @this: android.app.VrManager;

        r12 := @parameter0: java.util.concurrent.Executor;

        r13 := @parameter1: android.app.VrStateCallback;

        if r13 == null goto label9;

        $r1 = r0.<android.app.VrManager: java.util.Map mCallbackMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r13);

        if $z0 == 0 goto label1;

        goto label9;

     label1:
        $r2 = new android.app.VrManager$CallbackEntry;

        specialinvoke $r2.<android.app.VrManager$CallbackEntry: void <init>(android.app.VrStateCallback,java.util.concurrent.Executor)>(r13, r12);

        $r3 = r0.<android.app.VrManager: java.util.Map mCallbackMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r2);

     label2:
        $r6 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        $r5 = $r2.<android.app.VrManager$CallbackEntry: android.service.vr.IVrStateCallbacks mStateCallback>;

        interfaceinvoke $r6.<android.service.vr.IVrManager: void registerListener(android.service.vr.IVrStateCallbacks)>($r5);

        $r8 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        $r7 = $r2.<android.app.VrManager$CallbackEntry: android.service.vr.IPersistentVrStateCallbacks mPersistentStateCallback>;

        interfaceinvoke $r8.<android.service.vr.IVrManager: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>($r7);

     label3:
        goto label8;

     label4:
        $r11 := @caughtexception;

     label5:
        virtualinvoke r0.<android.app.VrManager: void unregisterVrStateCallback(android.app.VrStateCallback)>(r13);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label8:
        return;

     label9:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void setAndBindVrCompositor(android.content.ComponentName)
    {
        android.app.VrManager r0;
        android.service.vr.IVrManager r1;
        android.os.RemoteException $r2;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: android.app.VrManager;

        r4 := @parameter0: android.content.ComponentName;

     label1:
        r1 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

     label2:
        if r4 != null goto label3;

        r5 = null;

        goto label4;

     label3:
        r5 = virtualinvoke r4.<android.content.ComponentName: java.lang.String flattenToString()>();

     label4:
        interfaceinvoke r1.<android.service.vr.IVrManager: void setAndBindCompositor(java.lang.String)>(r5);

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void setPersistentVrModeEnabled(boolean)
    {
        android.app.VrManager r0;
        boolean z0;
        android.service.vr.IVrManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.VrManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        interfaceinvoke $r2.<android.service.vr.IVrManager: void setPersistentVrModeEnabled(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStandbyEnabled(boolean)
    {
        android.app.VrManager r0;
        boolean z0;
        android.service.vr.IVrManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.VrManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        interfaceinvoke $r2.<android.service.vr.IVrManager: void setStandbyEnabled(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)
    {
        android.app.VrManager r0;
        android.service.vr.IVrManager $r1;
        android.os.RemoteException $r2;
        android.app.Vr2dDisplayProperties r4;

        r0 := @this: android.app.VrManager;

        r4 := @parameter0: android.app.Vr2dDisplayProperties;

     label1:
        $r1 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        interfaceinvoke $r1.<android.service.vr.IVrManager: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVrInputMethod(android.content.ComponentName)
    {
        android.app.VrManager r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.VrManager;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }

    public void unregisterVrStateCallback(android.app.VrStateCallback)
    {
        android.app.VrManager r0;
        android.app.VrManager$CallbackEntry r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        android.service.vr.IVrStateCallbacks $r4;
        android.service.vr.IVrManager $r5, $r7;
        android.service.vr.IPersistentVrStateCallbacks $r6;
        android.os.RemoteException $r8, $r9;
        android.app.VrStateCallback r10;

        r0 := @this: android.app.VrManager;

        r10 := @parameter0: android.app.VrStateCallback;

        $r2 = r0.<android.app.VrManager: java.util.Map mCallbackMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r10);

        r1 = (android.app.VrManager$CallbackEntry) $r3;

        if r1 == null goto label7;

     label1:
        $r5 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        $r4 = r1.<android.app.VrManager$CallbackEntry: android.service.vr.IVrStateCallbacks mStateCallback>;

        interfaceinvoke $r5.<android.service.vr.IVrManager: void unregisterListener(android.service.vr.IVrStateCallbacks)>($r4);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $r7 = r0.<android.app.VrManager: android.service.vr.IVrManager mService>;

        $r6 = r1.<android.app.VrManager$CallbackEntry: android.service.vr.IPersistentVrStateCallbacks mPersistentStateCallback>;

        interfaceinvoke $r7.<android.service.vr.IVrManager: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>($r6);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label4 to label5 with label6;
    }
}
