public final class android.app.WallpaperColors extends java.lang.Object implements android.os.Parcelable
{
    private static final float BRIGHT_IMAGE_MEAN_LUMINANCE;
    public static final android.os.Parcelable$Creator CREATOR;
    private static final float DARK_PIXEL_CONTRAST;
    private static final float DARK_THEME_MEAN_LUMINANCE;
    private static final boolean DEBUG_DARK_PIXELS;
    public static final int HINT_FROM_BITMAP;
    public static final int HINT_SUPPORTS_DARK_TEXT;
    public static final int HINT_SUPPORTS_DARK_THEME;
    private static final int MAX_BITMAP_SIZE;
    private static final float MAX_DARK_AREA;
    private static final int MAX_WALLPAPER_EXTRACTION_AREA;
    private static final float MIN_COLOR_OCCURRENCE;
    private int mColorHints;
    private final java.util.ArrayList mMainColors;

    static void <clinit>()
    {
        android.app.WallpaperColors$1 $r0;

        <android.app.WallpaperColors: float MIN_COLOR_OCCURRENCE> = 0.05F;

        <android.app.WallpaperColors: int MAX_WALLPAPER_EXTRACTION_AREA> = 12544;

        <android.app.WallpaperColors: float MAX_DARK_AREA> = 0.025F;

        <android.app.WallpaperColors: int MAX_BITMAP_SIZE> = 112;

        <android.app.WallpaperColors: int HINT_SUPPORTS_DARK_THEME> = 2;

        <android.app.WallpaperColors: int HINT_SUPPORTS_DARK_TEXT> = 1;

        <android.app.WallpaperColors: int HINT_FROM_BITMAP> = 4;

        <android.app.WallpaperColors: boolean DEBUG_DARK_PIXELS> = 0;

        <android.app.WallpaperColors: float DARK_THEME_MEAN_LUMINANCE> = 0.25F;

        <android.app.WallpaperColors: float DARK_PIXEL_CONTRAST> = 6.0F;

        <android.app.WallpaperColors: float BRIGHT_IMAGE_MEAN_LUMINANCE> = 0.75F;

        $r0 = new android.app.WallpaperColors$1;

        specialinvoke $r0.<android.app.WallpaperColors$1: void <init>()>();

        <android.app.WallpaperColors: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(android.graphics.Color, android.graphics.Color, android.graphics.Color)
    {
        android.app.WallpaperColors r0;
        android.graphics.Color r1, r2, r3;
        int $i0, $i2, $i3;
        float $f0;
        byte $b1;
        float[] r4;

        r0 := @this: android.app.WallpaperColors;

        r1 := @parameter0: android.graphics.Color;

        r3 := @parameter1: android.graphics.Color;

        r2 := @parameter2: android.graphics.Color;

        specialinvoke r0.<android.app.WallpaperColors: void <init>(android.graphics.Color,android.graphics.Color,android.graphics.Color,int)>(r1, r3, r2, 0);

        r4 = newarray (float)[3];

        $i0 = virtualinvoke r1.<android.graphics.Color: int toArgb()>();

        staticinvoke <com.android.internal.graphics.ColorUtils: void colorToHSL(int,float[])>($i0, r4);

        $f0 = r4[2];

        $b1 = $f0 cmpg 0.25F;

        if $b1 >= 0 goto label1;

        $i2 = r0.<android.app.WallpaperColors: int mColorHints>;

        $i3 = 2 | $i2;

        r0.<android.app.WallpaperColors: int mColorHints> = $i3;

     label1:
        return;
    }

    public void <init>(android.graphics.Color, android.graphics.Color, android.graphics.Color, int)
    {
        android.app.WallpaperColors r0;
        android.graphics.Color r1, r2, r3;
        int i0;
        java.lang.IllegalArgumentException $r5, $r7;
        java.util.ArrayList $r6, $r8, $r9;

        r0 := @this: android.app.WallpaperColors;

        r1 := @parameter0: android.graphics.Color;

        r2 := @parameter1: android.graphics.Color;

        r3 := @parameter2: android.graphics.Color;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label4;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(3);

        r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors> = $r6;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r9 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label1:
        if r3 == null goto label3;

        if r2 == null goto label2;

        $r8 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tertiaryColor can\'t be specified when secondaryColor is null");

        throw $r7;

     label3:
        r0.<android.app.WallpaperColors: int mColorHints> = i0;

        return;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Primary color should never be null.");

        throw $r5;
    }

    public void <init>(android.os.Parcel)
    {
        android.app.WallpaperColors r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, i3;
        android.graphics.Color r2;
        java.util.ArrayList $r3, $r4;

        r0 := @this: android.app.WallpaperColors;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors> = $r3;

        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r2 = staticinvoke <android.graphics.Color: android.graphics.Color valueOf(int)>($i2);

        $r4 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.app.WallpaperColors: int mColorHints> = $i1;

        return;
    }

    private static int calculateDarkHints(android.graphics.Bitmap)
    {
        int[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, i16, i17, i18;
        float f0, $f1, $f2;
        double $d0, $d1, d2, $d3, d4;
        byte $b11, $b15, b20, b21, $b22;
        android.graphics.Bitmap r1;
        float[] r2;
        boolean z0;

        r1 := @parameter0: android.graphics.Bitmap;

        if r1 != null goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $i4 = $i2 * $i3;

        r0 = newarray (int)[$i4];

        d2 = 0.0;

        $i5 = lengthof r0;

        $f1 = (float) $i5;

        $f2 = $f1 * 0.025F;

        i0 = (int) $f2;

        i16 = 0;

        $i6 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i7 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i8 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r1.<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>(r0, 0, $i6, 0, 0, $i7, $i8);

        r2 = newarray (float)[3];

        i17 = 0;

     label2:
        $i9 = lengthof r0;

        if i17 >= $i9 goto label6;

        $i12 = r0[i17];

        staticinvoke <com.android.internal.graphics.ColorUtils: void colorToHSL(int,float[])>($i12, r2);

        f0 = r2[2];

        $i13 = r0[i17];

        i1 = staticinvoke <android.graphics.Color: int alpha(int)>($i13);

        $i14 = r0[i17];

        $d1 = staticinvoke <com.android.internal.util.ContrastColorUtil: double calculateContrast(int,int)>($i14, -16777216);

        $b15 = $d1 cmpl 6.0;

        if $b15 <= 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        i18 = i16;

        if z0 != 0 goto label5;

        i18 = i16;

        if i1 == 0 goto label5;

        i18 = i16 + 1;

     label5:
        $d3 = (double) f0;

        d2 = d2 + $d3;

        i17 = i17 + 1;

        i16 = i18;

        goto label2;

     label6:
        $i10 = lengthof r0;

        $d0 = (double) $i10;

        d4 = d2 / $d0;

        b20 = 0;

        $b11 = d4 cmpl 0.75;

        if $b11 <= 0 goto label7;

        b20 = 0;

        if i16 >= i0 goto label7;

        b20 = 0 | 1;

     label7:
        b21 = b20;

        $b22 = d4 cmpg 0.25;

        if $b22 >= 0 goto label8;

        b21 = b20 | 2;

     label8:
        return b21;
    }

    private static android.util.Size calculateOptimalSize(int, int)
    {
        int i0, i1, i2, i3, i4, i5, i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6;
        android.util.Size $r0;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i3 = i1 * i2;

        d6 = 1.0;

        if i3 <= 12544 goto label1;

        $d4 = (double) i3;

        $d5 = 12544.0 / $d4;

        d6 = staticinvoke <java.lang.Math: double sqrt(double)>($d5);

     label1:
        $d0 = (double) i1;

        $d1 = $d0 * d6;

        i0 = (int) $d1;

        $d2 = (double) i2;

        $d3 = $d2 * d6;

        i4 = (int) $d3;

        i5 = i0;

        if i0 != 0 goto label2;

        i5 = 1;

     label2:
        i6 = i4;

        if i4 != 0 goto label3;

        i6 = 1;

     label3:
        $r0 = new android.util.Size;

        specialinvoke $r0.<android.util.Size: void <init>(int,int)>(i5, i6);

        return $r0;
    }

    public static android.app.WallpaperColors fromBitmap(android.graphics.Bitmap)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        com.android.internal.graphics.palette.Palette$Builder $r3, $r5, $r6, $r7, $r8;
        com.android.internal.graphics.palette.Palette $r9;
        java.util.List $r10;
        float $f0, $f1;
        android.app.'-$$Lambda$WallpaperColors$MQFGJ9EZ9CDeGbIhMufJKqru3IE' $r12;
        java.lang.Object $r14;
        com.android.internal.graphics.palette.Palette$Swatch $r15;
        android.graphics.Bitmap r16, r17;
        boolean z1;
        android.util.Size r18;
        android.graphics.Color r19, r20, r21, r22;
        com.android.internal.graphics.palette.VariationalKMeansQuantizer r23;
        java.util.ArrayList r24;
        android.app._$$Lambda$WallpaperColors$8R5kfKKLfHjpw_QXmD1mWOKwJxc r25;
        android.app.WallpaperColors r26;
        java.lang.IllegalArgumentException r27;
        java.util.Comparator r28;

        r16 := @parameter0: android.graphics.Bitmap;

        if r16 == null goto label9;

        i10 = virtualinvoke r16.<android.graphics.Bitmap: int getWidth()>();

        i11 = virtualinvoke r16.<android.graphics.Bitmap: int getHeight()>();

        z1 = 0;

        r17 = r16;

        $i0 = i10 * i11;

        if $i0 <= 12544 goto label1;

        z1 = 1;

        $i6 = virtualinvoke r16.<android.graphics.Bitmap: int getWidth()>();

        $i7 = virtualinvoke r16.<android.graphics.Bitmap: int getHeight()>();

        r18 = staticinvoke <android.app.WallpaperColors: android.util.Size calculateOptimalSize(int,int)>($i6, $i7);

        $i8 = virtualinvoke r18.<android.util.Size: int getWidth()>();

        $i9 = virtualinvoke r18.<android.util.Size: int getHeight()>();

        r17 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(r16, $i8, $i9, 1);

     label1:
        r24 = new java.util.ArrayList;

        $r3 = staticinvoke <com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Builder 'from'(android.graphics.Bitmap)>(r17);

        r23 = new com.android.internal.graphics.palette.VariationalKMeansQuantizer;

        specialinvoke r23.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: void <init>()>();

        $r5 = virtualinvoke $r3.<com.android.internal.graphics.palette.Palette$Builder: com.android.internal.graphics.palette.Palette$Builder setQuantizer(com.android.internal.graphics.palette.Quantizer)>(r23);

        $r6 = virtualinvoke $r5.<com.android.internal.graphics.palette.Palette$Builder: com.android.internal.graphics.palette.Palette$Builder maximumColorCount(int)>(5);

        $r7 = virtualinvoke $r6.<com.android.internal.graphics.palette.Palette$Builder: com.android.internal.graphics.palette.Palette$Builder clearFilters()>();

        $r8 = virtualinvoke $r7.<com.android.internal.graphics.palette.Palette$Builder: com.android.internal.graphics.palette.Palette$Builder resizeBitmapArea(int)>(12544);

        $r9 = virtualinvoke $r8.<com.android.internal.graphics.palette.Palette$Builder: com.android.internal.graphics.palette.Palette generate()>();

        $r10 = virtualinvoke $r9.<com.android.internal.graphics.palette.Palette: java.util.List getSwatches()>();

        specialinvoke r24.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        r25 = new android.app._$$Lambda$WallpaperColors$8R5kfKKLfHjpw_QXmD1mWOKwJxc;

        $i1 = virtualinvoke r17.<android.graphics.Bitmap: int getWidth()>();

        $i2 = virtualinvoke r17.<android.graphics.Bitmap: int getHeight()>();

        $i3 = $i1 * $i2;

        $f0 = (float) $i3;

        $f1 = $f0 * 0.05F;

        specialinvoke r25.<android.app._$$Lambda$WallpaperColors$8R5kfKKLfHjpw_QXmD1mWOKwJxc: void <init>(float)>($f1);

        virtualinvoke r24.<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>(r25);

        $r12 = <android.app._$$Lambda$WallpaperColors$MQFGJ9EZ9CDeGbIhMufJKqru3IE: android.app.'-$$Lambda$WallpaperColors$MQFGJ9EZ9CDeGbIhMufJKqru3IE' INSTANCE>;

        r28 = (java.util.Comparator) $r12;

        virtualinvoke r24.<java.util.ArrayList: void sort(java.util.Comparator)>(r28);

        i12 = virtualinvoke r24.<java.util.ArrayList: int size()>();

        r19 = null;

        r20 = null;

        r21 = null;

        i13 = 0;

     label2:
        if i13 >= i12 goto label7;

        $r14 = virtualinvoke r24.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r15 = (com.android.internal.graphics.palette.Palette$Swatch) $r14;

        $i5 = virtualinvoke $r15.<com.android.internal.graphics.palette.Palette$Swatch: int getRgb()>();

        r22 = staticinvoke <android.graphics.Color: android.graphics.Color valueOf(int)>($i5);

        if i13 == 0 goto label5;

        if i13 == 1 goto label4;

        if i13 == 2 goto label3;

        goto label7;

     label3:
        r21 = r22;

        goto label6;

     label4:
        r20 = r22;

        goto label6;

     label5:
        r19 = r22;

     label6:
        i13 = i13 + 1;

        goto label2;

     label7:
        i14 = staticinvoke <android.app.WallpaperColors: int calculateDarkHints(android.graphics.Bitmap)>(r17);

        if z1 == 0 goto label8;

        virtualinvoke r17.<android.graphics.Bitmap: void recycle()>();

     label8:
        r26 = new android.app.WallpaperColors;

        $i4 = i14 | 4;

        specialinvoke r26.<android.app.WallpaperColors: void <init>(android.graphics.Color,android.graphics.Color,android.graphics.Color,int)>(r19, r20, r21, $i4);

        return r26;

     label9:
        r27 = new java.lang.IllegalArgumentException;

        specialinvoke r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bitmap can\'t be null");

        throw r27;
    }

    public static android.app.WallpaperColors fromDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r2;
        android.util.Size r3;
        android.graphics.Bitmap$Config $r4;
        android.graphics.Bitmap r5;
        android.graphics.Canvas $r6;
        android.app.WallpaperColors r8;

        r0 := @parameter0: android.graphics.drawable.Drawable;

        if r0 == null goto label3;

        r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>();

        i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if i1 <= 0 goto label1;

        i2 = i0;

        if i0 > 0 goto label2;

     label1:
        i1 = 112;

        i2 = 112;

     label2:
        r3 = staticinvoke <android.app.WallpaperColors: android.util.Size calculateOptimalSize(int,int)>(i1, i2);

        $i3 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i4 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i3, $i4, $r4);

        $r6 = new android.graphics.Canvas;

        specialinvoke $r6.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r5);

        $i5 = virtualinvoke r5.<android.graphics.Bitmap: int getWidth()>();

        $i6 = virtualinvoke r5.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i5, $i6);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r6);

        r8 = staticinvoke <android.app.WallpaperColors: android.app.WallpaperColors fromBitmap(android.graphics.Bitmap)>(r5);

        virtualinvoke r5.<android.graphics.Bitmap: void recycle()>();

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r1);

        return r8;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Drawable cannot be null");

        throw $r2;
    }

    static boolean lambda$fromBitmap$0(float, com.android.internal.graphics.palette.Palette$Swatch)
    {
        float f0, $f1;
        com.android.internal.graphics.palette.Palette$Swatch r0;
        int $i0;
        byte $b1;
        boolean z0;

        f0 := @parameter0: float;

        r0 := @parameter1: com.android.internal.graphics.palette.Palette$Swatch;

        $i0 = virtualinvoke r0.<com.android.internal.graphics.palette.Palette$Swatch: int getPopulation()>();

        $f1 = (float) $i0;

        $b1 = $f1 cmpg f0;

        if $b1 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static int lambda$fromBitmap$1(com.android.internal.graphics.palette.Palette$Swatch, com.android.internal.graphics.palette.Palette$Swatch)
    {
        com.android.internal.graphics.palette.Palette$Swatch r0, r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: com.android.internal.graphics.palette.Palette$Swatch;

        r1 := @parameter1: com.android.internal.graphics.palette.Palette$Swatch;

        $i0 = virtualinvoke r1.<com.android.internal.graphics.palette.Palette$Swatch: int getPopulation()>();

        $i1 = virtualinvoke r0.<com.android.internal.graphics.palette.Palette$Swatch: int getPopulation()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public int describeContents()
    {
        android.app.WallpaperColors r0;

        r0 := @this: android.app.WallpaperColors;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.app.WallpaperColors r0, r6;
        java.lang.Class $r1, $r2;
        java.util.ArrayList $r3, $r4;
        boolean $z1, z2;
        int $i0, $i1;
        java.lang.Object r5;

        r0 := @this: android.app.WallpaperColors;

        r5 := @parameter0: java.lang.Object;

        if r5 == null goto label3;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label1;

        goto label3;

     label1:
        r6 = (android.app.WallpaperColors) r5;

        z2 = 0;

        $r4 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $r3 = r6.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $z1 = virtualinvoke $r4.<java.util.ArrayList: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        z2 = 0;

        $i1 = r0.<android.app.WallpaperColors: int mColorHints>;

        $i0 = r6.<android.app.WallpaperColors: int mColorHints>;

        if $i1 != $i0 goto label2;

        z2 = 1;

     label2:
        return z2;

     label3:
        return 0;
    }

    public int getColorHints()
    {
        android.app.WallpaperColors r0;
        int $i0;

        r0 := @this: android.app.WallpaperColors;

        $i0 = r0.<android.app.WallpaperColors: int mColorHints>;

        return $i0;
    }

    public java.util.List getMainColors()
    {
        android.app.WallpaperColors r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        r0 := @this: android.app.WallpaperColors;

        $r1 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public android.graphics.Color getPrimaryColor()
    {
        android.app.WallpaperColors r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        android.graphics.Color $r3;

        r0 := @this: android.app.WallpaperColors;

        $r1 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r3 = (android.graphics.Color) $r2;

        return $r3;
    }

    public android.graphics.Color getSecondaryColor()
    {
        android.app.WallpaperColors r0;
        java.util.ArrayList $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        android.graphics.Color r4;

        r0 := @this: android.app.WallpaperColors;

        $r1 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 >= 2 goto label1;

        r4 = null;

        goto label2;

     label1:
        $r2 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(1);

        r4 = (android.graphics.Color) $r3;

     label2:
        return r4;
    }

    public android.graphics.Color getTertiaryColor()
    {
        android.app.WallpaperColors r0;
        java.util.ArrayList $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        android.graphics.Color r4;

        r0 := @this: android.app.WallpaperColors;

        $r1 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 >= 3 goto label1;

        r4 = null;

        goto label2;

     label1:
        $r2 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(2);

        r4 = (android.graphics.Color) $r3;

     label2:
        return r4;
    }

    public int hashCode()
    {
        android.app.WallpaperColors r0;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.app.WallpaperColors;

        $r1 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int hashCode()>();

        $i2 = $i0 * 31;

        $i1 = r0.<android.app.WallpaperColors: int mColorHints>;

        $i3 = $i2 + $i1;

        return $i3;
    }

    public void setColorHints(int)
    {
        android.app.WallpaperColors r0;
        int i0;

        r0 := @this: android.app.WallpaperColors;

        i0 := @parameter0: int;

        r0.<android.app.WallpaperColors: int mColorHints> = i0;

        return;
    }

    public java.lang.String toString()
    {
        android.app.WallpaperColors r0;
        java.lang.StringBuilder $r3, $r5;
        java.util.ArrayList $r4, $r13;
        int $i0, $i1, $i2, i3;
        java.lang.String $r7, $r12, $r16;
        java.lang.Object $r14;
        android.graphics.Color $r15;

        r0 := @this: android.app.WallpaperColors;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label1:
        $r4 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i3 >= $i0 goto label2;

        $r13 = r0.<android.app.WallpaperColors: java.util.ArrayList mMainColors>;

        $r14 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r15 = (android.graphics.Color) $r14;

        $i2 = virtualinvoke $r15.<android.graphics.Color: int toArgb()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i3 = i3 + 1;

        goto label1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[WallpaperColors: ");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("h: ");

        $i1 = r0.<android.app.WallpaperColors: int mColorHints>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.app.WallpaperColors r0;
        android.os.Parcel r1;
        java.util.List r2;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object $r3;
        android.graphics.Color $r4;

        r0 := @this: android.app.WallpaperColors;

        r1 := @parameter0: android.os.Parcel;

        i3 := @parameter1: int;

        r2 = virtualinvoke r0.<android.app.WallpaperColors: java.util.List getMainColors()>();

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r4 = (android.graphics.Color) $r3;

        $i2 = virtualinvoke $r4.<android.graphics.Color: int toArgb()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        i4 = i4 + 1;

        goto label1;

     label2:
        $i1 = r0.<android.app.WallpaperColors: int mColorHints>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        return;
    }
}
