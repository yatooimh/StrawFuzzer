public class android.app.WallpaperManager$ColorManagementProxy extends java.lang.Object
{
    private final java.util.Set mSupportedColorSpaces;

    public void <init>(android.content.Context)
    {
        android.app.WallpaperManager$ColorManagementProxy r0;
        java.util.HashSet $r1;
        java.util.Set $r2;
        android.graphics.ColorSpace[] $r3;
        java.util.List $r4;
        android.content.Context r5;
        android.view.Display r6;

        r0 := @this: android.app.WallpaperManager$ColorManagementProxy;

        r5 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<android.app.WallpaperManager$ColorManagementProxy: java.util.Set mSupportedColorSpaces> = $r1;

        r6 = virtualinvoke r5.<android.content.Context: android.view.Display getDisplayNoVerify()>();

        if r6 == null goto label1;

        $r2 = r0.<android.app.WallpaperManager$ColorManagementProxy: java.util.Set mSupportedColorSpaces>;

        $r3 = virtualinvoke r6.<android.view.Display: android.graphics.ColorSpace[] getSupportedWideColorGamut()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

     label1:
        return;
    }

    void doColorManagement(android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo)
    {
        android.app.WallpaperManager$ColorManagementProxy r0;
        android.graphics.ImageDecoder$ImageInfo r1;
        android.graphics.ColorSpace $r3, $r5, $r8;
        boolean $z0;
        android.graphics.ColorSpace$Named $r4;
        java.lang.StringBuilder $r6;
        java.lang.String $r10, r12;
        android.graphics.ImageDecoder r11;

        r0 := @this: android.app.WallpaperManager$ColorManagementProxy;

        r11 := @parameter0: android.graphics.ImageDecoder;

        r1 := @parameter1: android.graphics.ImageDecoder$ImageInfo;

        $r3 = virtualinvoke r1.<android.graphics.ImageDecoder$ImageInfo: android.graphics.ColorSpace getColorSpace()>();

        $z0 = virtualinvoke r0.<android.app.WallpaperManager$ColorManagementProxy: boolean isSupportedColorSpace(android.graphics.ColorSpace)>($r3);

        if $z0 != 0 goto label1;

        $r4 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        $r5 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r4);

        virtualinvoke r11.<android.graphics.ImageDecoder: void setTargetColorSpace(android.graphics.ColorSpace)>($r5);

        r12 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not supported color space: ");

        $r8 = virtualinvoke r1.<android.graphics.ImageDecoder$ImageInfo: android.graphics.ColorSpace getColorSpace()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r12, $r10);

     label1:
        return;
    }

    public java.util.Set getSupportedColorSpaces()
    {
        android.app.WallpaperManager$ColorManagementProxy r0;
        java.util.Set $r1;

        r0 := @this: android.app.WallpaperManager$ColorManagementProxy;

        $r1 = r0.<android.app.WallpaperManager$ColorManagementProxy: java.util.Set mSupportedColorSpaces>;

        return $r1;
    }

    boolean isSupportedColorSpace(android.graphics.ColorSpace)
    {
        android.app.WallpaperManager$ColorManagementProxy r0;
        android.graphics.ColorSpace r1, $r3;
        android.graphics.ColorSpace$Named $r2;
        java.util.Set $r4;
        boolean $z0, z1;

        r0 := @this: android.app.WallpaperManager$ColorManagementProxy;

        r1 := @parameter0: android.graphics.ColorSpace;

        if r1 == null goto label2;

        $r2 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        $r3 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r2);

        if r1 == $r3 goto label1;

        $r4 = virtualinvoke r0.<android.app.WallpaperManager$ColorManagementProxy: java.util.Set getSupportedColorSpaces()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }
}
