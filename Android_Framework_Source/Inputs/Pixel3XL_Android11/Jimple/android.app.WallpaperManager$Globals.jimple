class android.app.WallpaperManager$Globals extends android.app.IWallpaperManagerCallback$Stub
{
    private android.graphics.Bitmap mCachedWallpaper;
    private int mCachedWallpaperUserId;
    private boolean mColorCallbackRegistered;
    private final java.util.ArrayList mColorListeners;
    private android.graphics.Bitmap mDefaultWallpaper;
    private android.os.Handler mMainLooperHandler;
    private final android.app.IWallpaperManager mService;

    void <init>(android.app.IWallpaperManager, android.os.Looper)
    {
        android.app.WallpaperManager$Globals r0;
        android.app.IWallpaperManager r1;
        android.os.Looper r2;
        java.util.ArrayList $r3;
        android.os.Handler $r4;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.app.IWallpaperManager;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<android.app.IWallpaperManagerCallback$Stub: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.app.WallpaperManager$Globals: java.util.ArrayList mColorListeners> = $r3;

        r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService> = r1;

        $r4 = new android.os.Handler;

        specialinvoke $r4.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        r0.<android.app.WallpaperManager$Globals: android.os.Handler mMainLooperHandler> = $r4;

        virtualinvoke r0.<android.app.WallpaperManager$Globals: void forgetLoadedWallpaper()>();

        return;
    }

    static android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)
    {
        android.app.WallpaperManager$Globals r0;
        android.app.IWallpaperManager $r1;

        r0 := @parameter0: android.app.WallpaperManager$Globals;

        $r1 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        return $r1;
    }

    private android.graphics.Bitmap getCurrentWallpaperLocked(android.content.Context, int, boolean, android.app.WallpaperManager$ColorManagementProxy)
    {
        android.app.WallpaperManager$Globals r0;
        boolean z0;
        android.app.IWallpaperManager $r1, $r2;
        java.lang.String $r3, $r4, $r6, $r12;
        byte[] $r5;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9, $r10, $r11;
        android.content.Context r13;
        int i2, i3;
        android.app.WallpaperManager$ColorManagementProxy r14;
        android.os.Bundle r15;
        android.os.ParcelFileDescriptor r16;
        java.io.BufferedInputStream r17;
        android.os.ParcelFileDescriptor$AutoCloseInputStream r18;
        java.io.ByteArrayOutputStream r19;
        android.graphics.ImageDecoder$Source r20;
        android.app._$$Lambda$WallpaperManager$Globals$alsWlyseh5qEzEBKjJOHGd0GnHk r21;
        android.graphics.Bitmap r22;

        r0 := @this: android.app.WallpaperManager$Globals;

        r13 := @parameter0: android.content.Context;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        r14 := @parameter3: android.app.WallpaperManager$ColorManagementProxy;

        $r1 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        if $r1 != null goto label01;

        $r6 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

        return null;

     label01:
        r15 = new android.os.Bundle;

        specialinvoke r15.<android.os.Bundle: void <init>()>();

        $r2 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        $r3 = virtualinvoke r13.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = virtualinvoke r13.<android.content.Context: java.lang.String getAttributionTag()>();

        r16 = interfaceinvoke $r2.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>($r3, $r4, r0, 1, r15, i2);

     label02:
        if r16 == null goto label20;

     label03:
        r17 = new java.io.BufferedInputStream;

        r18 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke r18.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r16);

        specialinvoke r17.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r18);

     label04:
        r19 = new java.io.ByteArrayOutputStream;

        specialinvoke r19.<java.io.ByteArrayOutputStream: void <init>()>();

     label05:
        i3 = virtualinvoke r17.<java.io.BufferedInputStream: int read()>();

     label06:
        if i3 == -1 goto label09;

     label07:
        virtualinvoke r19.<java.io.ByteArrayOutputStream: void write(int)>(i3);

     label08:
        goto label05;

     label09:
        $r5 = virtualinvoke r19.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r20 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[])>($r5);

        r21 = new android.app._$$Lambda$WallpaperManager$Globals$alsWlyseh5qEzEBKjJOHGd0GnHk;

        specialinvoke r21.<android.app._$$Lambda$WallpaperManager$Globals$alsWlyseh5qEzEBKjJOHGd0GnHk: void <init>(boolean,android.app.WallpaperManager$ColorManagementProxy)>(z0, r14);

        r22 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r20, r21);

     label10:
        virtualinvoke r17.<java.io.BufferedInputStream: void close()>();

     label11:
        return r22;

     label12:
        $r10 := @caughtexception;

     label13:
        virtualinvoke r17.<java.io.BufferedInputStream: void close()>();

     label14:
        goto label17;

     label15:
        $r9 := @caughtexception;

     label16:
        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label17:
        throw $r10;

     label18:
        $r11 := @caughtexception;

     label19:
        $r12 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "Can\'t decode file", $r11);

     label20:
        return null;

     label21:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label01 to label02 with label21;
        catch java.lang.OutOfMemoryError from label03 to label04 with label18;
        catch java.io.IOException from label03 to label04 with label18;
        catch android.os.RemoteException from label03 to label04 with label21;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.OutOfMemoryError from label10 to label11 with label18;
        catch java.io.IOException from label10 to label11 with label18;
        catch android.os.RemoteException from label10 to label11 with label21;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.OutOfMemoryError from label16 to label17 with label18;
        catch java.io.IOException from label16 to label17 with label18;
        catch android.os.RemoteException from label16 to label17 with label21;
        catch java.lang.OutOfMemoryError from label17 to label18 with label18;
        catch java.io.IOException from label17 to label18 with label18;
        catch android.os.RemoteException from label17 to label18 with label21;
        catch android.os.RemoteException from label19 to label20 with label21;
    }

    private android.graphics.Bitmap getDefaultWallpaper(android.content.Context, int)
    {
        android.app.WallpaperManager$Globals r0;
        int i0;
        java.lang.Throwable $r1;
        java.lang.OutOfMemoryError $r2;
        java.lang.String $r3;
        android.content.Context r4;
        java.io.InputStream r5;
        android.graphics.BitmapFactory$Options r6;
        android.graphics.Bitmap r7;

        r0 := @this: android.app.WallpaperManager$Globals;

        r4 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r5 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context,int)>(r4, i0);

        if r5 == null goto label8;

     label1:
        r6 = new android.graphics.BitmapFactory$Options;

        specialinvoke r6.<android.graphics.BitmapFactory$Options: void <init>()>();

        r7 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r5, null, r6);

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        return r7;

     label3:
        $r1 := @caughtexception;

        goto label7;

     label4:
        $r2 := @caughtexception;

     label5:
        $r3 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Can\'t decode stream", $r2);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        goto label8;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        throw $r1;

     label8:
        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    static void lambda$getCurrentWallpaperLocked$2(boolean, android.app.WallpaperManager$ColorManagementProxy, android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo, android.graphics.ImageDecoder$Source)
    {
        boolean z0, $z1;
        android.app.WallpaperManager$ColorManagementProxy r0;
        android.graphics.ImageDecoder r1;
        android.graphics.ImageDecoder$ImageInfo r2;
        android.graphics.ImageDecoder$Source r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: android.app.WallpaperManager$ColorManagementProxy;

        r1 := @parameter2: android.graphics.ImageDecoder;

        r2 := @parameter3: android.graphics.ImageDecoder$ImageInfo;

        r3 := @parameter4: android.graphics.ImageDecoder$Source;

        $z1 = z0 ^ 1;

        virtualinvoke r1.<android.graphics.ImageDecoder: void setMutableRequired(boolean)>($z1);

        if r0 == null goto label1;

        virtualinvoke r0.<android.app.WallpaperManager$ColorManagementProxy: void doColorManagement(android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo)>(r1, r2);

     label1:
        return;
    }

    static boolean lambda$removeOnColorsChangedListener$0(android.app.WallpaperManager$OnColorsChangedListener, android.util.Pair)
    {
        android.app.WallpaperManager$OnColorsChangedListener r0;
        android.util.Pair r1;
        java.lang.Object $r2;
        boolean z0;

        r0 := @parameter0: android.app.WallpaperManager$OnColorsChangedListener;

        r1 := @parameter1: android.util.Pair;

        $r2 = r1.<android.util.Pair: java.lang.Object first>;

        if $r2 != r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener, android.os.Handler, int, int)
    {
        android.app.WallpaperManager$Globals r0;
        android.os.Handler r1;
        int i0, i1;
        boolean z0;
        android.util.Pair r2;
        android.app.IWallpaperManager $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        android.app.WallpaperManager$OnColorsChangedListener r7;
        java.util.ArrayList r9;

        r0 := @this: android.app.WallpaperManager$Globals;

        r7 := @parameter0: android.app.WallpaperManager$OnColorsChangedListener;

        r1 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        entermonitor r0;

     label01:
        z0 = r0.<android.app.WallpaperManager$Globals: boolean mColorCallbackRegistered>;

     label02:
        if z0 != 0 goto label07;

     label03:
        $r3 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        interfaceinvoke $r3.<android.app.IWallpaperManager: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>(r0, i0, i1);

        r0.<android.app.WallpaperManager$Globals: boolean mColorCallbackRegistered> = 1;

     label04:
        goto label07;

     label05:
        $r4 := @caughtexception;

     label06:
        $r5 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Can\'t register for color updates", $r4);

     label07:
        r9 = r0.<android.app.WallpaperManager$Globals: java.util.ArrayList mColorListeners>;

        r2 = new android.util.Pair;

        specialinvoke r2.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r7, r1);

        virtualinvoke r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        exitmonitor r0;

     label08:
        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void forgetLoadedWallpaper()
    {
        android.app.WallpaperManager$Globals r0;
        java.lang.Throwable $r2;

        r0 := @this: android.app.WallpaperManager$Globals;

        entermonitor r0;

     label1:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper> = null;

        r0.<android.app.WallpaperManager$Globals: int mCachedWallpaperUserId> = 0;

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = null;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    android.app.WallpaperColors getWallpaperColors(int, int, int)
    {
        android.app.WallpaperManager$Globals r0;
        int i0, i1, i2;
        android.app.IWallpaperManager $r1;
        java.lang.IllegalArgumentException $r2;
        android.os.RemoteException $r3;
        android.app.WallpaperColors r4;

        r0 := @this: android.app.WallpaperManager$Globals;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 == 2 goto label2;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must request colors for exactly one kind of wallpaper");

        throw $r2;

     label2:
        $r1 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        r4 = interfaceinvoke $r1.<android.app.IWallpaperManager: android.app.WallpaperColors getWallpaperColors(int,int,int)>(i0, i1, i2);

     label3:
        return r4;

     label4:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void lambda$onWallpaperColorsChanged$1$WallpaperManager$Globals(android.util.Pair, android.app.WallpaperColors, int, int)
    {
        android.app.WallpaperManager$Globals r0, r2;
        android.app.WallpaperColors r1;
        int i0, i1;
        boolean z0;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        android.app.WallpaperManager$OnColorsChangedListener $r5;
        java.lang.Throwable $r6;
        android.util.Pair r7;

        r0 := @this: android.app.WallpaperManager$Globals;

        r7 := @parameter0: android.util.Pair;

        r1 := @parameter1: android.app.WallpaperColors;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = staticinvoke <android.app.WallpaperManager: android.app.WallpaperManager$Globals access$100()>();

        entermonitor r2;

     label1:
        $r3 = r0.<android.app.WallpaperManager$Globals: java.util.ArrayList mColorListeners>;

        z0 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r7);

        exitmonitor r2;

     label2:
        if z0 == 0 goto label3;

        $r4 = r7.<android.util.Pair: java.lang.Object first>;

        $r5 = (android.app.WallpaperManager$OnColorsChangedListener) $r4;

        interfaceinvoke $r5.<android.app.WallpaperManager$OnColorsChangedListener: void onColorsChanged(android.app.WallpaperColors,int,int)>(r1, i0, i1);

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void onWallpaperChanged()
    {
        android.app.WallpaperManager$Globals r0;

        r0 := @this: android.app.WallpaperManager$Globals;

        virtualinvoke r0.<android.app.WallpaperManager$Globals: void forgetLoadedWallpaper()>();

        return;
    }

    public void onWallpaperColorsChanged(android.app.WallpaperColors, int, int)
    {
        android.app.WallpaperManager$Globals r0;
        int i0, i1;
        java.util.Iterator r1;
        android.util.Pair r2;
        android.app._$$Lambda$WallpaperManager$Globals$1AcnQUORvPlCjJoNqdxfQT4o4Nw r3;
        java.util.ArrayList $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;
        java.lang.Throwable $r8;
        android.app.WallpaperColors r9;
        android.os.Handler r10;

        r0 := @this: android.app.WallpaperManager$Globals;

        r9 := @parameter0: android.app.WallpaperColors;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label01:
        $r4 = r0.<android.app.WallpaperManager$Globals: java.util.ArrayList mColorListeners>;

        r1 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.util.Pair) $r5;

        $r6 = r2.<android.util.Pair: java.lang.Object second>;

        r10 = (android.os.Handler) $r6;

        $r7 = r2.<android.util.Pair: java.lang.Object second>;

        if $r7 != null goto label04;

        r10 = r0.<android.app.WallpaperManager$Globals: android.os.Handler mMainLooperHandler>;

     label03:
        goto label04;

     label04:
        r3 = new android.app._$$Lambda$WallpaperManager$Globals$1AcnQUORvPlCjJoNqdxfQT4o4Nw;

        specialinvoke r3.<android.app._$$Lambda$WallpaperManager$Globals$1AcnQUORvPlCjJoNqdxfQT4o4Nw: void <init>(android.app.WallpaperManager$Globals,android.util.Pair,android.app.WallpaperColors,int,int)>(r0, r2, r9, i0, i1);

        virtualinvoke r10.<android.os.Handler: boolean post(java.lang.Runnable)>(r3);

     label05:
        goto label02;

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.graphics.Bitmap peekWallpaperBitmap(android.content.Context, boolean, int, int, boolean, android.app.WallpaperManager$ColorManagementProxy)
    {
        android.app.WallpaperManager$Globals r0;
        boolean z0, z1, z2, $z3;
        int i0, i1, $i2, $i3;
        android.graphics.Bitmap $r2, $r3, r20, $r21, $r25, r26, r27, r28;
        java.lang.String $r4, $r11, $r15, r23;
        java.lang.Throwable $r5, $r8, $r9;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.pm.ApplicationInfo $r10;
        java.lang.OutOfMemoryError $r12;
        android.content.Context r16;
        android.app.WallpaperManager$ColorManagementProxy r17;
        android.app.IWallpaperManager r18;
        java.lang.StringBuilder r24;

        r0 := @this: android.app.WallpaperManager$Globals;

        r16 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z1 := @parameter4: boolean;

        r17 := @parameter5: android.app.WallpaperManager$ColorManagementProxy;

        r18 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        if r18 == null goto label05;

     label01:
        $r4 = virtualinvoke r16.<android.content.Context: java.lang.String getOpPackageName()>();

        z2 = interfaceinvoke r18.<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>($r4);

     label02:
        if z2 != 0 goto label03;

        return null;

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label05:
        entermonitor r0;

     label06:
        $r2 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper>;

        if $r2 == null goto label08;

        $i2 = r0.<android.app.WallpaperManager$Globals: int mCachedWallpaperUserId>;

        if $i2 != i1 goto label08;

        $r3 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper>;

        $z3 = virtualinvoke $r3.<android.graphics.Bitmap: boolean isRecycled()>();

        if $z3 != 0 goto label08;

        r20 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper>;

        exitmonitor r0;

     label07:
        return r20;

     label08:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper> = null;

        r0.<android.app.WallpaperManager$Globals: int mCachedWallpaperUserId> = 0;

     label09:
        $r21 = specialinvoke r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap getCurrentWallpaperLocked(android.content.Context,int,boolean,android.app.WallpaperManager$ColorManagementProxy)>(r16, i1, z1, r17);

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper> = $r21;

        r0.<android.app.WallpaperManager$Globals: int mCachedWallpaperUserId> = i1;

     label10:
        goto label17;

     label11:
        $r9 := @caughtexception;

     label12:
        $r10 = virtualinvoke r16.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i3 = $r10.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 >= 27 goto label14;

        $r11 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r11, "No permission to access wallpaper, suppressing exception to avoid crashing legacy app.");

     label13:
        goto label17;

     label14:
        throw $r9;

     label15:
        $r12 := @caughtexception;

     label16:
        r23 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Out of memory loading the current wallpaper: ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r15 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r23, $r15);

     label17:
        $r25 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper>;

        if $r25 == null goto label19;

        r26 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mCachedWallpaper>;

        exitmonitor r0;

     label18:
        return r26;

     label19:
        exitmonitor r0;

     label20:
        if z0 == 0 goto label27;

        r27 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper>;

        r28 = r27;

        if r27 != null goto label26;

        r28 = specialinvoke r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap getDefaultWallpaper(android.content.Context,int)>(r16, i0);

        entermonitor r0;

     label21:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = r28;

        exitmonitor r0;

     label22:
        goto label26;

     label23:
        $r8 := @caughtexception;

     label24:
        exitmonitor r0;

     label25:
        throw $r8;

     label26:
        return r28;

     label27:
        return null;

     label28:
        $r5 := @caughtexception;

     label29:
        exitmonitor r0;

     label30:
        throw $r5;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.OutOfMemoryError from label09 to label10 with label15;
        catch java.lang.SecurityException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public android.graphics.Bitmap peekWallpaperBitmap(android.content.Context, boolean, int, android.app.WallpaperManager$ColorManagementProxy)
    {
        android.app.WallpaperManager$Globals r0;
        android.content.Context r1;
        boolean z0;
        int i0, $i1;
        android.app.WallpaperManager$ColorManagementProxy r2;
        android.graphics.Bitmap $r3;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: android.app.WallpaperManager$ColorManagementProxy;

        $i1 = virtualinvoke r1.<android.content.Context: int getUserId()>();

        $r3 = virtualinvoke r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean,int,int,boolean,android.app.WallpaperManager$ColorManagementProxy)>(r1, z0, i0, $i1, 0, r2);

        return $r3;
    }

    public void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener, int, int)
    {
        android.app.WallpaperManager$Globals r0;
        int i0, i1, $i2;
        java.util.ArrayList r1, $r3;
        android.app._$$Lambda$WallpaperManager$Globals$2yG7V1sbMECCnlFTLyjKWKqNoYI r2;
        boolean $z1;
        android.app.IWallpaperManager $r4;
        android.os.RemoteException $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        android.app.WallpaperManager$OnColorsChangedListener r8;

        r0 := @this: android.app.WallpaperManager$Globals;

        r8 := @parameter0: android.app.WallpaperManager$OnColorsChangedListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label01:
        r1 = r0.<android.app.WallpaperManager$Globals: java.util.ArrayList mColorListeners>;

        r2 = new android.app._$$Lambda$WallpaperManager$Globals$2yG7V1sbMECCnlFTLyjKWKqNoYI;

        specialinvoke r2.<android.app._$$Lambda$WallpaperManager$Globals$2yG7V1sbMECCnlFTLyjKWKqNoYI: void <init>(android.app.WallpaperManager$OnColorsChangedListener)>(r8);

        virtualinvoke r1.<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>(r2);

        $r3 = r0.<android.app.WallpaperManager$Globals: java.util.ArrayList mColorListeners>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i2 != 0 goto label06;

        $z1 = r0.<android.app.WallpaperManager$Globals: boolean mColorCallbackRegistered>;

        if $z1 == 0 goto label06;

        r0.<android.app.WallpaperManager$Globals: boolean mColorCallbackRegistered> = 0;

     label02:
        $r4 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        interfaceinvoke $r4.<android.app.IWallpaperManager: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>(r0, i0, i1);

     label03:
        goto label06;

     label04:
        $r5 := @caughtexception;

     label05:
        $r6 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Can\'t unregister color updates", $r5);

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
}
