public class android.app.WallpaperManager extends java.lang.Object
{
    public static final java.lang.String ACTION_CHANGE_LIVE_WALLPAPER;
    public static final java.lang.String ACTION_CROP_AND_SET_WALLPAPER;
    public static final java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER;
    public static final java.lang.String COMMAND_DROP;
    public static final java.lang.String COMMAND_REAPPLY;
    public static final java.lang.String COMMAND_SECONDARY_TAP;
    public static final java.lang.String COMMAND_TAP;
    private static boolean DEBUG;
    public static final java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT;
    public static final java.lang.String EXTRA_NEW_WALLPAPER_ID;
    public static final int FLAG_LOCK;
    public static final int FLAG_SYSTEM;
    private static final java.lang.String PROP_LOCK_WALLPAPER;
    private static final java.lang.String PROP_WALLPAPER;
    private static final java.lang.String PROP_WALLPAPER_COMPONENT;
    private static java.lang.String TAG;
    public static final java.lang.String WALLPAPER_PREVIEW_META_DATA;
    private static android.app.WallpaperManager$Globals sGlobals;
    private static final java.lang.Object sSync;
    private final android.app.WallpaperManager$ColorManagementProxy mCmProxy;
    private final android.content.Context mContext;
    private float mWallpaperXStep;
    private float mWallpaperYStep;
    private final boolean mWcgEnabled;

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        <android.app.WallpaperManager: java.lang.String WALLPAPER_PREVIEW_META_DATA> = "android.wallpaper.preview";

        <android.app.WallpaperManager: java.lang.String PROP_WALLPAPER_COMPONENT> = "ro.config.wallpaper_component";

        <android.app.WallpaperManager: java.lang.String PROP_WALLPAPER> = "ro.config.wallpaper";

        <android.app.WallpaperManager: java.lang.String PROP_LOCK_WALLPAPER> = "ro.config.lock_wallpaper";

        <android.app.WallpaperManager: int FLAG_SYSTEM> = 1;

        <android.app.WallpaperManager: int FLAG_LOCK> = 2;

        <android.app.WallpaperManager: java.lang.String EXTRA_NEW_WALLPAPER_ID> = "android.service.wallpaper.extra.ID";

        <android.app.WallpaperManager: java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT> = "android.service.wallpaper.extra.LIVE_WALLPAPER_COMPONENT";

        <android.app.WallpaperManager: java.lang.String COMMAND_TAP> = "android.wallpaper.tap";

        <android.app.WallpaperManager: java.lang.String COMMAND_SECONDARY_TAP> = "android.wallpaper.secondaryTap";

        <android.app.WallpaperManager: java.lang.String COMMAND_REAPPLY> = "android.wallpaper.reapply";

        <android.app.WallpaperManager: java.lang.String COMMAND_DROP> = "android.home.drop";

        <android.app.WallpaperManager: java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER> = "android.service.wallpaper.LIVE_WALLPAPER_CHOOSER";

        <android.app.WallpaperManager: java.lang.String ACTION_CROP_AND_SET_WALLPAPER> = "android.service.wallpaper.CROP_AND_SET_WALLPAPER";

        <android.app.WallpaperManager: java.lang.String ACTION_CHANGE_LIVE_WALLPAPER> = "android.service.wallpaper.CHANGE_LIVE_WALLPAPER";

        <android.app.WallpaperManager: java.lang.String TAG> = "WallpaperManager";

        <android.app.WallpaperManager: boolean DEBUG> = 0;

        $r0 = newarray (java.lang.Object)[0];

        <android.app.WallpaperManager: java.lang.Object sSync> = $r0;

        return;
    }

    void <init>()
    {
        android.app.WallpaperManager r0;

        r0 := @this: android.app.WallpaperManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.WallpaperManager: float mWallpaperXStep> = -1.0F;

        r0.<android.app.WallpaperManager: float mWallpaperYStep> = -1.0F;

        r0.<android.app.WallpaperManager: android.content.Context mContext> = null;

        r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy mCmProxy> = null;

        r0.<android.app.WallpaperManager: boolean mWcgEnabled> = 0;

        return;
    }

    void <init>(android.app.IWallpaperManager, android.content.Context, android.os.Handler)
    {
        android.app.WallpaperManager r0;
        android.app.IWallpaperManager r1;
        android.content.Context r2;
        android.os.Handler r3;
        android.content.res.Resources $r4, $r6;
        android.content.res.Configuration $r5;
        boolean $z0, $z1, z2;
        android.os.Looper $r7;
        android.app.WallpaperManager$ColorManagementProxy $r8;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.app.IWallpaperManager;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.WallpaperManager: float mWallpaperXStep> = -1.0F;

        r0.<android.app.WallpaperManager: float mWallpaperYStep> = -1.0F;

        r0.<android.app.WallpaperManager: android.content.Context mContext> = r2;

        if r1 == null goto label1;

        $r7 = virtualinvoke r2.<android.content.Context: android.os.Looper getMainLooper()>();

        staticinvoke <android.app.WallpaperManager: void initGlobals(android.app.IWallpaperManager,android.os.Looper)>(r1, $r7);

     label1:
        $r4 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z0 = virtualinvoke $r5.<android.content.res.Configuration: boolean isScreenWideColorGamut()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r6.<android.content.res.Resources: boolean getBoolean(int)>(17891454);

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        r0.<android.app.WallpaperManager: boolean mWcgEnabled> = z2;

        $r8 = new android.app.WallpaperManager$ColorManagementProxy;

        specialinvoke $r8.<android.app.WallpaperManager$ColorManagementProxy: void <init>(android.content.Context)>(r2);

        r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy mCmProxy> = $r8;

        return;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <android.app.WallpaperManager: java.lang.String TAG>;

        return $r0;
    }

    static android.app.WallpaperManager$Globals access$100()
    {
        android.app.WallpaperManager$Globals $r0;

        $r0 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        return $r0;
    }

    private void copyStreamToWallpaperFile(java.io.InputStream, java.io.FileOutputStream) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        java.io.InputStream r1;
        java.io.FileOutputStream r2;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.FileOutputStream;

        staticinvoke <android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r1, r2);

        return;
    }

    public static android.content.ComponentName getDefaultWallpaperComponent(android.content.Context)
    {
        java.lang.String r0, $r2, r7;
        boolean $z0, $z1;
        android.content.pm.PackageManager $r1;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.content.Context r5;
        android.content.ComponentName r6, r8, r9;

        r5 := @parameter0: android.content.Context;

        r6 = null;

        r7 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.wallpaper_component");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

        if $z0 != 0 goto label1;

        r6 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r7);

     label1:
        r8 = r6;

        if r6 != null goto label2;

        r0 = virtualinvoke r5.<android.content.Context: java.lang.String getString(int)>(17040040);

        r8 = r6;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z1 != 0 goto label2;

        r8 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r0);

     label2:
        r9 = r8;

        if r8 == null goto label6;

     label3:
        $r1 = virtualinvoke r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r2 = virtualinvoke r8.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r2, 786432);

     label4:
        r9 = r8;

        goto label6;

     label5:
        $r4 := @caughtexception;

        r9 = null;

     label6:
        return r9;

        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label5;
    }

    public static android.app.WallpaperManager getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.app.WallpaperManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wallpaper");

        $r2 = (android.app.WallpaperManager) $r1;

        return $r2;
    }

    private static android.graphics.RectF getMaxCropRect(int, int, int, int, float, float)
    {
        int i0, i1, i2, i3;
        android.graphics.RectF $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, f26, f27, f28, f29;
        byte $b4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        f26 := @parameter4: float;

        f27 := @parameter5: float;

        $r1 = new android.graphics.RectF;

        specialinvoke $r1.<android.graphics.RectF: void <init>()>();

        $f1 = (float) i0;

        $f0 = (float) i1;

        $f5 = $f1 / $f0;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f4 = $f3 / $f2;

        $b4 = $f5 cmpl $f4;

        if $b4 <= 0 goto label1;

        $r1.<android.graphics.RectF: float top> = 0.0F;

        $f16 = (float) i1;

        $r1.<android.graphics.RectF: float bottom> = $f16;

        $f20 = (float) i2;

        $f18 = (float) i1;

        $f17 = (float) i3;

        $f19 = $f18 / $f17;

        f28 = $f20 * $f19;

        $f21 = (float) i0;

        $f22 = $f21 - f28;

        $f23 = $f22 * f26;

        $r1.<android.graphics.RectF: float left> = $f23;

        $f24 = $r1.<android.graphics.RectF: float left>;

        $f25 = $f24 + f28;

        $r1.<android.graphics.RectF: float right> = $f25;

        goto label2;

     label1:
        $r1.<android.graphics.RectF: float left> = 0.0F;

        $f6 = (float) i0;

        $r1.<android.graphics.RectF: float right> = $f6;

        $f10 = (float) i3;

        $f8 = (float) i0;

        $f7 = (float) i2;

        $f9 = $f8 / $f7;

        f29 = $f10 * $f9;

        $f11 = (float) i1;

        $f12 = $f11 - f29;

        $f13 = $f12 * f27;

        $r1.<android.graphics.RectF: float top> = $f13;

        $f14 = $r1.<android.graphics.RectF: float top>;

        $f15 = $f14 + f29;

        $r1.<android.graphics.RectF: float bottom> = $f15;

     label2:
        return $r1;
    }

    static void initGlobals(android.app.IWallpaperManager, android.os.Looper)
    {
        android.os.Looper r0;
        java.lang.Object r1;
        android.app.WallpaperManager$Globals r2, $r3;
        java.lang.Throwable $r4;
        android.app.IWallpaperManager r5;

        r5 := @parameter0: android.app.IWallpaperManager;

        r0 := @parameter1: android.os.Looper;

        r1 = <android.app.WallpaperManager: java.lang.Object sSync>;

        entermonitor r1;

     label1:
        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        if $r3 != null goto label2;

        r2 = new android.app.WallpaperManager$Globals;

        specialinvoke r2.<android.app.WallpaperManager$Globals: void <init>(android.app.IWallpaperManager,android.os.Looper)>(r5, r0);

        <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals> = r2;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static java.io.InputStream openDefaultWallpaper(android.content.Context, int)
    {
        int i0;
        boolean $z0, $z1;
        java.io.File $r0;
        java.io.FileInputStream $r1;
        android.content.res.Resources$NotFoundException $r2;
        java.lang.Throwable $r3;
        android.content.Context r4;
        java.lang.String r5;
        android.content.res.Resources $r9;
        java.io.InputStream r10;

        r4 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        if i0 != 2 goto label1;

        return null;

     label1:
        r5 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.wallpaper");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 != 0 goto label5;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r5);

        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label5;

     label2:
        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

     label5:
        $r9 = virtualinvoke r4.<android.content.Context: android.content.res.Resources getResources()>();

        r10 = virtualinvoke $r9.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(17302154);

     label6:
        return r10;

     label7:
        $r2 := @caughtexception;

        return null;

        catch java.io.IOException from label2 to label3 with label4;
        catch android.content.res.Resources$NotFoundException from label5 to label6 with label7;
    }

    private final void validateRect(android.graphics.Rect)
    {
        android.app.WallpaperManager r0;
        android.graphics.Rect r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("visibleCrop rectangle must be valid and non-empty");

        throw $r2;

     label2:
        return;
    }

    public void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener, android.os.Handler)
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$OnColorsChangedListener r1;
        android.os.Handler r2;
        android.content.Context $r3;
        int $i0;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.app.WallpaperManager$OnColorsChangedListener;

        r2 := @parameter1: android.os.Handler;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.app.WallpaperManager: void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,android.os.Handler,int)>(r1, r2, $i0);

        return;
    }

    public void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener, android.os.Handler, int)
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$OnColorsChangedListener r1;
        android.os.Handler r2;
        int i0, $i1;
        android.content.Context $r3;
        android.app.WallpaperManager$Globals $r4;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.app.WallpaperManager$OnColorsChangedListener;

        r2 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int getDisplayId()>();

        virtualinvoke $r4.<android.app.WallpaperManager$Globals: void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,android.os.Handler,int,int)>(r1, r2, i0, $i1);

        return;
    }

    public void clear() throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1;
        java.io.InputStream $r2;

        r0 := @this: android.app.WallpaperManager;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r2 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context,int)>($r1, 1);

        virtualinvoke r0.<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean)>($r2, null, 0);

        return;
    }

    public void clear(int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        int i0, $i1, $i2, $i3;
        android.content.Context $r1;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.app.WallpaperManager: void clear()>();

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i3 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.app.WallpaperManager: void clearWallpaper(int,int)>(2, $i3);

     label2:
        return;
    }

    public void clearWallpaper()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1, $r2;
        int $i0, $i1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.app.WallpaperManager: void clearWallpaper(int,int)>(2, $i0);

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.app.WallpaperManager: void clearWallpaper(int,int)>(1, $i1);

        return;
    }

    public void clearWallpaper(int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1;
        android.app.WallpaperManager$Globals $r2, $r7;
        android.app.IWallpaperManager $r3, $r8;
        java.lang.String $r4, $r10;
        java.lang.RuntimeException $r5, $r12;
        android.os.DeadSystemException $r6;
        android.content.Context $r9;
        android.os.RemoteException $r11;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label4;

     label1:
        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r7);

        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r8.<android.app.IWallpaperManager: void clearWallpaper(java.lang.String,int,int)>($r10, i0, i1);

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label4:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        $r5 = new java.lang.RuntimeException;

        $r6 = new android.os.DeadSystemException;

        specialinvoke $r6.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearWallpaperOffsets(android.os.IBinder)
    {
        android.app.WallpaperManager r0;
        android.view.IWindowSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.app.WallpaperManager;

        r4 := @parameter0: android.os.IBinder;

     label1:
        $r1 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r1.<android.view.IWindowSession: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>(r4, -1.0F, -1.0F, -1.0F, -1.0F);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forgetLoadedWallpaper()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        virtualinvoke $r1.<android.app.WallpaperManager$Globals: void forgetLoadedWallpaper()>();

        return;
    }

    public android.graphics.Bitmap getBitmap()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = virtualinvoke r0.<android.app.WallpaperManager: android.graphics.Bitmap getBitmap(boolean)>(0);

        return $r1;
    }

    public android.graphics.Bitmap getBitmap(boolean)
    {
        android.app.WallpaperManager r0;
        boolean z0;
        android.content.Context $r1;
        int $i0;
        android.graphics.Bitmap $r2;

        r0 := @this: android.app.WallpaperManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.WallpaperManager: android.graphics.Bitmap getBitmapAsUser(int,boolean)>($i0, z0);

        return $r2;
    }

    public android.graphics.Bitmap getBitmapAsUser(int, boolean)
    {
        android.app.WallpaperManager r0;
        int i0;
        boolean z0;
        android.app.WallpaperManager$ColorManagementProxy r1;
        android.content.Context $r2;
        android.app.WallpaperManager$Globals $r3;
        android.graphics.Bitmap $r4;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()>();

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean,int,int,boolean,android.app.WallpaperManager$ColorManagementProxy)>($r2, 1, 1, i0, z0, r1);

        return $r4;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = virtualinvoke r0.<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)>(0, 0, 0, 0.0F, 0.0F, 1);

        return $r1;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable(int)
    {
        android.app.WallpaperManager r0;
        int i0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)>(0, 0, 0, 0.0F, 0.0F, i0);

        return $r1;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable(int, int, boolean, float, float)
    {
        android.app.WallpaperManager r0;
        int i0, i1;
        boolean z0;
        float f0, f1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        $r1 = virtualinvoke r0.<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)>(i0, i1, z0, f0, f1, 1);

        return $r1;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable(int, int, boolean, float, float, int)
    {
        android.app.WallpaperManager r0;
        boolean z0, $z2;
        int i0, i1, i2, i3, $i5, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, i30, i31, i32, i34;
        android.content.res.Resources r1;
        android.app.WallpaperManager$Globals $r3;
        android.app.IWallpaperManager $r4;
        java.lang.String $r5, $r15, $r21, $r29, $r39, $r42, r44;
        java.lang.RuntimeException $r6;
        android.os.DeadSystemException $r7;
        android.content.Context $r8, $r9, $r17, $r31;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, f14, f15, f16, f17, f18, f19;
        java.io.BufferedInputStream $r10, $r16, $r30;
        android.graphics.drawable.BitmapDrawable $r11, $r64;
        android.graphics.Bitmap $r12, r54, r58, r62;
        android.graphics.BitmapFactory$Options $r13, $r33, $r34;
        java.io.InputStream $r18, $r32, r43;
        android.graphics.RectF $r19, $r23, $r24, r49;
        android.graphics.Rect $r20;
        android.graphics.Matrix $r22;
        android.graphics.Matrix$ScaleToFit $r25;
        android.graphics.Bitmap$Config $r26;
        android.graphics.Canvas $r27;
        android.graphics.Paint $r28;
        java.lang.StringBuilder $r35;
        java.lang.IllegalArgumentException $r40;
        java.lang.Throwable $r41;
        android.graphics.BitmapRegionDecoder r51, r52;

        r0 := @this: android.app.WallpaperManager;

        i30 := @parameter0: int;

        i31 := @parameter1: int;

        z0 := @parameter2: boolean;

        f13 := @parameter3: float;

        f14 := @parameter4: float;

        i0 := @parameter5: int;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r4 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r3);

        if $r4 == null goto label26;

        if i0 == 1 goto label02;

        if i0 != 2 goto label01;

        goto label02;

     label01:
        $r40 = new java.lang.IllegalArgumentException;

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must request exactly one kind of wallpaper");

        throw $r40;

     label02:
        $r8 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, f13);

        f15 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f0);

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, f14);

        f16 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f1);

        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r43 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context,int)>($r9, i0);

        if r43 != null goto label04;

        $z2 = <android.app.WallpaperManager: boolean DEBUG>;

        if $z2 == 0 goto label03;

        r44 = <android.app.WallpaperManager: java.lang.String TAG>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("default wallpaper stream ");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null");

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r44, $r39);

     label03:
        return null;

     label04:
        $r10 = new java.io.BufferedInputStream;

        specialinvoke $r10.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r43);

        if i30 <= 0 goto label25;

        if i31 > 0 goto label05;

        goto label25;

     label05:
        $r13 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r13.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r13.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r10, null, $r13);

        $i5 = $r13.<android.graphics.BitmapFactory$Options: int outWidth>;

        if $i5 == 0 goto label24;

        $i7 = $r13.<android.graphics.BitmapFactory$Options: int outHeight>;

        if $i7 == 0 goto label24;

        i1 = $r13.<android.graphics.BitmapFactory$Options: int outWidth>;

        i2 = $r13.<android.graphics.BitmapFactory$Options: int outHeight>;

        $r16 = new java.io.BufferedInputStream;

        $r17 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r18 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context,int)>($r17, i0);

        specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r18);

        i32 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i30);

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i31);

        if z0 == 0 goto label06;

        r49 = staticinvoke <android.app.WallpaperManager: android.graphics.RectF getMaxCropRect(int,int,int,int,float,float)>(i1, i2, i32, i3, f15, f16);

        goto label07;

     label06:
        $i8 = i1 - i32;

        $f2 = (float) $i8;

        f17 = $f2 * f15;

        f18 = (float) i32;

        $i9 = i2 - i3;

        $f3 = (float) $i9;

        f19 = $f3 * f16;

        $r19 = new android.graphics.RectF;

        $f6 = f18 + f17;

        $f4 = (float) i3;

        $f5 = $f4 + f19;

        specialinvoke $r19.<android.graphics.RectF: void <init>(float,float,float,float)>(f17, f19, $f6, $f5);

        r49 = $r19;

     label07:
        $r20 = new android.graphics.Rect;

        specialinvoke $r20.<android.graphics.Rect: void <init>()>();

        virtualinvoke r49.<android.graphics.RectF: void roundOut(android.graphics.Rect)>($r20);

        $i10 = virtualinvoke $r20.<android.graphics.Rect: int width()>();

        if $i10 <= 0 goto label23;

        $i12 = virtualinvoke $r20.<android.graphics.Rect: int height()>();

        if $i12 > 0 goto label08;

        goto label23;

     label08:
        $i13 = virtualinvoke $r20.<android.graphics.Rect: int width()>();

        $i14 = $i13 / i32;

        $i15 = virtualinvoke $r20.<android.graphics.Rect: int height()>();

        $i16 = $i15 / i3;

        i34 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i16);

        r51 = null;

     label09:
        r52 = staticinvoke <android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>($r16, 1);

     label10:
        r51 = r52;

        goto label12;

     label11:
        $r41 := @caughtexception;

        $r42 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r42, "cannot open region decoder for default wallpaper");

     label12:
        r54 = null;

        if r51 == null goto label14;

        $r34 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r34.<android.graphics.BitmapFactory$Options: void <init>()>();

        if i34 <= 1 goto label13;

        $r34.<android.graphics.BitmapFactory$Options: int inSampleSize> = i34;

     label13:
        r54 = virtualinvoke r51.<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r20, $r34);

        virtualinvoke r51.<android.graphics.BitmapRegionDecoder: void recycle()>();

     label14:
        if r54 != null goto label17;

        $r30 = new java.io.BufferedInputStream;

        $r31 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r32 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context,int)>($r31, i0);

        specialinvoke $r30.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r32);

        $r33 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r33.<android.graphics.BitmapFactory$Options: void <init>()>();

        if i34 <= 1 goto label15;

        $r33.<android.graphics.BitmapFactory$Options: int inSampleSize> = i34;

     label15:
        r58 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r30, null, $r33);

        if r58 == null goto label16;

        $i24 = $r20.<android.graphics.Rect: int left>;

        $i25 = $r20.<android.graphics.Rect: int top>;

        $i26 = virtualinvoke $r20.<android.graphics.Rect: int width()>();

        $i27 = virtualinvoke $r20.<android.graphics.Rect: int height()>();

        r54 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r58, $i24, $i25, $i26, $i27);

        goto label17;

     label16:
        goto label17;

     label17:
        if r54 != null goto label18;

        $r29 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r29, "cannot decode default wallpaper");

        return null;

     label18:
        if i32 <= 0 goto label22;

        if i3 <= 0 goto label22;

        $i17 = virtualinvoke r54.<android.graphics.Bitmap: int getWidth()>();

        if $i17 != i32 goto label20;

        $i22 = virtualinvoke r54.<android.graphics.Bitmap: int getHeight()>();

        if $i22 == i3 goto label19;

        goto label20;

     label19:
        goto label22;

     label20:
        $r22 = new android.graphics.Matrix;

        specialinvoke $r22.<android.graphics.Matrix: void <init>()>();

        $r23 = new android.graphics.RectF;

        $i18 = virtualinvoke r54.<android.graphics.Bitmap: int getWidth()>();

        $f7 = (float) $i18;

        $i19 = virtualinvoke r54.<android.graphics.Bitmap: int getHeight()>();

        $f8 = (float) $i19;

        specialinvoke $r23.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f7, $f8);

        $r24 = new android.graphics.RectF;

        $f10 = (float) i32;

        $f9 = (float) i3;

        specialinvoke $r24.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f10, $f9);

        $r25 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke $r22.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>($r23, $r24, $r25);

        $f11 = virtualinvoke $r24.<android.graphics.RectF: float width()>();

        $i20 = (int) $f11;

        $f12 = virtualinvoke $r24.<android.graphics.RectF: float height()>();

        $i21 = (int) $f12;

        $r26 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r62 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i20, $i21, $r26);

        if r62 == null goto label21;

        $r27 = new android.graphics.Canvas;

        specialinvoke $r27.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r62);

        $r28 = new android.graphics.Paint;

        specialinvoke $r28.<android.graphics.Paint: void <init>()>();

        virtualinvoke $r28.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

        virtualinvoke $r27.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r54, $r22, $r28);

        r54 = r62;

        goto label22;

     label21:
        goto label22;

     label22:
        $r64 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r64.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r1, r54);

        return $r64;

     label23:
        $r21 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r21, "crop has bad values for full size image");

        return null;

     label24:
        $r15 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r15, "default wallpaper dimensions are 0");

        return null;

     label25:
        $r11 = new android.graphics.drawable.BitmapDrawable;

        $r12 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r10, null, null);

        specialinvoke $r11.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r1, $r12);

        return $r11;

     label26:
        $r5 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "WallpaperService not running");

        $r6 = new java.lang.RuntimeException;

        $r7 = new android.os.DeadSystemException;

        specialinvoke $r7.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r6;

        catch java.io.IOException from label09 to label10 with label11;
    }

    public android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$ColorManagementProxy $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy mCmProxy>;

        return $r1;
    }

    public android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)
    {
        android.app.WallpaperManager r0;
        android.content.pm.PackageManager r1;
        android.content.pm.ResolveInfo r2;
        java.lang.IllegalArgumentException $r3, $r6, $r16;
        java.lang.String $r4, $r5, $r13, $r18;
        boolean $z0;
        android.content.Context $r7, $r12;
        android.content.Intent $r8, $r10, $r11;
        java.util.List $r15, $r20;
        int $i0, $i1;
        android.content.pm.ActivityInfo $r17;
        android.net.Uri r21;

        r0 := @this: android.app.WallpaperManager;

        r21 := @parameter0: android.net.Uri;

        if r21 == null goto label4;

        $r4 = "content";

        $r5 = virtualinvoke r21.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r7 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.service.wallpaper.CROP_AND_SET_WALLPAPER", r21);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        $r11 = virtualinvoke $r10.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        r2 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>($r11, 65536);

        if r2 == null goto label1;

        $r17 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r18 = $r17.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke $r8.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r18);

        $r20 = virtualinvoke r1.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>($r8, 0);

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i1 <= 0 goto label1;

        return $r8;

     label1:
        $r12 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: java.lang.String getString(int)>(17039960);

        virtualinvoke $r8.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r13);

        $r15 = virtualinvoke r1.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>($r8, 0);

        $i0 = interfaceinvoke $r15.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        return $r8;

     label2:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use passed URI to set wallpaper; check that the type returned by ContentProvider matches image/*");

        throw $r16;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image URI must be of the content scheme type");

        throw $r6;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image URI must not be null");

        throw $r3;
    }

    public int getDesiredMinimumHeight()
    {
        android.app.WallpaperManager r0;
        int i0, $i2;
        android.app.WallpaperManager$Globals $r2, $r7;
        android.app.IWallpaperManager $r3, $r8;
        java.lang.String $r4;
        java.lang.RuntimeException $r5, $r11;
        android.os.DeadSystemException $r6;
        android.content.Context $r9;
        android.os.RemoteException $r10;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label4;

     label1:
        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r7);

        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r9.<android.content.Context: int getDisplayId()>();

        i0 = interfaceinvoke $r8.<android.app.IWallpaperManager: int getHeightHint(int)>($i2);

     label2:
        return i0;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label4:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        $r5 = new java.lang.RuntimeException;

        $r6 = new android.os.DeadSystemException;

        specialinvoke $r6.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDesiredMinimumWidth()
    {
        android.app.WallpaperManager r0;
        int i0, $i2;
        android.app.WallpaperManager$Globals $r2, $r7;
        android.app.IWallpaperManager $r3, $r8;
        java.lang.String $r4;
        java.lang.RuntimeException $r5, $r11;
        android.os.DeadSystemException $r6;
        android.content.Context $r9;
        android.os.RemoteException $r10;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label4;

     label1:
        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r7);

        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r9.<android.content.Context: int getDisplayId()>();

        i0 = interfaceinvoke $r8.<android.app.IWallpaperManager: int getWidthHint(int)>($i2);

     label2:
        return i0;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label4:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        $r5 = new java.lang.RuntimeException;

        $r6 = new android.os.DeadSystemException;

        specialinvoke $r6.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable getDrawable()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1, $r4;
        android.app.WallpaperManager$Globals $r2;
        android.graphics.drawable.BitmapDrawable $r3;
        android.content.res.Resources $r5;
        android.app.WallpaperManager$ColorManagementProxy r6;
        android.graphics.Bitmap r7;

        r0 := @this: android.app.WallpaperManager;

        r6 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()>();

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r7 = virtualinvoke $r2.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean,int,android.app.WallpaperManager$ColorManagementProxy)>($r1, 1, 1, r6);

        if r7 == null goto label1;

        $r3 = new android.graphics.drawable.BitmapDrawable;

        $r4 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r5, r7);

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setDither(boolean)>(0);

        return $r3;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getFastDrawable()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1;
        android.app.WallpaperManager$Globals $r2;
        android.app.WallpaperManager$FastBitmapDrawable $r3;
        android.app.WallpaperManager$ColorManagementProxy r4;
        android.graphics.Bitmap r5;

        r0 := @this: android.app.WallpaperManager;

        r4 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()>();

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r5 = virtualinvoke $r2.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean,int,android.app.WallpaperManager$ColorManagementProxy)>($r1, 1, 1, r4);

        if r5 == null goto label1;

        $r3 = new android.app.WallpaperManager$FastBitmapDrawable;

        specialinvoke $r3.<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)>(r5, null);

        return $r3;

     label1:
        return null;
    }

    public android.app.IWallpaperManager getIWallpaperManager()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r1;
        android.app.IWallpaperManager $r2;

        r0 := @this: android.app.WallpaperManager;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r1);

        return $r2;
    }

    public android.app.WallpaperColors getWallpaperColors(int)
    {
        android.app.WallpaperManager r0;
        int i0, $i1;
        android.content.Context $r1;
        android.app.WallpaperColors $r2;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperColors getWallpaperColors(int,int)>(i0, $i1);

        return $r2;
    }

    public android.app.WallpaperColors getWallpaperColors(int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        android.app.WallpaperManager$Globals $r2;
        android.app.WallpaperColors $r3;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int getDisplayId()>();

        $r3 = virtualinvoke $r2.<android.app.WallpaperManager$Globals: android.app.WallpaperColors getWallpaperColors(int,int,int)>(i0, i1, $i2);

        return $r3;
    }

    public android.os.ParcelFileDescriptor getWallpaperFile(int)
    {
        android.app.WallpaperManager r0;
        int i0, $i1;
        android.content.Context $r1;
        android.os.ParcelFileDescriptor $r2;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int,int)>(i0, $i1);

        return $r2;
    }

    public android.os.ParcelFileDescriptor getWallpaperFile(int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1, $i3;
        android.app.WallpaperManager$Globals $r1, $r6;
        android.app.IWallpaperManager $r2, $r7;
        java.lang.String $r3, $r9, $r11, $r16;
        java.lang.RuntimeException $r4, $r18;
        android.os.DeadSystemException $r5;
        android.content.Context $r8, $r10, $r14;
        java.lang.IllegalArgumentException $r12;
        java.lang.Throwable $r13;
        android.content.pm.ApplicationInfo $r15;
        android.os.RemoteException $r17;
        android.os.Bundle r19;
        android.os.ParcelFileDescriptor r20;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        goto label2;

     label1:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must request exactly one kind of wallpaper");

        throw $r12;

     label2:
        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r1);

        if $r2 == null goto label8;

     label3:
        r19 = new android.os.Bundle;

        specialinvoke r19.<android.os.Bundle: void <init>()>();

        $r6 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r7 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r6);

        $r8 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getOpPackageName()>();

        $r10 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.String getAttributionTag()>();

        r20 = interfaceinvoke $r7.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>($r9, $r11, null, i0, r19, i1);

     label4:
        return r20;

     label5:
        $r13 := @caughtexception;

        $r14 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i3 = $r15.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 >= 27 goto label6;

        $r16 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r16, "No permission to access wallpaper, suppressing exception to avoid crashing legacy app.");

        return null;

     label6:
        throw $r13;

     label7:
        $r17 := @caughtexception;

        $r18 = virtualinvoke $r17.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r18;

     label8:
        $r3 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, "WallpaperService not running");

        $r4 = new java.lang.RuntimeException;

        $r5 = new android.os.DeadSystemException;

        specialinvoke $r5.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.SecurityException from label3 to label4 with label5;
    }

    public int getWallpaperId(int)
    {
        android.app.WallpaperManager r0;
        int i0, $i1, $i2;
        android.content.Context $r1;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $i2 = virtualinvoke r0.<android.app.WallpaperManager: int getWallpaperIdForUser(int,int)>(i0, $i1);

        return $i2;
    }

    public int getWallpaperIdForUser(int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1, $i3;
        android.os.DeadSystemException r1;
        android.app.WallpaperManager$Globals $r2, $r5;
        android.app.IWallpaperManager $r3, $r6;
        java.lang.String $r4;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8, r9;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label2;

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r5);

        $i3 = interfaceinvoke $r6.<android.app.IWallpaperManager: int getWallpaperIdForUser(int,int)>(i0, i1);

        return $i3;

     label2:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        r9 = new java.lang.RuntimeException;

        r1 = new android.os.DeadSystemException;

        specialinvoke r1.<android.os.DeadSystemException: void <init>()>();

        specialinvoke r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw r9;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label2 to label3 with label3;
    }

    public android.app.WallpaperInfo getWallpaperInfo()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1;
        int $i0;
        android.app.WallpaperInfo $r2;

        r0 := @this: android.app.WallpaperManager;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)>($i0);

        return $r2;
    }

    public android.app.WallpaperInfo getWallpaperInfo(int)
    {
        android.app.WallpaperManager r0;
        int i0;
        java.lang.RuntimeException r1, $r9;
        android.app.WallpaperManager$Globals $r2, $r5;
        android.app.IWallpaperManager $r3, $r6;
        java.lang.String $r4;
        android.app.WallpaperInfo $r7;
        android.os.RemoteException $r8;
        android.os.DeadSystemException r10;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

     label1:
        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label2;

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r5);

        $r7 = interfaceinvoke $r6.<android.app.IWallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)>(i0);

        return $r7;

     label2:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        r1 = new java.lang.RuntimeException;

        r10 = new android.os.DeadSystemException;

        specialinvoke r10.<android.os.DeadSystemException: void <init>()>();

        specialinvoke r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r10);

        throw r1;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label2 to label3 with label3;
    }

    public boolean hasResourceWallpaper(int)
    {
        android.app.WallpaperManager r0;
        int i0;
        android.content.res.Resources r1;
        boolean z0;
        android.app.WallpaperManager$Globals $r2, $r11;
        android.app.IWallpaperManager $r3, $r12;
        java.lang.String $r4, $r9, r16;
        java.lang.RuntimeException $r5, $r14;
        android.os.DeadSystemException $r6;
        android.content.Context $r7;
        android.os.RemoteException $r13;
        java.lang.StringBuilder r15;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label4;

     label1:
        $r7 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("res:");

        $r9 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r16 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r12 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r11);

        z0 = interfaceinvoke $r12.<android.app.IWallpaperManager: boolean hasNamedWallpaper(java.lang.String)>(r16);

     label2:
        return z0;

     label3:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r14;

     label4:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        $r5 = new java.lang.RuntimeException;

        $r6 = new android.os.DeadSystemException;

        specialinvoke $r6.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSetWallpaperAllowed()
    {
        android.app.WallpaperManager r0;
        boolean z0;
        android.app.WallpaperManager$Globals $r2, $r7;
        android.app.IWallpaperManager $r3, $r8;
        java.lang.String $r4, $r10;
        java.lang.RuntimeException $r5, $r12;
        android.os.DeadSystemException $r6;
        android.content.Context $r9;
        android.os.RemoteException $r11;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label4;

     label1:
        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r7);

        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke $r8.<android.app.IWallpaperManager: boolean isSetWallpaperAllowed(java.lang.String)>($r10);

     label2:
        return z0;

     label3:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label4:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        $r5 = new java.lang.RuntimeException;

        $r6 = new android.os.DeadSystemException;

        specialinvoke $r6.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isWallpaperBackupEligible(int)
    {
        android.app.WallpaperManager r0;
        int i0, $i2;
        boolean z0;
        java.lang.String r2, $r6, $r15, $r17;
        android.app.WallpaperManager$Globals $r4, $r9;
        android.app.IWallpaperManager $r5, $r10;
        java.lang.RuntimeException $r7;
        android.os.DeadSystemException $r8;
        android.content.Context $r11;
        android.os.RemoteException $r12;
        java.lang.StringBuilder $r13;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r4);

        if $r5 == null goto label4;

     label1:
        $r9 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r10 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r9);

        $r11 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r11.<android.content.Context: int getUserId()>();

        z0 = interfaceinvoke $r10.<android.app.IWallpaperManager: boolean isWallpaperBackupEligible(int,int)>(i0, $i2);

     label2:
        return z0;

     label3:
        $r12 := @caughtexception;

        r2 = <android.app.WallpaperManager: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception querying wallpaper backup eligibility: ");

        $r15 = virtualinvoke $r12.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r2, $r17);

        return 0;

     label4:
        $r6 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

        $r7 = new java.lang.RuntimeException;

        $r8 = new android.os.DeadSystemException;

        specialinvoke $r8.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isWallpaperSupported()
    {
        android.app.WallpaperManager r0;
        boolean z0;
        android.app.WallpaperManager$Globals $r2, $r7;
        android.app.IWallpaperManager $r3, $r8;
        java.lang.String $r4, $r10;
        java.lang.RuntimeException $r5, $r12;
        android.os.DeadSystemException $r6;
        android.content.Context $r9;
        android.os.RemoteException $r11;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label4;

     label1:
        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r7);

        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke $r8.<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>($r10);

     label2:
        return z0;

     label3:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label4:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        $r5 = new java.lang.RuntimeException;

        $r6 = new android.os.DeadSystemException;

        specialinvoke $r6.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.drawable.Drawable peekDrawable()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1, $r4;
        android.app.WallpaperManager$Globals $r2;
        android.graphics.drawable.BitmapDrawable $r3;
        android.content.res.Resources $r5;
        android.app.WallpaperManager$ColorManagementProxy r6;
        android.graphics.Bitmap r7;

        r0 := @this: android.app.WallpaperManager;

        r6 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()>();

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r7 = virtualinvoke $r2.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean,int,android.app.WallpaperManager$ColorManagementProxy)>($r1, 0, 1, r6);

        if r7 == null goto label1;

        $r3 = new android.graphics.drawable.BitmapDrawable;

        $r4 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r5, r7);

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setDither(boolean)>(0);

        return $r3;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable peekFastDrawable()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1;
        android.app.WallpaperManager$Globals $r2;
        android.app.WallpaperManager$FastBitmapDrawable $r3;
        android.app.WallpaperManager$ColorManagementProxy r4;
        android.graphics.Bitmap r5;

        r0 := @this: android.app.WallpaperManager;

        r4 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()>();

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r5 = virtualinvoke $r2.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean,int,android.app.WallpaperManager$ColorManagementProxy)>($r1, 0, 1, r4);

        if r5 == null goto label1;

        $r3 = new android.app.WallpaperManager$FastBitmapDrawable;

        specialinvoke $r3.<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)>(r5, null);

        return $r3;

     label1:
        return null;
    }

    public void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener)
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$OnColorsChangedListener r1;
        android.content.Context $r2;
        int $i0;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.app.WallpaperManager$OnColorsChangedListener;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.app.WallpaperManager: void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,int)>(r1, $i0);

        return;
    }

    public void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener, int)
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$OnColorsChangedListener r1;
        int i0, $i1;
        android.content.Context $r2;
        android.app.WallpaperManager$Globals $r3;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.app.WallpaperManager$OnColorsChangedListener;

        i0 := @parameter1: int;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int getDisplayId()>();

        virtualinvoke $r3.<android.app.WallpaperManager$Globals: void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,int,int)>(r1, i0, $i1);

        return;
    }

    public void sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)
    {
        android.app.WallpaperManager r0;
        java.lang.String r1;
        int i0, i1, i2;
        android.os.Bundle r2;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.os.IBinder r7;

        r0 := @this: android.app.WallpaperManager;

        r7 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: android.os.Bundle;

     label1:
        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r3.<android.view.IWindowSession: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>(r7, r1, i0, i1, i2, r2, 0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2;
        boolean z0;
        int $i0;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)>(r1, r2, z0, 3);

        return $i0;
    }

    public int setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean, int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2;
        boolean z0;
        int i0, $i1, $i2;
        android.content.Context $r3;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int getUserId()>();

        $i2 = virtualinvoke r0.<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int,int)>(r1, r2, z0, i0, $i1);

        return $i2;
    }

    public int setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean, int, int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        boolean z0;
        int i0, i1, $i2;
        android.os.ParcelFileDescriptor r3;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r4, r22;
        android.app.WallpaperManager$Globals $r5, $r12;
        android.app.IWallpaperManager $r6, $r13;
        java.lang.String $r7, $r15;
        java.lang.RuntimeException $r8, $r19;
        android.os.DeadSystemException $r9;
        android.os.Bundle $r10;
        android.app.WallpaperManager$WallpaperSetCompletion $r11;
        android.content.Context $r14;
        android.graphics.Bitmap$CompressFormat $r16;
        java.lang.Throwable $r17;
        android.os.RemoteException $r18;
        android.graphics.Bitmap r20;
        android.graphics.Rect r21;

        r0 := @this: android.app.WallpaperManager;

        r20 := @parameter0: android.graphics.Bitmap;

        r21 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<android.app.WallpaperManager: void validateRect(android.graphics.Rect)>(r21);

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r5);

        if $r6 == null goto label19;

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        $r11 = new android.app.WallpaperManager$WallpaperSetCompletion;

        specialinvoke $r11.<android.app.WallpaperManager$WallpaperSetCompletion: void <init>(android.app.WallpaperManager)>(r0);

     label01:
        $r12 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r13 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r12);

        $r14 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.String getOpPackageName()>();

        r3 = interfaceinvoke $r13.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>(null, $r15, r21, z0, $r10, i0, $r11, i1);

     label02:
        if r3 == null goto label17;

        r22 = null;

     label03:
        r4 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

     label04:
        r22 = null;

     label05:
        specialinvoke r4.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r3);

     label06:
        r22 = r4;

     label07:
        $r16 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r20.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r16, 90, r4);

     label08:
        r22 = r4;

     label09:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label10:
        r22 = r4;

     label11:
        virtualinvoke $r11.<android.app.WallpaperManager$WallpaperSetCompletion: void waitForCompletion()>();

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

     label13:
        goto label17;

     label14:
        $r17 := @caughtexception;

     label15:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r22);

     label16:
        throw $r17;

     label17:
        $i2 = virtualinvoke $r10.<android.os.Bundle: int getInt(java.lang.String,int)>("android.service.wallpaper.extra.ID", 0);

        return $i2;

     label18:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

     label19:
        $r7 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "WallpaperService not running");

        $r8 = new java.lang.RuntimeException;

        $r9 = new android.os.DeadSystemException;

        specialinvoke $r9.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r8;

        catch android.os.RemoteException from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch android.os.RemoteException from label12 to label13 with label18;
        catch android.os.RemoteException from label15 to label16 with label18;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public void setBitmap(android.graphics.Bitmap) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.graphics.Bitmap;

        virtualinvoke r0.<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)>(r1, null, 1);

        return;
    }

    public void setDisplayOffset(android.os.IBinder, int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1;
        android.view.IWindowSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.app.WallpaperManager;

        r4 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r1.<android.view.IWindowSession: void setWallpaperDisplayOffset(android.os.IBinder,int,int)>(r4, i0, i1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDisplayPadding(android.graphics.Rect)
    {
        android.app.WallpaperManager r0;
        android.os.DeadSystemException r1;
        android.app.WallpaperManager$Globals $r2, $r5;
        android.app.IWallpaperManager $r3, $r6;
        java.lang.String $r4, $r8;
        android.content.Context $r7, $r9;
        int $i1;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11, r13;
        android.graphics.Rect r12;

        r0 := @this: android.app.WallpaperManager;

        r12 := @parameter0: android.graphics.Rect;

     label1:
        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r2);

        if $r3 == null goto label3;

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r5);

        $r7 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getOpPackageName()>();

        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r9.<android.content.Context: int getDisplayId()>();

        interfaceinvoke $r6.<android.app.IWallpaperManager: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>(r12, $r8, $i1);

     label2:
        return;

     label3:
        $r4 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r4, "WallpaperService not running");

        r13 = new java.lang.RuntimeException;

        r1 = new android.os.DeadSystemException;

        specialinvoke r1.<android.os.DeadSystemException: void <init>()>();

        specialinvoke r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw r13;

     label4:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)
    {
        android.app.WallpaperManager r0;
        boolean z0;
        android.app.WallpaperManager$Globals $r1, $r6;
        android.app.IWallpaperManager $r2, $r7;
        java.lang.String $r3;
        java.lang.RuntimeException $r4, $r9;
        android.os.DeadSystemException $r5;
        android.os.RemoteException $r8;
        android.app.IWallpaperManagerCallback r10;

        r0 := @this: android.app.WallpaperManager;

        r10 := @parameter0: android.app.IWallpaperManagerCallback;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r1);

        if $r2 == null goto label4;

     label1:
        $r6 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r7 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r6);

        z0 = interfaceinvoke $r7.<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>(r10);

     label2:
        return z0;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label4:
        $r3 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, "WallpaperService not running");

        $r4 = new java.lang.RuntimeException;

        $r5 = new android.os.DeadSystemException;

        specialinvoke $r5.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setResource(int, int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        int i0, i1, $i2, $i3;
        android.content.res.Resources r3;
        android.os.ParcelFileDescriptor r4;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r5, r26;
        android.app.WallpaperManager$Globals $r6, $r14;
        android.app.IWallpaperManager $r7, r24;
        java.lang.String $r8, $r15, $r16, $r18;
        java.lang.RuntimeException $r9, $r23;
        android.os.DeadSystemException $r10;
        android.os.Bundle $r11;
        android.app.WallpaperManager$WallpaperSetCompletion $r12;
        android.content.Context $r13, $r17, $r19;
        java.io.InputStream $r20;
        java.lang.Throwable $r21;
        android.os.RemoteException $r22;
        java.lang.StringBuilder r25;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r6 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r7 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r6);

        if $r7 == null goto label19;

        $r11 = new android.os.Bundle;

        specialinvoke $r11.<android.os.Bundle: void <init>()>();

        $r12 = new android.app.WallpaperManager$WallpaperSetCompletion;

        specialinvoke $r12.<android.app.WallpaperManager$WallpaperSetCompletion: void <init>(android.app.WallpaperManager)>(r0);

     label01:
        $r13 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r3 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $r14 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        r24 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r14);

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("res:");

        $r15 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: java.lang.String getOpPackageName()>();

        $r19 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r19.<android.content.Context: int getUserId()>();

        r4 = interfaceinvoke r24.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>($r16, $r18, null, 0, $r11, i1, $r12, $i2);

     label02:
        if r4 == null goto label17;

        r26 = null;

     label03:
        r5 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

     label04:
        r26 = null;

     label05:
        specialinvoke r5.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r4);

     label06:
        r26 = r5;

     label07:
        $r20 = virtualinvoke r3.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

        specialinvoke r0.<android.app.WallpaperManager: void copyStreamToWallpaperFile(java.io.InputStream,java.io.FileOutputStream)>($r20, r5);

     label08:
        r26 = r5;

     label09:
        virtualinvoke r5.<java.io.FileOutputStream: void close()>();

     label10:
        r26 = r5;

     label11:
        virtualinvoke $r12.<android.app.WallpaperManager$WallpaperSetCompletion: void waitForCompletion()>();

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

     label13:
        goto label17;

     label14:
        $r21 := @caughtexception;

     label15:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r26);

     label16:
        throw $r21;

     label17:
        $i3 = virtualinvoke $r11.<android.os.Bundle: int getInt(java.lang.String,int)>("android.service.wallpaper.extra.ID", 0);

        return $i3;

     label18:
        $r22 := @caughtexception;

        $r23 = virtualinvoke $r22.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r23;

     label19:
        $r8 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, "WallpaperService not running");

        $r9 = new java.lang.RuntimeException;

        $r10 = new android.os.DeadSystemException;

        specialinvoke $r10.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r9;

        catch android.os.RemoteException from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch android.os.RemoteException from label12 to label13 with label18;
        catch android.os.RemoteException from label15 to label16 with label18;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public void setResource(int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        int i0;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.app.WallpaperManager: int setResource(int,int)>(i0, 3);

        return;
    }

    public int setStream(java.io.InputStream, android.graphics.Rect, boolean) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        java.io.InputStream r1;
        android.graphics.Rect r2;
        boolean z0;
        int $i0;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean,int)>(r1, r2, z0, 3);

        return $i0;
    }

    public int setStream(java.io.InputStream, android.graphics.Rect, boolean, int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        boolean z0;
        int i0, $i1, $i2;
        android.os.ParcelFileDescriptor r3;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r4, r22;
        android.app.WallpaperManager$Globals $r5, $r12;
        android.app.IWallpaperManager $r6, $r13;
        java.lang.String $r7, $r15;
        java.lang.RuntimeException $r8, $r19;
        android.os.DeadSystemException $r9;
        android.os.Bundle $r10;
        android.app.WallpaperManager$WallpaperSetCompletion $r11;
        android.content.Context $r14, $r16;
        java.lang.Throwable $r17;
        android.os.RemoteException $r18;
        java.io.InputStream r20;
        android.graphics.Rect r21;

        r0 := @this: android.app.WallpaperManager;

        r20 := @parameter0: java.io.InputStream;

        r21 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<android.app.WallpaperManager: void validateRect(android.graphics.Rect)>(r21);

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r5);

        if $r6 == null goto label19;

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        $r11 = new android.app.WallpaperManager$WallpaperSetCompletion;

        specialinvoke $r11.<android.app.WallpaperManager$WallpaperSetCompletion: void <init>(android.app.WallpaperManager)>(r0);

     label01:
        $r12 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r13 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r12);

        $r14 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.String getOpPackageName()>();

        $r16 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r16.<android.content.Context: int getUserId()>();

        r3 = interfaceinvoke $r13.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>(null, $r15, r21, z0, $r10, i0, $r11, $i1);

     label02:
        if r3 == null goto label17;

        r22 = null;

     label03:
        r4 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

     label04:
        r22 = null;

     label05:
        specialinvoke r4.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r3);

     label06:
        r22 = r4;

     label07:
        specialinvoke r0.<android.app.WallpaperManager: void copyStreamToWallpaperFile(java.io.InputStream,java.io.FileOutputStream)>(r20, r4);

     label08:
        r22 = r4;

     label09:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label10:
        r22 = r4;

     label11:
        virtualinvoke $r11.<android.app.WallpaperManager$WallpaperSetCompletion: void waitForCompletion()>();

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

     label13:
        goto label17;

     label14:
        $r17 := @caughtexception;

     label15:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r22);

     label16:
        throw $r17;

     label17:
        $i2 = virtualinvoke $r10.<android.os.Bundle: int getInt(java.lang.String,int)>("android.service.wallpaper.extra.ID", 0);

        return $i2;

     label18:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

     label19:
        $r7 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "WallpaperService not running");

        $r8 = new java.lang.RuntimeException;

        $r9 = new android.os.DeadSystemException;

        specialinvoke $r9.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r8;

        catch android.os.RemoteException from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch android.os.RemoteException from label12 to label13 with label18;
        catch android.os.RemoteException from label15 to label16 with label18;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public void setStream(java.io.InputStream) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        java.io.InputStream r1;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean)>(r1, null, 1);

        return;
    }

    public boolean setWallpaperComponent(android.content.ComponentName)
    {
        android.app.WallpaperManager r0;
        android.content.ComponentName r1;
        android.content.Context $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        $z0 = virtualinvoke r0.<android.app.WallpaperManager: boolean setWallpaperComponent(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean setWallpaperComponent(android.content.ComponentName, int)
    {
        android.app.WallpaperManager r0;
        int i0;
        android.app.WallpaperManager$Globals $r1, $r6;
        android.app.IWallpaperManager $r2, $r7;
        java.lang.String $r3, $r9;
        java.lang.RuntimeException $r4, $r11;
        android.os.DeadSystemException $r5;
        android.content.Context $r8;
        android.os.RemoteException $r10;
        android.content.ComponentName r12;

        r0 := @this: android.app.WallpaperManager;

        r12 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r1);

        if $r2 == null goto label4;

     label1:
        $r6 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r7 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r6);

        $r8 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r7.<android.app.IWallpaperManager: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>(r12, $r9, i0);

     label2:
        return 1;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label4:
        $r3 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, "WallpaperService not running");

        $r4 = new java.lang.RuntimeException;

        $r5 = new android.os.DeadSystemException;

        specialinvoke $r5.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWallpaperOffsetSteps(float, float)
    {
        android.app.WallpaperManager r0;
        float f0, f1;

        r0 := @this: android.app.WallpaperManager;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.app.WallpaperManager: float mWallpaperXStep> = f0;

        r0.<android.app.WallpaperManager: float mWallpaperYStep> = f1;

        return;
    }

    public void setWallpaperOffsets(android.os.IBinder, float, float)
    {
        android.app.WallpaperManager r0;
        float f0, f1, $f2, $f3;
        android.view.IWindowSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.app.WallpaperManager;

        r4 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

     label1:
        $r1 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        $f3 = r0.<android.app.WallpaperManager: float mWallpaperXStep>;

        $f2 = r0.<android.app.WallpaperManager: float mWallpaperYStep>;

        interfaceinvoke $r1.<android.view.IWindowSession: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>(r4, f0, f1, $f3, $f2);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWallpaperZoomOut(android.os.IBinder, float)
    {
        android.app.WallpaperManager r0;
        float f0;
        byte $b0, $b1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.view.IWindowSession $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.os.IBinder r9;

        r0 := @this: android.app.WallpaperManager;

        r9 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label4;

        $b1 = f0 cmpl 1.0F;

        if $b1 > 0 goto label4;

     label1:
        $r6 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r6.<android.view.IWindowSession: void setWallpaperZoomOut(android.os.IBinder,float)>(r9, f0);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("zoom must be between 0 and one: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean shouldEnableWideColorGamut()
    {
        android.app.WallpaperManager r0;
        boolean $z0;

        r0 := @this: android.app.WallpaperManager;

        $z0 = r0.<android.app.WallpaperManager: boolean mWcgEnabled>;

        return $z0;
    }

    public void suggestDesiredDimensions(int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1, $i3, i4, i5, i6;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.RuntimeException r1, $r10;
        java.lang.String $r2, $r6;
        android.app.WallpaperManager$Globals $r3, $r13;
        android.app.IWallpaperManager $r4, $r14;
        android.content.Context $r5, $r7;
        double $d0, $d1, $d2, $d3;
        java.lang.Exception $r8;
        android.os.RemoteException $r9;
        android.os.DeadSystemException r15;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label01:
        i4 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("sys.max_texture_size", 0);

     label02:
        goto label05;

     label03:
        $r9 := @caughtexception;

        goto label11;

     label04:
        $r8 := @caughtexception;

        i4 = 0;

     label05:
        i5 = i0;

        i6 = i1;

        if i4 <= 0 goto label08;

        if i0 > i4 goto label06;

        i5 = i0;

        i6 = i1;

        if i1 <= i4 goto label08;

     label06:
        $f2 = (float) i1;

        $f1 = (float) i0;

        f0 = $f2 / $f1;

        if i0 <= i1 goto label07;

        $f5 = (float) i4;

        $f6 = $f5 * f0;

        $d2 = (double) $f6;

        $d3 = $d2 + 0.5;

        i6 = (int) $d3;

        i5 = i4;

        goto label08;

     label07:
        $f3 = (float) i4;

        $f4 = $f3 / f0;

        $d0 = (double) $f4;

        $d1 = $d0 + 0.5;

        i5 = (int) $d1;

        i6 = i4;

     label08:
        $r13 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r14 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r13);

        if $r14 == null goto label10;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r4 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$200(android.app.WallpaperManager$Globals)>($r3);

        $r5 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        $r7 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $i3 = virtualinvoke $r7.<android.content.Context: int getDisplayId()>();

        interfaceinvoke $r4.<android.app.IWallpaperManager: void setDimensionHints(int,int,java.lang.String,int)>(i5, i6, $r6, $i3);

     label09:
        return;

     label10:
        $r2 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "WallpaperService not running");

        r1 = new java.lang.RuntimeException;

        r15 = new android.os.DeadSystemException;

        specialinvoke r15.<android.os.DeadSystemException: void <init>()>();

        specialinvoke r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r15);

        throw r1;

     label11:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch java.lang.Exception from label01 to label02 with label04;
        catch android.os.RemoteException from label01 to label02 with label03;
        catch android.os.RemoteException from label08 to label09 with label03;
        catch android.os.RemoteException from label10 to label11 with label03;
    }

    public boolean wallpaperSupportsWcg(int)
    {
        android.app.WallpaperManager r0;
        int i0;
        boolean z0, $z1, z2;
        android.app.WallpaperManager$ColorManagementProxy r1;
        android.graphics.Bitmap r2;
        android.content.Context $r3;
        android.app.WallpaperManager$Globals $r4;
        android.graphics.ColorSpace $r5, $r6, $r8, $r9;
        android.graphics.ColorSpace$Named $r7;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        z0 = virtualinvoke r0.<android.app.WallpaperManager: boolean shouldEnableWideColorGamut()>();

        z2 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()>();

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean,int,android.app.WallpaperManager$ColorManagementProxy)>($r3, 0, i0, r1);

        if r2 == null goto label2;

        $r5 = virtualinvoke r2.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r2.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

        $r7 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        $r8 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r7);

        if $r6 == $r8 goto label2;

        $r9 = virtualinvoke r2.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

        $z1 = virtualinvoke r1.<android.app.WallpaperManager$ColorManagementProxy: boolean isSupportedColorSpace(android.graphics.ColorSpace)>($r9);

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label2;

     label2:
        return z2;
    }
}
