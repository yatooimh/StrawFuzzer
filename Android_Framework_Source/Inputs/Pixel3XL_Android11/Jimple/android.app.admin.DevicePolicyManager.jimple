public class android.app.admin.DevicePolicyManager extends java.lang.Object
{
    public static final java.lang.String ACCOUNT_FEATURE_DEVICE_OR_PROFILE_OWNER_ALLOWED;
    public static final java.lang.String ACCOUNT_FEATURE_DEVICE_OR_PROFILE_OWNER_DISALLOWED;
    public static final java.lang.String ACTION_ADD_DEVICE_ADMIN;
    public static final java.lang.String ACTION_ADMIN_POLICY_COMPLIANCE;
    public static final java.lang.String ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED;
    public static final java.lang.String ACTION_BIND_SECONDARY_LOCKSCREEN_SERVICE;
    public static final java.lang.String ACTION_BUGREPORT_SHARING_ACCEPTED;
    public static final java.lang.String ACTION_BUGREPORT_SHARING_DECLINED;
    public static final java.lang.String ACTION_CHECK_POLICY_COMPLIANCE;
    public static final java.lang.String ACTION_DATA_SHARING_RESTRICTION_APPLIED;
    public static final java.lang.String ACTION_DATA_SHARING_RESTRICTION_CHANGED;
    public static final java.lang.String ACTION_DEVICE_ADMIN_SERVICE;
    public static final java.lang.String ACTION_DEVICE_OWNER_CHANGED;
    public static final java.lang.String ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED;
    public static final java.lang.String ACTION_GET_PROVISIONING_MODE;
    public static final java.lang.String ACTION_MANAGED_PROFILE_PROVISIONED;
    public static final java.lang.String ACTION_MANAGED_USER_CREATED;
    public static final java.lang.String ACTION_PROFILE_OWNER_CHANGED;
    public static final java.lang.String ACTION_PROVISIONING_SUCCESSFUL;
    public static final java.lang.String ACTION_PROVISION_FINALIZATION;
    public static final java.lang.String ACTION_PROVISION_FINANCED_DEVICE;
    public static final java.lang.String ACTION_PROVISION_MANAGED_DEVICE;
    public static final java.lang.String ACTION_PROVISION_MANAGED_DEVICE_FROM_TRUSTED_SOURCE;
    public static final java.lang.String ACTION_PROVISION_MANAGED_PROFILE;
    public static final java.lang.String ACTION_PROVISION_MANAGED_SHAREABLE_DEVICE;
    public static final java.lang.String ACTION_PROVISION_MANAGED_USER;
    public static final java.lang.String ACTION_REMOTE_BUGREPORT_DISPATCH;
    public static final java.lang.String ACTION_RESET_PROTECTION_POLICY_CHANGED;
    public static final java.lang.String ACTION_SET_NEW_PARENT_PROFILE_PASSWORD;
    public static final java.lang.String ACTION_SET_NEW_PASSWORD;
    public static final java.lang.String ACTION_SET_PROFILE_OWNER;
    public static final java.lang.String ACTION_SHOW_DEVICE_MONITORING_DIALOG;
    public static final java.lang.String ACTION_START_ENCRYPTION;
    public static final java.lang.String ACTION_STATE_USER_SETUP_COMPLETE;
    public static final java.lang.String ACTION_SYSTEM_UPDATE_POLICY_CHANGED;
    public static final int CODE_ACCOUNTS_NOT_EMPTY;
    public static final int CODE_CANNOT_ADD_MANAGED_PROFILE;
    public static final int CODE_DEVICE_ADMIN_NOT_SUPPORTED;
    public static final int CODE_HAS_DEVICE_OWNER;
    public static final int CODE_HAS_PAIRED;
    public static final int CODE_MANAGED_USERS_NOT_SUPPORTED;
    public static final int CODE_NONSYSTEM_USER_EXISTS;
    public static final int CODE_NOT_SYSTEM_USER;
    public static final int CODE_NOT_SYSTEM_USER_SPLIT;
    public static final int CODE_OK;
    public static final int CODE_SPLIT_SYSTEM_USER_DEVICE_SYSTEM_USER;
    public static final int CODE_SYSTEM_USER;
    public static final int CODE_USER_HAS_PROFILE_OWNER;
    public static final int CODE_USER_NOT_RUNNING;
    public static final int CODE_USER_SETUP_COMPLETED;
    public static final long DEFAULT_STRONG_AUTH_TIMEOUT_MS;
    public static final java.lang.String DELEGATION_APP_RESTRICTIONS;
    public static final java.lang.String DELEGATION_BLOCK_UNINSTALL;
    public static final java.lang.String DELEGATION_CERT_INSTALL;
    public static final java.lang.String DELEGATION_CERT_SELECTION;
    public static final java.lang.String DELEGATION_ENABLE_SYSTEM_APP;
    public static final java.lang.String DELEGATION_INSTALL_EXISTING_PACKAGE;
    public static final java.lang.String DELEGATION_KEEP_UNINSTALLED_PACKAGES;
    public static final java.lang.String DELEGATION_NETWORK_LOGGING;
    public static final java.lang.String DELEGATION_PACKAGE_ACCESS;
    public static final java.lang.String DELEGATION_PERMISSION_GRANT;
    public static final int ENCRYPTION_STATUS_ACTIVATING;
    public static final int ENCRYPTION_STATUS_ACTIVE;
    public static final int ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY;
    public static final int ENCRYPTION_STATUS_ACTIVE_PER_USER;
    public static final int ENCRYPTION_STATUS_INACTIVE;
    public static final int ENCRYPTION_STATUS_UNSUPPORTED;
    public static final int ERROR_VPN_PACKAGE_NOT_FOUND;
    public static final java.lang.String EXTRA_ADD_EXPLANATION;
    public static final java.lang.String EXTRA_BUGREPORT_NOTIFICATION_TYPE;
    public static final java.lang.String EXTRA_DELEGATION_SCOPES;
    public static final java.lang.String EXTRA_DEVICE_ADMIN;
    public static final java.lang.String EXTRA_PASSWORD_COMPLEXITY;
    public static final java.lang.String EXTRA_PROFILE_OWNER_NAME;
    public static final java.lang.String EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE;
    public static final java.lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_ICON_URI;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_LABEL;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM;
    public static final java.lang.String EXTRA_PROVISIONING_DISCLAIMERS;
    public static final java.lang.String EXTRA_PROVISIONING_DISCLAIMER_CONTENT;
    public static final java.lang.String EXTRA_PROVISIONING_DISCLAIMER_HEADER;
    public static final java.lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS;
    public static final java.lang.String EXTRA_PROVISIONING_IMEI;
    public static final java.lang.String EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION;
    public static final java.lang.String EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED;
    public static final java.lang.String EXTRA_PROVISIONING_LOCALE;
    public static final java.lang.String EXTRA_PROVISIONING_LOCAL_TIME;
    public static final java.lang.String EXTRA_PROVISIONING_LOGO_URI;
    public static final java.lang.String EXTRA_PROVISIONING_MAIN_COLOR;
    public static final java.lang.String EXTRA_PROVISIONING_MODE;
    public static final java.lang.String EXTRA_PROVISIONING_ORGANIZATION_NAME;
    public static final java.lang.String EXTRA_PROVISIONING_SERIAL_NUMBER;
    public static final java.lang.String EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS;
    public static final java.lang.String EXTRA_PROVISIONING_SKIP_ENCRYPTION;
    public static final java.lang.String EXTRA_PROVISIONING_SKIP_USER_CONSENT;
    public static final java.lang.String EXTRA_PROVISIONING_SKIP_USER_SETUP;
    public static final java.lang.String EXTRA_PROVISIONING_SUPPORT_URL;
    public static final java.lang.String EXTRA_PROVISIONING_TIME_ZONE;
    public static final java.lang.String EXTRA_PROVISIONING_TRIGGER;
    public static final java.lang.String EXTRA_PROVISIONING_USE_MOBILE_DATA;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_DOMAIN;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_EAP_METHOD;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_HIDDEN;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_IDENTITY;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PAC_URL;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PASSWORD;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PHASE2_AUTH;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_SSID;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE;
    public static final java.lang.String EXTRA_REMOTE_BUGREPORT_HASH;
    public static final java.lang.String EXTRA_RESTRICTION;
    public static final int FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY;
    public static final int FLAG_MANAGED_CAN_ACCESS_PARENT;
    public static final int FLAG_PARENT_CAN_ACCESS_MANAGED;
    public static final int ID_TYPE_BASE_INFO;
    public static final int ID_TYPE_IMEI;
    public static final int ID_TYPE_INDIVIDUAL_ATTESTATION;
    public static final int ID_TYPE_MEID;
    public static final int ID_TYPE_SERIAL;
    public static final int INSTALLKEY_REQUEST_CREDENTIALS_ACCESS;
    public static final int INSTALLKEY_SET_USER_SELECTABLE;
    public static final int KEYGUARD_DISABLE_BIOMETRICS;
    public static final int KEYGUARD_DISABLE_FACE;
    public static final int KEYGUARD_DISABLE_FEATURES_ALL;
    public static final int KEYGUARD_DISABLE_FEATURES_NONE;
    public static final int KEYGUARD_DISABLE_FINGERPRINT;
    public static final int KEYGUARD_DISABLE_IRIS;
    public static final int KEYGUARD_DISABLE_REMOTE_INPUT;
    public static final int KEYGUARD_DISABLE_SECURE_CAMERA;
    public static final int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS;
    public static final int KEYGUARD_DISABLE_TRUST_AGENTS;
    public static final int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS;
    public static final int KEYGUARD_DISABLE_WIDGETS_ALL;
    public static final int KEY_GEN_STRONGBOX_UNAVAILABLE;
    public static final int LEAVE_ALL_SYSTEM_APPS_ENABLED;
    public static final int LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK;
    public static final int LOCK_TASK_FEATURE_GLOBAL_ACTIONS;
    public static final int LOCK_TASK_FEATURE_HOME;
    public static final int LOCK_TASK_FEATURE_KEYGUARD;
    public static final int LOCK_TASK_FEATURE_NONE;
    public static final int LOCK_TASK_FEATURE_NOTIFICATIONS;
    public static final int LOCK_TASK_FEATURE_OVERVIEW;
    public static final int LOCK_TASK_FEATURE_SYSTEM_INFO;
    public static final int MAKE_USER_DEMO;
    public static final int MAKE_USER_EPHEMERAL;
    public static final int MAX_PASSWORD_LENGTH;
    public static final java.lang.String MIME_TYPE_PROVISIONING_NFC;
    public static final int NON_ORG_OWNED_PROFILE_KEYGUARD_FEATURES_AFFECT_OWNER;
    public static final int NOTIFICATION_BUGREPORT_ACCEPTED_NOT_FINISHED;
    public static final int NOTIFICATION_BUGREPORT_FINISHED_NOT_ACCEPTED;
    public static final int NOTIFICATION_BUGREPORT_STARTED;
    public static final int ORG_OWNED_PROFILE_KEYGUARD_FEATURES_PARENT_ONLY;
    public static final int PASSWORD_COMPLEXITY_HIGH;
    public static final int PASSWORD_COMPLEXITY_LOW;
    public static final int PASSWORD_COMPLEXITY_MEDIUM;
    public static final int PASSWORD_COMPLEXITY_NONE;
    public static final int PASSWORD_QUALITY_ALPHABETIC;
    public static final int PASSWORD_QUALITY_ALPHANUMERIC;
    public static final int PASSWORD_QUALITY_BIOMETRIC_WEAK;
    public static final int PASSWORD_QUALITY_COMPLEX;
    public static final int PASSWORD_QUALITY_MANAGED;
    public static final int PASSWORD_QUALITY_NUMERIC;
    public static final int PASSWORD_QUALITY_NUMERIC_COMPLEX;
    public static final int PASSWORD_QUALITY_SOMETHING;
    public static final int PASSWORD_QUALITY_UNSPECIFIED;
    public static final int PERMISSION_GRANT_STATE_DEFAULT;
    public static final int PERMISSION_GRANT_STATE_DENIED;
    public static final int PERMISSION_GRANT_STATE_GRANTED;
    public static final int PERMISSION_POLICY_AUTO_DENY;
    public static final int PERMISSION_POLICY_AUTO_GRANT;
    public static final int PERMISSION_POLICY_PROMPT;
    public static final int PERSONAL_APPS_NOT_SUSPENDED;
    public static final int PERSONAL_APPS_SUSPENDED_EXPLICITLY;
    public static final int PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT;
    public static final java.lang.String POLICY_DISABLE_CAMERA;
    public static final java.lang.String POLICY_DISABLE_SCREEN_CAPTURE;
    public static final java.lang.String POLICY_SUSPEND_PACKAGES;
    public static final int PRIVATE_DNS_MODE_OFF;
    public static final int PRIVATE_DNS_MODE_OPPORTUNISTIC;
    public static final int PRIVATE_DNS_MODE_PROVIDER_HOSTNAME;
    public static final int PRIVATE_DNS_MODE_UNKNOWN;
    public static final int PRIVATE_DNS_SET_ERROR_FAILURE_SETTING;
    public static final int PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING;
    public static final int PRIVATE_DNS_SET_NO_ERROR;
    public static final int PROFILE_KEYGUARD_FEATURES_AFFECT_OWNER;
    public static final int PROVISIONING_MODE_FULLY_MANAGED_DEVICE;
    public static final int PROVISIONING_MODE_MANAGED_PROFILE;
    public static final int PROVISIONING_TRIGGER_CLOUD_ENROLLMENT;
    public static final int PROVISIONING_TRIGGER_PERSISTENT_DEVICE_OWNER;
    public static final int PROVISIONING_TRIGGER_QR_CODE;
    public static final int PROVISIONING_TRIGGER_UNSPECIFIED;
    public static final int RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT;
    public static final int RESET_PASSWORD_REQUIRE_ENTRY;
    public static final int SKIP_SETUP_WIZARD;
    public static final int STATE_USER_PROFILE_COMPLETE;
    public static final int STATE_USER_SETUP_COMPLETE;
    public static final int STATE_USER_SETUP_FINALIZED;
    public static final int STATE_USER_SETUP_INCOMPLETE;
    public static final int STATE_USER_UNMANAGED;
    private static java.lang.String TAG;
    public static final int WIPE_EUICC;
    public static final int WIPE_EXTERNAL_STORAGE;
    public static final int WIPE_RESET_PROTECTION_DATA;
    public static final int WIPE_SILENTLY;
    private final android.content.Context mContext;
    private final boolean mParentInstance;
    private final android.app.admin.IDevicePolicyManager mService;

    static void <clinit>()
    {
        <android.app.admin.DevicePolicyManager: int WIPE_SILENTLY> = 8;

        <android.app.admin.DevicePolicyManager: int WIPE_RESET_PROTECTION_DATA> = 2;

        <android.app.admin.DevicePolicyManager: int WIPE_EXTERNAL_STORAGE> = 1;

        <android.app.admin.DevicePolicyManager: int WIPE_EUICC> = 4;

        <android.app.admin.DevicePolicyManager: int STATE_USER_UNMANAGED> = 0;

        <android.app.admin.DevicePolicyManager: int STATE_USER_SETUP_INCOMPLETE> = 1;

        <android.app.admin.DevicePolicyManager: int STATE_USER_SETUP_FINALIZED> = 3;

        <android.app.admin.DevicePolicyManager: int STATE_USER_SETUP_COMPLETE> = 2;

        <android.app.admin.DevicePolicyManager: int STATE_USER_PROFILE_COMPLETE> = 4;

        <android.app.admin.DevicePolicyManager: int SKIP_SETUP_WIZARD> = 1;

        <android.app.admin.DevicePolicyManager: int RESET_PASSWORD_REQUIRE_ENTRY> = 1;

        <android.app.admin.DevicePolicyManager: int RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT> = 2;

        <android.app.admin.DevicePolicyManager: int PROVISIONING_TRIGGER_UNSPECIFIED> = 0;

        <android.app.admin.DevicePolicyManager: int PROVISIONING_TRIGGER_QR_CODE> = 2;

        <android.app.admin.DevicePolicyManager: int PROVISIONING_TRIGGER_PERSISTENT_DEVICE_OWNER> = 3;

        <android.app.admin.DevicePolicyManager: int PROVISIONING_TRIGGER_CLOUD_ENROLLMENT> = 1;

        <android.app.admin.DevicePolicyManager: int PROVISIONING_MODE_MANAGED_PROFILE> = 2;

        <android.app.admin.DevicePolicyManager: int PROVISIONING_MODE_FULLY_MANAGED_DEVICE> = 1;

        <android.app.admin.DevicePolicyManager: int PROFILE_KEYGUARD_FEATURES_AFFECT_OWNER> = 438;

        <android.app.admin.DevicePolicyManager: int PRIVATE_DNS_SET_NO_ERROR> = 0;

        <android.app.admin.DevicePolicyManager: int PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING> = 1;

        <android.app.admin.DevicePolicyManager: int PRIVATE_DNS_SET_ERROR_FAILURE_SETTING> = 2;

        <android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_UNKNOWN> = 0;

        <android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_PROVIDER_HOSTNAME> = 3;

        <android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_OPPORTUNISTIC> = 2;

        <android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_OFF> = 1;

        <android.app.admin.DevicePolicyManager: java.lang.String POLICY_SUSPEND_PACKAGES> = "policy_suspend_packages";

        <android.app.admin.DevicePolicyManager: java.lang.String POLICY_DISABLE_SCREEN_CAPTURE> = "policy_disable_screen_capture";

        <android.app.admin.DevicePolicyManager: java.lang.String POLICY_DISABLE_CAMERA> = "policy_disable_camera";

        <android.app.admin.DevicePolicyManager: int PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT> = 2;

        <android.app.admin.DevicePolicyManager: int PERSONAL_APPS_SUSPENDED_EXPLICITLY> = 1;

        <android.app.admin.DevicePolicyManager: int PERSONAL_APPS_NOT_SUSPENDED> = 0;

        <android.app.admin.DevicePolicyManager: int PERMISSION_POLICY_PROMPT> = 0;

        <android.app.admin.DevicePolicyManager: int PERMISSION_POLICY_AUTO_GRANT> = 1;

        <android.app.admin.DevicePolicyManager: int PERMISSION_POLICY_AUTO_DENY> = 2;

        <android.app.admin.DevicePolicyManager: int PERMISSION_GRANT_STATE_GRANTED> = 1;

        <android.app.admin.DevicePolicyManager: int PERMISSION_GRANT_STATE_DENIED> = 2;

        <android.app.admin.DevicePolicyManager: int PERMISSION_GRANT_STATE_DEFAULT> = 0;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_UNSPECIFIED> = 0;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_SOMETHING> = 65536;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_NUMERIC_COMPLEX> = 196608;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_NUMERIC> = 131072;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_MANAGED> = 524288;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_COMPLEX> = 393216;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_BIOMETRIC_WEAK> = 32768;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHANUMERIC> = 327680;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHABETIC> = 262144;

        <android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_NONE> = 0;

        <android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_MEDIUM> = 196608;

        <android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_LOW> = 65536;

        <android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_HIGH> = 327680;

        <android.app.admin.DevicePolicyManager: int ORG_OWNED_PROFILE_KEYGUARD_FEATURES_PARENT_ONLY> = 6;

        <android.app.admin.DevicePolicyManager: int NOTIFICATION_BUGREPORT_STARTED> = 1;

        <android.app.admin.DevicePolicyManager: int NOTIFICATION_BUGREPORT_FINISHED_NOT_ACCEPTED> = 3;

        <android.app.admin.DevicePolicyManager: int NOTIFICATION_BUGREPORT_ACCEPTED_NOT_FINISHED> = 2;

        <android.app.admin.DevicePolicyManager: int NON_ORG_OWNED_PROFILE_KEYGUARD_FEATURES_AFFECT_OWNER> = 432;

        <android.app.admin.DevicePolicyManager: java.lang.String MIME_TYPE_PROVISIONING_NFC> = "application/com.android.managedprovisioning";

        <android.app.admin.DevicePolicyManager: int MAX_PASSWORD_LENGTH> = 16;

        <android.app.admin.DevicePolicyManager: int MAKE_USER_EPHEMERAL> = 2;

        <android.app.admin.DevicePolicyManager: int MAKE_USER_DEMO> = 4;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_SYSTEM_INFO> = 1;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_OVERVIEW> = 8;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_NOTIFICATIONS> = 2;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_NONE> = 0;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_KEYGUARD> = 32;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_HOME> = 4;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_GLOBAL_ACTIONS> = 16;

        <android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK> = 64;

        <android.app.admin.DevicePolicyManager: int LEAVE_ALL_SYSTEM_APPS_ENABLED> = 16;

        <android.app.admin.DevicePolicyManager: int KEY_GEN_STRONGBOX_UNAVAILABLE> = 1;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_WIDGETS_ALL> = 1;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS> = 8;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_TRUST_AGENTS> = 16;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS> = 4;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_SECURE_CAMERA> = 2;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_REMOTE_INPUT> = 64;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_IRIS> = 256;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FINGERPRINT> = 32;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_NONE> = 0;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_ALL> = 2147483647;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FACE> = 128;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_BIOMETRICS> = 416;

        <android.app.admin.DevicePolicyManager: int INSTALLKEY_SET_USER_SELECTABLE> = 2;

        <android.app.admin.DevicePolicyManager: int INSTALLKEY_REQUEST_CREDENTIALS_ACCESS> = 1;

        <android.app.admin.DevicePolicyManager: int ID_TYPE_SERIAL> = 2;

        <android.app.admin.DevicePolicyManager: int ID_TYPE_MEID> = 8;

        <android.app.admin.DevicePolicyManager: int ID_TYPE_INDIVIDUAL_ATTESTATION> = 16;

        <android.app.admin.DevicePolicyManager: int ID_TYPE_IMEI> = 4;

        <android.app.admin.DevicePolicyManager: int ID_TYPE_BASE_INFO> = 1;

        <android.app.admin.DevicePolicyManager: int FLAG_PARENT_CAN_ACCESS_MANAGED> = 1;

        <android.app.admin.DevicePolicyManager: int FLAG_MANAGED_CAN_ACCESS_PARENT> = 2;

        <android.app.admin.DevicePolicyManager: int FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY> = 1;

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_RESTRICTION> = "android.app.extra.RESTRICTION";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_REMOTE_BUGREPORT_HASH> = "android.intent.extra.REMOTE_BUGREPORT_HASH";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE> = "android.app.extra.PROVISIONING_WIFI_USER_CERTIFICATE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_SSID> = "android.app.extra.PROVISIONING_WIFI_SSID";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE> = "android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT> = "android.app.extra.PROVISIONING_WIFI_PROXY_PORT";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST> = "android.app.extra.PROVISIONING_WIFI_PROXY_HOST";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS> = "android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PHASE2_AUTH> = "android.app.extra.PROVISIONING_WIFI_PHASE2_AUTH";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PASSWORD> = "android.app.extra.PROVISIONING_WIFI_PASSWORD";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PAC_URL> = "android.app.extra.PROVISIONING_WIFI_PAC_URL";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_IDENTITY> = "android.app.extra.PROVISIONING_WIFI_IDENTITY";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_HIDDEN> = "android.app.extra.PROVISIONING_WIFI_HIDDEN";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_EAP_METHOD> = "android.app.extra.PROVISIONING_WIFI_EAP_METHOD";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_DOMAIN> = "android.app.extra.PROVISIONING_WIFI_DOMAIN";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE> = "android.app.extra.PROVISIONING_WIFI_CA_CERTIFICATE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY> = "android.app.extra.PROVISIONING_WIFI_ANONYMOUS_IDENTITY";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_USE_MOBILE_DATA> = "android.app.extra.PROVISIONING_USE_MOBILE_DATA";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_TRIGGER> = "android.app.extra.PROVISIONING_TRIGGER";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_TIME_ZONE> = "android.app.extra.PROVISIONING_TIME_ZONE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SUPPORT_URL> = "android.app.extra.PROVISIONING_SUPPORT_URL";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SKIP_USER_SETUP> = "android.app.extra.PROVISIONING_SKIP_USER_SETUP";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SKIP_USER_CONSENT> = "android.app.extra.PROVISIONING_SKIP_USER_CONSENT";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SKIP_ENCRYPTION> = "android.app.extra.PROVISIONING_SKIP_ENCRYPTION";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS> = "android.app.extra.PROVISIONING_SKIP_EDUCATION_SCREENS";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SERIAL_NUMBER> = "android.app.extra.PROVISIONING_SERIAL_NUMBER";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ORGANIZATION_NAME> = "android.app.extra.PROVISIONING_ORGANIZATION_NAME";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_MODE> = "android.app.extra.PROVISIONING_MODE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_MAIN_COLOR> = "android.app.extra.PROVISIONING_MAIN_COLOR";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOGO_URI> = "android.app.extra.PROVISIONING_LOGO_URI";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOCAL_TIME> = "android.app.extra.PROVISIONING_LOCAL_TIME";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOCALE> = "android.app.extra.PROVISIONING_LOCALE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED> = "android.app.extra.PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION> = "android.app.extra.PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_IMEI> = "android.app.extra.PROVISIONING_IMEI";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS> = "android.app.extra.PROVISIONING_EMAIL_ADDRESS";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DISCLAIMER_HEADER> = "android.app.extra.PROVISIONING_DISCLAIMER_HEADER";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DISCLAIMER_CONTENT> = "android.app.extra.PROVISIONING_DISCLAIMER_CONTENT";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DISCLAIMERS> = "android.app.extra.PROVISIONING_DISCLAIMERS";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_LABEL> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_LABEL";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_ICON_URI> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_ICON_URI";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE> = "android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE> = "android.app.extra.PROVISIONING_ACCOUNT_TO_MIGRATE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROFILE_OWNER_NAME> = "android.app.extra.PROFILE_OWNER_NAME";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PASSWORD_COMPLEXITY> = "android.app.extra.PASSWORD_COMPLEXITY";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_DEVICE_ADMIN> = "android.app.extra.DEVICE_ADMIN";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_DELEGATION_SCOPES> = "android.app.extra.DELEGATION_SCOPES";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_BUGREPORT_NOTIFICATION_TYPE> = "android.app.extra.bugreport_notification_type";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_ADD_EXPLANATION> = "android.app.extra.ADD_EXPLANATION";

        <android.app.admin.DevicePolicyManager: int ERROR_VPN_PACKAGE_NOT_FOUND> = 1;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_UNSUPPORTED> = 0;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_INACTIVE> = 1;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE_PER_USER> = 5;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY> = 4;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE> = 3;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVATING> = 2;

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_PERMISSION_GRANT> = "delegation-permission-grant";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_PACKAGE_ACCESS> = "delegation-package-access";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_NETWORK_LOGGING> = "delegation-network-logging";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_KEEP_UNINSTALLED_PACKAGES> = "delegation-keep-uninstalled-packages";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_INSTALL_EXISTING_PACKAGE> = "delegation-install-existing-package";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_ENABLE_SYSTEM_APP> = "delegation-enable-system-app";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_CERT_SELECTION> = "delegation-cert-selection";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_CERT_INSTALL> = "delegation-cert-install";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_BLOCK_UNINSTALL> = "delegation-block-uninstall";

        <android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_APP_RESTRICTIONS> = "delegation-app-restrictions";

        <android.app.admin.DevicePolicyManager: long DEFAULT_STRONG_AUTH_TIMEOUT_MS> = 259200000L;

        <android.app.admin.DevicePolicyManager: int CODE_USER_SETUP_COMPLETED> = 4;

        <android.app.admin.DevicePolicyManager: int CODE_USER_NOT_RUNNING> = 3;

        <android.app.admin.DevicePolicyManager: int CODE_USER_HAS_PROFILE_OWNER> = 2;

        <android.app.admin.DevicePolicyManager: int CODE_SYSTEM_USER> = 10;

        <android.app.admin.DevicePolicyManager: int CODE_SPLIT_SYSTEM_USER_DEVICE_SYSTEM_USER> = 14;

        <android.app.admin.DevicePolicyManager: int CODE_OK> = 0;

        <android.app.admin.DevicePolicyManager: int CODE_NOT_SYSTEM_USER_SPLIT> = 12;

        <android.app.admin.DevicePolicyManager: int CODE_NOT_SYSTEM_USER> = 7;

        <android.app.admin.DevicePolicyManager: int CODE_NONSYSTEM_USER_EXISTS> = 5;

        <android.app.admin.DevicePolicyManager: int CODE_MANAGED_USERS_NOT_SUPPORTED> = 9;

        <android.app.admin.DevicePolicyManager: int CODE_HAS_PAIRED> = 8;

        <android.app.admin.DevicePolicyManager: int CODE_HAS_DEVICE_OWNER> = 1;

        <android.app.admin.DevicePolicyManager: int CODE_DEVICE_ADMIN_NOT_SUPPORTED> = 13;

        <android.app.admin.DevicePolicyManager: int CODE_CANNOT_ADD_MANAGED_PROFILE> = 11;

        <android.app.admin.DevicePolicyManager: int CODE_ACCOUNTS_NOT_EMPTY> = 6;

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SYSTEM_UPDATE_POLICY_CHANGED> = "android.app.action.SYSTEM_UPDATE_POLICY_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_STATE_USER_SETUP_COMPLETE> = "android.app.action.STATE_USER_SETUP_COMPLETE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_START_ENCRYPTION> = "android.app.action.START_ENCRYPTION";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SHOW_DEVICE_MONITORING_DIALOG> = "android.app.action.SHOW_DEVICE_MONITORING_DIALOG";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_PROFILE_OWNER> = "android.app.action.SET_PROFILE_OWNER";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_NEW_PASSWORD> = "android.app.action.SET_NEW_PASSWORD";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_NEW_PARENT_PROFILE_PASSWORD> = "android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_RESET_PROTECTION_POLICY_CHANGED> = "android.app.action.RESET_PROTECTION_POLICY_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_REMOTE_BUGREPORT_DISPATCH> = "android.intent.action.REMOTE_BUGREPORT_DISPATCH";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_USER> = "android.app.action.PROVISION_MANAGED_USER";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_SHAREABLE_DEVICE> = "android.app.action.PROVISION_MANAGED_SHAREABLE_DEVICE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_PROFILE> = "android.app.action.PROVISION_MANAGED_PROFILE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_DEVICE_FROM_TRUSTED_SOURCE> = "android.app.action.PROVISION_MANAGED_DEVICE_FROM_TRUSTED_SOURCE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_DEVICE> = "android.app.action.PROVISION_MANAGED_DEVICE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_FINANCED_DEVICE> = "android.app.action.PROVISION_FINANCED_DEVICE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_FINALIZATION> = "android.app.action.PROVISION_FINALIZATION";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISIONING_SUCCESSFUL> = "android.app.action.PROVISIONING_SUCCESSFUL";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROFILE_OWNER_CHANGED> = "android.app.action.PROFILE_OWNER_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_MANAGED_USER_CREATED> = "android.app.action.MANAGED_USER_CREATED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_MANAGED_PROFILE_PROVISIONED> = "android.app.action.MANAGED_PROFILE_PROVISIONED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_GET_PROVISIONING_MODE> = "android.app.action.GET_PROVISIONING_MODE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED> = "android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_OWNER_CHANGED> = "android.app.action.DEVICE_OWNER_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_ADMIN_SERVICE> = "android.app.action.DEVICE_ADMIN_SERVICE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_DATA_SHARING_RESTRICTION_CHANGED> = "android.app.action.DATA_SHARING_RESTRICTION_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_DATA_SHARING_RESTRICTION_APPLIED> = "android.app.action.DATA_SHARING_RESTRICTION_APPLIED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_CHECK_POLICY_COMPLIANCE> = "android.app.action.CHECK_POLICY_COMPLIANCE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_BUGREPORT_SHARING_DECLINED> = "com.android.server.action.REMOTE_BUGREPORT_SHARING_DECLINED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_BUGREPORT_SHARING_ACCEPTED> = "com.android.server.action.REMOTE_BUGREPORT_SHARING_ACCEPTED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_BIND_SECONDARY_LOCKSCREEN_SERVICE> = "android.app.action.BIND_SECONDARY_LOCKSCREEN_SERVICE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED> = "android.app.action.APPLICATION_DELEGATION_SCOPES_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_ADMIN_POLICY_COMPLIANCE> = "android.app.action.ADMIN_POLICY_COMPLIANCE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_ADD_DEVICE_ADMIN> = "android.app.action.ADD_DEVICE_ADMIN";

        <android.app.admin.DevicePolicyManager: java.lang.String ACCOUNT_FEATURE_DEVICE_OR_PROFILE_OWNER_DISALLOWED> = "android.account.DEVICE_OR_PROFILE_OWNER_DISALLOWED";

        <android.app.admin.DevicePolicyManager: java.lang.String ACCOUNT_FEATURE_DEVICE_OR_PROFILE_OWNER_ALLOWED> = "android.account.DEVICE_OR_PROFILE_OWNER_ALLOWED";

        <android.app.admin.DevicePolicyManager: java.lang.String TAG> = "DevicePolicyManager";

        return;
    }

    public void <init>(android.content.Context, android.app.admin.IDevicePolicyManager)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context r1;
        android.app.admin.IDevicePolicyManager r2;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.app.admin.IDevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void <init>(android.content.Context,android.app.admin.IDevicePolicyManager,boolean)>(r1, r2, 0);

        return;
    }

    protected void <init>(android.content.Context, android.app.admin.IDevicePolicyManager, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.app.admin.IDevicePolicyManager;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext> = r1;

        r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService> = r2;

        r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance> = z0;

        return;
    }

    static void access$000(android.app.admin.DevicePolicyManager, int, java.lang.String, java.util.concurrent.Executor, android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        java.lang.String r1;
        java.util.concurrent.Executor r2;
        android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback r3;

        r0 := @parameter0: android.app.admin.DevicePolicyManager;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.util.concurrent.Executor;

        r3 := @parameter4: android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void executeCallback(int,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)>(i0, r1, r2, r3);

        return;
    }

    private void executeCallback(int, java.lang.String, java.util.concurrent.Executor, android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        java.lang.String r1;
        java.util.concurrent.Executor r2;
        android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback r3;
        android.app.admin._$$Lambda$DevicePolicyManager$aBAov4sAc4DWENs1_hCXh31NAg0 $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback;

        $r4 = new android.app.admin._$$Lambda$DevicePolicyManager$aBAov4sAc4DWENs1_hCXh31NAg0;

        specialinvoke $r4.<android.app.admin._$$Lambda$DevicePolicyManager$aBAov4sAc4DWENs1_hCXh31NAg0: void <init>(android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback,int,java.lang.String)>(r3, i0, r1);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    private static java.lang.String getCaCertAlias(byte[]) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory $r0;
        java.io.ByteArrayInputStream $r1;
        java.security.cert.Certificate $r2;
        com.android.org.conscrypt.TrustedCertificateStore $r3;
        java.lang.String $r4;
        byte[] r5;
        java.security.cert.X509Certificate r6;

        r5 := @parameter0: byte[];

        $r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r5);

        $r2 = virtualinvoke $r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1);

        r6 = (java.security.cert.X509Certificate) $r2;

        $r3 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke $r3.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        $r4 = virtualinvoke $r3.<com.android.org.conscrypt.TrustedCertificateStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>(r6);

        return $r4;
    }

    private android.content.ComponentName getDeviceOwnerComponentInner(boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        z0 := @parameter0: boolean;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>(z0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean isDeviceOwnerAppOnAnyUserInner(java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r3;
        boolean z0, $z1;
        android.content.ComponentName r2;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = specialinvoke r0.<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentInner(boolean)>(z0);

        if r2 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    static void lambda$executeCallback$1(android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback, int, java.lang.String)
    {
        android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        virtualinvoke r0.<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: void onInstallUpdateError(int,java.lang.String)>(i0, r1);

        return;
    }

    static void lambda$setPermissionGrantState$0(java.util.concurrent.CompletableFuture, android.os.Bundle)
    {
        java.util.concurrent.CompletableFuture r0;
        android.os.Bundle r1;
        java.lang.Boolean $r2;
        boolean z1;

        r0 := @parameter0: java.util.concurrent.CompletableFuture;

        r1 := @parameter1: android.os.Bundle;

        if r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke r0.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>($r2);

        return;
    }

    private void throwIfParentInstance(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be called on the parent instance");

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void wipeDataInternal(int, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void wipeDataWithReason(int,java.lang.String,boolean)>(i0, r4, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.IntentFilter r1;
        int i0;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.IntentFilter;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("addCrossProfileIntentFilter");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>(r5, r1, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("addCrossProfileWidgetProvider");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int addOverrideApn(android.content.ComponentName, android.telephony.data.ApnSetting)
    {
        android.app.admin.DevicePolicyManager r0;
        android.telephony.data.ApnSetting r1;
        android.app.admin.IDevicePolicyManager r2;
        int i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.telephony.data.ApnSetting;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("addOverrideApn");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        i0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>(r5, r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.IntentFilter r1;
        android.content.ComponentName r2, r6;
        android.app.admin.IDevicePolicyManager r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.IntentFilter;

        r2 := @parameter2: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("addPersistentPreferredActivity");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>(r6, r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addUserRestriction(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean $z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)>(r5, r1, 1, $z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean approveCaCert(java.lang.String, int, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        boolean z0, z1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean approveCaCert(java.lang.String,int,boolean)>(r4, i0, z0);

     label2:
        return z1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean bindDeviceAdminServiceAsUser(android.content.ComponentName, android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Intent r1;
        int i0, $i1;
        android.os.UserHandle r2;
        boolean z0;
        android.content.Context $r3, $r4, $r6, $r7, $r10;
        android.os.Handler $r5;
        android.app.admin.IDevicePolicyManager $r8;
        android.app.IApplicationThread $r9;
        android.os.IBinder $r11;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        android.content.ComponentName r14;
        android.content.ServiceConnection r15;
        android.app.IServiceConnection r16;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r14 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.Intent;

        r15 := @parameter2: android.content.ServiceConnection;

        i0 := @parameter3: int;

        r2 := @parameter4: android.os.UserHandle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("bindDeviceAdminServiceAsUser");

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: android.os.Handler getMainThreadHandler()>();

        r16 = virtualinvoke $r4.<android.content.Context: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.os.Handler,int)>(r15, $r5, i0);

        $r6 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess(android.content.Context)>($r6);

        $r8 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r7 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: android.app.IApplicationThread getIApplicationThread()>();

        $r10 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.os.IBinder getActivityToken()>();

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke $r8.<android.app.admin.IDevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>(r14, $r9, $r11, r1, r16, i0, $i1);

     label2:
        return z0;

     label3:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean canProfileOwnerResetPasswordWhenLocked(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean canProfileOwnerResetPasswordWhenLocked(int)>(i0);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkProvisioningPreCondition(java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r5;
        int i0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: int checkProvisioningPreCondition(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearApplicationUserData(android.content.ComponentName, java.lang.String, java.util.concurrent.Executor, android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        java.util.concurrent.Executor r2;
        android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener r3;
        android.app.admin.IDevicePolicyManager r4;
        android.app.admin.DevicePolicyManager$1 r5;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.ComponentName r10;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("clearAppData");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

     label1:
        r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = new android.app.admin.DevicePolicyManager$1;

        specialinvoke r5.<android.app.admin.DevicePolicyManager$1: void <init>(android.app.admin.DevicePolicyManager,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener)>(r0, r2, r3);

        interfaceinvoke r4.<android.app.admin.IDevicePolicyManager: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>(r10, r1, r5);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearCrossProfileIntentFilters(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("clearCrossProfileIntentFilters");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearDeviceOwnerApp(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("clearDeviceOwnerApp");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void clearDeviceOwner(java.lang.String)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("clearPackagePersistentPreferredActivities");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearProfileOwner(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("clearProfileOwner");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void clearProfileOwner(android.content.ComponentName)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean clearResetPasswordToken(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("clearResetPasswordToken");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearSystemUpdatePolicyFreezePeriodRecord()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("clearSystemUpdatePolicyFreezePeriodRecord");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 != null goto label1;

        return;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void clearSystemUpdatePolicyFreezePeriodRecord()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearUserRestriction(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean $z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)>(r5, r1, 0, $z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.Intent createAdminSupportIntent(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.content.Intent r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("createAdminSupportIntent");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: android.content.Intent createAdminSupportIntent(java.lang.String)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r7;
        android.content.ComponentName r2, r10;
        android.os.PersistableBundle r3;
        int i0, $i1;
        android.app.admin.IDevicePolicyManager $r4;
        android.os.ServiceSpecificException $r5;
        android.os.UserManager$UserOperationException $r6;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.os.UserHandle r11;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r10 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.ComponentName;

        r3 := @parameter3: android.os.PersistableBundle;

        i0 := @parameter4: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("createAndManageUser");

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r11 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>(r10, r1, r2, r3, i0);

     label2:
        return r11;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new android.os.UserManager$UserOperationException;

        $r7 = virtualinvoke $r5.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        $i1 = $r5.<android.os.ServiceSpecificException: int errorCode>;

        specialinvoke $r6.<android.os.UserManager$UserOperationException: void <init>(java.lang.String,int)>($r7, $i1);

        throw $r6;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int enableSystemApp(android.content.ComponentName, android.content.Intent)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Intent r1;
        android.app.admin.IDevicePolicyManager r2;
        int i0;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("enableSystemApp");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        i0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>(r7, $r4, r1);

     label2:
        return i0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void enableSystemApp(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        android.app.admin.IDevicePolicyManager r2;
        android.content.Context $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("enableSystemApp");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>(r7, $r4, r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long forceNetworkLogs()
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 != null goto label1;

        return -1L;

     label1:
        l0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: long forceNetworkLogs()>();

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forceRemoveActiveAdmin(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void forceRemoveActiveAdmin(android.content.ComponentName,int)>(r4, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long forceSecurityLogs()
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 != null goto label1;

        return 0L;

     label1:
        l0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: long forceSecurityLogs()>();

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forceUpdateUserSetupComplete()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void forceUpdateUserSetupComplete()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.security.AttestedKeyPair generateKeyPair(android.content.ComponentName, java.lang.String, android.security.keystore.KeyGenParameterSpec, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, $i4, $i6, $i7;
        android.content.Context $r1, $r4, $r28;
        android.app.admin.IDevicePolicyManager $r2, $r29;
        java.lang.String $r3, $r6, $r8, $r10, $r14, $r16, $r21, $r27, $r30, r32, r36, r40;
        boolean $z0, $z1;
        android.security.AttestedKeyPair $r5;
        android.security.KeyChainException $r7;
        java.lang.Throwable $r9;
        java.lang.Thread $r11;
        android.os.ServiceSpecificException $r12;
        java.lang.Object[] $r13, $r19;
        java.lang.Integer $r15, $r20;
        android.security.keystore.StrongBoxUnavailableException $r17;
        java.lang.RuntimeException $r18, $r23;
        android.os.RemoteException $r22;
        android.security.keystore.KeyAttestationException $r24;
        android.content.ComponentName r31;
        android.security.keystore.KeyGenParameterSpec r33;
        android.security.keystore.ParcelableKeyGenParameterSpec r34;
        android.security.keymaster.KeymasterCertificateChain r35;
        java.security.KeyPair r37;
        java.security.cert.X509Certificate[] r38;
        java.lang.StringBuilder r41;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r31 := @parameter0: android.content.ComponentName;

        r32 := @parameter1: java.lang.String;

        r33 := @parameter2: android.security.keystore.KeyGenParameterSpec;

        i0 := @parameter3: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("generateKeyPair");

     label01:
        r34 = new android.security.keystore.ParcelableKeyGenParameterSpec;

        specialinvoke r34.<android.security.keystore.ParcelableKeyGenParameterSpec: void <init>(android.security.keystore.KeyGenParameterSpec)>(r33);

        r35 = new android.security.keymaster.KeymasterCertificateChain;

        specialinvoke r35.<android.security.keymaster.KeymasterCertificateChain: void <init>()>();

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>(r31, $r3, r32, r34, i0, r35);

        if $z0 != 0 goto label03;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, "Error generating key via DevicePolicyManagerService.");

     label02:
        return null;

     label03:
        r36 = virtualinvoke r33.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        r37 = staticinvoke <android.security.KeyChain: java.security.KeyPair getKeyPair(android.content.Context,java.lang.String)>($r4, r36);

     label04:
        r38 = null;

     label05:
        $z1 = staticinvoke <android.security.keystore.AttestationUtils: boolean isChainValid(android.security.keymaster.KeymasterCertificateChain)>(r35);

        if $z1 == 0 goto label06;

        r38 = staticinvoke <android.security.keystore.AttestationUtils: java.security.cert.X509Certificate[] parseCertificateChain(android.security.keymaster.KeymasterCertificateChain)>(r35);

     label06:
        $r5 = new android.security.AttestedKeyPair;

        specialinvoke $r5.<android.security.AttestedKeyPair: void <init>(java.security.KeyPair,java.security.cert.Certificate[])>(r37, r38);

        return $r5;

     label07:
        $r24 := @caughtexception;

     label08:
        r40 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing attestation chain for alias ");

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r27 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r40, $r27, $r24);

        $r29 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r28 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r30 = virtualinvoke $r28.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r29.<android.app.admin.IDevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>(r31, $r30, r36);

     label09:
        return null;

     label10:
        $r12 := @caughtexception;

        $r14 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r13 = newarray (java.lang.Object)[1];

        $i4 = $r12.<android.os.ServiceSpecificException: int errorCode>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r13[0] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Key Generation failure: %d", $r13);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r14, $r16);

        $i6 = $r12.<android.os.ServiceSpecificException: int errorCode>;

        if $i6 == 1 goto label11;

        $r18 = new java.lang.RuntimeException;

        $r19 = newarray (java.lang.Object)[1];

        $i7 = $r12.<android.os.ServiceSpecificException: int errorCode>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown error while generating key: %d", $r19);

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label11:
        $r17 = new android.security.keystore.StrongBoxUnavailableException;

        specialinvoke $r17.<android.security.keystore.StrongBoxUnavailableException: void <init>(java.lang.String)>("No StrongBox for key generation.");

        throw $r17;

     label12:
        $r9 := @caughtexception;

        $r10 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "Interrupted while generating key", $r9);

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        goto label14;

     label13:
        $r7 := @caughtexception;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed to generate key", $r7);

     label14:
        return null;

     label15:
        $r22 := @caughtexception;

        $r23 = virtualinvoke $r22.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r23;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch android.security.KeyChainException from label01 to label02 with label13;
        catch java.lang.InterruptedException from label01 to label02 with label12;
        catch android.os.ServiceSpecificException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch android.security.KeyChainException from label03 to label04 with label13;
        catch java.lang.InterruptedException from label03 to label04 with label12;
        catch android.os.ServiceSpecificException from label03 to label04 with label10;
        catch android.security.keystore.KeyAttestationException from label05 to label06 with label07;
        catch android.os.RemoteException from label05 to label06 with label15;
        catch android.security.KeyChainException from label05 to label06 with label13;
        catch java.lang.InterruptedException from label05 to label06 with label12;
        catch android.os.ServiceSpecificException from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label15;
        catch android.security.KeyChainException from label06 to label07 with label13;
        catch java.lang.InterruptedException from label06 to label07 with label12;
        catch android.os.ServiceSpecificException from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label15;
        catch android.security.KeyChainException from label08 to label09 with label13;
        catch java.lang.InterruptedException from label08 to label09 with label12;
        catch android.os.ServiceSpecificException from label08 to label09 with label10;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabled()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0;
        boolean $z0;
        java.lang.String[] $r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        $r1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)>($i0, $z0);

        return $r1;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        java.lang.String[] $r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)>(i0, 0);

        return $r1;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.lang.String[] r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)>(i0, z0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getActiveAdmins()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getActiveAdmins");

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $r1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: java.util.List getActiveAdminsAsUser(int)>($i0);

        return $r1;
    }

    public java.util.List getActiveAdminsAsUser(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.util.List r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getAffiliationIds(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.util.ArraySet $r1;
        android.app.admin.IDevicePolicyManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getAffiliationIds");

     label1:
        $r1 = new android.util.ArraySet;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r3 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: java.util.List getAffiliationIds(android.content.ComponentName)>(r6);

        specialinvoke $r1.<android.util.ArraySet: void <init>(java.util.Collection)>($r3);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getAllCrossProfilePackages()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1, $r4;
        java.util.Set $r2;
        android.util.ArraySet $r3;
        java.util.List $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getAllCrossProfilePackages");

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r1 == null goto label4;

     label1:
        $r3 = new android.util.ArraySet;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.util.List getAllCrossProfilePackages()>();

        specialinvoke $r3.<android.util.ArraySet: void <init>(java.util.Collection)>($r5);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.HashSet $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getAlwaysOnVpnLockdownWhitelist");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label8;

     label1:
        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)>(r5);

     label2:
        if r6 != null goto label4;

        r7 = null;

     label3:
        goto label6;

     label4:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>(r6);

        r7 = $r2;

     label5:
        goto label3;

     label6:
        return r7;

     label7:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public java.lang.String getAlwaysOnVpnPackage()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getAlwaysOnVpnPackage");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.lang.String getAlwaysOnVpnPackageForUser(int)>($i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getAlwaysOnVpnPackage");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        android.app.admin.IDevicePolicyManager r2;
        android.content.Context $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;
        android.os.Bundle r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getApplicationRestrictions");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        r8 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>(r7, $r4, r1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getApplicationRestrictionsManagingPackage");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getAutoTimeEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getAutoTimeEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getAutoTimeRequired()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getAutoTimeRequired");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean getAutoTimeRequired()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getAutoTimeZoneEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getAutoTimeZone");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getAutoTimeZoneEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.util.List r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getBindDeviceAdminTargetUsers");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getBluetoothContactSharingDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getBluetoothContactSharingDisabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getBluetoothContactSharingDisabled(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.UserHandle r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.os.UserHandle;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getBluetoothContactSharingDisabledForUser(int)>($i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getCameraDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean getCameraDisabled(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0, $z1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z1 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>(r4, i0, $z1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getCertInstallerPackage(android.content.ComponentName) throws java.lang.SecurityException
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getCertInstallerPackage");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.String getCertInstallerPackage(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getCrossProfileCalendarPackages()
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.Set $r1;
        int $i0;
        android.util.ArraySet $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.admin.IDevicePolicyManager r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getCrossProfileCalendarPackages");

        r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r5 == null goto label6;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        r6 = interfaceinvoke r5.<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileCalendarPackagesForUser(int)>($i0);

     label2:
        if r6 != null goto label3;

        r7 = null;

        goto label4;

     label3:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>(java.util.Collection)>(r6);

        r7 = $r2;

     label4:
        return r7;

     label5:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label6:
        $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.util.Set getCrossProfileCalendarPackages(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.Set $r2;
        android.util.ArraySet $r3, r8;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;
        java.util.List r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getCrossProfileCalendarPackages");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label6;

     label1:
        r7 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)>(r6);

     label2:
        if r7 != null goto label3;

        r8 = null;

        goto label4;

     label3:
        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>(java.util.Collection)>(r7);

        r8 = $r3;

     label4:
        return r8;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label6:
        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getCrossProfileCallerIdDisabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getCrossProfileCallerIdDisabled(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.UserHandle r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.os.UserHandle;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabledForUser(int)>($i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getCrossProfileContactsSearchDisabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getCrossProfileContactsSearchDisabled(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.UserHandle r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.os.UserHandle;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getCrossProfileContactsSearchDisabledForUser(int)>($i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getCrossProfilePackages(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1, $r4;
        java.util.Set $r2;
        android.util.ArraySet $r3;
        java.util.List $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.ComponentName r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r8 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getCrossProfilePackages");

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r1 == null goto label4;

     label1:
        $r3 = new android.util.ArraySet;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfilePackages(android.content.ComponentName)>(r8);

        specialinvoke $r3.<android.util.ArraySet: void <init>(java.util.Collection)>($r5);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getCrossProfileWidgetProviders");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label5;

     label1:
        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>(r5);

     label2:
        if r6 == null goto label3;

        return r6;

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label5:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public int getCurrentFailedPasswordAttempts()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts(int)>($i0);

        return $i1;
    }

    public int getCurrentFailedPasswordAttempts(int)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean $z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int i0, i1;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int,boolean)>(i0, $z0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getDefaultCrossProfilePackages()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1, $r4;
        java.util.Set $r2;
        android.util.ArraySet $r3;
        java.util.List $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getDefaultCrossProfilePackages");

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r1 == null goto label4;

     label1:
        $r3 = new android.util.ArraySet;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.util.List getDefaultCrossProfilePackages()>();

        specialinvoke $r3.<android.util.ArraySet: void <init>(java.util.Collection)>($r5);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getDelegatePackages(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getDelegatePackages");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        r6 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getDelegatedScopes(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getDelegatedScopes");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        r6 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceOwner()
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getDeviceOwner");

        r1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentOnCallingUser()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.content.ComponentName getDeviceOwnerComponentOnAnyUser()
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName $r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r1 = specialinvoke r0.<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentInner(boolean)>(0);

        return $r1;
    }

    public android.content.ComponentName getDeviceOwnerComponentOnCallingUser()
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName $r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r1 = specialinvoke r0.<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentInner(boolean)>(1);

        return $r1;
    }

    public java.lang.CharSequence getDeviceOwnerLockScreenInfo()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.lang.CharSequence r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getDeviceOwnerLockScreenInfo");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getDeviceOwnerLockScreenInfo()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceOwnerNameOnAnyUser()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getDeviceOwnerNameOnAnyUser");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.lang.String getDeviceOwnerName()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getDeviceOwnerOrganizationName()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.CharSequence r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r4 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getDeviceOwnerOrganizationName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.UserHandle getDeviceOwnerUser()
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        android.os.UserHandle r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label7;

     label1:
        i0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: int getDeviceOwnerUserId()>();

     label2:
        if i0 == -10000 goto label5;

     label3:
        r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

     label4:
        return r4;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getDeviceOwnerUserId()
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        i0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: int getDeviceOwnerUserId()>();

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return -10000;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Set getDisallowedSystemApps(android.content.ComponentName, int, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        java.lang.String r1;
        android.util.ArraySet $r2;
        android.app.admin.IDevicePolicyManager $r3;
        java.util.List $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

     label1:
        $r2 = new android.util.ArraySet;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)>(r7, i0, r1);

        specialinvoke $r2.<android.util.ArraySet: void <init>(java.util.Collection)>($r4);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getDoNotAskCredentialsOnBoot()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean getDoNotAskCredentialsOnBoot()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getEndUserSessionMessage");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        android.app.admin.FactoryResetProtectionPolicy r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getFactoryResetProtectionPolicy");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getForceEphemeralUsers(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getForceEphemeralUsers");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getForceEphemeralUsers(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setGlobalPrivateDns");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 != null goto label1;

        return null;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getGlobalPrivateDnsMode(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        int i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setGlobalPrivateDns");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getGlobalPrivateDnsMode(android.content.ComponentName)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getGlobalProxyAdmin()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin(int)>($i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getGuestUserDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public java.util.List getInstalledCaCerts(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.Iterator r2;
        java.lang.String r3, $r8, $r16, r22;
        java.lang.StringBuilder r5;
        java.util.ArrayList $r6;
        android.content.Context $r7;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.security.cert.Certificate $r11;
        byte[] $r12;
        java.lang.Throwable $r13;
        android.os.RemoteException $r17;
        java.lang.RuntimeException $r18;
        android.content.ComponentName r19;
        android.app.admin.IDevicePolicyManager r20;
        com.android.org.conscrypt.TrustedCertificateStore r21;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r19 := @parameter0: android.content.ComponentName;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getInstalledCaCerts");

        r20 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r20 == null goto label10;

     label01:
        $r7 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r20.<android.app.admin.IDevicePolicyManager: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>(r19, $r8);

        r21 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke r21.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        $r9 = virtualinvoke r21.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set userAliases()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r10;

     label03:
        $r11 = virtualinvoke r21.<com.android.org.conscrypt.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.security.cert.Certificate: byte[] getEncoded()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r12);

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

     label06:
        r22 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not encode certificate: ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>(r22, $r16, $r13);

     label07:
        goto label02;

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

        $r18 = virtualinvoke $r17.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r18;

     label10:
        return $r6;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch android.os.RemoteException from label02 to label03 with label09;
        catch java.security.cert.CertificateException from label03 to label04 with label05;
        catch android.os.RemoteException from label03 to label04 with label09;
        catch android.os.RemoteException from label06 to label07 with label09;
    }

    public java.util.List getKeepUninstalledPackages(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.content.Context $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;
        java.util.List r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getKeepUninstalledPackages");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        r7 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>(r6, $r3);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getLastBugReportRequestTime()
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        l0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: long getLastBugReportRequestTime()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getLastNetworkLogRetrievalTime()
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        l0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: long getLastNetworkLogRetrievalTime()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getLastSecurityLogRetrievalTime()
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        l0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: long getLastSecurityLogRetrievalTime()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLockTaskFeatures(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        int i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getLockTaskFeatures");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        i0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getLockTaskPackages(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.lang.String[] $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getLockTaskPackages");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r2 = newarray (java.lang.String)[0];

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getLongSupportMessage");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>(r4, i0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getManagedProfileMaximumTimeOff(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        long l0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getManagedProfileMaximumTimeOff");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        l0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: long getManagedProfileMaximumTimeOff(android.content.ComponentName)>(r4);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getMaximumTimeToLock(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        long $l1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $l1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)>(r1, $i0);

        return $l1;
    }

    public long getMaximumTimeToLock(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        long l1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        l1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return l1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.ArrayList $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getMeteredDataDisabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getOrganizationColor(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getOrganizationColor");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: int getOrganizationColor(android.content.ComponentName)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getOrganizationColorForUser(int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i1 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: int getOrganizationColorForUser(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getOrganizationName(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getOrganizationName");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getOrganizationName(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getOrganizationNameForUser(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.CharSequence r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r4 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getOrganizationNameForUser(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getOverrideApns(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getOverrideApns");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getOverrideApns(android.content.ComponentName)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getOwnerInstalledCaCerts(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.content.pm.StringParceledListSlice $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.os.UserHandle r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.os.UserHandle;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r2 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>(r5);

        r6 = virtualinvoke $r2.<android.content.pm.StringParceledListSlice: java.util.List getList()>();

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0, $r2;
        android.app.admin.IDevicePolicyManager $r1, $r3;
        boolean $z0;
        android.content.Context $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;
        java.lang.SecurityException r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getParentProfileInstance");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)>(r7);

        if $z0 == 0 goto label2;

        $r2 = new android.app.admin.DevicePolicyManager;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        specialinvoke $r2.<android.app.admin.DevicePolicyManager: void <init>(android.content.Context,android.app.admin.IDevicePolicyManager,boolean)>($r4, $r3, 1);

        return $r2;

     label2:
        r8 = new java.lang.SecurityException;

        specialinvoke r8.<java.lang.SecurityException: void <init>(java.lang.String)>("The current user does not have a parent profile.");

        throw r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label2 to label3 with label3;
    }

    public android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.pm.UserInfo)
    {
        android.app.admin.DevicePolicyManager r0, $r10;
        android.content.pm.UserInfo r1;
        android.content.Context $r3, $r12;
        boolean $z0;
        java.lang.StringBuilder $r4;
        int $i1;
        java.lang.SecurityException $r8;
        java.lang.String $r9;
        android.app.admin.IDevicePolicyManager $r11;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.pm.UserInfo;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: int checkSelfPermission(java.lang.String)>("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS");

        $z0 = virtualinvoke r1.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        $r10 = new android.app.admin.DevicePolicyManager;

        $r12 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r11 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        specialinvoke $r10.<android.app.admin.DevicePolicyManager: void <init>(android.content.Context,android.app.admin.IDevicePolicyManager,boolean)>($r12, $r11, 1);

        return $r10;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The user ");

        $i1 = r1.<android.content.pm.UserInfo: int id>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a parent profile.");

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public int getPasswordComplexity()
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        boolean $z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 != null goto label1;

        return 0;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: int getPasswordComplexity(boolean)>($z0);

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getPasswordExpiration(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        long l0;
        int $i1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        l0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: long getPasswordExpiration(android.content.ComponentName,int,boolean)>(r4, $i1, $z0);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        long l0;
        int $i1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        l0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>(r4, $i1, $z0);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordHistoryLength(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordHistoryLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMaximumLength(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.secure_lock_screen");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 16;
    }

    public int getPasswordMinimumLength(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        android.app.admin.PasswordMetrics r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordQuality(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordQuality(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        int i0, i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        android.app.admin.SystemUpdateInfo r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPendingSystemUpdate");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2, $r5;
        int i0;
        android.content.Context $r3;
        android.app.admin.IDevicePolicyManager $r4;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.ComponentName r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPermissionGrantState");

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        i0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>(r8, $r5, r1, r2);

     label2:
        return i0;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPermissionPolicy(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPermissionPolicy");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: int getPermissionPolicy(android.content.ComponentName)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedAccessibilityServices(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.util.List r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPermittedAccessibilityServices");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServicesForUser(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedAccessibilityServices(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.util.List r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPermittedAccessibilityServices");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.util.List r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPermittedCrossProfileNotificationListeners");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedInputMethods(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.util.List r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPermittedInputMethods");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedInputMethodsForCurrentUser()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.util.List r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPermittedInputMethodsForCurrentUser");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethodsForCurrentUser()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPersonalAppsSuspendedReasons(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        int i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getPersonalAppsSuspendedReasons");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        i0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int getPersonalAppsSuspendedReasons(android.content.ComponentName)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getProfileOwner() throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context $r1;
        int $i0;
        android.content.ComponentName $r2;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getProfileOwner");

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(int)>($i0);

        return $r2;
    }

    public android.content.ComponentName getProfileOwnerAsUser(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getProfileOwnerAsUser(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.UserHandle r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.os.UserHandle;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(int)>($i0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getProfileOwnerName() throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.admin.IDevicePolicyManager r4;
        java.lang.String r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r4 == null goto label4;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        r5 = interfaceinvoke r4.<android.app.admin.IDevicePolicyManager: java.lang.String getProfileOwnerName(int)>($i0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getProfileOwnerNameAsUser(int) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getProfileOwnerNameAsUser");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: java.lang.String getProfileOwnerName(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.UserHandle r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.os.UserHandle;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getProfileWithMinimumFailedPasswordsForWipe(int)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean $z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int i0, i1;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        i1 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)>(i0, $z0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return -10000;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback)
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteCallback r1;
        android.app.admin.IDevicePolicyManager r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.RemoteCallback;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>(r5, r1, $i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getRequiredStrongAuthTimeout(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        long $l1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $l1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int)>(r1, $i0);

        return $l1;
    }

    public long getRequiredStrongAuthTimeout(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        long l1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        l1 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        return l1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 259200000L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0, $z1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z1 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>(r4, i0, $z1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getSecondaryUsers(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.util.List r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getSecondaryUsers");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.util.List getSecondaryUsers(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getShortSupportMessage");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r5 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>(r4, i0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getStartUserSessionMessage");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getStorageEncryption(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getStorageEncryption");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName,int)>(r4, $i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getStorageEncryptionStatus()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getStorageEncryptionStatus");

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)>($i0);

        return $i1;
    }

    public int getStorageEncryptionStatus(int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int i0, i1;
        android.app.admin.IDevicePolicyManager r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r5 == null goto label4;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        i1 = interfaceinvoke r5.<android.app.admin.IDevicePolicyManager: int getStorageEncryptionStatus(java.lang.String,int)>($r2, i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;
        android.app.admin.SystemUpdatePolicy r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getSystemUpdatePolicy");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        r4 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.PersistableBundle getTransferOwnershipBundle()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.PersistableBundle r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getTransferOwnershipBundle");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r4 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: android.os.PersistableBundle getTransferOwnershipBundle()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r2;
        int $i0;
        java.util.List $r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $r3 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int)>(r1, r2, $i0);

        return $r3;
    }

    public java.util.List getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r6;
        int i0;
        android.app.admin.IDevicePolicyManager r2;
        java.util.ArrayList $r3;
        boolean $z0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.util.List r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        r7 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>(r6, r1, i0, $z0);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        return $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getUserControlDisabledPackages(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getUserControlDisabledPackages");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getUserProvisioningState()
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getUserProvisioningState");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        i0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: int getUserProvisioningState()>();

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getUserRestrictions(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.Bundle $r2, r6, r8;
        boolean $z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r6 = null;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName,boolean)>(r5, $z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        if r6 != null goto label5;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r8 = $r2;

        goto label6;

     label5:
        r8 = r6;

     label6:
        return r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getWifiMacAddress(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getWifiMacAddress");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean grantKeyPairToApp(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2, $r5;
        boolean z0;
        android.content.Context $r3;
        android.app.admin.IDevicePolicyManager $r4;
        android.os.RemoteException $r6;
        android.content.ComponentName r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("grantKeyPairToApp");

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>(r8, $r5, r1, r2, 1);

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasCaCertInstalled(android.content.ComponentName, byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        byte[] r1;
        android.app.admin.IDevicePolicyManager r2;
        android.content.Context $r3;
        java.lang.String $r4, $r6, r10;
        java.lang.Throwable $r5;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.content.ComponentName r9;
        boolean z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: byte[];

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("hasCaCertInstalled");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = 0;

        if r2 == null goto label6;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>(r9, $r4);

        r10 = staticinvoke <android.app.admin.DevicePolicyManager: java.lang.String getCaCertAlias(byte[])>(r1);

     label2:
        if r10 == null goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not parse certificate", $r5);

        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label6:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.security.cert.CertificateException from label1 to label2 with label4;
    }

    public boolean hasDeviceIdentifierAccess(java.lang.String, int, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, i1;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("hasDeviceIdentifierAccess");

        if r4 != null goto label1;

        return 0;

     label1:
        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label5;

     label2:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>(r4, i0, i1);

     label3:
        return z0;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label5:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, $i1;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("hasGrantedPolicy");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>(r4, i0, $i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("hasLockdownAdminConfiguredNetworks");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasUserSetupCompleted()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean hasUserSetupCompleted()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean installCaCert(android.content.ComponentName, byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        byte[] r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: byte[];

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("installCaCert");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>(r7, $r4, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean installExistingPackage(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.content.Context $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("installExistingPackage");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>(r7, $r4, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.security.PrivateKey r2;
        java.security.cert.Certificate r3;
        java.lang.String r4;
        java.security.cert.Certificate[] $r5;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.security.PrivateKey;

        r3 := @parameter2: java.security.cert.Certificate;

        r4 := @parameter3: java.lang.String;

        $r5 = newarray (java.security.cert.Certificate)[1];

        $r5[0] = r3;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,boolean)>(r1, r2, $r5, r4, 0);

        return $z0;
    }

    public boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate[], java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r5, $r10, $r17, $r19;
        int i0, $i1, $i2, $i3, $i4;
        byte[] r2, r25, r27;
        java.security.cert.Certificate[] $r3, $r12, r24;
        java.security.cert.Certificate $r4;
        java.security.spec.KeySpec $r6;
        java.security.spec.PKCS8EncodedKeySpec $r7;
        android.content.Context $r8;
        android.app.admin.IDevicePolicyManager $r9;
        java.lang.Object[] $r11;
        android.os.RemoteException $r13, $r15, r30;
        java.lang.RuntimeException $r14;
        java.lang.Throwable $r16, $r18, $r20, $r21, r28, r29;
        android.content.ComponentName r22;
        java.security.PrivateKey r23;
        boolean z0, z1, z2;
        java.security.KeyFactory r26;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r22 := @parameter0: android.content.ComponentName;

        r23 := @parameter1: java.security.PrivateKey;

        r24 := @parameter2: java.security.cert.Certificate[];

        r1 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("installKeyPair");

        $i1 = i0 & 1;

        if $i1 != 1 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        $i2 = i0 & 2;

        if $i2 != 2 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        $r3 = newarray (java.security.cert.Certificate)[1];

        $r4 = r24[0];

        $r3[0] = $r4;

        r2 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r3);

     label05:
        r25 = null;

     label06:
        $i3 = lengthof r24;

        if $i3 <= 1 goto label07;

        $i4 = lengthof r24;

        $r11 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r24, 1, $i4);

        $r12 = (java.security.cert.Certificate[]) $r11;

        r25 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r12);

     label07:
        $r5 = interfaceinvoke r23.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        r26 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r5);

     label08:
        $r6 = virtualinvoke r26.<java.security.KeyFactory: java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class)>(r23, class "Ljava/security/spec/PKCS8EncodedKeySpec;");

        $r7 = (java.security.spec.PKCS8EncodedKeySpec) $r6;

        r27 = virtualinvoke $r7.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

        $r9 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r8 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r8.<android.content.Context: java.lang.String getPackageName()>();

        z2 = interfaceinvoke $r9.<android.app.admin.IDevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>(r22, $r10, r27, r2, r25, r1, z0, z1);

     label09:
        return z2;

     label10:
        $r21 := @caughtexception;

        r28 = $r21;

        goto label14;

     label11:
        $r20 := @caughtexception;

        r29 = $r20;

        goto label16;

     label12:
        $r15 := @caughtexception;

        r30 = $r15;

        goto label19;

     label13:
        $r16 := @caughtexception;

        r28 = $r16;

     label14:
        $r17 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r17, "Could not pem-encode certificate", r28);

        goto label17;

     label15:
        $r18 := @caughtexception;

        r29 = $r18;

     label16:
        $r19 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r19, "Failed to obtain private key material", r29);

     label17:
        return 0;

     label18:
        $r13 := @caughtexception;

        r30 = $r13;

     label19:
        $r14 = virtualinvoke r30.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r14;

        catch android.os.RemoteException from label04 to label05 with label18;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label15;
        catch java.security.spec.InvalidKeySpecException from label04 to label05 with label15;
        catch java.security.cert.CertificateException from label04 to label05 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch android.os.RemoteException from label06 to label07 with label18;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label15;
        catch java.security.spec.InvalidKeySpecException from label06 to label07 with label15;
        catch java.security.cert.CertificateException from label06 to label07 with label13;
        catch java.io.IOException from label06 to label07 with label13;
        catch android.os.RemoteException from label07 to label08 with label18;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label15;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label15;
        catch java.security.cert.CertificateException from label07 to label08 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch android.os.RemoteException from label08 to label09 with label12;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label11;
        catch java.security.spec.InvalidKeySpecException from label08 to label09 with label11;
        catch java.security.cert.CertificateException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate[], java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.security.PrivateKey r2;
        java.security.cert.Certificate[] r3;
        java.lang.String r4;
        boolean z0, $z1;
        byte b0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.security.PrivateKey;

        r3 := @parameter2: java.security.cert.Certificate[];

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        b0 = 2;

        if z0 == 0 goto label1;

        b0 = 2 | 1;

     label1:
        $z1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,int)>(r1, r2, r3, r4, b0);

        return $z1;
    }

    public void installSystemUpdate(android.content.ComponentName, android.net.Uri, java.util.concurrent.Executor, android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.concurrent.Executor r1;
        android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback r2;
        android.app.admin.IDevicePolicyManager r3, $r5;
        android.app.admin.DevicePolicyManager$2 r4;
        android.content.Context $r6;
        android.content.ContentResolver $r7;
        java.lang.Throwable $r8, $r11, $r14, $r17;
        java.lang.String $r9, $r10, $r12, $r13;
        android.os.RemoteException $r15;
        java.lang.RuntimeException $r16;
        android.content.ComponentName r18;
        android.net.Uri r19;
        android.os.ParcelFileDescriptor r20;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r18 := @parameter0: android.content.ComponentName;

        r19 := @parameter1: android.net.Uri;

        r1 := @parameter2: java.util.concurrent.Executor;

        r2 := @parameter3: android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("installUpdate");

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r5 != null goto label01;

        return;

     label01:
        $r6 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r20 = virtualinvoke $r7.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>(r19, "r");

     label02:
        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r4 = new android.app.admin.DevicePolicyManager$2;

        specialinvoke r4.<android.app.admin.DevicePolicyManager$2: void <init>(android.app.admin.DevicePolicyManager,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)>(r0, r1, r2);

        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>(r18, r20, r4);

     label03:
        if r20 == null goto label14;

     label04:
        virtualinvoke r20.<android.os.ParcelFileDescriptor: void close()>();

     label05:
        goto label14;

     label06:
        $r14 := @caughtexception;

        if r20 == null goto label11;

     label07:
        virtualinvoke r20.<android.os.ParcelFileDescriptor: void close()>();

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

     label10:
        virtualinvoke $r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

     label11:
        throw $r14;

     label12:
        $r8 := @caughtexception;

        $r9 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>($r9, $r8);

        $r10 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r8);

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void executeCallback(int,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)>(1, $r10, r1, r2);

        goto label14;

     label13:
        $r11 := @caughtexception;

        $r12 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>($r12, $r11);

        $r13 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r11);

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void executeCallback(int,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)>(4, $r13, r1, r2);

     label14:
        return;

     label15:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r16;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch java.io.FileNotFoundException from label01 to label02 with label13;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch android.os.RemoteException from label04 to label05 with label15;
        catch java.io.FileNotFoundException from label04 to label05 with label13;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch android.os.RemoteException from label10 to label11 with label15;
        catch java.io.FileNotFoundException from label10 to label11 with label13;
        catch java.io.IOException from label10 to label11 with label12;
        catch android.os.RemoteException from label11 to label12 with label15;
        catch java.io.FileNotFoundException from label11 to label12 with label13;
        catch java.io.IOException from label11 to label12 with label12;
    }

    public boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName, java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        int i0;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>(r5, r1, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isActivePasswordSufficient()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0, $z1;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z1 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(int,boolean)>($i0, $z1);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAdminActive(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isAdminActive");

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean isAdminActiveAsUser(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean isAdminActiveAsUser(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAffiliatedUser()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isAffiliatedUser");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isAffiliatedUser()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAlwaysOnVpnLockdownEnabled()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isAlwaysOnVpnLockdownEnabled");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabledForUser(int)>($i0);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isAlwaysOnVpnLockdownEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isApplicationHidden(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0, $z1;
        android.content.Context $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $z1 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>(r7, $r4, r1, $z1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBackupServiceEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isBackupServiceEnabled");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean isBackupServiceEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCaCertApproved(java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isCaCertApproved(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCallerApplicationRestrictionsManagingPackage()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.admin.IDevicePolicyManager r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isCallerApplicationRestrictionsManagingPackage");

        r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r5 == null goto label4;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r5.<android.app.admin.IDevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCommonCriteriaModeEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isCommonCriteriaModeEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCurrentInputMethodSetByOwner()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isCurrentInputMethodSetByOwner()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceIdAttestationSupported()
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.device_id_attestation");

        return $z0;
    }

    public boolean isDeviceManaged()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean hasDeviceOwner()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceOwnerApp(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isDeviceOwnerApp");

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerAppOnCallingUser(java.lang.String)>(r1);

        return $z0;
    }

    public boolean isDeviceOwnerAppOnAnyUser(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerAppOnAnyUserInner(java.lang.String,boolean)>(r1, 0);

        return $z0;
    }

    public boolean isDeviceOwnerAppOnCallingUser(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerAppOnAnyUserInner(java.lang.String,boolean)>(r1, 1);

        return $z0;
    }

    public boolean isDeviceProvisioned()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isDeviceProvisioned()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceProvisioningConfigApplied()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isDeviceProvisioningConfigApplied()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isEphemeralUser(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isEphemeralUser");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean isEphemeralUser(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isFactoryResetProtectionPolicySupported()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isFactoryResetProtectionPolicySupported()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isInputMethodPermittedByAdmin(android.content.ComponentName, java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        int i0;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>(r5, r1, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isLockTaskPermitted(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isLockTaskPermitted");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isLogoutEnabled()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isLogoutEnabled");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isLogoutEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isManagedKiosk()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isManagedKiosk");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isManagedKiosk()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isManagedProfile(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isManagedProfile");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMasterVolumeMuted(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isMasterVolumeMuted");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName, java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        int i0;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("getMeteredDataDisabledForUser");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>(r5, r1, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNetworkLoggingEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.content.Context $r1;
        android.app.admin.IDevicePolicyManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isNetworkLoggingEnabled");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>(r6, $r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNotificationListenerServicePermitted(java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isNotificationListenerServicePermitted(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isOrganizationOwnedDeviceWithManagedProfile()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isOrganizationOwnedDeviceWithManagedProfile");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isOrganizationOwnedDeviceWithManagedProfile()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isOverrideApnEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isOverrideApnEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isOverrideApnEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPackageAllowedToAccessCalendar(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isPackageAllowedToAccessCalendar");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>(r4, $i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPackageSuspended(android.content.ComponentName, java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.content.Context $r3;
        java.lang.Throwable $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.content.ComponentName r9;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isPackageSuspended");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label5;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>(r9, $r4, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r6.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label5:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public boolean isPasswordSufficientAfterProfileUnification(int, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, i1;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isPasswordSufficientAfterProfileUnification(int,int)>(i0, i1);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isProfileActivePasswordSufficientForParent(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isProfileActivePasswordSufficientForParent(int)>(i0);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isProfileOwnerApp(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0, z1;
        int $i0;
        java.lang.String $r1, r4;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.admin.IDevicePolicyManager r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isProfileOwnerApp");

        r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z1 = 0;

        if r5 == null goto label7;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        r6 = interfaceinvoke r5.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>($i0);

     label2:
        if r6 == null goto label5;

     label3:
        $r1 = virtualinvoke r6.<android.content.ComponentName: java.lang.String getPackageName()>();

        z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

     label4:
        if z0 == 0 goto label5;

        z1 = 1;

        goto label5;

     label5:
        return z1;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isProvisioningAllowed(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.content.Context $r1;
        android.app.admin.IDevicePolicyManager $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isProvisioningAllowed");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean isProvisioningAllowed(java.lang.String,java.lang.String)>(r6, $r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isRemovingAdmin(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isRemovingAdmin(android.content.ComponentName,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isResetPasswordTokenActive(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isResetPasswordTokenActive");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSecondaryLockscreenEnabled(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.UserHandle r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.os.UserHandle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isSecondaryLockscreenEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSecurityLoggingEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isSecurityLoggingEnabled");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean isSecurityLoggingEnabled(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSeparateProfileChallengeAllowed(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isSeparateProfileChallengeAllowed(int)>(i0);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSystemOnlyUser(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean isSystemOnlyUser(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUnattendedManagedKiosk()
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isUnattendedManagedKiosk");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean isUnattendedManagedKiosk()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUninstallBlocked(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isUninstallBlocked");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUninstallInQueue(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean isUninstallInQueue(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUniqueDeviceAttestationSupported()
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.device_unique_attestation");

        return $z0;
    }

    public boolean isUsingUnifiedPassword(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("isUsingUnifiedPassword");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean isUsingUnifiedPassword(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lockNow()
    {
        android.app.admin.DevicePolicyManager r0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        virtualinvoke r0.<android.app.admin.DevicePolicyManager: void lockNow(int)>(0);

        return;
    }

    public void lockNow(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        boolean $z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void lockNow(int,boolean)>(i0, $z0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int logoutUser(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("logoutUser");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i0 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: int logoutUser(android.content.ComponentName)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName,int)>(r4, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected int myUserId()
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context $r1;
        int $i0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        return $i0;
    }

    public void notifyPendingSystemUpdate(long)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.SystemUpdateInfo $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.admin.IDevicePolicyManager r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        l0 := @parameter0: long;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("notifyPendingSystemUpdate");

        r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r4 == null goto label4;

     label1:
        $r1 = staticinvoke <android.app.admin.SystemUpdateInfo: android.app.admin.SystemUpdateInfo of(long)>(l0);

        interfaceinvoke r4.<android.app.admin.IDevicePolicyManager: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyPendingSystemUpdate(long, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        boolean z0;
        android.app.admin.SystemUpdateInfo $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.admin.IDevicePolicyManager r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("notifyPendingSystemUpdate");

        r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r4 == null goto label4;

     label1:
        $r1 = staticinvoke <android.app.admin.SystemUpdateInfo: android.app.admin.SystemUpdateInfo of(long,boolean)>(l0, z0);

        interfaceinvoke r4.<android.app.admin.IDevicePolicyManager: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean packageHasActiveAdmins(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>(r1, $i0);

        return $z0;
    }

    public boolean packageHasActiveAdmins(java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reboot(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("reboot");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void reboot(android.content.ComponentName)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeActiveAdmin(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("removeActiveAdmin");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)>(r4, $i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("removeCrossProfileWidgetProvider");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeKeyPair(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        boolean z0;
        android.content.Context $r2;
        android.app.admin.IDevicePolicyManager $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("removeKeyPair");

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>(r7, $r4, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeOverrideApn(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("removeOverrideApn");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean removeOverrideApn(android.content.ComponentName,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeUser(android.content.ComponentName, android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.UserHandle r1;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("removeUser");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportFailedBiometricAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void reportFailedBiometricAttempt(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportFailedPasswordAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void reportFailedPasswordAttempt(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportKeyguardDismissed(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void reportKeyguardDismissed(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportKeyguardSecured(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void reportKeyguardSecured(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportPasswordChanged(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void reportPasswordChanged(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportSuccessfulBiometricAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void reportSuccessfulBiometricAttempt(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportSuccessfulPasswordAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestBugreport(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("requestBugreport");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean requestBugreport(android.content.ComponentName)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean resetPassword(java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("resetPassword");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean resetPassword(java.lang.String,int)>(r4, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean resetPasswordWithToken(android.content.ComponentName, java.lang.String, byte[], int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        byte[] r2;
        int i0;
        android.app.admin.IDevicePolicyManager r3;
        boolean z0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("resetPassword");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        z0 = interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>(r6, r1, r2, i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List retrieveNetworkLogs(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.content.Context $r1;
        android.app.admin.IDevicePolicyManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;
        java.util.List r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("retrieveNetworkLogs");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        r7 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>(r6, $r3, l0);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List retrievePreRebootSecurityLogs(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        android.content.pm.ParceledListSlice r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("retrievePreRebootSecurityLogs");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)>(r4);

     label2:
        if r5 == null goto label5;

     label3:
        r6 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label4:
        return r6;

     label5:
        return null;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.List retrieveSecurityLogs(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        android.content.pm.ParceledListSlice r5;
        java.util.List r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("retrieveSecurityLogs");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)>(r4);

     label2:
        if r5 == null goto label5;

     label3:
        r6 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label4:
        return r6;

     label5:
        return null;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean revokeKeyPairFromApp(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2, $r5;
        boolean z0;
        android.content.Context $r3;
        android.app.admin.IDevicePolicyManager $r4;
        android.os.RemoteException $r6;
        android.content.ComponentName r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("revokeKeyPairFromApp");

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>(r8, $r5, r1, r2, 0);

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean z0, $z1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $z1 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>(r5, r1, z0, $z1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        int $i0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        virtualinvoke r0.<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r1, z0, $i0);

        return;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean, int)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r4, z0, i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setActiveProfileOwner(android.content.ComponentName, java.lang.String) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2, $r3, $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setActiveProfileOwner");

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        i0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int myUserId()>();

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r7, 0, i0);

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r7, r1, i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAffiliationIds(android.content.ComponentName, java.util.Set)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.Set r1;
        android.app.admin.IDevicePolicyManager r2;
        java.util.ArrayList r3;
        java.lang.IllegalArgumentException $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.Set;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setAffiliationIds");

        if r1 == null goto label4;

     label1:
        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setAffiliationIds(android.content.ComponentName,java.util.List)>(r7, r3);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ids must not be null");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0;
        java.util.Set $r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        virtualinvoke r0.<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.Set)>(r1, r2, z0, $r3);

        return;
    }

    public void setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean, java.util.Set) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.ArrayList $r2, r16;
        android.os.ServiceSpecificException $r3;
        int $i0, $i1;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.String $r5, $r10, r14;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r9, $r12;
        android.os.RemoteException $r11;
        android.content.ComponentName r13;
        java.util.Set r15;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r13 := @parameter0: android.content.ComponentName;

        r14 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r15 := @parameter3: java.util.Set;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setAlwaysOnVpnPackage");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label7;

        if r15 != null goto label1;

        r16 = null;

        goto label2;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r15);

        r16 = $r2;

     label2:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>(r13, r14, z0, r16);

     label3:
        goto label7;

     label4:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label5:
        $r3 := @caughtexception;

        $i0 = $r3.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 == 1 goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown error setting always-on VPN: ");

        $i1 = $r3.<android.os.ServiceSpecificException: int errorCode>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r3);

        throw $r9;

     label6:
        $r4 = new android.content.pm.PackageManager$NameNotFoundException;

        $r5 = virtualinvoke $r3.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label7:
        return;

        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label2 to label3 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean setApplicationHidden(android.content.ComponentName, java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        android.app.admin.IDevicePolicyManager r2;
        android.content.Context $r3;
        boolean $z0, z1, z2;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        z2 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>(r7, $r4, r1, z1, $z0);

     label2:
        return z2;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r5;
        android.os.Bundle r2;
        android.app.admin.IDevicePolicyManager r3;
        android.content.Context $r4;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.ComponentName r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r8 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setApplicationRestrictions");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>(r8, $r5, r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setApplicationRestrictionsManagingPackage(android.content.ComponentName, java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean $z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;
        android.content.pm.PackageManager$NameNotFoundException r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setApplicationRestrictionsManagingPackage");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label5;

     label1:
        $z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>(r5, r1);

        if $z0 == 0 goto label3;

     label2:
        goto label5;

     label3:
        r6 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke r6.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r1);

        throw r6;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public void setAutoTimeEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setAutoTimeEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAutoTimeRequired(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setAutoTimeRequired");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setAutoTimeRequired(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAutoTimeZoneEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setAutoTimeZone");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setAutoTimeZoneEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBackupServiceEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setBackupServiceEnabled");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void setBackupServiceEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBluetoothContactSharingDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setBluetoothContactSharingDisabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCameraDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0, $z1;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z1 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean,boolean)>(r4, z0, $z1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCertInstallerPackage(android.content.ComponentName, java.lang.String) throws java.lang.SecurityException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setCertInstallerPackage");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCommonCriteriaModeEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setCommonCriteriaModeEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setConfiguredNetworksLockdownState(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setConfiguredNetworksLockdownState");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCrossProfileCalendarPackages(android.content.ComponentName, java.util.Set)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.util.ArrayList $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;
        java.util.Set r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r6 := @parameter1: java.util.Set;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setCrossProfileCalendarPackages");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label5;

        if r6 != null goto label1;

        r7 = null;

        goto label2;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r6);

        r7 = $r2;

     label2:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>(r5, r7);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setCrossProfileCallerIdDisabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCrossProfileContactsSearchDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setCrossProfileContactsSearchDisabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCrossProfilePackages(android.content.ComponentName, java.util.Set)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.Set r1;
        android.app.admin.IDevicePolicyManager r2;
        java.util.ArrayList r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.Set;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setCrossProfilePackages");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>(r6, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDefaultSmsApplication(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean $z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String,boolean)>(r5, r1, $z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDelegatedScopes(android.content.ComponentName, java.lang.String, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        java.util.List r2;
        android.app.admin.IDevicePolicyManager r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setDelegatedScopes");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>(r6, r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setDeviceOwner(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String)>(r1, null);

        return $z0;
    }

    public boolean setDeviceOwner(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>(r1, null, i0);

        return $z0;
    }

    public boolean setDeviceOwner(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>(r1, r2, 0);

        return $z0;
    }

    public boolean setDeviceOwner(android.content.ComponentName, java.lang.String, int) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        int i0;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>(r5, r1, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDeviceOwnerLockScreenInfo(android.content.ComponentName, java.lang.CharSequence)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.CharSequence r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setDeviceOwnerLockScreenInfo");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDeviceProvisioningConfigApplied()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setDeviceProvisioningConfigApplied()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setEndUserSessionMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.CharSequence r1;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setEndUserSessionMessage");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setFactoryResetProtectionPolicy(android.content.ComponentName, android.app.admin.FactoryResetProtectionPolicy)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.FactoryResetProtectionPolicy r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.app.admin.FactoryResetProtectionPolicy;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setFactoryResetProtectionPolicy");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setForceEphemeralUsers(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setForceEphemeralUsers");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setForceEphemeralUsers(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setGlobalPrivateDnsModeOpportunistic(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        int i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setGlobalPrivateDnsModeOpportunistic");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 != null goto label1;

        return 2;

     label1:
        i0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int setGlobalPrivateDns(android.content.ComponentName,int,java.lang.String)>(r4, 2, null);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setGlobalPrivateDnsModeSpecifiedHost(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        int i0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0, $z1;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setGlobalPrivateDnsModeSpecifiedHost");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "dns resolver is null");

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 != null goto label1;

        return 2;

     label1:
        $z0 = staticinvoke <android.net.NetworkUtils: boolean isWeaklyValidatedHostname(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <android.net.PrivateDnsConnectivityChecker: boolean canConnectToPrivateDnsServer(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        return 1;

     label2:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int setGlobalPrivateDns(android.content.ComponentName,int,java.lang.String)>(r7, 3, r1);

     label3:
        return i0;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.net.Proxy, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2, r3, $r11, $r13, $r17, r25, r26;
        int i0, $i1;
        android.app.admin.IDevicePolicyManager $r4, $r14;
        java.net.Proxy $r5, r23;
        boolean $z0, $z1, $z2, z3;
        java.net.Proxy$Type $r6, $r7;
        java.net.SocketAddress $r8;
        android.content.ComponentName $r15, r22;
        java.lang.Object $r16;
        android.os.RemoteException $r20;
        java.lang.RuntimeException $r21;
        java.util.List r24;
        java.net.InetSocketAddress r27;
        java.lang.StringBuilder r28, r29;
        java.util.Iterator r30;
        java.lang.IllegalArgumentException r31, r32;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r22 := @parameter0: android.content.ComponentName;

        r23 := @parameter1: java.net.Proxy;

        r24 := @parameter2: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setGlobalProxy");

        if r23 == null goto label23;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label22;

     label01:
        $r5 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

        $z0 = virtualinvoke r23.<java.net.Proxy: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

     label02:
        r25 = null;

        r26 = null;

        goto label18;

     label03:
        $r6 = virtualinvoke r23.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r7 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        $z1 = virtualinvoke $r6.<java.net.Proxy$Type: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label20;

        $r8 = virtualinvoke r23.<java.net.Proxy: java.net.SocketAddress address()>();

        r27 = (java.net.InetSocketAddress) $r8;

        r1 = virtualinvoke r27.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        i0 = virtualinvoke r27.<java.net.InetSocketAddress: int getPort()>();

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r2 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        if r24 != null goto label05;

        r26 = "";

        goto label16;

     label05:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

     label06:
        z3 = 1;

     label07:
        r30 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r16 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r16;

     label09:
        if z3 != 0 goto label12;

     label10:
        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label11:
        goto label13;

     label12:
        z3 = 0;

     label13:
        $r17 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

     label14:
        goto label08;

     label15:
        r26 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label16:
        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $i1 = staticinvoke <android.net.Proxy: int validate(java.lang.String,java.lang.String,java.lang.String)>(r1, $r13, r26);

        if $i1 != 0 goto label19;

     label17:
        r25 = r2;

     label18:
        $r14 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r15 = interfaceinvoke $r14.<android.app.admin.IDevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)>(r22, r25, r26);

        return $r15;

     label19:
        r31 = new java.lang.IllegalArgumentException;

        specialinvoke r31.<java.lang.IllegalArgumentException: void <init>()>();

        throw r31;

     label20:
        r32 = new java.lang.IllegalArgumentException;

        specialinvoke r32.<java.lang.IllegalArgumentException: void <init>()>();

        throw r32;

     label21:
        $r20 := @caughtexception;

        $r21 = virtualinvoke $r20.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r21;

     label22:
        return null;

     label23:
        throw null;

        catch android.os.RemoteException from label01 to label02 with label21;
        catch android.os.RemoteException from label03 to label04 with label21;
        catch android.os.RemoteException from label05 to label06 with label21;
        catch android.os.RemoteException from label07 to label08 with label21;
        catch android.os.RemoteException from label08 to label09 with label21;
        catch android.os.RemoteException from label10 to label11 with label21;
        catch android.os.RemoteException from label13 to label14 with label21;
        catch android.os.RemoteException from label15 to label16 with label21;
        catch android.os.RemoteException from label16 to label17 with label21;
        catch android.os.RemoteException from label18 to label19 with label21;
        catch android.os.RemoteException from label19 to label20 with label21;
        catch android.os.RemoteException from label20 to label21 with label21;
    }

    public void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2;
        android.app.admin.IDevicePolicyManager r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setGlobalSetting");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>(r6, r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setKeepUninstalledPackages(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.List r1;
        android.app.admin.IDevicePolicyManager r2;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setKeepUninstalledPackages");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>(r7, $r4, r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setKeyPairCertificate(android.content.ComponentName, java.lang.String, java.util.List, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r9, $r15;
        java.util.List r2, $r10;
        byte[] r3, r19;
        java.security.cert.Certificate[] $r4, $r11, $r13;
        java.lang.Object $r5;
        java.security.cert.Certificate $r6;
        int $i0, $i1;
        android.content.Context $r7;
        android.app.admin.IDevicePolicyManager $r8;
        java.lang.Object[] $r12;
        java.lang.Throwable $r14;
        android.os.RemoteException $r16;
        java.lang.RuntimeException $r17;
        android.content.ComponentName r18;
        boolean z0, z1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r18 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setKeyPairCertificate");

     label1:
        $r4 = newarray (java.security.cert.Certificate)[1];

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.security.cert.Certificate) $r5;

        $r4[0] = $r6;

        r3 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r4);

     label2:
        r19 = null;

     label3:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 <= 1 goto label5;

     label4:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r10 = interfaceinvoke r2.<java.util.List: java.util.List subList(int,int)>(1, $i1);

        $r11 = newarray (java.security.cert.Certificate)[0];

        $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (java.security.cert.Certificate[]) $r12;

        r19 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r13);

     label5:
        $r8 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r7 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        z1 = interfaceinvoke $r8.<android.app.admin.IDevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>(r18, $r9, r1, r3, r19, z0);

     label6:
        return z1;

     label7:
        $r14 := @caughtexception;

        $r15 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, "Could not pem-encode certificate", $r14);

        return 0;

     label8:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r17;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.security.cert.CertificateException from label1 to label2 with label7;
        catch java.io.IOException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch java.security.cert.CertificateException from label3 to label4 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch java.security.cert.CertificateException from label4 to label5 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch java.security.cert.CertificateException from label5 to label6 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public boolean setKeyguardDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        boolean z0, z1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setKeyguardDisabled");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z1 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return z1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLocationEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setLocationEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setLocationEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLockTaskFeatures(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setLockTaskFeatures");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setLockTaskFeatures(android.content.ComponentName,int)>(r4, i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLockTaskPackages(android.content.ComponentName, java.lang.String[]) throws java.lang.SecurityException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String[] r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String[];

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setLockTaskPackages");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLogoutEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setLogoutEnabled");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void setLogoutEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLongSupportMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.CharSequence r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setLongSupportMessage");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setManagedProfileMaximumTimeOff(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setManagedProfileMaximumTimeOff");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)>(r4, l0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMasterVolumeMuted(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setMasterVolumeMuted");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setMasterVolumeMuted(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMaximumTimeToLock(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)>(r4, l0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List setMeteredDataDisabledPackages(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.List r1, r6;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setMeteredDataDisabled");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        r6 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>(r5, r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNetworkLoggingEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.content.Context $r1;
        android.app.admin.IDevicePolicyManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setNetworkLoggingEnabled");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>(r6, $r3, z0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setOrganizationColor(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, $i1;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setOrganizationColor");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = i0 | -16777216;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void setOrganizationColor(android.content.ComponentName,int)>(r4, $i1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setOrganizationColorForUser(int, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, i1, $i2;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i2 = i0 | -16777216;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setOrganizationColorForUser(int,int)>($i2, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setOrganizationName(android.content.ComponentName, java.lang.CharSequence)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.CharSequence r1;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setOrganizationName");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setOverrideApnsEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setOverrideApnEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] setPackagesSuspended(android.content.ComponentName, java.lang.String[], boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String[] r1, r8;
        boolean z0;
        android.app.admin.IDevicePolicyManager r2;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setPackagesSuspended");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        r8 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>(r7, $r4, r1, z0);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)>(r4, l0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordHistoryLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLetters(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordQuality(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int,boolean)>(r4, i0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2, r5;
        int i0;
        android.app.admin.IDevicePolicyManager r4;
        boolean z0;
        android.content.Context $r8;
        android.os.Handler $r9;
        android.app.admin.'-$$Lambda$pWaRScwKTZTgGW4Wa_v5R_pKBDU' $r10;
        java.lang.Boolean $r11, $r14;
        android.os.Message $r12;
        java.lang.Object $r13;
        android.os.RemoteException $r15;
        java.lang.RuntimeException $r16, r25;
        java.lang.Throwable $r17;
        android.content.ComponentName r19;
        java.util.concurrent.CompletableFuture r22;
        android.app.admin._$$Lambda$DevicePolicyManager$w2TynM9H41ejac4JVpNbnemNVWk r23;
        android.os.RemoteCallback r24;
        java.util.function.BiConsumer r26;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r19 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setPermissionGrantState");

     label1:
        r22 = new java.util.concurrent.CompletableFuture;

        specialinvoke r22.<java.util.concurrent.CompletableFuture: void <init>()>();

        r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r8 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        r5 = virtualinvoke $r8.<android.content.Context: java.lang.String getPackageName()>();

        r24 = new android.os.RemoteCallback;

        r23 = new android.app.admin._$$Lambda$DevicePolicyManager$w2TynM9H41ejac4JVpNbnemNVWk;

        specialinvoke r23.<android.app.admin._$$Lambda$DevicePolicyManager$w2TynM9H41ejac4JVpNbnemNVWk: void <init>(java.util.concurrent.CompletableFuture)>(r22);

        specialinvoke r24.<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener)>(r23);

        interfaceinvoke r4.<android.app.admin.IDevicePolicyManager: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>(r19, r5, r1, r2, i0, r24);

        $r9 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r10 = <android.app.admin._$$Lambda$pWaRScwKTZTgGW4Wa_v5R_pKBDU: android.app.admin.'-$$Lambda$pWaRScwKTZTgGW4Wa_v5R_pKBDU' INSTANCE>;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r26 = (java.util.function.BiConsumer) $r10;

        $r12 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r26, r22, $r11);

        virtualinvoke $r9.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r12, 20000L);

        $r13 = virtualinvoke r22.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        $r14 = (java.lang.Boolean) $r13;

        z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return z0;

     label3:
        $r17 := @caughtexception;

        r25 = new java.lang.RuntimeException;

        specialinvoke r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17);

        throw r25;

     label4:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r16;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public void setPermissionPolicy(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.content.Context $r1;
        android.app.admin.IDevicePolicyManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setPermissionPolicy");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>(r6, $r3, i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.List r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setPermittedAccessibilityServices");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.List r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setPermittedCrossProfileNotificationListeners");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setPermittedInputMethods(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.List r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setPermittedInputMethods");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPersonalAppsSuspended(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setPersonalAppsSuspended");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setPersonalAppsSuspended(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProfileEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setProfileEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setProfileEnabled(android.content.ComponentName)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProfileName(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setProfileName");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setProfileName(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setProfileOwner(android.content.ComponentName, java.lang.String, int) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r7;
        int i0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

        r7 = r1;

        if r1 != null goto label1;

        r7 = "";

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r6, r7, i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProfileOwnerCanAccessDeviceIds(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 > 29 goto label1;

        virtualinvoke r0.<android.app.admin.DevicePolicyManager: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)>(r1);

        return;

     label1:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method is deprecated. use markProfileOwnerOnOrganizationOwnedDevice instead.");

        throw $r4;
    }

    public void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo)
    {
        android.app.admin.DevicePolicyManager r0;
        android.net.ProxyInfo r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.net.ProxyInfo;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setRecommendedGlobalProxy");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRequiredStrongAuthTimeout(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)>(r4, l0, $z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setResetPasswordToken(android.content.ComponentName, byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        byte[] r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: byte[];

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setResetPasswordToken");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setResetPasswordToken(android.content.ComponentName,byte[])>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r5;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setRestrictionsProvider");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setScreenCaptureDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0, $z1;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $z1 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,boolean,boolean)>(r4, z0, $z1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSecondaryLockscreenEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setSecondaryLockscreenEnabled");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2;
        android.app.admin.IDevicePolicyManager r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setSecureSetting");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>(r6, r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSecurityLoggingEnabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setSecurityLoggingEnabled");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setShortSupportMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.CharSequence r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setShortSupportMessage");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStartUserSessionMessage(android.content.ComponentName, java.lang.CharSequence)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.CharSequence r1;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setStartUserSessionMessage");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setStatusBarDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;
        boolean z0, z1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setStatusBarDisabled");

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z1 = interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return z1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setStorageEncryption(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        boolean z0;
        android.app.admin.IDevicePolicyManager r1;
        int i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setStorageEncryption");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        i0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>(r4, z0);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSystemSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2;
        android.app.admin.IDevicePolicyManager r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.ComponentName r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setSystemSetting");

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>(r6, r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSystemUpdatePolicy(android.content.ComponentName, android.app.admin.SystemUpdatePolicy)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.SystemUpdatePolicy r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.app.admin.SystemUpdatePolicy;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setSystemUpdatePolicy");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setTime(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setTime");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean setTime(android.content.ComponentName,long)>(r4, l0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setTimeZone(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setTimeZone");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean setTimeZone(android.content.ComponentName,java.lang.String)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r6;
        android.os.PersistableBundle r2;
        android.app.admin.IDevicePolicyManager r3;
        boolean $z0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        r2 := @parameter2: android.os.PersistableBundle;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        $z0 = r0.<android.app.admin.DevicePolicyManager: boolean mParentInstance>;

        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>(r6, r1, r2, $z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUninstallBlocked(android.content.ComponentName, java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r4;
        boolean z0;
        android.app.admin.IDevicePolicyManager r2;
        android.content.Context $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.ComponentName r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r7 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setUninstallBlocked");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>(r7, $r4, r1, z0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserControlDisabledPackages(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        java.util.List r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setUserControlDisabledPackages");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserIcon(android.content.ComponentName, android.graphics.Bitmap)
    {
        android.app.admin.DevicePolicyManager r0;
        android.graphics.Bitmap r1;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.graphics.Bitmap;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("setUserIcon");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUserProvisioningState(int, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, i1;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.admin.IDevicePolicyManager r3;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.app.admin.IDevicePolicyManager: void setUserProvisioningState(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startManagedQuickContact(java.lang.String, long, android.content.Intent)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        long l0;
        android.content.Intent r2;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 := @parameter2: android.content.Intent;

        virtualinvoke r0.<android.app.admin.DevicePolicyManager: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>(r1, l0, 0, 0L, r2);

        return;
    }

    public void startManagedQuickContact(java.lang.String, long, boolean, long, android.content.Intent)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0, l1;
        boolean z0;
        android.content.Intent r1;
        android.app.admin.IDevicePolicyManager r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        l1 := @parameter3: long;

        r1 := @parameter4: android.content.Intent;

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>(r5, l0, z0, l1, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int startUserInBackground(android.content.ComponentName, android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.UserHandle r1;
        int i0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("startUserInBackground");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>(r5, r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean startViewCalendarEventInManagedProfile(long, long, long, boolean, int)
    {
        android.app.admin.DevicePolicyManager r0;
        long l0, l1, l2;
        int i3;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        boolean z0, z1;
        android.app.admin.IDevicePolicyManager r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        z0 := @parameter3: boolean;

        i3 := @parameter4: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("startViewCalendarEventInManagedProfile");

        r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r5 == null goto label4;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        z1 = interfaceinvoke r5.<android.app.admin.IDevicePolicyManager: boolean startViewCalendarEventInManagedProfile(java.lang.String,long,long,long,boolean,int)>($r2, l0, l1, l2, z0, i3);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int stopUser(android.content.ComponentName, android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.UserHandle r1;
        int i0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("stopUser");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        i0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: int stopUser(android.content.ComponentName,android.os.UserHandle)>(r5, r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean switchUser(android.content.ComponentName, android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.UserHandle r1;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("switchUser");

     label1:
        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void transferOwnership(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r6;
        android.os.PersistableBundle r2;
        android.app.admin.IDevicePolicyManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r6 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.ComponentName;

        r2 := @parameter2: android.os.PersistableBundle;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("transferOwnership");

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>(r6, r1, r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void uninstallAllUserCaCerts(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager r1;
        java.lang.String r2;
        com.android.org.conscrypt.TrustedCertificateStore r3;
        android.content.Context $r4;
        java.util.Set $r5;
        java.lang.String[] $r6, $r8;
        java.lang.Object[] $r7;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.content.ComponentName r11;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r11 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("uninstallAllUserCaCerts");

        r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r1 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        r3 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke r3.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        $r5 = virtualinvoke r3.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set userAliases()>();

        $r6 = newarray (java.lang.String)[0];

        $r7 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>(r11, r2, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void uninstallCaCert(android.content.ComponentName, byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1, $r3;
        android.content.Context $r2;
        java.lang.String $r4, $r7, r12;
        java.lang.String[] $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.ComponentName r10;
        byte[] r11;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r10 := @parameter0: android.content.ComponentName;

        r11 := @parameter1: byte[];

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("uninstallCaCert");

        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r1 == null goto label5;

     label1:
        r12 = staticinvoke <android.app.admin.DevicePolicyManager: java.lang.String getCaCertAlias(byte[])>(r11);

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r12;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>(r10, $r4, $r5);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Unable to parse certificate", $r6);

     label5:
        return;

        catch java.security.cert.CertificateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void uninstallPackageWithActiveAdmins(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void uninstallPackageWithActiveAdmins(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean updateOverrideApn(android.content.ComponentName, int, android.telephony.data.ApnSetting)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.telephony.data.ApnSetting r1;
        android.app.admin.IDevicePolicyManager r2;
        boolean z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.ComponentName r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r5 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 := @parameter2: android.telephony.data.ApnSetting;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void throwIfParentInstance(java.lang.String)>("updateOverrideApn");

        r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.admin.IDevicePolicyManager: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>(r5, i0, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void wipeData(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void wipeDataInternal(int,java.lang.String)>(i0, "");

        return;
    }

    public void wipeData(int, java.lang.CharSequence)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, $i1;
        java.lang.CharSequence r1;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "reason string is null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "reason string is empty");

        $i1 = i0 & 8;

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "WIPE_SILENTLY cannot be set");

        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        specialinvoke r0.<android.app.admin.DevicePolicyManager: void wipeDataInternal(int,java.lang.String)>(i0, $r4);

        return;
    }
}
