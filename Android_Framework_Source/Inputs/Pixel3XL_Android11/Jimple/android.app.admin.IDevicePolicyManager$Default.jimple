public class android.app.admin.IDevicePolicyManager$Default extends java.lang.Object implements android.app.admin.IDevicePolicyManager
{

    public void <init>()
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.content.IntentFilter r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.IntentFilter;

        i0 := @parameter2: int;

        return;
    }

    public boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public int addOverrideApn(android.content.ComponentName, android.telephony.data.ApnSetting) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.telephony.data.ApnSetting r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.telephony.data.ApnSetting;

        return 0;
    }

    public void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1, r3;
        android.content.IntentFilter r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: android.content.ComponentName;

        return;
    }

    public boolean approveCaCert(java.lang.String, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public android.os.IBinder asBinder()
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public boolean bindDeviceAdminServiceAsUser(android.content.ComponentName, android.app.IApplicationThread, android.os.IBinder, android.content.Intent, android.app.IServiceConnection, int, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.app.IApplicationThread r2;
        android.os.IBinder r3;
        android.content.Intent r4;
        android.app.IServiceConnection r5;
        int i0, i1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.app.IApplicationThread;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.content.Intent;

        r5 := @parameter4: android.app.IServiceConnection;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        return 0;
    }

    public boolean canProfileOwnerResetPasswordWhenLocked(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean checkDeviceIdentifierAccess(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return 0;
    }

    public int checkProvisioningPreCondition(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public void choosePrivateKeyAlias(int, android.net.Uri, java.lang.String, android.os.IBinder) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.IBinder r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.IBinder;

        return;
    }

    public void clearApplicationUserData(android.content.ComponentName, java.lang.String, android.content.pm.IPackageDataObserver) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.content.pm.IPackageDataObserver r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.pm.IPackageDataObserver;

        return;
    }

    public void clearCrossProfileIntentFilters(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }

    public void clearDeviceOwner(java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void clearProfileOwner(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }

    public boolean clearResetPasswordToken(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public void clearSystemUpdatePolicyFreezePeriodRecord() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return;
    }

    public android.content.Intent createAdminSupportIntent(java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1, r3;
        java.lang.String r2;
        android.os.PersistableBundle r4;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ComponentName;

        r4 := @parameter3: android.os.PersistableBundle;

        i0 := @parameter4: int;

        return null;
    }

    public void enableSystemApp(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public int enableSystemAppWithIntent(android.content.ComponentName, java.lang.String, android.content.Intent) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.content.Intent r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Intent;

        return 0;
    }

    public void enforceCanManageCaCerts(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public long forceNetworkLogs() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0L;
    }

    public void forceRemoveActiveAdmin(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return;
    }

    public long forceSecurityLogs() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0L;
    }

    public void forceUpdateUserSetupComplete() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return;
    }

    public boolean generateKeyPair(android.content.ComponentName, java.lang.String, java.lang.String, android.security.keystore.ParcelableKeyGenParameterSpec, int, android.security.keymaster.KeymasterCertificateChain) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        android.security.keystore.ParcelableKeyGenParameterSpec r4;
        int i0;
        android.security.keymaster.KeymasterCertificateChain r5;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.security.keystore.ParcelableKeyGenParameterSpec;

        i0 := @parameter4: int;

        r5 := @parameter5: android.security.keymaster.KeymasterCertificateChain;

        return 0;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabled() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return null;
    }

    public java.util.List getActiveAdmins(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.util.List getAffiliationIds(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.util.List getAllCrossProfilePackages() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.lang.String getAlwaysOnVpnPackageForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return null;
    }

    public java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public boolean getAutoTimeEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean getAutoTimeRequired() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean getAutoTimeZoneEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public boolean getBluetoothContactSharingDisabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean getBluetoothContactSharingDisabledForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean getCameraDisabled(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public java.lang.String getCertInstallerPackage(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.util.List getCrossProfileCalendarPackages(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.util.List getCrossProfileCalendarPackagesForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean getCrossProfileCallerIdDisabledForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean getCrossProfileContactsSearchDisabledForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public java.util.List getCrossProfilePackages(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.util.List getCrossProfileWidgetProviders(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public int getCurrentFailedPasswordAttempts(int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return 0;
    }

    public java.util.List getDefaultCrossProfilePackages() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public java.util.List getDelegatePackages(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public java.util.List getDelegatedScopes(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public android.content.ComponentName getDeviceOwnerComponent(boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        z0 := @parameter0: boolean;

        return null;
    }

    public java.lang.CharSequence getDeviceOwnerLockScreenInfo() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public java.lang.String getDeviceOwnerName() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public java.lang.CharSequence getDeviceOwnerOrganizationName() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public int getDeviceOwnerUserId() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public java.util.List getDisallowedSystemApps(android.content.ComponentName, int, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        return null;
    }

    public boolean getDoNotAskCredentialsOnBoot() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public boolean getForceEphemeralUsers(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public int getGlobalPrivateDnsMode(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public android.content.ComponentName getGlobalProxyAdmin(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.util.List getKeepUninstalledPackages(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public long getLastBugReportRequestTime() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0L;
    }

    public long getLastNetworkLogRetrievalTime() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0L;
    }

    public long getLastSecurityLogRetrievalTime() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0L;
    }

    public int getLockTaskFeatures(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public java.lang.String[] getLockTaskPackages(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.lang.CharSequence getLongSupportMessage(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return null;
    }

    public long getManagedProfileMaximumTimeOff(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0L;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public long getMaximumTimeToLock(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0L;
    }

    public java.util.List getMeteredDataDisabledPackages(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public int getOrganizationColor(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public int getOrganizationColorForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public java.lang.CharSequence getOrganizationName(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.lang.CharSequence getOrganizationNameForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.util.List getOverrideApns(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.os.UserHandle r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.os.UserHandle;

        return null;
    }

    public int getPasswordComplexity(boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        z0 := @parameter0: boolean;

        return 0;
    }

    public long getPasswordExpiration(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0L;
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0L;
    }

    public int getPasswordHistoryLength(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public int getPasswordMinimumLength(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public int getPasswordQuality(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public int getPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3, r4;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        return 0;
    }

    public int getPermissionPolicy(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public java.util.List getPermittedAccessibilityServices(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.util.List getPermittedAccessibilityServicesForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.util.List getPermittedInputMethods(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.util.List getPermittedInputMethodsForCurrentUser() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public int getPersonalAppsSuspendedReasons(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public android.content.ComponentName getProfileOwner(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.content.ComponentName getProfileOwnerAsUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getProfileOwnerName(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.os.UserHandle r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.os.UserHandle;

        return null;
    }

    public int getProfileWithMinimumFailedPasswordsForWipe(int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return 0;
    }

    public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.os.RemoteCallback r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.RemoteCallback;

        i0 := @parameter2: int;

        return;
    }

    public long getRequiredStrongAuthTimeout(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0L;
    }

    public android.content.ComponentName getRestrictionsProvider(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return 0;
    }

    public java.util.List getSecondaryUsers(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.lang.CharSequence getShortSupportMessage(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return null;
    }

    public java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public boolean getStorageEncryption(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return 0;
    }

    public int getStorageEncryptionStatus(java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public android.os.PersistableBundle getTransferOwnershipBundle() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return null;
    }

    public java.util.List getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1, r2;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        return null;
    }

    public java.util.List getUserControlDisabledPackages(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public int getUserProvisioningState() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public android.os.Bundle getUserRestrictions(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return null;
    }

    public java.lang.String getWifiMacAddress(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public boolean hasDeviceOwner() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName, int, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0, i1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return 0;
    }

    public boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean hasUserSetupCompleted() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean installCaCert(android.content.ComponentName, java.lang.String, byte[]) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        byte[] r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        return 0;
    }

    public boolean installExistingPackage(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return 0;
    }

    public boolean installKeyPair(android.content.ComponentName, java.lang.String, byte[], byte[], byte[], java.lang.String, boolean, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r6;
        byte[] r3, r4, r5;
        boolean z0, z1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        r4 := @parameter3: byte[];

        r5 := @parameter4: byte[];

        r6 := @parameter5: java.lang.String;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        return 0;
    }

    public void installUpdateFromFile(android.content.ComponentName, android.os.ParcelFileDescriptor, android.app.admin.StartInstallingUpdateCallback) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.os.ParcelFileDescriptor r2;
        android.app.admin.StartInstallingUpdateCallback r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.app.admin.StartInstallingUpdateCallback;

        return;
    }

    public boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return 0;
    }

    public boolean isActivePasswordSufficient(int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return 0;
    }

    public boolean isAdminActive(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean isAffiliatedUser() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isAlwaysOnVpnLockdownEnabledForUser(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isApplicationHidden(android.content.ComponentName, java.lang.String, java.lang.String, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        return 0;
    }

    public boolean isBackupServiceEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isCaCertApproved(java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isCommonCriteriaModeEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isCurrentInputMethodSetByOwner() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isDeviceProvisioned() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isDeviceProvisioningConfigApplied() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isEphemeralUser(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isFactoryResetProtectionPolicySupported() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isInputMethodPermittedByAdmin(android.content.ComponentName, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return 0;
    }

    public boolean isLockTaskPermitted(java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isLogoutEnabled() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isManagedKiosk() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isManagedProfile(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isMasterVolumeMuted(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return 0;
    }

    public boolean isNetworkLoggingEnabled(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean isNotificationListenerServicePermitted(java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean isOrganizationOwnedDeviceWithManagedProfile() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isOverrideApnEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isPackageAllowedToAccessCalendarForUser(java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean isPackageSuspended(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return 0;
    }

    public boolean isPasswordSufficientAfterProfileUnification(int, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0, i1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return 0;
    }

    public boolean isProfileActivePasswordSufficientForParent(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isProvisioningAllowed(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean isRemovingAdmin(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean isResetPasswordTokenActive(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isSecondaryLockscreenEnabled(android.os.UserHandle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.os.UserHandle r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.os.UserHandle;

        return 0;
    }

    public boolean isSecurityLoggingEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isSeparateProfileChallengeAllowed(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isSystemOnlyUser(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean isUnattendedManagedKiosk() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return 0;
    }

    public boolean isUninstallBlocked(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean isUninstallInQueue(java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isUsingUnifiedPassword(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public void lockNow(int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public int logoutUser(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return;
    }

    public void notifyLockTaskModeChanged(boolean, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        boolean z0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return;
    }

    public void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.app.admin.SystemUpdateInfo r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.app.admin.SystemUpdateInfo;

        return;
    }

    public boolean packageHasActiveAdmins(java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public void reboot(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }

    public void removeActiveAdmin(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return;
    }

    public boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean removeKeyPair(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return 0;
    }

    public boolean removeOverrideApn(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean removeUser(android.content.ComponentName, android.os.UserHandle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        return 0;
    }

    public void reportFailedBiometricAttempt(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void reportFailedPasswordAttempt(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void reportKeyguardDismissed(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void reportKeyguardSecured(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void reportPasswordChanged(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void reportSuccessfulBiometricAttempt(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void reportSuccessfulPasswordAttempt(int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public boolean requestBugreport(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return 0;
    }

    public boolean resetPassword(java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean resetPasswordWithToken(android.content.ComponentName, java.lang.String, byte[], int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        byte[] r3;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        return 0;
    }

    public java.util.List retrieveNetworkLogs(android.content.ComponentName, java.lang.String, long) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        long l0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        return null;
    }

    public android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return null;
    }

    public void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0, z1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        return;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        return;
    }

    public void setAffiliationIds(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return;
    }

    public boolean setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0;
        java.util.List r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.List;

        return 0;
    }

    public boolean setApplicationHidden(android.content.ComponentName, java.lang.String, java.lang.String, boolean, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        boolean z0, z1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        return 0;
    }

    public void setApplicationRestrictions(android.content.ComponentName, java.lang.String, java.lang.String, android.os.Bundle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        android.os.Bundle r4;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        return;
    }

    public boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public void setAutoTimeEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setAutoTimeRequired(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setAutoTimeZoneEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setBackupServiceEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setBluetoothContactSharingDisabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setCameraDisabled(android.content.ComponentName, boolean, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0, z1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        return;
    }

    public void setCertInstallerPackage(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void setCommonCriteriaModeEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setConfiguredNetworksLockdownState(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setCrossProfileCalendarPackages(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return;
    }

    public void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setCrossProfileContactsSearchDisabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setCrossProfilePackages(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return;
    }

    public void setDefaultSmsApplication(android.content.ComponentName, java.lang.String, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        return;
    }

    public void setDelegatedScopes(android.content.ComponentName, java.lang.String, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        java.util.List r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        return;
    }

    public boolean setDeviceOwner(android.content.ComponentName, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return 0;
    }

    public void setDeviceOwnerLockScreenInfo(android.content.ComponentName, java.lang.CharSequence) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.CharSequence r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.CharSequence;

        return;
    }

    public void setDeviceProvisioningConfigApplied() throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        return;
    }

    public void setEndUserSessionMessage(android.content.ComponentName, java.lang.CharSequence) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.CharSequence r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.CharSequence;

        return;
    }

    public void setFactoryResetProtectionPolicy(android.content.ComponentName, android.app.admin.FactoryResetProtectionPolicy) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.app.admin.FactoryResetProtectionPolicy r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.app.admin.FactoryResetProtectionPolicy;

        return;
    }

    public void setForceEphemeralUsers(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public int setGlobalPrivateDns(android.content.ComponentName, int, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        return 0;
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return null;
    }

    public void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void setKeepUninstalledPackages(android.content.ComponentName, java.lang.String, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        java.util.List r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        return;
    }

    public boolean setKeyGrantForApp(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3, r4;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        return 0;
    }

    public boolean setKeyPairCertificate(android.content.ComponentName, java.lang.String, java.lang.String, byte[], byte[], boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        byte[] r4, r5;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: byte[];

        r5 := @parameter4: byte[];

        z0 := @parameter5: boolean;

        return 0;
    }

    public boolean setKeyguardDisabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return 0;
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setLocationEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setLockTaskFeatures(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return;
    }

    public void setLockTaskPackages(android.content.ComponentName, java.lang.String[]) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String[] r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String[];

        return;
    }

    public void setLogoutEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setLongSupportMessage(android.content.ComponentName, java.lang.CharSequence) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.CharSequence r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.CharSequence;

        return;
    }

    public void setManagedProfileMaximumTimeOff(android.content.ComponentName, long) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        long l0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        return;
    }

    public void setMasterVolumeMuted(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setMaximumTimeToLock(android.content.ComponentName, long, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        long l0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        return;
    }

    public java.util.List setMeteredDataDisabledPackages(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return null;
    }

    public void setNetworkLoggingEnabled(android.content.ComponentName, java.lang.String, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        return;
    }

    public void setOrganizationColor(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return;
    }

    public void setOrganizationColorForUser(int, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0, i1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setOrganizationName(android.content.ComponentName, java.lang.CharSequence) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.CharSequence r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.CharSequence;

        return;
    }

    public void setOverrideApnsEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public java.lang.String[] setPackagesSuspended(android.content.ComponentName, java.lang.String, java.lang.String[], boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        java.lang.String[] r3;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        return null;
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName, long, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        long l0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordHistoryLength(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordMinimumLength(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordMinimumLetters(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPasswordQuality(android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public void setPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String, int, android.os.RemoteCallback) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3, r4;
        int i0;
        android.os.RemoteCallback r5;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r5 := @parameter5: android.os.RemoteCallback;

        return;
    }

    public void setPermissionPolicy(android.content.ComponentName, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return;
    }

    public boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return 0;
    }

    public boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return 0;
    }

    public boolean setPermittedInputMethods(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return 0;
    }

    public void setPersonalAppsSuspended(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setProfileEnabled(android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }

    public void setProfileName(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public boolean setProfileOwner(android.content.ComponentName, java.lang.String, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return 0;
    }

    public void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.net.ProxyInfo r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.net.ProxyInfo;

        return;
    }

    public void setRequiredStrongAuthTimeout(android.content.ComponentName, long, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        long l0;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        return;
    }

    public boolean setResetPasswordToken(android.content.ComponentName, byte[]) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        byte[] r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: byte[];

        return 0;
    }

    public void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1, r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        return;
    }

    public void setScreenCaptureDisabled(android.content.ComponentName, boolean, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0, z1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        return;
    }

    public void setSecondaryLockscreenEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void setSecurityLoggingEnabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return;
    }

    public void setShortSupportMessage(android.content.ComponentName, java.lang.CharSequence) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.CharSequence r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.CharSequence;

        return;
    }

    public void setStartUserSessionMessage(android.content.ComponentName, java.lang.CharSequence) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.CharSequence r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.CharSequence;

        return;
    }

    public boolean setStatusBarDisabled(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return 0;
    }

    public int setStorageEncryption(android.content.ComponentName, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        return 0;
    }

    public void setSystemSetting(android.content.ComponentName, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void setSystemUpdatePolicy(android.content.ComponentName, android.app.admin.SystemUpdatePolicy) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.app.admin.SystemUpdatePolicy r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.app.admin.SystemUpdatePolicy;

        return;
    }

    public boolean setTime(android.content.ComponentName, long) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        long l0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        return 0;
    }

    public boolean setTimeZone(android.content.ComponentName, java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public void setTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1, r2;
        android.os.PersistableBundle r3;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: android.os.PersistableBundle;

        z0 := @parameter3: boolean;

        return;
    }

    public void setUninstallBlocked(android.content.ComponentName, java.lang.String, java.lang.String, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        return;
    }

    public void setUserControlDisabledPackages(android.content.ComponentName, java.util.List) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.util.List r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        return;
    }

    public void setUserIcon(android.content.ComponentName, android.graphics.Bitmap) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.graphics.Bitmap r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.graphics.Bitmap;

        return;
    }

    public void setUserProvisioningState(int, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0, i1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setUserRestriction(android.content.ComponentName, java.lang.String, boolean, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0, z1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        return;
    }

    public void startManagedQuickContact(java.lang.String, long, boolean, long, android.content.Intent) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        long l0, l1;
        boolean z0;
        android.content.Intent r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        l1 := @parameter3: long;

        r2 := @parameter4: android.content.Intent;

        return;
    }

    public int startUserInBackground(android.content.ComponentName, android.os.UserHandle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        return 0;
    }

    public boolean startViewCalendarEventInManagedProfile(java.lang.String, long, long, long, boolean, int) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;
        long l0, l1, l2;
        boolean z0;
        int i3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        z0 := @parameter4: boolean;

        i3 := @parameter5: int;

        return 0;
    }

    public int stopUser(android.content.ComponentName, android.os.UserHandle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        return 0;
    }

    public boolean switchUser(android.content.ComponentName, android.os.UserHandle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        return 0;
    }

    public void transferOwnership(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1, r2;
        android.os.PersistableBundle r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: android.os.PersistableBundle;

        return;
    }

    public void uninstallCaCerts(android.content.ComponentName, java.lang.String, java.lang.String[]) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        java.lang.String[] r3;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        return;
    }

    public void uninstallPackageWithActiveAdmins(java.lang.String) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public boolean updateOverrideApn(android.content.ComponentName, int, android.telephony.data.ApnSetting) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        android.content.ComponentName r1;
        int i0;
        android.telephony.data.ApnSetting r2;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 := @parameter2: android.telephony.data.ApnSetting;

        return 0;
    }

    public void wipeDataWithReason(int, java.lang.String, boolean) throws android.os.RemoteException
    {
        android.app.admin.IDevicePolicyManager$Default r0;
        int i0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.app.admin.IDevicePolicyManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        return;
    }
}
