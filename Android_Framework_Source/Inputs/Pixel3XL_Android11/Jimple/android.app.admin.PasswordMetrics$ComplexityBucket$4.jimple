final enum class android.app.admin.PasswordMetrics$ComplexityBucket$4 extends android.app.admin.PasswordMetrics$ComplexityBucket
{

    void <init>(java.lang.String, int, int)
    {
        android.app.admin.PasswordMetrics$ComplexityBucket$4 r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.app.admin.PasswordMetrics$ComplexityBucket$4;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.app.admin.PasswordMetrics$ComplexityBucket: void <init>(java.lang.String,int,int,android.app.admin.PasswordMetrics$1)>(r1, i0, i1, null);

        return;
    }

    boolean allowsCredType(int)
    {
        android.app.admin.PasswordMetrics$ComplexityBucket$4 r0;
        int i0;

        r0 := @this: android.app.admin.PasswordMetrics$ComplexityBucket$4;

        i0 := @parameter0: int;

        return 1;
    }

    boolean allowsNumericPassword()
    {
        android.app.admin.PasswordMetrics$ComplexityBucket$4 r0;

        r0 := @this: android.app.admin.PasswordMetrics$ComplexityBucket$4;

        return 1;
    }

    boolean canHaveSequence()
    {
        android.app.admin.PasswordMetrics$ComplexityBucket$4 r0;

        r0 := @this: android.app.admin.PasswordMetrics$ComplexityBucket$4;

        return 1;
    }

    int getMinimumLength(boolean)
    {
        android.app.admin.PasswordMetrics$ComplexityBucket$4 r0;
        boolean z0;

        r0 := @this: android.app.admin.PasswordMetrics$ComplexityBucket$4;

        z0 := @parameter0: boolean;

        return 0;
    }
}
