public final class android.app.admin.PasswordMetrics extends java.lang.Object implements android.os.Parcelable
{
    private static final int CHAR_DIGIT;
    private static final int CHAR_LOWER_CASE;
    private static final int CHAR_SYMBOL;
    private static final int CHAR_UPPER_CASE;
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int MAX_ALLOWED_SEQUENCE;
    private static final java.lang.String TAG;
    public int credType;
    public int length;
    public int letters;
    public int lowerCase;
    public int nonLetter;
    public int nonNumeric;
    public int numeric;
    public int seqLength;
    public int symbols;
    public int upperCase;

    static void <clinit>()
    {
        android.app.admin.PasswordMetrics$1 $r0;

        <android.app.admin.PasswordMetrics: java.lang.String TAG> = "PasswordMetrics";

        <android.app.admin.PasswordMetrics: int MAX_ALLOWED_SEQUENCE> = 3;

        <android.app.admin.PasswordMetrics: int CHAR_UPPER_CASE> = 1;

        <android.app.admin.PasswordMetrics: int CHAR_SYMBOL> = 3;

        <android.app.admin.PasswordMetrics: int CHAR_LOWER_CASE> = 0;

        <android.app.admin.PasswordMetrics: int CHAR_DIGIT> = 2;

        $r0 = new android.app.admin.PasswordMetrics$1;

        specialinvoke $r0.<android.app.admin.PasswordMetrics$1: void <init>()>();

        <android.app.admin.PasswordMetrics: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(int)
    {
        android.app.admin.PasswordMetrics r0;
        int i0;

        r0 := @this: android.app.admin.PasswordMetrics;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.admin.PasswordMetrics: int length> = 0;

        r0.<android.app.admin.PasswordMetrics: int letters> = 0;

        r0.<android.app.admin.PasswordMetrics: int upperCase> = 0;

        r0.<android.app.admin.PasswordMetrics: int lowerCase> = 0;

        r0.<android.app.admin.PasswordMetrics: int numeric> = 0;

        r0.<android.app.admin.PasswordMetrics: int symbols> = 0;

        r0.<android.app.admin.PasswordMetrics: int nonLetter> = 0;

        r0.<android.app.admin.PasswordMetrics: int nonNumeric> = 0;

        r0.<android.app.admin.PasswordMetrics: int seqLength> = 2147483647;

        r0.<android.app.admin.PasswordMetrics: int credType> = i0;

        return;
    }

    public void <init>(int, int, int, int, int, int, int, int, int, int)
    {
        android.app.admin.PasswordMetrics r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;

        r0 := @this: android.app.admin.PasswordMetrics;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        i8 := @parameter8: int;

        i9 := @parameter9: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.admin.PasswordMetrics: int length> = 0;

        r0.<android.app.admin.PasswordMetrics: int letters> = 0;

        r0.<android.app.admin.PasswordMetrics: int upperCase> = 0;

        r0.<android.app.admin.PasswordMetrics: int lowerCase> = 0;

        r0.<android.app.admin.PasswordMetrics: int numeric> = 0;

        r0.<android.app.admin.PasswordMetrics: int symbols> = 0;

        r0.<android.app.admin.PasswordMetrics: int nonLetter> = 0;

        r0.<android.app.admin.PasswordMetrics: int nonNumeric> = 0;

        r0.<android.app.admin.PasswordMetrics: int seqLength> = 2147483647;

        r0.<android.app.admin.PasswordMetrics: int credType> = i0;

        r0.<android.app.admin.PasswordMetrics: int length> = i1;

        r0.<android.app.admin.PasswordMetrics: int letters> = i2;

        r0.<android.app.admin.PasswordMetrics: int upperCase> = i3;

        r0.<android.app.admin.PasswordMetrics: int lowerCase> = i4;

        r0.<android.app.admin.PasswordMetrics: int numeric> = i5;

        r0.<android.app.admin.PasswordMetrics: int symbols> = i6;

        r0.<android.app.admin.PasswordMetrics: int nonLetter> = i7;

        r0.<android.app.admin.PasswordMetrics: int nonNumeric> = i8;

        r0.<android.app.admin.PasswordMetrics: int seqLength> = i9;

        return;
    }

    private void <init>(android.app.admin.PasswordMetrics)
    {
        android.app.admin.PasswordMetrics r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.app.admin.PasswordMetrics;

        r1 := @parameter0: android.app.admin.PasswordMetrics;

        $i9 = r1.<android.app.admin.PasswordMetrics: int credType>;

        $i8 = r1.<android.app.admin.PasswordMetrics: int length>;

        $i7 = r1.<android.app.admin.PasswordMetrics: int letters>;

        $i6 = r1.<android.app.admin.PasswordMetrics: int upperCase>;

        $i5 = r1.<android.app.admin.PasswordMetrics: int lowerCase>;

        $i4 = r1.<android.app.admin.PasswordMetrics: int numeric>;

        $i3 = r1.<android.app.admin.PasswordMetrics: int symbols>;

        $i2 = r1.<android.app.admin.PasswordMetrics: int nonLetter>;

        $i1 = r1.<android.app.admin.PasswordMetrics: int nonNumeric>;

        $i0 = r1.<android.app.admin.PasswordMetrics: int seqLength>;

        specialinvoke r0.<android.app.admin.PasswordMetrics: void <init>(int,int,int,int,int,int,int,int,int,int)>($i9, $i8, $i7, $i6, $i5, $i4, $i3, $i2, $i1, $i0);

        return;
    }

    public static android.app.admin.PasswordMetrics applyComplexity(android.app.admin.PasswordMetrics, boolean, int)
    {
        android.app.admin.PasswordMetrics r0, $r2;
        boolean z0;
        int i0;
        android.app.admin.PasswordMetrics$ComplexityBucket $r1;

        r0 := @parameter0: android.app.admin.PasswordMetrics;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r1 = staticinvoke <android.app.admin.PasswordMetrics$ComplexityBucket: android.app.admin.PasswordMetrics$ComplexityBucket forComplexity(int)>(i0);

        $r2 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics applyComplexity(android.app.admin.PasswordMetrics,boolean,android.app.admin.PasswordMetrics$ComplexityBucket)>(r0, z0, $r1);

        return $r2;
    }

    private static android.app.admin.PasswordMetrics applyComplexity(android.app.admin.PasswordMetrics, boolean, android.app.admin.PasswordMetrics$ComplexityBucket)
    {
        boolean z0, $z1, $z2, $z3;
        android.app.admin.PasswordMetrics$ComplexityBucket r0;
        android.app.admin.PasswordMetrics $r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r2 := @parameter0: android.app.admin.PasswordMetrics;

        z0 := @parameter1: boolean;

        r0 := @parameter2: android.app.admin.PasswordMetrics$ComplexityBucket;

        $r1 = new android.app.admin.PasswordMetrics;

        specialinvoke $r1.<android.app.admin.PasswordMetrics: void <init>(android.app.admin.PasswordMetrics)>(r2);

        $z1 = virtualinvoke r0.<android.app.admin.PasswordMetrics$ComplexityBucket: boolean canHaveSequence()>();

        if $z1 != 0 goto label1;

        $i5 = $r1.<android.app.admin.PasswordMetrics: int seqLength>;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, 3);

        $r1.<android.app.admin.PasswordMetrics: int seqLength> = $i6;

     label1:
        $i0 = $r1.<android.app.admin.PasswordMetrics: int length>;

        $z2 = z0 ^ 1;

        $i1 = virtualinvoke r0.<android.app.admin.PasswordMetrics$ComplexityBucket: int getMinimumLength(boolean)>($z2);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $r1.<android.app.admin.PasswordMetrics: int length> = $i2;

        if z0 != 0 goto label2;

        $z3 = virtualinvoke r0.<android.app.admin.PasswordMetrics$ComplexityBucket: boolean allowsNumericPassword()>();

        if $z3 != 0 goto label2;

        $i3 = $r1.<android.app.admin.PasswordMetrics: int nonNumeric>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 1);

        $r1.<android.app.admin.PasswordMetrics: int nonNumeric> = $i4;

     label2:
        return $r1;
    }

    private static int categoryChar(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 97 > c0 goto label1;

        if c0 > 122 goto label1;

        return 0;

     label1:
        if 65 > c0 goto label2;

        if c0 > 90 goto label2;

        return 1;

     label2:
        if 48 > c0 goto label3;

        if c0 > 57 goto label3;

        return 2;

     label3:
        return 3;
    }

    private static void comparePasswordMetrics(android.app.admin.PasswordMetrics, android.app.admin.PasswordMetrics, java.util.ArrayList)
    {
        android.app.admin.PasswordMetrics r0, r1;
        java.util.ArrayList r2;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        com.android.internal.widget.PasswordValidationError $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: android.app.admin.PasswordMetrics;

        r1 := @parameter1: android.app.admin.PasswordMetrics;

        r2 := @parameter2: java.util.ArrayList;

        i2 = r1.<android.app.admin.PasswordMetrics: int length>;

        i3 = r0.<android.app.admin.PasswordMetrics: int length>;

        if i2 >= i3 goto label1;

        $r11 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r11.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(3, i3);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label1:
        i4 = r1.<android.app.admin.PasswordMetrics: int letters>;

        i5 = r0.<android.app.admin.PasswordMetrics: int letters>;

        if i4 >= i5 goto label2;

        $r10 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r10.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(6, i5);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label2:
        i6 = r1.<android.app.admin.PasswordMetrics: int upperCase>;

        i7 = r0.<android.app.admin.PasswordMetrics: int upperCase>;

        if i6 >= i7 goto label3;

        $r9 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r9.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(7, i7);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label3:
        i8 = r1.<android.app.admin.PasswordMetrics: int lowerCase>;

        i9 = r0.<android.app.admin.PasswordMetrics: int lowerCase>;

        if i8 >= i9 goto label4;

        $r8 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r8.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(8, i9);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label4:
        i10 = r1.<android.app.admin.PasswordMetrics: int numeric>;

        i11 = r0.<android.app.admin.PasswordMetrics: int numeric>;

        if i10 >= i11 goto label5;

        $r7 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r7.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(9, i11);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label5:
        i12 = r1.<android.app.admin.PasswordMetrics: int symbols>;

        i13 = r0.<android.app.admin.PasswordMetrics: int symbols>;

        if i12 >= i13 goto label6;

        $r6 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r6.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(10, i13);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label6:
        i14 = r1.<android.app.admin.PasswordMetrics: int nonLetter>;

        i15 = r0.<android.app.admin.PasswordMetrics: int nonLetter>;

        if i14 >= i15 goto label7;

        $r5 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r5.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(11, i15);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label7:
        i16 = r1.<android.app.admin.PasswordMetrics: int nonNumeric>;

        i17 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        if i16 >= i17 goto label8;

        $r4 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r4.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(12, i17);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label8:
        $i1 = r1.<android.app.admin.PasswordMetrics: int seqLength>;

        $i0 = r0.<android.app.admin.PasswordMetrics: int seqLength>;

        if $i1 <= $i0 goto label9;

        $r3 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r3.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(5, 0);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label9:
        return;
    }

    public static int complexityLevelToMinQuality(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 65536 goto label2;

        if i0 == 196608 goto label1;

        if i0 == 327680 goto label1;

        return 0;

     label1:
        return 196608;

     label2:
        return 65536;
    }

    public static android.app.admin.PasswordMetrics computeForCredential(com.android.internal.widget.LockscreenCredential)
    {
        com.android.internal.widget.LockscreenCredential r0;
        boolean $z0, $z1, $z2, $z3;
        byte[] $r2;
        android.app.admin.PasswordMetrics $r3, $r9, $r10;
        java.lang.StringBuilder $r4;
        int $i0;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;

        r0 := @parameter0: com.android.internal.widget.LockscreenCredential;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockscreenCredential: boolean isPassword()>();

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r0.<com.android.internal.widget.LockscreenCredential: boolean isPin()>();

        if $z1 == 0 goto label1;

        goto label4;

     label1:
        $z2 = virtualinvoke r0.<com.android.internal.widget.LockscreenCredential: boolean isPattern()>();

        if $z2 == 0 goto label2;

        $r10 = new android.app.admin.PasswordMetrics;

        specialinvoke $r10.<android.app.admin.PasswordMetrics: void <init>(int)>(1);

        return $r10;

     label2:
        $z3 = virtualinvoke r0.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z3 == 0 goto label3;

        $r9 = new android.app.admin.PasswordMetrics;

        specialinvoke $r9.<android.app.admin.PasswordMetrics: void <init>(int)>(-1);

        return $r9;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown credential type ");

        $i0 = virtualinvoke r0.<com.android.internal.widget.LockscreenCredential: int getType()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        $r3 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics computeForPassword(byte[])>($r2);

        return $r3;
    }

    public static android.app.admin.PasswordMetrics computeForPassword(byte[])
    {
        byte[] r0;
        int i0, i1, i2, $i3, i6, i7, i8, i9, i10, i11, i12, i13;
        android.app.admin.PasswordMetrics $r1;
        byte $b4;
        char $c5;

        r0 := @parameter0: byte[];

        i6 = 0;

        i7 = 0;

        i8 = 0;

        i9 = 0;

        i10 = 0;

        i11 = 0;

        i12 = 0;

        i0 = lengthof r0;

        i1 = lengthof r0;

        i13 = 0;

     label1:
        if i13 >= i1 goto label7;

        $b4 = r0[i13];

        $c5 = (char) $b4;

        i2 = staticinvoke <android.app.admin.PasswordMetrics: int categoryChar(char)>($c5);

        if i2 == 0 goto label5;

        if i2 == 1 goto label4;

        if i2 == 2 goto label3;

        if i2 == 3 goto label2;

        goto label6;

     label2:
        i10 = i10 + 1;

        i11 = i11 + 1;

        i12 = i12 + 1;

        goto label6;

     label3:
        i9 = i9 + 1;

        i11 = i11 + 1;

        goto label6;

     label4:
        i6 = i6 + 1;

        i7 = i7 + 1;

        i12 = i12 + 1;

        goto label6;

     label5:
        i6 = i6 + 1;

        i8 = i8 + 1;

        i12 = i12 + 1;

     label6:
        i13 = i13 + 1;

        goto label1;

     label7:
        $r1 = new android.app.admin.PasswordMetrics;

        $i3 = staticinvoke <android.app.admin.PasswordMetrics: int maxLengthSequence(byte[])>(r0);

        specialinvoke $r1.<android.app.admin.PasswordMetrics: void <init>(int,int,int,int,int,int,int,int,int,int)>(4, i0, i6, i7, i8, i9, i10, i11, i12, $i3);

        return $r1;
    }

    private static boolean hasInvalidCharacters(byte[])
    {
        byte[] r0;
        int i0, i3;
        char c1;
        byte $b2;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $b2 = r0[i3];

        c1 = (char) $b2;

        if c1 < 32 goto label3;

        if c1 <= 127 goto label2;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    private static int maxDiffCategory(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return 0;

     label1:
        return 10;

     label2:
        return 1;
    }

    public static int maxLengthSequence(byte[])
    {
        byte[] r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, i14, i15, i16, i17, i18, i21, i22;
        byte $b3, $b8;
        char c13, c19, c20;
        boolean z0, z1;

        r0 := @parameter0: byte[];

        $i2 = lengthof r0;

        if $i2 != 0 goto label1;

        return 0;

     label1:
        $b3 = r0[0];

        c13 = (char) $b3;

        i14 = staticinvoke <android.app.admin.PasswordMetrics: int categoryChar(char)>(c13);

        i15 = 0;

        z0 = 0;

        i16 = 0;

        i17 = 0;

        i18 = 1;

        c19 = c13;

     label2:
        $i4 = lengthof r0;

        if i18 >= $i4 goto label7;

        $b8 = r0[i18];

        c20 = (char) $b8;

        i0 = staticinvoke <android.app.admin.PasswordMetrics: int categoryChar(char)>(c20);

        i1 = c20 - c19;

        if i0 != i14 goto label5;

        $i10 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        $i11 = staticinvoke <android.app.admin.PasswordMetrics: int maxDiffCategory(int)>(i14);

        if $i10 <= $i11 goto label3;

        goto label5;

     label3:
        i21 = i16;

        i22 = i17;

        if z0 == 0 goto label4;

        i21 = i16;

        i22 = i17;

        if i1 == i15 goto label4;

        $i12 = i18 - i17;

        i21 = staticinvoke <java.lang.Math: int max(int,int)>(i16, $i12);

        i22 = i18 - 1;

     label4:
        i15 = i1;

        z1 = 1;

        i16 = i21;

        goto label6;

     label5:
        $i9 = i18 - i17;

        i16 = staticinvoke <java.lang.Math: int max(int,int)>(i16, $i9);

        i22 = i18;

        z1 = 0;

        i14 = i0;

     label6:
        c19 = c20;

        i18 = i18 + 1;

        z0 = z1;

        i17 = i22;

        goto label2;

     label7:
        $i5 = lengthof r0;

        $i6 = $i5 - i17;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(i16, $i6);

        return $i7;
    }

    public static android.app.admin.PasswordMetrics merge(java.util.List)
    {
        android.app.admin.PasswordMetrics $r1, $r3;
        boolean $z0;
        java.lang.Object $r2;
        java.util.List r4;
        java.util.Iterator r5;

        r4 := @parameter0: java.util.List;

        $r1 = new android.app.admin.PasswordMetrics;

        specialinvoke $r1.<android.app.admin.PasswordMetrics: void <init>(int)>(-1);

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (android.app.admin.PasswordMetrics) $r2;

        virtualinvoke $r1.<android.app.admin.PasswordMetrics: void maxWith(android.app.admin.PasswordMetrics)>($r3);

        goto label1;

     label2:
        return $r1;
    }

    private void removeOverlapping()
    {
        android.app.admin.PasswordMetrics r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21;

        r0 := @this: android.app.admin.PasswordMetrics;

        $i6 = r0.<android.app.admin.PasswordMetrics: int upperCase>;

        $i5 = r0.<android.app.admin.PasswordMetrics: int lowerCase>;

        i0 = $i6 + $i5;

        $i8 = r0.<android.app.admin.PasswordMetrics: int numeric>;

        $i7 = r0.<android.app.admin.PasswordMetrics: int symbols>;

        i1 = $i8 + $i7;

        $i9 = r0.<android.app.admin.PasswordMetrics: int letters>;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i9, i0);

        $i10 = r0.<android.app.admin.PasswordMetrics: int symbols>;

        i3 = $i10 + i2;

        $i11 = r0.<android.app.admin.PasswordMetrics: int nonLetter>;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>($i11, i1);

        $i12 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        i20 = staticinvoke <java.lang.Math: int max(int,int)>($i12, i3);

        $i15 = i2 + i4;

        $i13 = r0.<android.app.admin.PasswordMetrics: int numeric>;

        $i14 = $i13 + i20;

        i21 = staticinvoke <java.lang.Math: int max(int,int)>($i15, $i14);

        $i16 = r0.<android.app.admin.PasswordMetrics: int letters>;

        if i0 < $i16 goto label1;

        r0.<android.app.admin.PasswordMetrics: int letters> = 0;

     label1:
        $i17 = r0.<android.app.admin.PasswordMetrics: int nonLetter>;

        if i1 < $i17 goto label2;

        r0.<android.app.admin.PasswordMetrics: int nonLetter> = 0;

     label2:
        $i18 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        if i3 < $i18 goto label3;

        r0.<android.app.admin.PasswordMetrics: int nonNumeric> = 0;

     label3:
        $i19 = r0.<android.app.admin.PasswordMetrics: int length>;

        if i21 < $i19 goto label4;

        r0.<android.app.admin.PasswordMetrics: int length> = 0;

     label4:
        return;
    }

    public static int sanitizeComplexityLevel(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 65536 goto label1;

        if i0 == 196608 goto label1;

        if i0 == 327680 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid password complexity used: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PasswordMetrics", $r4);

        return 0;

     label1:
        return i0;
    }

    private boolean satisfiesBucket(android.app.admin.PasswordMetrics$ComplexityBucket)
    {
        android.app.admin.PasswordMetrics r0;
        android.app.admin.PasswordMetrics$ComplexityBucket r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z1, z2, z3, z4;

        r0 := @this: android.app.admin.PasswordMetrics;

        r1 := @parameter0: android.app.admin.PasswordMetrics$ComplexityBucket;

        $i1 = r0.<android.app.admin.PasswordMetrics: int credType>;

        z2 = virtualinvoke r1.<android.app.admin.PasswordMetrics$ComplexityBucket: boolean allowsCredType(int)>($i1);

        if z2 != 0 goto label1;

        return 0;

     label1:
        $i2 = r0.<android.app.admin.PasswordMetrics: int credType>;

        if $i2 == 4 goto label2;

        return 1;

     label2:
        $z1 = virtualinvoke r1.<android.app.admin.PasswordMetrics$ComplexityBucket: boolean canHaveSequence()>();

        if $z1 != 0 goto label3;

        $i5 = r0.<android.app.admin.PasswordMetrics: int seqLength>;

        if $i5 > 3 goto label6;

     label3:
        i0 = r0.<android.app.admin.PasswordMetrics: int length>;

        $i3 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        if $i3 <= 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        z3 = 0;

     label5:
        $i4 = virtualinvoke r1.<android.app.admin.PasswordMetrics$ComplexityBucket: int getMinimumLength(boolean)>(z3);

        if i0 < $i4 goto label6;

        z4 = 1;

        goto label7;

     label6:
        z4 = 0;

     label7:
        return z4;
    }

    public static java.util.List validatePassword(android.app.admin.PasswordMetrics, int, boolean, byte[])
    {
        android.app.admin.PasswordMetrics r0, $r2;
        int i0;
        boolean z0, $z1;
        byte[] r1;
        java.util.List $r3, $r5;
        com.android.internal.widget.PasswordValidationError $r4;

        r0 := @parameter0: android.app.admin.PasswordMetrics;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: byte[];

        $z1 = staticinvoke <android.app.admin.PasswordMetrics: boolean hasInvalidCharacters(byte[])>(r1);

        if $z1 == 0 goto label1;

        $r4 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r4.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(2, 0);

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r4);

        return $r5;

     label1:
        $r2 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics computeForPassword(byte[])>(r1);

        $r3 = staticinvoke <android.app.admin.PasswordMetrics: java.util.List validatePasswordMetrics(android.app.admin.PasswordMetrics,int,boolean,android.app.admin.PasswordMetrics)>(r0, i0, z0, $r2);

        return $r3;
    }

    public static java.util.List validatePasswordMetrics(android.app.admin.PasswordMetrics, int, boolean, android.app.admin.PasswordMetrics)
    {
        boolean z0, $z1;
        android.app.admin.PasswordMetrics r0, r10, r11;
        android.app.admin.PasswordMetrics$ComplexityBucket r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        com.android.internal.widget.PasswordValidationError $r3, $r6, $r7;
        java.util.List $r4, $r8, $r9;
        java.util.ArrayList $r5;

        r10 := @parameter0: android.app.admin.PasswordMetrics;

        i7 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0 := @parameter3: android.app.admin.PasswordMetrics;

        r1 = staticinvoke <android.app.admin.PasswordMetrics$ComplexityBucket: android.app.admin.PasswordMetrics$ComplexityBucket forComplexity(int)>(i7);

        i8 = r0.<android.app.admin.PasswordMetrics: int credType>;

        $i0 = r10.<android.app.admin.PasswordMetrics: int credType>;

        if i8 < $i0 goto label5;

        $z1 = virtualinvoke r1.<android.app.admin.PasswordMetrics$ComplexityBucket: boolean allowsCredType(int)>(i8);

        if $z1 != 0 goto label1;

        goto label5;

     label1:
        $i1 = r0.<android.app.admin.PasswordMetrics: int credType>;

        if $i1 == 4 goto label2;

        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r9;

     label2:
        if z0 == 0 goto label3;

        $i6 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        if $i6 <= 0 goto label3;

        $r7 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r7.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(2, 0);

        $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7);

        return $r8;

     label3:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $i2 = r0.<android.app.admin.PasswordMetrics: int length>;

        if $i2 <= 16 goto label4;

        $r6 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r6.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(4, 16);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label4:
        r11 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics applyComplexity(android.app.admin.PasswordMetrics,boolean,android.app.admin.PasswordMetrics$ComplexityBucket)>(r10, z0, r1);

        $i3 = r11.<android.app.admin.PasswordMetrics: int length>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 4);

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(16, $i4);

        r11.<android.app.admin.PasswordMetrics: int length> = $i5;

        specialinvoke r11.<android.app.admin.PasswordMetrics: void removeOverlapping()>();

        staticinvoke <android.app.admin.PasswordMetrics: void comparePasswordMetrics(android.app.admin.PasswordMetrics,android.app.admin.PasswordMetrics,java.util.ArrayList)>(r11, r0, $r5);

        return $r5;

     label5:
        $r3 = new com.android.internal.widget.PasswordValidationError;

        specialinvoke $r3.<com.android.internal.widget.PasswordValidationError: void <init>(int,int)>(1, 0);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        return $r4;
    }

    public int describeContents()
    {
        android.app.admin.PasswordMetrics r0;

        r0 := @this: android.app.admin.PasswordMetrics;

        return 0;
    }

    public int determineComplexity()
    {
        android.app.admin.PasswordMetrics r0;
        android.app.admin.PasswordMetrics$ComplexityBucket[] r1;
        int i0, $i1, i2;
        android.app.admin.PasswordMetrics$ComplexityBucket r2;
        java.lang.IllegalStateException $r3;
        boolean $z0;

        r0 := @this: android.app.admin.PasswordMetrics;

        r1 = staticinvoke <android.app.admin.PasswordMetrics$ComplexityBucket: android.app.admin.PasswordMetrics$ComplexityBucket[] values()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r1[i2];

        $z0 = specialinvoke r0.<android.app.admin.PasswordMetrics: boolean satisfiesBucket(android.app.admin.PasswordMetrics$ComplexityBucket)>(r2);

        if $z0 == 0 goto label2;

        $i1 = r2.<android.app.admin.PasswordMetrics$ComplexityBucket: int mComplexityLevel>;

        return $i1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to figure out complexity for a given metrics");

        throw $r3;
    }

    public boolean equals(java.lang.Object)
    {
        android.app.admin.PasswordMetrics r0, r4;
        java.lang.Class $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.Object r3;
        boolean z0;

        r0 := @this: android.app.admin.PasswordMetrics;

        r3 := @parameter0: java.lang.Object;

        z0 = 1;

        if r0 != r3 goto label1;

        return 1;

     label1:
        if r3 == null goto label5;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label2;

        goto label5;

     label2:
        r4 = (android.app.admin.PasswordMetrics) r3;

        $i1 = r0.<android.app.admin.PasswordMetrics: int credType>;

        $i0 = r4.<android.app.admin.PasswordMetrics: int credType>;

        if $i1 != $i0 goto label3;

        $i3 = r0.<android.app.admin.PasswordMetrics: int length>;

        $i2 = r4.<android.app.admin.PasswordMetrics: int length>;

        if $i3 != $i2 goto label3;

        $i5 = r0.<android.app.admin.PasswordMetrics: int letters>;

        $i4 = r4.<android.app.admin.PasswordMetrics: int letters>;

        if $i5 != $i4 goto label3;

        $i7 = r0.<android.app.admin.PasswordMetrics: int upperCase>;

        $i6 = r4.<android.app.admin.PasswordMetrics: int upperCase>;

        if $i7 != $i6 goto label3;

        $i9 = r0.<android.app.admin.PasswordMetrics: int lowerCase>;

        $i8 = r4.<android.app.admin.PasswordMetrics: int lowerCase>;

        if $i9 != $i8 goto label3;

        $i11 = r0.<android.app.admin.PasswordMetrics: int numeric>;

        $i10 = r4.<android.app.admin.PasswordMetrics: int numeric>;

        if $i11 != $i10 goto label3;

        $i13 = r0.<android.app.admin.PasswordMetrics: int symbols>;

        $i12 = r4.<android.app.admin.PasswordMetrics: int symbols>;

        if $i13 != $i12 goto label3;

        $i15 = r0.<android.app.admin.PasswordMetrics: int nonLetter>;

        $i14 = r4.<android.app.admin.PasswordMetrics: int nonLetter>;

        if $i15 != $i14 goto label3;

        $i17 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        $i16 = r4.<android.app.admin.PasswordMetrics: int nonNumeric>;

        if $i17 != $i16 goto label3;

        $i19 = r0.<android.app.admin.PasswordMetrics: int seqLength>;

        $i18 = r4.<android.app.admin.PasswordMetrics: int seqLength>;

        if $i19 != $i18 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        return 0;
    }

    public int hashCode()
    {
        android.app.admin.PasswordMetrics r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Integer $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: android.app.admin.PasswordMetrics;

        $r1 = newarray (java.lang.Object)[10];

        $i0 = r0.<android.app.admin.PasswordMetrics: int credType>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<android.app.admin.PasswordMetrics: int length>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $i2 = r0.<android.app.admin.PasswordMetrics: int letters>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r4;

        $i3 = r0.<android.app.admin.PasswordMetrics: int upperCase>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[3] = $r5;

        $i4 = r0.<android.app.admin.PasswordMetrics: int lowerCase>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r1[4] = $r6;

        $i5 = r0.<android.app.admin.PasswordMetrics: int numeric>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[5] = $r7;

        $i6 = r0.<android.app.admin.PasswordMetrics: int symbols>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r1[6] = $r8;

        $i7 = r0.<android.app.admin.PasswordMetrics: int nonLetter>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r1[7] = $r9;

        $i8 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r1[8] = $r10;

        $i9 = r0.<android.app.admin.PasswordMetrics: int seqLength>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r1[9] = $r11;

        $i10 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i10;
    }

    public void maxWith(android.app.admin.PasswordMetrics)
    {
        android.app.admin.PasswordMetrics r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;

        r0 := @this: android.app.admin.PasswordMetrics;

        r1 := @parameter0: android.app.admin.PasswordMetrics;

        $i2 = r0.<android.app.admin.PasswordMetrics: int credType>;

        $i1 = r1.<android.app.admin.PasswordMetrics: int credType>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i1);

        r0.<android.app.admin.PasswordMetrics: int credType> = i0;

        if i0 == 4 goto label1;

        return;

     label1:
        $i4 = r0.<android.app.admin.PasswordMetrics: int length>;

        $i3 = r1.<android.app.admin.PasswordMetrics: int length>;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

        r0.<android.app.admin.PasswordMetrics: int length> = $i5;

        $i7 = r0.<android.app.admin.PasswordMetrics: int letters>;

        $i6 = r1.<android.app.admin.PasswordMetrics: int letters>;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        r0.<android.app.admin.PasswordMetrics: int letters> = $i8;

        $i10 = r0.<android.app.admin.PasswordMetrics: int upperCase>;

        $i9 = r1.<android.app.admin.PasswordMetrics: int upperCase>;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i9);

        r0.<android.app.admin.PasswordMetrics: int upperCase> = $i11;

        $i13 = r0.<android.app.admin.PasswordMetrics: int lowerCase>;

        $i12 = r1.<android.app.admin.PasswordMetrics: int lowerCase>;

        $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i12);

        r0.<android.app.admin.PasswordMetrics: int lowerCase> = $i14;

        $i16 = r0.<android.app.admin.PasswordMetrics: int numeric>;

        $i15 = r1.<android.app.admin.PasswordMetrics: int numeric>;

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>($i16, $i15);

        r0.<android.app.admin.PasswordMetrics: int numeric> = $i17;

        $i19 = r0.<android.app.admin.PasswordMetrics: int symbols>;

        $i18 = r1.<android.app.admin.PasswordMetrics: int symbols>;

        $i20 = staticinvoke <java.lang.Math: int max(int,int)>($i19, $i18);

        r0.<android.app.admin.PasswordMetrics: int symbols> = $i20;

        $i22 = r0.<android.app.admin.PasswordMetrics: int nonLetter>;

        $i21 = r1.<android.app.admin.PasswordMetrics: int nonLetter>;

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>($i22, $i21);

        r0.<android.app.admin.PasswordMetrics: int nonLetter> = $i23;

        $i25 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        $i24 = r1.<android.app.admin.PasswordMetrics: int nonNumeric>;

        $i26 = staticinvoke <java.lang.Math: int max(int,int)>($i25, $i24);

        r0.<android.app.admin.PasswordMetrics: int nonNumeric> = $i26;

        $i28 = r0.<android.app.admin.PasswordMetrics: int seqLength>;

        $i27 = r1.<android.app.admin.PasswordMetrics: int seqLength>;

        $i29 = staticinvoke <java.lang.Math: int min(int,int)>($i28, $i27);

        r0.<android.app.admin.PasswordMetrics: int seqLength> = $i29;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.app.admin.PasswordMetrics r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.app.admin.PasswordMetrics;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $i1 = r0.<android.app.admin.PasswordMetrics: int credType>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<android.app.admin.PasswordMetrics: int length>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<android.app.admin.PasswordMetrics: int letters>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $i4 = r0.<android.app.admin.PasswordMetrics: int upperCase>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $i5 = r0.<android.app.admin.PasswordMetrics: int lowerCase>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $i6 = r0.<android.app.admin.PasswordMetrics: int numeric>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i6);

        $i7 = r0.<android.app.admin.PasswordMetrics: int symbols>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i7);

        $i8 = r0.<android.app.admin.PasswordMetrics: int nonLetter>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i8);

        $i9 = r0.<android.app.admin.PasswordMetrics: int nonNumeric>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i9);

        $i10 = r0.<android.app.admin.PasswordMetrics: int seqLength>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i10);

        return;
    }
}
