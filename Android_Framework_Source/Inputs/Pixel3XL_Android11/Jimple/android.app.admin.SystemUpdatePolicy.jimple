public final class android.app.admin.SystemUpdatePolicy extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    static final int FREEZE_PERIOD_MAX_LENGTH;
    static final int FREEZE_PERIOD_MIN_SEPARATION;
    private static final java.lang.String KEY_FREEZE_END;
    private static final java.lang.String KEY_FREEZE_START;
    private static final java.lang.String KEY_FREEZE_TAG;
    private static final java.lang.String KEY_INSTALL_WINDOW_END;
    private static final java.lang.String KEY_INSTALL_WINDOW_START;
    private static final java.lang.String KEY_POLICY_TYPE;
    private static final java.lang.String TAG;
    public static final int TYPE_INSTALL_AUTOMATIC;
    public static final int TYPE_INSTALL_WINDOWED;
    public static final int TYPE_PAUSE;
    public static final int TYPE_POSTPONE;
    private static final int TYPE_UNKNOWN;
    private static final int WINDOW_BOUNDARY;
    private final java.util.ArrayList mFreezePeriods;
    private int mMaintenanceWindowEnd;
    private int mMaintenanceWindowStart;
    private int mPolicyType;

    static void <clinit>()
    {
        android.app.admin.SystemUpdatePolicy$1 $r0;

        <android.app.admin.SystemUpdatePolicy: int WINDOW_BOUNDARY> = 1440;

        <android.app.admin.SystemUpdatePolicy: int TYPE_UNKNOWN> = -1;

        <android.app.admin.SystemUpdatePolicy: int TYPE_POSTPONE> = 3;

        <android.app.admin.SystemUpdatePolicy: int TYPE_PAUSE> = 4;

        <android.app.admin.SystemUpdatePolicy: int TYPE_INSTALL_WINDOWED> = 2;

        <android.app.admin.SystemUpdatePolicy: int TYPE_INSTALL_AUTOMATIC> = 1;

        <android.app.admin.SystemUpdatePolicy: java.lang.String TAG> = "SystemUpdatePolicy";

        <android.app.admin.SystemUpdatePolicy: java.lang.String KEY_POLICY_TYPE> = "policy_type";

        <android.app.admin.SystemUpdatePolicy: java.lang.String KEY_INSTALL_WINDOW_START> = "install_window_start";

        <android.app.admin.SystemUpdatePolicy: java.lang.String KEY_INSTALL_WINDOW_END> = "install_window_end";

        <android.app.admin.SystemUpdatePolicy: java.lang.String KEY_FREEZE_TAG> = "freeze";

        <android.app.admin.SystemUpdatePolicy: java.lang.String KEY_FREEZE_START> = "start";

        <android.app.admin.SystemUpdatePolicy: java.lang.String KEY_FREEZE_END> = "end";

        <android.app.admin.SystemUpdatePolicy: int FREEZE_PERIOD_MIN_SEPARATION> = 60;

        <android.app.admin.SystemUpdatePolicy: int FREEZE_PERIOD_MAX_LENGTH> = 90;

        $r0 = new android.app.admin.SystemUpdatePolicy$1;

        specialinvoke $r0.<android.app.admin.SystemUpdatePolicy$1: void <init>()>();

        <android.app.admin.SystemUpdatePolicy: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    private void <init>()
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.util.ArrayList $r1;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType> = -1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods> = $r1;

        return;
    }

    void <init>(android.app.admin.SystemUpdatePolicy$1)
    {
        android.app.admin.SystemUpdatePolicy r0;
        android.app.admin.SystemUpdatePolicy$1 r1;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        r1 := @parameter0: android.app.admin.SystemUpdatePolicy$1;

        specialinvoke r0.<android.app.admin.SystemUpdatePolicy: void <init>()>();

        return;
    }

    static int access$202(android.app.admin.SystemUpdatePolicy, int)
    {
        android.app.admin.SystemUpdatePolicy r0;
        int i0;

        r0 := @parameter0: android.app.admin.SystemUpdatePolicy;

        i0 := @parameter1: int;

        r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType> = i0;

        return i0;
    }

    static int access$302(android.app.admin.SystemUpdatePolicy, int)
    {
        android.app.admin.SystemUpdatePolicy r0;
        int i0;

        r0 := @parameter0: android.app.admin.SystemUpdatePolicy;

        i0 := @parameter1: int;

        r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart> = i0;

        return i0;
    }

    static int access$402(android.app.admin.SystemUpdatePolicy, int)
    {
        android.app.admin.SystemUpdatePolicy r0;
        int i0;

        r0 := @parameter0: android.app.admin.SystemUpdatePolicy;

        i0 := @parameter1: int;

        r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd> = i0;

        return i0;
    }

    static java.util.ArrayList access$500(android.app.admin.SystemUpdatePolicy)
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.app.admin.SystemUpdatePolicy;

        $r1 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        return $r1;
    }

    public static android.app.admin.SystemUpdatePolicy createAutomaticInstallPolicy()
    {
        android.app.admin.SystemUpdatePolicy $r1;

        $r1 = new android.app.admin.SystemUpdatePolicy;

        specialinvoke $r1.<android.app.admin.SystemUpdatePolicy: void <init>()>();

        $r1.<android.app.admin.SystemUpdatePolicy: int mPolicyType> = 1;

        return $r1;
    }

    public static android.app.admin.SystemUpdatePolicy createPostponeInstallPolicy()
    {
        android.app.admin.SystemUpdatePolicy $r1;

        $r1 = new android.app.admin.SystemUpdatePolicy;

        specialinvoke $r1.<android.app.admin.SystemUpdatePolicy: void <init>()>();

        $r1.<android.app.admin.SystemUpdatePolicy: int mPolicyType> = 3;

        return $r1;
    }

    public static android.app.admin.SystemUpdatePolicy createWindowedInstallPolicy(int, int)
    {
        int i0, i1;
        android.app.admin.SystemUpdatePolicy $r1;
        java.lang.IllegalArgumentException $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 >= 1440 goto label1;

        if i1 < 0 goto label1;

        if i1 >= 1440 goto label1;

        $r1 = new android.app.admin.SystemUpdatePolicy;

        specialinvoke $r1.<android.app.admin.SystemUpdatePolicy: void <init>()>();

        $r1.<android.app.admin.SystemUpdatePolicy: int mPolicyType> = 2;

        $r1.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart> = i0;

        $r1.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd> = i1;

        return $r1;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("startTime and endTime must be inside [0, 1440)");

        throw $r2;
    }

    private static long dateToMillis(java.time.LocalDate)
    {
        java.time.LocalDate r0;
        java.time.LocalTime $r1;
        java.time.LocalDateTime $r2;
        java.time.ZoneId $r3;
        java.time.ZonedDateTime $r4;
        java.time.Instant $r5;
        long $l0;

        r0 := @parameter0: java.time.LocalDate;

        $r1 = <java.time.LocalTime: java.time.LocalTime MIN>;

        $r2 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>(r0, $r1);

        $r3 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();

        $r4 = virtualinvoke $r2.<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>($r3);

        $r5 = virtualinvoke $r4.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l0 = virtualinvoke $r5.<java.time.Instant: long toEpochMilli()>();

        return $l0;
    }

    private android.app.admin.SystemUpdatePolicy$InstallationOption getInstallationOptionRegardlessFreezeAt(long)
    {
        android.app.admin.SystemUpdatePolicy r0;
        int i0, $i4, $i5, $i8, $i12, $i16, $i18, $i20;
        java.util.Calendar r1;
        long l1, l2, l3, $l6, $l7, $l9, $l10, $l11, $l13, $l14, $l15, $l17, $l19, $l21, $l24, $l25, $l26, l30, l31, $l32, $l33, $l34;
        android.app.admin.SystemUpdatePolicy$InstallationOption $r2, $r10, $r11;
        java.lang.RuntimeException $r3;
        java.util.concurrent.TimeUnit $r4, $r5, $r6, $r7, $r8, $r9;
        byte $b22, $b23, $b27, $b28, $b29;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        l30 := @parameter0: long;

        i0 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        if i0 == 1 goto label6;

        if i0 != 3 goto label1;

        goto label6;

     label1:
        if i0 != 2 goto label5;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke r1.<java.util.Calendar: void setTimeInMillis(long)>(l30);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(11);

        $l6 = (long) $i5;

        $l7 = virtualinvoke $r4.<java.util.concurrent.TimeUnit: long toMillis(long)>($l6);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $i8 = virtualinvoke r1.<java.util.Calendar: int get(int)>(12);

        $l9 = (long) $i8;

        $l10 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>($l9);

        $l11 = $l7 + $l10;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i12 = virtualinvoke r1.<java.util.Calendar: int get(int)>(13);

        $l13 = (long) $i12;

        $l14 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: long toMillis(long)>($l13);

        $l15 = $l11 + $l14;

        $i16 = virtualinvoke r1.<java.util.Calendar: int get(int)>(14);

        $l17 = (long) $i16;

        l1 = $l15 + $l17;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $i18 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart>;

        $l19 = (long) $i18;

        l31 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l19);

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $i20 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd>;

        $l21 = (long) $i20;

        l2 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toMillis(long)>($l21);

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        l3 = virtualinvoke $r9.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        $b22 = l31 cmp l1;

        if $b22 > 0 goto label2;

        $b29 = l1 cmp l2;

        if $b29 <= 0 goto label3;

     label2:
        $b23 = l31 cmp l2;

        if $b23 <= 0 goto label4;

        $b27 = l31 cmp l1;

        if $b27 <= 0 goto label3;

        $b28 = l1 cmp l2;

        if $b28 > 0 goto label4;

     label3:
        $r11 = new android.app.admin.SystemUpdatePolicy$InstallationOption;

        $l32 = l2 - l1;

        $l33 = $l32 + l3;

        $l34 = $l33 % l3;

        specialinvoke $r11.<android.app.admin.SystemUpdatePolicy$InstallationOption: void <init>(int,long)>(1, $l34);

        return $r11;

     label4:
        $r10 = new android.app.admin.SystemUpdatePolicy$InstallationOption;

        $l24 = l31 - l1;

        $l25 = $l24 + l3;

        $l26 = $l25 % l3;

        specialinvoke $r10.<android.app.admin.SystemUpdatePolicy$InstallationOption: void <init>(int,long)>(4, $l26);

        return $r10;

     label5:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown policy type");

        throw $r3;

     label6:
        $r2 = new android.app.admin.SystemUpdatePolicy$InstallationOption;

        $i4 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        specialinvoke $r2.<android.app.admin.SystemUpdatePolicy$InstallationOption: void <init>(int,long)>($i4, 9223372036854775807L);

        return $r2;
    }

    static java.lang.String lambda$toString$0(android.app.admin.FreezePeriod)
    {
        android.app.admin.FreezePeriod r0;
        java.lang.String $r1;

        r0 := @parameter0: android.app.admin.FreezePeriod;

        $r1 = virtualinvoke r0.<android.app.admin.FreezePeriod: java.lang.String toString()>();

        return $r1;
    }

    private static java.time.LocalDate millisToDate(long)
    {
        long l0;
        java.time.Instant $r0;
        java.time.ZoneId $r1;
        java.time.ZonedDateTime $r2;
        java.time.LocalDate $r3;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>(l0);

        $r1 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();

        $r2 = virtualinvoke $r0.<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>($r1);

        $r3 = virtualinvoke $r2.<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>();

        return $r3;
    }

    public static android.app.admin.SystemUpdatePolicy restoreFromXml(org.xmlpull.v1.XmlPullParser)
    {
        android.app.admin.SystemUpdatePolicy r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.app.admin.FreezePeriod r1;
        java.lang.String $r2, $r3, $r5, r9, r10, r11;
        boolean $z0;
        java.time.MonthDay $r4, $r6;
        java.lang.Throwable $r7;
        org.xmlpull.v1.XmlPullParser r8;
        java.util.ArrayList r12;

        r8 := @parameter0: org.xmlpull.v1.XmlPullParser;

     label01:
        r0 = new android.app.admin.SystemUpdatePolicy;

        specialinvoke r0.<android.app.admin.SystemUpdatePolicy: void <init>()>();

        r9 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "policy_type");

     label02:
        if r9 == null goto label19;

     label03:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r9);

        r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType> = $i2;

        r10 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "install_window_start");

     label04:
        if r10 == null goto label06;

     label05:
        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r10);

        r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart> = $i5;

     label06:
        r11 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "install_window_end");

     label07:
        if r11 == null goto label09;

     label08:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd> = $i4;

     label09:
        i0 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label10:
        i1 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: int next()>();

     label11:
        if i1 == 1 goto label18;

        if i1 != 3 goto label13;

     label12:
        $i3 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i3 <= i0 goto label18;

     label13:
        if i1 == 3 goto label10;

        if i1 != 4 goto label14;

        goto label10;

     label14:
        $r2 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("freeze");

        if $z0 != 0 goto label16;

     label15:
        goto label10;

     label16:
        r12 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        r1 = new android.app.admin.FreezePeriod;

        $r3 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "start");

        $r4 = staticinvoke <java.time.MonthDay: java.time.MonthDay parse(java.lang.CharSequence)>($r3);

        $r5 = interfaceinvoke r8.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "end");

        $r6 = staticinvoke <java.time.MonthDay: java.time.MonthDay parse(java.lang.CharSequence)>($r5);

        specialinvoke r1.<android.app.admin.FreezePeriod: void <init>(java.time.MonthDay,java.time.MonthDay)>($r4, $r6);

        virtualinvoke r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label17:
        goto label10;

     label18:
        return r0;

     label19:
        goto label21;

     label20:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemUpdatePolicy", "Load xml failed", $r7);

     label21:
        return null;

        catch java.lang.NumberFormatException from label01 to label02 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label20;
        catch java.io.IOException from label01 to label02 with label20;
        catch java.lang.NumberFormatException from label03 to label04 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label20;
        catch java.io.IOException from label03 to label04 with label20;
        catch java.lang.NumberFormatException from label05 to label06 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label20;
        catch java.io.IOException from label05 to label06 with label20;
        catch java.lang.NumberFormatException from label06 to label07 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label20;
        catch java.io.IOException from label06 to label07 with label20;
        catch java.lang.NumberFormatException from label08 to label09 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label20;
        catch java.io.IOException from label08 to label09 with label20;
        catch java.lang.NumberFormatException from label09 to label10 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label20;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.lang.NumberFormatException from label10 to label11 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label20;
        catch java.io.IOException from label10 to label11 with label20;
        catch java.lang.NumberFormatException from label12 to label13 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label20;
        catch java.io.IOException from label12 to label13 with label20;
        catch java.lang.NumberFormatException from label14 to label15 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label20;
        catch java.io.IOException from label14 to label15 with label20;
        catch java.lang.NumberFormatException from label16 to label17 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label20;
        catch java.io.IOException from label16 to label17 with label20;
    }

    private static java.time.LocalDate roundUpLeapDay(java.time.LocalDate)
    {
        java.time.LocalDate r0, $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: java.time.LocalDate;

        $z0 = virtualinvoke r0.<java.time.LocalDate: boolean isLeapYear()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.time.LocalDate: int getMonthValue()>();

        if $i0 != 2 goto label1;

        $i1 = virtualinvoke r0.<java.time.LocalDate: int getDayOfMonth()>();

        if $i1 != 28 goto label1;

        $r1 = virtualinvoke r0.<java.time.LocalDate: java.time.LocalDate plusDays(long)>(1L);

        return $r1;

     label1:
        return r0;
    }

    private long timeUntilNextFreezePeriod(long)
    {
        android.app.admin.SystemUpdatePolicy r0;
        long l0, $l1, $l2;
        java.util.List r1;
        java.time.LocalDate r2, r13, r15;
        java.util.Iterator r3;
        java.util.ArrayList $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r8, $r9, $r12;
        android.app.admin.FreezePeriod $r6, r14;
        android.util.Pair $r7, $r11;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        l0 := @parameter0: long;

        $r4 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        r1 = staticinvoke <android.app.admin.FreezePeriod: java.util.List canonicalizePeriods(java.util.List)>($r4);

        r2 = staticinvoke <android.app.admin.SystemUpdatePolicy: java.time.LocalDate millisToDate(long)>(l0);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        r13 = null;

        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (android.app.admin.FreezePeriod) $r9;

        $z1 = virtualinvoke r14.<android.app.admin.FreezePeriod: boolean after(java.time.LocalDate)>(r2);

        if $z1 == 0 goto label2;

        $r11 = virtualinvoke r14.<android.app.admin.FreezePeriod: android.util.Pair toCurrentOrFutureRealDates(java.time.LocalDate)>(r2);

        $r12 = $r11.<android.util.Pair: java.lang.Object first>;

        r13 = (java.time.LocalDate) $r12;

        goto label4;

     label2:
        $z2 = virtualinvoke r14.<android.app.admin.FreezePeriod: boolean contains(java.time.LocalDate)>(r2);

        if $z2 != 0 goto label3;

        goto label1;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given date is inside a freeze period");

        throw $r10;

     label4:
        r15 = r13;

        if r13 != null goto label5;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (android.app.admin.FreezePeriod) $r5;

        $r7 = virtualinvoke $r6.<android.app.admin.FreezePeriod: android.util.Pair toCurrentOrFutureRealDates(java.time.LocalDate)>(r2);

        $r8 = $r7.<android.util.Pair: java.lang.Object first>;

        r15 = (java.time.LocalDate) $r8;

     label5:
        $l1 = staticinvoke <android.app.admin.SystemUpdatePolicy: long dateToMillis(java.time.LocalDate)>(r15);

        $l2 = $l1 - l0;

        return $l2;
    }

    public int describeContents()
    {
        android.app.admin.SystemUpdatePolicy r0;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        return 0;
    }

    public android.util.Pair getCurrentFreezePeriod(java.time.LocalDate)
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.time.LocalDate r1;
        java.util.Iterator r2;
        android.app.admin.FreezePeriod r3;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        android.util.Pair $r6;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        r1 := @parameter0: java.time.LocalDate;

        $r4 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.app.admin.FreezePeriod) $r5;

        $z1 = virtualinvoke r3.<android.app.admin.FreezePeriod: boolean contains(java.time.LocalDate)>(r1);

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r3.<android.app.admin.FreezePeriod: android.util.Pair toCurrentOrFutureRealDates(java.time.LocalDate)>(r1);

        return $r6;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.util.List getFreezePeriods()
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        $r1 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public int getInstallWindowEnd()
    {
        android.app.admin.SystemUpdatePolicy r0;
        int $i0, $i1;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        $i0 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        if $i0 != 2 goto label1;

        $i1 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd>;

        return $i1;

     label1:
        return -1;
    }

    public int getInstallWindowStart()
    {
        android.app.admin.SystemUpdatePolicy r0;
        int $i0, $i1;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        $i0 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        if $i0 != 2 goto label1;

        $i1 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart>;

        return $i1;

     label1:
        return -1;
    }

    public android.app.admin.SystemUpdatePolicy$InstallationOption getInstallationOptionAt(long)
    {
        android.app.admin.SystemUpdatePolicy r0;
        long l0, $l2, $l3, $l4;
        java.time.LocalDate $r1, $r5, $r6, $r7;
        java.util.ArrayList $r2;
        int $i1;
        android.app.admin.SystemUpdatePolicy$InstallationOption $r3, r9;
        java.lang.Object $r4;
        android.util.Pair r8;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        l0 := @parameter0: long;

        $r1 = staticinvoke <android.app.admin.SystemUpdatePolicy: java.time.LocalDate millisToDate(long)>(l0);

        r8 = virtualinvoke r0.<android.app.admin.SystemUpdatePolicy: android.util.Pair getCurrentFreezePeriod(java.time.LocalDate)>($r1);

        if r8 == null goto label1;

        $r3 = new android.app.admin.SystemUpdatePolicy$InstallationOption;

        $r4 = r8.<android.util.Pair: java.lang.Object second>;

        $r5 = (java.time.LocalDate) $r4;

        $r6 = staticinvoke <android.app.admin.SystemUpdatePolicy: java.time.LocalDate roundUpLeapDay(java.time.LocalDate)>($r5);

        $r7 = virtualinvoke $r6.<java.time.LocalDate: java.time.LocalDate plusDays(long)>(1L);

        $l3 = staticinvoke <android.app.admin.SystemUpdatePolicy: long dateToMillis(java.time.LocalDate)>($r7);

        $l4 = $l3 - l0;

        specialinvoke $r3.<android.app.admin.SystemUpdatePolicy$InstallationOption: void <init>(int,long)>(4, $l4);

        return $r3;

     label1:
        r9 = specialinvoke r0.<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy$InstallationOption getInstallationOptionRegardlessFreezeAt(long)>(l0);

        $r2 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label2;

        $l2 = specialinvoke r0.<android.app.admin.SystemUpdatePolicy: long timeUntilNextFreezePeriod(long)>(l0);

        virtualinvoke r9.<android.app.admin.SystemUpdatePolicy$InstallationOption: void limitEffectiveTime(long)>($l2);

     label2:
        return r9;
    }

    public int getPolicyType()
    {
        android.app.admin.SystemUpdatePolicy r0;
        int $i0;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        $i0 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        return $i0;
    }

    public boolean isValid()
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.lang.Throwable $r2;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

     label1:
        virtualinvoke r0.<android.app.admin.SystemUpdatePolicy: void validateType()>();

        virtualinvoke r0.<android.app.admin.SystemUpdatePolicy: void validateFreezePeriods()>();

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        android.app.admin.SystemUpdatePolicy r0;
        org.xmlpull.v1.XmlSerializer r1;
        android.app.admin.FreezePeriod r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r3, $r5, $r7, $r14, $r17;
        java.util.ArrayList $r9, $r10;
        java.lang.Object $r11;
        java.time.MonthDay $r13, $r16;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $i0 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "policy_type", $r3);

        $i1 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "install_window_start", $r5);

        $i2 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "install_window_end", $r7);

        i4 = 0;

     label1:
        $r9 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        $i3 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if i4 >= $i3 goto label2;

        $r10 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r2 = (android.app.admin.FreezePeriod) $r11;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "freeze");

        $r13 = virtualinvoke r2.<android.app.admin.FreezePeriod: java.time.MonthDay getStart()>();

        $r14 = virtualinvoke $r13.<java.time.MonthDay: java.lang.String toString()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "start", $r14);

        $r16 = virtualinvoke r2.<android.app.admin.FreezePeriod: java.time.MonthDay getEnd()>();

        $r17 = virtualinvoke $r16.<java.time.MonthDay: java.lang.String toString()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "end", $r17);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "freeze");

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public android.app.admin.SystemUpdatePolicy setFreezePeriods(java.util.List)
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.util.List r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        r1 := @parameter0: java.util.List;

        staticinvoke <android.app.admin.FreezePeriod: void validatePeriods(java.util.List)>(r1);

        $r2 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r3 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    public java.lang.String toString()
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.Integer $r2, $r3, $r4;
        java.util.ArrayList $r5;
        java.util.stream.Stream $r6, $r8;
        android.app.admin.'-$$Lambda$SystemUpdatePolicy$cfrSWvZcAu30PIPvKA2LGQbmTew' $r7;
        java.util.stream.Collector $r9;
        java.lang.Object $r10;
        java.lang.String $r11;
        java.util.function.Function r12;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        $r1 = newarray (java.lang.Object)[4];

        $i0 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $i2 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r4;

        $r5 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.util.stream.Stream stream()>();

        $r7 = <android.app.admin._$$Lambda$SystemUpdatePolicy$cfrSWvZcAu30PIPvKA2LGQbmTew: android.app.admin.'-$$Lambda$SystemUpdatePolicy$cfrSWvZcAu30PIPvKA2LGQbmTew' INSTANCE>;

        r12 = (java.util.function.Function) $r7;

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r12);

        $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(",");

        $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9);

        $r1[3] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("SystemUpdatePolicy (type: %d, windowStart: %d, windowEnd: %d, freezes: [%s])", $r1);

        return $r11;
    }

    public void validateAgainstPreviousFreezePeriod(java.time.LocalDate, java.time.LocalDate, java.time.LocalDate)
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.time.LocalDate r1, r2, r3;
        java.util.ArrayList $r4;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: java.time.LocalDate;

        r3 := @parameter2: java.time.LocalDate;

        $r4 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        staticinvoke <android.app.admin.FreezePeriod: void validateAgainstPreviousFreezePeriod(java.util.List,java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)>($r4, r1, r2, r3);

        return;
    }

    public void validateFreezePeriods()
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.util.ArrayList $r1;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        $r1 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        staticinvoke <android.app.admin.FreezePeriod: void validatePeriods(java.util.List)>($r1);

        return;
    }

    public void validateType()
    {
        android.app.admin.SystemUpdatePolicy r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int i0, i1, i2;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        i0 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        if i0 == 1 goto label4;

        if i0 != 3 goto label1;

        goto label4;

     label1:
        if i0 != 2 goto label3;

        i1 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart>;

        if i1 < 0 goto label2;

        if i1 >= 1440 goto label2;

        i2 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd>;

        if i2 < 0 goto label2;

        if i2 >= 1440 goto label2;

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid maintenance window");

        throw $r2;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid system update policy type.");

        throw $r1;

     label4:
        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.app.admin.SystemUpdatePolicy r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        android.app.admin.FreezePeriod r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        java.time.MonthDay $r6, $r7, $r8, $r9;

        r0 := @this: android.app.admin.SystemUpdatePolicy;

        r1 := @parameter0: android.os.Parcel;

        i8 := @parameter1: int;

        $i1 = r0.<android.app.admin.SystemUpdatePolicy: int mPolicyType>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowStart>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<android.app.admin.SystemUpdatePolicy: int mMaintenanceWindowEnd>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $r3 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        i9 = 0;

     label1:
        if i9 >= i0 goto label2;

        $r4 = r0.<android.app.admin.SystemUpdatePolicy: java.util.ArrayList mFreezePeriods>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r2 = (android.app.admin.FreezePeriod) $r5;

        $r6 = virtualinvoke r2.<android.app.admin.FreezePeriod: java.time.MonthDay getStart()>();

        $i4 = virtualinvoke $r6.<java.time.MonthDay: int getMonthValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $r7 = virtualinvoke r2.<android.app.admin.FreezePeriod: java.time.MonthDay getStart()>();

        $i5 = virtualinvoke $r7.<java.time.MonthDay: int getDayOfMonth()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $r8 = virtualinvoke r2.<android.app.admin.FreezePeriod: java.time.MonthDay getEnd()>();

        $i6 = virtualinvoke $r8.<java.time.MonthDay: int getMonthValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i6);

        $r9 = virtualinvoke r2.<android.app.admin.FreezePeriod: java.time.MonthDay getEnd()>();

        $i7 = virtualinvoke $r9.<java.time.MonthDay: int getDayOfMonth()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i7);

        i9 = i9 + 1;

        goto label1;

     label2:
        return;
    }
}
