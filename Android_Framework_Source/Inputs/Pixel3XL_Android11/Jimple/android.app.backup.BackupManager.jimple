public class android.app.backup.BackupManager extends java.lang.Object
{
    public static final int ERROR_AGENT_FAILURE;
    public static final int ERROR_BACKUP_CANCELLED;
    public static final int ERROR_BACKUP_NOT_ALLOWED;
    public static final int ERROR_PACKAGE_NOT_FOUND;
    public static final int ERROR_TRANSPORT_ABORTED;
    public static final int ERROR_TRANSPORT_INVALID;
    public static final int ERROR_TRANSPORT_PACKAGE_REJECTED;
    public static final int ERROR_TRANSPORT_QUOTA_EXCEEDED;
    public static final int ERROR_TRANSPORT_UNAVAILABLE;
    public static final java.lang.String EXTRA_BACKUP_SERVICES_AVAILABLE;
    public static final int FLAG_NON_INCREMENTAL_BACKUP;
    public static final java.lang.String PACKAGE_MANAGER_SENTINEL;
    public static final int SUCCESS;
    private static final java.lang.String TAG;
    private static android.app.backup.IBackupManager sService;
    private android.content.Context mContext;

    public void <init>(android.content.Context)
    {
        android.app.backup.BackupManager r0;
        android.content.Context r1;

        r0 := @this: android.app.backup.BackupManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.backup.BackupManager: android.content.Context mContext> = r1;

        return;
    }

    private static void checkServiceBinder()
    {
        android.app.backup.IBackupManager $r0, $r2;
        android.os.IBinder $r1;

        $r0 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("backup");

        $r2 = staticinvoke <android.app.backup.IBackupManager$Stub: android.app.backup.IBackupManager asInterface(android.os.IBinder)>($r1);

        <android.app.backup.BackupManager: android.app.backup.IBackupManager sService> = $r2;

     label1:
        return;
    }

    public static void dataChanged(java.lang.String)
    {
        android.app.backup.IBackupManager r0;
        android.os.RemoteException $r1;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r0 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "dataChanged(pkg) couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void backupNow()
    {
        android.app.backup.BackupManager r0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.backup.IBackupManager: void backupNow()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "backupNow() couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.backup.RestoreSession beginRestoreSession()
    {
        android.app.backup.BackupManager r0;
        android.content.Context $r1, $r2;
        int $i0;
        android.os.RemoteException $r3;
        android.app.backup.IBackupManager r4;
        android.app.backup.RestoreSession r5;
        android.app.backup.IRestoreSession r6;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r4 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        r5 = null;

        if r4 == null goto label6;

     label1:
        $r1 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        r6 = interfaceinvoke r4.<android.app.backup.IBackupManager: android.app.backup.IRestoreSession beginRestoreSessionForUser(int,java.lang.String,java.lang.String)>($i0, null, null);

     label2:
        r5 = null;

        if r6 == null goto label4;

     label3:
        r5 = new android.app.backup.RestoreSession;

        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        specialinvoke r5.<android.app.backup.RestoreSession: void <init>(android.content.Context,android.app.backup.IRestoreSession)>($r2, r6);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "beginRestoreSession() couldn\'t connect");

        r5 = null;

     label6:
        return r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void cancelBackups()
    {
        android.app.backup.BackupManager r0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.backup.IBackupManager: void cancelBackups()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "cancelBackups() couldn\'t connect.");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dataChanged()
    {
        android.app.backup.BackupManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        android.app.backup.IBackupManager r4;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r4 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r4 == null goto label4;

     label1:
        $r1 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r4.<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BackupManager", "dataChanged() couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void excludeKeysFromRestore(java.lang.String, java.util.List)
    {
        android.app.backup.BackupManager r0;
        java.util.List r1;
        android.app.backup.IBackupManager r2;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.backup.IBackupManager: void excludeKeysFromRestore(java.lang.String,java.util.List)>(r4, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "excludeKeysFromRestore() couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getAvailableRestoreToken(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        long l0;
        android.content.Context $r2;
        int $i1;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        l0 = interfaceinvoke r1.<android.app.backup.IBackupManager: long getAvailableRestoreTokenForUser(int,java.lang.String)>($i1, r4);

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getAvailableRestoreToken() couldn\'t connect");

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.Intent getConfigurationIntent(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        android.content.Context $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r4;
        android.content.Intent r5;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        r5 = interfaceinvoke r1.<android.app.backup.IBackupManager: android.content.Intent getConfigurationIntentForUser(int,java.lang.String)>($i0, r4);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getConfigurationIntent() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getCurrentTransport()
    {
        android.app.backup.BackupManager r0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;
        java.lang.String r3;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        r3 = interfaceinvoke r2.<android.app.backup.IBackupManager: java.lang.String getCurrentTransport()>();

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getCurrentTransport() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getCurrentTransportComponent()
    {
        android.app.backup.BackupManager r0;
        android.content.Context $r1;
        int $i0;
        android.os.RemoteException $r2;
        android.app.backup.IBackupManager r3;
        android.content.ComponentName r4;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r3 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r3 == null goto label4;

     label1:
        $r1 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        r4 = interfaceinvoke r3.<android.app.backup.IBackupManager: android.content.ComponentName getCurrentTransportComponentForUser(int)>($i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getCurrentTransportComponent() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.Intent getDataManagementIntent(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        android.content.Context $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r4;
        android.content.Intent r5;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        r5 = interfaceinvoke r1.<android.app.backup.IBackupManager: android.content.Intent getDataManagementIntentForUser(int,java.lang.String)>($i0, r4);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getDataManagementIntent() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.CharSequence getDataManagementIntentLabel(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        android.content.Context $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r4;
        java.lang.CharSequence r5;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        r5 = interfaceinvoke r1.<android.app.backup.IBackupManager: java.lang.CharSequence getDataManagementLabelForUser(int,java.lang.String)>($i0, r4);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getDataManagementIntentLabel() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDataManagementLabel(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        java.lang.String r1, r3;
        java.lang.CharSequence r2;

        r0 := @this: android.app.backup.BackupManager;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.app.backup.BackupManager: java.lang.CharSequence getDataManagementIntentLabel(java.lang.String)>(r1);

        if r2 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.String toString()>();

     label2:
        return r3;
    }

    public java.lang.String getDestinationString(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        android.content.Context $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r4, r5;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        r5 = interfaceinvoke r1.<android.app.backup.IBackupManager: java.lang.String getDestinationStringForUser(int,java.lang.String)>($i0, r4);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getDestinationString() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.UserHandle getUserForAncestralSerialNumber(long)
    {
        android.app.backup.BackupManager r0;
        long l0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;
        android.os.UserHandle r3;

        r0 := @this: android.app.backup.BackupManager;

        l0 := @parameter0: long;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        r3 = interfaceinvoke r2.<android.app.backup.IBackupManager: android.os.UserHandle getUserForAncestralSerialNumber(long)>(l0);

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "getUserForAncestralSerialNumber() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAppEligibleForBackup(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        boolean z0;
        android.content.Context $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int getUserId()>();

        z0 = interfaceinvoke r1.<android.app.backup.IBackupManager: boolean isAppEligibleForBackupForUser(int,java.lang.String)>($i0, r4);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "isAppEligibleForBackup(pkg) couldn\'t connect");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBackupEnabled()
    {
        android.app.backup.BackupManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.app.backup.IBackupManager: boolean isBackupEnabled()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "isBackupEnabled() couldn\'t connect");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBackupServiceActive(android.os.UserHandle)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        boolean z0;
        android.content.Context $r2;
        int $i0;
        android.os.RemoteException $r3;
        android.os.UserHandle r4;

        r0 := @this: android.app.backup.BackupManager;

        r4 := @parameter0: android.os.UserHandle;

        $r2 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "isBackupServiceActive");

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        z0 = interfaceinvoke r1.<android.app.backup.IBackupManager: boolean isBackupServiceActive(int)>($i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "isBackupEnabled() couldn\'t connect");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] listAllTransports()
    {
        android.app.backup.BackupManager r0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;
        java.lang.String[] r3;

        r0 := @this: android.app.backup.BackupManager;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        r3 = interfaceinvoke r2.<android.app.backup.IBackupManager: java.lang.String[] listAllTransports()>();

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "listAllTransports() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int requestBackup(java.lang.String[], android.app.backup.BackupObserver)
    {
        android.app.backup.BackupManager r0;
        java.lang.String[] r1;
        android.app.backup.BackupObserver r2;
        int $i0;

        r0 := @this: android.app.backup.BackupManager;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: android.app.backup.BackupObserver;

        $i0 = virtualinvoke r0.<android.app.backup.BackupManager: int requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)>(r1, r2, null, 0);

        return $i0;
    }

    public int requestBackup(java.lang.String[], android.app.backup.BackupObserver, android.app.backup.BackupManagerMonitor, int)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager $r1, $r5;
        android.app.backup.BackupManager$BackupObserverWrapper $r2, r10;
        android.content.Context $r3;
        android.app.backup.BackupManager$BackupManagerMonitorWrapper $r4, r11;
        android.os.RemoteException $r6;
        java.lang.String[] r7;
        android.app.backup.BackupObserver r8;
        android.app.backup.BackupManagerMonitor r9;
        int i0, i1;

        r0 := @this: android.app.backup.BackupManager;

        r7 := @parameter0: java.lang.String[];

        r8 := @parameter1: android.app.backup.BackupObserver;

        r9 := @parameter2: android.app.backup.BackupManagerMonitor;

        i0 := @parameter3: int;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        $r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if $r1 == null goto label7;

        if r8 != null goto label1;

        r10 = null;

        goto label2;

     label1:
        $r2 = new android.app.backup.BackupManager$BackupObserverWrapper;

        $r3 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        specialinvoke $r2.<android.app.backup.BackupManager$BackupObserverWrapper: void <init>(android.app.backup.BackupManager,android.content.Context,android.app.backup.BackupObserver)>(r0, $r3, r8);

        r10 = $r2;

     label2:
        if r9 != null goto label3;

        r11 = null;

        goto label4;

     label3:
        $r4 = new android.app.backup.BackupManager$BackupManagerMonitorWrapper;

        specialinvoke $r4.<android.app.backup.BackupManager$BackupManagerMonitorWrapper: void <init>(android.app.backup.BackupManager,android.app.backup.BackupManagerMonitor)>(r0, r9);

        r11 = $r4;

     label4:
        $r5 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        i1 = interfaceinvoke $r5.<android.app.backup.IBackupManager: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>(r7, r10, r11, i0);

     label5:
        return i1;

     label6:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "requestBackup() couldn\'t connect");

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public int requestRestore(android.app.backup.RestoreObserver)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.RestoreObserver r1;
        int $i0;

        r0 := @this: android.app.backup.BackupManager;

        r1 := @parameter0: android.app.backup.RestoreObserver;

        $i0 = virtualinvoke r0.<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor)>(r1, null);

        return $i0;
    }

    public int requestRestore(android.app.backup.RestoreObserver, android.app.backup.BackupManagerMonitor)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.RestoreObserver r1;
        android.app.backup.BackupManagerMonitor r2;

        r0 := @this: android.app.backup.BackupManager;

        r1 := @parameter0: android.app.backup.RestoreObserver;

        r2 := @parameter1: android.app.backup.BackupManagerMonitor;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BackupManager", "requestRestore(): Since Android P app can no longer request restoring of its backup.");

        return -1;
    }

    public java.lang.String selectBackupTransport(java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager r1;
        android.os.RemoteException $r2;
        java.lang.String r3, r4;

        r0 := @this: android.app.backup.BackupManager;

        r3 := @parameter0: java.lang.String;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r1 == null goto label4;

     label1:
        r4 = interfaceinvoke r1.<android.app.backup.IBackupManager: java.lang.String selectBackupTransport(java.lang.String)>(r3);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "selectBackupTransport() couldn\'t connect");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void selectBackupTransport(android.content.ComponentName, android.app.backup.SelectBackupTransportCallback)
    {
        android.app.backup.BackupManager r0;
        android.app.backup.IBackupManager $r1, $r5;
        android.app.backup.BackupManager$SelectTransportListenerWrapper $r2, r9;
        android.content.Context $r3, $r4;
        int $i0;
        android.os.RemoteException $r6;
        android.content.ComponentName r7;
        android.app.backup.SelectBackupTransportCallback r8;

        r0 := @this: android.app.backup.BackupManager;

        r7 := @parameter0: android.content.ComponentName;

        r8 := @parameter1: android.app.backup.SelectBackupTransportCallback;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        $r1 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if $r1 == null goto label5;

        if r8 != null goto label1;

        r9 = null;

        goto label2;

     label1:
        $r2 = new android.app.backup.BackupManager$SelectTransportListenerWrapper;

        $r3 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        specialinvoke $r2.<android.app.backup.BackupManager$SelectTransportListenerWrapper: void <init>(android.app.backup.BackupManager,android.content.Context,android.app.backup.SelectBackupTransportCallback)>(r0, $r3, r8);

        r9 = $r2;

     label2:
        $r5 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        $r4 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int getUserId()>();

        interfaceinvoke $r5.<android.app.backup.IBackupManager: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>($i0, r7, r9);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "selectBackupTransportAsync() couldn\'t connect");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setAncestralSerialNumber(long)
    {
        android.app.backup.BackupManager r0;
        long l0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;

        r0 := @this: android.app.backup.BackupManager;

        l0 := @parameter0: long;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.backup.IBackupManager: void setAncestralSerialNumber(long)>(l0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "setAncestralSerialNumber() couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAutoRestore(boolean)
    {
        android.app.backup.BackupManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;

        r0 := @this: android.app.backup.BackupManager;

        z0 := @parameter0: boolean;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.backup.IBackupManager: void setAutoRestore(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "setAutoRestore() couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBackupEnabled(boolean)
    {
        android.app.backup.BackupManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        android.app.backup.IBackupManager r2;

        r0 := @this: android.app.backup.BackupManager;

        z0 := @parameter0: boolean;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r2 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.backup.IBackupManager: void setBackupEnabled(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "setBackupEnabled() couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateTransportAttributes(android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.CharSequence)
    {
        android.app.backup.BackupManager r0;
        java.lang.String r1, r3;
        android.content.Intent r2, r4;
        java.lang.CharSequence r5;
        android.app.backup.IBackupManager r6;
        android.content.Context $r7;
        int $i0;
        android.os.RemoteException $r8;
        android.content.ComponentName r9;

        r0 := @this: android.app.backup.BackupManager;

        r9 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.Intent;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.content.Intent;

        r5 := @parameter5: java.lang.CharSequence;

        staticinvoke <android.app.backup.BackupManager: void checkServiceBinder()>();

        r6 = <android.app.backup.BackupManager: android.app.backup.IBackupManager sService>;

        if r6 == null goto label4;

     label1:
        $r7 = r0.<android.app.backup.BackupManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r7.<android.content.Context: int getUserId()>();

        interfaceinvoke r6.<android.app.backup.IBackupManager: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>($i0, r9, r1, r2, r3, r4, r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackupManager", "describeTransport() couldn\'t connect");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateTransportAttributes(android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.String)
    {
        android.app.backup.BackupManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, r4, r6;
        android.content.Intent r3, r5;

        r0 := @this: android.app.backup.BackupManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Intent;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.content.Intent;

        r6 := @parameter5: java.lang.String;

        virtualinvoke r0.<android.app.backup.BackupManager: void updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>(r1, r2, r3, r4, r5, r6);

        return;
    }

    public static void <clinit>()
    {
        <android.app.backup.BackupManager: java.lang.String TAG> = "BackupManager";

        <android.app.backup.BackupManager: int SUCCESS> = 0;

        <android.app.backup.BackupManager: java.lang.String PACKAGE_MANAGER_SENTINEL> = "@pm@";

        <android.app.backup.BackupManager: int FLAG_NON_INCREMENTAL_BACKUP> = 1;

        <android.app.backup.BackupManager: java.lang.String EXTRA_BACKUP_SERVICES_AVAILABLE> = "backup_services_available";

        <android.app.backup.BackupManager: int ERROR_TRANSPORT_UNAVAILABLE> = -1;

        <android.app.backup.BackupManager: int ERROR_TRANSPORT_QUOTA_EXCEEDED> = -1005;

        <android.app.backup.BackupManager: int ERROR_TRANSPORT_PACKAGE_REJECTED> = -1002;

        <android.app.backup.BackupManager: int ERROR_TRANSPORT_INVALID> = -2;

        <android.app.backup.BackupManager: int ERROR_TRANSPORT_ABORTED> = -1000;

        <android.app.backup.BackupManager: int ERROR_PACKAGE_NOT_FOUND> = -2002;

        <android.app.backup.BackupManager: int ERROR_BACKUP_NOT_ALLOWED> = -2001;

        <android.app.backup.BackupManager: int ERROR_BACKUP_CANCELLED> = -2003;

        <android.app.backup.BackupManager: int ERROR_AGENT_FAILURE> = -1003;

        return;
    }
}
