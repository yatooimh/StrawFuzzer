public class android.app.backup.FullBackup$BackupScheme extends java.lang.Object
{
    private static final java.lang.String TAG_EXCLUDE;
    private static final java.lang.String TAG_INCLUDE;
    private final java.io.File CACHE_DIR;
    private final java.io.File DATABASE_DIR;
    private final java.io.File DEVICE_CACHE_DIR;
    private final java.io.File DEVICE_DATABASE_DIR;
    private final java.io.File DEVICE_FILES_DIR;
    private final java.io.File DEVICE_NOBACKUP_DIR;
    private final java.io.File DEVICE_ROOT_DIR;
    private final java.io.File DEVICE_SHAREDPREF_DIR;
    private final java.io.File EXTERNAL_DIR;
    private final java.io.File FILES_DIR;
    private final java.io.File NOBACKUP_DIR;
    private final java.io.File ROOT_DIR;
    private final java.io.File SHAREDPREF_DIR;
    android.util.ArraySet mExcludes;
    final int mFullBackupContent;
    java.util.Map mIncludes;
    final android.content.pm.PackageManager mPackageManager;
    final java.lang.String mPackageName;
    final android.os.storage.StorageManager mStorageManager;
    private android.os.storage.StorageVolume[] mVolumes;

    void <init>(android.content.Context)
    {
        android.app.backup.FullBackup$BackupScheme r0;
        android.content.Context r1, r24, r25;
        android.content.pm.ApplicationInfo $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        android.os.storage.StorageManager $r4;
        android.content.pm.PackageManager $r5;
        java.lang.String $r6;
        java.io.File $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageVolume[] mVolumes> = null;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r2.<android.content.pm.ApplicationInfo: int fullBackupContent>;

        r0.<android.app.backup.FullBackup$BackupScheme: int mFullBackupContent> = $i0;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("storage");

        $r4 = (android.os.storage.StorageManager) $r3;

        r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageManager mStorageManager> = $r4;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<android.app.backup.FullBackup$BackupScheme: android.content.pm.PackageManager mPackageManager> = $r5;

        $r6 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.lang.String mPackageName> = $r6;

        r24 = virtualinvoke r1.<android.content.Context: android.content.Context createCredentialProtectedStorageContext()>();

        $r7 = virtualinvoke r24.<android.content.Context: java.io.File getFilesDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File FILES_DIR> = $r7;

        $r8 = virtualinvoke r24.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>("foo");

        $r9 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DATABASE_DIR> = $r9;

        $r10 = virtualinvoke r24.<android.content.Context: java.io.File getDataDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File ROOT_DIR> = $r10;

        $r11 = virtualinvoke r24.<android.content.Context: java.io.File getSharedPreferencesPath(java.lang.String)>("foo");

        $r12 = virtualinvoke $r11.<java.io.File: java.io.File getParentFile()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File SHAREDPREF_DIR> = $r12;

        $r13 = virtualinvoke r24.<android.content.Context: java.io.File getCacheDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File CACHE_DIR> = $r13;

        $r14 = virtualinvoke r24.<android.content.Context: java.io.File getNoBackupFilesDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File NOBACKUP_DIR> = $r14;

        r25 = virtualinvoke r1.<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>();

        $r15 = virtualinvoke r25.<android.content.Context: java.io.File getFilesDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_FILES_DIR> = $r15;

        $r16 = virtualinvoke r25.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>("foo");

        $r17 = virtualinvoke $r16.<java.io.File: java.io.File getParentFile()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_DATABASE_DIR> = $r17;

        $r18 = virtualinvoke r25.<android.content.Context: java.io.File getDataDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_ROOT_DIR> = $r18;

        $r19 = virtualinvoke r25.<android.content.Context: java.io.File getSharedPreferencesPath(java.lang.String)>("foo");

        $r20 = virtualinvoke $r19.<java.io.File: java.io.File getParentFile()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_SHAREDPREF_DIR> = $r20;

        $r21 = virtualinvoke r25.<android.content.Context: java.io.File getCacheDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_CACHE_DIR> = $r21;

        $r22 = virtualinvoke r25.<android.content.Context: java.io.File getNoBackupFilesDir()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_NOBACKUP_DIR> = $r22;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 == 1000 goto label1;

        $r23 = virtualinvoke r1.<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>(null);

        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File EXTERNAL_DIR> = $r23;

        goto label2;

     label1:
        r0.<android.app.backup.FullBackup$BackupScheme: java.io.File EXTERNAL_DIR> = null;

     label2:
        return;
    }

    private java.io.File extractCanonicalFile(java.io.File, java.lang.String)
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.io.File r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r11;
        java.lang.String $r5, $r10, $r13, $r18, r19, r20;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r1 := @parameter0: java.io.File;

        r19 := @parameter1: java.lang.String;

        r20 = r19;

        if r19 != null goto label1;

        r20 = "";

     label1:
        $z0 = virtualinvoke r20.<java.lang.String: boolean contains(java.lang.CharSequence)>("..");

        if $z0 == 0 goto label3;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z3 == 0 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...resolved \"");

        $r13 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", but the \"..\" path is not permitted; skipping.");

        $r18 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r18);

     label2:
        return null;

     label3:
        $z1 = virtualinvoke r20.<java.lang.String: boolean contains(java.lang.CharSequence)>("//");

        if $z1 == 0 goto label5;

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z2 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...resolved \"");

        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", which contains the invalid \"//\" sequence; skipping.");

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r10);

     label4:
        return null;

     label5:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r20);

        return $r2;
    }

    private java.io.File getDirectoryForCriteriaDomain(java.lang.String)
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.io.File $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r2 = "file";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label02;

        $r19 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File FILES_DIR>;

        return $r19;

     label02:
        $r3 = "database";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label03;

        $r18 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DATABASE_DIR>;

        return $r18;

     label03:
        $r4 = "root";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label04;

        $r17 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File ROOT_DIR>;

        return $r17;

     label04:
        $r5 = "sharedpref";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label05;

        $r16 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File SHAREDPREF_DIR>;

        return $r16;

     label05:
        $r6 = "device_file";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label06;

        $r15 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_FILES_DIR>;

        return $r15;

     label06:
        $r7 = "device_database";

        $z6 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label07;

        $r14 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_DATABASE_DIR>;

        return $r14;

     label07:
        $r8 = "device_root";

        $z7 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label08;

        $r13 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_ROOT_DIR>;

        return $r13;

     label08:
        $r9 = "device_sharedpref";

        $z8 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label09;

        $r12 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_SHAREDPREF_DIR>;

        return $r12;

     label09:
        $r10 = "external";

        $z9 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z9 == 0 goto label10;

        $r11 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File EXTERNAL_DIR>;

        return $r11;

     label10:
        return null;
    }

    private int getRequiredFlagsFromString(java.lang.String)
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.lang.String[] r1;
        int i0, i1, $i2, i4, i5, i7;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, r8, r9;
        byte b6;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r8 := @parameter0: java.lang.String;

        i4 = 0;

        if r8 == null goto label14;

        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i2 != 0 goto label01;

        goto label14;

     label01:
        r1 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\|");

        i0 = lengthof r1;

        i5 = 0;

     label02:
        if i5 >= i0 goto label13;

        r9 = r1[i5];

        b6 = -1;

        i1 = virtualinvoke r9.<java.lang.String: int hashCode()>();

        if i1 == 482744282 goto label06;

        if i1 == 1499007205 goto label05;

        if i1 == 1935925810 goto label04;

     label03:
        goto label07;

     label04:
        $z2 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("deviceToDeviceTransfer");

        if $z2 == 0 goto label03;

        b6 = 1;

        goto label07;

     label05:
        $z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("clientSideEncryption");

        if $z1 == 0 goto label03;

        b6 = 0;

        goto label07;

     label06:
        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("fakeClientSideEncryption");

        if $z0 == 0 goto label03;

        b6 = 2;

     label07:
        if b6 == 0 goto label11;

        if b6 == 1 goto label10;

        if b6 == 2 goto label08;

        i7 = i4;

        goto label09;

     label08:
        i7 = i4 | -2147483648;

     label09:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized requiredFlag provided, value: \"");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FullBackup", $r7);

        goto label12;

     label10:
        i7 = i4 | 2;

        goto label12;

     label11:
        i7 = i4 | 1;

     label12:
        i5 = i5 + 1;

        i4 = i7;

        goto label02;

     label13:
        return i4;

     label14:
        return 0;
    }

    private java.lang.String getTokenForXmlDomain(java.lang.String)
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r1 := @parameter0: java.lang.String;

        $r2 = "root";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return "r";

     label1:
        $r3 = "file";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return "f";

     label2:
        $r4 = "database";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return "db";

     label3:
        $r5 = "sharedpref";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        return "sp";

     label4:
        $r6 = "device_root";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label5;

        return "d_r";

     label5:
        $r7 = "device_file";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label6;

        return "d_f";

     label6:
        $r8 = "device_database";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label7;

        return "d_db";

     label7:
        $r9 = "device_sharedpref";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label8;

        return "d_sp";

     label8:
        $r10 = "external";

        $z8 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label9;

        return "ef";

     label9:
        return null;
    }

    private android.os.storage.StorageVolume[] getVolumeList()
    {
        android.app.backup.FullBackup$BackupScheme r0;
        android.os.storage.StorageManager r1;
        android.os.storage.StorageVolume[] $r2, $r3, $r4;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r1 = r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageManager mStorageManager>;

        if r1 == null goto label1;

        $r2 = r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageVolume[] mVolumes>;

        if $r2 != null goto label2;

        $r3 = virtualinvoke r1.<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>();

        r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageVolume[] mVolumes> = $r3;

        goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FullBackup", "Unable to access Storage Manager");

     label2:
        $r4 = r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageVolume[] mVolumes>;

        return $r4;
    }

    private void maybeParseBackupSchemeLocked() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.app.backup.FullBackup$BackupScheme r0;
        android.util.ArrayMap $r2;
        android.util.ArraySet $r3, $r8;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.String $r4;
        android.content.pm.PackageManager $r5;
        android.content.res.Resources $r6;
        java.util.Map $r7;
        java.lang.Throwable $r9;
        android.content.pm.PackageManager$NameNotFoundException $r10;
        android.content.res.XmlResourceParser r11, r12, r13;
        java.io.IOException r15;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.app.backup.FullBackup$BackupScheme: java.util.Map mIncludes> = $r2;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<android.app.backup.FullBackup$BackupScheme: android.util.ArraySet mExcludes> = $r3;

        $i0 = r0.<android.app.backup.FullBackup$BackupScheme: int mFullBackupContent>;

        if $i0 != 0 goto label01;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z1 == 0 goto label07;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "android:fullBackupContent - \"true\"");

        goto label07;

     label01:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z0 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "android:fullBackupContent - found xml resource");

     label02:
        r11 = null;

        r12 = null;

     label03:
        $r5 = r0.<android.app.backup.FullBackup$BackupScheme: android.content.pm.PackageManager mPackageManager>;

        $r4 = r0.<android.app.backup.FullBackup$BackupScheme: java.lang.String mPackageName>;

        $r6 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>($r4);

        $i1 = r0.<android.app.backup.FullBackup$BackupScheme: int mFullBackupContent>;

        r13 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i1);

     label04:
        r12 = r13;

        r11 = r13;

     label05:
        $r8 = r0.<android.app.backup.FullBackup$BackupScheme: android.util.ArraySet mExcludes>;

        $r7 = r0.<android.app.backup.FullBackup$BackupScheme: java.util.Map mIncludes>;

        virtualinvoke r0.<android.app.backup.FullBackup$BackupScheme: void parseBackupSchemeFromXmlLocked(org.xmlpull.v1.XmlPullParser,java.util.Set,java.util.Map)>(r13, $r8, $r7);

     label06:
        if r13 == null goto label07;

        interfaceinvoke r13.<android.content.res.XmlResourceParser: void close()>();

     label07:
        return;

     label08:
        $r9 := @caughtexception;

        goto label15;

     label09:
        $r10 := @caughtexception;

        r12 = r11;

     label10:
        r15 = new java.io.IOException;

     label11:
        r12 = r11;

     label12:
        specialinvoke r15.<java.io.IOException: void <init>(java.lang.Throwable)>($r10);

     label13:
        r12 = r11;

     label14:
        throw r15;

     label15:
        if r12 == null goto label16;

        interfaceinvoke r12.<android.content.res.XmlResourceParser: void close()>();

     label16:
        throw $r9;

        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.Throwable from label12 to label13 with label08;
        catch java.lang.Throwable from label14 to label15 with label08;
    }

    private java.util.Set parseCurrentTagForDomain(org.xmlpull.v1.XmlPullParser, java.util.Set, java.util.Map, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.util.Map r1;
        java.lang.String $r2, $r3, $r4, $r5, $r8, $r12, $r15, $r18, r24, r25;
        boolean $z0, $z1, $z2;
        java.lang.Object $r19, r27;
        org.xmlpull.v1.XmlPullParser r22;
        java.util.Set r23, r26, r34;
        android.util.ArraySet r30;
        java.lang.StringBuilder r31, r32;
        org.xmlpull.v1.XmlPullParserException r33;
        java.lang.Throwable r35;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r22 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r23 := @parameter1: java.util.Set;

        r1 := @parameter2: java.util.Map;

        r24 := @parameter3: java.lang.String;

        $r2 = "include";

        $r3 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        r25 = specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: java.lang.String getTokenForXmlDomain(java.lang.String)>(r24);

        $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        r26 = (java.util.Set) $r19;

        r27 = r26;

        if r26 != null goto label1;

        r30 = new android.util.ArraySet;

        specialinvoke r30.<android.util.ArraySet: void <init>()>();

        r27 = r30;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, r30);

     label1:
        r34 = (java.util.Set) r27;

        return r34;

     label2:
        $r4 = "exclude";

        $r5 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        return r23;

     label3:
        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z2 == 0 goto label4;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid tag found in xml \"");

        $r15 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"; aborting operation.");

        $r18 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r18);

     label4:
        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognised tag in backup criteria xml (");

        $r8 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r33 = new org.xmlpull.v1.XmlPullParserException;

        $r12 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r33.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r12);

        r35 = (java.lang.Throwable) r33;

        throw r35;
    }

    private java.lang.String sharedDomainToPath(java.lang.String) throws java.io.IOException
    {
        android.app.backup.FullBackup$BackupScheme r0;
        android.os.storage.StorageVolume[] r1, $r3;
        int i0, $i1, $i2;
        java.lang.String $r2, $r6, r7, r8;
        android.os.storage.StorageVolume $r4;
        java.io.File $r5;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r7 := @parameter0: java.lang.String;

        $r2 = "shared/";

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1);

        r1 = specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageVolume[] getVolumeList()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        $r3 = r0.<android.app.backup.FullBackup$BackupScheme: android.os.storage.StorageVolume[] mVolumes>;

        $i2 = lengthof $r3;

        if i0 >= $i2 goto label1;

        $r4 = r1[i0];

        $r5 = virtualinvoke $r4.<android.os.storage.StorageVolume: java.io.File getPathFile()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r6;

     label1:
        return null;
    }

    private void validateInnerTagContents(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException
    {
        android.app.backup.FullBackup$BackupScheme r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.String $r5, $r9, r11;
        byte b3;
        org.xmlpull.v1.XmlPullParserException r13, r15, r16;
        java.lang.StringBuilder r14;
        java.lang.Throwable r17, r18, r19;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        if r1 != null goto label01;

        return;

     label01:
        r11 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        b3 = -1;

        i0 = virtualinvoke r11.<java.lang.String: int hashCode()>();

        if i0 == -1321148966 goto label04;

        if i0 == 1942574248 goto label03;

     label02:
        goto label05;

     label03:
        $z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("include");

        if $z1 == 0 goto label02;

        b3 = 0;

        goto label05;

     label04:
        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("exclude");

        if $z0 == 0 goto label02;

        b3 = 1;

     label05:
        if b3 == 0 goto label08;

        if b3 != 1 goto label07;

        $i2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if $i2 > 2 goto label06;

        goto label09;

     label06:
        r13 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r13.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("At most 2 tag attributes allowed for \"exclude\" tag (\"domain\" & \"path\".");

        r17 = (java.lang.Throwable) r13;

        throw r17;

     label07:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A valid tag is one of \"<include/>\" or \"<exclude/>. You provided \"");

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r15 = new org.xmlpull.v1.XmlPullParserException;

        $r9 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        r18 = (java.lang.Throwable) r15;

        throw r18;

     label08:
        $i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if $i1 > 3 goto label10;

     label09:
        return;

     label10:
        r16 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r16.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("At most 3 tag attributes allowed for \"include\" tag (\"domain\" & \"path\" & optional \"requiredFlags\").");

        r19 = (java.lang.Throwable) r16;

        throw r19;
    }

    boolean isFullBackupContentEnabled()
    {
        android.app.backup.FullBackup$BackupScheme r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        $i0 = r0.<android.app.backup.FullBackup$BackupScheme: int mFullBackupContent>;

        if $i0 >= 0 goto label2;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "android:fullBackupContent - \"false\"");

     label1:
        return 0;

     label2:
        return 1;
    }

    public android.util.ArraySet maybeParseAndGetCanonicalExcludePaths() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.app.backup.FullBackup$BackupScheme r0;
        android.util.ArraySet $r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        entermonitor r0;

     label1:
        $r1 = r0.<android.app.backup.FullBackup$BackupScheme: android.util.ArraySet mExcludes>;

        if $r1 != null goto label2;

        specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: void maybeParseBackupSchemeLocked()>();

     label2:
        r3 = r0.<android.app.backup.FullBackup$BackupScheme: android.util.ArraySet mExcludes>;

     label3:
        exitmonitor r0;

        return r3;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.util.Map maybeParseAndGetCanonicalIncludePaths() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.util.Map $r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        entermonitor r0;

     label1:
        $r1 = r0.<android.app.backup.FullBackup$BackupScheme: java.util.Map mIncludes>;

        if $r1 != null goto label2;

        specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: void maybeParseBackupSchemeLocked()>();

     label2:
        r3 = r0.<android.app.backup.FullBackup$BackupScheme: java.util.Map mIncludes>;

     label3:
        exitmonitor r0;

        return r3;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void parseBackupSchemeFromXmlLocked(org.xmlpull.v1.XmlPullParser, java.util.Set, java.util.Map) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.lang.String r1, $r2, $r3, $r6, $r10, $r15, $r19, $r24, $r26, $r32, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r45, $r53, $r55, $r60, $r68, $r73, $r76, $r83, $r84, $r87, $r92, r104, r107, $r109, r111;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z15, $z16, $z18, $z20, $z21, $z22;
        java.util.Set $r11, $r28, r94, r101;
        java.lang.Object $r12, $r20, $r23, $r27, $r29;
        int $i8, $i12, i25, i26, i27;
        org.xmlpull.v1.XmlPullParser r93;
        java.util.Map r95;
        java.io.File r98, r100;
        java.util.Iterator r113, r116, r119;
        java.util.Map$Entry r114;
        android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags r117, r120, r124, r127, r130, r133;
        java.lang.StringBuilder r123, r125, r126, r128, r129, r131, r132, r134, r135, r136, r137, r138;
        org.xmlpull.v1.XmlPullParserException r139;
        java.lang.Throwable r140;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r93 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r94 := @parameter1: java.util.Set;

        r95 := @parameter2: java.util.Map;

        i25 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label01:
        if i25 == 2 goto label02;

        i25 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label02:
        $r2 = "full-backup-content";

        $r3 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label24;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z1 == 0 goto label03;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "\n");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "====================================================");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "Found valid fullBackupContent; parsing xml resource.");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "====================================================");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "");

     label03:
        i26 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i26 == 1 goto label14;

        if i26 == 2 goto label04;

        goto label13;

     label04:
        specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: void validateInnerTagContents(org.xmlpull.v1.XmlPullParser)>(r93);

        r1 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "domain");

        r98 = specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: java.io.File getDirectoryForCriteriaDomain(java.lang.String)>(r1);

        if r98 != null goto label06;

        $z21 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z21 == 0 goto label05;

        r123 = new java.lang.StringBuilder;

        specialinvoke r123.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...parsing \"");

        $r87 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": domain=\"");

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" invalid; skipping");

        $r92 = virtualinvoke r123.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r92);

        goto label13;

     label05:
        goto label13;

     label06:
        $r37 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "path");

        r100 = specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: java.io.File extractCanonicalFile(java.io.File,java.lang.String)>(r98, $r37);

        if r100 != null goto label07;

        goto label13;

     label07:
        i27 = 0;

        $r38 = "include";

        $r39 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z8 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z8 == 0 goto label08;

        $r84 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "requireFlags");

        i27 = specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: int getRequiredFlagsFromString(java.lang.String)>($r84);

     label08:
        r101 = specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: java.util.Set parseCurrentTagForDomain(org.xmlpull.v1.XmlPullParser,java.util.Set,java.util.Map,java.lang.String)>(r93, r94, r95, r1);

        r124 = new android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags;

        $r41 = virtualinvoke r100.<java.io.File: java.lang.String getCanonicalPath()>();

        specialinvoke r124.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: void <init>(java.lang.String,int)>($r41, i27);

        interfaceinvoke r101.<java.util.Set: boolean add(java.lang.Object)>(r124);

        $z10 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z10 == 0 goto label09;

        r125 = new java.lang.StringBuilder;

        specialinvoke r125.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...parsed ");

        $r76 = virtualinvoke r100.<java.io.File: java.lang.String getCanonicalPath()>();

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for domain \"");

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", requiredFlags + \"");

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i27);

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r83 = virtualinvoke r125.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r83);

     label09:
        $r42 = "database";

        $z11 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z11 == 0 goto label11;

        $z16 = virtualinvoke r100.<java.io.File: boolean isDirectory()>();

        if $z16 != 0 goto label11;

        r126 = new java.lang.StringBuilder;

        specialinvoke r126.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke r100.<java.io.File: java.lang.String getCanonicalPath()>();

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-journal");

        r104 = virtualinvoke r126.<java.lang.StringBuilder: java.lang.String toString()>();

        r127 = new android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags;

        specialinvoke r127.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: void <init>(java.lang.String,int)>(r104, i27);

        interfaceinvoke r101.<java.util.Set: boolean add(java.lang.Object)>(r127);

        $z18 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z18 == 0 goto label10;

        r128 = new java.lang.StringBuilder;

        specialinvoke r128.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...automatically generated ");

        virtualinvoke r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r104);

        virtualinvoke r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Ignore if nonexistent.");

        $r73 = virtualinvoke r128.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r73);

     label10:
        r129 = new java.lang.StringBuilder;

        specialinvoke r129.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke r100.<java.io.File: java.lang.String getCanonicalPath()>();

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wal");

        r107 = virtualinvoke r129.<java.lang.StringBuilder: java.lang.String toString()>();

        r130 = new android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags;

        specialinvoke r130.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: void <init>(java.lang.String,int)>(r107, i27);

        interfaceinvoke r101.<java.util.Set: boolean add(java.lang.Object)>(r130);

        $z20 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z20 == 0 goto label11;

        r131 = new java.lang.StringBuilder;

        specialinvoke r131.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...automatically generated ");

        virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Ignore if nonexistent.");

        $r68 = virtualinvoke r131.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r68);

     label11:
        $r109 = "sharedpref";

        $z22 = virtualinvoke $r109.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z22 == 0 goto label13;

        $z12 = virtualinvoke r100.<java.io.File: boolean isDirectory()>();

        if $z12 != 0 goto label13;

        $r43 = virtualinvoke r100.<java.io.File: java.lang.String getCanonicalPath()>();

        $z13 = virtualinvoke $r43.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z13 != 0 goto label12;

        r132 = new java.lang.StringBuilder;

        specialinvoke r132.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke r100.<java.io.File: java.lang.String getCanonicalPath()>();

        virtualinvoke r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        virtualinvoke r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        r111 = virtualinvoke r132.<java.lang.StringBuilder: java.lang.String toString()>();

        r133 = new android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags;

        specialinvoke r133.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: void <init>(java.lang.String,int)>(r111, i27);

        interfaceinvoke r101.<java.util.Set: boolean add(java.lang.Object)>(r133);

        $z15 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z15 == 0 goto label13;

        r134 = new java.lang.StringBuilder;

        specialinvoke r134.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...automatically generated ");

        virtualinvoke r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r111);

        virtualinvoke r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Ignore if nonexistent.");

        $r53 = virtualinvoke r134.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r53);

        goto label13;

     label12:
        goto label13;

     label13:
        goto label03;

     label14:
        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackupXmlParserLogging", 2);

        if $z2 == 0 goto label23;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "\n");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "Xml resource parsing complete.");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "Final tally.");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "Includes:");

        $z3 = interfaceinvoke r95.<java.util.Map: boolean isEmpty()>();

        if $z3 == 0 goto label15;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "  ...nothing specified (This means the entirety of app data minus excludes)");

        goto label19;

     label15:
        $r11 = interfaceinvoke r95.<java.util.Map: java.util.Set entrySet()>();

        r113 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z4 = interfaceinvoke r113.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label19;

        $r20 = interfaceinvoke r113.<java.util.Iterator: java.lang.Object next()>();

        r114 = (java.util.Map$Entry) $r20;

        r135 = new java.lang.StringBuilder;

        specialinvoke r135.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  domain=");

        $r23 = interfaceinvoke r114.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.String) $r23;

        virtualinvoke r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke r135.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r26);

        $r27 = interfaceinvoke r114.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r28 = (java.util.Set) $r27;

        r116 = interfaceinvoke $r28.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z7 = interfaceinvoke r116.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label18;

        $r29 = interfaceinvoke r116.<java.util.Iterator: java.lang.Object next()>();

        r117 = (android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags) $r29;

        r136 = new java.lang.StringBuilder;

        specialinvoke r136.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" path: ");

        $r32 = virtualinvoke r117.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: java.lang.String getPath()>();

        virtualinvoke r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        virtualinvoke r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requiredFlags: ");

        $i12 = virtualinvoke r117.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: int getRequiredFlags()>();

        virtualinvoke r136.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r36 = virtualinvoke r136.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r36);

        goto label17;

     label18:
        goto label16;

     label19:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "Excludes:");

        $z5 = interfaceinvoke r94.<java.util.Set: boolean isEmpty()>();

        if $z5 == 0 goto label20;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "  ...nothing to exclude.");

        goto label22;

     label20:
        r119 = interfaceinvoke r94.<java.util.Set: java.util.Iterator iterator()>();

     label21:
        $z6 = interfaceinvoke r119.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label22;

        $r12 = interfaceinvoke r119.<java.util.Iterator: java.lang.Object next()>();

        r120 = (android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags) $r12;

        r137 = new java.lang.StringBuilder;

        specialinvoke r137.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" path: ");

        $r15 = virtualinvoke r120.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: java.lang.String getPath()>();

        virtualinvoke r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requiredFlags: ");

        $i8 = virtualinvoke r120.<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: int getRequiredFlags()>();

        virtualinvoke r137.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r19 = virtualinvoke r137.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", $r19);

        goto label21;

     label22:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "  ");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "====================================================");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackupXmlParserLogging", "\n");

     label23:
        return;

     label24:
        r138 = new java.lang.StringBuilder;

        specialinvoke r138.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Xml file didn\'t start with correct tag (<full-backup-content>). Found \"");

        $r6 = interfaceinvoke r93.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r139 = new org.xmlpull.v1.XmlPullParserException;

        $r10 = virtualinvoke r138.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r139.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r10);

        r140 = (java.lang.Throwable) r139;

        throw r140;
    }

    java.lang.String tokenToDirectoryPath(java.lang.String)
    {
        android.app.backup.FullBackup$BackupScheme r0;
        java.lang.String r1, $r4, $r5, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.io.File $r6, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31;
        java.lang.Exception $r33;
        java.lang.StringBuilder $r34, r38;

        r0 := @this: android.app.backup.FullBackup$BackupScheme;

        r1 := @parameter0: java.lang.String;

     label01:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("f");

        if $z0 == 0 goto label02;

        $r31 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File FILES_DIR>;

        $r32 = virtualinvoke $r31.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r32;

     label02:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("db");

        if $z1 == 0 goto label03;

        $r29 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DATABASE_DIR>;

        $r30 = virtualinvoke $r29.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r30;

     label03:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("r");

        if $z2 == 0 goto label04;

        $r27 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File ROOT_DIR>;

        $r28 = virtualinvoke $r27.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r28;

     label04:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("sp");

        if $z3 == 0 goto label05;

        $r25 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File SHAREDPREF_DIR>;

        $r26 = virtualinvoke $r25.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r26;

     label05:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("c");

        if $z4 == 0 goto label06;

        $r23 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File CACHE_DIR>;

        $r24 = virtualinvoke $r23.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r24;

     label06:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("nb");

        if $z5 == 0 goto label07;

        $r21 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File NOBACKUP_DIR>;

        $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r22;

     label07:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("d_f");

        if $z6 == 0 goto label08;

        $r19 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_FILES_DIR>;

        $r20 = virtualinvoke $r19.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r20;

     label08:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("d_db");

        if $z7 == 0 goto label09;

        $r17 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_DATABASE_DIR>;

        $r18 = virtualinvoke $r17.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r18;

     label09:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("d_r");

        if $z8 == 0 goto label10;

        $r15 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_ROOT_DIR>;

        $r16 = virtualinvoke $r15.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r16;

     label10:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("d_sp");

        if $z9 == 0 goto label11;

        $r13 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_SHAREDPREF_DIR>;

        $r14 = virtualinvoke $r13.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r14;

     label11:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("d_c");

        if $z10 == 0 goto label12;

        $r11 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_CACHE_DIR>;

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r12;

     label12:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("d_nb");

        if $z11 == 0 goto label13;

        $r9 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File DEVICE_NOBACKUP_DIR>;

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r10;

     label13:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ef");

        if $z12 == 0 goto label15;

        $r6 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File EXTERNAL_DIR>;

        if $r6 == null goto label14;

        $r7 = r0.<android.app.backup.FullBackup$BackupScheme: java.io.File EXTERNAL_DIR>;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r8;

     label14:
        return null;

     label15:
        $z13 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("shared/");

        if $z13 == 0 goto label16;

        $r5 = specialinvoke r0.<android.app.backup.FullBackup$BackupScheme: java.lang.String sharedDomainToPath(java.lang.String)>(r1);

        return $r5;

     label16:
        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized domain ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("FullBackup", $r4);

     label17:
        return null;

     label18:
        $r33 := @caughtexception;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading directory for domain: ");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("FullBackup", $r37);

        return null;

        catch java.lang.Exception from label01 to label02 with label18;
        catch java.lang.Exception from label02 to label03 with label18;
        catch java.lang.Exception from label03 to label04 with label18;
        catch java.lang.Exception from label04 to label05 with label18;
        catch java.lang.Exception from label05 to label06 with label18;
        catch java.lang.Exception from label06 to label07 with label18;
        catch java.lang.Exception from label07 to label08 with label18;
        catch java.lang.Exception from label08 to label09 with label18;
        catch java.lang.Exception from label09 to label10 with label18;
        catch java.lang.Exception from label10 to label11 with label18;
        catch java.lang.Exception from label11 to label12 with label18;
        catch java.lang.Exception from label12 to label13 with label18;
        catch java.lang.Exception from label13 to label14 with label18;
        catch java.lang.Exception from label15 to label16 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    public static void <clinit>()
    {
        <android.app.backup.FullBackup$BackupScheme: java.lang.String TAG_INCLUDE> = "include";

        <android.app.backup.FullBackup$BackupScheme: java.lang.String TAG_EXCLUDE> = "exclude";

        return;
    }
}
