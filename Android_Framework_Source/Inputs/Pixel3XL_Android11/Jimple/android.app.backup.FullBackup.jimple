public class android.app.backup.FullBackup extends java.lang.Object
{
    public static final java.lang.String APK_TREE_TOKEN;
    public static final java.lang.String APPS_PREFIX;
    public static final java.lang.String CACHE_TREE_TOKEN;
    public static final java.lang.String CONF_TOKEN_INTENT_EXTRA;
    public static final java.lang.String DATABASE_TREE_TOKEN;
    public static final java.lang.String DEVICE_CACHE_TREE_TOKEN;
    public static final java.lang.String DEVICE_DATABASE_TREE_TOKEN;
    public static final java.lang.String DEVICE_FILES_TREE_TOKEN;
    public static final java.lang.String DEVICE_NO_BACKUP_TREE_TOKEN;
    public static final java.lang.String DEVICE_ROOT_TREE_TOKEN;
    public static final java.lang.String DEVICE_SHAREDPREFS_TREE_TOKEN;
    public static final java.lang.String FILES_TREE_TOKEN;
    public static final java.lang.String FLAG_REQUIRED_CLIENT_SIDE_ENCRYPTION;
    public static final java.lang.String FLAG_REQUIRED_DEVICE_TO_DEVICE_TRANSFER;
    public static final java.lang.String FLAG_REQUIRED_FAKE_CLIENT_SIDE_ENCRYPTION;
    public static final java.lang.String FULL_BACKUP_INTENT_ACTION;
    public static final java.lang.String FULL_RESTORE_INTENT_ACTION;
    public static final java.lang.String KEY_VALUE_DATA_TOKEN;
    public static final java.lang.String MANAGED_EXTERNAL_TREE_TOKEN;
    public static final java.lang.String NO_BACKUP_TREE_TOKEN;
    public static final java.lang.String OBB_TREE_TOKEN;
    public static final java.lang.String ROOT_TREE_TOKEN;
    public static final java.lang.String SHAREDPREFS_TREE_TOKEN;
    public static final java.lang.String SHARED_PREFIX;
    public static final java.lang.String SHARED_STORAGE_TOKEN;
    static final java.lang.String TAG;
    static final java.lang.String TAG_XML_PARSER;
    private static final java.util.Map kPackageBackupSchemeMap;

    static void <clinit>()
    {
        android.util.ArrayMap $r0;

        <android.app.backup.FullBackup: java.lang.String TAG_XML_PARSER> = "BackupXmlParserLogging";

        <android.app.backup.FullBackup: java.lang.String TAG> = "FullBackup";

        <android.app.backup.FullBackup: java.lang.String SHARED_STORAGE_TOKEN> = "shared";

        <android.app.backup.FullBackup: java.lang.String SHARED_PREFIX> = "shared/";

        <android.app.backup.FullBackup: java.lang.String SHAREDPREFS_TREE_TOKEN> = "sp";

        <android.app.backup.FullBackup: java.lang.String ROOT_TREE_TOKEN> = "r";

        <android.app.backup.FullBackup: java.lang.String OBB_TREE_TOKEN> = "obb";

        <android.app.backup.FullBackup: java.lang.String NO_BACKUP_TREE_TOKEN> = "nb";

        <android.app.backup.FullBackup: java.lang.String MANAGED_EXTERNAL_TREE_TOKEN> = "ef";

        <android.app.backup.FullBackup: java.lang.String KEY_VALUE_DATA_TOKEN> = "k";

        <android.app.backup.FullBackup: java.lang.String FULL_RESTORE_INTENT_ACTION> = "fullrest";

        <android.app.backup.FullBackup: java.lang.String FULL_BACKUP_INTENT_ACTION> = "fullback";

        <android.app.backup.FullBackup: java.lang.String FLAG_REQUIRED_FAKE_CLIENT_SIDE_ENCRYPTION> = "fakeClientSideEncryption";

        <android.app.backup.FullBackup: java.lang.String FLAG_REQUIRED_DEVICE_TO_DEVICE_TRANSFER> = "deviceToDeviceTransfer";

        <android.app.backup.FullBackup: java.lang.String FLAG_REQUIRED_CLIENT_SIDE_ENCRYPTION> = "clientSideEncryption";

        <android.app.backup.FullBackup: java.lang.String FILES_TREE_TOKEN> = "f";

        <android.app.backup.FullBackup: java.lang.String DEVICE_SHAREDPREFS_TREE_TOKEN> = "d_sp";

        <android.app.backup.FullBackup: java.lang.String DEVICE_ROOT_TREE_TOKEN> = "d_r";

        <android.app.backup.FullBackup: java.lang.String DEVICE_NO_BACKUP_TREE_TOKEN> = "d_nb";

        <android.app.backup.FullBackup: java.lang.String DEVICE_FILES_TREE_TOKEN> = "d_f";

        <android.app.backup.FullBackup: java.lang.String DEVICE_DATABASE_TREE_TOKEN> = "d_db";

        <android.app.backup.FullBackup: java.lang.String DEVICE_CACHE_TREE_TOKEN> = "d_c";

        <android.app.backup.FullBackup: java.lang.String DATABASE_TREE_TOKEN> = "db";

        <android.app.backup.FullBackup: java.lang.String CONF_TOKEN_INTENT_EXTRA> = "conftoken";

        <android.app.backup.FullBackup: java.lang.String CACHE_TREE_TOKEN> = "c";

        <android.app.backup.FullBackup: java.lang.String APPS_PREFIX> = "apps/";

        <android.app.backup.FullBackup: java.lang.String APK_TREE_TOKEN> = "a";

        $r0 = new android.util.ArrayMap;

        specialinvoke $r0.<android.util.ArrayMap: void <init>()>();

        <android.app.backup.FullBackup: java.util.Map kPackageBackupSchemeMap> = $r0;

        return;
    }

    public void <init>()
    {
        android.app.backup.FullBackup r0;

        r0 := @this: android.app.backup.FullBackup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native int backupToTar(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.backup.FullBackupDataOutput);

    static android.app.backup.FullBackup$BackupScheme getBackupScheme(android.content.Context)
    {
        android.app.backup.FullBackup$BackupScheme r0, r9;
        java.util.Map $r1, $r4;
        java.lang.String $r2, $r5;
        java.lang.Object $r3;
        java.lang.Throwable $r7;
        android.content.Context r8;

        r8 := @parameter0: android.content.Context;

        entermonitor class "Landroid/app/backup/FullBackup;";

     label1:
        $r1 = <android.app.backup.FullBackup: java.util.Map kPackageBackupSchemeMap>;

        $r2 = virtualinvoke r8.<android.content.Context: java.lang.String getPackageName()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r0 = (android.app.backup.FullBackup$BackupScheme) $r3;

     label2:
        r9 = r0;

        if r0 != null goto label5;

     label3:
        r9 = new android.app.backup.FullBackup$BackupScheme;

        specialinvoke r9.<android.app.backup.FullBackup$BackupScheme: void <init>(android.content.Context)>(r8);

     label4:
        $r4 = <android.app.backup.FullBackup: java.util.Map kPackageBackupSchemeMap>;

        $r5 = virtualinvoke r8.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r9);

     label5:
        exitmonitor class "Landroid/app/backup/FullBackup;";

        return r9;

     label6:
        $r7 := @caughtexception;

        exitmonitor class "Landroid/app/backup/FullBackup;";

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static android.app.backup.FullBackup$BackupScheme getBackupSchemeForTest(android.content.Context)
    {
        android.app.backup.FullBackup$BackupScheme $r0;
        android.util.ArraySet $r1;
        android.util.ArrayMap $r2;
        android.content.Context r3;

        r3 := @parameter0: android.content.Context;

        $r0 = new android.app.backup.FullBackup$BackupScheme;

        specialinvoke $r0.<android.app.backup.FullBackup$BackupScheme: void <init>(android.content.Context)>(r3);

        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        $r0.<android.app.backup.FullBackup$BackupScheme: android.util.ArraySet mExcludes> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        $r0.<android.app.backup.FullBackup$BackupScheme: java.util.Map mIncludes> = $r2;

        return $r0;
    }

    public static void restoreFile(android.os.ParcelFileDescriptor, long, int, long, long, java.io.File) throws java.io.IOException
    {
        long l0, l1, l2, $l3, $l6, $l8, l10, $l14;
        java.io.File r0, r16;
        java.lang.String $r2, $r4, $r7, $r8, $r12, $r13;
        int $i4, $i5, i9, i12, i13;
        byte $b7, $b11, $b15;
        boolean $z0;
        java.lang.Throwable $r5, $r9, $r10;
        android.os.ParcelFileDescriptor r14;
        java.io.FileOutputStream r15, r24, r27;
        byte[] r19;
        java.io.FileDescriptor $r21;
        java.lang.StringBuilder r28, r30, r31;
        java.io.FileInputStream r29;
        android.system.ErrnoException r32;

        r14 := @parameter0: android.os.ParcelFileDescriptor;

        l0 := @parameter1: long;

        i9 := @parameter2: int;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        r0 := @parameter5: java.io.File;

        if i9 != 2 goto label02;

        if r0 == null goto label01;

        virtualinvoke r0.<java.io.File: boolean mkdirs()>();

     label01:
        goto label17;

     label02:
        r15 = null;

        if r0 == null goto label07;

     label03:
        r16 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke r16.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label04;

        virtualinvoke r16.<java.io.File: boolean mkdirs()>();

     label04:
        r27 = new java.io.FileOutputStream;

        r15 = r27;

        specialinvoke r27.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create/open file ");

        $r12 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FullBackup", $r13, $r10);

        r15 = null;

        goto label07;

     label07:
        r19 = newarray (byte)[32768];

        r29 = new java.io.FileInputStream;

        $r21 = virtualinvoke r14.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r29.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r21);

        l10 = l0;

     label08:
        $b11 = l10 cmp 0L;

        if $b11 <= 0 goto label16;

        $i5 = lengthof r19;

        $l6 = (long) $i5;

        $b7 = l10 cmp $l6;

        if $b7 <= 0 goto label09;

        i12 = lengthof r19;

        goto label10;

     label09:
        i12 = (int) l10;

     label10:
        i13 = virtualinvoke r29.<java.io.FileInputStream: int read(byte[],int,int)>(r19, 0, i12);

        if i13 > 0 goto label11;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete read: expected ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l10);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $l8 = l0 - l10;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r4 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FullBackup", $r4);

        goto label16;

     label11:
        r24 = r15;

        if r15 == null goto label15;

     label12:
        virtualinvoke r15.<java.io.FileOutputStream: void write(byte[],int,int)>(r19, 0, i13);

     label13:
        r24 = r15;

        goto label15;

     label14:
        $r5 := @caughtexception;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to write to file ");

        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FullBackup", $r8, $r5);

        virtualinvoke r15.<java.io.FileOutputStream: void close()>();

        virtualinvoke r0.<java.io.File: boolean delete()>();

        r24 = null;

     label15:
        $l14 = (long) i13;

        l10 = l10 - $l14;

        r15 = r24;

        goto label08;

     label16:
        if r15 == null goto label17;

        virtualinvoke r15.<java.io.FileOutputStream: void close()>();

     label17:
        $b15 = l1 cmp 0L;

        if $b15 < 0 goto label22;

        if r0 == null goto label22;

     label18:
        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $l3 = l1 & 448L;

        $i4 = (int) $l3;

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r2, $i4);

     label19:
        goto label21;

     label20:
        $r9 := @caughtexception;

        r32 = (android.system.ErrnoException) $r9;

        virtualinvoke r32.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

     label21:
        virtualinvoke r0.<java.io.File: boolean setLastModified(long)>(l2);

        goto label22;

     label22:
        return;

        catch java.io.IOException from label03 to label04 with label06;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label12 to label13 with label14;
        catch android.system.ErrnoException from label18 to label19 with label20;
    }
}
