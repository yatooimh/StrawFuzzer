class android.app.job.JobServiceEngine$JobHandler extends android.os.Handler
{
    final android.app.job.JobServiceEngine this$0;

    void <init>(android.app.job.JobServiceEngine, android.os.Looper)
    {
        android.app.job.JobServiceEngine$JobHandler r0;
        android.app.job.JobServiceEngine r1;
        android.os.Looper r2;

        r0 := @this: android.app.job.JobServiceEngine$JobHandler;

        r1 := @parameter0: android.app.job.JobServiceEngine;

        r2 := @parameter1: android.os.Looper;

        r0.<android.app.job.JobServiceEngine$JobHandler: android.app.job.JobServiceEngine this$0> = r1;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        return;
    }

    private void ackStartMessage(android.app.job.JobParameters, boolean)
    {
        android.app.job.JobServiceEngine$JobHandler r0;
        boolean z0, $z1;
        android.app.job.IJobCallback r1;
        int i0;
        android.os.RemoteException $r2;
        android.app.job.JobParameters r3;

        r0 := @this: android.app.job.JobServiceEngine$JobHandler;

        r3 := @parameter0: android.app.job.JobParameters;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r3.<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()>();

        i0 = virtualinvoke r3.<android.app.job.JobParameters: int getJobId()>();

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.job.IJobCallback: void acknowledgeStartMessage(int,boolean)>(i0, z0);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobServiceEngine", "System unreachable for starting job.");

        goto label2;

     label4:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobServiceEngine", 3);

        if $z1 == 0 goto label5;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("JobServiceEngine", "Attempting to ack a job that has already been processed.");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void ackStopMessage(android.app.job.JobParameters, boolean)
    {
        android.app.job.JobServiceEngine$JobHandler r0;
        boolean z0, $z1;
        android.app.job.IJobCallback r1;
        int i0;
        android.os.RemoteException $r2;
        android.app.job.JobParameters r3;

        r0 := @this: android.app.job.JobServiceEngine$JobHandler;

        r3 := @parameter0: android.app.job.JobParameters;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r3.<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()>();

        i0 = virtualinvoke r3.<android.app.job.JobParameters: int getJobId()>();

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.app.job.IJobCallback: void acknowledgeStopMessage(int,boolean)>(i0, z0);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobServiceEngine", "System unreachable for stopping job.");

        goto label2;

     label4:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobServiceEngine", 3);

        if $z1 == 0 goto label5;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("JobServiceEngine", "Attempting to ack a job that has already been processed.");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void handleMessage(android.os.Message)
    {
        android.app.job.JobServiceEngine$JobHandler r0;
        android.app.job.JobParameters r1;
        int i0, $i1, $i3, $i6;
        java.lang.Object $r3;
        android.app.job.JobServiceEngine $r4, $r5;
        boolean $z0, $z1, z2;
        java.lang.Exception $r6, $r8;
        java.lang.RuntimeException $r7, $r13;
        java.lang.StringBuilder $r9;
        java.lang.String $r12;
        android.os.RemoteException $r14;
        android.os.Message r15;
        android.app.job.IJobCallback r16;

        r0 := @this: android.app.job.JobServiceEngine$JobHandler;

        r15 := @parameter0: android.os.Message;

        $r3 = r15.<android.os.Message: java.lang.Object obj>;

        r1 = (android.app.job.JobParameters) $r3;

        i0 = r15.<android.os.Message: int what>;

        if i0 == 0 goto label12;

        z2 = 1;

        if i0 == 1 goto label09;

        if i0 == 2 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobServiceEngine", "Unrecognised message received.");

        goto label13;

     label01:
        $i1 = r15.<android.os.Message: int arg2>;

        if $i1 != 1 goto label02;

        goto label03;

     label02:
        z2 = 0;

     label03:
        r16 = virtualinvoke r1.<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()>();

        if r16 == null goto label08;

     label04:
        $i3 = virtualinvoke r1.<android.app.job.JobParameters: int getJobId()>();

        interfaceinvoke r16.<android.app.job.IJobCallback: void jobFinished(int,boolean)>($i3, z2);

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobServiceEngine", "Error reporting job finish to system: binder has goneaway.");

     label07:
        goto label13;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobServiceEngine", "finishJob() called for a nonexistent job id.");

        goto label13;

     label09:
        $r5 = r0.<android.app.job.JobServiceEngine$JobHandler: android.app.job.JobServiceEngine this$0>;

        $z1 = virtualinvoke $r5.<android.app.job.JobServiceEngine: boolean onStopJob(android.app.job.JobParameters)>(r1);

        specialinvoke r0.<android.app.job.JobServiceEngine$JobHandler: void ackStopMessage(android.app.job.JobParameters,boolean)>(r1, $z1);

     label10:
        goto label13;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("JobServiceEngine", "Application unable to handle onStopJob.", $r6);

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label12:
        $r4 = r0.<android.app.job.JobServiceEngine$JobHandler: android.app.job.JobServiceEngine this$0>;

        $z0 = virtualinvoke $r4.<android.app.job.JobServiceEngine: boolean onStartJob(android.app.job.JobParameters)>(r1);

        specialinvoke r0.<android.app.job.JobServiceEngine$JobHandler: void ackStartMessage(android.app.job.JobParameters,boolean)>(r1, $z0);

     label13:
        return;

     label14:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while executing job: ");

        $i6 = virtualinvoke r1.<android.app.job.JobParameters: int getJobId()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobServiceEngine", $r12);

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r13;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label12 to label13 with label14;
    }
}
