public final class android.app.role.RoleManager extends java.lang.Object
{
    public static final java.lang.String ACTION_REQUEST_ROLE;
    private static final java.lang.String LOG_TAG;
    public static final int MANAGE_HOLDERS_FLAG_DONT_KILL_APP;
    public static final java.lang.String PERMISSION_MANAGE_ROLES_FROM_CONTROLLER;
    public static final java.lang.String ROLE_ASSISTANT;
    public static final java.lang.String ROLE_BROWSER;
    public static final java.lang.String ROLE_CALL_REDIRECTION;
    public static final java.lang.String ROLE_CALL_SCREENING;
    public static final java.lang.String ROLE_DIALER;
    public static final java.lang.String ROLE_EMERGENCY;
    public static final java.lang.String ROLE_HOME;
    public static final java.lang.String ROLE_SMS;
    private final android.content.Context mContext;
    private final android.util.SparseArray mListeners;
    private final java.lang.Object mListenersLock;
    private final android.app.role.IRoleManager mService;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.app.role.RoleManager: java.lang.String ROLE_SMS> = "android.app.role.SMS";

        <android.app.role.RoleManager: java.lang.String ROLE_HOME> = "android.app.role.HOME";

        <android.app.role.RoleManager: java.lang.String ROLE_EMERGENCY> = "android.app.role.EMERGENCY";

        <android.app.role.RoleManager: java.lang.String ROLE_DIALER> = "android.app.role.DIALER";

        <android.app.role.RoleManager: java.lang.String ROLE_CALL_SCREENING> = "android.app.role.CALL_SCREENING";

        <android.app.role.RoleManager: java.lang.String ROLE_CALL_REDIRECTION> = "android.app.role.CALL_REDIRECTION";

        <android.app.role.RoleManager: java.lang.String ROLE_BROWSER> = "android.app.role.BROWSER";

        <android.app.role.RoleManager: java.lang.String ROLE_ASSISTANT> = "android.app.role.ASSISTANT";

        <android.app.role.RoleManager: java.lang.String PERMISSION_MANAGE_ROLES_FROM_CONTROLLER> = "com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER";

        <android.app.role.RoleManager: int MANAGE_HOLDERS_FLAG_DONT_KILL_APP> = 1;

        <android.app.role.RoleManager: java.lang.String ACTION_REQUEST_ROLE> = "android.app.role.action.REQUEST_ROLE";

        $r0 = class "Landroid/app/role/RoleManager;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.app.role.RoleManager: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context) throws android.os.ServiceManager$ServiceNotFoundException
    {
        android.app.role.RoleManager r0;
        android.content.Context r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        android.os.IBinder $r4;
        android.app.role.IRoleManager $r5;

        r0 := @this: android.app.role.RoleManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<android.app.role.RoleManager: android.util.SparseArray mListeners> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.app.role.RoleManager: java.lang.Object mListenersLock> = $r3;

        r0.<android.app.role.RoleManager: android.content.Context mContext> = r1;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("role");

        $r5 = staticinvoke <android.app.role.IRoleManager$Stub: android.app.role.IRoleManager asInterface(android.os.IBinder)>($r4);

        r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService> = $r5;

        return;
    }

    private static android.os.RemoteCallback createRemoteCallback(java.util.concurrent.Executor, java.util.function.Consumer)
    {
        java.util.concurrent.Executor r0;
        java.util.function.Consumer r1;
        android.os.RemoteCallback $r2;
        android.app.role._$$Lambda$RoleManager$m9y_ZqrQy4gHK3mGDXvG129sdjU $r3;

        r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: java.util.function.Consumer;

        $r2 = new android.os.RemoteCallback;

        $r3 = new android.app.role._$$Lambda$RoleManager$m9y_ZqrQy4gHK3mGDXvG129sdjU;

        specialinvoke $r3.<android.app.role._$$Lambda$RoleManager$m9y_ZqrQy4gHK3mGDXvG129sdjU: void <init>(java.util.concurrent.Executor,java.util.function.Consumer)>(r0, r1);

        specialinvoke $r2.<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener)>($r3);

        return $r2;
    }

    static void lambda$createRemoteCallback$0(android.os.Bundle, java.util.function.Consumer)
    {
        java.util.function.Consumer r0;
        long l0;
        java.lang.Boolean $r1;
        java.lang.Throwable $r2;
        android.os.Bundle r3;
        boolean z0;

        r3 := @parameter0: android.os.Bundle;

        r0 := @parameter1: java.util.function.Consumer;

        if r3 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r1);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    static void lambda$createRemoteCallback$1(java.util.concurrent.Executor, java.util.function.Consumer, android.os.Bundle)
    {
        java.util.concurrent.Executor r0;
        java.util.function.Consumer r1;
        android.os.Bundle r2;
        android.app.role._$$Lambda$RoleManager$DrSVQgbDoLZaqkfPdGzAK3BvOGQ $r3;

        r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: java.util.function.Consumer;

        r2 := @parameter2: android.os.Bundle;

        $r3 = new android.app.role._$$Lambda$RoleManager$DrSVQgbDoLZaqkfPdGzAK3BvOGQ;

        specialinvoke $r3.<android.app.role._$$Lambda$RoleManager$DrSVQgbDoLZaqkfPdGzAK3BvOGQ: void <init>(android.os.Bundle,java.util.function.Consumer)>(r2, r1);

        interfaceinvoke r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public void addOnRoleHoldersChangedListenerAsUser(java.util.concurrent.Executor, android.app.role.OnRoleHoldersChangedListener, android.os.UserHandle)
    {
        android.app.role.RoleManager r0;
        android.app.role.OnRoleHoldersChangedListener r1;
        int i0;
        java.lang.Object r2, $r7;
        android.util.SparseArray $r6, $r10;
        boolean $z0;
        android.app.role.IRoleManager $r8;
        java.lang.Throwable $r11;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        java.util.concurrent.Executor r14;
        android.os.UserHandle r15;
        android.util.ArrayMap r16, r17;
        android.app.role.RoleManager$OnRoleHoldersChangedListenerDelegate r18;

        r0 := @this: android.app.role.RoleManager;

        r14 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.app.role.OnRoleHoldersChangedListener;

        r15 := @parameter2: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "executor cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "listener cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "user cannot be null");

        i0 = virtualinvoke r15.<android.os.UserHandle: int getIdentifier()>();

        r2 = r0.<android.app.role.RoleManager: java.lang.Object mListenersLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<android.app.role.RoleManager: android.util.SparseArray mListeners>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r16 = (android.util.ArrayMap) $r7;

     label02:
        if r16 != null goto label06;

     label03:
        r17 = new android.util.ArrayMap;

        specialinvoke r17.<android.util.ArrayMap: void <init>()>();

     label04:
        $r10 = r0.<android.app.role.RoleManager: android.util.SparseArray mListeners>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17);

     label05:
        goto label09;

     label06:
        r17 = r16;

     label07:
        $z0 = virtualinvoke r16.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label09;

        exitmonitor r2;

     label08:
        return;

     label09:
        r18 = new android.app.role.RoleManager$OnRoleHoldersChangedListenerDelegate;

        specialinvoke r18.<android.app.role.RoleManager$OnRoleHoldersChangedListenerDelegate: void <init>(java.util.concurrent.Executor,android.app.role.OnRoleHoldersChangedListener)>(r14, r1);

     label10:
        $r8 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        interfaceinvoke $r8.<android.app.role.IRoleManager: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>(r18, i0);

     label11:
        virtualinvoke r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r18);

     label12:
        exitmonitor r2;

     label13:
        return;

     label14:
        $r12 := @caughtexception;

     label15:
        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

     label16:
        $r11 := @caughtexception;

     label17:
        exitmonitor r2;

     label18:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch android.os.RemoteException from label10 to label11 with label14;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void addRoleHolderAsUser(java.lang.String, java.lang.String, int, android.os.UserHandle, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.app.role.RoleManager r0;
        java.lang.String r1, r14;
        int i0, $i1;
        android.os.UserHandle r2;
        java.util.concurrent.Executor r3;
        java.util.function.Consumer r4;
        android.app.role.IRoleManager $r10;
        android.os.RemoteCallback $r11;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;

        r0 := @this: android.app.role.RoleManager;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.UserHandle;

        r3 := @parameter4: java.util.concurrent.Executor;

        r4 := @parameter5: java.util.function.Consumer;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r14, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName cannot be null or empty");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "user cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "executor cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "callback cannot be null");

     label1:
        $r10 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r11 = staticinvoke <android.app.role.RoleManager: android.os.RemoteCallback createRemoteCallback(java.util.concurrent.Executor,java.util.function.Consumer)>(r3, r4);

        interfaceinvoke $r10.<android.app.role.IRoleManager: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>(r14, r1, i0, $i1, $r11);

     label2:
        return;

     label3:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addRoleHolderFromController(java.lang.String, java.lang.String)
    {
        android.app.role.RoleManager r0;
        java.lang.String r1, r7;
        boolean z0;
        android.app.role.IRoleManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.role.RoleManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r7, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName cannot be null or empty");

     label1:
        $r4 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        z0 = interfaceinvoke $r4.<android.app.role.IRoleManager: boolean addRoleHolderFromController(java.lang.String,java.lang.String)>(r7, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearRoleHoldersAsUser(java.lang.String, int, android.os.UserHandle, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.app.role.RoleManager r0;
        int i0, $i1;
        android.os.UserHandle r1;
        java.util.concurrent.Executor r2;
        java.util.function.Consumer r3;
        android.app.role.IRoleManager $r8;
        android.os.RemoteCallback $r9;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        java.lang.String r12;

        r0 := @this: android.app.role.RoleManager;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.UserHandle;

        r2 := @parameter3: java.util.concurrent.Executor;

        r3 := @parameter4: java.util.function.Consumer;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r12, "roleName cannot be null or empty");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "user cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "executor cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "callback cannot be null");

     label1:
        $r8 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r9 = staticinvoke <android.app.role.RoleManager: android.os.RemoteCallback createRemoteCallback(java.util.concurrent.Executor,java.util.function.Consumer)>(r2, r3);

        interfaceinvoke $r8.<android.app.role.IRoleManager: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>(r12, i0, $i1, $r9);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.Intent createRequestRoleIntent(java.lang.String)
    {
        android.app.role.RoleManager r0;
        java.lang.String r1, $r7;
        android.content.Intent $r4;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;

        r0 := @this: android.app.role.RoleManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "roleName cannot be null or empty");

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.app.role.action.REQUEST_ROLE");

        $r5 = r0.<android.app.role.RoleManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r7 = virtualinvoke $r6.<android.content.pm.PackageManager: java.lang.String getPermissionControllerPackageName()>();

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r7);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.ROLE_NAME", r1);

        return $r4;
    }

    public java.lang.String getDefaultSmsPackage(int)
    {
        android.app.role.RoleManager r0;
        int i0;
        android.app.role.IRoleManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.app.role.RoleManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        r4 = interfaceinvoke $r1.<android.app.role.IRoleManager: java.lang.String getDefaultSmsPackage(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getHeldRolesFromController(java.lang.String)
    {
        android.app.role.RoleManager r0;
        android.app.role.IRoleManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        java.util.List r6;

        r0 := @this: android.app.role.RoleManager;

        r5 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r5, "packageName cannot be null or empty");

     label1:
        $r2 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        r6 = interfaceinvoke $r2.<android.app.role.IRoleManager: java.util.List getHeldRolesFromController(java.lang.String)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRoleHolders(java.lang.String)
    {
        android.app.role.RoleManager r0;
        java.lang.String r1;
        android.os.UserHandle $r2;
        java.util.List $r3;

        r0 := @this: android.app.role.RoleManager;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $r3 = virtualinvoke r0.<android.app.role.RoleManager: java.util.List getRoleHoldersAsUser(java.lang.String,android.os.UserHandle)>(r1, $r2);

        return $r3;
    }

    public java.util.List getRoleHoldersAsUser(java.lang.String, android.os.UserHandle)
    {
        android.app.role.RoleManager r0;
        android.os.UserHandle r1;
        android.app.role.IRoleManager $r4;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.String r7;
        java.util.List r8;

        r0 := @this: android.app.role.RoleManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r7, "roleName cannot be null or empty");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "user cannot be null");

     label1:
        $r4 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r8 = interfaceinvoke $r4.<android.app.role.IRoleManager: java.util.List getRoleHoldersAsUser(java.lang.String,int)>(r7, $i0);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isRoleAvailable(java.lang.String)
    {
        android.app.role.RoleManager r0;
        boolean z0;
        android.app.role.IRoleManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.app.role.RoleManager;

        r5 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r5, "roleName cannot be null or empty");

     label1:
        $r2 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        z0 = interfaceinvoke $r2.<android.app.role.IRoleManager: boolean isRoleAvailable(java.lang.String)>(r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isRoleHeld(java.lang.String)
    {
        android.app.role.RoleManager r0;
        boolean z0;
        android.content.Context $r2;
        android.app.role.IRoleManager $r3;
        java.lang.String $r4, r7;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.role.RoleManager;

        r7 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r7, "roleName cannot be null or empty");

     label1:
        $r3 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        $r2 = r0.<android.app.role.RoleManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r3.<android.app.role.IRoleManager: boolean isRoleHeld(java.lang.String,java.lang.String)>(r7, $r4);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeOnRoleHoldersChangedListenerAsUser(android.app.role.OnRoleHoldersChangedListener, android.os.UserHandle)
    {
        android.app.role.RoleManager r0;
        android.os.UserHandle r1;
        int i0, $i1;
        java.lang.Object r2, $r8, $r9;
        android.util.ArrayMap r3;
        android.app.role.RoleManager$OnRoleHoldersChangedListenerDelegate r4;
        android.util.SparseArray $r7, $r12;
        android.app.role.IRoleManager $r10;
        boolean $z0;
        android.os.RemoteException $r13;
        java.lang.RuntimeException $r14;
        java.lang.Throwable $r15;
        android.app.role.OnRoleHoldersChangedListener r16;

        r0 := @this: android.app.role.RoleManager;

        r16 := @parameter0: android.app.role.OnRoleHoldersChangedListener;

        r1 := @parameter1: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r16, "listener cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "user cannot be null");

        i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r2 = r0.<android.app.role.RoleManager: java.lang.Object mListenersLock>;

        entermonitor r2;

     label01:
        $r7 = r0.<android.app.role.RoleManager: android.util.SparseArray mListeners>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (android.util.ArrayMap) $r8;

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        return;

     label05:
        $r9 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r4 = (android.app.role.RoleManager$OnRoleHoldersChangedListenerDelegate) $r9;

     label06:
        if r4 != null goto label09;

     label07:
        exitmonitor r2;

     label08:
        return;

     label09:
        $r10 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r10.<android.app.role.IRoleManager: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>(r4, $i1);

     label10:
        virtualinvoke r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r16);

        $z0 = virtualinvoke r3.<android.util.ArrayMap: boolean isEmpty()>();

        if $z0 == 0 goto label11;

        $r12 = r0.<android.app.role.RoleManager: android.util.SparseArray mListeners>;

        virtualinvoke $r12.<android.util.SparseArray: void remove(int)>(i0);

     label11:
        exitmonitor r2;

     label12:
        return;

     label13:
        $r13 := @caughtexception;

     label14:
        $r14 = virtualinvoke $r13.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r14;

     label15:
        $r15 := @caughtexception;

     label16:
        exitmonitor r2;

     label17:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch android.os.RemoteException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void removeRoleHolderAsUser(java.lang.String, java.lang.String, int, android.os.UserHandle, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.app.role.RoleManager r0;
        java.lang.String r1, r14;
        int i0, $i1;
        android.os.UserHandle r2;
        java.util.concurrent.Executor r3;
        java.util.function.Consumer r4;
        android.app.role.IRoleManager $r10;
        android.os.RemoteCallback $r11;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;

        r0 := @this: android.app.role.RoleManager;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.UserHandle;

        r3 := @parameter4: java.util.concurrent.Executor;

        r4 := @parameter5: java.util.function.Consumer;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r14, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName cannot be null or empty");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "user cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "executor cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "callback cannot be null");

     label1:
        $r10 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r11 = staticinvoke <android.app.role.RoleManager: android.os.RemoteCallback createRemoteCallback(java.util.concurrent.Executor,java.util.function.Consumer)>(r3, r4);

        interfaceinvoke $r10.<android.app.role.IRoleManager: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>(r14, r1, i0, $i1, $r11);

     label2:
        return;

     label3:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeRoleHolderFromController(java.lang.String, java.lang.String)
    {
        android.app.role.RoleManager r0;
        java.lang.String r1, r7;
        boolean z0;
        android.app.role.IRoleManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.app.role.RoleManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r7, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName cannot be null or empty");

     label1:
        $r4 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        z0 = interfaceinvoke $r4.<android.app.role.IRoleManager: boolean removeRoleHolderFromController(java.lang.String,java.lang.String)>(r7, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRoleNamesFromController(java.util.List)
    {
        android.app.role.RoleManager r0;
        android.app.role.IRoleManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.List r5;

        r0 := @this: android.app.role.RoleManager;

        r5 := @parameter0: java.util.List;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "roleNames cannot be null");

     label1:
        $r2 = r0.<android.app.role.RoleManager: android.app.role.IRoleManager mService>;

        interfaceinvoke $r2.<android.app.role.IRoleManager: void setRoleNamesFromController(java.util.List)>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
