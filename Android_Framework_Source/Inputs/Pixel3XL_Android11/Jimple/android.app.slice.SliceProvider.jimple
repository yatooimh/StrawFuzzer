public abstract class android.app.slice.SliceProvider extends android.content.ContentProvider
{
    private static final boolean DEBUG;
    public static final java.lang.String EXTRA_BIND_URI;
    public static final java.lang.String EXTRA_INTENT;
    public static final java.lang.String EXTRA_PKG;
    public static final java.lang.String EXTRA_PROVIDER_PKG;
    public static final java.lang.String EXTRA_RESULT;
    public static final java.lang.String EXTRA_SLICE;
    public static final java.lang.String EXTRA_SLICE_DESCENDANTS;
    public static final java.lang.String EXTRA_SUPPORTED_SPECS;
    public static final java.lang.String METHOD_GET_DESCENDANTS;
    public static final java.lang.String METHOD_GET_PERMISSIONS;
    public static final java.lang.String METHOD_MAP_INTENT;
    public static final java.lang.String METHOD_MAP_ONLY_INTENT;
    public static final java.lang.String METHOD_PIN;
    public static final java.lang.String METHOD_SLICE;
    public static final java.lang.String METHOD_UNPIN;
    private static final long SLICE_BIND_ANR;
    public static final java.lang.String SLICE_TYPE;
    private static final java.lang.String TAG;
    private final java.lang.Runnable mAnr;
    private final java.lang.String[] mAutoGrantPermissions;
    private java.lang.String mCallback;
    private android.app.slice.SliceManager mSliceManager;

    public void <init>()
    {
        android.app.slice.SliceProvider r0;
        android.app.slice._$$Lambda$SliceProvider$bIgM5f4PsMvz_YYWEeFTjvTqevw $r1;
        java.lang.String[] $r2;

        r0 := @this: android.app.slice.SliceProvider;

        specialinvoke r0.<android.content.ContentProvider: void <init>()>();

        $r1 = new android.app.slice._$$Lambda$SliceProvider$bIgM5f4PsMvz_YYWEeFTjvTqevw;

        specialinvoke $r1.<android.app.slice._$$Lambda$SliceProvider$bIgM5f4PsMvz_YYWEeFTjvTqevw: void <init>(android.app.slice.SliceProvider)>(r0);

        r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr> = $r1;

        $r2 = newarray (java.lang.String)[0];

        r0.<android.app.slice.SliceProvider: java.lang.String[] mAutoGrantPermissions> = $r2;

        return;
    }

    public transient void <init>(java.lang.String[])
    {
        android.app.slice.SliceProvider r0;
        java.lang.String[] r1;
        android.app.slice._$$Lambda$SliceProvider$bIgM5f4PsMvz_YYWEeFTjvTqevw $r2;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<android.content.ContentProvider: void <init>()>();

        $r2 = new android.app.slice._$$Lambda$SliceProvider$bIgM5f4PsMvz_YYWEeFTjvTqevw;

        specialinvoke $r2.<android.app.slice._$$Lambda$SliceProvider$bIgM5f4PsMvz_YYWEeFTjvTqevw: void <init>(android.app.slice.SliceProvider)>(r0);

        r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr> = $r2;

        r0.<android.app.slice.SliceProvider: java.lang.String[] mAutoGrantPermissions> = r1;

        return;
    }

    public static android.app.PendingIntent createPermissionIntent(android.content.Context, android.net.Uri, java.lang.String)
    {
        android.content.Context r0;
        android.net.Uri r1, $r15;
        java.lang.String r2, $r6, $r11;
        android.content.Intent $r4;
        android.content.res.Resources $r5;
        android.content.ComponentName $r7;
        android.net.Uri$Builder $r13, $r14;
        android.app.PendingIntent $r17;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("com.android.intent.action.REQUEST_SLICE_PERMISSION");

        $r5 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(17039948);

        $r7 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r6);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r7);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("slice_uri", r1);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("pkg", r2);

        $r11 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("provider_pkg", $r11);

        $r13 = virtualinvoke r1.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r14 = virtualinvoke $r13.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("package", r2);

        $r15 = virtualinvoke $r14.<android.net.Uri$Builder: android.net.Uri build()>();

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r15);

        $r17 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>(r0, 0, $r4, 0);

        return $r17;
    }

    public static java.lang.CharSequence getPermissionString(android.content.Context, java.lang.String)
    {
        java.lang.String r0, r10;
        android.content.pm.PackageManager r1;
        java.lang.Object[] $r2;
        android.content.pm.ApplicationInfo $r3, $r5;
        java.lang.CharSequence $r4, $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.RuntimeException $r8;
        android.content.Context r9;

        r9 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        r1 = virtualinvoke r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r0, 0);

        $r4 = virtualinvoke $r3.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r1);

        $r2[0] = $r4;

        $r5 = virtualinvoke r9.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r6 = virtualinvoke $r5.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r1);

        $r2[1] = $r6;

        r10 = virtualinvoke r9.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17041262, $r2);

     label2:
        return r10;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unknown calling app", $r7);

        throw $r8;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private android.app.slice.Slice handleBindSlice(android.net.Uri, java.util.List, java.lang.String, int, int)
    {
        android.app.slice.SliceProvider r0;
        int i0, i1;
        android.content.Context $r1, $r10;
        android.content.pm.PackageManager $r2;
        java.lang.String[] $r3;
        android.app.slice.SliceManager $r4;
        android.os.Handler $r5, $r7, $r13;
        java.lang.Runnable $r6, $r8, $r14;
        java.lang.Throwable $r9, $r12;
        android.app.slice.Slice $r11, r18;
        android.net.Uri r15;
        java.util.List r16;
        java.lang.String r17;

        r0 := @this: android.app.slice.SliceProvider;

        r15 := @parameter0: android.net.Uri;

        r16 := @parameter1: java.util.List;

        r17 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        if r17 == null goto label1;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<android.app.slice.SliceProvider: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r17 = virtualinvoke $r2.<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>(i0);

     label2:
        $r4 = r0.<android.app.slice.SliceProvider: android.app.slice.SliceManager mSliceManager>;

        $r3 = r0.<android.app.slice.SliceProvider: java.lang.String[] mAutoGrantPermissions>;

        virtualinvoke $r4.<android.app.slice.SliceManager: void enforceSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>(r15, r17, i1, i0, $r3);

     label3:
        r0.<android.app.slice.SliceProvider: java.lang.String mCallback> = "onBindSlice";

        $r5 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r6 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r5.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, 2000L);

     label4:
        r18 = specialinvoke r0.<android.app.slice.SliceProvider: android.app.slice.Slice onBindSliceStrict(android.net.Uri,java.util.List)>(r15, r16);

     label5:
        $r7 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r8 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r7.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r8);

        return r18;

     label6:
        $r12 := @caughtexception;

        $r13 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r14 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r13.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r14);

        throw $r12;

     label7:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r0.<android.app.slice.SliceProvider: android.content.Context getContext()>();

        $r11 = virtualinvoke r0.<android.app.slice.SliceProvider: android.app.slice.Slice createPermissionSlice(android.content.Context,android.net.Uri,java.lang.String)>($r10, r15, r17);

        return $r11;

        catch java.lang.SecurityException from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private java.util.Collection handleGetDescendants(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.util.Collection $r2;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r0.<android.app.slice.SliceProvider: java.lang.String mCallback> = "onGetSliceDescendants";

        $r2 = virtualinvoke r0.<android.app.slice.SliceProvider: java.util.Collection onGetSliceDescendants(android.net.Uri)>(r1);

        return $r2;
    }

    private void handlePinSlice(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.os.Handler $r1, $r3, $r6;
        java.lang.Runnable $r2, $r4, $r7;
        java.lang.Throwable $r5;
        android.net.Uri r8;

        r0 := @this: android.app.slice.SliceProvider;

        r8 := @parameter0: android.net.Uri;

        r0.<android.app.slice.SliceProvider: java.lang.String mCallback> = "onSlicePinned";

        $r1 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r2 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r2, 2000L);

     label1:
        virtualinvoke r0.<android.app.slice.SliceProvider: void onSlicePinned(android.net.Uri)>(r8);

     label2:
        $r3 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r4 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        return;

     label3:
        $r5 := @caughtexception;

        $r6 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r7 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r6.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r7);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void handleUnpinSlice(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.os.Handler $r1, $r3, $r6;
        java.lang.Runnable $r2, $r4, $r7;
        java.lang.Throwable $r5;
        android.net.Uri r8;

        r0 := @this: android.app.slice.SliceProvider;

        r8 := @parameter0: android.net.Uri;

        r0.<android.app.slice.SliceProvider: java.lang.String mCallback> = "onSliceUnpinned";

        $r1 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r2 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r2, 2000L);

     label1:
        virtualinvoke r0.<android.app.slice.SliceProvider: void onSliceUnpinned(android.net.Uri)>(r8);

     label2:
        $r3 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r4 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        return;

     label3:
        $r5 := @caughtexception;

        $r6 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r7 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r6.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r7);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private android.app.slice.Slice onBindSliceStrict(android.net.Uri, java.util.List)
    {
        android.app.slice.SliceProvider r0;
        java.util.List r1;
        android.os.StrictMode$ThreadPolicy r2, $r5;
        android.os.StrictMode$ThreadPolicy$Builder $r3, $r4, r8;
        java.lang.Throwable $r6;
        android.net.Uri r7;
        android.util.ArraySet r9;
        android.app.slice.Slice r10;

        r0 := @this: android.app.slice.SliceProvider;

        r7 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.util.List;

        r2 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()>();

     label1:
        r8 = new android.os.StrictMode$ThreadPolicy$Builder;

        specialinvoke r8.<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>();

        $r3 = virtualinvoke r8.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>();

        $r4 = virtualinvoke $r3.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDeath()>();

        $r5 = virtualinvoke $r4.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r5);

        r9 = new android.util.ArraySet;

        specialinvoke r9.<android.util.ArraySet: void <init>(java.util.Collection)>(r1);

        r10 = virtualinvoke r0.<android.app.slice.SliceProvider: android.app.slice.Slice onBindSlice(android.net.Uri,java.util.Set)>(r7, r9);

     label2:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        return r10;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private android.net.Uri validateIncomingUriOrNull(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1, r2;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = virtualinvoke r0.<android.app.slice.SliceProvider: android.net.Uri validateIncomingUri(android.net.Uri)>(r1);

     label2:
        return r2;
    }

    public void attachInfo(android.content.Context, android.content.pm.ProviderInfo)
    {
        android.app.slice.SliceProvider r0;
        android.content.Context r1;
        android.content.pm.ProviderInfo r2;
        java.lang.Object $r3;
        android.app.slice.SliceManager $r4;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.ProviderInfo;

        specialinvoke r0.<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(r1, r2);

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/slice/SliceManager;");

        $r4 = (android.app.slice.SliceManager) $r3;

        r0.<android.app.slice.SliceProvider: android.app.slice.SliceManager mSliceManager> = $r4;

        return;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.app.slice.SliceProvider r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.SecurityException $r1, $r13, $r17;
        android.os.Bundle $r2, $r7, $r20, $r23, $r32, r35, $r50;
        java.lang.String[] $r3;
        android.os.Parcelable $r4, $r10, $r14, $r18, $r21, $r26;
        android.net.Uri $r5, $r6, $r11, $r12, $r15, $r16, $r19, $r22, $r27, $r28, $r29, r39, r43, r45, r46, r47;
        java.util.ArrayList $r8, $r30, r40;
        java.util.Collection $r9;
        java.lang.String $r24, $r31, r33, r34;
        android.app.slice.Slice $r25, r36;
        android.content.Intent r38, r42;

        r0 := @this: android.app.slice.SliceProvider;

        r33 := @parameter0: java.lang.String;

        r34 := @parameter1: java.lang.String;

        r35 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("bind_slice");

        if $z0 == 0 goto label01;

        $r26 = virtualinvoke r35.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        $r27 = (android.net.Uri) $r26;

        $r28 = specialinvoke r0.<android.app.slice.SliceProvider: android.net.Uri validateIncomingUriOrNull(android.net.Uri)>($r27);

        $r29 = staticinvoke <android.app.slice.SliceProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>($r28);

        $r30 = virtualinvoke r35.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("supported_specs");

        $r31 = virtualinvoke r0.<android.app.slice.SliceProvider: java.lang.String getCallingPackage()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r36 = specialinvoke r0.<android.app.slice.SliceProvider: android.app.slice.Slice handleBindSlice(android.net.Uri,java.util.List,java.lang.String,int,int)>($r29, $r30, $r31, $i5, $i6);

        $r32 = new android.os.Bundle;

        specialinvoke $r32.<android.os.Bundle: void <init>()>();

        virtualinvoke $r32.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", r36);

        return $r32;

     label01:
        $z1 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("map_slice");

        if $z1 == 0 goto label05;

        $r21 = virtualinvoke r35.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_intent");

        r38 = (android.content.Intent) $r21;

        if r38 != null goto label02;

        return null;

     label02:
        $r22 = virtualinvoke r0.<android.app.slice.SliceProvider: android.net.Uri onMapIntentToUri(android.content.Intent)>(r38);

        r39 = specialinvoke r0.<android.app.slice.SliceProvider: android.net.Uri validateIncomingUriOrNull(android.net.Uri)>($r22);

        r40 = virtualinvoke r35.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("supported_specs");

        $r23 = new android.os.Bundle;

        specialinvoke $r23.<android.os.Bundle: void <init>()>();

        if r39 == null goto label03;

        $r24 = virtualinvoke r0.<android.app.slice.SliceProvider: java.lang.String getCallingPackage()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r25 = specialinvoke r0.<android.app.slice.SliceProvider: android.app.slice.Slice handleBindSlice(android.net.Uri,java.util.List,java.lang.String,int,int)>(r39, r40, $r24, $i3, $i4);

        virtualinvoke $r23.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", $r25);

        goto label04;

     label03:
        virtualinvoke $r23.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", null);

     label04:
        return $r23;

     label05:
        $z2 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("map_only");

        if $z2 == 0 goto label07;

        $r18 = virtualinvoke r35.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_intent");

        r42 = (android.content.Intent) $r18;

        if r42 != null goto label06;

        return null;

     label06:
        $r19 = virtualinvoke r0.<android.app.slice.SliceProvider: android.net.Uri onMapIntentToUri(android.content.Intent)>(r42);

        r43 = specialinvoke r0.<android.app.slice.SliceProvider: android.net.Uri validateIncomingUriOrNull(android.net.Uri)>($r19);

        $r20 = new android.os.Bundle;

        specialinvoke $r20.<android.os.Bundle: void <init>()>();

        virtualinvoke $r20.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice", r43);

        return $r20;

     label07:
        $z3 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("pin");

        if $z3 == 0 goto label09;

        $r14 = virtualinvoke r35.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        $r15 = (android.net.Uri) $r14;

        $r16 = specialinvoke r0.<android.app.slice.SliceProvider: android.net.Uri validateIncomingUriOrNull(android.net.Uri)>($r15);

        r45 = staticinvoke <android.app.slice.SliceProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>($r16);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 != 1000 goto label08;

        specialinvoke r0.<android.app.slice.SliceProvider: void handlePinSlice(android.net.Uri)>(r45);

        goto label14;

     label08:
        $r17 = new java.lang.SecurityException;

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system can pin/unpin slices");

        throw $r17;

     label09:
        $z4 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("unpin");

        if $z4 == 0 goto label11;

        $r10 = virtualinvoke r35.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        $r11 = (android.net.Uri) $r10;

        $r12 = specialinvoke r0.<android.app.slice.SliceProvider: android.net.Uri validateIncomingUriOrNull(android.net.Uri)>($r11);

        r46 = staticinvoke <android.app.slice.SliceProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>($r12);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label10;

        specialinvoke r0.<android.app.slice.SliceProvider: void handleUnpinSlice(android.net.Uri)>(r46);

        goto label14;

     label10:
        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system can pin/unpin slices");

        throw $r13;

     label11:
        $z5 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("get_descendants");

        if $z5 == 0 goto label12;

        $r4 = virtualinvoke r35.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("slice_uri");

        $r5 = (android.net.Uri) $r4;

        $r6 = specialinvoke r0.<android.app.slice.SliceProvider: android.net.Uri validateIncomingUriOrNull(android.net.Uri)>($r5);

        r47 = staticinvoke <android.app.slice.SliceProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>($r6);

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        $r8 = new java.util.ArrayList;

        $r9 = specialinvoke r0.<android.app.slice.SliceProvider: java.util.Collection handleGetDescendants(android.net.Uri)>(r47);

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        virtualinvoke $r7.<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>("slice_descendants", $r8);

        return $r7;

     label12:
        $z6 = virtualinvoke r33.<java.lang.String: boolean equals(java.lang.Object)>("get_permissions");

        if $z6 == 0 goto label14;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label13;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        $r3 = r0.<android.app.slice.SliceProvider: java.lang.String[] mAutoGrantPermissions>;

        virtualinvoke $r2.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("result", $r3);

        return $r2;

     label13:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system can get permissions");

        throw $r1;

     label14:
        $r50 = specialinvoke r0.<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>(r33, r34, r35);

        return $r50;
    }

    public android.app.slice.Slice createPermissionSlice(android.content.Context, android.net.Uri, java.lang.String)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1, $r25;
        java.lang.String r2;
        int i0;
        android.os.Handler $r5, $r7, $r43;
        java.lang.Runnable $r6, $r8, $r44;
        android.app.slice.Slice$Builder $r9, $r10, $r13, $r16, $r17, $r22, $r28, $r31, $r33, $r35, $r40, r47;
        android.graphics.drawable.Icon $r11, $r26;
        java.util.List $r12, $r15, $r27, $r30, $r32, $r39;
        java.lang.String[] $r14, $r38;
        android.app.slice.Slice $r18, $r34, $r36, $r41;
        android.util.TypedValue $r19;
        android.view.ContextThemeWrapper $r20;
        android.content.res.Resources$Theme $r21;
        android.net.Uri$Builder $r23, $r24;
        java.lang.CharSequence $r29;
        java.lang.Throwable $r42;
        android.content.Context r45;
        android.app.PendingIntent r46;

        r0 := @this: android.app.slice.SliceProvider;

        r45 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        r0.<android.app.slice.SliceProvider: java.lang.String mCallback> = "onCreatePermissionRequest";

        $r5 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r6 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r5.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, 2000L);

     label1:
        r46 = virtualinvoke r0.<android.app.slice.SliceProvider: android.app.PendingIntent onCreatePermissionRequest(android.net.Uri)>(r1);

     label2:
        $r7 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r8 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r7.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r8);

        $r9 = new android.app.slice.Slice$Builder;

        specialinvoke $r9.<android.app.slice.Slice$Builder: void <init>(android.net.Uri)>(r1);

        $r10 = new android.app.slice.Slice$Builder;

        specialinvoke $r10.<android.app.slice.Slice$Builder: void <init>(android.app.slice.Slice$Builder)>($r9);

        $r11 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>(r45, 17302789);

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r13 = virtualinvoke $r10.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addIcon(android.graphics.drawable.Icon,java.lang.String,java.util.List)>($r11, null, $r12);

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "title";

        $r14[1] = "shortcut";

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        $r16 = virtualinvoke $r13.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addHints(java.util.List)>($r15);

        $r17 = new android.app.slice.Slice$Builder;

        specialinvoke $r17.<android.app.slice.Slice$Builder: void <init>(android.app.slice.Slice$Builder)>($r9);

        $r18 = virtualinvoke $r17.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        r47 = virtualinvoke $r16.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addAction(android.app.PendingIntent,android.app.slice.Slice,java.lang.String)>(r46, $r18, null);

        $r19 = new android.util.TypedValue;

        specialinvoke $r19.<android.util.TypedValue: void <init>()>();

        $r20 = new android.view.ContextThemeWrapper;

        specialinvoke $r20.<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>(r45, 16974123);

        $r21 = virtualinvoke $r20.<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r21.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843829, $r19, 1);

        i0 = $r19.<android.util.TypedValue: int data>;

        $r22 = new android.app.slice.Slice$Builder;

        $r23 = virtualinvoke r1.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r24 = virtualinvoke $r23.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("permission");

        $r25 = virtualinvoke $r24.<android.net.Uri$Builder: android.net.Uri build()>();

        specialinvoke $r22.<android.app.slice.Slice$Builder: void <init>(android.net.Uri)>($r25);

        $r26 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>(r45, 17302304);

        $r27 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r28 = virtualinvoke $r22.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addIcon(android.graphics.drawable.Icon,java.lang.String,java.util.List)>($r26, null, $r27);

        $r29 = staticinvoke <android.app.slice.SliceProvider: java.lang.CharSequence getPermissionString(android.content.Context,java.lang.String)>(r45, r2);

        $r30 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r31 = virtualinvoke $r28.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>($r29, null, $r30);

        $r32 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r33 = virtualinvoke $r31.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addInt(int,java.lang.String,java.util.List)>(i0, "color", $r32);

        $r34 = virtualinvoke r47.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        $r35 = virtualinvoke $r33.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addSubSlice(android.app.slice.Slice,java.lang.String)>($r34, null);

        $r36 = virtualinvoke $r35.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        virtualinvoke $r9.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addSubSlice(android.app.slice.Slice,java.lang.String)>($r36, null);

        $r38 = newarray (java.lang.String)[1];

        $r38[0] = "permission_request";

        $r39 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r38);

        $r40 = virtualinvoke $r9.<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addHints(java.util.List)>($r39);

        $r41 = virtualinvoke $r40.<android.app.slice.Slice$Builder: android.app.slice.Slice build()>();

        return $r41;

     label3:
        $r42 := @caughtexception;

        $r43 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        $r44 = r0.<android.app.slice.SliceProvider: java.lang.Runnable mAnr>;

        virtualinvoke $r43.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r44);

        throw $r42;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.String[] r3;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        return 0;
    }

    public final java.lang.String getType(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        return "vnd.android.slice";
    }

    public final android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        return null;
    }

    public void lambda$new$0$SliceProvider()
    {
        android.app.slice.SliceProvider r0;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;

        r0 := @this: android.app.slice.SliceProvider;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void sendSignal(int,int)>($i0, 3);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timed out while handling slice callback ");

        $r4 = r0.<android.app.slice.SliceProvider: java.lang.String mCallback>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("SliceProvider", $r6);

        return;
    }

    public android.app.slice.Slice onBindSlice(android.net.Uri, java.util.List)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.util.List r2;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.util.List;

        return null;
    }

    public android.app.slice.Slice onBindSlice(android.net.Uri, java.util.Set)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.util.Set r2;
        java.util.ArrayList $r3;
        android.app.slice.Slice $r4;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.util.Set;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        $r4 = virtualinvoke r0.<android.app.slice.SliceProvider: android.app.slice.Slice onBindSlice(android.net.Uri,java.util.List)>(r1, $r3);

        return $r4;
    }

    public android.app.PendingIntent onCreatePermissionRequest(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        android.content.Context $r2;
        java.lang.String $r3;
        android.app.PendingIntent $r4;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        $r2 = virtualinvoke r0.<android.app.slice.SliceProvider: android.content.Context getContext()>();

        $r3 = virtualinvoke r0.<android.app.slice.SliceProvider: java.lang.String getCallingPackage()>();

        $r4 = staticinvoke <android.app.slice.SliceProvider: android.app.PendingIntent createPermissionIntent(android.content.Context,android.net.Uri,java.lang.String)>($r2, r1, $r3);

        return $r4;
    }

    public java.util.Collection onGetSliceDescendants(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.util.List $r2;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;
    }

    public android.net.Uri onMapIntentToUri(android.content.Intent)
    {
        android.app.slice.SliceProvider r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This provider has not implemented intent to uri mapping");

        throw $r2;
    }

    public void onSlicePinned(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        return;
    }

    public void onSliceUnpinned(android.net.Uri)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        return;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], android.os.Bundle, android.os.CancellationSignal)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        return null;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        return null;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.os.CancellationSignal r6;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.CancellationSignal;

        return null;
    }

    public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.app.slice.SliceProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3;
        java.lang.String[] r4;

        r0 := @this: android.app.slice.SliceProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        return 0;
    }

    public static void <clinit>()
    {
        <android.app.slice.SliceProvider: java.lang.String TAG> = "SliceProvider";

        <android.app.slice.SliceProvider: java.lang.String SLICE_TYPE> = "vnd.android.slice";

        <android.app.slice.SliceProvider: long SLICE_BIND_ANR> = 2000L;

        <android.app.slice.SliceProvider: java.lang.String METHOD_UNPIN> = "unpin";

        <android.app.slice.SliceProvider: java.lang.String METHOD_SLICE> = "bind_slice";

        <android.app.slice.SliceProvider: java.lang.String METHOD_PIN> = "pin";

        <android.app.slice.SliceProvider: java.lang.String METHOD_MAP_ONLY_INTENT> = "map_only";

        <android.app.slice.SliceProvider: java.lang.String METHOD_MAP_INTENT> = "map_slice";

        <android.app.slice.SliceProvider: java.lang.String METHOD_GET_PERMISSIONS> = "get_permissions";

        <android.app.slice.SliceProvider: java.lang.String METHOD_GET_DESCENDANTS> = "get_descendants";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_SUPPORTED_SPECS> = "supported_specs";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_SLICE_DESCENDANTS> = "slice_descendants";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_SLICE> = "slice";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_RESULT> = "result";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_PROVIDER_PKG> = "provider_pkg";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_PKG> = "pkg";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_INTENT> = "slice_intent";

        <android.app.slice.SliceProvider: java.lang.String EXTRA_BIND_URI> = "slice_uri";

        <android.app.slice.SliceProvider: boolean DEBUG> = 0;

        return;
    }
}
