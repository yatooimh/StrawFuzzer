public final class android.app.timezone.RulesManager extends java.lang.Object
{
    public static final java.lang.String ACTION_RULES_UPDATE_OPERATION;
    private static final boolean DEBUG;
    public static final int ERROR_OPERATION_IN_PROGRESS;
    public static final int ERROR_UNKNOWN_FAILURE;
    public static final java.lang.String EXTRA_OPERATION_STAGED;
    public static final int SUCCESS;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.app.timezone.IRulesManager mIRulesManager;

    public void <init>(android.content.Context)
    {
        android.app.timezone.RulesManager r0;
        android.content.Context r1;
        android.os.IBinder $r2;
        android.app.timezone.IRulesManager $r3;

        r0 := @this: android.app.timezone.RulesManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.timezone.RulesManager: android.content.Context mContext> = r1;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("timezone");

        $r3 = staticinvoke <android.app.timezone.IRulesManager$Stub: android.app.timezone.IRulesManager asInterface(android.os.IBinder)>($r2);

        r0.<android.app.timezone.RulesManager: android.app.timezone.IRulesManager mIRulesManager> = $r3;

        return;
    }

    static void logDebug(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return;
    }

    public android.app.timezone.RulesState getRulesState()
    {
        android.app.timezone.RulesManager r0;
        java.lang.StringBuilder r1;
        android.app.timezone.IRulesManager $r2;
        java.lang.String $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.app.timezone.RulesState r8;

        r0 := @this: android.app.timezone.RulesManager;

     label1:
        staticinvoke <android.app.timezone.RulesManager: void logDebug(java.lang.String)>("mIRulesManager.getRulesState()");

        $r2 = r0.<android.app.timezone.RulesManager: android.app.timezone.IRulesManager mIRulesManager>;

        r8 = interfaceinvoke $r2.<android.app.timezone.IRulesManager: android.app.timezone.RulesState getRulesState()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIRulesManager.getRulesState() returned ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.app.timezone.RulesManager: void logDebug(java.lang.String)>($r5);

     label2:
        return r8;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int requestInstall(android.os.ParcelFileDescriptor, byte[], android.app.timezone.Callback) throws java.io.IOException
    {
        android.app.timezone.RulesManager r0;
        byte[] r1;
        int i0;
        android.app.timezone.RulesManager$CallbackWrapper $r2;
        android.content.Context $r3;
        android.app.timezone.IRulesManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.os.ParcelFileDescriptor r7;
        android.app.timezone.Callback r8;

        r0 := @this: android.app.timezone.RulesManager;

        r7 := @parameter0: android.os.ParcelFileDescriptor;

        r1 := @parameter1: byte[];

        r8 := @parameter2: android.app.timezone.Callback;

        $r2 = new android.app.timezone.RulesManager$CallbackWrapper;

        $r3 = r0.<android.app.timezone.RulesManager: android.content.Context mContext>;

        specialinvoke $r2.<android.app.timezone.RulesManager$CallbackWrapper: void <init>(android.app.timezone.RulesManager,android.content.Context,android.app.timezone.Callback)>(r0, $r3, r8);

     label1:
        staticinvoke <android.app.timezone.RulesManager: void logDebug(java.lang.String)>("mIRulesManager.requestInstall()");

        $r4 = r0.<android.app.timezone.RulesManager: android.app.timezone.IRulesManager mIRulesManager>;

        i0 = interfaceinvoke $r4.<android.app.timezone.IRulesManager: int requestInstall(android.os.ParcelFileDescriptor,byte[],android.app.timezone.ICallback)>(r7, r1, $r2);

     label2:
        return i0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestNothing(byte[], boolean)
    {
        android.app.timezone.RulesManager r0;
        boolean z0;
        java.lang.StringBuilder r1;
        java.lang.String $r3, $r5;
        android.app.timezone.IRulesManager $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        byte[] r9;

        r0 := @this: android.app.timezone.RulesManager;

        r9 := @parameter0: byte[];

        z0 := @parameter1: boolean;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIRulesManager.requestNothing() with token=");

        $r3 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r9);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.app.timezone.RulesManager: void logDebug(java.lang.String)>($r5);

        $r6 = r0.<android.app.timezone.RulesManager: android.app.timezone.IRulesManager mIRulesManager>;

        interfaceinvoke $r6.<android.app.timezone.IRulesManager: void requestNothing(byte[],boolean)>(r9, z0);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int requestUninstall(byte[], android.app.timezone.Callback)
    {
        android.app.timezone.RulesManager r0;
        int i0;
        android.app.timezone.RulesManager$CallbackWrapper $r1;
        android.content.Context $r2;
        android.app.timezone.IRulesManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        byte[] r6;
        android.app.timezone.Callback r7;

        r0 := @this: android.app.timezone.RulesManager;

        r6 := @parameter0: byte[];

        r7 := @parameter1: android.app.timezone.Callback;

        $r1 = new android.app.timezone.RulesManager$CallbackWrapper;

        $r2 = r0.<android.app.timezone.RulesManager: android.content.Context mContext>;

        specialinvoke $r1.<android.app.timezone.RulesManager$CallbackWrapper: void <init>(android.app.timezone.RulesManager,android.content.Context,android.app.timezone.Callback)>(r0, $r2, r7);

     label1:
        staticinvoke <android.app.timezone.RulesManager: void logDebug(java.lang.String)>("mIRulesManager.requestUninstall()");

        $r3 = r0.<android.app.timezone.RulesManager: android.app.timezone.IRulesManager mIRulesManager>;

        i0 = interfaceinvoke $r3.<android.app.timezone.IRulesManager: int requestUninstall(byte[],android.app.timezone.ICallback)>(r6, $r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.app.timezone.RulesManager: java.lang.String TAG> = "timezone.RulesManager";

        <android.app.timezone.RulesManager: int SUCCESS> = 0;

        <android.app.timezone.RulesManager: java.lang.String EXTRA_OPERATION_STAGED> = "staged";

        <android.app.timezone.RulesManager: int ERROR_UNKNOWN_FAILURE> = 2;

        <android.app.timezone.RulesManager: int ERROR_OPERATION_IN_PROGRESS> = 1;

        <android.app.timezone.RulesManager: boolean DEBUG> = 0;

        <android.app.timezone.RulesManager: java.lang.String ACTION_RULES_UPDATE_OPERATION> = "com.android.intent.action.timezone.RULES_UPDATE_OPERATION";

        return;
    }
}
