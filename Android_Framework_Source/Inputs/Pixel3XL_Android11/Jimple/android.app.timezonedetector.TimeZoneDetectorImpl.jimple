public final class android.app.timezonedetector.TimeZoneDetectorImpl extends java.lang.Object implements android.app.timezonedetector.TimeZoneDetector
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final android.app.timezonedetector.ITimeZoneDetectorService mITimeZoneDetectorService;

    public void <init>() throws android.os.ServiceManager$ServiceNotFoundException
    {
        android.app.timezonedetector.TimeZoneDetectorImpl r0;
        android.os.IBinder $r1;
        android.app.timezonedetector.ITimeZoneDetectorService $r2;

        r0 := @this: android.app.timezonedetector.TimeZoneDetectorImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("time_zone_detector");

        $r2 = staticinvoke <android.app.timezonedetector.ITimeZoneDetectorService$Stub: android.app.timezonedetector.ITimeZoneDetectorService asInterface(android.os.IBinder)>($r1);

        r0.<android.app.timezonedetector.TimeZoneDetectorImpl: android.app.timezonedetector.ITimeZoneDetectorService mITimeZoneDetectorService> = $r2;

        return;
    }

    public void suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)
    {
        android.app.timezonedetector.TimeZoneDetectorImpl r0;
        android.app.timezonedetector.ITimeZoneDetectorService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.timezonedetector.ManualTimeZoneSuggestion r4;

        r0 := @this: android.app.timezonedetector.TimeZoneDetectorImpl;

        r4 := @parameter0: android.app.timezonedetector.ManualTimeZoneSuggestion;

     label1:
        $r1 = r0.<android.app.timezonedetector.TimeZoneDetectorImpl: android.app.timezonedetector.ITimeZoneDetectorService mITimeZoneDetectorService>;

        interfaceinvoke $r1.<android.app.timezonedetector.ITimeZoneDetectorService: void suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)
    {
        android.app.timezonedetector.TimeZoneDetectorImpl r0;
        android.app.timezonedetector.ITimeZoneDetectorService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.timezonedetector.TelephonyTimeZoneSuggestion r4;

        r0 := @this: android.app.timezonedetector.TimeZoneDetectorImpl;

        r4 := @parameter0: android.app.timezonedetector.TelephonyTimeZoneSuggestion;

     label1:
        $r1 = r0.<android.app.timezonedetector.TimeZoneDetectorImpl: android.app.timezonedetector.ITimeZoneDetectorService mITimeZoneDetectorService>;

        interfaceinvoke $r1.<android.app.timezonedetector.ITimeZoneDetectorService: void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.app.timezonedetector.TimeZoneDetectorImpl: java.lang.String TAG> = "timezonedetector.TimeZoneDetector";

        <android.app.timezonedetector.TimeZoneDetectorImpl: boolean DEBUG> = 0;

        return;
    }
}
