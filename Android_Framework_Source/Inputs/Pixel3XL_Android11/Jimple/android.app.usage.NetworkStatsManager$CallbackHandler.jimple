class android.app.usage.NetworkStatsManager$CallbackHandler extends android.os.Handler
{
    private android.app.usage.NetworkStatsManager$UsageCallback mCallback;
    private final int mNetworkType;
    private final java.lang.String mSubscriberId;

    void <init>(android.os.Looper, int, java.lang.String, android.app.usage.NetworkStatsManager$UsageCallback)
    {
        android.app.usage.NetworkStatsManager$CallbackHandler r0;
        android.os.Looper r1;
        int i0;
        java.lang.String r2;
        android.app.usage.NetworkStatsManager$UsageCallback r3;

        r0 := @this: android.app.usage.NetworkStatsManager$CallbackHandler;

        r1 := @parameter0: android.os.Looper;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.app.usage.NetworkStatsManager$UsageCallback;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        r0.<android.app.usage.NetworkStatsManager$CallbackHandler: int mNetworkType> = i0;

        r0.<android.app.usage.NetworkStatsManager$CallbackHandler: java.lang.String mSubscriberId> = r2;

        r0.<android.app.usage.NetworkStatsManager$CallbackHandler: android.app.usage.NetworkStatsManager$UsageCallback mCallback> = r3;

        return;
    }

    private static java.lang.Object getObject(android.os.Message, java.lang.String)
    {
        android.os.Message r0;
        java.lang.String r1;
        android.os.Bundle $r2;
        android.os.Parcelable $r3;

        r0 := @parameter0: android.os.Message;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<android.os.Message: android.os.Bundle getData()>();

        $r3 = virtualinvoke $r2.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>(r1);

        return $r3;
    }

    public void handleMessage(android.os.Message)
    {
        android.app.usage.NetworkStatsManager$CallbackHandler r0;
        android.net.DataUsageRequest r1;
        int i0, $i2;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r7;
        android.os.Message r8;
        android.app.usage.NetworkStatsManager$UsageCallback r9;

        r0 := @this: android.app.usage.NetworkStatsManager$CallbackHandler;

        r8 := @parameter0: android.os.Message;

        $r2 = staticinvoke <android.app.usage.NetworkStatsManager$CallbackHandler: java.lang.Object getObject(android.os.Message,java.lang.String)>(r8, "DataUsageRequest");

        r1 = (android.net.DataUsageRequest) $r2;

        i0 = r8.<android.os.Message: int what>;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        goto label4;

     label1:
        r0.<android.app.usage.NetworkStatsManager$CallbackHandler: android.app.usage.NetworkStatsManager$UsageCallback mCallback> = null;

        goto label4;

     label2:
        r9 = r0.<android.app.usage.NetworkStatsManager$CallbackHandler: android.app.usage.NetworkStatsManager$UsageCallback mCallback>;

        if r9 == null goto label3;

        $i2 = r0.<android.app.usage.NetworkStatsManager$CallbackHandler: int mNetworkType>;

        $r7 = r0.<android.app.usage.NetworkStatsManager$CallbackHandler: java.lang.String mSubscriberId>;

        virtualinvoke r9.<android.app.usage.NetworkStatsManager$UsageCallback: void onThresholdReached(int,java.lang.String)>($i2, $r7);

        goto label4;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("limit reached with released callback for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkStatsManager", $r6);

     label4:
        return;
    }
}
