public final class android.companion.BluetoothLeDeviceFilter$Builder extends android.provider.OneTimeUseBuilder
{
    private java.util.regex.Pattern mNamePattern;
    private byte[] mRawDataFilter;
    private byte[] mRawDataFilterMask;
    private int mRenameBytesFrom;
    private int mRenameBytesLength;
    private boolean mRenameBytesReverseOrder;
    private int mRenameNameFrom;
    private int mRenameNameLength;
    private java.lang.String mRenamePrefix;
    private java.lang.String mRenameSuffix;
    private android.bluetooth.le.ScanFilter mScanFilter;

    public void <init>()
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        specialinvoke r0.<android.provider.OneTimeUseBuilder: void <init>()>();

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameBytesFrom> = -1;

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameNameFrom> = -1;

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: boolean mRenameBytesReverseOrder> = 0;

        return;
    }

    private void checkRangeNotEmpty(int)
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        int i0;
        boolean z0;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Range must be non-empty");

        return;
    }

    private void checkRenameNotSet()
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        java.lang.String $r1;
        boolean z0;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        $r1 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: java.lang.String mRenamePrefix>;

        if $r1 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Renaming rule can only be set once");

        return;
    }

    private android.companion.BluetoothLeDeviceFilter$Builder setRename(java.lang.String, java.lang.String)
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        java.lang.String r1, r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkNotUsed()>();

        $i0 = staticinvoke <android.text.TextUtils: int length(java.lang.String)>(r1);

        $i1 = staticinvoke <android.companion.BluetoothLeDeviceFilter: int getRenamePrefixLengthLimit()>();

        if $i0 > $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Prefix is too long");

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: java.lang.String mRenamePrefix> = r1;

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: java.lang.String mRenameSuffix> = r2;

        return r0;
    }

    public android.companion.BluetoothLeDeviceFilter build()
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        android.companion.BluetoothLeDeviceFilter $r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r3;
        byte[] $r4, $r5;
        android.bluetooth.le.ScanFilter $r6;
        java.util.regex.Pattern $r7;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        virtualinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void markUsed()>();

        $r1 = new android.companion.BluetoothLeDeviceFilter;

        $r7 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: java.util.regex.Pattern mNamePattern>;

        $r6 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: android.bluetooth.le.ScanFilter mScanFilter>;

        $r5 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: byte[] mRawDataFilter>;

        $r4 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: byte[] mRawDataFilterMask>;

        $r3 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: java.lang.String mRenamePrefix>;

        $r2 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: java.lang.String mRenameSuffix>;

        $i3 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameBytesFrom>;

        $i2 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameBytesLength>;

        $i1 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameNameFrom>;

        $i0 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameNameLength>;

        $z0 = r0.<android.companion.BluetoothLeDeviceFilter$Builder: boolean mRenameBytesReverseOrder>;

        specialinvoke $r1.<android.companion.BluetoothLeDeviceFilter: void <init>(java.util.regex.Pattern,android.bluetooth.le.ScanFilter,byte[],byte[],java.lang.String,java.lang.String,int,int,int,int,boolean,android.companion.BluetoothLeDeviceFilter$1)>($r7, $r6, $r5, $r4, $r3, $r2, $i3, $i2, $i1, $i0, $z0, null);

        return $r1;
    }

    public volatile java.lang.Object build()
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        android.companion.BluetoothLeDeviceFilter $r1;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        $r1 = virtualinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter build()>();

        return $r1;
    }

    public android.companion.BluetoothLeDeviceFilter$Builder setNamePattern(java.util.regex.Pattern)
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        java.util.regex.Pattern r1;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        r1 := @parameter0: java.util.regex.Pattern;

        virtualinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkNotUsed()>();

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: java.util.regex.Pattern mNamePattern> = r1;

        return r0;
    }

    public android.companion.BluetoothLeDeviceFilter$Builder setRawDataFilter(byte[], byte[])
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        byte[] r1, r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        virtualinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkNotUsed()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        if r2 == null goto label2;

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Mask and filter should be the same length");

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: byte[] mRawDataFilter> = r1;

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: byte[] mRawDataFilterMask> = r2;

        return r0;
    }

    public android.companion.BluetoothLeDeviceFilter$Builder setRenameFromBytes(java.lang.String, java.lang.String, int, int, java.nio.ByteOrder)
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0, $r5;
        java.lang.String r1, r2;
        int i0, i1;
        java.nio.ByteOrder r3, $r4;
        boolean z0;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.nio.ByteOrder;

        specialinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkRenameNotSet()>();

        specialinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkRangeNotEmpty(int)>(i1);

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameBytesFrom> = i0;

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameBytesLength> = i1;

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if r3 != $r4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<android.companion.BluetoothLeDeviceFilter$Builder: boolean mRenameBytesReverseOrder> = z0;

        $r5 = specialinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setRename(java.lang.String,java.lang.String)>(r1, r2);

        return $r5;
    }

    public android.companion.BluetoothLeDeviceFilter$Builder setRenameFromName(java.lang.String, java.lang.String, int, int)
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0, $r3;
        java.lang.String r1, r2;
        int i0, i1;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkRenameNotSet()>();

        specialinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkRangeNotEmpty(int)>(i1);

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameNameFrom> = i0;

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: int mRenameNameLength> = i1;

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: boolean mRenameBytesReverseOrder> = 0;

        $r3 = specialinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setRename(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public android.companion.BluetoothLeDeviceFilter$Builder setScanFilter(android.bluetooth.le.ScanFilter)
    {
        android.companion.BluetoothLeDeviceFilter$Builder r0;
        android.bluetooth.le.ScanFilter r1;

        r0 := @this: android.companion.BluetoothLeDeviceFilter$Builder;

        r1 := @parameter0: android.bluetooth.le.ScanFilter;

        virtualinvoke r0.<android.companion.BluetoothLeDeviceFilter$Builder: void checkNotUsed()>();

        r0.<android.companion.BluetoothLeDeviceFilter$Builder: android.bluetooth.le.ScanFilter mScanFilter> = r1;

        return r0;
    }
}
