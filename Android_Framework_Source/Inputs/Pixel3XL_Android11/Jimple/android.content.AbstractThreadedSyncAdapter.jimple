public abstract class android.content.AbstractThreadedSyncAdapter extends java.lang.Object
{
    private static final boolean ENABLE_LOG;
    public static final int LOG_SYNC_DETAILS;
    private static final java.lang.String TAG;
    private boolean mAllowParallelSyncs;
    private final boolean mAutoInitialize;
    private final android.content.Context mContext;
    private final android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl mISyncAdapterImpl;
    private final java.util.concurrent.atomic.AtomicInteger mNumSyncStarts;
    private final java.lang.Object mSyncThreadLock;
    private final java.util.HashMap mSyncThreads;

    static void <clinit>()
    {
        boolean $z0, $z1, z2;

        <android.content.AbstractThreadedSyncAdapter: java.lang.String TAG> = "SyncAdapter";

        <android.content.AbstractThreadedSyncAdapter: int LOG_SYNC_DETAILS> = 2743;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SyncAdapter", 3);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        <android.content.AbstractThreadedSyncAdapter: boolean ENABLE_LOG> = z2;

        return;
    }

    public void <init>(android.content.Context, boolean)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.content.Context r1;
        boolean z0;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.content.AbstractThreadedSyncAdapter: void <init>(android.content.Context,boolean,boolean)>(r1, z0, 0);

        return;
    }

    public void <init>(android.content.Context, boolean, boolean)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.content.Context r1;
        boolean z0, z1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.content.AbstractThreadedSyncAdapter: java.util.HashMap mSyncThreads> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.content.AbstractThreadedSyncAdapter: java.lang.Object mSyncThreadLock> = $r3;

        r0.<android.content.AbstractThreadedSyncAdapter: android.content.Context mContext> = r1;

        $r4 = new android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl;

        specialinvoke $r4.<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void <init>(android.content.AbstractThreadedSyncAdapter,android.content.AbstractThreadedSyncAdapter$1)>(r0, null);

        r0.<android.content.AbstractThreadedSyncAdapter: android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl mISyncAdapterImpl> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.content.AbstractThreadedSyncAdapter: java.util.concurrent.atomic.AtomicInteger mNumSyncStarts> = $r5;

        r0.<android.content.AbstractThreadedSyncAdapter: boolean mAutoInitialize> = z0;

        r0.<android.content.AbstractThreadedSyncAdapter: boolean mAllowParallelSyncs> = z1;

        return;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <android.content.AbstractThreadedSyncAdapter: boolean ENABLE_LOG>;

        return $z0;
    }

    static boolean access$1100(android.content.AbstractThreadedSyncAdapter)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        boolean $z0;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        $z0 = r0.<android.content.AbstractThreadedSyncAdapter: boolean mAllowParallelSyncs>;

        return $z0;
    }

    static void access$1200(android.content.AbstractThreadedSyncAdapter, android.content.ISyncAdapterUnsyncableAccountCallback)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.content.ISyncAdapterUnsyncableAccountCallback r1;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        r1 := @parameter1: android.content.ISyncAdapterUnsyncableAccountCallback;

        specialinvoke r0.<android.content.AbstractThreadedSyncAdapter: void handleOnUnsyncableAccount(android.content.ISyncAdapterUnsyncableAccountCallback)>(r1);

        return;
    }

    static android.content.Context access$1300(android.content.AbstractThreadedSyncAdapter)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.content.Context $r1;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        $r1 = r0.<android.content.AbstractThreadedSyncAdapter: android.content.Context mContext>;

        return $r1;
    }

    static android.accounts.Account access$200(android.content.AbstractThreadedSyncAdapter, android.accounts.Account)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.accounts.Account r1, $r2;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        r1 := @parameter1: android.accounts.Account;

        $r2 = specialinvoke r0.<android.content.AbstractThreadedSyncAdapter: android.accounts.Account toSyncKey(android.accounts.Account)>(r1);

        return $r2;
    }

    static java.lang.Object access$300(android.content.AbstractThreadedSyncAdapter)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        $r1 = r0.<android.content.AbstractThreadedSyncAdapter: java.lang.Object mSyncThreadLock>;

        return $r1;
    }

    static java.util.HashMap access$400(android.content.AbstractThreadedSyncAdapter)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        $r1 = r0.<android.content.AbstractThreadedSyncAdapter: java.util.HashMap mSyncThreads>;

        return $r1;
    }

    static boolean access$500(android.content.AbstractThreadedSyncAdapter)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        boolean $z0;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        $z0 = r0.<android.content.AbstractThreadedSyncAdapter: boolean mAutoInitialize>;

        return $z0;
    }

    static java.util.concurrent.atomic.AtomicInteger access$600(android.content.AbstractThreadedSyncAdapter)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: android.content.AbstractThreadedSyncAdapter;

        $r1 = r0.<android.content.AbstractThreadedSyncAdapter: java.util.concurrent.atomic.AtomicInteger mNumSyncStarts>;

        return $r1;
    }

    private void handleOnUnsyncableAccount(android.content.ISyncAdapterUnsyncableAccountCallback)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        java.lang.RuntimeException $r2;
        android.os.RemoteException $r3;
        android.content.ISyncAdapterUnsyncableAccountCallback r4;
        boolean z0;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        r4 := @parameter0: android.content.ISyncAdapterUnsyncableAccountCallback;

     label1:
        z0 = virtualinvoke r0.<android.content.AbstractThreadedSyncAdapter: boolean onUnsyncableAccount()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SyncAdapter", "Exception while calling onUnsyncableAccount, assuming \'true\'", $r2);

        z0 = 1;

     label4:
        interfaceinvoke r4.<android.content.ISyncAdapterUnsyncableAccountCallback: void onUnsyncableAccountDone(boolean)>(z0);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SyncAdapter", "Could not report result of onUnsyncableAccount", $r3);

     label7:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private android.accounts.Account toSyncKey(android.accounts.Account)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.accounts.Account r1;
        boolean $z0;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        r1 := @parameter0: android.accounts.Account;

        $z0 = r0.<android.content.AbstractThreadedSyncAdapter: boolean mAllowParallelSyncs>;

        if $z0 == 0 goto label1;

        return r1;

     label1:
        return null;
    }

    public android.content.Context getContext()
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.content.Context $r1;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        $r1 = r0.<android.content.AbstractThreadedSyncAdapter: android.content.Context mContext>;

        return $r1;
    }

    public final android.os.IBinder getSyncAdapterBinder()
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl $r1;
        android.os.IBinder $r2;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        $r1 = r0.<android.content.AbstractThreadedSyncAdapter: android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl mISyncAdapterImpl>;

        $r2 = virtualinvoke $r1.<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: android.os.IBinder asBinder()>();

        return $r2;
    }

    public abstract void onPerformSync(android.accounts.Account, android.os.Bundle, java.lang.String, android.content.ContentProviderClient, android.content.SyncResult);

    public void onSecurityException(android.accounts.Account, android.os.Bundle, java.lang.String, android.content.SyncResult)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        android.accounts.Account r1;
        android.os.Bundle r2;
        java.lang.String r3;
        android.content.SyncResult r4;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.SyncResult;

        return;
    }

    public void onSyncCanceled()
    {
        android.content.AbstractThreadedSyncAdapter r0;
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;
        java.lang.Throwable $r4;
        android.content.AbstractThreadedSyncAdapter$SyncThread r5;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        r1 = r0.<android.content.AbstractThreadedSyncAdapter: java.lang.Object mSyncThreadLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.content.AbstractThreadedSyncAdapter: java.util.HashMap mSyncThreads>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(null);

        r5 = (android.content.AbstractThreadedSyncAdapter$SyncThread) $r3;

        exitmonitor r1;

     label2:
        if r5 == null goto label3;

        virtualinvoke r5.<android.content.AbstractThreadedSyncAdapter$SyncThread: void interrupt()>();

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void onSyncCanceled(java.lang.Thread)
    {
        android.content.AbstractThreadedSyncAdapter r0;
        java.lang.Thread r1;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        r1 := @parameter0: java.lang.Thread;

        virtualinvoke r1.<java.lang.Thread: void interrupt()>();

        return;
    }

    public boolean onUnsyncableAccount()
    {
        android.content.AbstractThreadedSyncAdapter r0;

        r0 := @this: android.content.AbstractThreadedSyncAdapter;

        return 1;
    }
}
