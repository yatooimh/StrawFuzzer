public class android.content.ContentProviderClient extends java.lang.Object implements android.content.ContentInterface, java.lang.AutoCloseable
{
    private static final java.lang.String TAG;
    private static android.os.Handler sAnrHandler;
    private android.content.ContentProviderClient$NotRespondingRunnable mAnrRunnable;
    private long mAnrTimeout;
    private final java.lang.String mAttributionTag;
    private final java.lang.String mAuthority;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.util.concurrent.atomic.AtomicBoolean mClosed;
    private final android.content.IContentProvider mContentProvider;
    private final android.content.ContentResolver mContentResolver;
    private final java.lang.String mPackageName;
    private final boolean mStable;

    public void <init>(android.content.ContentResolver, android.content.IContentProvider, java.lang.String, boolean)
    {
        android.content.ContentProviderClient r0;
        android.content.ContentResolver r1;
        android.content.IContentProvider r2;
        java.lang.String r3, $r6, $r7;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        dalvik.system.CloseGuard $r5, $r8;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.content.IContentProvider;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.content.ContentProviderClient: java.util.concurrent.atomic.AtomicBoolean mClosed> = $r4;

        $r5 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.content.ContentProviderClient: dalvik.system.CloseGuard mCloseGuard> = $r5;

        r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver> = r1;

        r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider> = r2;

        $r6 = r1.<android.content.ContentResolver: java.lang.String mPackageName>;

        r0.<android.content.ContentProviderClient: java.lang.String mPackageName> = $r6;

        $r7 = r1.<android.content.ContentResolver: java.lang.String mAttributionTag>;

        r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag> = $r7;

        r0.<android.content.ContentProviderClient: java.lang.String mAuthority> = r3;

        r0.<android.content.ContentProviderClient: boolean mStable> = z0;

        $r8 = r0.<android.content.ContentProviderClient: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    public void <init>(android.content.ContentResolver, android.content.IContentProvider, boolean)
    {
        android.content.ContentProviderClient r0;
        android.content.ContentResolver r1;
        android.content.IContentProvider r2;
        boolean z0;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.content.IContentProvider;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.content.ContentProviderClient: void <init>(android.content.ContentResolver,android.content.IContentProvider,java.lang.String,boolean)>(r1, r2, "unknown", z0);

        return;
    }

    static android.content.IContentProvider access$100(android.content.ContentProviderClient)
    {
        android.content.ContentProviderClient r0;
        android.content.IContentProvider $r1;

        r0 := @parameter0: android.content.ContentProviderClient;

        $r1 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        return $r1;
    }

    static android.content.ContentResolver access$200(android.content.ContentProviderClient)
    {
        android.content.ContentProviderClient r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: android.content.ContentProviderClient;

        $r1 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    private void afterRemote()
    {
        android.content.ContentProviderClient r0;
        android.content.ContentProviderClient$NotRespondingRunnable r1;
        android.os.Handler $r2;

        r0 := @this: android.content.ContentProviderClient;

        r1 = r0.<android.content.ContentProviderClient: android.content.ContentProviderClient$NotRespondingRunnable mAnrRunnable>;

        if r1 == null goto label1;

        $r2 = <android.content.ContentProviderClient: android.os.Handler sAnrHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r1);

     label1:
        return;
    }

    private void beforeRemote()
    {
        android.content.ContentProviderClient r0;
        android.content.ContentProviderClient$NotRespondingRunnable r1;
        long $l0;
        android.os.Handler $r2;

        r0 := @this: android.content.ContentProviderClient;

        r1 = r0.<android.content.ContentProviderClient: android.content.ContentProviderClient$NotRespondingRunnable mAnrRunnable>;

        if r1 == null goto label1;

        $r2 = <android.content.ContentProviderClient: android.os.Handler sAnrHandler>;

        $l0 = r0.<android.content.ContentProviderClient: long mAnrTimeout>;

        virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r1, $l0);

     label1:
        return;
    }

    private boolean closeInternal()
    {
        android.content.ContentProviderClient r0;
        dalvik.system.CloseGuard $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0, $z1, $z2, $z3;
        android.content.IContentProvider $r3, $r5;
        android.content.ContentResolver $r4, $r6;

        r0 := @this: android.content.ContentProviderClient;

        $r1 = r0.<android.content.ContentProviderClient: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $r2 = r0.<android.content.ContentProviderClient: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.content.ContentProviderClient: void setDetectNotResponding(long)>(0L);

        $z1 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z1 == 0 goto label1;

        $r6 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r5 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $z3 = virtualinvoke $r6.<android.content.ContentResolver: boolean releaseProvider(android.content.IContentProvider)>($r5);

        return $z3;

     label1:
        $r4 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r3 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $z2 = virtualinvoke $r4.<android.content.ContentResolver: boolean releaseUnstableProvider(android.content.IContentProvider)>($r3);

        return $z2;

     label2:
        return 0;
    }

    public static void closeQuietly(android.content.ContentProviderClient)
    {
        android.content.ContentProviderClient r0;

        r0 := @parameter0: android.content.ContentProviderClient;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        return;
    }

    public static void releaseQuietly(android.content.ContentProviderClient)
    {
        android.content.ContentProviderClient r0;

        r0 := @parameter0: android.content.ContentProviderClient;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        return;
    }

    public android.content.ContentProviderResult[] applyBatch(java.lang.String, java.util.ArrayList) throws android.os.RemoteException, android.content.OperationApplicationException
    {
        android.content.ContentProviderClient r0;
        java.util.ArrayList r1;
        java.lang.String $r3, $r4, r10;
        android.content.IContentProvider $r5, $r8;
        java.lang.Throwable $r6;
        android.os.DeadObjectException $r7;
        boolean $z0;
        android.content.ContentResolver $r9;
        android.content.ContentProviderResult[] r11;

        r0 := @this: android.content.ContentProviderClient;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.ArrayList;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "operations");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r5 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r4 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r3 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r11 = interfaceinvoke $r5.<android.content.IContentProvider: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.lang.String,java.lang.String,java.util.ArrayList)>($r4, $r3, r10, r1);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r11;

     label3:
        $r6 := @caughtexception;

        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r9 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r8 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r9.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r8);

     label6:
        throw $r7;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r6;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public android.content.ContentProviderResult[] applyBatch(java.util.ArrayList) throws android.os.RemoteException, android.content.OperationApplicationException
    {
        android.content.ContentProviderClient r0;
        java.util.ArrayList r1;
        java.lang.String $r2;
        android.content.ContentProviderResult[] $r3;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = r0.<android.content.ContentProviderClient: java.lang.String mAuthority>;

        $r3 = virtualinvoke r0.<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>($r2, r1);

        return $r3;
    }

    public int bulkInsert(android.net.Uri, android.content.ContentValues[]) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.content.ContentValues[] r1;
        int i0;
        java.lang.String $r4, $r5;
        android.content.IContentProvider $r6, $r9;
        java.lang.Throwable $r7;
        android.os.DeadObjectException $r8;
        boolean $z0;
        android.content.ContentResolver $r10;
        android.net.Uri r11;

        r0 := @this: android.content.ContentProviderClient;

        r11 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.content.ContentValues[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "url");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "initialValues");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r6 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r5 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r4 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        i0 = interfaceinvoke $r6.<android.content.IContentProvider: int bulkInsert(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues[])>($r5, $r4, r11, r1);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return i0;

     label3:
        $r7 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r10 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r9 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r10.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r9);

     label6:
        throw $r8;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r7;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        java.lang.String r1, r2, $r4;
        android.os.Bundle r3, $r5;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = r0.<android.content.ContentProviderClient: java.lang.String mAuthority>;

        $r5 = virtualinvoke r0.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r4, r1, r2, r3);

        return $r5;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, java.lang.String, android.os.Bundle) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        java.lang.String r1, r2, $r6, $r7, r13;
        android.os.Bundle r3, r14;
        android.content.IContentProvider $r8, $r11;
        java.lang.Throwable $r9;
        android.os.DeadObjectException $r10;
        boolean $z0;
        android.content.ContentResolver $r12;

        r0 := @this: android.content.ContentProviderClient;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "authority");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "method");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r8 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r7 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r6 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r14 = interfaceinvoke $r8.<android.content.IContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r7, $r6, r13, r1, r2, r3);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r14;

     label3:
        $r9 := @caughtexception;

        goto label7;

     label4:
        $r10 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r12 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r11 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r12.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r11);

     label6:
        throw $r10;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r9;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public final android.net.Uri canonicalize(android.net.Uri) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        java.lang.String $r2, $r3;
        android.content.IContentProvider $r4, $r6;
        android.os.DeadObjectException $r5;
        boolean $z0;
        android.content.ContentResolver $r7;
        java.lang.Throwable $r8;
        android.net.Uri r9, r10;

        r0 := @this: android.content.ContentProviderClient;

        r9 := @parameter0: android.net.Uri;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r4 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r3 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r2 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r10 = interfaceinvoke $r4.<android.content.IContentProvider: android.net.Uri canonicalize(java.lang.String,java.lang.String,android.net.Uri)>($r3, $r2, r9);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r10;

     label3:
        $r8 := @caughtexception;

        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r7 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r6 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r7.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r6);

     label6:
        throw $r5;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r8;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public int checkUriPermission(android.net.Uri, int, int) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        int i0, i1, i2;
        java.lang.String $r2, $r3;
        android.content.IContentProvider $r4, $r7;
        java.lang.Throwable $r5;
        android.os.DeadObjectException $r6;
        boolean $z0;
        android.content.ContentResolver $r8;
        android.net.Uri r9;

        r0 := @this: android.content.ContentProviderClient;

        r9 := @parameter0: android.net.Uri;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "uri");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r4 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r3 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r2 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        i2 = interfaceinvoke $r4.<android.content.IContentProvider: int checkUriPermission(java.lang.String,java.lang.String,android.net.Uri,int,int)>($r3, $r2, r9, i1, i0);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return i2;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r6 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r8 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r7 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r8.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r7);

     label6:
        throw $r6;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r5;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public void close()
    {
        android.content.ContentProviderClient r0;

        r0 := @this: android.content.ContentProviderClient;

        specialinvoke r0.<android.content.ContentProviderClient: boolean closeInternal()>();

        return;
    }

    public int delete(android.net.Uri, android.os.Bundle) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.os.Bundle r1;
        int i0;
        java.lang.String $r3, $r4;
        android.content.IContentProvider $r5, $r8;
        java.lang.Throwable $r6;
        android.os.DeadObjectException $r7;
        boolean $z0;
        android.content.ContentResolver $r9;
        android.net.Uri r10;

        r0 := @this: android.content.ContentProviderClient;

        r10 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.os.Bundle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r5 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r4 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r3 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        i0 = interfaceinvoke $r5.<android.content.IContentProvider: int delete(java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle)>($r4, $r3, r10, r1);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return i0;

     label3:
        $r6 := @caughtexception;

        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r9 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r8 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r9.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r8);

     label6:
        throw $r7;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r6;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public int delete(android.net.Uri, java.lang.String, java.lang.String[]) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.String[] r3;
        android.os.Bundle $r4;
        int $i0;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r4 = staticinvoke <android.content.ContentResolver: android.os.Bundle createSqlQueryBundle(java.lang.String,java.lang.String[])>(r2, r3);

        $i0 = virtualinvoke r0.<android.content.ContentProviderClient: int delete(android.net.Uri,android.os.Bundle)>(r1, $r4);

        return $i0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.content.ContentProviderClient r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.content.ContentProviderClient;

     label1:
        $r2 = r0.<android.content.ContentProviderClient: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.content.ContentProviderClient: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.content.ContentProviderClient: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.content.ContentProvider getLocalContentProvider()
    {
        android.content.ContentProviderClient r0;
        android.content.IContentProvider $r1;
        android.content.ContentProvider $r2;

        r0 := @this: android.content.ContentProviderClient;

        $r1 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r2 = staticinvoke <android.content.ContentProvider: android.content.ContentProvider coerceToLocalContentProvider(android.content.IContentProvider)>($r1);

        return $r2;
    }

    public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        java.lang.String r1;
        android.content.IContentProvider $r4, $r7;
        java.lang.Throwable $r5;
        android.os.DeadObjectException $r6;
        boolean $z0;
        android.content.ContentResolver $r8;
        android.net.Uri r9;
        java.lang.String[] r10;

        r0 := @this: android.content.ContentProviderClient;

        r9 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "url");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "mimeTypeFilter");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r4 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        r10 = interfaceinvoke $r4.<android.content.IContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>(r9, r1);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r10;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r6 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r8 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r7 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r8.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r7);

     label6:
        throw $r6;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r5;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public java.lang.String getType(android.net.Uri) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.content.IContentProvider $r2, $r5;
        java.lang.Throwable $r3;
        android.os.DeadObjectException $r4;
        boolean $z0;
        android.content.ContentResolver $r6;
        android.net.Uri r7;
        java.lang.String r8;

        r0 := @this: android.content.ContentProviderClient;

        r7 := @parameter0: android.net.Uri;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r2 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        r8 = interfaceinvoke $r2.<android.content.IContentProvider: java.lang.String getType(android.net.Uri)>(r7);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r8;

     label3:
        $r3 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r6 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r5 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r6.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r5);

     label6:
        throw $r4;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r3;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public android.net.Uri insert(android.net.Uri, android.content.ContentValues) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1, $r3;
        android.content.ContentValues r2;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        $r3 = virtualinvoke r0.<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>(r1, r2, null);

        return $r3;
    }

    public android.net.Uri insert(android.net.Uri, android.content.ContentValues, android.os.Bundle) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.content.ContentValues r1;
        android.os.Bundle r2;
        java.lang.String $r4, $r5;
        android.content.IContentProvider $r6, $r9;
        java.lang.Throwable $r7;
        android.os.DeadObjectException $r8;
        boolean $z0;
        android.content.ContentResolver $r10;
        android.net.Uri r11, r12;

        r0 := @this: android.content.ContentProviderClient;

        r11 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.content.ContentValues;

        r2 := @parameter2: android.os.Bundle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r6 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r5 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r4 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r12 = interfaceinvoke $r6.<android.content.IContentProvider: android.net.Uri insert(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues,android.os.Bundle)>($r5, $r4, r11, r1, r2);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r12;

     label3:
        $r7 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r10 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r9 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r10.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r9);

     label6:
        throw $r8;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r7;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.content.res.AssetFileDescriptor $r3;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, r2, null);

        return $r3;
    }

    public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.content.ContentProviderClient r0;
        java.lang.String r1, $r5, $r6;
        android.os.CancellationSignal r2;
        android.content.IContentProvider $r7, $r8, $r10;
        android.os.DeadObjectException $r9;
        boolean $z0;
        android.content.ContentResolver $r11;
        java.lang.Throwable $r12;
        android.net.Uri r13;
        android.os.ICancellationSignal r14;
        android.content.res.AssetFileDescriptor r15;

        r0 := @this: android.content.ContentProviderClient;

        r13 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.CancellationSignal;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "url");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "mode");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

        r14 = null;

        if r2 == null goto label2;

     label1:
        virtualinvoke r2.<android.os.CancellationSignal: void throwIfCanceled()>();

        $r8 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        r14 = interfaceinvoke $r8.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r2.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r14);

     label2:
        $r7 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r6 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r5 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r15 = interfaceinvoke $r7.<android.content.IContentProvider: android.content.res.AssetFileDescriptor openAssetFile(java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.os.ICancellationSignal)>($r6, $r5, r13, r1, r14);

     label3:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r15;

     label4:
        $r12 := @caughtexception;

        goto label8;

     label5:
        $r9 := @caughtexception;

     label6:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label7;

        $r11 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r10 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r11.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r10);

     label7:
        throw $r9;

     label8:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r12;

        catch android.os.DeadObjectException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch android.os.DeadObjectException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r1, r2, null);

        return $r3;
    }

    public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.content.ContentProviderClient r0;
        java.lang.String r1, $r5, $r6;
        android.os.CancellationSignal r2;
        android.content.IContentProvider $r7, $r8, $r10;
        android.os.DeadObjectException $r9;
        boolean $z0;
        android.content.ContentResolver $r11;
        java.lang.Throwable $r12;
        android.net.Uri r13;
        android.os.ICancellationSignal r14;
        android.os.ParcelFileDescriptor r15;

        r0 := @this: android.content.ContentProviderClient;

        r13 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.CancellationSignal;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "url");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "mode");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

        r14 = null;

        if r2 == null goto label2;

     label1:
        virtualinvoke r2.<android.os.CancellationSignal: void throwIfCanceled()>();

        $r8 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        r14 = interfaceinvoke $r8.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r2.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r14);

     label2:
        $r7 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r6 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r5 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r15 = interfaceinvoke $r7.<android.content.IContentProvider: android.os.ParcelFileDescriptor openFile(java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.os.ICancellationSignal,android.os.IBinder)>($r6, $r5, r13, r1, r14, null);

     label3:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r15;

     label4:
        $r12 := @caughtexception;

        goto label8;

     label5:
        $r9 := @caughtexception;

     label6:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label7;

        $r11 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r10 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r11.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r10);

     label7:
        throw $r9;

     label8:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r12;

        catch android.os.DeadObjectException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch android.os.DeadObjectException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.content.ContentProviderClient r0;
        java.lang.String r1, $r6, $r7;
        android.os.Bundle r2;
        android.os.CancellationSignal r3;
        android.content.IContentProvider $r8, $r9, $r12;
        java.lang.Throwable $r10;
        android.os.DeadObjectException $r11;
        boolean $z0;
        android.content.ContentResolver $r13;
        android.net.Uri r14;
        android.os.ICancellationSignal r15;
        android.content.res.AssetFileDescriptor r16;

        r0 := @this: android.content.ContentProviderClient;

        r14 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: android.os.CancellationSignal;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "uri");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "mimeTypeFilter");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

        r15 = null;

        if r3 == null goto label2;

     label1:
        virtualinvoke r3.<android.os.CancellationSignal: void throwIfCanceled()>();

        $r9 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        r15 = interfaceinvoke $r9.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r3.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r15);

     label2:
        $r8 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r7 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r6 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r16 = interfaceinvoke $r8.<android.content.IContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.os.ICancellationSignal)>($r7, $r6, r14, r1, r2, r15);

     label3:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r16;

     label4:
        $r10 := @caughtexception;

        goto label8;

     label5:
        $r11 := @caughtexception;

     label6:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label7;

        $r13 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r12 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r13.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r12);

     label7:
        throw $r11;

     label8:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r10;

        catch android.os.DeadObjectException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch android.os.DeadObjectException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.content.res.AssetFileDescriptor $r4;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = virtualinvoke r0.<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, r2, r3, null);

        return $r4;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        android.content.res.AssetFileDescriptor $r5;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        $r5 = virtualinvoke r0.<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, r2, r3, r4);

        return $r5;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], android.os.Bundle, android.os.CancellationSignal) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        java.lang.String[] r1;
        android.os.Bundle r2;
        android.os.CancellationSignal r3;
        java.lang.String $r5, $r6;
        android.content.IContentProvider $r7, $r9, $r12;
        android.content.ContentProviderClient$CursorWrapperInner $r8;
        java.lang.Throwable $r10;
        android.os.DeadObjectException $r11;
        boolean $z0;
        android.content.ContentResolver $r13;
        android.net.Uri r14;
        android.os.ICancellationSignal r15;
        android.database.Cursor r16;

        r0 := @this: android.content.ContentProviderClient;

        r14 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: android.os.CancellationSignal;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

        r15 = null;

        if r3 == null goto label02;

     label01:
        virtualinvoke r3.<android.os.CancellationSignal: void throwIfCanceled()>();

        $r9 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        r15 = interfaceinvoke $r9.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r3.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r15);

     label02:
        $r7 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r6 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r5 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r16 = interfaceinvoke $r7.<android.content.IContentProvider: android.database.Cursor query(java.lang.String,java.lang.String,android.net.Uri,java.lang.String[],android.os.Bundle,android.os.ICancellationSignal)>($r6, $r5, r14, r1, r2, r15);

     label03:
        if r16 != null goto label04;

        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return null;

     label04:
        $r8 = new android.content.ContentProviderClient$CursorWrapperInner;

        specialinvoke $r8.<android.content.ContentProviderClient$CursorWrapperInner: void <init>(android.content.ContentProviderClient,android.database.Cursor)>(r0, r16);

     label05:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return $r8;

     label06:
        $r10 := @caughtexception;

        goto label10;

     label07:
        $r11 := @caughtexception;

     label08:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label09;

        $r13 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r12 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r13.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r12);

     label09:
        throw $r11;

     label10:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r10;

        catch android.os.DeadObjectException from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch android.os.DeadObjectException from label02 to label03 with label07;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch android.os.DeadObjectException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.database.Cursor $r6;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        $r6 = virtualinvoke r0.<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, r5, null);

        return $r6;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.os.CancellationSignal r6;
        android.os.Bundle $r7;
        android.database.Cursor $r8;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.CancellationSignal;

        $r7 = staticinvoke <android.content.ContentResolver: android.os.Bundle createSqlQueryBundle(java.lang.String,java.lang.String[],java.lang.String)>(r3, r4, r5);

        $r8 = virtualinvoke r0.<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>(r1, r2, $r7, r6);

        return $r8;
    }

    public boolean refresh(android.net.Uri, android.os.Bundle, android.os.CancellationSignal) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.os.Bundle r1;
        android.os.CancellationSignal r2;
        boolean z0, $z1;
        java.lang.String $r4, $r5;
        android.content.IContentProvider $r6, $r7, $r9;
        android.os.DeadObjectException $r8;
        android.content.ContentResolver $r10;
        java.lang.Throwable $r11;
        android.net.Uri r12;
        android.os.ICancellationSignal r13;

        r0 := @this: android.content.ContentProviderClient;

        r12 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: android.os.CancellationSignal;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

        r13 = null;

        if r2 == null goto label2;

     label1:
        virtualinvoke r2.<android.os.CancellationSignal: void throwIfCanceled()>();

        $r7 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        r13 = interfaceinvoke $r7.<android.content.IContentProvider: android.os.ICancellationSignal createCancellationSignal()>();

        virtualinvoke r2.<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)>(r13);

     label2:
        $r6 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r5 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r4 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        z0 = interfaceinvoke $r6.<android.content.IContentProvider: boolean refresh(java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.os.ICancellationSignal)>($r5, $r4, r12, r1, r13);

     label3:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return z0;

     label4:
        $r11 := @caughtexception;

        goto label8;

     label5:
        $r8 := @caughtexception;

     label6:
        $z1 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z1 != 0 goto label7;

        $r10 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r9 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r10.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r9);

     label7:
        throw $r8;

     label8:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r11;

        catch android.os.DeadObjectException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch android.os.DeadObjectException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public boolean release()
    {
        android.content.ContentProviderClient r0;
        boolean $z0;

        r0 := @this: android.content.ContentProviderClient;

        $z0 = specialinvoke r0.<android.content.ContentProviderClient: boolean closeInternal()>();

        return $z0;
    }

    public void setDetectNotResponding(long)
    {
        android.content.ContentProviderClient r0;
        long l0;
        byte $b1;
        android.content.IContentProvider $r1, $r6;
        android.os.IBinder $r2, $r7;
        android.content.ContentProviderClient$NotRespondingRunnable $r4, r11;
        android.os.Handler $r5, r12;
        android.os.Looper $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.content.ContentProviderClient;

        l0 := @parameter0: long;

        entermonitor class "Landroid/content/ContentProviderClient;";

     label01:
        r0.<android.content.ContentProviderClient: long mAnrTimeout> = l0;

     label02:
        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label07;

     label03:
        $r4 = r0.<android.content.ContentProviderClient: android.content.ContentProviderClient$NotRespondingRunnable mAnrRunnable>;

        if $r4 != null goto label04;

        r11 = new android.content.ContentProviderClient$NotRespondingRunnable;

        specialinvoke r11.<android.content.ContentProviderClient$NotRespondingRunnable: void <init>(android.content.ContentProviderClient,android.content.ContentProviderClient$1)>(r0, null);

        r0.<android.content.ContentProviderClient: android.content.ContentProviderClient$NotRespondingRunnable mAnrRunnable> = r11;

     label04:
        $r5 = <android.content.ContentProviderClient: android.os.Handler sAnrHandler>;

        if $r5 != null goto label05;

        r12 = new android.os.Handler;

        $r9 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke r12.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback,boolean)>($r9, null, 1);

        <android.content.ContentProviderClient: android.os.Handler sAnrHandler> = r12;

     label05:
        $r6 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r7 = interfaceinvoke $r6.<android.content.IContentProvider: android.os.IBinder asBinder()>();

        staticinvoke <android.os.Binder: android.os.IBinder allowBlocking(android.os.IBinder)>($r7);

     label06:
        goto label08;

     label07:
        r0.<android.content.ContentProviderClient: android.content.ContentProviderClient$NotRespondingRunnable mAnrRunnable> = null;

        $r1 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r2 = interfaceinvoke $r1.<android.content.IContentProvider: android.os.IBinder asBinder()>();

        staticinvoke <android.os.Binder: android.os.IBinder defaultBlocking(android.os.IBinder)>($r2);

     label08:
        exitmonitor class "Landroid/content/ContentProviderClient;";

     label09:
        return;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor class "Landroid/content/ContentProviderClient;";

     label12:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public final android.net.Uri uncanonicalize(android.net.Uri) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        java.lang.String $r2, $r3;
        android.content.IContentProvider $r4, $r6;
        android.os.DeadObjectException $r5;
        boolean $z0;
        android.content.ContentResolver $r7;
        java.lang.Throwable $r8;
        android.net.Uri r9, r10;

        r0 := @this: android.content.ContentProviderClient;

        r9 := @parameter0: android.net.Uri;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r4 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r3 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r2 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        r10 = interfaceinvoke $r4.<android.content.IContentProvider: android.net.Uri uncanonicalize(java.lang.String,java.lang.String,android.net.Uri)>($r3, $r2, r9);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return r10;

     label3:
        $r8 := @caughtexception;

        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r7 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r6 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r7.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r6);

     label6:
        throw $r5;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r8;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public int update(android.net.Uri, android.content.ContentValues, android.os.Bundle) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.content.ContentValues r1;
        android.os.Bundle r2;
        int i0;
        java.lang.String $r4, $r5;
        android.content.IContentProvider $r6, $r9;
        java.lang.Throwable $r7;
        android.os.DeadObjectException $r8;
        boolean $z0;
        android.content.ContentResolver $r10;
        android.net.Uri r11;

        r0 := @this: android.content.ContentProviderClient;

        r11 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.content.ContentValues;

        r2 := @parameter2: android.os.Bundle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "url");

        specialinvoke r0.<android.content.ContentProviderClient: void beforeRemote()>();

     label1:
        $r6 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        $r5 = r0.<android.content.ContentProviderClient: java.lang.String mPackageName>;

        $r4 = r0.<android.content.ContentProviderClient: java.lang.String mAttributionTag>;

        i0 = interfaceinvoke $r6.<android.content.IContentProvider: int update(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues,android.os.Bundle)>($r5, $r4, r11, r1, r2);

     label2:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        return i0;

     label3:
        $r7 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        $z0 = r0.<android.content.ContentProviderClient: boolean mStable>;

        if $z0 != 0 goto label6;

        $r10 = r0.<android.content.ContentProviderClient: android.content.ContentResolver mContentResolver>;

        $r9 = r0.<android.content.ContentProviderClient: android.content.IContentProvider mContentProvider>;

        virtualinvoke $r10.<android.content.ContentResolver: void unstableProviderDied(android.content.IContentProvider)>($r9);

     label6:
        throw $r8;

     label7:
        specialinvoke r0.<android.content.ContentProviderClient: void afterRemote()>();

        throw $r7;

        catch android.os.DeadObjectException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]) throws android.os.RemoteException
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3;
        java.lang.String[] r4;
        android.os.Bundle $r5;
        int $i0;

        r0 := @this: android.content.ContentProviderClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $r5 = staticinvoke <android.content.ContentResolver: android.os.Bundle createSqlQueryBundle(java.lang.String,java.lang.String[])>(r3, r4);

        $i0 = virtualinvoke r0.<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>(r1, r2, $r5);

        return $i0;
    }

    public static void <clinit>()
    {
        <android.content.ContentProviderClient: java.lang.String TAG> = "ContentProviderClient";

        return;
    }
}
