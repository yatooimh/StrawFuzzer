public abstract class android.content.CursorEntityIterator extends java.lang.Object implements android.content.EntityIterator
{
    private final android.database.Cursor mCursor;
    private boolean mIsClosed;

    public void <init>(android.database.Cursor)
    {
        android.content.CursorEntityIterator r0;
        android.database.Cursor r1;

        r0 := @this: android.content.CursorEntityIterator;

        r1 := @parameter0: android.database.Cursor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.content.CursorEntityIterator: boolean mIsClosed> = 0;

        r0.<android.content.CursorEntityIterator: android.database.Cursor mCursor> = r1;

        interfaceinvoke r1.<android.database.Cursor: boolean moveToFirst()>();

        return;
    }

    public final void close()
    {
        android.content.CursorEntityIterator r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        android.database.Cursor $r2;

        r0 := @this: android.content.CursorEntityIterator;

        $z0 = r0.<android.content.CursorEntityIterator: boolean mIsClosed>;

        if $z0 != 0 goto label1;

        r0.<android.content.CursorEntityIterator: boolean mIsClosed> = 1;

        $r2 = r0.<android.content.CursorEntityIterator: android.database.Cursor mCursor>;

        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closing when already closed");

        throw $r1;
    }

    public abstract android.content.Entity getEntityAndIncrementCursor(android.database.Cursor) throws android.os.RemoteException;

    public final boolean hasNext()
    {
        android.content.CursorEntityIterator r0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r1;
        android.database.Cursor $r2;

        r0 := @this: android.content.CursorEntityIterator;

        $z0 = r0.<android.content.CursorEntityIterator: boolean mIsClosed>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.content.CursorEntityIterator: android.database.Cursor mCursor>;

        $z1 = interfaceinvoke $r2.<android.database.Cursor: boolean isAfterLast()>();

        $z2 = $z1 ^ 1;

        return $z2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("calling hasNext() when the iterator is closed");

        throw $r1;
    }

    public android.content.Entity next()
    {
        android.content.CursorEntityIterator r0;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r1, $r2;
        android.database.Cursor $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.Entity r6;

        r0 := @this: android.content.CursorEntityIterator;

        $z0 = r0.<android.content.CursorEntityIterator: boolean mIsClosed>;

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r0.<android.content.CursorEntityIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

     label1:
        $r3 = r0.<android.content.CursorEntityIterator: android.database.Cursor mCursor>;

        r6 = virtualinvoke r0.<android.content.CursorEntityIterator: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>($r3);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("caught a remote exception, this process will die soon", $r4);

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("you may only call next() if hasNext() is true");

        throw $r2;

     label5:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("calling next() when the iterator is closed");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public volatile java.lang.Object next()
    {
        android.content.CursorEntityIterator r0;
        android.content.Entity $r1;

        r0 := @this: android.content.CursorEntityIterator;

        $r1 = virtualinvoke r0.<android.content.CursorEntityIterator: android.content.Entity next()>();

        return $r1;
    }

    public void remove()
    {
        android.content.CursorEntityIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.content.CursorEntityIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("remove not supported by EntityIterators");

        throw $r1;
    }

    public final void reset()
    {
        android.content.CursorEntityIterator r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        android.database.Cursor $r2;

        r0 := @this: android.content.CursorEntityIterator;

        $z0 = r0.<android.content.CursorEntityIterator: boolean mIsClosed>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.content.CursorEntityIterator: android.database.Cursor mCursor>;

        interfaceinvoke $r2.<android.database.Cursor: boolean moveToFirst()>();

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("calling reset() when the iterator is closed");

        throw $r1;
    }
}
