public class android.content.UndoManager extends java.lang.Object
{
    public static final int MERGE_MODE_ANY;
    public static final int MERGE_MODE_NONE;
    public static final int MERGE_MODE_UNIQUE;
    private int mCommitId;
    private int mHistorySize;
    private boolean mInUndo;
    private boolean mMerged;
    private int mNextSavedIdx;
    private final android.util.ArrayMap mOwners;
    private final java.util.ArrayList mRedos;
    private android.content.UndoOwner[] mStateOwners;
    private int mStateSeq;
    private final java.util.ArrayList mUndos;
    private int mUpdateCount;
    private android.content.UndoManager$UndoState mWorking;

    public void <init>()
    {
        android.content.UndoManager r0;
        android.util.ArrayMap $r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: android.content.UndoManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>(int)>(1);

        r0.<android.content.UndoManager: android.util.ArrayMap mOwners> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.content.UndoManager: java.util.ArrayList mUndos> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.content.UndoManager: java.util.ArrayList mRedos> = $r3;

        r0.<android.content.UndoManager: int mHistorySize> = 20;

        r0.<android.content.UndoManager: int mCommitId> = 1;

        return;
    }

    private void createWorkingState()
    {
        android.content.UndoManager r0;
        int i0, $i1, $i2;
        android.content.UndoManager$UndoState $r1;

        r0 := @this: android.content.UndoManager;

        i0 = r0.<android.content.UndoManager: int mCommitId>;

        $i1 = i0 + 1;

        r0.<android.content.UndoManager: int mCommitId> = $i1;

        $r1 = new android.content.UndoManager$UndoState;

        specialinvoke $r1.<android.content.UndoManager$UndoState: void <init>(android.content.UndoManager,int)>(r0, i0);

        r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking> = $r1;

        $i2 = r0.<android.content.UndoManager: int mCommitId>;

        if $i2 >= 0 goto label1;

        r0.<android.content.UndoManager: int mCommitId> = 1;

     label1:
        return;
    }

    private void pushWorkingState()
    {
        android.content.UndoManager r0;
        int i0, i1, $i2, $i3, $i6;
        java.util.ArrayList $r1, $r5, $r7;
        android.content.UndoManager$UndoState $r2, $r3, $r4, $r6, $r9;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: android.content.UndoManager;

        $r1 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $i2 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i0 = $i2 + 1;

        $r2 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        $z0 = virtualinvoke $r2.<android.content.UndoManager$UndoState: boolean hasData()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $r4 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        virtualinvoke r0.<android.content.UndoManager: int forgetRedos(android.content.UndoOwner[],int)>(null, -1);

        $r6 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r6.<android.content.UndoManager$UndoState: void commit()>();

        if i0 < 2 goto label2;

        $r7 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $i6 = i0 - 2;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        $r9 = (android.content.UndoManager$UndoState) $r8;

        virtualinvoke $r9.<android.content.UndoManager$UndoState: void makeExecuted()>();

        goto label2;

     label1:
        $r3 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r3.<android.content.UndoManager$UndoState: void destroy()>();

     label2:
        r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking> = null;

        i1 = r0.<android.content.UndoManager: int mHistorySize>;

        if i1 < 0 goto label3;

        if i0 <= i1 goto label3;

        $i3 = i0 - i1;

        virtualinvoke r0.<android.content.UndoManager: int forgetUndos(android.content.UndoOwner[],int)>(null, $i3);

     label3:
        return;
    }

    public void addOperation(android.content.UndoOperation, int)
    {
        android.content.UndoManager r0, $r6;
        android.content.UndoOperation r1;
        int i0;
        android.content.UndoManager$UndoState r2, $r3, $r8, $r10, $r12;
        java.lang.IllegalStateException $r4;
        android.content.UndoOwner $r5, $r9;
        java.lang.IllegalArgumentException $r7;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.util.ArrayList $r11;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOperation;

        i0 := @parameter1: int;

        $r3 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if $r3 == null goto label4;

        $r5 = virtualinvoke r1.<android.content.UndoOperation: android.content.UndoOwner getOwner()>();

        $r6 = $r5.<android.content.UndoOwner: android.content.UndoManager mManager>;

        if $r6 != r0 goto label3;

        if i0 == 0 goto label2;

        $z0 = r0.<android.content.UndoManager: boolean mMerged>;

        if $z0 != 0 goto label2;

        $r8 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        $z1 = virtualinvoke $r8.<android.content.UndoManager$UndoState: boolean hasData()>();

        if $z1 != 0 goto label2;

        r2 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])>(null);

        if r2 == null goto label2;

        if i0 == 2 goto label1;

        $z5 = virtualinvoke r2.<android.content.UndoManager$UndoState: boolean hasMultipleOwners()>();

        if $z5 != 0 goto label2;

     label1:
        $z2 = virtualinvoke r2.<android.content.UndoManager$UndoState: boolean canMerge()>();

        if $z2 == 0 goto label2;

        $r9 = virtualinvoke r1.<android.content.UndoOperation: android.content.UndoOwner getOwner()>();

        $z3 = virtualinvoke r2.<android.content.UndoManager$UndoState: boolean hasOperation(android.content.UndoOwner)>($r9);

        if $z3 == 0 goto label2;

        $r10 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r10.<android.content.UndoManager$UndoState: void destroy()>();

        r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking> = r2;

        $r11 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

        r0.<android.content.UndoManager: boolean mMerged> = 1;

     label2:
        $r12 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r12.<android.content.UndoManager$UndoState: void addOperation(android.content.UndoOperation)>(r1);

        return;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given operation\'s owner is not in this undo manager.");

        throw $r7;

     label4:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must be called during an update");

        throw $r4;
    }

    public void beginUpdate(java.lang.CharSequence)
    {
        android.content.UndoManager r0;
        java.lang.CharSequence r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        int $i0, $i1, $i2;
        android.content.UndoManager$UndoState $r3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = r0.<android.content.UndoManager: boolean mInUndo>;

        if $z0 != 0 goto label2;

        $i0 = r0.<android.content.UndoManager: int mUpdateCount>;

        if $i0 > 0 goto label1;

        specialinvoke r0.<android.content.UndoManager: void createWorkingState()>();

        r0.<android.content.UndoManager: boolean mMerged> = 0;

        r0.<android.content.UndoManager: int mUpdateCount> = 0;

     label1:
        $r3 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r3.<android.content.UndoManager$UndoState: void updateLabel(java.lang.CharSequence)>(r1);

        $i1 = r0.<android.content.UndoManager: int mUpdateCount>;

        $i2 = $i1 + 1;

        r0.<android.content.UndoManager: int mUpdateCount> = $i2;

        return;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t being update while performing undo/redo");

        throw $r2;
    }

    public int commitState(android.content.UndoOwner)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner r1;
        int i0, $i1;
        boolean $z1, $z2, $z4;
        android.content.UndoManager$UndoState $r2, $r3, $r4, r5, r6;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner;

        r5 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if r5 == null goto label2;

        $z2 = virtualinvoke r5.<android.content.UndoManager$UndoState: boolean hasData()>();

        if $z2 == 0 goto label2;

        if r1 == null goto label1;

        $r4 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        $z4 = virtualinvoke $r4.<android.content.UndoManager$UndoState: boolean hasOperation(android.content.UndoOwner)>(r1);

        if $z4 == 0 goto label4;

     label1:
        $r2 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r2.<android.content.UndoManager$UndoState: boolean setCanMerge(boolean)>(0);

        $r3 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        i0 = virtualinvoke $r3.<android.content.UndoManager$UndoState: int getCommitId()>();

        specialinvoke r0.<android.content.UndoManager: void pushWorkingState()>();

        specialinvoke r0.<android.content.UndoManager: void createWorkingState()>();

        r0.<android.content.UndoManager: boolean mMerged> = 1;

        return i0;

     label2:
        r6 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])>(null);

        if r6 == null goto label4;

        if r1 == null goto label3;

        $z1 = virtualinvoke r6.<android.content.UndoManager$UndoState: boolean hasOperation(android.content.UndoOwner)>(r1);

        if $z1 == 0 goto label4;

     label3:
        virtualinvoke r6.<android.content.UndoManager$UndoState: boolean setCanMerge(boolean)>(0);

        $i1 = virtualinvoke r6.<android.content.UndoManager$UndoState: int getCommitId()>();

        return $i1;

     label4:
        return -1;
    }

    public int countRedos(android.content.UndoOwner[])
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1, i2, i3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        if r1 != null goto label1;

        $r3 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        return $i0;

     label1:
        i1 = 0;

        i2 = 0;

     label2:
        $r2 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        i3 = virtualinvoke r0.<android.content.UndoManager: int findNextState(java.util.ArrayList,android.content.UndoOwner[],int)>($r2, r1, i2);

        if i3 < 0 goto label3;

        i1 = i1 + 1;

        i2 = i3 + 1;

        goto label2;

     label3:
        return i1;
    }

    public int countUndos(android.content.UndoOwner[])
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1, i2, i3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        if r1 != null goto label1;

        $r3 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        return $i0;

     label1:
        i1 = 0;

        i2 = 0;

     label2:
        $r2 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        i3 = virtualinvoke r0.<android.content.UndoManager: int findNextState(java.util.ArrayList,android.content.UndoOwner[],int)>($r2, r1, i2);

        if i3 < 0 goto label3;

        i1 = i1 + 1;

        i2 = i3 + 1;

        goto label2;

     label3:
        return i1;
    }

    public void endUpdate()
    {
        android.content.UndoManager r0;
        int i0, $i1;
        android.content.UndoManager$UndoState $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.content.UndoManager;

        $r1 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if $r1 == null goto label2;

        $i1 = r0.<android.content.UndoManager: int mUpdateCount>;

        i0 = $i1 - 1;

        r0.<android.content.UndoManager: int mUpdateCount> = i0;

        if i0 != 0 goto label1;

        specialinvoke r0.<android.content.UndoManager: void pushWorkingState()>();

     label1:
        return;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must be called during an update");

        throw $r2;
    }

    int findNextState(java.util.ArrayList, android.content.UndoOwner[], int)
    {
        android.content.UndoManager r0;
        java.util.ArrayList r1;
        android.content.UndoOwner[] r2;
        int i0, i1, i2, i3;
        java.lang.Object $r3;
        android.content.UndoManager$UndoState $r4;
        boolean $z0;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: android.content.UndoOwner[];

        i1 := @parameter2: int;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i2 = i1;

        if i1 >= 0 goto label1;

        i2 = 0;

     label1:
        if i2 < i0 goto label2;

        return -1;

     label2:
        i3 = i2;

        if r2 != null goto label3;

        return i2;

     label3:
        if i3 >= i0 goto label5;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r4 = (android.content.UndoManager$UndoState) $r3;

        $z0 = virtualinvoke r0.<android.content.UndoManager: boolean matchOwners(android.content.UndoManager$UndoState,android.content.UndoOwner[])>($r4, r2);

        if $z0 == 0 goto label4;

        return i3;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return -1;
    }

    int findPrevState(java.util.ArrayList, android.content.UndoOwner[], int)
    {
        android.content.UndoManager r0;
        java.util.ArrayList r1;
        android.content.UndoOwner[] r2;
        int i0, i1, i2, i3;
        java.lang.Object $r3;
        android.content.UndoManager$UndoState $r4;
        boolean $z0;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: android.content.UndoOwner[];

        i1 := @parameter2: int;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i2 = i1;

        if i1 != -1 goto label1;

        i2 = i0 - 1;

     label1:
        if i2 < i0 goto label2;

        return -1;

     label2:
        i3 = i2;

        if r2 != null goto label3;

        return i2;

     label3:
        if i3 < 0 goto label5;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r4 = (android.content.UndoManager$UndoState) $r3;

        $z0 = virtualinvoke r0.<android.content.UndoManager: boolean matchOwners(android.content.UndoManager$UndoState,android.content.UndoOwner[])>($r4, r2);

        if $z0 == 0 goto label4;

        return i3;

     label4:
        i3 = i3 + -1;

        goto label3;

     label5:
        return -1;
    }

    public int forgetRedos(android.content.UndoOwner[], int)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        android.content.UndoManager$UndoState r2;
        java.util.ArrayList $r3, $r5, $r7, $r8;
        java.lang.Object $r4;
        boolean $z0;
        int i0, i1, i2, i3, $i4;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        i0 := @parameter1: int;

        i1 = i0;

        if i0 >= 0 goto label1;

        $r7 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label1:
        i2 = 0;

        i3 = 0;

     label2:
        $r8 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        $i4 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i3 >= $i4 goto label5;

        if i2 >= i1 goto label5;

        $r3 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r2 = (android.content.UndoManager$UndoState) $r4;

        if i1 <= 0 goto label3;

        $z0 = virtualinvoke r0.<android.content.UndoManager: boolean matchOwners(android.content.UndoManager$UndoState,android.content.UndoOwner[])>(r2, r1);

        if $z0 == 0 goto label3;

        virtualinvoke r2.<android.content.UndoManager$UndoState: void destroy()>();

        $r5 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        i2 = i2 + 1;

        goto label4;

     label3:
        i3 = i3 + 1;

     label4:
        goto label2;

     label5:
        return i2;
    }

    public int forgetUndos(android.content.UndoOwner[], int)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        android.content.UndoManager$UndoState r2;
        java.util.ArrayList $r3, $r5, $r7, $r8;
        java.lang.Object $r4;
        boolean $z0;
        int i0, i1, i2, i3, $i4;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        i0 := @parameter1: int;

        i1 = i0;

        if i0 >= 0 goto label1;

        $r7 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label1:
        i2 = 0;

        i3 = 0;

     label2:
        $r8 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $i4 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i3 >= $i4 goto label5;

        if i2 >= i1 goto label5;

        $r3 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r2 = (android.content.UndoManager$UndoState) $r4;

        if i1 <= 0 goto label3;

        $z0 = virtualinvoke r0.<android.content.UndoManager: boolean matchOwners(android.content.UndoManager$UndoState,android.content.UndoOwner[])>(r2, r1);

        if $z0 == 0 goto label3;

        virtualinvoke r2.<android.content.UndoManager$UndoState: void destroy()>();

        $r5 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        i2 = i2 + 1;

        goto label4;

     label3:
        i3 = i3 + 1;

     label4:
        goto label2;

     label5:
        return i2;
    }

    public int getHistorySize()
    {
        android.content.UndoManager r0;
        int $i0;

        r0 := @this: android.content.UndoManager;

        $i0 = r0.<android.content.UndoManager: int mHistorySize>;

        return $i0;
    }

    public android.content.UndoOperation getLastOperation(int)
    {
        android.content.UndoManager r0;
        int i0;
        android.content.UndoOperation $r1;

        r0 := @this: android.content.UndoManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner,int)>(null, null, i0);

        return $r1;
    }

    public android.content.UndoOperation getLastOperation(android.content.UndoOwner, int)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner r1;
        int i0;
        android.content.UndoOperation $r2;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner,int)>(null, r1, i0);

        return $r2;
    }

    public android.content.UndoOperation getLastOperation(java.lang.Class, android.content.UndoOwner, int)
    {
        android.content.UndoManager r0;
        java.lang.Class r1;
        android.content.UndoOwner r2;
        int i0;
        android.content.UndoManager$UndoState r3, $r5, r7, $r9;
        java.lang.IllegalStateException $r4;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.util.ArrayList $r6;
        android.content.UndoOperation r8, $r10;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.content.UndoOwner;

        i0 := @parameter2: int;

        r7 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if r7 == null goto label3;

        if i0 == 0 goto label2;

        $z0 = r0.<android.content.UndoManager: boolean mMerged>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r7.<android.content.UndoManager$UndoState: boolean hasData()>();

        if $z1 != 0 goto label2;

        r3 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])>(null);

        if r3 == null goto label2;

        if i0 == 2 goto label1;

        $z5 = virtualinvoke r3.<android.content.UndoManager$UndoState: boolean hasMultipleOwners()>();

        if $z5 != 0 goto label2;

     label1:
        $z2 = virtualinvoke r3.<android.content.UndoManager$UndoState: boolean canMerge()>();

        if $z2 == 0 goto label2;

        r8 = virtualinvoke r3.<android.content.UndoManager$UndoState: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner)>(r1, r2);

        if r8 == null goto label2;

        $z3 = virtualinvoke r8.<android.content.UndoOperation: boolean allowMerge()>();

        if $z3 == 0 goto label2;

        $r5 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        virtualinvoke $r5.<android.content.UndoManager$UndoState: void destroy()>();

        r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking> = r3;

        $r6 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

        r0.<android.content.UndoManager: boolean mMerged> = 1;

        return r8;

     label2:
        $r9 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        $r10 = virtualinvoke $r9.<android.content.UndoManager$UndoState: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner)>(r1, r2);

        return $r10;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must be called during an update");

        throw $r4;
    }

    public android.content.UndoOwner getOwner(java.lang.String, java.lang.Object)
    {
        android.content.UndoManager r0;
        java.lang.Object r1, $r5, $r9, $r10, $r15;
        java.lang.NullPointerException $r2, $r3;
        android.util.ArrayMap $r4, $r7;
        android.content.UndoOwner $r6, r22;
        java.lang.StringBuilder $r11;
        java.lang.IllegalStateException $r19;
        java.lang.String $r20, r21;

        r0 := @this: android.content.UndoManager;

        r21 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r21 == null goto label5;

        if r1 == null goto label4;

        $r4 = r0.<android.content.UndoManager: android.util.ArrayMap mOwners>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r21);

        r22 = (android.content.UndoOwner) $r5;

        if r22 == null goto label3;

        $r9 = r22.<android.content.UndoOwner: java.lang.Object mData>;

        if $r9 == r1 goto label2;

        $r10 = r22.<android.content.UndoOwner: java.lang.Object mData>;

        if $r10 != null goto label1;

        r22.<android.content.UndoOwner: java.lang.Object mData> = r1;

        goto label2;

     label1:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Owner ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists with data ");

        $r15 = r22.<android.content.UndoOwner: java.lang.Object mData>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but giving different data ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label2:
        return r22;

     label3:
        $r6 = new android.content.UndoOwner;

        specialinvoke $r6.<android.content.UndoOwner: void <init>(java.lang.String,android.content.UndoManager)>(r21, r0);

        $r6.<android.content.UndoOwner: java.lang.Object mData> = r1;

        $r7 = r0.<android.content.UndoManager: android.util.ArrayMap mOwners>;

        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, $r6);

        return $r6;

     label4:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("data can\'t be null");

        throw $r3;

     label5:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("tag can\'t be null");

        throw $r2;
    }

    public java.lang.CharSequence getRedoLabel(android.content.UndoOwner[])
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        android.content.UndoManager$UndoState r2;
        java.lang.CharSequence r3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        r2 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoManager$UndoState getTopRedo(android.content.UndoOwner[])>(r1);

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<android.content.UndoManager$UndoState: java.lang.CharSequence getLabel()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    android.content.UndoManager$UndoState getTopRedo(android.content.UndoOwner[])
    {
        android.content.UndoManager r0;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r4;
        android.content.UndoOwner[] r5;
        int i0, i1;
        android.content.UndoManager$UndoState r6;

        r0 := @this: android.content.UndoManager;

        r5 := @parameter0: android.content.UndoOwner[];

        $r1 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i0 > 0 goto label1;

        return null;

     label1:
        $r2 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        i1 = virtualinvoke r0.<android.content.UndoManager: int findPrevState(java.util.ArrayList,android.content.UndoOwner[],int)>($r2, r5, -1);

        r6 = null;

        if i1 < 0 goto label2;

        $r3 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r6 = (android.content.UndoManager$UndoState) $r4;

     label2:
        return r6;
    }

    android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])
    {
        android.content.UndoManager r0;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r4;
        android.content.UndoOwner[] r5;
        int i0, i1;
        android.content.UndoManager$UndoState r6;

        r0 := @this: android.content.UndoManager;

        r5 := @parameter0: android.content.UndoOwner[];

        $r1 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i0 > 0 goto label1;

        return null;

     label1:
        $r2 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        i1 = virtualinvoke r0.<android.content.UndoManager: int findPrevState(java.util.ArrayList,android.content.UndoOwner[],int)>($r2, r5, -1);

        r6 = null;

        if i1 < 0 goto label2;

        $r3 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r6 = (android.content.UndoManager$UndoState) $r4;

     label2:
        return r6;
    }

    public java.lang.CharSequence getUndoLabel(android.content.UndoOwner[])
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        android.content.UndoManager$UndoState r2;
        java.lang.CharSequence r3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        r2 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])>(r1);

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<android.content.UndoManager$UndoState: java.lang.CharSequence getLabel()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public int getUpdateNestingLevel()
    {
        android.content.UndoManager r0;
        int $i0;

        r0 := @this: android.content.UndoManager;

        $i0 = r0.<android.content.UndoManager: int mUpdateCount>;

        return $i0;
    }

    public boolean hasOperation(android.content.UndoOwner)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner r1;
        android.content.UndoManager$UndoState r2;
        java.lang.IllegalStateException $r3;
        boolean $z0;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner;

        r2 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.content.UndoManager$UndoState: boolean hasOperation(android.content.UndoOwner)>(r1);

        return $z0;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must be called during an update");

        throw $r3;
    }

    public boolean isInUndo()
    {
        android.content.UndoManager r0;
        boolean $z0;

        r0 := @this: android.content.UndoManager;

        $z0 = r0.<android.content.UndoManager: boolean mInUndo>;

        return $z0;
    }

    public boolean isInUpdate()
    {
        android.content.UndoManager r0;
        int $i0;
        boolean z0;

        r0 := @this: android.content.UndoManager;

        $i0 = r0.<android.content.UndoManager: int mUpdateCount>;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean matchOwners(android.content.UndoManager$UndoState, android.content.UndoOwner[])
    {
        android.content.UndoManager r0;
        android.content.UndoManager$UndoState r1;
        android.content.UndoOwner[] r2;
        int $i0, i1;
        android.content.UndoOwner $r3;
        boolean $z0;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoManager$UndoState;

        r2 := @parameter1: android.content.UndoOwner[];

        if r2 != null goto label1;

        return 1;

     label1:
        i1 = 0;

     label2:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label4;

        $r3 = r2[i1];

        $z0 = virtualinvoke r1.<android.content.UndoManager$UndoState: boolean matchOwner(android.content.UndoOwner)>($r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public int redo(android.content.UndoOwner[], int)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        int i0, i1, i2, i3;
        android.content.UndoManager$UndoState r2, $r3;
        java.lang.IllegalStateException $r4;
        java.util.ArrayList $r5, $r6, $r8;
        java.lang.Object $r7;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        i1 := @parameter1: int;

        $r3 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if $r3 != null goto label3;

        i2 = 0;

        i3 = -1;

        r0.<android.content.UndoManager: boolean mInUndo> = 1;

     label1:
        if i1 <= 0 goto label2;

        $r5 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        i0 = virtualinvoke r0.<android.content.UndoManager: int findPrevState(java.util.ArrayList,android.content.UndoOwner[],int)>($r5, r1, i3);

        i3 = i0;

        if i0 < 0 goto label2;

        $r6 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        r2 = (android.content.UndoManager$UndoState) $r7;

        virtualinvoke r2.<android.content.UndoManager$UndoState: void redo()>();

        $r8 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        i1 = i1 + -1;

        i2 = i2 + 1;

        goto label1;

     label2:
        r0.<android.content.UndoManager: boolean mInUndo> = 0;

        return i2;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t be called during an update");

        throw $r4;
    }

    void removeOwner(android.content.UndoOwner)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner r1;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner;

        return;
    }

    public void restoreInstanceState(android.os.Parcel, java.lang.ClassLoader)
    {
        android.content.UndoManager r0;
        android.os.Parcel r1;
        java.lang.ClassLoader r2;
        int i0, $i1, $i4, $i5;
        java.lang.IllegalStateException $r4;
        android.content.UndoOwner[] $r5;
        android.content.UndoManager$UndoState $r6;
        java.util.ArrayList $r7, $r8;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: java.lang.ClassLoader;

        $i1 = r0.<android.content.UndoManager: int mUpdateCount>;

        if $i1 > 0 goto label5;

        virtualinvoke r0.<android.content.UndoManager: int forgetUndos(android.content.UndoOwner[],int)>(null, -1);

        virtualinvoke r0.<android.content.UndoManager: int forgetRedos(android.content.UndoOwner[],int)>(null, -1);

        $i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.content.UndoManager: int mHistorySize> = $i4;

        $i5 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r5 = newarray (android.content.UndoOwner)[$i5];

        r0.<android.content.UndoManager: android.content.UndoOwner[] mStateOwners> = $r5;

     label1:
        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if i0 == 0 goto label4;

        $r6 = new android.content.UndoManager$UndoState;

        specialinvoke $r6.<android.content.UndoManager$UndoState: void <init>(android.content.UndoManager,android.os.Parcel,java.lang.ClassLoader)>(r0, r1, r2);

        if i0 != 1 goto label2;

        $r8 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        virtualinvoke $r8.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r6);

        goto label3;

     label2:
        $r7 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        virtualinvoke $r7.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r6);

     label3:
        goto label1;

     label4:
        return;

     label5:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t save state while updating");

        throw $r4;
    }

    android.content.UndoOwner restoreOwner(android.os.Parcel)
    {
        android.content.UndoManager r0;
        android.os.Parcel r1;
        int i0, i1;
        android.content.UndoOwner[] $r2, $r4;
        android.content.UndoOwner $r3, r7, r8;
        android.util.ArrayMap $r5;
        java.lang.String r9;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.os.Parcel;

        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r2 = r0.<android.content.UndoManager: android.content.UndoOwner[] mStateOwners>;

        r7 = $r2[i0];

        r8 = r7;

        if r7 != null goto label1;

        r9 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r3 = new android.content.UndoOwner;

        specialinvoke $r3.<android.content.UndoOwner: void <init>(java.lang.String,android.content.UndoManager)>(r9, r0);

        r8 = $r3;

        $r3.<android.content.UndoOwner: int mOpCount> = i1;

        $r4 = r0.<android.content.UndoManager: android.content.UndoOwner[] mStateOwners>;

        $r4[i0] = $r3;

        $r5 = r0.<android.content.UndoManager: android.util.ArrayMap mOwners>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r3);

     label1:
        return r8;
    }

    public void saveInstanceState(android.os.Parcel)
    {
        android.content.UndoManager r0;
        android.os.Parcel r1;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.IllegalStateException $r2;
        android.util.ArrayMap $r3;
        java.util.ArrayList $r4, $r5, $r6, $r9;
        java.lang.Object $r7, $r10;
        android.content.UndoManager$UndoState $r8, $r11;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.os.Parcel;

        $i0 = r0.<android.content.UndoManager: int mUpdateCount>;

        if $i0 > 0 goto label6;

        $i1 = r0.<android.content.UndoManager: int mStateSeq>;

        i4 = $i1 + 1;

        r0.<android.content.UndoManager: int mStateSeq> = i4;

        if i4 > 0 goto label1;

        r0.<android.content.UndoManager: int mStateSeq> = 0;

     label1:
        r0.<android.content.UndoManager: int mNextSavedIdx> = 0;

        $i2 = r0.<android.content.UndoManager: int mHistorySize>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $r3 = r0.<android.content.UndoManager: android.util.ArrayMap mOwners>;

        $i3 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $r4 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        i5 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label2:
        if i5 <= 0 goto label3;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        i5 = i5 + -1;

        $r9 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r11 = (android.content.UndoManager$UndoState) $r10;

        virtualinvoke $r11.<android.content.UndoManager$UndoState: void writeToParcel(android.os.Parcel)>(r1);

        goto label2;

     label3:
        $r5 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        i6 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label4:
        if i6 <= 0 goto label5;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(2);

        i6 = i6 + -1;

        $r6 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r8 = (android.content.UndoManager$UndoState) $r7;

        virtualinvoke $r8.<android.content.UndoManager$UndoState: void writeToParcel(android.os.Parcel)>(r1);

        goto label4;

     label5:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        return;

     label6:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t save state while updating");

        throw $r2;
    }

    void saveOwner(android.content.UndoOwner, android.os.Parcel)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner r1;
        android.os.Parcel r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner;

        r2 := @parameter1: android.os.Parcel;

        i0 = r1.<android.content.UndoOwner: int mStateSeq>;

        i1 = r0.<android.content.UndoManager: int mStateSeq>;

        if i0 != i1 goto label1;

        $i7 = r1.<android.content.UndoOwner: int mSavedIdx>;

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>($i7);

        goto label2;

     label1:
        r1.<android.content.UndoOwner: int mStateSeq> = i1;

        $i2 = r0.<android.content.UndoManager: int mNextSavedIdx>;

        r1.<android.content.UndoOwner: int mSavedIdx> = $i2;

        $i3 = r1.<android.content.UndoOwner: int mSavedIdx>;

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>($i3);

        $r3 = r1.<android.content.UndoOwner: java.lang.String mTag>;

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $i4 = r1.<android.content.UndoOwner: int mOpCount>;

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>($i4);

        $i5 = r0.<android.content.UndoManager: int mNextSavedIdx>;

        $i6 = $i5 + 1;

        r0.<android.content.UndoManager: int mNextSavedIdx> = $i6;

     label2:
        return;
    }

    public void setHistorySize(int)
    {
        android.content.UndoManager r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.content.UndoManager;

        i0 := @parameter0: int;

        r0.<android.content.UndoManager: int mHistorySize> = i0;

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<android.content.UndoManager: int countUndos(android.content.UndoOwner[])>(null);

        $i2 = r0.<android.content.UndoManager: int mHistorySize>;

        if $i1 <= $i2 goto label1;

        $i3 = virtualinvoke r0.<android.content.UndoManager: int countUndos(android.content.UndoOwner[])>(null);

        $i4 = r0.<android.content.UndoManager: int mHistorySize>;

        $i5 = $i3 - $i4;

        virtualinvoke r0.<android.content.UndoManager: int forgetUndos(android.content.UndoOwner[],int)>(null, $i5);

     label1:
        return;
    }

    public void setUndoLabel(java.lang.CharSequence)
    {
        android.content.UndoManager r0;
        java.lang.CharSequence r1;
        android.content.UndoManager$UndoState r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.content.UndoManager$UndoState: void setLabel(java.lang.CharSequence)>(r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must be called during an update");

        throw $r3;
    }

    public void suggestUndoLabel(java.lang.CharSequence)
    {
        android.content.UndoManager r0;
        java.lang.CharSequence r1;
        android.content.UndoManager$UndoState r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.content.UndoManager$UndoState: void updateLabel(java.lang.CharSequence)>(r1);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must be called during an update");

        throw $r3;
    }

    public boolean uncommitState(int, android.content.UndoOwner)
    {
        android.content.UndoManager r0;
        int i0, $i1, $i2;
        android.content.UndoOwner r1;
        boolean $z0, $z1, $z2, $z3;
        android.content.UndoManager$UndoState $r2, $r3, r4, r5;

        r0 := @this: android.content.UndoManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.UndoOwner;

        r4 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if r4 == null goto label2;

        $i2 = virtualinvoke r4.<android.content.UndoManager$UndoState: int getCommitId()>();

        if $i2 != i0 goto label2;

        if r1 == null goto label1;

        $r3 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        $z3 = virtualinvoke $r3.<android.content.UndoManager$UndoState: boolean hasOperation(android.content.UndoOwner)>(r1);

        if $z3 == 0 goto label4;

     label1:
        $r2 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        $z2 = virtualinvoke $r2.<android.content.UndoManager$UndoState: boolean setCanMerge(boolean)>(1);

        return $z2;

     label2:
        r5 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])>(null);

        if r5 == null goto label4;

        if r1 == null goto label3;

        $z1 = virtualinvoke r5.<android.content.UndoManager$UndoState: boolean hasOperation(android.content.UndoOwner)>(r1);

        if $z1 == 0 goto label4;

     label3:
        $i1 = virtualinvoke r5.<android.content.UndoManager$UndoState: int getCommitId()>();

        if $i1 != i0 goto label4;

        $z0 = virtualinvoke r5.<android.content.UndoManager$UndoState: boolean setCanMerge(boolean)>(1);

        return $z0;

     label4:
        return 0;
    }

    public int undo(android.content.UndoOwner[], int)
    {
        android.content.UndoManager r0;
        android.content.UndoOwner[] r1;
        android.content.UndoManager$UndoState $r2, r8, r9;
        java.lang.IllegalStateException $r3;
        java.util.ArrayList $r4, $r5, $r7;
        java.lang.Object $r6;
        int i2, i3, i4, i5, i6;

        r0 := @this: android.content.UndoManager;

        r1 := @parameter0: android.content.UndoOwner[];

        i2 := @parameter1: int;

        $r2 = r0.<android.content.UndoManager: android.content.UndoManager$UndoState mWorking>;

        if $r2 != null goto label3;

        r0.<android.content.UndoManager: boolean mInUndo> = 1;

        r8 = virtualinvoke r0.<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])>(null);

        i3 = 0;

        i4 = -1;

        i5 = i2;

        if r8 == null goto label1;

        virtualinvoke r8.<android.content.UndoManager$UndoState: void makeExecuted()>();

        i5 = i2;

        i4 = -1;

        i3 = 0;

     label1:
        if i5 <= 0 goto label2;

        $r4 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        i6 = virtualinvoke r0.<android.content.UndoManager: int findPrevState(java.util.ArrayList,android.content.UndoOwner[],int)>($r4, r1, i4);

        i4 = i6;

        if i6 < 0 goto label2;

        $r5 = r0.<android.content.UndoManager: java.util.ArrayList mUndos>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i6);

        r9 = (android.content.UndoManager$UndoState) $r6;

        virtualinvoke r9.<android.content.UndoManager$UndoState: void undo()>();

        $r7 = r0.<android.content.UndoManager: java.util.ArrayList mRedos>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r9);

        i5 = i5 + -1;

        i3 = i3 + 1;

        goto label1;

     label2:
        r0.<android.content.UndoManager: boolean mInUndo> = 0;

        return i3;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t be called during an update");

        throw $r3;
    }

    public static void <clinit>()
    {
        <android.content.UndoManager: int MERGE_MODE_UNIQUE> = 1;

        <android.content.UndoManager: int MERGE_MODE_NONE> = 0;

        <android.content.UndoManager: int MERGE_MODE_ANY> = 2;

        return;
    }
}
