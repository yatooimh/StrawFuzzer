public class android.content.integrity.InstallerAllowedByManifestFormula extends android.content.integrity.IntegrityFormula implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final java.lang.String INSTALLER_CERTIFICATE_NOT_EVALUATED;

    static void <clinit>()
    {
        android.content.integrity.InstallerAllowedByManifestFormula$1 $r0;

        <android.content.integrity.InstallerAllowedByManifestFormula: java.lang.String INSTALLER_CERTIFICATE_NOT_EVALUATED> = "";

        $r0 = new android.content.integrity.InstallerAllowedByManifestFormula$1;

        specialinvoke $r0.<android.content.integrity.InstallerAllowedByManifestFormula$1: void <init>()>();

        <android.content.integrity.InstallerAllowedByManifestFormula: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>()
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        specialinvoke r0.<android.content.integrity.IntegrityFormula: void <init>()>();

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;
        android.os.Parcel r1;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<android.content.integrity.IntegrityFormula: void <init>()>();

        return;
    }

    void <init>(android.os.Parcel, android.content.integrity.InstallerAllowedByManifestFormula$1)
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;
        android.os.Parcel r1;
        android.content.integrity.InstallerAllowedByManifestFormula$1 r2;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.content.integrity.InstallerAllowedByManifestFormula$1;

        specialinvoke r0.<android.content.integrity.InstallerAllowedByManifestFormula: void <init>(android.os.Parcel)>(r1);

        return;
    }

    private static boolean installerInAllowedInstallersFromManifest(android.content.integrity.AppInstallMetadata, java.util.Map)
    {
        android.content.integrity.AppInstallMetadata r0;
        java.util.Map r1;
        java.lang.String r2, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r7;
        java.util.List $r5;

        r0 := @parameter0: android.content.integrity.AppInstallMetadata;

        r1 := @parameter1: java.util.Map;

        r2 = virtualinvoke r0.<android.content.integrity.AppInstallMetadata: java.lang.String getInstallerName()>();

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r4 = (java.lang.String) $r3;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r0.<android.content.integrity.AppInstallMetadata: java.util.List getInstallerCertificates()>();

        $r6 = virtualinvoke r0.<android.content.integrity.AppInstallMetadata: java.lang.String getInstallerName()>();

        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $z2 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>($r7);

        return $z2;

     label2:
        return 1;
    }

    public int describeContents()
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        return 0;
    }

    public int getTag()
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        return 4;
    }

    public boolean isAppCertificateFormula()
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        return 0;
    }

    public boolean isInstallerFormula()
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        return 1;
    }

    public boolean matches(android.content.integrity.AppInstallMetadata)
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;
        android.content.integrity.AppInstallMetadata r1;
        java.util.Map r2;
        boolean $z0, $z1, z2;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        r1 := @parameter0: android.content.integrity.AppInstallMetadata;

        r2 = virtualinvoke r1.<android.content.integrity.AppInstallMetadata: java.util.Map getAllowedInstallersAndCertificates()>();

        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.content.integrity.InstallerAllowedByManifestFormula: boolean installerInAllowedInstallersFromManifest(android.content.integrity.AppInstallMetadata,java.util.Map)>(r1, r2);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.content.integrity.InstallerAllowedByManifestFormula r0;
        android.os.Parcel r1;
        int i0;

        r0 := @this: android.content.integrity.InstallerAllowedByManifestFormula;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        return;
    }
}
