public class android.content.om.OverlayManager extends java.lang.Object
{
    private static final long THROW_SECURITY_EXCEPTIONS;
    private final android.content.Context mContext;
    private final android.content.om.IOverlayManager mService;

    public void <init>(android.content.Context)
    {
        android.content.om.OverlayManager r0;
        android.content.Context r1;
        android.os.IBinder $r2;
        android.content.om.IOverlayManager $r3;

        r0 := @this: android.content.om.OverlayManager;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("overlay");

        $r3 = staticinvoke <android.content.om.IOverlayManager$Stub: android.content.om.IOverlayManager asInterface(android.os.IBinder)>($r2);

        specialinvoke r0.<android.content.om.OverlayManager: void <init>(android.content.Context,android.content.om.IOverlayManager)>(r1, $r3);

        return;
    }

    public void <init>(android.content.Context, android.content.om.IOverlayManager)
    {
        android.content.om.OverlayManager r0;
        android.content.Context r1;
        android.content.om.IOverlayManager r2;

        r0 := @this: android.content.om.OverlayManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.om.IOverlayManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.content.om.OverlayManager: android.content.Context mContext> = r1;

        r0.<android.content.om.OverlayManager: android.content.om.IOverlayManager mService> = r2;

        return;
    }

    private void rethrowSecurityException(java.lang.SecurityException)
    {
        android.content.om.OverlayManager r0;
        java.lang.SecurityException r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.content.om.OverlayManager;

        r1 := @parameter0: java.lang.SecurityException;

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(147340954L);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r1);

        throw $r2;

     label1:
        throw r1;
    }

    public android.content.om.OverlayInfo getOverlayInfo(java.lang.String, android.os.UserHandle)
    {
        android.content.om.OverlayManager r0;
        android.os.UserHandle r1;
        android.content.om.IOverlayManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.om.OverlayInfo r6;

        r0 := @this: android.content.om.OverlayManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.content.om.OverlayManager: android.content.om.IOverlayManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r6 = interfaceinvoke $r2.<android.content.om.IOverlayManager: android.content.om.OverlayInfo getOverlayInfo(java.lang.String,int)>(r5, $i0);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getOverlayInfosForTarget(java.lang.String, android.os.UserHandle)
    {
        android.content.om.OverlayManager r0;
        android.os.UserHandle r1;
        android.content.om.IOverlayManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        java.util.List r6;

        r0 := @this: android.content.om.OverlayManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.content.om.OverlayManager: android.content.om.IOverlayManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r6 = interfaceinvoke $r2.<android.content.om.IOverlayManager: java.util.List getOverlayInfosForTarget(java.lang.String,int)>(r5, $i0);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void invalidateCachesForOverlay(java.lang.String, android.os.UserHandle)
    {
        android.content.om.OverlayManager r0;
        android.os.UserHandle r1;
        android.content.om.IOverlayManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.content.om.OverlayManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.content.om.OverlayManager: android.content.om.IOverlayManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r2.<android.content.om.IOverlayManager: void invalidateCachesForOverlay(java.lang.String,int)>(r5, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setEnabled(java.lang.String, boolean, android.os.UserHandle) throws java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.content.om.OverlayManager r0;
        boolean z0, $z1;
        android.os.UserHandle r1;
        android.content.om.IOverlayManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        java.lang.IllegalStateException r10;
        java.lang.SecurityException r11;

        r0 := @this: android.content.om.OverlayManager;

        r6 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.UserHandle;

     label1:
        $r2 = r0.<android.content.om.OverlayManager: android.content.om.IOverlayManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z1 = interfaceinvoke $r2.<android.content.om.IOverlayManager: boolean setEnabled(java.lang.String,boolean,int)>(r6, z0, $i0);

        if $z1 == 0 goto label3;

     label2:
        goto label6;

     label3:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setEnabled failed");

        throw r10;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label5:
        $r5 := @caughtexception;

        r11 = (java.lang.SecurityException) $r5;

        specialinvoke r0.<android.content.om.OverlayManager: void rethrowSecurityException(java.lang.SecurityException)>(r11);

     label6:
        return;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.SecurityException from label3 to label4 with label5;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public void setEnabledExclusiveInCategory(java.lang.String, android.os.UserHandle) throws java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.content.om.OverlayManager r0;
        android.os.UserHandle r1;
        android.content.om.IOverlayManager $r2;
        int $i0;
        boolean $z0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        java.lang.IllegalStateException r10;
        java.lang.SecurityException r11;

        r0 := @this: android.content.om.OverlayManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

     label1:
        $r2 = r0.<android.content.om.OverlayManager: android.content.om.IOverlayManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = interfaceinvoke $r2.<android.content.om.IOverlayManager: boolean setEnabledExclusiveInCategory(java.lang.String,int)>(r6, $i0);

        if $z0 == 0 goto label3;

     label2:
        goto label6;

     label3:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setEnabledExclusiveInCategory failed");

        throw r10;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label5:
        $r5 := @caughtexception;

        r11 = (java.lang.SecurityException) $r5;

        specialinvoke r0.<android.content.om.OverlayManager: void rethrowSecurityException(java.lang.SecurityException)>(r11);

     label6:
        return;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.SecurityException from label3 to label4 with label5;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public static void <clinit>()
    {
        <android.content.om.OverlayManager: long THROW_SECURITY_EXCEPTIONS> = 147340954L;

        return;
    }
}
