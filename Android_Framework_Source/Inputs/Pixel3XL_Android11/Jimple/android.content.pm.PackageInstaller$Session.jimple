public class android.content.pm.PackageInstaller$Session extends java.lang.Object implements java.io.Closeable
{
    protected final android.content.pm.IPackageInstallerSession mSession;

    public void <init>(android.content.pm.IPackageInstallerSession)
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession r1;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r1 := @parameter0: android.content.pm.IPackageInstallerSession;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession> = r1;

        return;
    }

    public void abandon()
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void abandon()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addChildSessionId(int)
    {
        android.content.pm.PackageInstaller$Session r0;
        int i0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void addChildSessionId(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addFile(int, java.lang.String, long, byte[], byte[])
    {
        android.content.pm.PackageInstaller$Session r0;
        int i0;
        long l1;
        byte[] r1, r2;
        android.content.pm.IPackageInstallerSession $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        r1 := @parameter3: byte[];

        r2 := @parameter4: byte[];

     label1:
        $r3 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r3.<android.content.pm.IPackageInstallerSession: void addFile(int,java.lang.String,long,byte[],byte[])>(i0, r6, l1, r1, r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addProgress(float)
    {
        android.content.pm.PackageInstaller$Session r0;
        float f0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        f0 := @parameter0: float;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void addClientProgress(float)>(f0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void close()
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void close()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void commit(android.content.IntentSender)
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.IntentSender r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r4 := @parameter0: android.content.IntentSender;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r1.<android.content.pm.IPackageInstallerSession: void commit(android.content.IntentSender,boolean)>(r4, 0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void commitTransferred(android.content.IntentSender)
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.IntentSender r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r4 := @parameter0: android.content.IntentSender;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r1.<android.content.pm.IPackageInstallerSession: void commit(android.content.IntentSender,boolean)>(r4, 1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void fsync(java.io.OutputStream) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        boolean $z0, $z1, $z2;
        android.os.FileBridge$FileBridgeOutputStream $r2;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream $r4;
        java.io.FileDescriptor $r5;
        java.lang.Throwable $r6;
        java.io.IOException $r7;
        java.io.OutputStream r8;
        java.lang.IllegalArgumentException r10, r11;
        android.system.ErrnoException r12;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r8 := @parameter0: java.io.OutputStream;

        $z0 = <android.content.pm.PackageInstaller: boolean ENABLE_REVOCABLE_FD>;

        if $z0 == 0 goto label5;

        $z2 = r8 instanceof android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        if $z2 == 0 goto label4;

     label1:
        $r4 = (android.os.ParcelFileDescriptor$AutoCloseOutputStream) r8;

        $r5 = virtualinvoke $r4.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: java.io.FileDescriptor getFD()>();

        staticinvoke <android.system.Os: void fsync(java.io.FileDescriptor)>($r5);

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

        r12 = (android.system.ErrnoException) $r6;

        $r7 = virtualinvoke r12.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r7;

     label4:
        r10 = new java.lang.IllegalArgumentException;

        specialinvoke r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized stream");

        throw r10;

     label5:
        $z1 = r8 instanceof android.os.FileBridge$FileBridgeOutputStream;

        if $z1 == 0 goto label7;

        $r2 = (android.os.FileBridge$FileBridgeOutputStream) r8;

        virtualinvoke $r2.<android.os.FileBridge$FileBridgeOutputStream: void fsync()>();

     label6:
        return;

     label7:
        r11 = new java.lang.IllegalArgumentException;

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized stream");

        throw r11;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public int[] getChildSessionIds()
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageInstallerSession: int[] getChildSessionIds()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.DataLoaderParams getDataLoaderParams()
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r1;
        android.content.pm.DataLoaderParams $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.DataLoaderParamsParcel r5;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageInstallerSession: android.content.pm.DataLoaderParamsParcel getDataLoaderParams()>();

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r2 = new android.content.pm.DataLoaderParams;

        specialinvoke $r2.<android.content.pm.DataLoaderParams: void <init>(android.content.pm.DataLoaderParamsParcel)>(r5);

     label4:
        return $r2;

     label5:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.String[] getNames() throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r1;
        java.lang.RuntimeException $r2, $r4;
        android.os.RemoteException $r3;
        java.lang.String[] r5;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        r5 = interfaceinvoke $r1.<android.content.pm.IPackageInstallerSession: java.lang.String[] getNames()>();

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>($r2);

        throw $r2;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getParentSessionId()
    {
        android.content.pm.PackageInstaller$Session r0;
        int i0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        i0 = interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: int getParentSessionId()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMultiPackage()
    {
        android.content.pm.PackageInstaller$Session r0;
        boolean z0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        z0 = interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: boolean isMultiPackage()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isStaged()
    {
        android.content.pm.PackageInstaller$Session r0;
        boolean z0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        z0 = interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: boolean isStaged()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.io.InputStream openRead(java.lang.String) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r1;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.ParcelFileDescriptor $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5, $r6;
        java.lang.String r7;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r7 := @parameter0: java.lang.String;

     label1:
        $r1 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        $r3 = interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openRead(java.lang.String)>(r7);

        specialinvoke $r1.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r3);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>($r6);

        throw $r6;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.io.OutputStream openWrite(java.lang.String, long, long) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        long l0, l1;
        boolean $z0;
        android.os.FileBridge$FileBridgeOutputStream $r1;
        android.content.pm.IPackageInstallerSession $r2, $r5;
        android.os.ParcelFileDescriptor $r3, $r6;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream $r4;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8, $r9;
        java.lang.String r10;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r10 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

     label1:
        $z0 = <android.content.pm.PackageInstaller: boolean ENABLE_REVOCABLE_FD>;

        if $z0 == 0 goto label2;

        $r4 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        $r5 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        $r6 = interfaceinvoke $r5.<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>(r10, l0, l1);

        specialinvoke $r4.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r6);

        return $r4;

     label2:
        $r1 = new android.os.FileBridge$FileBridgeOutputStream;

        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        $r3 = interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>(r10, l0, l1);

        specialinvoke $r1.<android.os.FileBridge$FileBridgeOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r3);

     label3:
        return $r1;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>($r9);

        throw $r9;

        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label2 to label3 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void removeChildSessionId(int)
    {
        android.content.pm.PackageInstaller$Session r0;
        int i0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void removeChildSessionId(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeFile(int, java.lang.String)
    {
        android.content.pm.PackageInstaller$Session r0;
        int i0;
        android.content.pm.IPackageInstallerSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r1.<android.content.pm.IPackageInstallerSession: void removeFile(int,java.lang.String)>(i0, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeSplit(java.lang.String) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3, $r4;
        java.lang.String r5;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r1.<android.content.pm.IPackageInstallerSession: void removeSplit(java.lang.String)>(r5);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>($r4);

        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProgress(float)
    {
        android.content.pm.PackageInstaller$Session r0;
        float f0;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.content.pm.PackageInstaller$Session: void setStagingProgress(float)>(f0);

        return;
    }

    public void setStagingProgress(float)
    {
        android.content.pm.PackageInstaller$Session r0;
        float f0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        f0 := @parameter0: float;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void setClientProgress(float)>(f0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void transfer(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.ParcelableException $r3;
        java.lang.RuntimeException $r4, $r6;
        android.os.RemoteException $r5;
        java.lang.String r7;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r7 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void transfer(java.lang.String)>(r7);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.ParcelableException: void maybeRethrow(java.lang.Class)>(class "Landroid/content/pm/PackageManager$NameNotFoundException;");

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.ParcelableException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void write(java.lang.String, long, long, android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        long l0, l1;
        android.os.ParcelFileDescriptor r1;
        android.content.pm.IPackageInstallerSession $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4, $r5;
        java.lang.String r6;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r6 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r1 := @parameter3: android.os.ParcelFileDescriptor;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void write(java.lang.String,long,long,android.os.ParcelFileDescriptor)>(r6, l0, l1, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>($r5);

        throw $r5;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
