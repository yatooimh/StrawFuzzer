public class android.content.pm.PackageInstaller extends java.lang.Object
{
    public static final java.lang.String ACTION_CONFIRM_INSTALL;
    public static final java.lang.String ACTION_SESSION_COMMITTED;
    public static final java.lang.String ACTION_SESSION_DETAILS;
    public static final java.lang.String ACTION_SESSION_UPDATED;
    public static final int DATA_LOADER_TYPE_INCREMENTAL;
    public static final int DATA_LOADER_TYPE_NONE;
    public static final int DATA_LOADER_TYPE_STREAMING;
    public static final boolean ENABLE_REVOCABLE_FD;
    public static final java.lang.String EXTRA_CALLBACK;
    public static final java.lang.String EXTRA_DATA_LOADER_TYPE;
    public static final java.lang.String EXTRA_LEGACY_BUNDLE;
    public static final java.lang.String EXTRA_LEGACY_STATUS;
    public static final java.lang.String EXTRA_OTHER_PACKAGE_NAME;
    public static final java.lang.String EXTRA_PACKAGE_NAME;
    public static final java.lang.String EXTRA_PACKAGE_NAMES;
    public static final java.lang.String EXTRA_SESSION;
    public static final java.lang.String EXTRA_SESSION_ID;
    public static final java.lang.String EXTRA_STATUS;
    public static final java.lang.String EXTRA_STATUS_MESSAGE;
    public static final java.lang.String EXTRA_STORAGE_PATH;
    public static final int LOCATION_DATA_APP;
    public static final int LOCATION_MEDIA_DATA;
    public static final int LOCATION_MEDIA_OBB;
    public static final int STATUS_FAILURE;
    public static final int STATUS_FAILURE_ABORTED;
    public static final int STATUS_FAILURE_BLOCKED;
    public static final int STATUS_FAILURE_CONFLICT;
    public static final int STATUS_FAILURE_INCOMPATIBLE;
    public static final int STATUS_FAILURE_INVALID;
    public static final int STATUS_FAILURE_STORAGE;
    public static final int STATUS_PENDING_STREAMING;
    public static final int STATUS_PENDING_USER_ACTION;
    public static final int STATUS_SUCCESS;
    private static final java.lang.String TAG;
    private final java.util.ArrayList mDelegates;
    private final android.content.pm.IPackageInstaller mInstaller;
    private final java.lang.String mInstallerPackageName;
    private final int mUserId;

    static void <clinit>()
    {
        boolean $z0;

        <android.content.pm.PackageInstaller: java.lang.String TAG> = "PackageInstaller";

        <android.content.pm.PackageInstaller: int STATUS_SUCCESS> = 0;

        <android.content.pm.PackageInstaller: int STATUS_PENDING_USER_ACTION> = -1;

        <android.content.pm.PackageInstaller: int STATUS_PENDING_STREAMING> = -2;

        <android.content.pm.PackageInstaller: int STATUS_FAILURE_STORAGE> = 6;

        <android.content.pm.PackageInstaller: int STATUS_FAILURE_INVALID> = 4;

        <android.content.pm.PackageInstaller: int STATUS_FAILURE_INCOMPATIBLE> = 7;

        <android.content.pm.PackageInstaller: int STATUS_FAILURE_CONFLICT> = 5;

        <android.content.pm.PackageInstaller: int STATUS_FAILURE_BLOCKED> = 2;

        <android.content.pm.PackageInstaller: int STATUS_FAILURE_ABORTED> = 3;

        <android.content.pm.PackageInstaller: int STATUS_FAILURE> = 1;

        <android.content.pm.PackageInstaller: int LOCATION_MEDIA_OBB> = 1;

        <android.content.pm.PackageInstaller: int LOCATION_MEDIA_DATA> = 2;

        <android.content.pm.PackageInstaller: int LOCATION_DATA_APP> = 0;

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_STORAGE_PATH> = "android.content.pm.extra.STORAGE_PATH";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_STATUS_MESSAGE> = "android.content.pm.extra.STATUS_MESSAGE";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_STATUS> = "android.content.pm.extra.STATUS";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_SESSION_ID> = "android.content.pm.extra.SESSION_ID";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_SESSION> = "android.content.pm.extra.SESSION";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_PACKAGE_NAMES> = "android.content.pm.extra.PACKAGE_NAMES";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_PACKAGE_NAME> = "android.content.pm.extra.PACKAGE_NAME";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_OTHER_PACKAGE_NAME> = "android.content.pm.extra.OTHER_PACKAGE_NAME";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_LEGACY_STATUS> = "android.content.pm.extra.LEGACY_STATUS";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_LEGACY_BUNDLE> = "android.content.pm.extra.LEGACY_BUNDLE";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_DATA_LOADER_TYPE> = "android.content.pm.extra.DATA_LOADER_TYPE";

        <android.content.pm.PackageInstaller: java.lang.String EXTRA_CALLBACK> = "android.content.pm.extra.CALLBACK";

        <android.content.pm.PackageInstaller: int DATA_LOADER_TYPE_STREAMING> = 1;

        <android.content.pm.PackageInstaller: int DATA_LOADER_TYPE_NONE> = 0;

        <android.content.pm.PackageInstaller: int DATA_LOADER_TYPE_INCREMENTAL> = 2;

        <android.content.pm.PackageInstaller: java.lang.String ACTION_SESSION_UPDATED> = "android.content.pm.action.SESSION_UPDATED";

        <android.content.pm.PackageInstaller: java.lang.String ACTION_SESSION_DETAILS> = "android.content.pm.action.SESSION_DETAILS";

        <android.content.pm.PackageInstaller: java.lang.String ACTION_SESSION_COMMITTED> = "android.content.pm.action.SESSION_COMMITTED";

        <android.content.pm.PackageInstaller: java.lang.String ACTION_CONFIRM_INSTALL> = "android.content.pm.action.CONFIRM_INSTALL";

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("fw.revocable_fd", 0);

        <android.content.pm.PackageInstaller: boolean ENABLE_REVOCABLE_FD> = $z0;

        return;
    }

    public void <init>(android.content.pm.IPackageInstaller, java.lang.String, int)
    {
        android.content.pm.PackageInstaller r0;
        android.content.pm.IPackageInstaller r1;
        java.lang.String r2;
        int i0;
        java.util.ArrayList $r3;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: android.content.pm.IPackageInstaller;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.content.pm.PackageInstaller: java.util.ArrayList mDelegates> = $r3;

        r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller> = r1;

        r0.<android.content.pm.PackageInstaller: java.lang.String mInstallerPackageName> = r2;

        r0.<android.content.pm.PackageInstaller: int mUserId> = i0;

        return;
    }

    public void abandonSession(int)
    {
        android.content.pm.PackageInstaller r0;
        int i0;
        android.content.pm.IPackageInstaller $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstaller: void abandonSession(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addSessionCallback(android.content.pm.PackageInstaller$SessionCallback)
    {
        android.content.pm.PackageInstaller r0;
        android.content.pm.PackageInstaller$SessionCallback r1;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: android.content.pm.PackageInstaller$SessionCallback;

        virtualinvoke r0.<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>(r1);

        return;
    }

    public void addSessionCallback(android.content.pm.PackageInstaller$SessionCallback, android.os.Handler)
    {
        android.content.pm.PackageInstaller r0;
        android.content.pm.PackageInstaller$SessionCallback r1;
        android.os.Handler r2;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: android.content.pm.PackageInstaller$SessionCallback;

        r2 := @parameter1: android.os.Handler;

        virtualinvoke r0.<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>(r1, r2);

        return;
    }

    public int createSession(android.content.pm.PackageInstaller$SessionParams) throws java.io.IOException
    {
        android.content.pm.PackageInstaller r0;
        int i0, $i1;
        java.lang.String $r1;
        android.content.pm.IPackageInstaller $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4, $r5;
        android.content.pm.PackageInstaller$SessionParams r6;

        r0 := @this: android.content.pm.PackageInstaller;

        r6 := @parameter0: android.content.pm.PackageInstaller$SessionParams;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $r1 = r0.<android.content.pm.PackageInstaller: java.lang.String mInstallerPackageName>;

        $i1 = r0.<android.content.pm.PackageInstaller: int mUserId>;

        i0 = interfaceinvoke $r2.<android.content.pm.IPackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>(r6, $r1, $i1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>($r5);

        throw $r5;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()
    {
        android.content.pm.PackageInstaller r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.List r2;
        android.content.pm.PackageInstaller$SessionInfo r3;

        r0 := @this: android.content.pm.PackageInstaller;

        r2 = virtualinvoke r0.<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()>();

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r3 = null;

        goto label2;

     label1:
        $r1 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (android.content.pm.PackageInstaller$SessionInfo) $r1;

     label2:
        return r3;
    }

    public java.util.List getActiveStagedSessions()
    {
        android.content.pm.PackageInstaller r0;
        java.util.List r2;
        android.content.pm.PackageInstaller$SessionInfo r3;
        java.util.ArrayList $r4;
        int $i0, i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: android.content.pm.PackageInstaller;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<android.content.pm.PackageInstaller: java.util.List getStagedSessions()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (android.content.pm.PackageInstaller$SessionInfo) $r5;

        $z0 = virtualinvoke r3.<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionActive()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r4;
    }

    public java.util.List getAllSessions()
    {
        android.content.pm.PackageInstaller r0;
        int $i0;
        android.content.pm.IPackageInstaller $r1;
        android.content.pm.ParceledListSlice $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.List r5;

        r0 := @this: android.content.pm.PackageInstaller;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $i0 = r0.<android.content.pm.PackageInstaller: int mUserId>;

        $r2 = interfaceinvoke $r1.<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getAllSessions(int)>($i0);

        r5 = virtualinvoke $r2.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getMySessions()
    {
        android.content.pm.PackageInstaller r0;
        int $i0;
        java.lang.String $r1;
        android.content.pm.IPackageInstaller $r2;
        android.content.pm.ParceledListSlice $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.util.List r6;

        r0 := @this: android.content.pm.PackageInstaller;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $r1 = r0.<android.content.pm.PackageInstaller: java.lang.String mInstallerPackageName>;

        $i0 = r0.<android.content.pm.PackageInstaller: int mUserId>;

        $r3 = interfaceinvoke $r2.<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getMySessions(java.lang.String,int)>($r1, $i0);

        r6 = virtualinvoke $r3.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)
    {
        android.content.pm.PackageInstaller r0;
        int i0;
        android.content.pm.IPackageInstaller $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.pm.PackageInstaller$SessionInfo r4;

        r0 := @this: android.content.pm.PackageInstaller;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getStagedSessions()
    {
        android.content.pm.PackageInstaller r0;
        android.content.pm.IPackageInstaller $r1;
        android.content.pm.ParceledListSlice $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.List r5;

        r0 := @this: android.content.pm.PackageInstaller;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $r2 = interfaceinvoke $r1.<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getStagedSessions()>();

        r5 = virtualinvoke $r2.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void installExistingPackage(java.lang.String, int, android.content.IntentSender)
    {
        android.content.pm.PackageInstaller r0;
        int i0, $i1;
        android.content.IntentSender r1;
        android.content.pm.IPackageInstaller $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.content.pm.PackageInstaller;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.IntentSender;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "packageName cannot be null");

     label1:
        $r3 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $i1 = r0.<android.content.pm.PackageInstaller: int mUserId>;

        interfaceinvoke $r3.<android.content.pm.IPackageInstaller: void installExistingPackage(java.lang.String,int,int,android.content.IntentSender,int,java.util.List)>(r6, 4194304, i0, r1, $i1, null);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.PackageInstaller$Session openSession(int) throws java.io.IOException
    {
        android.content.pm.PackageInstaller r0;
        int i0;
        android.content.pm.PackageInstaller$Session $r1;
        android.content.pm.IPackageInstaller $r2;
        android.content.pm.IPackageInstallerSession $r3;
        java.lang.RuntimeException $r4, $r6;
        android.os.RemoteException $r5;

        r0 := @this: android.content.pm.PackageInstaller;

        i0 := @parameter0: int;

     label1:
        $r1 = new android.content.pm.PackageInstaller$Session;

        $r2 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $r3 = interfaceinvoke $r2.<android.content.pm.IPackageInstaller: android.content.pm.IPackageInstallerSession openSession(int)>(i0);

        specialinvoke $r1.<android.content.pm.PackageInstaller$Session: void <init>(android.content.pm.IPackageInstallerSession)>($r3);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label6:
        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>($r4);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label5 to label6 with label3;
    }

    public void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)
    {
        android.content.pm.PackageInstaller r0;
        android.content.pm.PackageInstaller$SessionCallback r1;
        android.os.Handler $r2;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: android.content.pm.PackageInstaller$SessionCallback;

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        virtualinvoke r0.<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>(r1, $r2);

        return;
    }

    public void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback, android.os.Handler)
    {
        android.content.pm.PackageInstaller r0;
        android.os.Handler r1;
        java.util.ArrayList r2, $r6;
        android.content.pm.PackageInstaller$SessionCallbackDelegate r3;
        android.os.HandlerExecutor r4;
        int $i0;
        android.content.pm.IPackageInstaller $r5;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.content.pm.PackageInstaller$SessionCallback r10;

        r0 := @this: android.content.pm.PackageInstaller;

        r10 := @parameter0: android.content.pm.PackageInstaller$SessionCallback;

        r1 := @parameter1: android.os.Handler;

        r2 = r0.<android.content.pm.PackageInstaller: java.util.ArrayList mDelegates>;

        entermonitor r2;

     label01:
        r3 = new android.content.pm.PackageInstaller$SessionCallbackDelegate;

        r4 = new android.os.HandlerExecutor;

        specialinvoke r4.<android.os.HandlerExecutor: void <init>(android.os.Handler)>(r1);

        specialinvoke r3.<android.content.pm.PackageInstaller$SessionCallbackDelegate: void <init>(android.content.pm.PackageInstaller$SessionCallback,java.util.concurrent.Executor)>(r10, r4);

     label02:
        $r5 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $i0 = r0.<android.content.pm.PackageInstaller: int mUserId>;

        interfaceinvoke $r5.<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>(r3, $i0);

     label03:
        $r6 = r0.<android.content.pm.PackageInstaller: java.util.ArrayList mDelegates>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label04:
        exitmonitor r2;

     label05:
        return;

     label06:
        $r8 := @caughtexception;

     label07:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void removeSessionCallback(android.content.pm.PackageInstaller$SessionCallback)
    {
        android.content.pm.PackageInstaller r0;
        android.content.pm.PackageInstaller$SessionCallback r1;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: android.content.pm.PackageInstaller$SessionCallback;

        virtualinvoke r0.<android.content.pm.PackageInstaller: void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>(r1);

        return;
    }

    public void setPermissionsResult(int, boolean)
    {
        android.content.pm.PackageInstaller r0;
        int i0;
        boolean z0;
        android.content.pm.IPackageInstaller $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstaller: void setPermissionsResult(int,boolean)>(i0, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void uninstall(android.content.pm.VersionedPackage, int, android.content.IntentSender)
    {
        android.content.pm.PackageInstaller r0;
        int i0, $i1;
        android.content.IntentSender r1;
        java.lang.String $r3;
        android.content.pm.IPackageInstaller $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.content.pm.VersionedPackage r7;

        r0 := @this: android.content.pm.PackageInstaller;

        r7 := @parameter0: android.content.pm.VersionedPackage;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.IntentSender;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "versionedPackage cannot be null");

     label1:
        $r4 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        $r3 = r0.<android.content.pm.PackageInstaller: java.lang.String mInstallerPackageName>;

        $i1 = r0.<android.content.pm.PackageInstaller: int mUserId>;

        interfaceinvoke $r4.<android.content.pm.IPackageInstaller: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>(r7, $r3, i0, r1, $i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void uninstall(android.content.pm.VersionedPackage, android.content.IntentSender)
    {
        android.content.pm.PackageInstaller r0;
        android.content.pm.VersionedPackage r1;
        android.content.IntentSender r2;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: android.content.pm.VersionedPackage;

        r2 := @parameter1: android.content.IntentSender;

        virtualinvoke r0.<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)>(r1, 0, r2);

        return;
    }

    public void uninstall(java.lang.String, int, android.content.IntentSender)
    {
        android.content.pm.PackageInstaller r0;
        java.lang.String r1;
        int i0;
        android.content.IntentSender r2;
        android.content.pm.VersionedPackage $r3;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.IntentSender;

        $r3 = new android.content.pm.VersionedPackage;

        specialinvoke $r3.<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>(r1, -1);

        virtualinvoke r0.<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,int,android.content.IntentSender)>($r3, i0, r2);

        return;
    }

    public void uninstall(java.lang.String, android.content.IntentSender)
    {
        android.content.pm.PackageInstaller r0;
        java.lang.String r1;
        android.content.IntentSender r2;

        r0 := @this: android.content.pm.PackageInstaller;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.IntentSender;

        virtualinvoke r0.<android.content.pm.PackageInstaller: void uninstall(java.lang.String,int,android.content.IntentSender)>(r1, 0, r2);

        return;
    }

    public void uninstallExistingPackage(java.lang.String, android.content.IntentSender)
    {
        android.content.pm.PackageInstaller r0;
        android.content.IntentSender r1;
        android.content.pm.IPackageInstaller r2;
        android.content.pm.VersionedPackage r3;
        int $i0;
        java.lang.String $r5, r8;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.content.pm.PackageInstaller;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.IntentSender;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "packageName cannot be null");

     label1:
        r2 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        r3 = new android.content.pm.VersionedPackage;

        specialinvoke r3.<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>(r8, -1);

        $r5 = r0.<android.content.pm.PackageInstaller: java.lang.String mInstallerPackageName>;

        $i0 = r0.<android.content.pm.PackageInstaller: int mUserId>;

        interfaceinvoke r2.<android.content.pm.IPackageInstaller: void uninstallExistingPackage(android.content.pm.VersionedPackage,java.lang.String,android.content.IntentSender,int)>(r3, $r5, r1, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback)
    {
        android.content.pm.PackageInstaller r0;
        java.util.ArrayList r1, $r5;
        java.util.Iterator r2;
        android.content.pm.PackageInstaller$SessionCallbackDelegate r3;
        android.content.pm.PackageInstaller$SessionCallback r4, r11;
        boolean $z0;
        java.lang.Object $r6;
        android.content.pm.IPackageInstaller $r7;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: android.content.pm.PackageInstaller;

        r11 := @parameter0: android.content.pm.PackageInstaller$SessionCallback;

        r1 = r0.<android.content.pm.PackageInstaller: java.util.ArrayList mDelegates>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.content.pm.PackageInstaller: java.util.ArrayList mDelegates>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.PackageInstaller$SessionCallbackDelegate) $r6;

        r4 = r3.<android.content.pm.PackageInstaller$SessionCallbackDelegate: android.content.pm.PackageInstaller$SessionCallback mCallback>;

     label03:
        if r4 != r11 goto label09;

     label04:
        $r7 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        interfaceinvoke $r7.<android.content.pm.IPackageInstaller: void unregisterCallback(android.content.pm.IPackageInstallerCallback)>(r3);

     label05:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label06:
        goto label09;

     label07:
        $r9 := @caughtexception;

     label08:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label09:
        goto label02;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void updateSessionAppIcon(int, android.graphics.Bitmap)
    {
        android.content.pm.PackageInstaller r0;
        int i0;
        android.content.pm.IPackageInstaller $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.graphics.Bitmap r4;

        r0 := @this: android.content.pm.PackageInstaller;

        i0 := @parameter0: int;

        r4 := @parameter1: android.graphics.Bitmap;

     label1:
        $r1 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        interfaceinvoke $r1.<android.content.pm.IPackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>(i0, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateSessionAppLabel(int, java.lang.CharSequence)
    {
        android.content.pm.PackageInstaller r0;
        int i0;
        android.content.pm.IPackageInstaller $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.CharSequence r4;
        java.lang.String r5;

        r0 := @this: android.content.pm.PackageInstaller;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.CharSequence;

        if r4 == null goto label4;

     label1:
        r5 = interfaceinvoke r4.<java.lang.CharSequence: java.lang.String toString()>();

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        r5 = null;

     label5:
        $r1 = r0.<android.content.pm.PackageInstaller: android.content.pm.IPackageInstaller mInstaller>;

        interfaceinvoke $r1.<android.content.pm.IPackageInstaller: void updateSessionAppLabel(int,java.lang.String)>(i0, r5);

     label6:
        return;

     label7:
        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label5 to label6 with label3;
    }
}
