public abstract class android.content.pm.PackageManagerInternal extends java.lang.Object
{
    public static final int ENABLE_ROLLBACK_FAILED;
    public static final int ENABLE_ROLLBACK_SUCCEEDED;
    public static final java.lang.String EXTRA_ENABLE_ROLLBACK_SESSION_ID;
    public static final java.lang.String EXTRA_ENABLE_ROLLBACK_TOKEN;
    public static final int INTEGRITY_VERIFICATION_ALLOW;
    public static final int INTEGRITY_VERIFICATION_REJECT;
    public static final int PACKAGE_APP_PREDICTOR;
    public static final int PACKAGE_BROWSER;
    public static final int PACKAGE_COMPANION;
    public static final int PACKAGE_CONFIGURATOR;
    public static final int PACKAGE_DOCUMENTER;
    public static final int PACKAGE_INCIDENT_REPORT_APPROVER;
    public static final int PACKAGE_INSTALLER;
    public static final int PACKAGE_PERMISSION_CONTROLLER;
    public static final int PACKAGE_RETAIL_DEMO;
    public static final int PACKAGE_SETUP_WIZARD;
    public static final int PACKAGE_SYSTEM;
    public static final int PACKAGE_SYSTEM_TEXT_CLASSIFIER;
    public static final int PACKAGE_VERIFIER;
    public static final int PACKAGE_WELLBEING;
    public static final int PACKAGE_WIFI;
    public static final int RESOLVE_NON_BROWSER_ONLY;
    public static final int RESOLVE_NON_RESOLVER_ONLY;

    public void <init>()
    {
        android.content.pm.PackageManagerInternal r0;

        r0 := @this: android.content.pm.PackageManagerInternal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract void addIsolatedUid(int, int);

    public abstract boolean canAccessComponent(int, android.content.ComponentName, int);

    public abstract boolean canAccessInstantApps(int, int);

    public abstract void clearBlockUninstallForUser(int);

    public abstract boolean compileLayouts(java.lang.String);

    public abstract boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage, int, int);

    public abstract boolean filterAppAccess(java.lang.String, int, int);

    public abstract void finishPackageInstall(int, boolean);

    public abstract void flushPackageRestrictions(int);

    public abstract void forEachInstalledPackage(java.util.function.Consumer, int);

    public abstract void forEachPackage(java.util.function.Consumer);

    public abstract void forEachPackageSetting(java.util.function.Consumer);

    public abstract void freeStorage(java.lang.String, long, int) throws java.io.IOException;

    public abstract android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int, int, int);

    public abstract java.util.List getApksInApex(java.lang.String);

    public abstract int getApplicationEnabledState(java.lang.String, int);

    public abstract android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int, int, int);

    public abstract android.util.SparseArray getAppsWithSharedUserIds();

    public abstract long getCeDataInode(java.lang.String, int);

    public abstract android.content.ComponentName getDefaultHomeActivity(int);

    public abstract android.util.ArraySet getDisabledComponents(java.lang.String, int);

    public abstract com.android.server.pm.PackageSetting getDisabledSystemPackage(java.lang.String);

    public abstract java.lang.String getDisabledSystemPackageName(java.lang.String);

    public abstract int getDistractingPackageRestrictions(java.lang.String, int);

    public abstract android.util.ArraySet getEnabledComponents(java.lang.String, int);

    public abstract android.content.ComponentName getHomeActivitiesAsUser(java.util.List, int);

    public abstract java.util.List getInstalledApplications(int, int, int);

    public abstract java.lang.String getInstantAppPackageName(int);

    public abstract java.lang.String[] getKnownPackageNames(int, int);

    public abstract java.util.List getMimeGroup(java.lang.String, java.lang.String);

    public abstract java.lang.String getNameForUid(int);

    public abstract java.util.List getOverlayPackages(int);

    public abstract com.android.server.pm.parsing.pkg.AndroidPackage getPackage(int);

    public abstract com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String);

    public abstract android.content.pm.PackageInfo getPackageInfo(java.lang.String, int, int, int);

    public com.android.server.pm.PackageList getPackageList()
    {
        android.content.pm.PackageManagerInternal r0;
        com.android.server.pm.PackageList $r1;

        r0 := @this: android.content.pm.PackageManagerInternal;

        $r1 = virtualinvoke r0.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageList getPackageList(android.content.pm.PackageManagerInternal$PackageListObserver)>(null);

        return $r1;
    }

    public abstract com.android.server.pm.PackageList getPackageList(android.content.pm.PackageManagerInternal$PackageListObserver);

    public abstract com.android.server.pm.PackageSetting getPackageSetting(java.lang.String);

    public abstract int getPackageTargetSdkVersion(java.lang.String);

    public abstract int getPackageUid(java.lang.String, int, int);

    public abstract int getPackageUidInternal(java.lang.String, int, int);

    public abstract int[] getPermissionGids(java.lang.String, int);

    public abstract android.util.ArrayMap getProcessesForUid(int);

    public abstract java.lang.String getSetupWizardPackageName();

    public abstract java.lang.String[] getSharedUserPackagesForPackage(java.lang.String, int);

    public abstract android.content.pm.SuspendDialogInfo getSuspendedDialogInfo(java.lang.String, java.lang.String, int);

    public abstract android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String, int);

    public abstract java.lang.String getSuspendingPackage(java.lang.String, int);

    public abstract android.content.ComponentName getSystemUiServiceComponent();

    public abstract java.util.List getTargetPackageNames(int);

    public abstract int getUidTargetSdkVersion(int);

    public abstract void grantImplicitAccess(int, android.content.Intent, int, int, boolean);

    public abstract boolean hasInstantApplicationMetadata(java.lang.String, int);

    public abstract boolean hasSignatureCapability(int, int, int);

    public abstract boolean isApexPackage(java.lang.String);

    public abstract boolean isCallerInstallerOfRecord(com.android.server.pm.parsing.pkg.AndroidPackage, int);

    public abstract boolean isDataRestoreSafe(android.content.pm.Signature, java.lang.String);

    public abstract boolean isDataRestoreSafe(byte[], java.lang.String);

    public abstract boolean isEnabledAndMatches(android.content.pm.parsing.component.ParsedMainComponent, int, int);

    public abstract boolean isInstantApp(java.lang.String, int);

    public abstract boolean isInstantAppInstallerComponent(android.content.ComponentName);

    public abstract boolean isOnlyCoreApps();

    public abstract boolean isPackageDataProtected(int, java.lang.String);

    public abstract boolean isPackageEphemeral(int, java.lang.String);

    public abstract boolean isPackagePersistent(java.lang.String);

    public abstract boolean isPackageStateProtected(java.lang.String, int);

    public abstract boolean isPackageSuspended(java.lang.String, int);

    public abstract boolean isPermissionUpgradeNeeded(int);

    public abstract boolean isPermissionsReviewRequired(java.lang.String, int);

    public abstract boolean isPlatformSigned(java.lang.String);

    public abstract boolean isResolveActivityComponent(android.content.pm.ComponentInfo);

    public abstract boolean isSuspendingAnyPackages(java.lang.String, int);

    public abstract boolean isSystemPackage(java.lang.String);

    public abstract void migrateLegacyObbData();

    public abstract void notifyPackageUse(java.lang.String, int);

    public void onDefaultSimCallManagerAppChanged(java.lang.String, int)
    {
        android.content.pm.PackageManagerInternal r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.content.pm.PackageManagerInternal;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void onDefaultSmsAppChanged(java.lang.String, int)
    {
        android.content.pm.PackageManagerInternal r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.content.pm.PackageManagerInternal;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public abstract void pruneCachedApksInApex(java.util.List);

    public abstract void pruneInstantApps();

    public abstract java.util.List queryIntentActivities(android.content.Intent, java.lang.String, int, int, int);

    public abstract java.util.List queryIntentServices(android.content.Intent, int, int, int);

    public abstract void removeAllDistractingPackageRestrictions(int);

    public abstract void removeAllNonSystemPackageSuspensions(int);

    public abstract void removeDistractingPackageRestrictions(java.lang.String, int);

    public abstract void removeIsolatedUid(int);

    public abstract java.lang.String removeLegacyDefaultBrowserPackageName(int);

    public abstract void removeNonSystemPackageSuspensions(java.lang.String, int);

    public abstract void removePackageListObserver(android.content.pm.PackageManagerInternal$PackageListObserver);

    public abstract void requestInstantAppResolutionPhaseTwo(android.content.pm.AuxiliaryResolveInfo, android.content.Intent, java.lang.String, java.lang.String, java.lang.String, boolean, android.os.Bundle, int);

    public abstract android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int, int);

    public abstract android.content.pm.ResolveInfo resolveIntent(android.content.Intent, java.lang.String, int, int, int, boolean, int);

    public abstract android.content.pm.ResolveInfo resolveService(android.content.Intent, java.lang.String, int, int, int);

    public abstract void setDeviceAndProfileOwnerPackages(int, java.lang.String, android.util.SparseArray);

    public abstract void setDeviceOwnerProtectedPackages(java.util.List);

    public abstract void setEnableRollbackCode(int, int);

    public abstract boolean setEnabledOverlayPackages(int, java.lang.String, java.util.List, java.util.Collection);

    public abstract void setExternalSourcesPolicy(android.content.pm.PackageManagerInternal$ExternalSourcesPolicy);

    public abstract void setIntegrityVerificationResult(int, int);

    public abstract void setKeepUninstalledPackages(java.util.List);

    public abstract void setReadExternalStorageEnforced(boolean);

    public abstract void setVisibilityLogging(java.lang.String, boolean);

    public abstract void uninstallApex(java.lang.String, long, int, android.content.IntentSender, int);

    public abstract void unsuspendForSuspendingPackage(java.lang.String, int);

    public abstract void updateRuntimePermissionsFingerprint(int);

    public abstract boolean userNeedsBadging(int);

    public abstract boolean wasPackageEverLaunched(java.lang.String, int);

    public abstract void writePermissionSettings(int[], boolean);

    public abstract void writeSettings(boolean);

    public static void <clinit>()
    {
        <android.content.pm.PackageManagerInternal: int RESOLVE_NON_RESOLVER_ONLY> = 2;

        <android.content.pm.PackageManagerInternal: int RESOLVE_NON_BROWSER_ONLY> = 1;

        <android.content.pm.PackageManagerInternal: int PACKAGE_WIFI> = 13;

        <android.content.pm.PackageManagerInternal: int PACKAGE_WELLBEING> = 7;

        <android.content.pm.PackageManagerInternal: int PACKAGE_VERIFIER> = 3;

        <android.content.pm.PackageManagerInternal: int PACKAGE_SYSTEM_TEXT_CLASSIFIER> = 5;

        <android.content.pm.PackageManagerInternal: int PACKAGE_SYSTEM> = 0;

        <android.content.pm.PackageManagerInternal: int PACKAGE_SETUP_WIZARD> = 1;

        <android.content.pm.PackageManagerInternal: int PACKAGE_RETAIL_DEMO> = 15;

        <android.content.pm.PackageManagerInternal: int PACKAGE_PERMISSION_CONTROLLER> = 6;

        <android.content.pm.PackageManagerInternal: int PACKAGE_INSTALLER> = 2;

        <android.content.pm.PackageManagerInternal: int PACKAGE_INCIDENT_REPORT_APPROVER> = 10;

        <android.content.pm.PackageManagerInternal: int PACKAGE_DOCUMENTER> = 8;

        <android.content.pm.PackageManagerInternal: int PACKAGE_CONFIGURATOR> = 9;

        <android.content.pm.PackageManagerInternal: int PACKAGE_COMPANION> = 14;

        <android.content.pm.PackageManagerInternal: int PACKAGE_BROWSER> = 4;

        <android.content.pm.PackageManagerInternal: int PACKAGE_APP_PREDICTOR> = 11;

        <android.content.pm.PackageManagerInternal: int INTEGRITY_VERIFICATION_REJECT> = 0;

        <android.content.pm.PackageManagerInternal: int INTEGRITY_VERIFICATION_ALLOW> = 1;

        <android.content.pm.PackageManagerInternal: java.lang.String EXTRA_ENABLE_ROLLBACK_TOKEN> = "android.content.pm.extra.ENABLE_ROLLBACK_TOKEN";

        <android.content.pm.PackageManagerInternal: java.lang.String EXTRA_ENABLE_ROLLBACK_SESSION_ID> = "android.content.pm.extra.ENABLE_ROLLBACK_SESSION_ID";

        <android.content.pm.PackageManagerInternal: int ENABLE_ROLLBACK_SUCCEEDED> = 1;

        <android.content.pm.PackageManagerInternal: int ENABLE_ROLLBACK_FAILED> = -1;

        return;
    }
}
