public class android.content.pm.PackageParser$ApkLite extends java.lang.Object
{
    public final java.lang.String codePath;
    public final java.lang.String configForSplit;
    public final boolean coreApp;
    public final boolean debuggable;
    public final boolean extractNativeLibs;
    public final int installLocation;
    public boolean isFeatureSplit;
    public final boolean isSplitRequired;
    public final boolean isolatedSplits;
    public final int minSdkVersion;
    public final boolean multiArch;
    public final boolean overlayIsStatic;
    public final int overlayPriority;
    public final java.lang.String packageName;
    public final boolean profilableByShell;
    public final int revisionCode;
    public final android.content.pm.PackageParser$SigningDetails signingDetails;
    public final java.lang.String splitName;
    public final java.lang.String targetPackageName;
    public final int targetSdkVersion;
    public final boolean use32bitAbi;
    public final boolean useEmbeddedDex;
    public final java.lang.String usesSplitName;
    public final android.content.pm.VerifierInfo[] verifiers;
    public final int versionCode;
    public final int versionCodeMajor;

    public void <init>(java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, boolean, int, int, int, int, java.util.List, android.content.pm.PackageParser$SigningDetails, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, java.lang.String, boolean, int, int, int)
    {
        android.content.pm.PackageParser$ApkLite r0;
        java.lang.String r1, r2, r3, r4, r5, r8;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        java.util.List r6;
        android.content.pm.PackageParser$SigningDetails r7;
        android.content.pm.VerifierInfo[] $r9, $r11;
        java.lang.Object[] $r10;

        r0 := @this: android.content.pm.PackageParser$ApkLite;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        z1 := @parameter6: boolean;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        i2 := @parameter9: int;

        i3 := @parameter10: int;

        r6 := @parameter11: java.util.List;

        r7 := @parameter12: android.content.pm.PackageParser$SigningDetails;

        z2 := @parameter13: boolean;

        z3 := @parameter14: boolean;

        z4 := @parameter15: boolean;

        z5 := @parameter16: boolean;

        z6 := @parameter17: boolean;

        z7 := @parameter18: boolean;

        z8 := @parameter19: boolean;

        z9 := @parameter20: boolean;

        r8 := @parameter21: java.lang.String;

        z10 := @parameter22: boolean;

        i4 := @parameter23: int;

        i5 := @parameter24: int;

        i6 := @parameter25: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.content.pm.PackageParser$ApkLite: java.lang.String codePath> = r1;

        r0.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName> = r2;

        r0.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName> = r3;

        r0.<android.content.pm.PackageParser$ApkLite: boolean isFeatureSplit> = z0;

        r0.<android.content.pm.PackageParser$ApkLite: java.lang.String configForSplit> = r4;

        r0.<android.content.pm.PackageParser$ApkLite: java.lang.String usesSplitName> = r5;

        r0.<android.content.pm.PackageParser$ApkLite: int versionCode> = i0;

        r0.<android.content.pm.PackageParser$ApkLite: int versionCodeMajor> = i1;

        r0.<android.content.pm.PackageParser$ApkLite: int revisionCode> = i2;

        r0.<android.content.pm.PackageParser$ApkLite: int installLocation> = i3;

        r0.<android.content.pm.PackageParser$ApkLite: android.content.pm.PackageParser$SigningDetails signingDetails> = r7;

        $i7 = interfaceinvoke r6.<java.util.List: int size()>();

        $r9 = newarray (android.content.pm.VerifierInfo)[$i7];

        $r10 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (android.content.pm.VerifierInfo[]) $r10;

        r0.<android.content.pm.PackageParser$ApkLite: android.content.pm.VerifierInfo[] verifiers> = $r11;

        r0.<android.content.pm.PackageParser$ApkLite: boolean coreApp> = z2;

        r0.<android.content.pm.PackageParser$ApkLite: boolean debuggable> = z3;

        r0.<android.content.pm.PackageParser$ApkLite: boolean profilableByShell> = z4;

        r0.<android.content.pm.PackageParser$ApkLite: boolean multiArch> = z5;

        r0.<android.content.pm.PackageParser$ApkLite: boolean use32bitAbi> = z6;

        r0.<android.content.pm.PackageParser$ApkLite: boolean useEmbeddedDex> = z7;

        r0.<android.content.pm.PackageParser$ApkLite: boolean extractNativeLibs> = z8;

        r0.<android.content.pm.PackageParser$ApkLite: boolean isolatedSplits> = z9;

        r0.<android.content.pm.PackageParser$ApkLite: boolean isSplitRequired> = z1;

        r0.<android.content.pm.PackageParser$ApkLite: java.lang.String targetPackageName> = r8;

        r0.<android.content.pm.PackageParser$ApkLite: boolean overlayIsStatic> = z10;

        r0.<android.content.pm.PackageParser$ApkLite: int overlayPriority> = i4;

        r0.<android.content.pm.PackageParser$ApkLite: int minSdkVersion> = i5;

        r0.<android.content.pm.PackageParser$ApkLite: int targetSdkVersion> = i6;

        return;
    }

    public long getLongVersionCode()
    {
        android.content.pm.PackageParser$ApkLite r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: android.content.pm.PackageParser$ApkLite;

        $i1 = r0.<android.content.pm.PackageParser$ApkLite: int versionCodeMajor>;

        $i0 = r0.<android.content.pm.PackageParser$ApkLite: int versionCode>;

        $l2 = staticinvoke <android.content.pm.PackageInfo: long composeLongVersionCode(int,int)>($i1, $i0);

        return $l2;
    }
}
