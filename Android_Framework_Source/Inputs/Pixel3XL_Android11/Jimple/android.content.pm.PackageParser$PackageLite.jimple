public class android.content.pm.PackageParser$PackageLite extends java.lang.Object
{
    public final java.lang.String baseCodePath;
    public final int baseRevisionCode;
    public final java.lang.String codePath;
    public final java.lang.String[] configForSplit;
    public final boolean coreApp;
    public final boolean debuggable;
    public final boolean extractNativeLibs;
    public final int installLocation;
    public final boolean[] isFeatureSplits;
    public final boolean isolatedSplits;
    public final boolean multiArch;
    public final java.lang.String packageName;
    public final java.lang.String[] splitCodePaths;
    public final java.lang.String[] splitNames;
    public final int[] splitRevisionCodes;
    public final boolean use32bitAbi;
    public final java.lang.String[] usesSplitNames;
    public final android.content.pm.VerifierInfo[] verifiers;
    public final int versionCode;
    public final int versionCodeMajor;

    public void <init>(java.lang.String, android.content.pm.PackageParser$ApkLite, java.lang.String[], boolean[], java.lang.String[], java.lang.String[], java.lang.String[], int[])
    {
        android.content.pm.PackageParser$PackageLite r0;
        java.lang.String r1, $r9, $r11;
        android.content.pm.PackageParser$ApkLite r2;
        java.lang.String[] r3, r5, r6, r7;
        boolean[] r4;
        int[] r8;
        int $i0, $i1, $i2, $i3;
        android.content.pm.VerifierInfo[] $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: android.content.pm.PackageParser$PackageLite;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.PackageParser$ApkLite;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: boolean[];

        r5 := @parameter4: java.lang.String[];

        r6 := @parameter5: java.lang.String[];

        r7 := @parameter6: java.lang.String[];

        r8 := @parameter7: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = r2.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        r0.<android.content.pm.PackageParser$PackageLite: java.lang.String packageName> = $r9;

        $i0 = r2.<android.content.pm.PackageParser$ApkLite: int versionCode>;

        r0.<android.content.pm.PackageParser$PackageLite: int versionCode> = $i0;

        $i1 = r2.<android.content.pm.PackageParser$ApkLite: int versionCodeMajor>;

        r0.<android.content.pm.PackageParser$PackageLite: int versionCodeMajor> = $i1;

        $i2 = r2.<android.content.pm.PackageParser$ApkLite: int installLocation>;

        r0.<android.content.pm.PackageParser$PackageLite: int installLocation> = $i2;

        $r10 = r2.<android.content.pm.PackageParser$ApkLite: android.content.pm.VerifierInfo[] verifiers>;

        r0.<android.content.pm.PackageParser$PackageLite: android.content.pm.VerifierInfo[] verifiers> = $r10;

        r0.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames> = r3;

        r0.<android.content.pm.PackageParser$PackageLite: boolean[] isFeatureSplits> = r4;

        r0.<android.content.pm.PackageParser$PackageLite: java.lang.String[] usesSplitNames> = r5;

        r0.<android.content.pm.PackageParser$PackageLite: java.lang.String[] configForSplit> = r6;

        r0.<android.content.pm.PackageParser$PackageLite: java.lang.String codePath> = r1;

        $r11 = r2.<android.content.pm.PackageParser$ApkLite: java.lang.String codePath>;

        r0.<android.content.pm.PackageParser$PackageLite: java.lang.String baseCodePath> = $r11;

        r0.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths> = r7;

        $i3 = r2.<android.content.pm.PackageParser$ApkLite: int revisionCode>;

        r0.<android.content.pm.PackageParser$PackageLite: int baseRevisionCode> = $i3;

        r0.<android.content.pm.PackageParser$PackageLite: int[] splitRevisionCodes> = r8;

        $z0 = r2.<android.content.pm.PackageParser$ApkLite: boolean coreApp>;

        r0.<android.content.pm.PackageParser$PackageLite: boolean coreApp> = $z0;

        $z1 = r2.<android.content.pm.PackageParser$ApkLite: boolean debuggable>;

        r0.<android.content.pm.PackageParser$PackageLite: boolean debuggable> = $z1;

        $z2 = r2.<android.content.pm.PackageParser$ApkLite: boolean multiArch>;

        r0.<android.content.pm.PackageParser$PackageLite: boolean multiArch> = $z2;

        $z3 = r2.<android.content.pm.PackageParser$ApkLite: boolean use32bitAbi>;

        r0.<android.content.pm.PackageParser$PackageLite: boolean use32bitAbi> = $z3;

        $z4 = r2.<android.content.pm.PackageParser$ApkLite: boolean extractNativeLibs>;

        r0.<android.content.pm.PackageParser$PackageLite: boolean extractNativeLibs> = $z4;

        $z5 = r2.<android.content.pm.PackageParser$ApkLite: boolean isolatedSplits>;

        r0.<android.content.pm.PackageParser$PackageLite: boolean isolatedSplits> = $z5;

        return;
    }

    public java.util.List getAllCodePaths()
    {
        android.content.pm.PackageParser$PackageLite r0;
        java.util.ArrayList $r2;
        java.lang.String $r3;
        java.lang.String[] $r4, $r5;
        boolean $z1;

        r0 := @this: android.content.pm.PackageParser$PackageLite;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<android.content.pm.PackageParser$PackageLite: java.lang.String baseCodePath>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r4);

        if $z1 != 0 goto label1;

        $r5 = r0.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r5);

     label1:
        return $r2;
    }
}
