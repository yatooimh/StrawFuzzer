public class android.content.pm.parsing.PackageInfoWithoutStateUtils extends java.lang.Object
{

    public void <init>()
    {
        android.content.pm.parsing.PackageInfoWithoutStateUtils r0;

        r0 := @this: android.content.pm.parsing.PackageInfoWithoutStateUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int appInfoFlags(android.content.pm.parsing.ParsingPackageRead)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        $z0 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isExternalStorage()>();

        $i0 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z0, 262144);

        $z1 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isBaseHardwareAccelerated()>();

        $i1 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z1, 536870912);

        $i2 = $i0 | $i1;

        $z2 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isAllowBackup()>();

        $i3 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z2, 32768);

        $i4 = $i2 | $i3;

        $z3 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isKillAfterRestore()>();

        $i5 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z3, 65536);

        $i6 = $i4 | $i5;

        $z4 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isRestoreAnyVersion()>();

        $i7 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z4, 131072);

        $i8 = $i6 | $i7;

        $z5 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isFullBackupOnly()>();

        $i9 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z5, 67108864);

        $i10 = $i8 | $i9;

        $z6 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isPersistent()>();

        $i11 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z6, 8);

        $i12 = $i10 | $i11;

        $z7 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isDebuggable()>();

        $i13 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z7, 2);

        $i14 = $i12 | $i13;

        $z8 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isVmSafeMode()>();

        $i15 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z8, 16384);

        $i16 = $i14 | $i15;

        $z9 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isHasCode()>();

        $i17 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z9, 4);

        $i18 = $i16 | $i17;

        $z10 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isAllowTaskReparenting()>();

        $i19 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z10, 32);

        $i20 = $i18 | $i19;

        $z11 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isAllowClearUserData()>();

        $i21 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z11, 64);

        $i22 = $i20 | $i21;

        $z12 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isLargeHeap()>();

        $i23 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z12, 1048576);

        $i24 = $i22 | $i23;

        $z13 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isUsesCleartextTraffic()>();

        $i25 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z13, 134217728);

        $i26 = $i24 | $i25;

        $z14 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isSupportsRtl()>();

        $i27 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z14, 4194304);

        $i28 = $i26 | $i27;

        $z15 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isTestOnly()>();

        $i29 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z15, 256);

        $i30 = $i28 | $i29;

        $z16 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isMultiArch()>();

        $i31 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z16, -2147483648);

        $i32 = $i30 | $i31;

        $z17 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isExtractNativeLibs()>();

        $i33 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z17, 268435456);

        $i34 = $i32 | $i33;

        $z18 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isGame()>();

        $i35 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z18, 33554432);

        $i36 = $i34 | $i35;

        $z19 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isSupportsSmallScreens()>();

        $i37 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z19, 512);

        $i38 = $i36 | $i37;

        $z20 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isSupportsNormalScreens()>();

        $i39 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z20, 1024);

        $i40 = $i38 | $i39;

        $z21 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isSupportsLargeScreens()>();

        $i41 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z21, 2048);

        $i42 = $i40 | $i41;

        $z22 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isSupportsExtraLargeScreens()>();

        $i43 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z22, 524288);

        $i44 = $i42 | $i43;

        $z23 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isResizeable()>();

        $i45 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z23, 4096);

        $i46 = $i44 | $i45;

        $z24 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isAnyDensity()>();

        $i47 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z24, 8192);

        $i48 = $i46 | $i47;

        return $i48;
    }

    public static int appInfoPrivateFlags(android.content.pm.parsing.ParsingPackageRead)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        android.content.pm.parsing.ParsingPackageRead r0;
        java.lang.Boolean r1;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        $z0 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isStaticSharedLibrary()>();

        $i1 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z0, 16384);

        $z1 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isOverlay()>();

        $i2 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z1, 268435456);

        $i3 = $i1 | $i2;

        $z2 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isIsolatedSplitLoading()>();

        $i4 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z2, 32768);

        $i5 = $i3 | $i4;

        $z3 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isHasDomainUrls()>();

        $i6 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z3, 16);

        $i7 = $i5 | $i6;

        $z4 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isProfileableByShell()>();

        $i8 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z4, 8388608);

        $i9 = $i7 | $i8;

        $z5 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isBackupInForeground()>();

        $i10 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z5, 8192);

        $i11 = $i9 | $i10;

        $z6 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isUseEmbeddedDex()>();

        $i12 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z6, 33554432);

        $i13 = $i11 | $i12;

        $z7 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isDefaultToDeviceProtectedStorage()>();

        $i14 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z7, 32);

        $i15 = $i13 | $i14;

        $z8 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isDirectBootAware()>();

        $i16 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z8, 64);

        $i17 = $i15 | $i16;

        $z9 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isPartiallyDirectBootAware()>();

        $i18 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z9, 256);

        $i19 = $i17 | $i18;

        $z10 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isAllowClearUserDataOnFailedRestore()>();

        $i20 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z10, 67108864);

        $i21 = $i19 | $i20;

        $z11 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isAllowAudioPlaybackCapture()>();

        $i22 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z11, 134217728);

        $i23 = $i21 | $i22;

        $z12 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isRequestLegacyExternalStorage()>();

        $i24 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z12, 536870912);

        $i25 = $i23 | $i24;

        $z13 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isUsesNonSdkApi()>();

        $i26 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z13, 4194304);

        $i27 = $i25 | $i26;

        $z14 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isHasFragileUserData()>();

        $i28 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z14, 16777216);

        $i29 = $i27 | $i28;

        $z15 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isCantSaveState()>();

        $i30 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z15, 2);

        $i31 = $i29 | $i30;

        $z16 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isResizeableActivityViaSdkVersion()>();

        $i32 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z16, 4096);

        $i33 = $i31 | $i32;

        $z17 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isAllowNativeHeapPointerTagging()>();

        $i34 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z17, -2147483648);

        i0 = $i33 | $i34;

        r1 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.lang.Boolean getResizeableActivity()>();

        i35 = i0;

        if r1 == null goto label2;

        $z18 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z18 == 0 goto label1;

        i35 = i0 | 1024;

        goto label2;

     label1:
        i35 = i0 | 2048;

     label2:
        return i35;
    }

    private static void assignSharedFieldsForComponentInfo(android.content.pm.ComponentInfo, android.content.pm.parsing.component.ParsedMainComponent)
    {
        android.content.pm.ComponentInfo r0;
        android.content.pm.parsing.component.ParsedMainComponent r1;
        int $i0;
        boolean $z0, $z1;
        java.lang.String $r2;

        r0 := @parameter0: android.content.pm.ComponentInfo;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedMainComponent;

        staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: void assignSharedFieldsForPackageItemInfo(android.content.pm.PackageItemInfo,android.content.pm.parsing.component.ParsedComponent)>(r0, r1);

        $i0 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedMainComponent: int getDescriptionRes()>();

        r0.<android.content.pm.ComponentInfo: int descriptionRes> = $i0;

        $z0 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedMainComponent: boolean isDirectBootAware()>();

        r0.<android.content.pm.ComponentInfo: boolean directBootAware> = $z0;

        $z1 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedMainComponent: boolean isEnabled()>();

        r0.<android.content.pm.ComponentInfo: boolean enabled> = $z1;

        $r2 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedMainComponent: java.lang.String getSplitName()>();

        r0.<android.content.pm.ComponentInfo: java.lang.String splitName> = $r2;

        return;
    }

    private static void assignSharedFieldsForPackageItemInfo(android.content.pm.PackageItemInfo, android.content.pm.parsing.component.ParsedComponent)
    {
        android.content.pm.PackageItemInfo r0;
        android.content.pm.parsing.component.ParsedComponent r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r4;

        r0 := @parameter0: android.content.pm.PackageItemInfo;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedComponent;

        $r2 = staticinvoke <android.content.pm.parsing.component.ComponentParseUtils: java.lang.CharSequence getNonLocalizedLabel(android.content.pm.parsing.component.ParsedComponent)>(r1);

        r0.<android.content.pm.PackageItemInfo: java.lang.CharSequence nonLocalizedLabel> = $r2;

        $i0 = staticinvoke <android.content.pm.parsing.component.ComponentParseUtils: int getIcon(android.content.pm.parsing.component.ParsedComponent)>(r1);

        r0.<android.content.pm.PackageItemInfo: int icon> = $i0;

        $i1 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedComponent: int getBanner()>();

        r0.<android.content.pm.PackageItemInfo: int banner> = $i1;

        $i2 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedComponent: int getLabelRes()>();

        r0.<android.content.pm.PackageItemInfo: int labelRes> = $i2;

        $i3 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedComponent: int getLogo()>();

        r0.<android.content.pm.PackageItemInfo: int logo> = $i3;

        $r3 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedComponent: java.lang.String getName()>();

        r0.<android.content.pm.PackageItemInfo: java.lang.String name> = $r3;

        $r4 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedComponent: java.lang.String getPackageName()>();

        r0.<android.content.pm.PackageItemInfo: java.lang.String packageName> = $r4;

        return;
    }

    private static boolean checkUseInstalled(android.content.pm.parsing.ParsingPackageRead, android.content.pm.PackageUserState, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.content.pm.PackageUserState r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.content.pm.PackageUserState;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r1.<android.content.pm.PackageUserState: boolean isAvailable(int)>(i0);

        return $z0;
    }

    private static int flag(boolean, int)
    {
        boolean z0;
        int i0;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if z0 == 0 goto label1;

        return i0;

     label1:
        return 0;
    }

    public static android.content.pm.PackageInfo generate(android.content.pm.parsing.ParsingPackageRead, android.apex.ApexInfo, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.apex.ApexInfo r1;
        int i0, $i1;
        int[] $r2;
        java.util.Set $r3;
        android.content.pm.PackageUserState $r4;
        android.content.pm.PackageInfo $r5;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.apex.ApexInfo;

        i0 := @parameter2: int;

        $r2 = <libcore.util.EmptyArray: int[] INT>;

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $r4 = new android.content.pm.PackageUserState;

        specialinvoke $r4.<android.content.pm.PackageUserState: void <init>()>();

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generateWithComponents(android.content.pm.parsing.ParsingPackageRead,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,android.apex.ApexInfo)>(r0, $r2, i0, 0L, 0L, $r3, $r4, $i1, r1);

        return $r5;
    }

    public static android.content.pm.PackageInfo generate(android.content.pm.parsing.ParsingPackageRead, int[], int, long, long, java.util.Set, android.content.pm.PackageUserState, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        int[] r1;
        int i0, i3;
        long l1, l2;
        java.util.Set r2;
        android.content.pm.PackageUserState r3;
        android.content.pm.PackageInfo $r4;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        r2 := @parameter5: java.util.Set;

        r3 := @parameter6: android.content.pm.PackageUserState;

        i3 := @parameter7: int;

        $r4 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generateWithComponents(android.content.pm.parsing.ParsingPackageRead,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,android.apex.ApexInfo)>(r0, r1, i0, l1, l2, r2, r3, i3, null);

        return $r4;
    }

    public static android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.parsing.ParsingPackageRead, android.content.pm.parsing.component.ParsedActivity, int, android.content.pm.PackageUserState, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.content.pm.parsing.component.ParsedActivity r1;
        int i0, i1;
        android.content.pm.PackageUserState r2;
        android.content.pm.ActivityInfo $r3;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedActivity;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.pm.PackageUserState;

        i1 := @parameter4: int;

        $r3 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.parsing.ParsingPackageRead,android.content.pm.parsing.component.ParsedActivity,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int)>(r0, r1, i0, r2, null, i1);

        return $r3;
    }

    public static android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.parsing.ParsingPackageRead, android.content.pm.parsing.component.ParsedActivity, int, android.content.pm.PackageUserState, android.content.pm.ApplicationInfo, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.content.pm.parsing.component.ParsedActivity r1;
        int i0, i1;
        android.content.pm.PackageUserState r2;
        android.content.pm.ApplicationInfo r3, r5;
        boolean $z0;
        android.content.pm.ActivityInfo $r4;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedActivity;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.pm.PackageUserState;

        r3 := @parameter4: android.content.pm.ApplicationInfo;

        i1 := @parameter5: int;

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: boolean checkUseInstalled(android.content.pm.parsing.ParsingPackageRead,android.content.pm.PackageUserState,int)>(r0, r2, i0);

        if $z0 != 0 goto label2;

        return null;

     label2:
        r5 = r3;

        if r3 != null goto label3;

        r5 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.parsing.ParsingPackageRead,int,android.content.pm.PackageUserState,int)>(r0, i0, r2, i1);

     label3:
        if r5 != null goto label4;

        return null;

     label4:
        $r4 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ActivityInfo generateActivityInfoUnchecked(android.content.pm.parsing.component.ParsedActivity,android.content.pm.ApplicationInfo)>(r1, r5);

        return $r4;
    }

    public static android.content.pm.ActivityInfo generateActivityInfoUnchecked(android.content.pm.parsing.component.ParsedActivity, android.content.pm.ApplicationInfo)
    {
        android.content.pm.parsing.component.ParsedActivity r0;
        android.content.pm.ApplicationInfo r1;
        android.content.pm.ActivityInfo $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.content.pm.ActivityInfo$WindowLayout $r10;
        android.os.Bundle $r11;
        java.lang.Float r12, r13;
        float f1, f2;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedActivity;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        $r3 = new android.content.pm.ActivityInfo;

        specialinvoke $r3.<android.content.pm.ActivityInfo: void <init>()>();

        staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: void assignSharedFieldsForComponentInfo(android.content.pm.ComponentInfo,android.content.pm.parsing.component.ParsedMainComponent)>($r3, r0);

        $r4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getTargetActivity()>();

        $r3.<android.content.pm.ActivityInfo: java.lang.String targetActivity> = $r4;

        $r5 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getProcessName()>();

        $r3.<android.content.pm.ActivityInfo: java.lang.String processName> = $r5;

        $z0 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: boolean isExported()>();

        $r3.<android.content.pm.ActivityInfo: boolean exported> = $z0;

        $i0 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getTheme()>();

        $r3.<android.content.pm.ActivityInfo: int theme> = $i0;

        $i1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getUiOptions()>();

        $r3.<android.content.pm.ActivityInfo: int uiOptions> = $i1;

        $r6 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getParentActivityName()>();

        $r3.<android.content.pm.ActivityInfo: java.lang.String parentActivityName> = $r6;

        $r7 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getPermission()>();

        $r3.<android.content.pm.ActivityInfo: java.lang.String permission> = $r7;

        $r8 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getTaskAffinity()>();

        $r3.<android.content.pm.ActivityInfo: java.lang.String taskAffinity> = $r8;

        $i2 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getFlags()>();

        $r3.<android.content.pm.ActivityInfo: int flags> = $i2;

        $i3 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getPrivateFlags()>();

        $r3.<android.content.pm.ActivityInfo: int privateFlags> = $i3;

        $i4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getLaunchMode()>();

        $r3.<android.content.pm.ActivityInfo: int launchMode> = $i4;

        $i5 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getDocumentLaunchMode()>();

        $r3.<android.content.pm.ActivityInfo: int documentLaunchMode> = $i5;

        $i6 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getMaxRecents()>();

        $r3.<android.content.pm.ActivityInfo: int maxRecents> = $i6;

        $i7 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getConfigChanges()>();

        $r3.<android.content.pm.ActivityInfo: int configChanges> = $i7;

        $i8 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getSoftInputMode()>();

        $r3.<android.content.pm.ActivityInfo: int softInputMode> = $i8;

        $i9 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getPersistableMode()>();

        $r3.<android.content.pm.ActivityInfo: int persistableMode> = $i9;

        $i10 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getLockTaskLaunchMode()>();

        $r3.<android.content.pm.ActivityInfo: int lockTaskLaunchMode> = $i10;

        $i11 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getScreenOrientation()>();

        $r3.<android.content.pm.ActivityInfo: int screenOrientation> = $i11;

        $i12 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getResizeMode()>();

        $r3.<android.content.pm.ActivityInfo: int resizeMode> = $i12;

        r12 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.Float getMaxAspectRatio()>();

        if r12 == null goto label1;

        f1 = virtualinvoke r12.<java.lang.Float: float floatValue()>();

        goto label2;

     label1:
        f1 = 0.0F;

     label2:
        $r3.<android.content.pm.ActivityInfo: float maxAspectRatio> = f1;

        r13 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.Float getMinAspectRatio()>();

        f2 = 0.0F;

        if r13 == null goto label3;

        f2 = virtualinvoke r13.<java.lang.Float: float floatValue()>();

     label3:
        $r3.<android.content.pm.ActivityInfo: float minAspectRatio> = f2;

        $z1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: boolean getSupportsSizeChanges()>();

        $r3.<android.content.pm.ActivityInfo: boolean supportsSizeChanges> = $z1;

        $r9 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getRequestedVrComponent()>();

        $r3.<android.content.pm.ActivityInfo: java.lang.String requestedVrComponent> = $r9;

        $i13 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getRotationAnimation()>();

        $r3.<android.content.pm.ActivityInfo: int rotationAnimation> = $i13;

        $i14 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: int getColorMode()>();

        $r3.<android.content.pm.ActivityInfo: int colorMode> = $i14;

        $r10 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: android.content.pm.ActivityInfo$WindowLayout getWindowLayout()>();

        $r3.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout> = $r10;

        $r11 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedActivity: android.os.Bundle getMetaData()>();

        $r3.<android.content.pm.ActivityInfo: android.os.Bundle metaData> = $r11;

        $r3.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = r1;

        return $r3;
    }

    public static android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.parsing.ParsingPackageRead, int, android.content.pm.PackageUserState, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        int i0, i1;
        android.content.pm.PackageUserState r1;
        boolean $z0;
        android.content.pm.ApplicationInfo $r2;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.pm.PackageUserState;

        i1 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: boolean checkUseInstalled(android.content.pm.parsing.ParsingPackageRead,android.content.pm.PackageUserState,int)>(r0, r1, i0);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r2 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ApplicationInfo generateApplicationInfoUnchecked(android.content.pm.parsing.ParsingPackageRead,int,android.content.pm.PackageUserState,int)>(r0, i0, r1, i1);

        return $r2;
    }

    public static android.content.pm.ApplicationInfo generateApplicationInfoUnchecked(android.content.pm.parsing.ParsingPackageRead, int, android.content.pm.PackageUserState, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, $i26, $i27;
        android.content.pm.PackageUserState r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.String $r1, $r3;
        java.lang.String[] $r2;
        android.content.pm.parsing.ParsingPackageRead r4;
        android.content.pm.ApplicationInfo r5;

        r4 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        i0 := @parameter1: int;

        r0 := @parameter2: android.content.pm.PackageUserState;

        i24 := @parameter3: int;

        r5 = interfaceinvoke r4.<android.content.pm.parsing.ParsingPackageRead: android.content.pm.ApplicationInfo toAppInfoWithoutState()>();

        virtualinvoke r5.<android.content.pm.ApplicationInfo: void initForUser(int)>(i24);

        $i3 = i0 & 128;

        if $i3 != 0 goto label01;

        r5.<android.content.pm.ApplicationInfo: android.os.Bundle metaData> = null;

     label01:
        $i4 = i0 & 1024;

        if $i4 != 0 goto label02;

        r5.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles> = null;

        r5.<android.content.pm.ApplicationInfo: java.util.List sharedLibraryInfos> = null;

     label02:
        $z1 = <android.content.pm.PackageParser: boolean sCompatibilityModeEnabled>;

        if $z1 != 0 goto label03;

        virtualinvoke r5.<android.content.pm.ApplicationInfo: void disableCompatibilityMode()>();

     label03:
        $i5 = r5.<android.content.pm.ApplicationInfo: int flags>;

        $z2 = r0.<android.content.pm.PackageUserState: boolean stopped>;

        $i6 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z2, 2097152);

        $z3 = r0.<android.content.pm.PackageUserState: boolean installed>;

        $i7 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z3, 8388608);

        $i8 = $i6 | $i7;

        $z4 = r0.<android.content.pm.PackageUserState: boolean suspended>;

        $i9 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z4, 1073741824);

        $i10 = $i8 | $i9;

        $i11 = $i5 | $i10;

        r5.<android.content.pm.ApplicationInfo: int flags> = $i11;

        i1 = r5.<android.content.pm.ApplicationInfo: int privateFlags>;

        $z5 = r0.<android.content.pm.PackageUserState: boolean instantApp>;

        i2 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z5, 128);

        $z6 = r0.<android.content.pm.PackageUserState: boolean virtualPreload>;

        i25 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>($z6, 65536);

        z0 = r0.<android.content.pm.PackageUserState: boolean hidden>;

        z7 = 1;

        $i12 = i2 | i25;

        $i13 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: int flag(boolean,int)>(z0, 1);

        $i14 = $i12 | $i13;

        $i15 = i1 | $i14;

        r5.<android.content.pm.ApplicationInfo: int privateFlags> = $i15;

        $i16 = r0.<android.content.pm.PackageUserState: int enabled>;

        if $i16 != 1 goto label04;

        r5.<android.content.pm.ApplicationInfo: boolean enabled> = 1;

        goto label09;

     label04:
        $i17 = r0.<android.content.pm.PackageUserState: int enabled>;

        if $i17 != 4 goto label07;

        $i23 = 32768 & i0;

        if $i23 == 0 goto label05;

        goto label06;

     label05:
        z7 = 0;

     label06:
        r5.<android.content.pm.ApplicationInfo: boolean enabled> = z7;

        goto label09;

     label07:
        $i18 = r0.<android.content.pm.PackageUserState: int enabled>;

        if $i18 == 2 goto label08;

        $i22 = r0.<android.content.pm.PackageUserState: int enabled>;

        if $i22 != 3 goto label09;

     label08:
        r5.<android.content.pm.ApplicationInfo: boolean enabled> = 0;

     label09:
        $i26 = r0.<android.content.pm.PackageUserState: int enabled>;

        r5.<android.content.pm.ApplicationInfo: int enabledSetting> = $i26;

        $i27 = r5.<android.content.pm.ApplicationInfo: int category>;

        if $i27 != -1 goto label10;

        $i21 = r0.<android.content.pm.PackageUserState: int categoryHint>;

        r5.<android.content.pm.ApplicationInfo: int category> = $i21;

     label10:
        $i19 = r5.<android.content.pm.ApplicationInfo: int category>;

        if $i19 != -1 goto label11;

        $r3 = r5.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i20 = staticinvoke <android.content.pm.FallbackCategoryProvider: int getFallbackCategory(java.lang.String)>($r3);

        r5.<android.content.pm.ApplicationInfo: int category> = $i20;

     label11:
        $r1 = staticinvoke <android.content.pm.SELinuxUtil: java.lang.String assignSeinfoUser(android.content.pm.PackageUserState)>(r0);

        r5.<android.content.pm.ApplicationInfo: java.lang.String seInfoUser> = $r1;

        $r2 = virtualinvoke r0.<android.content.pm.PackageUserState: java.lang.String[] getAllOverlayPaths()>();

        r5.<android.content.pm.ApplicationInfo: java.lang.String[] resourceDirs> = $r2;

        return r5;
    }

    public static android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.parsing.component.ParsedInstrumentation, android.content.pm.parsing.ParsingPackageRead, int, int)
    {
        android.content.pm.parsing.component.ParsedInstrumentation r0;
        android.content.pm.parsing.ParsingPackageRead r1;
        int i0, i1, $i2;
        android.content.pm.InstrumentationInfo $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r13, $r15, $r17;
        boolean $z0, $z1;
        java.lang.String[] $r8, $r9, $r10;
        android.util.SparseArray $r11;
        java.io.File $r12, $r14, $r16;
        android.os.Bundle $r18;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedInstrumentation;

        r1 := @parameter1: android.content.pm.parsing.ParsingPackageRead;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = new android.content.pm.InstrumentationInfo;

        specialinvoke $r3.<android.content.pm.InstrumentationInfo: void <init>()>();

        staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: void assignSharedFieldsForPackageItemInfo(android.content.pm.PackageItemInfo,android.content.pm.parsing.component.ParsedComponent)>($r3, r0);

        $r4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getTargetPackage()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String targetPackage> = $r4;

        $r5 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getTargetProcesses()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String targetProcesses> = $r5;

        $z0 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedInstrumentation: boolean isHandleProfiling()>();

        $r3.<android.content.pm.InstrumentationInfo: boolean handleProfiling> = $z0;

        $z1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedInstrumentation: boolean isFunctionalTest()>();

        $r3.<android.content.pm.InstrumentationInfo: boolean functionalTest> = $z1;

        $r6 = interfaceinvoke r1.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getBaseCodePath()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String sourceDir> = $r6;

        $r7 = interfaceinvoke r1.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getBaseCodePath()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String publicSourceDir> = $r7;

        $r8 = interfaceinvoke r1.<android.content.pm.parsing.ParsingPackageRead: java.lang.String[] getSplitNames()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String[] splitNames> = $r8;

        $r9 = interfaceinvoke r1.<android.content.pm.parsing.ParsingPackageRead: java.lang.String[] getSplitCodePaths()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String[] splitSourceDirs> = $r9;

        $r10 = interfaceinvoke r1.<android.content.pm.parsing.ParsingPackageRead: java.lang.String[] getSplitCodePaths()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String[] splitPublicSourceDirs> = $r10;

        $r11 = interfaceinvoke r1.<android.content.pm.parsing.ParsingPackageRead: android.util.SparseArray getSplitDependencies()>();

        $r3.<android.content.pm.InstrumentationInfo: android.util.SparseArray splitDependencies> = $r11;

        $r12 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: java.io.File getDataDir(android.content.pm.parsing.ParsingPackageRead,int)>(r1, i1);

        $r13 = virtualinvoke $r12.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String dataDir> = $r13;

        $r14 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: java.io.File getDeviceProtectedDataDir(android.content.pm.parsing.ParsingPackageRead,int)>(r1, i1);

        $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String deviceProtectedDataDir> = $r15;

        $r16 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: java.io.File getCredentialProtectedDataDir(android.content.pm.parsing.ParsingPackageRead,int)>(r1, i1);

        $r17 = virtualinvoke $r16.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3.<android.content.pm.InstrumentationInfo: java.lang.String credentialProtectedDataDir> = $r17;

        $i2 = i0 & 128;

        if $i2 != 0 goto label2;

        return $r3;

     label2:
        $r18 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedInstrumentation: android.os.Bundle getMetaData()>();

        $r3.<android.content.pm.InstrumentationInfo: android.os.Bundle metaData> = $r18;

        return $r3;
    }

    public static android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.parsing.component.ParsedPermissionGroup, int)
    {
        android.content.pm.parsing.component.ParsedPermissionGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.content.pm.PermissionGroupInfo $r2;
        android.os.Bundle $r3;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedPermissionGroup;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new android.content.pm.PermissionGroupInfo;

        $i1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: int getRequestDetailResourceId()>();

        $i2 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: int getBackgroundRequestResourceId()>();

        $i3 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: int getBackgroundRequestDetailResourceId()>();

        specialinvoke $r2.<android.content.pm.PermissionGroupInfo: void <init>(int,int,int)>($i1, $i2, $i3);

        staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: void assignSharedFieldsForPackageItemInfo(android.content.pm.PackageItemInfo,android.content.pm.parsing.component.ParsedComponent)>($r2, r0);

        $i4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: int getDescriptionRes()>();

        $r2.<android.content.pm.PermissionGroupInfo: int descriptionRes> = $i4;

        $i5 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: int getPriority()>();

        $r2.<android.content.pm.PermissionGroupInfo: int priority> = $i5;

        $i6 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: int getRequestRes()>();

        $r2.<android.content.pm.PermissionGroupInfo: int requestRes> = $i6;

        $i7 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: int getFlags()>();

        $r2.<android.content.pm.PermissionGroupInfo: int flags> = $i7;

        $i8 = i0 & 128;

        if $i8 != 0 goto label2;

        return $r2;

     label2:
        $r3 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermissionGroup: android.os.Bundle getMetaData()>();

        $r2.<android.content.pm.PermissionGroupInfo: android.os.Bundle metaData> = $r3;

        return $r2;
    }

    public static android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.parsing.component.ParsedPermission, int)
    {
        android.content.pm.parsing.component.ParsedPermission r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.content.pm.PermissionInfo $r2;
        java.lang.String $r3, $r4;
        android.os.Bundle $r5;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedPermission;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new android.content.pm.PermissionInfo;

        $r3 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getBackgroundPermission()>();

        specialinvoke $r2.<android.content.pm.PermissionInfo: void <init>(java.lang.String)>($r3);

        staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: void assignSharedFieldsForPackageItemInfo(android.content.pm.PackageItemInfo,android.content.pm.parsing.component.ParsedComponent)>($r2, r0);

        $r4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getGroup()>();

        $r2.<android.content.pm.PermissionInfo: java.lang.String group> = $r4;

        $i1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermission: int getRequestRes()>();

        $r2.<android.content.pm.PermissionInfo: int requestRes> = $i1;

        $i2 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermission: int getProtectionLevel()>();

        $r2.<android.content.pm.PermissionInfo: int protectionLevel> = $i2;

        $i3 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermission: int getDescriptionRes()>();

        $r2.<android.content.pm.PermissionInfo: int descriptionRes> = $i3;

        $i4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermission: int getFlags()>();

        $r2.<android.content.pm.PermissionInfo: int flags> = $i4;

        $i5 = i0 & 128;

        if $i5 != 0 goto label2;

        return $r2;

     label2:
        $r5 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedPermission: android.os.Bundle getMetaData()>();

        $r2.<android.content.pm.PermissionInfo: android.os.Bundle metaData> = $r5;

        return $r2;
    }

    public static android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.parsing.ParsingPackageRead, android.content.pm.parsing.component.ParsedProvider, int, android.content.pm.PackageUserState, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.content.pm.parsing.component.ParsedProvider r1;
        int i0, i1;
        android.content.pm.PackageUserState r2;
        android.content.pm.ProviderInfo $r3;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedProvider;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.pm.PackageUserState;

        i1 := @parameter4: int;

        $r3 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.parsing.ParsingPackageRead,android.content.pm.parsing.component.ParsedProvider,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int)>(r0, r1, i0, r2, null, i1);

        return $r3;
    }

    public static android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.parsing.ParsingPackageRead, android.content.pm.parsing.component.ParsedProvider, int, android.content.pm.PackageUserState, android.content.pm.ApplicationInfo, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.content.pm.parsing.component.ParsedProvider r1;
        int i0, i1;
        android.content.pm.PackageUserState r2;
        android.content.pm.ApplicationInfo r3, r5;
        boolean $z0;
        android.content.pm.ProviderInfo $r4;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedProvider;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.pm.PackageUserState;

        r3 := @parameter4: android.content.pm.ApplicationInfo;

        i1 := @parameter5: int;

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: boolean checkUseInstalled(android.content.pm.parsing.ParsingPackageRead,android.content.pm.PackageUserState,int)>(r0, r2, i0);

        if $z0 != 0 goto label2;

        return null;

     label2:
        r5 = r3;

        if r3 != null goto label3;

        r5 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.parsing.ParsingPackageRead,int,android.content.pm.PackageUserState,int)>(r0, i0, r2, i1);

     label3:
        if r5 != null goto label4;

        return null;

     label4:
        $r4 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ProviderInfo generateProviderInfoUnchecked(android.content.pm.parsing.component.ParsedProvider,int,android.content.pm.ApplicationInfo)>(r1, i0, r5);

        return $r4;
    }

    public static android.content.pm.ProviderInfo generateProviderInfoUnchecked(android.content.pm.parsing.component.ParsedProvider, int, android.content.pm.ApplicationInfo)
    {
        android.content.pm.parsing.component.ParsedProvider r0;
        int i0, $i1, $i2, $i3;
        android.content.pm.ApplicationInfo r1;
        android.content.pm.ProviderInfo $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r4, $r5, $r6, $r7;
        android.os.PatternMatcher[] $r8;
        android.content.pm.PathPermission[] $r9;
        android.os.Bundle $r10;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedProvider;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.pm.ApplicationInfo;

        $r3 = new android.content.pm.ProviderInfo;

        specialinvoke $r3.<android.content.pm.ProviderInfo: void <init>()>();

        staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: void assignSharedFieldsForComponentInfo(android.content.pm.ComponentInfo,android.content.pm.parsing.component.ParsedMainComponent)>($r3, r0);

        $z0 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: boolean isExported()>();

        $r3.<android.content.pm.ProviderInfo: boolean exported> = $z0;

        $i1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: int getFlags()>();

        $r3.<android.content.pm.ProviderInfo: int flags> = $i1;

        $r4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: java.lang.String getProcessName()>();

        $r3.<android.content.pm.ProviderInfo: java.lang.String processName> = $r4;

        $r5 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: java.lang.String getAuthority()>();

        $r3.<android.content.pm.ProviderInfo: java.lang.String authority> = $r5;

        $z1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: boolean isSyncable()>();

        $r3.<android.content.pm.ProviderInfo: boolean isSyncable> = $z1;

        $r6 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: java.lang.String getReadPermission()>();

        $r3.<android.content.pm.ProviderInfo: java.lang.String readPermission> = $r6;

        $r7 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: java.lang.String getWritePermission()>();

        $r3.<android.content.pm.ProviderInfo: java.lang.String writePermission> = $r7;

        $z2 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: boolean isGrantUriPermissions()>();

        $r3.<android.content.pm.ProviderInfo: boolean grantUriPermissions> = $z2;

        $z3 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: boolean isForceUriPermissions()>();

        $r3.<android.content.pm.ProviderInfo: boolean forceUriPermissions> = $z3;

        $z4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: boolean isMultiProcess()>();

        $r3.<android.content.pm.ProviderInfo: boolean multiprocess> = $z4;

        $i2 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: int getInitOrder()>();

        $r3.<android.content.pm.ProviderInfo: int initOrder> = $i2;

        $r8 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: android.os.PatternMatcher[] getUriPermissionPatterns()>();

        $r3.<android.content.pm.ProviderInfo: android.os.PatternMatcher[] uriPermissionPatterns> = $r8;

        $r9 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: android.content.pm.PathPermission[] getPathPermissions()>();

        $r3.<android.content.pm.ProviderInfo: android.content.pm.PathPermission[] pathPermissions> = $r9;

        $r10 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedProvider: android.os.Bundle getMetaData()>();

        $r3.<android.content.pm.ProviderInfo: android.os.Bundle metaData> = $r10;

        $i3 = i0 & 2048;

        if $i3 != 0 goto label1;

        $r3.<android.content.pm.ProviderInfo: android.os.PatternMatcher[] uriPermissionPatterns> = null;

     label1:
        $r3.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo> = r1;

        return $r3;
    }

    public static android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.parsing.ParsingPackageRead, android.content.pm.parsing.component.ParsedService, int, android.content.pm.PackageUserState, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.content.pm.parsing.component.ParsedService r1;
        int i0, i1;
        android.content.pm.PackageUserState r2;
        android.content.pm.ServiceInfo $r3;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedService;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.pm.PackageUserState;

        i1 := @parameter4: int;

        $r3 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.parsing.ParsingPackageRead,android.content.pm.parsing.component.ParsedService,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int)>(r0, r1, i0, r2, null, i1);

        return $r3;
    }

    public static android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.parsing.ParsingPackageRead, android.content.pm.parsing.component.ParsedService, int, android.content.pm.PackageUserState, android.content.pm.ApplicationInfo, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        android.content.pm.parsing.component.ParsedService r1;
        int i0, i1;
        android.content.pm.PackageUserState r2;
        android.content.pm.ApplicationInfo r3, r5;
        boolean $z0;
        android.content.pm.ServiceInfo $r4;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: android.content.pm.parsing.component.ParsedService;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.pm.PackageUserState;

        r3 := @parameter4: android.content.pm.ApplicationInfo;

        i1 := @parameter5: int;

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: boolean checkUseInstalled(android.content.pm.parsing.ParsingPackageRead,android.content.pm.PackageUserState,int)>(r0, r2, i0);

        if $z0 != 0 goto label2;

        return null;

     label2:
        r5 = r3;

        if r3 != null goto label3;

        r5 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.parsing.ParsingPackageRead,int,android.content.pm.PackageUserState,int)>(r0, i0, r2, i1);

     label3:
        if r5 != null goto label4;

        return null;

     label4:
        $r4 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ServiceInfo generateServiceInfoUnchecked(android.content.pm.parsing.component.ParsedService,android.content.pm.ApplicationInfo)>(r1, r5);

        return $r4;
    }

    public static android.content.pm.ServiceInfo generateServiceInfoUnchecked(android.content.pm.parsing.component.ParsedService, android.content.pm.ApplicationInfo)
    {
        android.content.pm.parsing.component.ParsedService r0;
        android.content.pm.ApplicationInfo r1;
        android.content.pm.ServiceInfo $r3;
        boolean $z0;
        int $i0, $i1;
        android.os.Bundle $r4;
        java.lang.String $r5, $r6;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedService;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        $r3 = new android.content.pm.ServiceInfo;

        specialinvoke $r3.<android.content.pm.ServiceInfo: void <init>()>();

        staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: void assignSharedFieldsForComponentInfo(android.content.pm.ComponentInfo,android.content.pm.parsing.component.ParsedMainComponent)>($r3, r0);

        $z0 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedService: boolean isExported()>();

        $r3.<android.content.pm.ServiceInfo: boolean exported> = $z0;

        $i0 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedService: int getFlags()>();

        $r3.<android.content.pm.ServiceInfo: int flags> = $i0;

        $r4 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedService: android.os.Bundle getMetaData()>();

        $r3.<android.content.pm.ServiceInfo: android.os.Bundle metaData> = $r4;

        $r5 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedService: java.lang.String getPermission()>();

        $r3.<android.content.pm.ServiceInfo: java.lang.String permission> = $r5;

        $r6 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedService: java.lang.String getProcessName()>();

        $r3.<android.content.pm.ServiceInfo: java.lang.String processName> = $r6;

        $i1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedService: int getForegroundServiceType()>();

        $r3.<android.content.pm.ServiceInfo: int mForegroundServiceType> = $i1;

        $r3.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo> = r1;

        return $r3;
    }

    private static android.content.pm.PackageInfo generateWithComponents(android.content.pm.parsing.ParsingPackageRead, int[], int, long, long, java.util.Set, android.content.pm.PackageUserState, int, android.apex.ApexInfo)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        int i0, i3, $i4, i5, i6, i7, $i8, i9, i10, i11, $i12, i13, i14, i15, $i16, i17, i18, i19, $i20, i21, i22;
        long l1, l2;
        android.content.pm.PackageUserState r1;
        android.content.pm.ApplicationInfo r2;
        java.util.List $r3, $r6, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31;
        android.content.pm.InstrumentationInfo[] $r4, $r5;
        java.lang.Object $r7, $r14, $r20, $r26, $r32;
        android.content.pm.parsing.component.ParsedInstrumentation $r8;
        android.content.pm.InstrumentationInfo $r9;
        java.lang.Object[] $r11, $r17, $r23, $r29;
        android.content.pm.ProviderInfo[] $r12, r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.content.pm.ProviderInfo $r15;
        android.content.pm.ServiceInfo[] $r18, r44;
        android.content.pm.ServiceInfo $r21;
        android.content.pm.ActivityInfo[] $r24, $r30, r40, r42;
        android.content.pm.ActivityInfo $r27, $r35;
        java.lang.String $r33, $r34;
        int[] r36;
        java.util.Set r37;
        android.apex.ApexInfo r38;
        android.content.pm.PackageInfo r39;
        android.content.pm.parsing.component.ParsedActivity r41, r43;
        android.content.pm.parsing.component.ParsedService r45;
        android.content.pm.parsing.component.ParsedProvider r47;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r36 := @parameter1: int[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        r37 := @parameter5: java.util.Set;

        r1 := @parameter6: android.content.pm.PackageUserState;

        i3 := @parameter7: int;

        r38 := @parameter8: android.apex.ApexInfo;

        r2 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.parsing.ParsingPackageRead,int,android.content.pm.PackageUserState,int)>(r0, i0, r1, i3);

        if r2 != null goto label01;

        return null;

     label01:
        r39 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generateWithoutComponents(android.content.pm.parsing.ParsingPackageRead,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,android.apex.ApexInfo,android.content.pm.ApplicationInfo)>(r0, r36, i0, l1, l2, r37, r1, i3, r38, r2);

        if r39 != null goto label02;

        return null;

     label02:
        $i4 = i0 & 1;

        if $i4 == 0 goto label07;

        $r28 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getActivities()>();

        i5 = interfaceinvoke $r28.<java.util.List: int size()>();

        if i5 <= 0 goto label07;

        r40 = newarray (android.content.pm.ActivityInfo)[i5];

        i6 = 0;

        i7 = 0;

     label03:
        if i7 >= i5 goto label06;

        $r31 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getActivities()>();

        $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(i7);

        r41 = (android.content.pm.parsing.component.ParsedActivity) $r32;

        $z6 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isEnabled()>();

        $z7 = staticinvoke <android.content.pm.parsing.component.ComponentParseUtils: boolean isMatch(android.content.pm.PackageUserState,boolean,boolean,android.content.pm.parsing.component.ParsedMainComponent,int)>(r1, 0, $z6, r41, i0);

        if $z7 == 0 goto label05;

        $r33 = <android.content.pm.PackageManager: java.lang.String APP_DETAILS_ACTIVITY_CLASS_NAME>;

        $r34 = virtualinvoke r41.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getName()>();

        $z8 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r34);

        if $z8 == 0 goto label04;

        goto label05;

     label04:
        $r35 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.parsing.ParsingPackageRead,android.content.pm.parsing.component.ParsedActivity,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int)>(r0, r41, i0, r1, r2, i3);

        r40[i6] = $r35;

        i6 = i6 + 1;

        goto label05;

     label05:
        i7 = i7 + 1;

        goto label03;

     label06:
        $r29 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] trimToSize(java.lang.Object[],int)>(r40, i6);

        $r30 = (android.content.pm.ActivityInfo[]) $r29;

        r39.<android.content.pm.PackageInfo: android.content.pm.ActivityInfo[] activities> = $r30;

     label07:
        $i8 = i0 & 2;

        if $i8 == 0 goto label11;

        $r22 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getReceivers()>();

        i9 = interfaceinvoke $r22.<java.util.List: int size()>();

        if i9 <= 0 goto label11;

        r42 = newarray (android.content.pm.ActivityInfo)[i9];

        i10 = 0;

        i11 = 0;

     label08:
        if i11 >= i9 goto label10;

        $r25 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getReceivers()>();

        $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i11);

        r43 = (android.content.pm.parsing.component.ParsedActivity) $r26;

        $z4 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isEnabled()>();

        $z5 = staticinvoke <android.content.pm.parsing.component.ComponentParseUtils: boolean isMatch(android.content.pm.PackageUserState,boolean,boolean,android.content.pm.parsing.component.ParsedMainComponent,int)>(r1, 0, $z4, r43, i0);

        if $z5 == 0 goto label09;

        $r27 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.parsing.ParsingPackageRead,android.content.pm.parsing.component.ParsedActivity,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int)>(r0, r43, i0, r1, r2, i3);

        r42[i10] = $r27;

        i10 = i10 + 1;

        goto label09;

     label09:
        i11 = i11 + 1;

        goto label08;

     label10:
        $r23 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] trimToSize(java.lang.Object[],int)>(r42, i10);

        $r24 = (android.content.pm.ActivityInfo[]) $r23;

        r39.<android.content.pm.PackageInfo: android.content.pm.ActivityInfo[] receivers> = $r24;

     label11:
        $i12 = i0 & 4;

        if $i12 == 0 goto label15;

        $r16 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getServices()>();

        i13 = interfaceinvoke $r16.<java.util.List: int size()>();

        if i13 <= 0 goto label15;

        r44 = newarray (android.content.pm.ServiceInfo)[i13];

        i14 = 0;

        i15 = 0;

     label12:
        if i15 >= i13 goto label14;

        $r19 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getServices()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i15);

        r45 = (android.content.pm.parsing.component.ParsedService) $r20;

        $z2 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isEnabled()>();

        $z3 = staticinvoke <android.content.pm.parsing.component.ComponentParseUtils: boolean isMatch(android.content.pm.PackageUserState,boolean,boolean,android.content.pm.parsing.component.ParsedMainComponent,int)>(r1, 0, $z2, r45, i0);

        if $z3 == 0 goto label13;

        $r21 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.parsing.ParsingPackageRead,android.content.pm.parsing.component.ParsedService,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int)>(r0, r45, i0, r1, r2, i3);

        r44[i14] = $r21;

        i14 = i14 + 1;

        goto label13;

     label13:
        i15 = i15 + 1;

        goto label12;

     label14:
        $r17 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] trimToSize(java.lang.Object[],int)>(r44, i14);

        $r18 = (android.content.pm.ServiceInfo[]) $r17;

        r39.<android.content.pm.PackageInfo: android.content.pm.ServiceInfo[] services> = $r18;

     label15:
        $i16 = i0 & 8;

        if $i16 == 0 goto label19;

        $r10 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getProviders()>();

        i17 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i17 <= 0 goto label19;

        r46 = newarray (android.content.pm.ProviderInfo)[i17];

        i18 = 0;

        i19 = 0;

     label16:
        if i19 >= i17 goto label18;

        $r13 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getProviders()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i19);

        r47 = (android.content.pm.parsing.component.ParsedProvider) $r14;

        $z0 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isEnabled()>();

        $z1 = staticinvoke <android.content.pm.parsing.component.ComponentParseUtils: boolean isMatch(android.content.pm.PackageUserState,boolean,boolean,android.content.pm.parsing.component.ParsedMainComponent,int)>(r1, 0, $z0, r47, i0);

        if $z1 == 0 goto label17;

        $r15 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.parsing.ParsingPackageRead,android.content.pm.parsing.component.ParsedProvider,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int)>(r0, r47, i0, r1, r2, i3);

        r46[i18] = $r15;

        i18 = i18 + 1;

        goto label17;

     label17:
        i19 = i19 + 1;

        goto label16;

     label18:
        $r11 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] trimToSize(java.lang.Object[],int)>(r46, i18);

        $r12 = (android.content.pm.ProviderInfo[]) $r11;

        r39.<android.content.pm.PackageInfo: android.content.pm.ProviderInfo[] providers> = $r12;

     label19:
        $i20 = i0 & 16;

        if $i20 == 0 goto label21;

        $r3 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getInstrumentations()>();

        i21 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i21 <= 0 goto label21;

        $r4 = newarray (android.content.pm.InstrumentationInfo)[i21];

        r39.<android.content.pm.PackageInfo: android.content.pm.InstrumentationInfo[] instrumentation> = $r4;

        i22 = 0;

     label20:
        if i22 >= i21 goto label21;

        $r5 = r39.<android.content.pm.PackageInfo: android.content.pm.InstrumentationInfo[] instrumentation>;

        $r6 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.util.List getInstrumentations()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i22);

        $r8 = (android.content.pm.parsing.component.ParsedInstrumentation) $r7;

        $r9 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.parsing.component.ParsedInstrumentation,android.content.pm.parsing.ParsingPackageRead,int,int)>($r8, r0, i0, i3);

        $r5[i22] = $r9;

        i22 = i22 + 1;

        goto label20;

     label21:
        return r39;
    }

    public static android.content.pm.PackageInfo generateWithoutComponents(android.content.pm.parsing.ParsingPackageRead, int[], int, long, long, java.util.Set, android.content.pm.PackageUserState, int, android.apex.ApexInfo, android.content.pm.ApplicationInfo)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        int[] r1;
        int i0, i3;
        long l1, l2;
        java.util.Set r2;
        android.content.pm.PackageUserState r3;
        android.apex.ApexInfo r4;
        android.content.pm.ApplicationInfo r5;
        boolean $z0;
        android.content.pm.PackageInfo $r6;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        r2 := @parameter5: java.util.Set;

        r3 := @parameter6: android.content.pm.PackageUserState;

        i3 := @parameter7: int;

        r4 := @parameter8: android.apex.ApexInfo;

        r5 := @parameter9: android.content.pm.ApplicationInfo;

        $z0 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: boolean checkUseInstalled(android.content.pm.parsing.ParsingPackageRead,android.content.pm.PackageUserState,int)>(r0, r3, i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r6 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generateWithoutComponentsUnchecked(android.content.pm.parsing.ParsingPackageRead,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,android.apex.ApexInfo,android.content.pm.ApplicationInfo)>(r0, r1, i0, l1, l2, r2, r3, i3, r4, r5);

        return $r6;
    }

    public static android.content.pm.PackageInfo generateWithoutComponentsUnchecked(android.content.pm.parsing.ParsingPackageRead, int[], int, long, long, java.util.Set, android.content.pm.PackageUserState, int, android.apex.ApexInfo, android.content.pm.ApplicationInfo)
    {
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, i29, i30, i31, $i32, i33, i34, i35, i36, $i37, i38, $i39;
        long l1, l2;
        java.util.Set r0;
        android.apex.ApexInfo r1;
        android.content.pm.PackageInfo $r2;
        java.lang.String $r3, $r6, $r7, $r20, $r22, $r24, $r59, $r60, $r61, $r62, $r63, $r64, r65;
        java.lang.String[] $r4, $r27, $r31;
        int[] $r5, $r28, r55, r66, r67;
        android.content.pm.ApplicationInfo $r8, $r21, $r23, $r53, r57, r69, r70, r71, r72;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.content.pm.PackageParser$SigningDetails $r9, r73;
        android.content.pm.SigningInfo $r10;
        android.content.pm.Signature[] $r11, $r12, $r13, $r14, $r15, $r16, $r18;
        android.content.pm.Signature $r17;
        java.io.File $r19;
        java.util.List $r25, $r26, $r29, $r34, $r38, $r39, $r40, $r42, $r46, $r50;
        java.lang.Object $r30, $r35;
        android.content.pm.PermissionInfo[] $r32, $r33;
        android.content.pm.parsing.component.ParsedPermission $r36;
        android.content.pm.PermissionInfo $r37;
        android.content.pm.FeatureGroupInfo[] $r41, $r43;
        android.content.pm.FeatureInfo[] $r45, $r47;
        android.content.pm.ConfigurationInfo[] $r49, $r51;
        android.content.pm.parsing.ParsingPackageRead r54;
        android.content.pm.PackageUserState r56;

        r54 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        r55 := @parameter1: int[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        r0 := @parameter5: java.util.Set;

        r56 := @parameter6: android.content.pm.PackageUserState;

        i25 := @parameter7: int;

        r1 := @parameter8: android.apex.ApexInfo;

        r57 := @parameter9: android.content.pm.ApplicationInfo;

        $r2 = new android.content.pm.PackageInfo;

        specialinvoke $r2.<android.content.pm.PackageInfo: void <init>()>();

        $r3 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getPackageName()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String packageName> = $r3;

        $r4 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String[] getSplitNames()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String[] splitNames> = $r4;

        $i3 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int getVersionCode()>();

        $r2.<android.content.pm.PackageInfo: int versionCode> = $i3;

        $i4 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int getVersionCodeMajor()>();

        $r2.<android.content.pm.PackageInfo: int versionCodeMajor> = $i4;

        $i5 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int getBaseRevisionCode()>();

        $r2.<android.content.pm.PackageInfo: int baseRevisionCode> = $i5;

        $r5 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int[] getSplitRevisionCodes()>();

        $r2.<android.content.pm.PackageInfo: int[] splitRevisionCodes> = $r5;

        $r6 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getVersionName()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String versionName> = $r6;

        $r7 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getSharedUserId()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String sharedUserId> = $r7;

        $i6 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int getSharedUserLabel()>();

        $r2.<android.content.pm.PackageInfo: int sharedUserLabel> = $i6;

        $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo> = r57;

        $i7 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int getInstallLocation()>();

        $r2.<android.content.pm.PackageInfo: int installLocation> = $i7;

        $r8 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i8 = $r8.<android.content.pm.ApplicationInfo: int flags>;

        $i9 = $i8 & 1;

        if $i9 != 0 goto label01;

        $r53 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i23 = $r53.<android.content.pm.ApplicationInfo: int flags>;

        $i24 = $i23 & 128;

        if $i24 == 0 goto label02;

     label01:
        $z0 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: boolean isRequiredForAllUsers()>();

        $r2.<android.content.pm.PackageInfo: boolean requiredForAllUsers> = $z0;

     label02:
        $r59 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getRestrictedAccountType()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType> = $r59;

        $r60 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getRequiredAccountType()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String requiredAccountType> = $r60;

        $r61 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getOverlayTarget()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String overlayTarget> = $r61;

        $r62 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getOverlayTargetName()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String targetOverlayableName> = $r62;

        $r63 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getOverlayCategory()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String overlayCategory> = $r63;

        $i26 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int getOverlayPriority()>();

        $r2.<android.content.pm.PackageInfo: int overlayPriority> = $i26;

        $z6 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: boolean isOverlayIsStatic()>();

        $r2.<android.content.pm.PackageInfo: boolean mOverlayIsStatic> = $z6;

        $i27 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: int getCompileSdkVersion()>();

        $r2.<android.content.pm.PackageInfo: int compileSdkVersion> = $i27;

        $r64 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getCompileSdkVersionCodeName()>();

        $r2.<android.content.pm.PackageInfo: java.lang.String compileSdkVersionCodename> = $r64;

        $r2.<android.content.pm.PackageInfo: long firstInstallTime> = l1;

        $r2.<android.content.pm.PackageInfo: long lastUpdateTime> = l2;

        $i28 = i0 & 256;

        if $i28 == 0 goto label03;

        $r2.<android.content.pm.PackageInfo: int[] gids> = r55;

        goto label03;

     label03:
        $i10 = i0 & 16384;

        if $i10 == 0 goto label06;

        $r38 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getConfigPreferences()>();

        i29 = interfaceinvoke $r38.<java.util.List: int size()>();

        if i29 <= 0 goto label04;

        $r49 = newarray (android.content.pm.ConfigurationInfo)[i29];

        $r2.<android.content.pm.PackageInfo: android.content.pm.ConfigurationInfo[] configPreferences> = $r49;

        $r50 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getConfigPreferences()>();

        $r51 = $r2.<android.content.pm.PackageInfo: android.content.pm.ConfigurationInfo[] configPreferences>;

        interfaceinvoke $r50.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r51);

     label04:
        $r39 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getReqFeatures()>();

        i30 = interfaceinvoke $r39.<java.util.List: int size()>();

        if i30 <= 0 goto label05;

        $r45 = newarray (android.content.pm.FeatureInfo)[i30];

        $r2.<android.content.pm.PackageInfo: android.content.pm.FeatureInfo[] reqFeatures> = $r45;

        $r46 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getReqFeatures()>();

        $r47 = $r2.<android.content.pm.PackageInfo: android.content.pm.FeatureInfo[] reqFeatures>;

        interfaceinvoke $r46.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r47);

     label05:
        $r40 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getFeatureGroups()>();

        i31 = interfaceinvoke $r40.<java.util.List: int size()>();

        if i31 <= 0 goto label06;

        $r41 = newarray (android.content.pm.FeatureGroupInfo)[i31];

        $r2.<android.content.pm.PackageInfo: android.content.pm.FeatureGroupInfo[] featureGroups> = $r41;

        $r42 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getFeatureGroups()>();

        $r43 = $r2.<android.content.pm.PackageInfo: android.content.pm.FeatureGroupInfo[] featureGroups>;

        interfaceinvoke $r42.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r43);

     label06:
        $i32 = i0 & 4096;

        if $i32 == 0 goto label11;

        $r25 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getPermissions()>();

        i33 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r25);

        if i33 <= 0 goto label08;

        $r32 = newarray (android.content.pm.PermissionInfo)[i33];

        $r2.<android.content.pm.PackageInfo: android.content.pm.PermissionInfo[] permissions> = $r32;

        i34 = 0;

     label07:
        if i34 >= i33 goto label08;

        $r33 = $r2.<android.content.pm.PackageInfo: android.content.pm.PermissionInfo[] permissions>;

        $r34 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getPermissions()>();

        $r35 = interfaceinvoke $r34.<java.util.List: java.lang.Object get(int)>(i34);

        $r36 = (android.content.pm.parsing.component.ParsedPermission) $r35;

        $r37 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.parsing.component.ParsedPermission,int)>($r36, i0);

        $r33[i34] = $r37;

        i34 = i34 + 1;

        goto label07;

     label08:
        $r26 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getRequestedPermissions()>();

        i35 = interfaceinvoke $r26.<java.util.List: int size()>();

        if i35 <= 0 goto label11;

        $r27 = newarray (java.lang.String)[i35];

        $r2.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions> = $r27;

        $r28 = newarray (int)[i35];

        $r2.<android.content.pm.PackageInfo: int[] requestedPermissionsFlags> = $r28;

        i36 = 0;

     label09:
        if i36 >= i35 goto label11;

        $r29 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: java.util.List getRequestedPermissions()>();

        $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(i36);

        r65 = (java.lang.String) $r30;

        $r31 = $r2.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        $r31[i36] = r65;

        r66 = $r2.<android.content.pm.PackageInfo: int[] requestedPermissionsFlags>;

        $i19 = r66[i36];

        $i20 = $i19 | 1;

        r66[i36] = $i20;

        if r0 == null goto label10;

        $z5 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r65);

        if $z5 == 0 goto label10;

        r67 = $r2.<android.content.pm.PackageInfo: int[] requestedPermissionsFlags>;

        $i21 = r67[i36];

        $i22 = $i21 | 2;

        r67[i36] = $i22;

     label10:
        i36 = i36 + 1;

        goto label09;

     label11:
        if r1 == null goto label16;

        $r19 = new java.io.File;

        $r20 = r1.<android.apex.ApexInfo: java.lang.String modulePath>;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>($r20);

        $r21 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r22 = virtualinvoke $r19.<java.io.File: java.lang.String getPath()>();

        $r21.<android.content.pm.ApplicationInfo: java.lang.String sourceDir> = $r22;

        $r23 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r24 = virtualinvoke $r19.<java.io.File: java.lang.String getPath()>();

        $r23.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir> = $r24;

        $z3 = r1.<android.apex.ApexInfo: boolean isFactory>;

        if $z3 == 0 goto label12;

        r69 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i17 = r69.<android.content.pm.ApplicationInfo: int flags>;

        $i18 = $i17 | 1;

        r69.<android.content.pm.ApplicationInfo: int flags> = $i18;

        goto label13;

     label12:
        r70 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i11 = r70.<android.content.pm.ApplicationInfo: int flags>;

        $i12 = $i11 & -2;

        r70.<android.content.pm.ApplicationInfo: int flags> = $i12;

     label13:
        $z4 = r1.<android.apex.ApexInfo: boolean isActive>;

        if $z4 == 0 goto label14;

        r71 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i15 = r71.<android.content.pm.ApplicationInfo: int flags>;

        $i16 = $i15 | 8388608;

        r71.<android.content.pm.ApplicationInfo: int flags> = $i16;

        goto label15;

     label14:
        r72 = $r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i13 = r72.<android.content.pm.ApplicationInfo: int flags>;

        $i14 = $i13 & -8388609;

        r72.<android.content.pm.ApplicationInfo: int flags> = $i14;

     label15:
        $r2.<android.content.pm.PackageInfo: boolean isApex> = 1;

     label16:
        r73 = interfaceinvoke r54.<android.content.pm.parsing.ParsingPackageRead: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $i37 = i0 & 64;

        if $i37 == 0 goto label18;

        $z1 = virtualinvoke r73.<android.content.pm.PackageParser$SigningDetails: boolean hasPastSigningCertificates()>();

        if $z1 == 0 goto label17;

        $r15 = newarray (android.content.pm.Signature)[1];

        $r2.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures> = $r15;

        $r18 = $r2.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        $r16 = r73.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] pastSigningCertificates>;

        $r17 = $r16[0];

        $r18[0] = $r17;

        goto label18;

     label17:
        $z2 = virtualinvoke r73.<android.content.pm.PackageParser$SigningDetails: boolean hasSignatures()>();

        if $z2 == 0 goto label18;

        $r11 = r73.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        i38 = lengthof $r11;

        $r12 = newarray (android.content.pm.Signature)[i38];

        $r2.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures> = $r12;

        $r14 = r73.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r13 = $r2.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, i38);

     label18:
        $i39 = 134217728 & i0;

        if $i39 == 0 goto label20;

        $r9 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if r73 == $r9 goto label19;

        $r10 = new android.content.pm.SigningInfo;

        specialinvoke $r10.<android.content.pm.SigningInfo: void <init>(android.content.pm.PackageParser$SigningDetails)>(r73);

        $r2.<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo> = $r10;

        goto label20;

     label19:
        $r2.<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo> = null;

     label20:
        return $r2;
    }

    public static java.io.File getCredentialProtectedDataDir(android.content.pm.parsing.ParsingPackageRead, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        int i0;
        java.lang.String $r1, $r2;
        java.io.File $r3;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getVolumeUuid()>();

        $r2 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getPackageName()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataUserCePackageDirectory(java.lang.String,int,java.lang.String)>($r1, i0, $r2);

        return $r3;
    }

    public static java.io.File getDataDir(android.content.pm.parsing.ParsingPackageRead, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        int i0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;
        java.io.File $r3, $r4, $r5;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        i0 := @parameter1: int;

        $r1 = "android";

        $r2 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        return $r5;

     label1:
        $z1 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: boolean isDefaultToDeviceProtectedStorage()>();

        if $z1 == 0 goto label2;

        $r4 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: java.io.File getDeviceProtectedDataDir(android.content.pm.parsing.ParsingPackageRead,int)>(r0, i0);

        return $r4;

     label2:
        $r3 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: java.io.File getCredentialProtectedDataDir(android.content.pm.parsing.ParsingPackageRead,int)>(r0, i0);

        return $r3;
    }

    public static java.io.File getDeviceProtectedDataDir(android.content.pm.parsing.ParsingPackageRead, int)
    {
        android.content.pm.parsing.ParsingPackageRead r0;
        int i0;
        java.lang.String $r1, $r2;
        java.io.File $r3;

        r0 := @parameter0: android.content.pm.parsing.ParsingPackageRead;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getVolumeUuid()>();

        $r2 = interfaceinvoke r0.<android.content.pm.parsing.ParsingPackageRead: java.lang.String getPackageName()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataUserDePackageDirectory(java.lang.String,int,java.lang.String)>($r1, i0, $r2);

        return $r3;
    }
}
