public class android.content.pm.split.SplitAssetDependencyLoader extends android.content.pm.split.SplitDependencyLoader implements android.content.pm.split.SplitAssetLoader
{
    private final android.content.res.AssetManager[] mCachedAssetManagers;
    private final android.content.res.ApkAssets[][] mCachedSplitApks;
    private final int mFlags;
    private final java.lang.String[] mSplitPaths;

    public void <init>(android.content.pm.PackageParser$PackageLite, android.util.SparseArray, int)
    {
        android.content.pm.split.SplitAssetDependencyLoader r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String[] $r1, $r3, $r4, $r5, r10, r11;
        java.lang.String $r2;
        android.content.res.ApkAssets[][] $r6;
        android.content.res.AssetManager[] $r7;
        android.content.pm.PackageParser$PackageLite r8;
        android.util.SparseArray r9;

        r0 := @this: android.content.pm.split.SplitAssetDependencyLoader;

        r8 := @parameter0: android.content.pm.PackageParser$PackageLite;

        r9 := @parameter1: android.util.SparseArray;

        i0 := @parameter2: int;

        specialinvoke r0.<android.content.pm.split.SplitDependencyLoader: void <init>(android.util.SparseArray)>(r9);

        $r1 = r8.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        $i1 = lengthof $r1;

        $i2 = $i1 + 1;

        r10 = newarray (java.lang.String)[$i2];

        r0.<android.content.pm.split.SplitAssetDependencyLoader: java.lang.String[] mSplitPaths> = r10;

        $r2 = r8.<android.content.pm.PackageParser$PackageLite: java.lang.String baseCodePath>;

        r10[0] = $r2;

        $r5 = r8.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        $r4 = r0.<android.content.pm.split.SplitAssetDependencyLoader: java.lang.String[] mSplitPaths>;

        $r3 = r8.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        $i3 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 1, $i3);

        r0.<android.content.pm.split.SplitAssetDependencyLoader: int mFlags> = i0;

        r11 = r0.<android.content.pm.split.SplitAssetDependencyLoader: java.lang.String[] mSplitPaths>;

        $i4 = lengthof r11;

        $r6 = newarray (android.content.res.ApkAssets[])[$i4];

        r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.ApkAssets[][] mCachedSplitApks> = $r6;

        $i5 = lengthof r11;

        $r7 = newarray (android.content.res.AssetManager)[$i5];

        r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager[] mCachedAssetManagers> = $r7;

        return;
    }

    private static android.content.res.AssetManager createAssetManagerWithAssets(android.content.res.ApkAssets[])
    {
        android.content.res.ApkAssets[] r0;
        android.content.res.AssetManager $r2;
        int $i0;

        r0 := @parameter0: android.content.res.ApkAssets[];

        $r2 = new android.content.res.AssetManager;

        specialinvoke $r2.<android.content.res.AssetManager: void <init>()>();

        $i0 = <android.os.Build$VERSION: int RESOURCES_SDK_INT>;

        virtualinvoke $r2.<android.content.res.AssetManager: void setConfiguration(int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>(0, 0, null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $i0);

        virtualinvoke $r2.<android.content.res.AssetManager: void setApkAssets(android.content.res.ApkAssets[],boolean)>(r0, 0);

        return $r2;
    }

    private static android.content.res.ApkAssets loadApkAssets(java.lang.String, int) throws android.content.pm.PackageParser$PackageParserException
    {
        java.lang.String r0, $r6, $r12;
        int i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r8;
        android.content.pm.PackageParser$PackageParserException $r5, $r11;
        java.lang.Throwable $r7;
        android.content.res.ApkAssets r14;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        $z0 = staticinvoke <android.content.pm.PackageParser: boolean isApkPath(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package file: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = new android.content.pm.PackageParser$PackageParserException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.content.pm.PackageParser$PackageParserException: void <init>(int,java.lang.String)>(-100, $r6);

        throw $r5;

     label2:
        r14 = staticinvoke <android.content.res.ApkAssets: android.content.res.ApkAssets loadFromPath(java.lang.String)>(r0);

     label3:
        return r14;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load APK at path ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = new android.content.pm.PackageParser$PackageParserException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.content.pm.PackageParser$PackageParserException: void <init>(int,java.lang.String,java.lang.Throwable)>(-2, $r12, $r7);

        throw $r11;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void close() throws java.lang.Exception
    {
        android.content.pm.split.SplitAssetDependencyLoader r0;
        android.content.res.AssetManager[] r1;
        int i0, i1;
        android.content.res.AssetManager $r2;

        r0 := @this: android.content.pm.split.SplitAssetDependencyLoader;

        r1 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager[] mCachedAssetManagers>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void constructSplit(int, int[], int) throws android.content.pm.PackageParser$PackageParserException
    {
        android.content.pm.split.SplitAssetDependencyLoader r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7;
        int[] r1;
        java.util.ArrayList $r3;
        java.lang.String[] $r4, $r15;
        java.lang.String $r5, $r16;
        android.content.res.ApkAssets $r6, $r17;
        android.content.res.ApkAssets[][] $r7, $r11, $r18;
        android.content.res.ApkAssets[] $r8, $r10, $r12, $r19;
        java.lang.Object[] $r9;
        android.content.res.AssetManager[] $r13;
        android.content.res.AssetManager $r14;

        r0 := @this: android.content.pm.split.SplitAssetDependencyLoader;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i6 := @parameter2: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        if i6 < 0 goto label1;

        $r18 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.ApkAssets[][] mCachedSplitApks>;

        $r19 = $r18[i6];

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, $r19);

     label1:
        $r4 = r0.<android.content.pm.split.SplitAssetDependencyLoader: java.lang.String[] mSplitPaths>;

        $r5 = $r4[i0];

        $i3 = r0.<android.content.pm.split.SplitAssetDependencyLoader: int mFlags>;

        $r6 = staticinvoke <android.content.pm.split.SplitAssetDependencyLoader: android.content.res.ApkAssets loadApkAssets(java.lang.String,int)>($r5, $i3);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i1 = lengthof r1;

        i7 = 0;

     label2:
        if i7 >= i1 goto label3;

        i2 = r1[i7];

        $r15 = r0.<android.content.pm.split.SplitAssetDependencyLoader: java.lang.String[] mSplitPaths>;

        $r16 = $r15[i2];

        $i5 = r0.<android.content.pm.split.SplitAssetDependencyLoader: int mFlags>;

        $r17 = staticinvoke <android.content.pm.split.SplitAssetDependencyLoader: android.content.res.ApkAssets loadApkAssets(java.lang.String,int)>($r16, $i5);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        i7 = i7 + 1;

        goto label2;

     label3:
        $r7 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.ApkAssets[][] mCachedSplitApks>;

        $i4 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r8 = newarray (android.content.res.ApkAssets)[$i4];

        $r9 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (android.content.res.ApkAssets[]) $r9;

        $r7[i0] = $r10;

        $r13 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager[] mCachedAssetManagers>;

        $r11 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.ApkAssets[][] mCachedSplitApks>;

        $r12 = $r11[i0];

        $r14 = staticinvoke <android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager createAssetManagerWithAssets(android.content.res.ApkAssets[])>($r12);

        $r13[i0] = $r14;

        return;
    }

    public android.content.res.AssetManager getBaseAssetManager() throws android.content.pm.PackageParser$PackageParserException
    {
        android.content.pm.split.SplitAssetDependencyLoader r0;
        android.content.res.AssetManager[] $r1;
        android.content.res.AssetManager $r2;

        r0 := @this: android.content.pm.split.SplitAssetDependencyLoader;

        virtualinvoke r0.<android.content.pm.split.SplitAssetDependencyLoader: void loadDependenciesForSplit(int)>(0);

        $r1 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager[] mCachedAssetManagers>;

        $r2 = $r1[0];

        return $r2;
    }

    public android.content.res.AssetManager getSplitAssetManager(int) throws android.content.pm.PackageParser$PackageParserException
    {
        android.content.pm.split.SplitAssetDependencyLoader r0;
        int i0, $i1, $i2;
        android.content.res.AssetManager[] $r1;
        android.content.res.AssetManager $r2;

        r0 := @this: android.content.pm.split.SplitAssetDependencyLoader;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        virtualinvoke r0.<android.content.pm.split.SplitAssetDependencyLoader: void loadDependenciesForSplit(int)>($i1);

        $r1 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager[] mCachedAssetManagers>;

        $i2 = i0 + 1;

        $r2 = $r1[$i2];

        return $r2;
    }

    protected boolean isSplitCached(int)
    {
        android.content.pm.split.SplitAssetDependencyLoader r0;
        int i0;
        android.content.res.AssetManager[] $r1;
        android.content.res.AssetManager $r2;
        boolean z0;

        r0 := @this: android.content.pm.split.SplitAssetDependencyLoader;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager[] mCachedAssetManagers>;

        $r2 = $r1[i0];

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }
}
