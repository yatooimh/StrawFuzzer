public final class android.content.res.AssetManager$AssetInputStream extends java.io.InputStream
{
    private long mAssetNativePtr;
    private long mLength;
    private long mMarkPos;
    final android.content.res.AssetManager this$0;

    private void <init>(android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager$AssetInputStream r0;
        android.content.res.AssetManager r1;
        long l0, $l1;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        r1 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        r0.<android.content.res.AssetManager$AssetInputStream: android.content.res.AssetManager this$0> = r1;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr> = l0;

        $l1 = staticinvoke <android.content.res.AssetManager: long access$600(long)>(l0);

        r0.<android.content.res.AssetManager$AssetInputStream: long mLength> = $l1;

        return;
    }

    void <init>(android.content.res.AssetManager, long, android.content.res.AssetManager$1)
    {
        android.content.res.AssetManager$AssetInputStream r0;
        android.content.res.AssetManager r1;
        long l0;
        android.content.res.AssetManager$1 r2;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        r1 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        r2 := @parameter2: android.content.res.AssetManager$1;

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,long)>(r1, l0);

        return;
    }

    private void ensureOpen()
    {
        android.content.res.AssetManager$AssetInputStream r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        $l0 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AssetInputStream is closed");

        throw $r1;
    }

    public final int available() throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        long l0, $l1;
        byte $b2;
        int i3;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void ensureOpen()>();

        $l1 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        l0 = staticinvoke <android.content.res.AssetManager: long access$1000(long)>($l1);

        $b2 = l0 cmp 2147483647L;

        if $b2 <= 0 goto label1;

        i3 = 2147483647;

        goto label2;

     label1:
        i3 = (int) l0;

     label2:
        return i3;
    }

    public final void close() throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        long l0, $l3;
        android.content.res.AssetManager r1, $r3;
        byte $b1;
        int $i2;
        java.lang.Throwable $r4;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        l0 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label6;

        staticinvoke <android.content.res.AssetManager: void access$1100(long)>(l0);

        r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr> = 0L;

        r1 = r0.<android.content.res.AssetManager$AssetInputStream: android.content.res.AssetManager this$0>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.content.res.AssetManager$AssetInputStream: android.content.res.AssetManager this$0>;

        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <android.content.res.AssetManager: void access$1200(android.content.res.AssetManager,long)>($r3, $l3);

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.content.res.AssetManager$AssetInputStream r0;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        virtualinvoke r0.<android.content.res.AssetManager$AssetInputStream: void close()>();

        return;
    }

    public final int getAssetInt()
    {
        android.content.res.AssetManager$AssetInputStream r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final long getNativeAsset()
    {
        android.content.res.AssetManager$AssetInputStream r0;
        long $l0;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        $l0 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        return $l0;
    }

    public final void mark(int)
    {
        android.content.res.AssetManager$AssetInputStream r0;
        int i0;
        long $l1, $l2;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void ensureOpen()>();

        $l1 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        $l2 = staticinvoke <android.content.res.AssetManager: long access$900(long,long,int)>($l1, 0L, 0);

        r0.<android.content.res.AssetManager$AssetInputStream: long mMarkPos> = $l2;

        return;
    }

    public final boolean markSupported()
    {
        android.content.res.AssetManager$AssetInputStream r0;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        return 1;
    }

    public final int read() throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        long $l0;
        int $i1;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void ensureOpen()>();

        $l0 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        $i1 = staticinvoke <android.content.res.AssetManager: int access$700(long)>($l0);

        return $i1;
    }

    public final int read(byte[]) throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        byte[] r1;
        int $i0, $i2;
        long $l1;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void ensureOpen()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "b");

        $l1 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        $i0 = lengthof r1;

        $i2 = staticinvoke <android.content.res.AssetManager: int access$800(long,byte[],int,int)>($l1, r1, 0, $i0);

        return $i2;
    }

    public final int read(byte[], int, int) throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        byte[] r1;
        int i0, i1, $i3;
        long $l2;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void ensureOpen()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "b");

        $l2 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        $i3 = staticinvoke <android.content.res.AssetManager: int access$800(long,byte[],int,int)>($l2, r1, i0, i1);

        return $i3;
    }

    public final void reset() throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        long $l0, $l1;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void ensureOpen()>();

        $l1 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        $l0 = r0.<android.content.res.AssetManager$AssetInputStream: long mMarkPos>;

        staticinvoke <android.content.res.AssetManager: long access$900(long,long,int)>($l1, $l0, -1);

        return;
    }

    public final long skip(long) throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        long l0, l1, l2, $l3, $l4, $l7, l9;
        byte $b5, $b6;

        r0 := @this: android.content.res.AssetManager$AssetInputStream;

        l0 := @parameter0: long;

        specialinvoke r0.<android.content.res.AssetManager$AssetInputStream: void ensureOpen()>();

        $l3 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        l1 = staticinvoke <android.content.res.AssetManager: long access$900(long,long,int)>($l3, 0L, 0);

        l2 = r0.<android.content.res.AssetManager$AssetInputStream: long mLength>;

        l9 = l0;

        $l4 = l1 + l0;

        $b5 = $l4 cmp l2;

        if $b5 <= 0 goto label1;

        l9 = l2 - l1;

     label1:
        $b6 = l9 cmp 0L;

        if $b6 <= 0 goto label2;

        $l7 = r0.<android.content.res.AssetManager$AssetInputStream: long mAssetNativePtr>;

        staticinvoke <android.content.res.AssetManager: long access$900(long,long,int)>($l7, l9, 0);

     label2:
        return l9;
    }
}
