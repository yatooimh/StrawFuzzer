public final class android.content.res.AssetManager extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final int ACCESS_BUFFER;
    public static final int ACCESS_RANDOM;
    public static final int ACCESS_STREAMING;
    public static final int ACCESS_UNKNOWN;
    private static final boolean DEBUG_REFS;
    private static final java.lang.String FRAMEWORK_APK_PATH;
    private static final java.lang.String TAG;
    private static final android.content.res.ApkAssets[] sEmptyApkAssets;
    private static final java.lang.Object sSync;
    static android.content.res.AssetManager sSystem;
    private static android.content.res.ApkAssets[] sSystemApkAssets;
    private static android.util.ArraySet sSystemApkAssetsSet;
    private android.content.res.ApkAssets[] mApkAssets;
    private android.content.res.loader.ResourcesLoader[] mLoaders;
    private int mNumRefs;
    private long mObject;
    private final long[] mOffsets;
    private boolean mOpen;
    private java.util.HashMap mRefStacks;
    private final android.util.TypedValue mValue;

    static void <clinit>()
    {
        java.lang.Object $r0;
        android.content.res.ApkAssets[] $r1, $r2;

        <android.content.res.AssetManager: java.lang.String TAG> = "AssetManager";

        <android.content.res.AssetManager: java.lang.String FRAMEWORK_APK_PATH> = "/system/framework/framework-res.apk";

        <android.content.res.AssetManager: boolean DEBUG_REFS> = 0;

        <android.content.res.AssetManager: int ACCESS_UNKNOWN> = 0;

        <android.content.res.AssetManager: int ACCESS_STREAMING> = 2;

        <android.content.res.AssetManager: int ACCESS_RANDOM> = 1;

        <android.content.res.AssetManager: int ACCESS_BUFFER> = 3;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.content.res.AssetManager: java.lang.Object sSync> = $r0;

        $r1 = newarray (android.content.res.ApkAssets)[0];

        <android.content.res.AssetManager: android.content.res.ApkAssets[] sEmptyApkAssets> = $r1;

        <android.content.res.AssetManager: android.content.res.AssetManager sSystem> = null;

        $r2 = newarray (android.content.res.ApkAssets)[0];

        <android.content.res.AssetManager: android.content.res.ApkAssets[] sSystemApkAssets> = $r2;

        return;
    }

    public void <init>()
    {
        android.content.res.AssetManager r0;
        java.lang.Object r1;
        android.util.TypedValue $r2;
        long[] $r3;
        long $l0;
        java.lang.Throwable $r4;
        android.content.res.ApkAssets[] r5;

        r0 := @this: android.content.res.AssetManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.TypedValue;

        specialinvoke $r2.<android.util.TypedValue: void <init>()>();

        r0.<android.content.res.AssetManager: android.util.TypedValue mValue> = $r2;

        $r3 = newarray (long)[2];

        r0.<android.content.res.AssetManager: long[] mOffsets> = $r3;

        r0.<android.content.res.AssetManager: boolean mOpen> = 1;

        r0.<android.content.res.AssetManager: int mNumRefs> = 1;

        r1 = <android.content.res.AssetManager: java.lang.Object sSync>;

        entermonitor r1;

     label1:
        staticinvoke <android.content.res.AssetManager: void createSystemAssetsInZygoteLocked(boolean,java.lang.String)>(0, "/system/framework/framework-res.apk");

        r5 = <android.content.res.AssetManager: android.content.res.ApkAssets[] sSystemApkAssets>;

        exitmonitor r1;

     label2:
        $l0 = staticinvoke <android.content.res.AssetManager: long nativeCreate()>();

        r0.<android.content.res.AssetManager: long mObject> = $l0;

        virtualinvoke r0.<android.content.res.AssetManager: void setApkAssets(android.content.res.ApkAssets[],boolean)>(r5, 0);

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void <init>(boolean)
    {
        android.content.res.AssetManager r0;
        boolean z0;
        android.util.TypedValue $r1;
        long[] $r2;
        long $l0;

        r0 := @this: android.content.res.AssetManager;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.TypedValue;

        specialinvoke $r1.<android.util.TypedValue: void <init>()>();

        r0.<android.content.res.AssetManager: android.util.TypedValue mValue> = $r1;

        $r2 = newarray (long)[2];

        r0.<android.content.res.AssetManager: long[] mOffsets> = $r2;

        r0.<android.content.res.AssetManager: boolean mOpen> = 1;

        r0.<android.content.res.AssetManager: int mNumRefs> = 1;

        $l0 = staticinvoke <android.content.res.AssetManager: long nativeCreate()>();

        r0.<android.content.res.AssetManager: long mObject> = $l0;

        return;
    }

    void <init>(boolean, android.content.res.AssetManager$1)
    {
        android.content.res.AssetManager r0;
        boolean z0;
        android.content.res.AssetManager$1 r1;

        r0 := @this: android.content.res.AssetManager;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.content.res.AssetManager$1;

        specialinvoke r0.<android.content.res.AssetManager: void <init>(boolean)>(z0);

        return;
    }

    static long access$1000(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.content.res.AssetManager: long nativeAssetGetRemainingLength(long)>(l0);

        return $l1;
    }

    static android.content.res.ApkAssets[] access$102(android.content.res.AssetManager, android.content.res.ApkAssets[])
    {
        android.content.res.AssetManager r0;
        android.content.res.ApkAssets[] r1;

        r0 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: android.content.res.ApkAssets[];

        r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets> = r1;

        return r1;
    }

    static void access$1100(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.content.res.AssetManager: void nativeAssetDestroy(long)>(l0);

        return;
    }

    static void access$1200(android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager r0;
        long l0;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>(l0);

        return;
    }

    static long access$200(android.content.res.AssetManager)
    {
        android.content.res.AssetManager r0;
        long $l0;

        r0 := @parameter0: android.content.res.AssetManager;

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        return $l0;
    }

    static void access$300(long, android.content.res.ApkAssets[], boolean)
    {
        long l0;
        android.content.res.ApkAssets[] r0;
        boolean z0;

        l0 := @parameter0: long;

        r0 := @parameter1: android.content.res.ApkAssets[];

        z0 := @parameter2: boolean;

        staticinvoke <android.content.res.AssetManager: void nativeSetApkAssets(long,android.content.res.ApkAssets[],boolean)>(l0, r0, z0);

        return;
    }

    static android.content.res.loader.ResourcesLoader[] access$402(android.content.res.AssetManager, android.content.res.loader.ResourcesLoader[])
    {
        android.content.res.AssetManager r0;
        android.content.res.loader.ResourcesLoader[] r1;

        r0 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: android.content.res.loader.ResourcesLoader[];

        r0.<android.content.res.AssetManager: android.content.res.loader.ResourcesLoader[] mLoaders> = r1;

        return r1;
    }

    static long access$600(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.content.res.AssetManager: long nativeAssetGetLength(long)>(l0);

        return $l1;
    }

    static int access$700(long)
    {
        long l0;
        int $i1;

        l0 := @parameter0: long;

        $i1 = staticinvoke <android.content.res.AssetManager: int nativeAssetReadChar(long)>(l0);

        return $i1;
    }

    static int access$800(long, byte[], int, int)
    {
        long l0;
        byte[] r0;
        int i1, i2, $i3;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <android.content.res.AssetManager: int nativeAssetRead(long,byte[],int,int)>(l0, r0, i1, i2);

        return $i3;
    }

    static long access$900(long, long, int)
    {
        long l0, l1, $l3;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $l3 = staticinvoke <android.content.res.AssetManager: long nativeAssetSeek(long,long,int)>(l0, l1, i2);

        return $l3;
    }

    private int addAssetPathInternal(java.lang.String, boolean, boolean)
    {
        android.content.res.AssetManager r0;
        boolean z0, z1, $z2;
        int i0, $i1, i2, $i4, $i6;
        android.content.res.ApkAssets[] $r2, $r9, $r18, r20;
        java.lang.String $r4, $r5, $r8, $r11, r14;
        android.content.res.ApkAssets $r10, r16;
        java.lang.Throwable $r12, $r13;
        java.lang.StringBuilder r15;
        byte b3;
        java.lang.Object[] $r19;
        long $l5;

        r0 := @this: android.content.res.AssetManager;

        r14 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "path");

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureOpenLocked()>();

        $r2 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        i0 = lengthof $r2;

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label07;

     label04:
        $r9 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        $r10 = $r9[i2];

        $r11 = virtualinvoke $r10.<android.content.res.ApkAssets: java.lang.String getAssetPath()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z2 == 0 goto label06;

        exitmonitor r0;

     label05:
        $i1 = i2 + 1;

        return $i1;

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        if z0 == 0 goto label11;

     label08:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/data/resource-cache/");

        $r4 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int)>(1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(47, 64);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@idmap");

        $r8 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r16 = staticinvoke <android.content.res.ApkAssets: android.content.res.ApkAssets loadOverlayFromPath(java.lang.String,int)>($r8, 0);

     label09:
        goto label14;

     label10:
        $r13 := @caughtexception;

        goto label18;

     label11:
        if z1 == 0 goto label12;

        b3 = 2;

        goto label13;

     label12:
        b3 = 0;

     label13:
        r16 = staticinvoke <android.content.res.ApkAssets: android.content.res.ApkAssets loadFromPath(java.lang.String,int)>(r14, b3);

     label14:
        $r18 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        $i4 = i0 + 1;

        $r19 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r18, $i4);

        r20 = (android.content.res.ApkAssets[]) $r19;

        r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets> = r20;

     label15:
        r20[i0] = r16;

     label16:
        $l5 = r0.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeSetApkAssets(long,android.content.res.ApkAssets[],boolean)>($l5, r20, 1);

        specialinvoke r0.<android.content.res.AssetManager: void invalidateCachesLocked(int)>(-1);

        exitmonitor r0;

     label17:
        $i6 = i0 + 1;

        return $i6;

     label18:
        exitmonitor r0;

     label19:
        return 0;

     label20:
        $r12 := @caughtexception;

     label21:
        exitmonitor r0;

     label22:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.io.IOException from label13 to label14 with label10;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public static void createSystemAssetsInZygoteLocked(boolean, java.lang.String)
    {
        boolean z0;
        java.util.ArrayList r0;
        int i0, $i1, i2;
        android.content.res.AssetManager $r1, $r7, $r9, r17;
        android.content.res.ApkAssets $r2, $r11;
        com.android.internal.content.om.OverlayConfig $r3;
        android.content.res.ApkAssets[] $r4, $r6, $r8;
        java.lang.Object[] $r5;
        java.lang.String $r10, r14;
        java.lang.Throwable $r12;
        java.lang.IllegalStateException $r13;
        java.lang.String[] r15;
        android.util.ArraySet r16;

        z0 := @parameter0: boolean;

        r14 := @parameter1: java.lang.String;

        $r1 = <android.content.res.AssetManager: android.content.res.AssetManager sSystem>;

        if $r1 == null goto label1;

        if z0 != 0 goto label1;

        return;

     label1:
        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <android.content.res.ApkAssets: android.content.res.ApkAssets loadFromPath(java.lang.String,int)>(r14, 1);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r3 = staticinvoke <com.android.internal.content.om.OverlayConfig: com.android.internal.content.om.OverlayConfig getZygoteInstance()>();

        r15 = virtualinvoke $r3.<com.android.internal.content.om.OverlayConfig: java.lang.String[] createImmutableFrameworkIdmapsInZygote()>();

        i0 = lengthof r15;

     label2:
        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

     label4:
        $r10 = r15[i2];

        $r11 = staticinvoke <android.content.res.ApkAssets: android.content.res.ApkAssets loadOverlayFromPath(java.lang.String,int)>($r10, 1);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        r16 = new android.util.ArraySet;

        specialinvoke r16.<android.util.ArraySet: void <init>(java.util.Collection)>(r0);

        <android.content.res.AssetManager: android.util.ArraySet sSystemApkAssetsSet> = r16;

        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $r4 = newarray (android.content.res.ApkAssets)[$i1];

        $r5 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (android.content.res.ApkAssets[]) $r5;

        <android.content.res.AssetManager: android.content.res.ApkAssets[] sSystemApkAssets> = $r6;

        $r7 = <android.content.res.AssetManager: android.content.res.AssetManager sSystem>;

        if $r7 != null goto label7;

        r17 = new android.content.res.AssetManager;

        specialinvoke r17.<android.content.res.AssetManager: void <init>(boolean)>(1);

        <android.content.res.AssetManager: android.content.res.AssetManager sSystem> = r17;

     label7:
        $r9 = <android.content.res.AssetManager: android.content.res.AssetManager sSystem>;

        $r8 = <android.content.res.AssetManager: android.content.res.ApkAssets[] sSystemApkAssets>;

        virtualinvoke $r9.<android.content.res.AssetManager: void setApkAssets(android.content.res.ApkAssets[],boolean)>($r8, 0);

     label8:
        return;

     label9:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create system AssetManager", $r12);

        throw $r13;

        catch java.io.IOException from label1 to label2 with label9;
        catch java.io.IOException from label4 to label5 with label9;
        catch java.io.IOException from label6 to label7 with label9;
        catch java.io.IOException from label7 to label8 with label9;
    }

    private void decRefsLocked(long)
    {
        android.content.res.AssetManager r0;
        int i0, $i1;
        byte $b2;
        android.content.res.ApkAssets[] $r1;
        long l3, l4;

        r0 := @this: android.content.res.AssetManager;

        l3 := @parameter0: long;

        $i1 = r0.<android.content.res.AssetManager: int mNumRefs>;

        i0 = $i1 - 1;

        r0.<android.content.res.AssetManager: int mNumRefs> = i0;

        if i0 != 0 goto label1;

        l4 = r0.<android.content.res.AssetManager: long mObject>;

        $b2 = l4 cmp 0L;

        if $b2 == 0 goto label1;

        staticinvoke <android.content.res.AssetManager: void nativeDestroy(long)>(l4);

        r0.<android.content.res.AssetManager: long mObject> = 0L;

        $r1 = <android.content.res.AssetManager: android.content.res.ApkAssets[] sEmptyApkAssets>;

        r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets> = $r1;

     label1:
        return;
    }

    private void ensureOpenLocked()
    {
        android.content.res.AssetManager r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.content.res.AssetManager;

        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("AssetManager has been closed");

        throw $r1;
    }

    private void ensureValidLocked()
    {
        android.content.res.AssetManager r0;
        long $l0;
        byte $b1;
        java.lang.RuntimeException $r1;

        r0 := @this: android.content.res.AssetManager;

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("AssetManager has been destroyed");

        throw $r1;
    }

    public static native java.lang.String getAssetAllocations();

    public static native int getGlobalAssetCount();

    public static native int getGlobalAssetManagerCount();

    public static android.content.res.AssetManager getSystem()
    {
        java.lang.Object r0;
        java.lang.Throwable $r1;
        android.content.res.AssetManager r2;

        r0 = <android.content.res.AssetManager: java.lang.Object sSync>;

        entermonitor r0;

     label1:
        staticinvoke <android.content.res.AssetManager: void createSystemAssetsInZygoteLocked(boolean,java.lang.String)>(0, "/system/framework/framework-res.apk");

        r2 = <android.content.res.AssetManager: android.content.res.AssetManager sSystem>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void incRefsLocked(long)
    {
        android.content.res.AssetManager r0;
        long l0;
        int $i1, $i2;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        $i1 = r0.<android.content.res.AssetManager: int mNumRefs>;

        $i2 = $i1 + 1;

        r0.<android.content.res.AssetManager: int mNumRefs> = $i2;

        return;
    }

    private void invalidateCachesLocked(int)
    {
        android.content.res.AssetManager r0;
        int i0;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        return;
    }

    private static native void nativeApplyStyle(long, long, int, int, long, int[], long, long);

    private static native void nativeAssetDestroy(long);

    private static native long nativeAssetGetLength(long);

    private static native long nativeAssetGetRemainingLength(long);

    private static native int nativeAssetRead(long, byte[], int, int);

    private static native int nativeAssetReadChar(long);

    private static native long nativeAssetSeek(long, long, int);

    private static native int[] nativeAttributeResolutionStack(long, long, int, int, int);

    private static native boolean nativeContainsAllocatedTable(long);

    private static native long nativeCreate();

    private static native java.lang.String[] nativeCreateIdmapsForStaticOverlaysTargetingAndroid();

    private static native void nativeDestroy(long);

    private static native android.util.SparseArray nativeGetAssignedPackageIdentifiers(long, boolean, boolean);

    private static native java.lang.String nativeGetLastResourceResolution(long);

    private static native java.lang.String[] nativeGetLocales(long, boolean);

    private static native java.util.Map nativeGetOverlayableMap(long, java.lang.String);

    private static native java.lang.String nativeGetOverlayablesToString(long, java.lang.String);

    private static native int nativeGetResourceArray(long, int, int[]);

    private static native int nativeGetResourceArraySize(long, int);

    private static native int nativeGetResourceBagValue(long, int, int, android.util.TypedValue);

    private static native java.lang.String nativeGetResourceEntryName(long, int);

    private static native int nativeGetResourceIdentifier(long, java.lang.String, java.lang.String, java.lang.String);

    private static native int[] nativeGetResourceIntArray(long, int);

    private static native java.lang.String nativeGetResourceName(long, int);

    private static native java.lang.String nativeGetResourcePackageName(long, int);

    private static native java.lang.String[] nativeGetResourceStringArray(long, int);

    private static native int[] nativeGetResourceStringArrayInfo(long, int);

    private static native java.lang.String nativeGetResourceTypeName(long, int);

    private static native int nativeGetResourceValue(long, int, short, android.util.TypedValue, boolean);

    private static native android.content.res.Configuration[] nativeGetSizeConfigurations(long);

    private static native int[] nativeGetStyleAttributes(long, int);

    private static native java.lang.String[] nativeList(long, java.lang.String) throws java.io.IOException;

    private static native long nativeOpenAsset(long, java.lang.String, int);

    private static native android.os.ParcelFileDescriptor nativeOpenAssetFd(long, java.lang.String, long[]) throws java.io.IOException;

    private static native long nativeOpenNonAsset(long, int, java.lang.String, int);

    private static native android.os.ParcelFileDescriptor nativeOpenNonAssetFd(long, int, java.lang.String, long[]) throws java.io.IOException;

    private static native long nativeOpenXmlAsset(long, int, java.lang.String);

    private static native long nativeOpenXmlAssetFd(long, int, java.io.FileDescriptor);

    private static native boolean nativeResolveAttrs(long, long, int, int, int[], int[], int[], int[]);

    private static native boolean nativeRetrieveAttributes(long, long, int[], int[], int[]);

    private static native void nativeSetApkAssets(long, android.content.res.ApkAssets[], boolean);

    private static native void nativeSetConfiguration(long, int, int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);

    private static native void nativeSetResourceResolutionLoggingEnabled(long, boolean);

    private static native void nativeThemeApplyStyle(long, long, int, boolean);

    static native void nativeThemeClear(long);

    private static native void nativeThemeCopy(long, long, long, long);

    private static native long nativeThemeCreate(long);

    private static native void nativeThemeDestroy(long);

    private static native void nativeThemeDump(long, long, int, java.lang.String, java.lang.String);

    private static native int nativeThemeGetAttributeValue(long, long, int, android.util.TypedValue, boolean);

    static native int nativeThemeGetChangingConfigurations(long);

    public int addAssetPath(java.lang.String)
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.content.res.AssetManager: int addAssetPathInternal(java.lang.String,boolean,boolean)>(r1, 0, 0);

        return $i0;
    }

    public int addAssetPathAsSharedLibrary(java.lang.String)
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.content.res.AssetManager: int addAssetPathInternal(java.lang.String,boolean,boolean)>(r1, 0, 1);

        return $i0;
    }

    public int addOverlayPath(java.lang.String)
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.content.res.AssetManager: int addAssetPathInternal(java.lang.String,boolean,boolean)>(r1, 1, 0);

        return $i0;
    }

    void applyStyle(long, int, int, android.content.res.XmlBlock$Parser, int[], long, long)
    {
        android.content.res.AssetManager r0;
        long l0, l3, l4, l5, l6;
        int i1, i2;
        int[] r1;
        java.lang.Throwable $r3;
        android.content.res.XmlBlock$Parser r4;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r4 := @parameter3: android.content.res.XmlBlock$Parser;

        r1 := @parameter4: int[];

        l3 := @parameter5: long;

        l4 := @parameter6: long;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "inAttrs");

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        l5 = r0.<android.content.res.AssetManager: long mObject>;

     label02:
        if r4 == null goto label05;

     label03:
        l6 = r4.<android.content.res.XmlBlock$Parser: long mParseState>;

     label04:
        goto label06;

     label05:
        l6 = 0L;

     label06:
        staticinvoke <android.content.res.AssetManager: void nativeApplyStyle(long,long,int,int,long,int[],long,long)>(l5, l0, i1, i2, l6, r1, l3, l4);

        exitmonitor r0;

     label07:
        return;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void applyStyleToTheme(long, int, boolean)
    {
        android.content.res.AssetManager r0;
        long l0, $l2;
        int i1;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l2 = r0.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeThemeApplyStyle(long,long,int,boolean)>($l2, l0, i1, z0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void close()
    {
        android.content.res.AssetManager r0;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        r0.<android.content.res.AssetManager: boolean mOpen> = 0;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $l1 = (long) $i0;

        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>($l1);

        exitmonitor r0;

     label4:
        return;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean containsAllocatedTable()
    {
        android.content.res.AssetManager r0;
        boolean z0;
        long $l0;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        z0 = staticinvoke <android.content.res.AssetManager: boolean nativeContainsAllocatedTable(long)>($l0);

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    long createTheme()
    {
        android.content.res.AssetManager r0;
        long l0, $l1;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        l0 = staticinvoke <android.content.res.AssetManager: long nativeThemeCreate(long)>($l1);

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>(l0);

        exitmonitor r0;

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void dumpTheme(long, int, java.lang.String, java.lang.String)
    {
        android.content.res.AssetManager r0;
        long l0, $l2;
        int i1;
        java.lang.String r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l2 = r0.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeThemeDump(long,long,int,java.lang.String,java.lang.String)>($l2, l0, i1, r3, r1);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.content.res.AssetManager r0;
        long $l0, $l2;
        byte $b1;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeDestroy(long)>($l2);

        r0.<android.content.res.AssetManager: long mObject> = 0L;

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int findCookieForPath(java.lang.String)
    {
        android.content.res.AssetManager r0;
        int i0, $i1, i2;
        android.content.res.ApkAssets[] $r2, $r3;
        android.content.res.ApkAssets $r4;
        java.lang.String $r5, r7;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: android.content.res.AssetManager;

        r7 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "path");

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $r2 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        i0 = lengthof $r2;

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label07;

     label04:
        $r3 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        $r4 = $r3[i2];

        $r5 = virtualinvoke $r4.<android.content.res.ApkAssets: java.lang.String getAssetPath()>();

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label06;

        exitmonitor r0;

     label05:
        $i1 = i2 + 1;

        return $i1;

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        exitmonitor r0;

     label08:
        return 0;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.content.res.ApkAssets[] getApkAssets()
    {
        android.content.res.AssetManager r0;
        boolean $z0;
        android.content.res.ApkAssets[] $r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 == 0 goto label3;

        r3 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        exitmonitor r0;

     label2:
        return r3;

     label3:
        exitmonitor r0;

     label4:
        $r1 = <android.content.res.AssetManager: android.content.res.ApkAssets[] sEmptyApkAssets>;

        return $r1;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.String[] getApkPaths()
    {
        android.content.res.AssetManager r0;
        int i0, $i1, i2;
        boolean $z0;
        java.lang.String[] $r1, r8;
        android.content.res.ApkAssets[] $r2, $r3, $r4;
        android.content.res.ApkAssets $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label01:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 == 0 goto label08;

        $r2 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        $i1 = lengthof $r2;

        r8 = newarray (java.lang.String)[$i1];

        $r3 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        i0 = lengthof $r3;

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

     label04:
        $r4 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        $r5 = $r4[i2];

        $r6 = virtualinvoke $r5.<android.content.res.ApkAssets: java.lang.String getAssetPath()>();

        r8[i2] = $r6;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r0;

     label07:
        return r8;

     label08:
        exitmonitor r0;

     label09:
        $r1 = newarray (java.lang.String)[0];

        return $r1;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public android.util.SparseArray getAssignedPackageIdentifiers()
    {
        android.content.res.AssetManager r0;
        android.util.SparseArray $r1;

        r0 := @this: android.content.res.AssetManager;

        $r1 = virtualinvoke r0.<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers(boolean,boolean)>(1, 1);

        return $r1;
    }

    public android.util.SparseArray getAssignedPackageIdentifiers(boolean, boolean)
    {
        android.content.res.AssetManager r0;
        boolean z0, z1;
        long $l0;
        java.lang.Throwable $r1;
        android.util.SparseArray r2;

        r0 := @this: android.content.res.AssetManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: android.util.SparseArray nativeGetAssignedPackageIdentifiers(long,boolean,boolean)>($l0, z0, z1);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int[] getAttributeResolutionStack(long, int, int, int)
    {
        android.content.res.AssetManager r0;
        long l0, $l4;
        int i1, i2, i3;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        entermonitor r0;

     label1:
        $l4 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: int[] nativeAttributeResolutionStack(long,long,int,int,int)>($l4, l0, i3, i1, i2);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getLastResourceResolution()
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String nativeGetLastResourceResolution(long)>($l0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List getLoaders()
    {
        android.content.res.AssetManager r0;
        android.content.res.loader.ResourcesLoader[] r1;
        java.util.List r2;

        r0 := @this: android.content.res.AssetManager;

        r1 = r0.<android.content.res.AssetManager: android.content.res.loader.ResourcesLoader[] mLoaders>;

        if r1 != null goto label1;

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

     label2:
        return r2;
    }

    public java.lang.String[] getLocales()
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r1;
        java.lang.String[] r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String[] nativeGetLocales(long,boolean)>($l0, 0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String[] getNonSystemLocales()
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r1;
        java.lang.String[] r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String[] nativeGetLocales(long,boolean)>($l0, 1);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Map getOverlayableMap(java.lang.String)
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r1;
        java.lang.String r2;
        java.util.Map r3;

        r0 := @this: android.content.res.AssetManager;

        r2 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r3 = staticinvoke <android.content.res.AssetManager: java.util.Map nativeGetOverlayableMap(long,java.lang.String)>($l0, r2);

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getOverlayablesToString(java.lang.String)
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r1;
        java.lang.String r2, r3;

        r0 := @this: android.content.res.AssetManager;

        r2 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r3 = staticinvoke <android.content.res.AssetManager: java.lang.String nativeGetOverlayablesToString(long,java.lang.String)>($l0, r2);

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.CharSequence getPooledStringForCookie(int, int)
    {
        android.content.res.AssetManager r0;
        int i0, i1, $i2;
        android.content.res.ApkAssets[] $r1;
        android.content.res.ApkAssets $r2;
        java.lang.CharSequence $r3;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] getApkAssets()>();

        $i2 = i0 - 1;

        $r2 = $r1[$i2];

        $r3 = virtualinvoke $r2.<android.content.res.ApkAssets: java.lang.CharSequence getStringFromPool(int)>(i1);

        return $r3;
    }

    int getResourceArray(int, int[])
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r2;
        int i1, i2;
        int[] r3;

        r0 := @this: android.content.res.AssetManager;

        i1 := @parameter0: int;

        r3 := @parameter1: int[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "outData");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        i2 = staticinvoke <android.content.res.AssetManager: int nativeGetResourceArray(long,int,int[])>($l0, i1, r3);

        exitmonitor r0;

     label2:
        return i2;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int getResourceArraySize(int)
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r2;
        int i1, i2;

        r0 := @this: android.content.res.AssetManager;

        i1 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        i2 = staticinvoke <android.content.res.AssetManager: int nativeGetResourceArraySize(long,int)>($l0, i1);

        exitmonitor r0;

     label2:
        return i2;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.CharSequence getResourceBagText(int, int)
    {
        android.content.res.AssetManager r0;
        int i0, $i2, $i3, $i4, $i5, i6, i7;
        long $l1;
        java.lang.Throwable $r1;
        android.util.TypedValue r2;
        java.lang.CharSequence r3, r4;

        r0 := @this: android.content.res.AssetManager;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        r2 = r0.<android.content.res.AssetManager: android.util.TypedValue mValue>;

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        i7 = staticinvoke <android.content.res.AssetManager: int nativeGetResourceBagValue(long,int,int,android.util.TypedValue)>($l1, i6, i0, r2);

     label02:
        if i7 > 0 goto label05;

     label03:
        exitmonitor r0;

     label04:
        return null;

     label05:
        $i2 = r2.<android.util.TypedValue: int changingConfigurations>;

        $i3 = staticinvoke <android.content.pm.ActivityInfo: int activityInfoConfigNativeToJava(int)>($i2);

        r2.<android.util.TypedValue: int changingConfigurations> = $i3;

        $i4 = r2.<android.util.TypedValue: int type>;

        if $i4 != 3 goto label07;

        $i5 = r2.<android.util.TypedValue: int data>;

        r3 = virtualinvoke r0.<android.content.res.AssetManager: java.lang.CharSequence getPooledStringForCookie(int,int)>(i7, $i5);

        exitmonitor r0;

     label06:
        return r3;

     label07:
        r4 = virtualinvoke r2.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        exitmonitor r0;

     label08:
        return r4;

     label09:
        $r1 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    java.lang.String getResourceEntryName(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long $l1;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String nativeGetResourceEntryName(long,int)>($l1, i0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int getResourceIdentifier(java.lang.String, java.lang.String, java.lang.String)
    {
        android.content.res.AssetManager r0;
        java.lang.String r1, r2, r4;
        int i0;
        long $l1;
        java.lang.Throwable $r3;

        r0 := @this: android.content.res.AssetManager;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        i0 = staticinvoke <android.content.res.AssetManager: int nativeGetResourceIdentifier(long,java.lang.String,java.lang.String,java.lang.String)>($l1, r4, r1, r2);

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int[] getResourceIntArray(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long $l1;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: int[] nativeGetResourceIntArray(long,int)>($l1, i0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getResourceName(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long $l1;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String nativeGetResourceName(long,int)>($l1, i0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getResourcePackageName(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long $l1;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String nativeGetResourcePackageName(long,int)>($l1, i0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String[] getResourceStringArray(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long $l1;
        java.lang.Throwable $r1;
        java.lang.String[] r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String[] nativeGetResourceStringArray(long,int)>($l1, i0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.CharSequence getResourceText(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        boolean $z0;
        java.lang.Throwable $r1;
        android.util.TypedValue r2;
        java.lang.CharSequence r3;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r2 = r0.<android.content.res.AssetManager: android.util.TypedValue mValue>;

        $z0 = virtualinvoke r0.<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)>(i0, 0, r2, 1);

        if $z0 == 0 goto label3;

        r3 = virtualinvoke r2.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        exitmonitor r0;

     label2:
        return r3;

     label3:
        exitmonitor r0;

     label4:
        return null;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    java.lang.CharSequence[] getResourceTextArray(int)
    {
        android.content.res.AssetManager r0;
        int[] r1;
        int i0, i1, i2, $i4, $i5, i6, i7, i8;
        java.lang.CharSequence[] r2;
        long $l3;
        java.lang.Throwable $r3;
        java.lang.CharSequence r4;

        r0 := @this: android.content.res.AssetManager;

        i6 := @parameter0: int;

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l3 = r0.<android.content.res.AssetManager: long mObject>;

        r1 = staticinvoke <android.content.res.AssetManager: int[] nativeGetResourceStringArrayInfo(long,int)>($l3, i6);

     label02:
        if r1 != null goto label05;

     label03:
        exitmonitor r0;

     label04:
        return null;

     label05:
        i0 = lengthof r1;

        $i4 = i0 / 2;

        r2 = newarray (java.lang.CharSequence)[$i4];

     label06:
        i7 = 0;

        i8 = 0;

     label07:
        if i7 >= i0 goto label12;

        i1 = r1[i7];

        $i5 = i7 + 1;

        i2 = r1[$i5];

        if i2 < 0 goto label10;

        if i1 <= 0 goto label10;

     label08:
        r4 = virtualinvoke r0.<android.content.res.AssetManager: java.lang.CharSequence getPooledStringForCookie(int,int)>(i1, i2);

     label09:
        goto label11;

     label10:
        r4 = null;

     label11:
        r2[i8] = r4;

        i7 = i7 + 2;

        i8 = i8 + 1;

        goto label07;

     label12:
        exitmonitor r0;

     label13:
        return r2;

     label14:
        $r3 := @caughtexception;

     label15:
        exitmonitor r0;

     label16:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    java.lang.String getResourceTypeName(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long $l1;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: java.lang.String nativeGetResourceTypeName(long,int)>($l1, i0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean getResourceValue(int, int, android.util.TypedValue, boolean)
    {
        android.content.res.AssetManager r0;
        int i0, $i3, $i4, $i5, $i6, i7, i8;
        boolean z0;
        short $s1;
        long $l2;
        java.lang.CharSequence $r2;
        java.lang.Throwable $r3;
        android.util.TypedValue r4;

        r0 := @this: android.content.res.AssetManager;

        i7 := @parameter0: int;

        i0 := @parameter1: int;

        r4 := @parameter2: android.util.TypedValue;

        z0 := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "outValue");

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l2 = r0.<android.content.res.AssetManager: long mObject>;

        $s1 = (short) i0;

        i8 = staticinvoke <android.content.res.AssetManager: int nativeGetResourceValue(long,int,short,android.util.TypedValue,boolean)>($l2, i7, $s1, r4, z0);

     label02:
        if i8 > 0 goto label05;

     label03:
        exitmonitor r0;

     label04:
        return 0;

     label05:
        $i3 = r4.<android.util.TypedValue: int changingConfigurations>;

        $i4 = staticinvoke <android.content.pm.ActivityInfo: int activityInfoConfigNativeToJava(int)>($i3);

        r4.<android.util.TypedValue: int changingConfigurations> = $i4;

        $i5 = r4.<android.util.TypedValue: int type>;

        if $i5 != 3 goto label06;

        $i6 = r4.<android.util.TypedValue: int data>;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.lang.CharSequence getPooledStringForCookie(int,int)>(i8, $i6);

        r4.<android.util.TypedValue: java.lang.CharSequence string> = $r2;

     label06:
        exitmonitor r0;

     label07:
        return 1;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    android.content.res.Configuration[] getSizeConfigurations()
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r1;
        android.content.res.Configuration[] r2;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: android.content.res.Configuration[] nativeGetSizeConfigurations(long)>($l0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int[] getStyleAttributes(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long $l1;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        r2 = staticinvoke <android.content.res.AssetManager: int[] nativeGetStyleAttributes(long,int)>($l1, i0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean getThemeValue(long, int, android.util.TypedValue, boolean)
    {
        android.content.res.AssetManager r0;
        long l0, $l1;
        boolean z0;
        int $i2, $i3, $i4, $i5, i6, i7;
        java.lang.CharSequence $r2;
        java.lang.Throwable $r3;
        android.util.TypedValue r4;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        i6 := @parameter1: int;

        r4 := @parameter2: android.util.TypedValue;

        z0 := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "outValue");

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        i7 = staticinvoke <android.content.res.AssetManager: int nativeThemeGetAttributeValue(long,long,int,android.util.TypedValue,boolean)>($l1, l0, i6, r4, z0);

     label02:
        if i7 > 0 goto label05;

     label03:
        exitmonitor r0;

     label04:
        return 0;

     label05:
        $i2 = r4.<android.util.TypedValue: int changingConfigurations>;

        $i3 = staticinvoke <android.content.pm.ActivityInfo: int activityInfoConfigNativeToJava(int)>($i2);

        r4.<android.util.TypedValue: int changingConfigurations> = $i3;

        $i4 = r4.<android.util.TypedValue: int type>;

        if $i4 != 3 goto label06;

        $i5 = r4.<android.util.TypedValue: int data>;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.lang.CharSequence getPooledStringForCookie(int,int)>(i7, $i5);

        r4.<android.util.TypedValue: java.lang.CharSequence string> = $r2;

     label06:
        exitmonitor r0;

     label07:
        return 1;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isUpToDate()
    {
        android.content.res.AssetManager r0;
        int i0, i1;
        boolean $z0, $z1;
        android.content.res.ApkAssets $r1;
        java.lang.Throwable $r2;
        android.content.res.ApkAssets[] r3;

        r0 := @this: android.content.res.AssetManager;

        entermonitor r0;

     label01:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label03;

        exitmonitor r0;

     label02:
        return 0;

     label03:
        r3 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        i0 = lengthof r3;

     label04:
        i1 = 0;

     label05:
        if i1 >= i0 goto label09;

     label06:
        $r1 = r3[i1];

        $z1 = virtualinvoke $r1.<android.content.res.ApkAssets: boolean isUpToDate()>();

        if $z1 != 0 goto label08;

        exitmonitor r0;

     label07:
        return 0;

     label08:
        i1 = i1 + 1;

        goto label05;

     label09:
        exitmonitor r0;

     label10:
        return 1;

     label11:
        $r2 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.lang.String[] list(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        long $l0;
        java.lang.Throwable $r2;
        java.lang.String r3;
        java.lang.String[] r4;

        r0 := @this: android.content.res.AssetManager;

        r3 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "path");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        r4 = staticinvoke <android.content.res.AssetManager: java.lang.String[] nativeList(long,java.lang.String)>($l0, r3);

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.io.InputStream open(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>(r1, 2);

        return $r2;
    }

    public java.io.InputStream open(java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0, $i4;
        long l1, $l2, $l5;
        java.io.FileNotFoundException r1;
        java.lang.StringBuilder r2;
        byte $b3;
        java.lang.String $r6, r8;
        java.lang.Throwable $r7;
        android.content.res.AssetManager$AssetInputStream r9;

        r0 := @this: android.content.res.AssetManager;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "fileName");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureOpenLocked()>();

        $l2 = r0.<android.content.res.AssetManager: long mObject>;

        l1 = staticinvoke <android.content.res.AssetManager: long nativeOpenAsset(long,java.lang.String,int)>($l2, r8, i0);

     label2:
        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label5;

     label3:
        r9 = new android.content.res.AssetManager$AssetInputStream;

        specialinvoke r9.<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,long,android.content.res.AssetManager$1)>(r0, l1, null);

        $i4 = virtualinvoke r9.<java.lang.Object: int hashCode()>();

        $l5 = (long) $i4;

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>($l5);

        exitmonitor r0;

     label4:
        return r9;

     label5:
        r1 = new java.io.FileNotFoundException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset file: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw r1;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.content.res.AssetFileDescriptor openFd(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.io.FileNotFoundException r1;
        long[] $r3, $r7, $r8;
        long $l0, $l1, $l2;
        java.lang.String $r6, r10;
        java.lang.Throwable $r9;
        android.os.ParcelFileDescriptor r11;
        android.content.res.AssetFileDescriptor r12;
        java.lang.StringBuilder r13;

        r0 := @this: android.content.res.AssetManager;

        r10 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "fileName");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureOpenLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        $r3 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        r11 = staticinvoke <android.content.res.AssetManager: android.os.ParcelFileDescriptor nativeOpenAssetFd(long,java.lang.String,long[])>($l0, r10, $r3);

     label2:
        if r11 == null goto label5;

     label3:
        r12 = new android.content.res.AssetFileDescriptor;

        $r7 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l2 = $r7[0];

        $r8 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l1 = $r8[1];

        specialinvoke r12.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r11, $l2, $l1);

        exitmonitor r0;

     label4:
        return r12;

     label5:
        r1 = new java.io.FileNotFoundException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset file: ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw r1;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.io.InputStream openNonAsset(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(i0, r1, 2);

        return $r2;
    }

    public java.io.InputStream openNonAsset(int, java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0, i1, $i5;
        long l2, $l3, $l6;
        java.io.FileNotFoundException r1;
        java.lang.StringBuilder r2;
        byte $b4;
        java.lang.String $r6, r8;
        java.lang.Throwable $r7;
        android.content.res.AssetManager$AssetInputStream r9;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "fileName");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureOpenLocked()>();

        $l3 = r0.<android.content.res.AssetManager: long mObject>;

        l2 = staticinvoke <android.content.res.AssetManager: long nativeOpenNonAsset(long,int,java.lang.String,int)>($l3, i0, r8, i1);

     label2:
        $b4 = l2 cmp 0L;

        if $b4 == 0 goto label5;

     label3:
        r9 = new android.content.res.AssetManager$AssetInputStream;

        specialinvoke r9.<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,long,android.content.res.AssetManager$1)>(r0, l2, null);

        $i5 = virtualinvoke r9.<java.lang.Object: int hashCode()>();

        $l6 = (long) $i5;

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>($l6);

        exitmonitor r0;

     label4:
        return r9;

     label5:
        r1 = new java.io.FileNotFoundException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset absolute file: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw r1;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.io.InputStream openNonAsset(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(0, r1, 2);

        return $r2;
    }

    public java.io.InputStream openNonAsset(java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        int i0;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(0, r1, i0);

        return $r2;
    }

    public android.content.res.AssetFileDescriptor openNonAssetFd(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0;
        java.lang.StringBuilder r1;
        long[] $r3, $r7, $r8;
        long $l1, $l2, $l3;
        java.lang.String $r6, r10;
        java.lang.Throwable $r9;
        android.os.ParcelFileDescriptor r11;
        android.content.res.AssetFileDescriptor r12;
        java.io.FileNotFoundException r13;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "fileName");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureOpenLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        $r3 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        r11 = staticinvoke <android.content.res.AssetManager: android.os.ParcelFileDescriptor nativeOpenNonAssetFd(long,int,java.lang.String,long[])>($l1, i0, r10, $r3);

     label2:
        if r11 == null goto label5;

     label3:
        r12 = new android.content.res.AssetFileDescriptor;

        $r7 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l3 = $r7[0];

        $r8 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l2 = $r8[1];

        specialinvoke r12.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r11, $l3, $l2);

        exitmonitor r0;

     label4:
        return r12;

     label5:
        r13 = new java.io.FileNotFoundException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset absolute file: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw r13;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        android.content.res.AssetFileDescriptor $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>(0, r1);

        return $r2;
    }

    android.content.res.XmlBlock openXmlBlockAsset(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0, $i4;
        long l1, $l2, $l5;
        java.io.FileNotFoundException r1;
        java.lang.StringBuilder r2;
        byte $b3;
        java.lang.String $r6, r8;
        java.lang.Throwable $r7;
        android.content.res.XmlBlock r9;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "fileName");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureOpenLocked()>();

        $l2 = r0.<android.content.res.AssetManager: long mObject>;

        l1 = staticinvoke <android.content.res.AssetManager: long nativeOpenXmlAsset(long,int,java.lang.String)>($l2, i0, r8);

     label2:
        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label5;

     label3:
        r9 = new android.content.res.XmlBlock;

        specialinvoke r9.<android.content.res.XmlBlock: void <init>(android.content.res.AssetManager,long)>(r0, l1);

        $i4 = virtualinvoke r9.<java.lang.Object: int hashCode()>();

        $l5 = (long) $i4;

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>($l5);

        exitmonitor r0;

     label4:
        return r9;

     label5:
        r1 = new java.io.FileNotFoundException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset XML file: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw r1;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    android.content.res.XmlBlock openXmlBlockAsset(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        android.content.res.XmlBlock $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>(0, r1);

        return $r2;
    }

    public android.content.res.XmlResourceParser openXmlResourceParser(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0;
        java.lang.Throwable $r1, $r2;
        java.lang.String r3;
        android.content.res.XmlBlock r4;
        android.content.res.XmlResourceParser r5;
        java.lang.AssertionError r6;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r4 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>(i0, r3);

     label1:
        r5 = virtualinvoke r4.<android.content.res.XmlBlock: android.content.res.XmlResourceParser newParser()>();

     label2:
        if r5 == null goto label4;

        if r4 == null goto label3;

        virtualinvoke r4.<android.content.res.XmlBlock: void close()>();

     label3:
        return r5;

     label4:
        r6 = new java.lang.AssertionError;

        specialinvoke r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("block.newParser() returned a null parser");

        throw r6;

     label5:
        $r2 := @caughtexception;

        if r4 == null goto label9;

     label6:
        virtualinvoke r4.<android.content.res.XmlBlock: void close()>();

     label7:
        goto label9;

     label8:
        $r1 := @caughtexception;

        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label9:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        android.content.res.XmlResourceParser $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>(0, r1);

        return $r2;
    }

    void releaseTheme(long)
    {
        android.content.res.AssetManager r0;
        long l0;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        staticinvoke <android.content.res.AssetManager: void nativeThemeDestroy(long)>(l0);

        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>(l0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean resolveAttrs(long, int, int, int[], int[], int[], int[])
    {
        android.content.res.AssetManager r0;
        long l0, $l3;
        int i1, i2;
        int[] r1, r2, r3, r8;
        boolean z0;
        java.lang.Throwable $r7;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r8 := @parameter3: int[];

        r1 := @parameter4: int[];

        r2 := @parameter5: int[];

        r3 := @parameter6: int[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "inAttrs");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "outValues");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "outIndices");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l3 = r0.<android.content.res.AssetManager: long mObject>;

        z0 = staticinvoke <android.content.res.AssetManager: boolean nativeResolveAttrs(long,long,int,int,int[],int[],int[],int[])>($l3, l0, i1, i2, r8, r1, r2, r3);

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean retrieveAttributes(android.content.res.XmlBlock$Parser, int[], int[], int[])
    {
        android.content.res.AssetManager r0;
        int[] r1, r2, r3;
        boolean z0;
        long $l0, $l1;
        java.lang.Throwable $r8;
        android.content.res.XmlBlock$Parser r9;

        r0 := @this: android.content.res.AssetManager;

        r9 := @parameter0: android.content.res.XmlBlock$Parser;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        r3 := @parameter3: int[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "parser");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "inAttrs");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "outValues");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "outIndices");

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l1 = r0.<android.content.res.AssetManager: long mObject>;

        $l0 = r9.<android.content.res.XmlBlock$Parser: long mParseState>;

        z0 = staticinvoke <android.content.res.AssetManager: boolean nativeRetrieveAttributes(long,long,int[],int[],int[])>($l1, $l0, r1, r2, r3);

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setApkAssets(android.content.res.ApkAssets[], boolean)
    {
        android.content.res.AssetManager r0;
        boolean z0, $z1;
        android.content.res.ApkAssets[] r1, $r3, r7, r8, r10;
        int i0, $i1, $i2, $i3, $i4, i6, i7, i8, i9;
        long $l5;
        java.lang.Object[] $r4;
        android.util.ArraySet $r5;
        java.lang.Throwable $r6;
        android.content.res.ApkAssets r9;

        r0 := @this: android.content.res.AssetManager;

        r7 := @parameter0: android.content.res.ApkAssets[];

        z0 := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "apkAssets");

        r8 = <android.content.res.AssetManager: android.content.res.ApkAssets[] sSystemApkAssets>;

        $i2 = lengthof r8;

        $i1 = lengthof r7;

        $i3 = $i2 + $i1;

        r1 = newarray (android.content.res.ApkAssets)[$i3];

        i6 = lengthof r8;

        i7 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r1, 0, i6);

        $r3 = <android.content.res.AssetManager: android.content.res.ApkAssets[] sSystemApkAssets>;

        i8 = lengthof $r3;

        i0 = lengthof r7;

     label01:
        if i7 >= i0 goto label03;

        r9 = r7[i7];

        i9 = i8;

        $r5 = <android.content.res.AssetManager: android.util.ArraySet sSystemApkAssetsSet>;

        $z1 = virtualinvoke $r5.<android.util.ArraySet: boolean contains(java.lang.Object)>(r9);

        if $z1 != 0 goto label02;

        r1[i8] = r9;

        i9 = i8 + 1;

     label02:
        i7 = i7 + 1;

        i8 = i9;

        goto label01;

     label03:
        r10 = r1;

        $i4 = lengthof r1;

        if i8 == $i4 goto label04;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, i8);

        r10 = (android.content.res.ApkAssets[]) $r4;

     label04:
        entermonitor r0;

     label05:
        specialinvoke r0.<android.content.res.AssetManager: void ensureOpenLocked()>();

        r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets> = r10;

        $l5 = r0.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeSetApkAssets(long,android.content.res.ApkAssets[],boolean)>($l5, r10, z0);

     label06:
        if z0 == 0 goto label08;

     label07:
        specialinvoke r0.<android.content.res.AssetManager: void invalidateCachesLocked(int)>(-1);

     label08:
        exitmonitor r0;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r6;

        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setConfiguration(int, int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)
    {
        android.content.res.AssetManager r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        long $l17;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        i8 := @parameter9: int;

        i9 := @parameter10: int;

        i10 := @parameter11: int;

        i11 := @parameter12: int;

        i12 := @parameter13: int;

        i13 := @parameter14: int;

        i14 := @parameter15: int;

        i15 := @parameter16: int;

        i16 := @parameter17: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l17 = r0.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeSetConfiguration(long,int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>($l17, i0, i1, r2, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setLoaders(java.util.List)
    {
        android.content.res.AssetManager r0;
        java.util.List r1, r21;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        android.content.res.ApkAssets r4, $r17, $r19;
        java.util.ArrayList $r6;
        boolean $z0, $z1, $z2;
        android.content.res.loader.ResourcesLoader[] $r7, $r9;
        java.lang.Object[] $r8, $r11;
        android.content.res.ApkAssets[] $r10, $r12, $r18, r20;
        android.util.ArraySet $r13;
        java.lang.Object $r14, $r16;
        android.content.res.loader.ResourcesLoader $r15;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.util.List;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "newLoaders");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label1:
        r20 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        $i1 = lengthof r20;

        if i4 >= $i1 goto label3;

        $r17 = r20[i4];

        $z2 = virtualinvoke $r17.<android.content.res.ApkAssets: boolean isForLoader()>();

        if $z2 != 0 goto label2;

        $r18 = r0.<android.content.res.AssetManager: android.content.res.ApkAssets[] mApkAssets>;

        $r19 = $r18[i4];

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r13 = new android.util.ArraySet;

        specialinvoke $r13.<android.util.ArraySet: void <init>()>();

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i5 = $i2 - 1;

     label4:
        if i5 < 0 goto label8;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r15 = (android.content.res.loader.ResourcesLoader) $r14;

        r21 = virtualinvoke $r15.<android.content.res.loader.ResourcesLoader: java.util.List getApkAssets()>();

        $i3 = interfaceinvoke r21.<java.util.List: int size()>();

        i6 = $i3 - 1;

     label5:
        if i6 < 0 goto label7;

        $r16 = interfaceinvoke r21.<java.util.List: java.lang.Object get(int)>(i6);

        r4 = (android.content.res.ApkAssets) $r16;

        $z1 = virtualinvoke $r13.<android.util.ArraySet: boolean add(java.lang.Object)>(r4);

        if $z1 == 0 goto label6;

        virtualinvoke $r6.<java.util.ArrayList: void add(int,java.lang.Object)>(i0, r4);

     label6:
        i6 = i6 + -1;

        goto label5;

     label7:
        i5 = i5 + -1;

        goto label4;

     label8:
        $r7 = newarray (android.content.res.loader.ResourcesLoader)[0];

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (android.content.res.loader.ResourcesLoader[]) $r8;

        r0.<android.content.res.AssetManager: android.content.res.loader.ResourcesLoader[] mLoaders> = $r9;

        $r10 = newarray (android.content.res.ApkAssets)[0];

        $r11 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (android.content.res.ApkAssets[]) $r11;

        virtualinvoke r0.<android.content.res.AssetManager: void setApkAssets(android.content.res.ApkAssets[],boolean)>($r12, 1);

        return;
    }

    public void setResourceResolutionLoggingEnabled(boolean)
    {
        android.content.res.AssetManager r0;
        boolean z0;
        long $l0;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l0 = r0.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeSetResourceResolutionLoggingEnabled(long,boolean)>($l0, z0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setThemeTo(long, android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager r0, r4;
        long l0, l1, $l2, $l3;
        java.lang.Throwable $r2, $r3;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        r4 := @parameter1: android.content.res.AssetManager;

        l1 := @parameter2: long;

        entermonitor r0;

     label01:
        specialinvoke r0.<android.content.res.AssetManager: void ensureValidLocked()>();

        entermonitor r4;

     label02:
        specialinvoke r4.<android.content.res.AssetManager: void ensureValidLocked()>();

        $l3 = r0.<android.content.res.AssetManager: long mObject>;

        $l2 = r4.<android.content.res.AssetManager: long mObject>;

        staticinvoke <android.content.res.AssetManager: void nativeThemeCopy(long,long,long,long)>($l3, l0, $l2, l1);

        exitmonitor r4;

     label03:
        exitmonitor r0;

     label04:
        return;

     label05:
        $r2 := @caughtexception;

     label06:
        exitmonitor r4;

     label07:
        throw $r2;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void xmlBlockGone(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        long l1;
        java.lang.Throwable $r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        entermonitor r0;

        l1 = (long) i0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>(l1);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
