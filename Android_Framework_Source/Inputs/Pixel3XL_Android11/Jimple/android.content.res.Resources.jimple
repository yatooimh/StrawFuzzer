public class android.content.res.Resources extends java.lang.Object
{
    public static final int ID_NULL;
    private static final int MIN_THEME_REFS_FLUSH_SIZE;
    static final java.lang.String TAG;
    static android.content.res.Resources mSystem;
    private static final java.lang.Object sSync;
    private int mBaseApkAssetsSize;
    private android.content.res.Resources$UpdateCallbacks mCallbacks;
    final java.lang.ClassLoader mClassLoader;
    private android.graphics.drawable.DrawableInflater mDrawableInflater;
    private android.view.DisplayAdjustments mOverrideDisplayAdjustments;
    private android.content.res.ResourcesImpl mResourcesImpl;
    private final java.util.ArrayList mThemeRefs;
    private int mThemeRefsNextFlushSize;
    private android.util.TypedValue mTmpValue;
    private final java.lang.Object mTmpValueLock;
    final android.util.Pools$SynchronizedPool mTypedArrayPool;
    private final java.lang.Object mUpdateLock;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.content.res.Resources: java.lang.String TAG> = "Resources";

        <android.content.res.Resources: int MIN_THEME_REFS_FLUSH_SIZE> = 32;

        <android.content.res.Resources: int ID_NULL> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.content.res.Resources: java.lang.Object sSync> = $r0;

        <android.content.res.Resources: android.content.res.Resources mSystem> = null;

        return;
    }

    private void <init>()
    {
        android.content.res.Resources r0;
        android.util.DisplayMetrics $r3;
        android.content.res.Configuration $r4;
        android.content.res.ResourcesImpl $r5;
        android.content.res.AssetManager $r6;
        android.view.DisplayAdjustments $r7;

        r0 := @this: android.content.res.Resources;

        specialinvoke r0.<android.content.res.Resources: void <init>(java.lang.ClassLoader)>(null);

        $r3 = new android.util.DisplayMetrics;

        specialinvoke $r3.<android.util.DisplayMetrics: void <init>()>();

        virtualinvoke $r3.<android.util.DisplayMetrics: void setToDefaults()>();

        $r4 = new android.content.res.Configuration;

        specialinvoke $r4.<android.content.res.Configuration: void <init>()>();

        virtualinvoke $r4.<android.content.res.Configuration: void setToDefaults()>();

        $r5 = new android.content.res.ResourcesImpl;

        $r6 = staticinvoke <android.content.res.AssetManager: android.content.res.AssetManager getSystem()>();

        $r7 = new android.view.DisplayAdjustments;

        specialinvoke $r7.<android.view.DisplayAdjustments: void <init>()>();

        specialinvoke $r5.<android.content.res.ResourcesImpl: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration,android.view.DisplayAdjustments)>($r6, $r3, $r4, $r7);

        r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl> = $r5;

        return;
    }

    public void <init>(android.content.res.AssetManager, android.util.DisplayMetrics, android.content.res.Configuration)
    {
        android.content.res.Resources r0;
        android.content.res.AssetManager r1;
        android.util.DisplayMetrics r2;
        android.content.res.Configuration r3;
        android.content.res.ResourcesImpl $r4;
        android.view.DisplayAdjustments $r5;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.content.res.AssetManager;

        r2 := @parameter1: android.util.DisplayMetrics;

        r3 := @parameter2: android.content.res.Configuration;

        specialinvoke r0.<android.content.res.Resources: void <init>(java.lang.ClassLoader)>(null);

        $r4 = new android.content.res.ResourcesImpl;

        $r5 = new android.view.DisplayAdjustments;

        specialinvoke $r5.<android.view.DisplayAdjustments: void <init>()>();

        specialinvoke $r4.<android.content.res.ResourcesImpl: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration,android.view.DisplayAdjustments)>(r1, r2, r3, $r5);

        r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl> = $r4;

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        android.content.res.Resources r0;
        java.lang.Object $r1, $r3;
        android.util.Pools$SynchronizedPool $r2;
        android.util.TypedValue $r4;
        java.util.ArrayList $r5;
        java.lang.ClassLoader r6;

        r0 := @this: android.content.res.Resources;

        r6 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.content.res.Resources: java.lang.Object mUpdateLock> = $r1;

        $r2 = new android.util.Pools$SynchronizedPool;

        specialinvoke $r2.<android.util.Pools$SynchronizedPool: void <init>(int)>(5);

        r0.<android.content.res.Resources: android.util.Pools$SynchronizedPool mTypedArrayPool> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.content.res.Resources: java.lang.Object mTmpValueLock> = $r3;

        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        r0.<android.content.res.Resources: android.util.TypedValue mTmpValue> = $r4;

        r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks> = null;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs> = $r5;

        r0.<android.content.res.Resources: int mThemeRefsNextFlushSize> = 32;

        if r6 != null goto label1;

        r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        goto label1;

     label1:
        r0.<android.content.res.Resources: java.lang.ClassLoader mClassLoader> = r6;

        return;
    }

    static android.content.res.ResourcesImpl access$000(android.content.res.Resources)
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;

        r0 := @parameter0: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        return $r1;
    }

    private void checkCallbacksRegistered()
    {
        android.content.res.Resources r0;
        android.content.res.Resources$UpdateCallbacks $r1;
        android.content.res.Resources$AssetManagerUpdateHandler $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks>;

        if $r1 != null goto label1;

        $r2 = new android.content.res.Resources$AssetManagerUpdateHandler;

        specialinvoke $r2.<android.content.res.Resources$AssetManagerUpdateHandler: void <init>(android.content.res.Resources)>(r0);

        r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks> = $r2;

     label1:
        return;
    }

    public static int getAttributeSetSourceResId(android.util.AttributeSet)
    {
        android.util.AttributeSet r0;
        int $i0;

        r0 := @parameter0: android.util.AttributeSet;

        $i0 = staticinvoke <android.content.res.ResourcesImpl: int getAttributeSetSourceResId(android.util.AttributeSet)>(r0);

        return $i0;
    }

    public static android.content.res.Resources getSystem()
    {
        java.lang.Object r0;
        android.content.res.Resources r1, r3;
        java.lang.Throwable $r2;

        r0 = <android.content.res.Resources: java.lang.Object sSync>;

        entermonitor r0;

     label1:
        r1 = <android.content.res.Resources: android.content.res.Resources mSystem>;

     label2:
        r3 = r1;

        if r1 != null goto label5;

     label3:
        r3 = new android.content.res.Resources;

        specialinvoke r3.<android.content.res.Resources: void <init>()>();

     label4:
        <android.content.res.Resources: android.content.res.Resources mSystem> = r3;

     label5:
        exitmonitor r0;

     label6:
        return r3;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    static boolean lambda$newTheme$0(java.lang.ref.WeakReference)
    {
        java.lang.ref.WeakReference r0;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0: java.lang.ref.WeakReference;

        $r1 = virtualinvoke r0.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r1 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static android.content.res.TypedArray obtainAttributes(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int[])
    {
        android.content.res.Resources r0;
        android.content.res.Resources$Theme r1;
        android.util.AttributeSet r2;
        int[] r3;
        android.content.res.TypedArray $r4, $r5;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.content.res.Resources$Theme;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: int[];

        if r1 != null goto label1;

        $r5 = virtualinvoke r0.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r2, r3);

        return $r5;

     label1:
        $r4 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, r3, 0, 0);

        return $r4;
    }

    private android.util.TypedValue obtainTempTypedValue()
    {
        android.content.res.Resources r0;
        java.lang.Object r1;
        android.util.TypedValue $r2, $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: android.content.res.Resources;

        r5 = null;

        r1 = r0.<android.content.res.Resources: java.lang.Object mTmpValueLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.content.res.Resources: android.util.TypedValue mTmpValue>;

        if $r2 == null goto label2;

        r5 = r0.<android.content.res.Resources: android.util.TypedValue mTmpValue>;

        r0.<android.content.res.Resources: android.util.TypedValue mTmpValue> = null;

     label2:
        exitmonitor r1;

     label3:
        if r5 != null goto label4;

        $r3 = new android.util.TypedValue;

        specialinvoke $r3.<android.util.TypedValue: void <init>()>();

        return $r3;

     label4:
        return r5;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void releaseTempTypedValue(android.util.TypedValue)
    {
        android.content.res.Resources r0;
        java.lang.Object r1;
        android.util.TypedValue $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: android.content.res.Resources;

        r4 := @parameter0: android.util.TypedValue;

        r1 = r0.<android.content.res.Resources: java.lang.Object mTmpValueLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.content.res.Resources: android.util.TypedValue mTmpValue>;

        if $r2 != null goto label2;

        r0.<android.content.res.Resources: android.util.TypedValue mTmpValue> = r4;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static boolean resourceHasPackage(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 >>> 24;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static int selectDefaultTheme(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.content.res.Resources: int selectSystemTheme(int,int,int,int,int,int)>(i0, i1, 16973829, 16973931, 16974120, 16974143);

        return $i2;
    }

    public static int selectSystemTheme(int, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        if i0 == 0 goto label1;

        return i0;

     label1:
        if i1 >= 11 goto label2;

        return i2;

     label2:
        if i1 >= 14 goto label3;

        return i3;

     label3:
        if i1 >= 24 goto label4;

        return i4;

     label4:
        return i5;
    }

    public static void updateSystemConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo)
    {
        android.content.res.Configuration r0;
        android.util.DisplayMetrics r1;
        android.content.res.CompatibilityInfo r2;
        android.content.res.Resources r3;

        r0 := @parameter0: android.content.res.Configuration;

        r1 := @parameter1: android.util.DisplayMetrics;

        r2 := @parameter2: android.content.res.CompatibilityInfo;

        r3 = <android.content.res.Resources: android.content.res.Resources mSystem>;

        if r3 == null goto label1;

        virtualinvoke r3.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>(r0, r1, r2);

     label1:
        return;
    }

    public transient void addLoaders(android.content.res.loader.ResourcesLoader[])
    {
        android.content.res.Resources r0;
        java.lang.Object r1, $r9;
        java.util.ArrayList r2;
        android.util.ArraySet r3;
        android.content.res.loader.ResourcesLoader r4, $r11;
        int i0, $i1, $i2, $i3, i4, i5;
        android.content.res.ResourcesImpl $r5;
        android.content.res.AssetManager $r6;
        java.util.List $r7;
        android.content.res.Resources$UpdateCallbacks $r8, $r10;
        boolean $z0;
        java.lang.Throwable $r12;
        android.content.res.loader.ResourcesLoader[] r13;

        r0 := @this: android.content.res.Resources;

        r13 := @parameter0: android.content.res.loader.ResourcesLoader[];

        r1 = r0.<android.content.res.Resources: java.lang.Object mUpdateLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.content.res.Resources: void checkCallbacksRegistered()>();

        r2 = new java.util.ArrayList;

        $r5 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r6 = virtualinvoke $r5.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        $r7 = virtualinvoke $r6.<android.content.res.AssetManager: java.util.List getLoaders()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        r3 = new android.util.ArraySet;

        specialinvoke r3.<android.util.ArraySet: void <init>(java.util.Collection)>(r2);

     label02:
        i4 = 0;

     label03:
        $i1 = lengthof r13;

        if i4 >= $i1 goto label07;

     label04:
        r4 = r13[i4];

     label05:
        $z0 = virtualinvoke r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label06;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label06:
        i4 = i4 + 1;

        goto label03;

     label07:
        $i2 = virtualinvoke r3.<android.util.ArraySet: int size()>();

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 != $i3 goto label09;

        exitmonitor r1;

     label08:
        return;

     label09:
        $r8 = r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks>;

        interfaceinvoke $r8.<android.content.res.Resources$UpdateCallbacks: void onLoadersChanged(android.content.res.Resources,java.util.List)>(r0, r2);

        i5 = virtualinvoke r3.<android.util.ArraySet: int size()>();

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

     label10:
        if i5 >= i0 goto label13;

     label11:
        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r11 = (android.content.res.loader.ResourcesLoader) $r9;

        $r10 = r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks>;

        virtualinvoke $r11.<android.content.res.loader.ResourcesLoader: void registerOnProvidersChangedCallback(java.lang.Object,android.content.res.loader.ResourcesLoader$UpdateCallbacks)>(r0, $r10);

     label12:
        i5 = i5 + 1;

        goto label10;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r12 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public int calcConfigChanges(android.content.res.Configuration)
    {
        android.content.res.Resources r0;
        android.content.res.Configuration r1;
        android.content.res.ResourcesImpl $r2;
        int $i0;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $i0 = virtualinvoke $r2.<android.content.res.ResourcesImpl: int calcConfigChanges(android.content.res.Configuration)>(r1);

        return $i0;
    }

    public void clearLoaders()
    {
        android.content.res.Resources r0;
        java.lang.Object r1, $r6;
        java.util.List r2, r9;
        android.content.res.ResourcesImpl $r3;
        android.content.res.AssetManager $r4;
        android.content.res.Resources$UpdateCallbacks $r5;
        boolean $z0;
        android.content.res.loader.ResourcesLoader $r7;
        java.lang.Throwable $r8;
        java.util.Iterator r10;

        r0 := @this: android.content.res.Resources;

        r1 = r0.<android.content.res.Resources: java.lang.Object mUpdateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.content.res.Resources: void checkCallbacksRegistered()>();

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r4 = virtualinvoke $r3.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        r9 = virtualinvoke $r4.<android.content.res.AssetManager: java.util.List getLoaders()>();

        $r5 = r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks>;

        interfaceinvoke $r5.<android.content.res.Resources$UpdateCallbacks: void onLoadersChanged(android.content.res.Resources,java.util.List)>(r0, r2);

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.content.res.loader.ResourcesLoader) $r6;

        virtualinvoke $r7.<android.content.res.loader.ResourcesLoader: void unregisterOnProvidersChangedCallback(java.lang.Object)>(r0);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final void finishPreloading()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r1.<android.content.res.ResourcesImpl: void finishPreloading()>();

        return;
    }

    public final void flushLayoutCache()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r1.<android.content.res.ResourcesImpl: void flushLayoutCache()>();

        return;
    }

    public android.content.res.XmlResourceParser getAnimation(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.XmlResourceParser $r1;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)>(i0, "anim");

        return $r1;
    }

    public android.content.res.ConfigurationBoundResourceCache getAnimatorCache()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.ConfigurationBoundResourceCache $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache getAnimatorCache()>();

        return $r2;
    }

    public final android.content.res.AssetManager getAssets()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.AssetManager $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        return $r2;
    }

    public boolean getBoolean(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        android.content.res.Resources$NotFoundException r2;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r4, $r7, $r10;
        java.lang.Throwable $r11;
        android.content.res.ResourcesImpl r12;
        boolean z0;
        java.lang.StringBuilder r13;

        r0 := @this: android.content.res.Resources;

        i3 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r12 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

     label2:
        z0 = 1;

     label3:
        virtualinvoke r12.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i3, r1, 1);

        $i0 = r1.<android.util.TypedValue: int type>;

        if $i0 < 16 goto label7;

        $i2 = r1.<android.util.TypedValue: int type>;

        if $i2 > 31 goto label7;

        i4 = r1.<android.util.TypedValue: int data>;

     label4:
        if i4 == 0 goto label5;

        goto label6;

     label5:
        z0 = 0;

     label6:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return z0;

     label7:
        r2 = new android.content.res.Resources$NotFoundException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i1 = r1.<android.util.TypedValue: int type>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r10 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r10);

        throw r2;

     label8:
        $r11 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        android.content.res.Resources r0;
        java.lang.ClassLoader $r1;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: java.lang.ClassLoader mClassLoader>;

        return $r1;
    }

    public int getColor(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, $i1;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>(i0, null);

        return $i1;
    }

    public int getColor(int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r3, $r6, $r9;
        android.content.res.ColorStateList $r10;
        java.lang.Throwable $r11;
        android.content.res.Resources$Theme r12;
        android.content.res.ResourcesImpl r13;
        android.content.res.Resources$NotFoundException r14;
        java.lang.StringBuilder r15;

        r0 := @this: android.content.res.Resources;

        i4 := @parameter0: int;

        r12 := @parameter1: android.content.res.Resources$Theme;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r13 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke r13.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i4, r1, 1);

        $i0 = r1.<android.util.TypedValue: int type>;

        if $i0 < 16 goto label3;

        $i3 = r1.<android.util.TypedValue: int type>;

        if $i3 > 31 goto label3;

        i5 = r1.<android.util.TypedValue: int data>;

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return i5;

     label3:
        $i1 = r1.<android.util.TypedValue: int type>;

        if $i1 != 3 goto label5;

        $r10 = virtualinvoke r13.<android.content.res.ResourcesImpl: android.content.res.ColorStateList loadColorStateList(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>(r0, r1, i4, r12);

        i6 = virtualinvoke $r10.<android.content.res.ColorStateList: int getDefaultColor()>();

     label4:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return i6;

     label5:
        r14 = new android.content.res.Resources$NotFoundException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i4);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i2 = r1.<android.util.TypedValue: int type>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r9 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r9);

        throw r14;

     label6:
        $r11 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public android.content.res.ColorStateList getColorStateList(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ColorStateList r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>(i0, null);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.content.res.ColorStateList: boolean canApplyTheme()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ColorStateList ");

        $r5 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has unresolved theme attributes! Consider using Resources.getColorStateList(int, Theme) or Context.getColorStateList(int).");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Resources", $r8, $r9);

     label1:
        return r1;
    }

    public android.content.res.ColorStateList getColorStateList(int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.util.TypedValue r1;
        android.content.res.ResourcesImpl r2;
        java.lang.Throwable $r3;
        android.content.res.Resources$Theme r4;
        android.content.res.ColorStateList r5;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r4 := @parameter1: android.content.res.Resources$Theme;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke r2.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        r5 = virtualinvoke r2.<android.content.res.ResourcesImpl: android.content.res.ColorStateList loadColorStateList(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>(r0, r1, i0, r4);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return r5;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.content.res.CompatibilityInfo getCompatibilityInfo()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.CompatibilityInfo $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        return $r2;
    }

    public android.content.res.Configuration getConfiguration()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.Configuration $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.Configuration getConfiguration()>();

        return $r2;
    }

    public float getDimension(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, $i1, $i2, $i3;
        android.util.TypedValue r1;
        float f0;
        android.content.res.Resources$NotFoundException r2;
        java.lang.String $r4, $r7, $r10;
        android.util.DisplayMetrics $r11;
        java.lang.Throwable $r12;
        android.content.res.ResourcesImpl r13;
        java.lang.StringBuilder r14;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r13 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke r13.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        $i1 = r1.<android.util.TypedValue: int type>;

        if $i1 != 5 goto label3;

        $i3 = r1.<android.util.TypedValue: int data>;

        $r11 = virtualinvoke r13.<android.content.res.ResourcesImpl: android.util.DisplayMetrics getDisplayMetrics()>();

        f0 = staticinvoke <android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>($i3, $r11);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return f0;

     label3:
        r2 = new android.content.res.Resources$NotFoundException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i2 = r1.<android.util.TypedValue: int type>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r10 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r10);

        throw r2;

     label4:
        $r12 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public int getDimensionPixelOffset(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        android.content.res.Resources$NotFoundException r2;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r4, $r7, $r10;
        android.util.DisplayMetrics $r11;
        java.lang.Throwable $r12;
        android.content.res.ResourcesImpl r13;
        java.lang.StringBuilder r14;

        r0 := @this: android.content.res.Resources;

        i3 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r13 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke r13.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i3, r1, 1);

        $i0 = r1.<android.util.TypedValue: int type>;

        if $i0 != 5 goto label3;

        $i2 = r1.<android.util.TypedValue: int data>;

        $r11 = virtualinvoke r13.<android.content.res.ResourcesImpl: android.util.DisplayMetrics getDisplayMetrics()>();

        i4 = staticinvoke <android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>($i2, $r11);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return i4;

     label3:
        r2 = new android.content.res.Resources$NotFoundException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i1 = r1.<android.util.TypedValue: int type>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r10 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r10);

        throw r2;

     label4:
        $r12 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public int getDimensionPixelSize(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        java.lang.StringBuilder r2;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r4, $r7, $r10;
        android.util.DisplayMetrics $r11;
        java.lang.Throwable $r12;
        android.content.res.ResourcesImpl r13;
        android.content.res.Resources$NotFoundException r14;

        r0 := @this: android.content.res.Resources;

        i3 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r13 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke r13.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i3, r1, 1);

        $i0 = r1.<android.util.TypedValue: int type>;

        if $i0 != 5 goto label3;

        $i2 = r1.<android.util.TypedValue: int data>;

        $r11 = virtualinvoke r13.<android.content.res.ResourcesImpl: android.util.DisplayMetrics getDisplayMetrics()>();

        i4 = staticinvoke <android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>($i2, $r11);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return i4;

     label3:
        r14 = new android.content.res.Resources$NotFoundException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i1 = r1.<android.util.TypedValue: int type>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r10);

        throw r14;

     label4:
        $r12 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public android.view.DisplayAdjustments getDisplayAdjustments()
    {
        android.content.res.Resources r0;
        android.view.DisplayAdjustments r1, $r3;
        android.content.res.ResourcesImpl $r2;

        r0 := @this: android.content.res.Resources;

        r1 = r0.<android.content.res.Resources: android.view.DisplayAdjustments mOverrideDisplayAdjustments>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r3 = virtualinvoke $r2.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments getDisplayAdjustments()>();

        return $r3;
    }

    public android.util.DisplayMetrics getDisplayMetrics()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.util.DisplayMetrics $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.util.DisplayMetrics getDisplayMetrics()>();

        return $r2;
    }

    public android.graphics.drawable.Drawable getDrawable(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>(i0, null);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drawable ");

        $r5 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has unresolved theme attributes! Consider using Resources.getDrawable(int, Theme) or Context.getDrawable(int).");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Resources", $r8, $r9);

     label1:
        return r1;
    }

    public android.graphics.drawable.Drawable getDrawable(int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Resources$Theme;

        $r2 = virtualinvoke r0.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)>(i0, 0, r1);

        return $r2;
    }

    public android.graphics.drawable.Drawable getDrawableForDensity(int, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, i1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)>(i0, i1, null);

        return $r1;
    }

    public android.graphics.drawable.Drawable getDrawableForDensity(int, int, android.content.res.Resources$Theme)
    {
        android.content.res.Resources r0;
        int i0, i1;
        android.util.TypedValue r1;
        android.content.res.ResourcesImpl $r2;
        java.lang.Throwable $r3;
        android.content.res.Resources$Theme r4;
        android.graphics.drawable.Drawable r5;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: android.content.res.Resources$Theme;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r2.<android.content.res.ResourcesImpl: void getValueForDensity(int,int,android.util.TypedValue,boolean)>(i0, i1, r1, 1);

        r5 = virtualinvoke r0.<android.content.res.Resources: android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue,int,int,android.content.res.Resources$Theme)>(r1, i0, i1, r4);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return r5;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final android.graphics.drawable.DrawableInflater getDrawableInflater()
    {
        android.content.res.Resources r0;
        android.graphics.drawable.DrawableInflater $r1, $r2, $r3;
        java.lang.ClassLoader $r4;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.graphics.drawable.DrawableInflater mDrawableInflater>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.drawable.DrawableInflater;

        $r4 = r0.<android.content.res.Resources: java.lang.ClassLoader mClassLoader>;

        specialinvoke $r3.<android.graphics.drawable.DrawableInflater: void <init>(android.content.res.Resources,java.lang.ClassLoader)>(r0, $r4);

        r0.<android.content.res.Resources: android.graphics.drawable.DrawableInflater mDrawableInflater> = $r3;

     label1:
        $r2 = r0.<android.content.res.Resources: android.graphics.drawable.DrawableInflater mDrawableInflater>;

        return $r2;
    }

    public float getFloat(int)
    {
        android.content.res.Resources r0;
        int i0, $i1, $i2;
        android.util.TypedValue r1;
        float f0;
        android.content.res.Resources$NotFoundException r2;
        android.content.res.ResourcesImpl $r3;
        java.lang.String $r5, $r8, $r11;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r13;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r3.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        $i1 = r1.<android.util.TypedValue: int type>;

        if $i1 != 4 goto label3;

        f0 = virtualinvoke r1.<android.util.TypedValue: float getFloat()>();

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return f0;

     label3:
        r2 = new android.content.res.Resources$NotFoundException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i2 = r1.<android.util.TypedValue: int type>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r11 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r11);

        throw r2;

     label4:
        $r12 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public android.graphics.Typeface getFont(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r6;
        android.content.res.Resources$NotFoundException $r5;
        java.lang.Throwable $r7;
        android.util.TypedValue r8;
        android.content.res.ResourcesImpl r9;
        android.graphics.Typeface r10;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r8 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r9 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke r9.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r8, 1);

        r10 = virtualinvoke r9.<android.content.res.ResourcesImpl: android.graphics.Typeface loadFont(android.content.res.Resources,android.util.TypedValue,int)>(r0, r8, i0);

     label2:
        if r10 == null goto label3;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r8);

        return r10;

     label3:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r8);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font resource ID #0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = new android.content.res.Resources$NotFoundException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label4:
        $r7 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    android.graphics.Typeface getFont(android.util.TypedValue, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        int i0;
        android.content.res.ResourcesImpl $r2;
        android.graphics.Typeface $r3;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.util.TypedValue;

        i0 := @parameter1: int;

        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r3 = virtualinvoke $r2.<android.content.res.ResourcesImpl: android.graphics.Typeface loadFont(android.content.res.Resources,android.util.TypedValue,int)>(r0, r1, i0);

        return $r3;
    }

    public float getFraction(int, int, int)
    {
        android.content.res.Resources r0;
        int i0, i1, i2, $i3, $i4, $i5;
        android.util.TypedValue r1;
        float f0, $f1, $f2;
        java.lang.StringBuilder r2;
        android.content.res.ResourcesImpl $r3;
        java.lang.String $r5, $r8, $r11;
        java.lang.Throwable $r12;
        android.content.res.Resources$NotFoundException r13;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r3.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        $i3 = r1.<android.util.TypedValue: int type>;

        if $i3 != 6 goto label3;

        $i5 = r1.<android.util.TypedValue: int data>;

        $f2 = (float) i1;

        $f1 = (float) i2;

        f0 = staticinvoke <android.util.TypedValue: float complexToFraction(int,float,float)>($i5, $f2, $f1);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return f0;

     label3:
        r13 = new android.content.res.Resources$NotFoundException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i4 = r1.<android.util.TypedValue: int type>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r11);

        throw r13;

     label4:
        $r12 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public int getIdentifier(java.lang.String, java.lang.String, java.lang.String)
    {
        android.content.res.Resources r0;
        java.lang.String r1, r2, r3;
        android.content.res.ResourcesImpl $r4;
        int $i0;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $i0 = virtualinvoke $r4.<android.content.res.ResourcesImpl: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $i0;
    }

    public android.content.res.ResourcesImpl getImpl()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        return $r1;
    }

    public int[] getIntArray(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.AssetManager $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        android.content.res.Resources$NotFoundException $r7;
        int[] r9;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        r9 = virtualinvoke $r2.<android.content.res.AssetManager: int[] getResourceIntArray(int)>(i0);

        if r9 == null goto label1;

        return r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Int array resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new android.content.res.Resources$NotFoundException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public int getInteger(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        java.lang.StringBuilder r2;
        android.content.res.ResourcesImpl $r3;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r5, $r8, $r11;
        java.lang.Throwable $r12;
        android.content.res.Resources$NotFoundException r13;

        r0 := @this: android.content.res.Resources;

        i3 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r3.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i3, r1, 1);

        $i0 = r1.<android.util.TypedValue: int type>;

        if $i0 < 16 goto label3;

        $i2 = r1.<android.util.TypedValue: int type>;

        if $i2 > 31 goto label3;

        i4 = r1.<android.util.TypedValue: int data>;

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return i4;

     label3:
        r13 = new android.content.res.Resources$NotFoundException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i1 = r1.<android.util.TypedValue: int type>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r11);

        throw r13;

     label4:
        $r12 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public java.lang.String getLastResourceResolution() throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        java.lang.String $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: java.lang.String getLastResourceResolution()>();

        return $r2;
    }

    public android.content.res.XmlResourceParser getLayout(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.XmlResourceParser $r1;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)>(i0, "layout");

        return $r1;
    }

    public java.util.List getLoaders()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.AssetManager $r2;
        java.util.List $r3;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        $r3 = virtualinvoke $r2.<android.content.res.AssetManager: java.util.List getLoaders()>();

        return $r3;
    }

    public android.graphics.Movie getMovie(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.graphics.Movie r1;
        java.lang.Throwable $r2;
        java.io.InputStream r3;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r3 = virtualinvoke r0.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

        r1 = staticinvoke <android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>(r3);

     label1:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.util.LongSparseArray getPreloadedDrawables()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.util.LongSparseArray $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.util.LongSparseArray getPreloadedDrawables()>();

        return $r2;
    }

    public java.lang.String getQuantityString(int, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, i1;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>(i0, i1);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public transient java.lang.String getQuantityString(int, int, java.lang.Object[]) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, i1;
        java.lang.Object[] r1;
        java.lang.String r2, $r8;
        java.lang.CharSequence $r3;
        android.content.res.ResourcesImpl $r4;
        android.content.res.Configuration $r5;
        android.os.LocaleList $r6;
        java.util.Locale $r7;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        $r3 = virtualinvoke r0.<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>(i0, i1);

        r2 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        $r4 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r5 = virtualinvoke $r4.<android.content.res.ResourcesImpl: android.content.res.Configuration getConfiguration()>();

        $r6 = virtualinvoke $r5.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $r7 = virtualinvoke $r6.<android.os.LocaleList: java.util.Locale get(int)>(0);

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r7, r2, r1);

        return $r8;
    }

    public java.lang.CharSequence getQuantityText(int, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, i1;
        android.content.res.ResourcesImpl $r1;
        java.lang.CharSequence $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: java.lang.CharSequence getQuantityText(int,int)>(i0, i1);

        return $r2;
    }

    public java.lang.String getResourceEntryName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        java.lang.String $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: java.lang.String getResourceEntryName(int)>(i0);

        return $r2;
    }

    public java.lang.String getResourceName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        java.lang.String $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>(i0);

        return $r2;
    }

    public java.lang.String getResourcePackageName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        java.lang.String $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: java.lang.String getResourcePackageName(int)>(i0);

        return $r2;
    }

    public java.lang.String getResourceTypeName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        java.lang.String $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: java.lang.String getResourceTypeName(int)>(i0);

        return $r2;
    }

    public android.content.res.Configuration[] getSizeConfigurations()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.Configuration[] $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.Configuration[] getSizeConfigurations()>();

        return $r2;
    }

    public android.content.res.ConfigurationBoundResourceCache getStateListAnimatorCache()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.ConfigurationBoundResourceCache $r2;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache getStateListAnimatorCache()>();

        return $r2;
    }

    public java.lang.String getString(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.content.res.Resources: java.lang.CharSequence getText(int)>(i0);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public transient java.lang.String getString(int, java.lang.Object[]) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        java.lang.Object[] r1;
        java.lang.String r2, $r7;
        android.content.res.ResourcesImpl $r3;
        android.content.res.Configuration $r4;
        android.os.LocaleList $r5;
        java.util.Locale $r6;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object[];

        r2 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getString(int)>(i0);

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r4 = virtualinvoke $r3.<android.content.res.ResourcesImpl: android.content.res.Configuration getConfiguration()>();

        $r5 = virtualinvoke $r4.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $r6 = virtualinvoke $r5.<android.os.LocaleList: java.util.Locale get(int)>(0);

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, r2, r1);

        return $r7;
    }

    public java.lang.String[] getStringArray(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.AssetManager $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        android.content.res.Resources$NotFoundException $r7;
        java.lang.String[] r9;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        r9 = virtualinvoke $r2.<android.content.res.AssetManager: java.lang.String[] getResourceStringArray(int)>(i0);

        if r9 == null goto label1;

        return r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String array resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new android.content.res.Resources$NotFoundException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public java.lang.CharSequence getText(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.AssetManager $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        android.content.res.Resources$NotFoundException $r7;
        java.lang.CharSequence r9;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        r9 = virtualinvoke $r2.<android.content.res.AssetManager: java.lang.CharSequence getResourceText(int)>(i0);

        if r9 == null goto label1;

        return r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new android.content.res.Resources$NotFoundException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public java.lang.CharSequence getText(int, java.lang.CharSequence)
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.AssetManager $r2;
        java.lang.CharSequence r3, r4;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.CharSequence;

        if i0 == 0 goto label1;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        r4 = virtualinvoke $r2.<android.content.res.AssetManager: java.lang.CharSequence getResourceText(int)>(i0);

        goto label2;

     label1:
        r4 = null;

     label2:
        if r4 == null goto label3;

        r3 = r4;

        goto label3;

     label3:
        return r3;
    }

    public java.lang.CharSequence[] getTextArray(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.ResourcesImpl $r1;
        android.content.res.AssetManager $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        android.content.res.Resources$NotFoundException $r7;
        java.lang.CharSequence[] r9;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke $r1.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        r9 = virtualinvoke $r2.<android.content.res.AssetManager: java.lang.CharSequence[] getResourceTextArray(int)>(i0);

        if r9 == null goto label1;

        return r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Text array resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new android.content.res.Resources$NotFoundException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void getValue(int, android.util.TypedValue, boolean) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.util.TypedValue r1;
        boolean z0;
        android.content.res.ResourcesImpl $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.TypedValue;

        z0 := @parameter2: boolean;

        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r2.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, z0);

        return;
    }

    public void getValue(java.lang.String, android.util.TypedValue, boolean) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        java.lang.String r1;
        android.util.TypedValue r2;
        boolean z0;
        android.content.res.ResourcesImpl $r3;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.util.TypedValue;

        z0 := @parameter2: boolean;

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r3.<android.content.res.ResourcesImpl: void getValue(java.lang.String,android.util.TypedValue,boolean)>(r1, r2, z0);

        return;
    }

    public void getValueForDensity(int, int, android.util.TypedValue, boolean) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, i1;
        android.util.TypedValue r1;
        boolean z0;
        android.content.res.ResourcesImpl $r2;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.util.TypedValue;

        z0 := @parameter3: boolean;

        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r2.<android.content.res.ResourcesImpl: void getValueForDensity(int,int,android.util.TypedValue,boolean)>(i0, i1, r1, z0);

        return;
    }

    public android.content.res.XmlResourceParser getXml(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.content.res.XmlResourceParser $r1;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)>(i0, "xml");

        return $r1;
    }

    public boolean hasOverrideDisplayAdjustments()
    {
        android.content.res.Resources r0;
        android.view.DisplayAdjustments $r1;
        boolean z0;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.view.DisplayAdjustments mOverrideDisplayAdjustments>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    android.content.res.ColorStateList loadColorStateList(android.util.TypedValue, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        int i0;
        android.content.res.Resources$Theme r2;
        android.content.res.ResourcesImpl $r3;
        android.content.res.ColorStateList $r4;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.util.TypedValue;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.res.Resources$Theme;

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r4 = virtualinvoke $r3.<android.content.res.ResourcesImpl: android.content.res.ColorStateList loadColorStateList(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>(r0, r1, i0, r2);

        return $r4;
    }

    public android.content.res.ComplexColor loadComplexColor(android.util.TypedValue, int, android.content.res.Resources$Theme)
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        int i0;
        android.content.res.Resources$Theme r2;
        android.content.res.ResourcesImpl $r3;
        android.content.res.ComplexColor $r4;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.util.TypedValue;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.res.Resources$Theme;

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r4 = virtualinvoke $r3.<android.content.res.ResourcesImpl: android.content.res.ComplexColor loadComplexColor(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>(r0, r1, i0, r2);

        return $r4;
    }

    android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue, int, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        int i0, i1;
        android.content.res.Resources$Theme r2;
        android.content.res.ResourcesImpl $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.util.TypedValue;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.res.Resources$Theme;

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r4 = virtualinvoke $r3.<android.content.res.ResourcesImpl: android.graphics.drawable.Drawable loadDrawable(android.content.res.Resources,android.util.TypedValue,int,int,android.content.res.Resources$Theme)>(r0, r1, i0, i1, r2);

        return $r4;
    }

    android.content.res.XmlResourceParser loadXmlResourceParser(int, java.lang.String) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, $i1, $i2, $i3;
        android.util.TypedValue r1;
        android.content.res.Resources$NotFoundException r2;
        android.content.res.ResourcesImpl $r3;
        java.lang.String $r5, $r8, $r11, $r13, r15;
        java.lang.CharSequence $r12;
        java.lang.Throwable $r14;
        android.content.res.XmlResourceParser r16;
        java.lang.StringBuilder r17;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r15 := @parameter1: java.lang.String;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r3.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

        $i1 = r1.<android.util.TypedValue: int type>;

        if $i1 != 3 goto label3;

        $r12 = r1.<android.util.TypedValue: java.lang.CharSequence string>;

        $r13 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

        $i3 = r1.<android.util.TypedValue: int assetCookie>;

        r16 = virtualinvoke r0.<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>($r13, i0, $i3, r15);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return r16;

     label3:
        r2 = new android.content.res.Resources$NotFoundException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type #0x");

        $i2 = r1.<android.util.TypedValue: int type>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r11 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r11);

        throw r2;

     label4:
        $r14 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String, int, int, java.lang.String) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        java.lang.String r1, r2;
        int i0, i1;
        android.content.res.ResourcesImpl $r3;
        android.content.res.XmlResourceParser $r4;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r4 = virtualinvoke $r3.<android.content.res.ResourcesImpl: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>(r1, i0, i1, r2);

        return $r4;
    }

    public final android.content.res.Resources$Theme newTheme()
    {
        android.content.res.Resources r0;
        java.util.ArrayList r1, r2, $r7, $r9, $r10;
        android.content.res.ResourcesImpl $r5;
        android.content.res.ResourcesImpl$ThemeImpl $r6;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.res.'-$$Lambda$Resources$4msWUw7LKsgLexLZjIfWa4oguq4' $r8;
        java.lang.Throwable $r11;
        android.content.res.Resources$Theme r14;
        java.lang.ref.WeakReference r15;
        java.util.function.Predicate r16;

        r0 := @this: android.content.res.Resources;

        r14 = new android.content.res.Resources$Theme;

        specialinvoke r14.<android.content.res.Resources$Theme: void <init>(android.content.res.Resources,android.content.res.Resources$1)>(r0, null);

        $r5 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r6 = virtualinvoke $r5.<android.content.res.ResourcesImpl: android.content.res.ResourcesImpl$ThemeImpl newThemeImpl()>();

        virtualinvoke r14.<android.content.res.Resources$Theme: void setImpl(android.content.res.ResourcesImpl$ThemeImpl)>($r6);

        r1 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        entermonitor r1;

     label1:
        r2 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        r15 = new java.lang.ref.WeakReference;

        specialinvoke r15.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r14);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r15);

        $r7 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $i1 = r0.<android.content.res.Resources: int mThemeRefsNextFlushSize>;

        if $i0 <= $i1 goto label2;

        $r9 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        $r8 = <android.content.res._$$Lambda$Resources$4msWUw7LKsgLexLZjIfWa4oguq4: android.content.res.'-$$Lambda$Resources$4msWUw7LKsgLexLZjIfWa4oguq4' INSTANCE>;

        r16 = (java.util.function.Predicate) $r8;

        virtualinvoke $r9.<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>(r16);

        $r10 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        $i2 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $i3 = $i2 * 2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(32, $i3);

        r0.<android.content.res.Resources: int mThemeRefsNextFlushSize> = $i4;

     label2:
        exitmonitor r1;

     label3:
        return r14;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet, int[])
    {
        android.content.res.Resources r0;
        int[] r1, $r5, $r6;
        android.content.res.TypedArray r2;
        int $i0;
        android.content.res.ResourcesImpl $r3;
        android.content.res.AssetManager $r4;
        android.util.AttributeSet r7;
        android.content.res.XmlBlock$Parser r8;

        r0 := @this: android.content.res.Resources;

        r7 := @parameter0: android.util.AttributeSet;

        r1 := @parameter1: int[];

        $i0 = lengthof r1;

        r2 = staticinvoke <android.content.res.TypedArray: android.content.res.TypedArray obtain(android.content.res.Resources,int)>(r0, $i0);

        r8 = (android.content.res.XmlBlock$Parser) r7;

        $r3 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r4 = virtualinvoke $r3.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        $r6 = r2.<android.content.res.TypedArray: int[] mData>;

        $r5 = r2.<android.content.res.TypedArray: int[] mIndices>;

        virtualinvoke $r4.<android.content.res.AssetManager: boolean retrieveAttributes(android.content.res.XmlBlock$Parser,int[],int[],int[])>(r8, r1, $r6, $r5);

        r2.<android.content.res.TypedArray: android.content.res.XmlBlock$Parser mXml> = r8;

        return r2;
    }

    public android.content.res.TypedArray obtainTypedArray(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0, i1, $i2;
        android.content.res.TypedArray r1;
        android.content.res.AssetManager $r2, $r9;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        android.content.res.Resources$NotFoundException $r7;
        int[] $r10, $r11;
        android.content.res.ResourcesImpl r12;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r12 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r2 = virtualinvoke r12.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        i1 = virtualinvoke $r2.<android.content.res.AssetManager: int getResourceArraySize(int)>(i0);

        if i1 < 0 goto label1;

        r1 = staticinvoke <android.content.res.TypedArray: android.content.res.TypedArray obtain(android.content.res.Resources,int)>(r0, i1);

        $r9 = virtualinvoke r12.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        $r10 = r1.<android.content.res.TypedArray: int[] mData>;

        $i2 = virtualinvoke $r9.<android.content.res.AssetManager: int getResourceArray(int,int[])>(i0, $r10);

        r1.<android.content.res.TypedArray: int mLength> = $i2;

        $r11 = r1.<android.content.res.TypedArray: int[] mIndices>;

        $r11[0] = 0;

        return r1;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new android.content.res.Resources$NotFoundException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public java.io.InputStream openRawResource(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.util.TypedValue r1;
        java.lang.Throwable $r2;
        java.io.InputStream r3;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        r3 = virtualinvoke r0.<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>(i0, r1);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return r3;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.io.InputStream openRawResource(int, android.util.TypedValue) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.util.TypedValue r1;
        android.content.res.ResourcesImpl $r2;
        java.io.InputStream $r3;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.TypedValue;

        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r3 = virtualinvoke $r2.<android.content.res.ResourcesImpl: java.io.InputStream openRawResource(int,android.util.TypedValue)>(i0, r1);

        return $r3;
    }

    public android.content.res.AssetFileDescriptor openRawResourceFd(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.Resources r0;
        int i0;
        android.util.TypedValue r1;
        android.content.res.ResourcesImpl $r2;
        java.lang.Throwable $r3;
        android.content.res.AssetFileDescriptor r4;

        r0 := @this: android.content.res.Resources;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.Resources: android.util.TypedValue obtainTempTypedValue()>();

     label1:
        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        r4 = virtualinvoke $r2.<android.content.res.ResourcesImpl: android.content.res.AssetFileDescriptor openRawResourceFd(int,android.util.TypedValue)>(i0, r1);

     label2:
        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        return r4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.content.res.Resources: void releaseTempTypedValue(android.util.TypedValue)>(r1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void overrideDisplayAdjustments(java.util.function.Consumer)
    {
        android.content.res.Resources r0;
        java.util.function.Consumer r1;
        android.view.DisplayAdjustments $r3, $r5;
        android.content.res.ResourcesImpl $r4;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: java.util.function.Consumer;

        if r1 == null goto label1;

        $r3 = new android.view.DisplayAdjustments;

        $r4 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r5 = virtualinvoke $r4.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments getDisplayAdjustments()>();

        specialinvoke $r3.<android.view.DisplayAdjustments: void <init>(android.view.DisplayAdjustments)>($r5);

        r0.<android.content.res.Resources: android.view.DisplayAdjustments mOverrideDisplayAdjustments> = $r3;

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

        goto label2;

     label1:
        r0.<android.content.res.Resources: android.view.DisplayAdjustments mOverrideDisplayAdjustments> = null;

     label2:
        return;
    }

    public void parseBundleExtra(java.lang.String, android.util.AttributeSet, android.os.Bundle) throws org.xmlpull.v1.XmlPullParserException
    {
        android.content.res.Resources r0;
        java.lang.String r1, r4, $r11, $r14, $r19, $r22, $r27, $r30;
        android.util.AttributeSet r2;
        android.content.res.TypedArray r3;
        android.util.TypedValue r5;
        int[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0;
        java.lang.CharSequence $r31;
        android.os.Bundle r32;
        boolean z0;
        java.lang.StringBuilder r36, r38, r40;
        org.xmlpull.v1.XmlPullParserException r37, r39, r41;
        java.lang.Throwable r42, r43, r44;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.util.AttributeSet;

        r32 := @parameter2: android.os.Bundle;

        $r6 = <com.android.internal.R$styleable: int[] Extra>;

        r3 = virtualinvoke r0.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r2, $r6);

        z0 = 0;

        r4 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r4 == null goto label8;

        r5 = virtualinvoke r3.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(1);

        if r5 == null goto label7;

        $i0 = r5.<android.util.TypedValue: int type>;

        if $i0 != 3 goto label1;

        $r31 = virtualinvoke r5.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        virtualinvoke r32.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>(r4, $r31);

        goto label5;

     label1:
        $i1 = r5.<android.util.TypedValue: int type>;

        if $i1 != 18 goto label3;

        $i6 = r5.<android.util.TypedValue: int data>;

        if $i6 == 0 goto label2;

        z0 = 1;

     label2:
        virtualinvoke r32.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r4, z0);

        goto label5;

     label3:
        $i2 = r5.<android.util.TypedValue: int type>;

        if $i2 < 16 goto label4;

        $i4 = r5.<android.util.TypedValue: int type>;

        if $i4 > 31 goto label4;

        $i5 = r5.<android.util.TypedValue: int data>;

        virtualinvoke r32.<android.os.Bundle: void putInt(java.lang.String,int)>(r4, $i5);

        goto label5;

     label4:
        $i3 = r5.<android.util.TypedValue: int type>;

        if $i3 != 4 goto label6;

        $f0 = virtualinvoke r5.<android.util.TypedValue: float getFloat()>();

        virtualinvoke r32.<android.os.Bundle: void putFloat(java.lang.String,float)>(r4, $f0);

     label5:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        return;

     label6:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> only supports string, integer, float, color, and boolean at ");

        $r27 = interfaceinvoke r2.<android.util.AttributeSet: java.lang.String getPositionDescription()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        r37 = new org.xmlpull.v1.XmlPullParserException;

        $r30 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r37.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r30);

        r42 = (java.lang.Throwable) r37;

        throw r42;

     label7:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> requires an android:value or android:resource attribute at ");

        $r19 = interfaceinvoke r2.<android.util.AttributeSet: java.lang.String getPositionDescription()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r39 = new org.xmlpull.v1.XmlPullParserException;

        $r22 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r39.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r22);

        r43 = (java.lang.Throwable) r39;

        throw r43;

     label8:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> requires an android:name attribute at ");

        $r11 = interfaceinvoke r2.<android.util.AttributeSet: java.lang.String getPositionDescription()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r41 = new org.xmlpull.v1.XmlPullParserException;

        $r14 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r41.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r14);

        r44 = (java.lang.Throwable) r41;

        throw r44;
    }

    public void parseBundleExtras(android.content.res.XmlResourceParser, android.os.Bundle) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        android.content.res.XmlResourceParser r1;
        android.os.Bundle r2;
        int i0, i1, $i2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.content.res.XmlResourceParser;

        r2 := @parameter1: android.os.Bundle;

        i0 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int getDepth()>();

     label1:
        i1 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int next()>();

        if i1 == 1 goto label6;

        if i1 != 3 goto label2;

        $i2 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int getDepth()>();

        if $i2 <= i0 goto label6;

     label2:
        if i1 == 3 goto label1;

        if i1 != 4 goto label3;

        goto label1;

     label3:
        $r3 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("extra");

        if $z0 == 0 goto label4;

        virtualinvoke r0.<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>("extra", r1, r2);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        goto label5;

     label4:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

     label5:
        goto label1;

     label6:
        return;
    }

    public void preloadFonts(int)
    {
        android.content.res.Resources r0;
        android.content.res.TypedArray r1;
        int i0, i1, i2;
        java.lang.Throwable $r4;

        r0 := @this: android.content.res.Resources;

        i1 := @parameter0: int;

        r1 = virtualinvoke r0.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(i1);

     label1:
        i0 = virtualinvoke r1.<android.content.res.TypedArray: int length()>();

     label2:
        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

     label4:
        virtualinvoke r1.<android.content.res.TypedArray: android.graphics.Typeface getFont(int)>(i2);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        return;

     label7:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public transient void removeLoaders(android.content.res.loader.ResourcesLoader[])
    {
        android.content.res.Resources r0;
        java.lang.Object r1, $r10;
        android.util.ArraySet r2;
        java.util.ArrayList r3;
        java.util.List r4;
        int i0, $i1, $i2, $i3, i4, i5;
        android.content.res.loader.ResourcesLoader r5, $r9;
        android.content.res.ResourcesImpl $r6;
        android.content.res.AssetManager $r7;
        android.content.res.Resources$UpdateCallbacks $r8;
        boolean $z0;
        java.lang.Throwable $r11;
        android.content.res.loader.ResourcesLoader[] r12;

        r0 := @this: android.content.res.Resources;

        r12 := @parameter0: android.content.res.loader.ResourcesLoader[];

        r1 = r0.<android.content.res.Resources: java.lang.Object mUpdateLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.content.res.Resources: void checkCallbacksRegistered()>();

        r2 = new android.util.ArraySet;

        specialinvoke r2.<android.util.ArraySet: void <init>(java.lang.Object[])>(r12);

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r7 = virtualinvoke $r6.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        r4 = virtualinvoke $r7.<android.content.res.AssetManager: java.util.List getLoaders()>();

     label02:
        i4 = 0;

     label03:
        i0 = interfaceinvoke r4.<java.util.List: int size()>();

     label04:
        if i4 >= i0 goto label07;

     label05:
        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i4);

        r5 = (android.content.res.loader.ResourcesLoader) $r10;

        $z0 = virtualinvoke r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label06;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r5);

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 != $i2 goto label09;

        exitmonitor r1;

     label08:
        return;

     label09:
        $r8 = r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks>;

        interfaceinvoke $r8.<android.content.res.Resources$UpdateCallbacks: void onLoadersChanged(android.content.res.Resources,java.util.List)>(r0, r3);

     label10:
        i5 = 0;

     label11:
        $i3 = lengthof r12;

        if i5 >= $i3 goto label13;

        $r9 = r12[i5];

        virtualinvoke $r9.<android.content.res.loader.ResourcesLoader: void unregisterOnProvidersChangedCallback(java.lang.Object)>(r0);

     label12:
        i5 = i5 + 1;

        goto label11;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r11 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void setCallbacks(android.content.res.Resources$UpdateCallbacks)
    {
        android.content.res.Resources r0;
        android.content.res.Resources$UpdateCallbacks r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.content.res.Resources$UpdateCallbacks;

        $r2 = r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks>;

        if $r2 != null goto label1;

        r0.<android.content.res.Resources: android.content.res.Resources$UpdateCallbacks mCallbacks> = r1;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("callback already registered");

        throw $r3;
    }

    public void setCompatibilityInfo(android.content.res.CompatibilityInfo)
    {
        android.content.res.Resources r0;
        android.content.res.CompatibilityInfo r1;
        android.content.res.ResourcesImpl $r2;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.content.res.CompatibilityInfo;

        if r1 == null goto label1;

        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r2.<android.content.res.ResourcesImpl: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>(null, null, r1);

     label1:
        return;
    }

    public void setImpl(android.content.res.ResourcesImpl)
    {
        android.content.res.Resources r0;
        java.util.ArrayList r1, $r5, $r6;
        int i0, $i1, i2;
        android.content.res.ResourcesImpl $r2, $r8, r13;
        android.content.res.AssetManager $r3;
        android.content.res.ApkAssets[] $r4;
        java.lang.Object $r7, $r11;
        android.content.res.Resources$ThemeKey $r9;
        android.content.res.ResourcesImpl$ThemeImpl $r10;
        java.lang.Throwable $r12;
        java.lang.ref.WeakReference r14;
        android.content.res.Resources$Theme r15;

        r0 := @this: android.content.res.Resources;

        r13 := @parameter0: android.content.res.ResourcesImpl;

        $r2 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        if r13 != $r2 goto label01;

        return;

     label01:
        $r3 = virtualinvoke r13.<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()>();

        $r4 = virtualinvoke $r3.<android.content.res.AssetManager: android.content.res.ApkAssets[] getApkAssets()>();

        $i1 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.lang.Object[])>($r4);

        r0.<android.content.res.Resources: int mBaseApkAssetsSize> = $i1;

        r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl> = r13;

        r1 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        entermonitor r1;

     label02:
        $r5 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label13;

     label05:
        $r6 = r0.<android.content.res.Resources: java.util.ArrayList mThemeRefs>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r14 = (java.lang.ref.WeakReference) $r7;

     label06:
        if r14 == null goto label09;

     label07:
        $r11 = virtualinvoke r14.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r15 = (android.content.res.Resources$Theme) $r11;

     label08:
        goto label10;

     label09:
        r15 = null;

     label10:
        if r15 == null goto label12;

     label11:
        $r8 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        $r9 = virtualinvoke r15.<android.content.res.Resources$Theme: android.content.res.Resources$ThemeKey getKey()>();

        $r10 = virtualinvoke $r8.<android.content.res.ResourcesImpl: android.content.res.ResourcesImpl$ThemeImpl newThemeImpl(android.content.res.Resources$ThemeKey)>($r9);

        virtualinvoke r15.<android.content.res.Resources$Theme: void setImpl(android.content.res.ResourcesImpl$ThemeImpl)>($r10);

     label12:
        i2 = i2 + 1;

        goto label04;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r12 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public final void startPreloading()
    {
        android.content.res.Resources r0;
        android.content.res.ResourcesImpl $r1;

        r0 := @this: android.content.res.Resources;

        $r1 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r1.<android.content.res.ResourcesImpl: void startPreloading()>();

        return;
    }

    public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics)
    {
        android.content.res.Resources r0;
        android.content.res.Configuration r1;
        android.util.DisplayMetrics r2;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.util.DisplayMetrics;

        virtualinvoke r0.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>(r1, r2, null);

        return;
    }

    public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo)
    {
        android.content.res.Resources r0;
        android.content.res.Configuration r1;
        android.util.DisplayMetrics r2;
        android.content.res.CompatibilityInfo r3;
        android.content.res.ResourcesImpl $r4;

        r0 := @this: android.content.res.Resources;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.util.DisplayMetrics;

        r3 := @parameter2: android.content.res.CompatibilityInfo;

        $r4 = r0.<android.content.res.Resources: android.content.res.ResourcesImpl mResourcesImpl>;

        virtualinvoke $r4.<android.content.res.ResourcesImpl: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>(r1, r2, r3);

        return;
    }
}
