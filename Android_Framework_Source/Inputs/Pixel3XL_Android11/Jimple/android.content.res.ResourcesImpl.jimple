public class android.content.res.ResourcesImpl extends java.lang.Object
{
    private static final boolean DEBUG_CONFIG;
    private static final boolean DEBUG_LOAD;
    private static final int ID_OTHER;
    static final java.lang.String TAG;
    static final java.lang.String TAG_PRELOAD;
    public static final boolean TRACE_FOR_DETAILED_PRELOAD;
    private static final boolean TRACE_FOR_MISS_PRELOAD;
    private static final boolean TRACE_FOR_PRELOAD;
    private static final int XML_BLOCK_CACHE_SIZE;
    private static int sPreloadTracingNumLoadedDrawables;
    private static boolean sPreloaded;
    private static final android.util.LongSparseArray sPreloadedColorDrawables;
    private static final android.util.LongSparseArray sPreloadedComplexColors;
    private static final android.util.LongSparseArray[] sPreloadedDrawables;
    private static final java.lang.Object sSync;
    private final java.lang.Object mAccessLock;
    private final android.content.res.ConfigurationBoundResourceCache mAnimatorCache;
    final android.content.res.AssetManager mAssets;
    private final int[] mCachedXmlBlockCookies;
    private final java.lang.String[] mCachedXmlBlockFiles;
    private final android.content.res.XmlBlock[] mCachedXmlBlocks;
    private final android.content.res.DrawableCache mColorDrawableCache;
    private final android.content.res.ConfigurationBoundResourceCache mComplexColorCache;
    private final android.content.res.Configuration mConfiguration;
    private final android.view.DisplayAdjustments mDisplayAdjustments;
    private final android.content.res.DrawableCache mDrawableCache;
    private int mLastCachedXmlBlockIndex;
    private final java.lang.ThreadLocal mLookupStack;
    private final android.util.DisplayMetrics mMetrics;
    private android.icu.text.PluralRules mPluralRule;
    private long mPreloadTracingPreloadStartTime;
    private long mPreloadTracingStartBitmapCount;
    private long mPreloadTracingStartBitmapSize;
    private boolean mPreloading;
    private final android.content.res.ConfigurationBoundResourceCache mStateListAnimatorCache;
    private final android.content.res.Configuration mTmpConfig;

    static void <clinit>()
    {
        android.util.LongSparseArray[] r0, $r6;
        boolean $z0;
        java.lang.Object $r1;
        android.util.LongSparseArray $r2, $r3, $r4, $r5;

        <android.content.res.ResourcesImpl: int XML_BLOCK_CACHE_SIZE> = 4;

        <android.content.res.ResourcesImpl: boolean TRACE_FOR_PRELOAD> = 0;

        <android.content.res.ResourcesImpl: boolean TRACE_FOR_MISS_PRELOAD> = 0;

        <android.content.res.ResourcesImpl: java.lang.String TAG_PRELOAD> = "Resources.preload";

        <android.content.res.ResourcesImpl: java.lang.String TAG> = "Resources";

        <android.content.res.ResourcesImpl: int ID_OTHER> = 16777220;

        <android.content.res.ResourcesImpl: boolean DEBUG_LOAD> = 0;

        <android.content.res.ResourcesImpl: boolean DEBUG_CONFIG> = 0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.trace_resource_preload", 0);

        <android.content.res.ResourcesImpl: boolean TRACE_FOR_DETAILED_PRELOAD> = $z0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.content.res.ResourcesImpl: java.lang.Object sSync> = $r1;

        $r2 = new android.util.LongSparseArray;

        specialinvoke $r2.<android.util.LongSparseArray: void <init>()>();

        <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedColorDrawables> = $r2;

        $r3 = new android.util.LongSparseArray;

        specialinvoke $r3.<android.util.LongSparseArray: void <init>()>();

        <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedComplexColors> = $r3;

        r0 = newarray (android.util.LongSparseArray)[2];

        <android.content.res.ResourcesImpl: android.util.LongSparseArray[] sPreloadedDrawables> = r0;

        $r4 = new android.util.LongSparseArray;

        specialinvoke $r4.<android.util.LongSparseArray: void <init>()>();

        r0[0] = $r4;

        $r6 = <android.content.res.ResourcesImpl: android.util.LongSparseArray[] sPreloadedDrawables>;

        $r5 = new android.util.LongSparseArray;

        specialinvoke $r5.<android.util.LongSparseArray: void <init>()>();

        $r6[1] = $r5;

        return;
    }

    public void <init>(android.content.res.AssetManager, android.util.DisplayMetrics, android.content.res.Configuration, android.view.DisplayAdjustments)
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.AssetManager r1;
        android.util.DisplayMetrics r2, $r19, r29;
        android.content.res.Configuration r3, $r20, r23, r30;
        android.view.DisplayAdjustments r4;
        android.content.res.'-$$Lambda$ResourcesImpl$h3PTRX185BeQl8SVC2_w9arp5Og' $r12;
        java.lang.ThreadLocal $r13;
        int[] $r14;
        java.lang.String[] $r15;
        android.content.res.XmlBlock[] $r16;
        android.content.res.CompatibilityInfo $r21;
        java.lang.Object r22;
        android.content.res.DrawableCache r24, r25;
        android.content.res.ConfigurationBoundResourceCache r26, r27, r28;
        java.util.function.Supplier r31;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 := @parameter0: android.content.res.AssetManager;

        r2 := @parameter1: android.util.DisplayMetrics;

        r3 := @parameter2: android.content.res.Configuration;

        r4 := @parameter3: android.view.DisplayAdjustments;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r22 = new java.lang.Object;

        specialinvoke r22.<java.lang.Object: void <init>()>();

        r0.<android.content.res.ResourcesImpl: java.lang.Object mAccessLock> = r22;

        r23 = new android.content.res.Configuration;

        specialinvoke r23.<android.content.res.Configuration: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mTmpConfig> = r23;

        r24 = new android.content.res.DrawableCache;

        specialinvoke r24.<android.content.res.DrawableCache: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mDrawableCache> = r24;

        r25 = new android.content.res.DrawableCache;

        specialinvoke r25.<android.content.res.DrawableCache: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mColorDrawableCache> = r25;

        r26 = new android.content.res.ConfigurationBoundResourceCache;

        specialinvoke r26.<android.content.res.ConfigurationBoundResourceCache: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mComplexColorCache> = r26;

        r27 = new android.content.res.ConfigurationBoundResourceCache;

        specialinvoke r27.<android.content.res.ConfigurationBoundResourceCache: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mAnimatorCache> = r27;

        r28 = new android.content.res.ConfigurationBoundResourceCache;

        specialinvoke r28.<android.content.res.ConfigurationBoundResourceCache: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mStateListAnimatorCache> = r28;

        $r12 = <android.content.res._$$Lambda$ResourcesImpl$h3PTRX185BeQl8SVC2_w9arp5Og: android.content.res.'-$$Lambda$ResourcesImpl$h3PTRX185BeQl8SVC2_w9arp5Og' INSTANCE>;

        r31 = (java.util.function.Supplier) $r12;

        $r13 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>(r31);

        r0.<android.content.res.ResourcesImpl: java.lang.ThreadLocal mLookupStack> = $r13;

        r0.<android.content.res.ResourcesImpl: int mLastCachedXmlBlockIndex> = -1;

        $r14 = newarray (int)[4];

        r0.<android.content.res.ResourcesImpl: int[] mCachedXmlBlockCookies> = $r14;

        $r15 = newarray (java.lang.String)[4];

        r0.<android.content.res.ResourcesImpl: java.lang.String[] mCachedXmlBlockFiles> = $r15;

        $r16 = newarray (android.content.res.XmlBlock)[4];

        r0.<android.content.res.ResourcesImpl: android.content.res.XmlBlock[] mCachedXmlBlocks> = $r16;

        r29 = new android.util.DisplayMetrics;

        specialinvoke r29.<android.util.DisplayMetrics: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics> = r29;

        r30 = new android.content.res.Configuration;

        specialinvoke r30.<android.content.res.Configuration: void <init>()>();

        r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration> = r30;

        r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets> = r1;

        $r19 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        virtualinvoke $r19.<android.util.DisplayMetrics: void setToDefaults()>();

        r0.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments mDisplayAdjustments> = r4;

        $r20 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        virtualinvoke $r20.<android.content.res.Configuration: void setToDefaults()>();

        $r21 = virtualinvoke r4.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        virtualinvoke r0.<android.content.res.ResourcesImpl: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>(r3, r2, $r21);

        return;
    }

    private static java.lang.String adjustLanguageTag(java.lang.String)
    {
        int i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r4, r5, r7, r8;

        r5 := @parameter0: java.lang.String;

        i0 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(45);

        if i0 != -1 goto label1;

        r7 = r5;

        r8 = "";

        goto label2;

     label1:
        r7 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r8 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(i0);

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <java.util.Locale: java.lang.String adjustLanguageCode(java.lang.String)>(r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static int attrForQuantityCode(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte b1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 101272: goto label06;
            case 110182: goto label05;
            case 115276: goto label04;
            case 3343967: goto label03;
            case 3735208: goto label02;
            default: goto label01;
        };

     label01:
        goto label07;

     label02:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("zero");

        if $z0 == 0 goto label01;

        b1 = 0;

        goto label08;

     label03:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("many");

        if $z1 == 0 goto label01;

        b1 = 4;

        goto label08;

     label04:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("two");

        if $z2 == 0 goto label01;

        b1 = 2;

        goto label08;

     label05:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("one");

        if $z3 == 0 goto label01;

        b1 = 1;

        goto label08;

     label06:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("few");

        if $z4 == 0 goto label01;

        b1 = 3;

        goto label08;

     label07:
        b1 = -1;

     label08:
        if b1 == 0 goto label13;

        if b1 == 1 goto label12;

        if b1 == 2 goto label11;

        if b1 == 3 goto label10;

        if b1 == 4 goto label09;

        return 16777220;

     label09:
        return 16777225;

     label10:
        return 16777224;

     label11:
        return 16777223;

     label12:
        return 16777222;

     label13:
        return 16777221;
    }

    private void cacheDrawable(android.util.TypedValue, boolean, android.content.res.DrawableCache, android.content.res.Resources$Theme, boolean, long, android.graphics.drawable.Drawable)
    {
        android.content.res.ResourcesImpl r0;
        boolean z0, z1, $z2, $z3, $z4;
        android.content.res.Resources$Theme r1;
        long l0;
        int i1, $i2, $i3, $i4, $i5;
        android.content.res.Configuration $r2;
        android.util.LongSparseArray[] $r3, $r5, $r7;
        android.util.LongSparseArray $r4, $r6, $r8, $r9;
        java.lang.Throwable $r10;
        android.util.TypedValue r11;
        android.content.res.DrawableCache r12;
        android.graphics.drawable.Drawable r13;
        android.graphics.drawable.Drawable$ConstantState r14;
        java.lang.Object r15;

        r0 := @this: android.content.res.ResourcesImpl;

        r11 := @parameter0: android.util.TypedValue;

        z0 := @parameter1: boolean;

        r12 := @parameter2: android.content.res.DrawableCache;

        r1 := @parameter3: android.content.res.Resources$Theme;

        z1 := @parameter4: boolean;

        l0 := @parameter5: long;

        r13 := @parameter6: android.graphics.drawable.Drawable;

        r14 = virtualinvoke r13.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        if r14 != null goto label01;

        return;

     label01:
        $z2 = r0.<android.content.res.ResourcesImpl: boolean mPreloading>;

        if $z2 == 0 goto label05;

        i1 = virtualinvoke r14.<android.graphics.drawable.Drawable$ConstantState: int getChangingConfigurations()>();

        if z0 == 0 goto label02;

        $i5 = r11.<android.util.TypedValue: int resourceId>;

        $z4 = specialinvoke r0.<android.content.res.ResourcesImpl: boolean verifyPreloadConfig(int,int,int,java.lang.String)>(i1, 0, $i5, "drawable");

        if $z4 == 0 goto label04;

        $r9 = <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedColorDrawables>;

        virtualinvoke $r9.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, r14);

        goto label04;

     label02:
        $i2 = r11.<android.util.TypedValue: int resourceId>;

        $z3 = specialinvoke r0.<android.content.res.ResourcesImpl: boolean verifyPreloadConfig(int,int,int,java.lang.String)>(i1, 8192, $i2, "drawable");

        if $z3 == 0 goto label04;

        $i3 = i1 & 8192;

        if $i3 != 0 goto label03;

        $r5 = <android.content.res.ResourcesImpl: android.util.LongSparseArray[] sPreloadedDrawables>;

        $r6 = $r5[0];

        virtualinvoke $r6.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, r14);

        $r7 = <android.content.res.ResourcesImpl: android.util.LongSparseArray[] sPreloadedDrawables>;

        $r8 = $r7[1];

        virtualinvoke $r8.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, r14);

        goto label04;

     label03:
        $r3 = <android.content.res.ResourcesImpl: android.util.LongSparseArray[] sPreloadedDrawables>;

        $r2 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i4 = virtualinvoke $r2.<android.content.res.Configuration: int getLayoutDirection()>();

        $r4 = $r3[$i4];

        virtualinvoke $r4.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, r14);

     label04:
        goto label07;

     label05:
        r15 = r0.<android.content.res.ResourcesImpl: java.lang.Object mAccessLock>;

        entermonitor r15;

     label06:
        virtualinvoke r12.<android.content.res.DrawableCache: void put(long,android.content.res.Resources$Theme,java.lang.Object,boolean)>(l0, r1, r14, z1);

        exitmonitor r15;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r15;

     label10:
        throw $r10;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private android.graphics.drawable.Drawable decodeImageDrawable(android.content.res.AssetManager$AssetInputStream, android.content.res.Resources, android.util.TypedValue)
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.Resources r1;
        android.util.TypedValue r2;
        android.content.res.'-$$Lambda$ResourcesImpl$99dm2ENnzo9b0SIUjUj2Kl3pi90' $r4;
        java.lang.Throwable $r5;
        android.content.res.AssetManager$AssetInputStream r6;
        android.graphics.drawable.Drawable r8;
        android.graphics.ImageDecoder$AssetInputStreamSource r10;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r11;

        r0 := @this: android.content.res.ResourcesImpl;

        r6 := @parameter0: android.content.res.AssetManager$AssetInputStream;

        r1 := @parameter1: android.content.res.Resources;

        r2 := @parameter2: android.util.TypedValue;

        r10 = new android.graphics.ImageDecoder$AssetInputStreamSource;

        specialinvoke r10.<android.graphics.ImageDecoder$AssetInputStreamSource: void <init>(android.content.res.AssetManager$AssetInputStream,android.content.res.Resources,android.util.TypedValue)>(r6, r1, r2);

     label1:
        $r4 = <android.content.res._$$Lambda$ResourcesImpl$99dm2ENnzo9b0SIUjUj2Kl3pi90: android.content.res.'-$$Lambda$ResourcesImpl$99dm2ENnzo9b0SIUjUj2Kl3pi90' INSTANCE>;

        r11 = (android.graphics.ImageDecoder$OnHeaderDecodedListener) $r4;

        r8 = staticinvoke <android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r10, r11);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static int getAttributeSetSourceResId(android.util.AttributeSet)
    {
        android.util.AttributeSet r0;
        boolean $z0;
        android.content.res.XmlBlock$Parser $r1;
        int $i0;

        r0 := @parameter0: android.util.AttributeSet;

        if r0 == null goto label2;

        $z0 = r0 instanceof android.content.res.XmlBlock$Parser;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r1 = (android.content.res.XmlBlock$Parser) r0;

        $i0 = virtualinvoke $r1.<android.content.res.XmlBlock$Parser: int getSourceResId()>();

        return $i0;

     label2:
        return 0;
    }

    private android.content.res.ColorStateList getColorStateListFromInt(android.util.TypedValue, long)
    {
        android.content.res.ResourcesImpl r0;
        android.util.TypedValue r1;
        long l0;
        android.util.LongSparseArray $r2, $r4;
        java.lang.Object $r3, $r6;
        int $i1, $i2, $i3;
        boolean $z0, $z1;
        android.content.res.ConstantState $r5, r8;
        android.content.res.ColorStateList $r7, r9;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 := @parameter0: android.util.TypedValue;

        l0 := @parameter1: long;

        $r2 = <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedComplexColors>;

        $r3 = virtualinvoke $r2.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r8 = (android.content.res.ConstantState) $r3;

        if r8 == null goto label1;

        $r6 = virtualinvoke r8.<android.content.res.ConstantState: java.lang.Object newInstance()>();

        $r7 = (android.content.res.ColorStateList) $r6;

        return $r7;

     label1:
        $i1 = r1.<android.util.TypedValue: int data>;

        r9 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>($i1);

        $z0 = r0.<android.content.res.ResourcesImpl: boolean mPreloading>;

        if $z0 == 0 goto label2;

        $i3 = r1.<android.util.TypedValue: int changingConfigurations>;

        $i2 = r1.<android.util.TypedValue: int resourceId>;

        $z1 = specialinvoke r0.<android.content.res.ResourcesImpl: boolean verifyPreloadConfig(int,int,int,java.lang.String)>($i3, 0, $i2, "color");

        if $z1 == 0 goto label2;

        $r4 = <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedComplexColors>;

        $r5 = virtualinvoke r9.<android.content.res.ColorStateList: android.content.res.ConstantState getConstantState()>();

        virtualinvoke $r4.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, $r5);

     label2:
        return r9;
    }

    private android.icu.text.PluralRules getPluralRule()
    {
        android.content.res.ResourcesImpl r0;
        java.lang.Object r1;
        android.icu.text.PluralRules $r2, $r6, r8;
        android.content.res.Configuration $r3;
        android.os.LocaleList $r4;
        java.util.Locale $r5;
        java.lang.Throwable $r7;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 = <android.content.res.ResourcesImpl: java.lang.Object sSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.content.res.ResourcesImpl: android.icu.text.PluralRules mPluralRule>;

        if $r2 != null goto label2;

        $r3 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $r4 = virtualinvoke $r3.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $r5 = virtualinvoke $r4.<android.os.LocaleList: java.util.Locale get(int)>(0);

        $r6 = staticinvoke <android.icu.text.PluralRules: android.icu.text.PluralRules forLocale(java.util.Locale)>($r5);

        r0.<android.content.res.ResourcesImpl: android.icu.text.PluralRules mPluralRule> = $r6;

     label2:
        r8 = r0.<android.content.res.ResourcesImpl: android.icu.text.PluralRules mPluralRule>;

        exitmonitor r1;

     label3:
        return r8;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static void lambda$decodeImageDrawable$1(android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo, android.graphics.ImageDecoder$Source)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$ImageInfo r1;
        android.graphics.ImageDecoder$Source r2;

        r0 := @parameter0: android.graphics.ImageDecoder;

        r1 := @parameter1: android.graphics.ImageDecoder$ImageInfo;

        r2 := @parameter2: android.graphics.ImageDecoder$Source;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setAllocator(int)>(1);

        return;
    }

    static android.content.res.ResourcesImpl$LookupStack lambda$new$0()
    {
        android.content.res.ResourcesImpl$LookupStack $r0;

        $r0 = new android.content.res.ResourcesImpl$LookupStack;

        specialinvoke $r0.<android.content.res.ResourcesImpl$LookupStack: void <init>(android.content.res.ResourcesImpl$1)>(null);

        return $r0;
    }

    private android.graphics.drawable.Drawable loadColorOrXmlDrawable(android.content.res.Resources, android.util.TypedValue, int, int, java.lang.String)
    {
        android.content.res.ResourcesImpl r0;
        android.util.TypedValue r1;
        int i0, i1;
        java.lang.String r2;
        android.graphics.drawable.ColorStateListDrawable $r3;
        android.content.res.ColorStateList $r4;
        java.lang.Exception $r5;
        android.content.res.Resources$NotFoundException $r6;
        android.content.res.Resources r7;
        android.graphics.drawable.Drawable r10;

        r0 := @this: android.content.res.ResourcesImpl;

        r7 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

     label1:
        $r3 = new android.graphics.drawable.ColorStateListDrawable;

        $r4 = virtualinvoke r0.<android.content.res.ResourcesImpl: android.content.res.ColorStateList loadColorStateList(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>(r7, r1, i0, null);

        specialinvoke $r3.<android.graphics.drawable.ColorStateListDrawable: void <init>(android.content.res.ColorStateList)>($r4);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

     label4:
        r10 = specialinvoke r0.<android.content.res.ResourcesImpl: android.graphics.drawable.Drawable loadXmlDrawable(android.content.res.Resources,android.util.TypedValue,int,int,java.lang.String)>(r7, r1, i0, i1, r2);

     label5:
        return r10;

     label6:
        $r5 := @caughtexception;

        throw $r6;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private android.content.res.ComplexColor loadComplexColorForCookie(android.content.res.Resources, android.util.TypedValue, int, android.content.res.Resources$Theme)
    {
        android.content.res.ResourcesImpl r0;
        int i0, i1, $i2, $i3;
        android.content.res.Resources$Theme r1;
        java.lang.String r2, r5, $r9, $r12, $r14, $r17, $r19;
        android.content.res.XmlResourceParser r3;
        android.util.AttributeSet r4;
        java.lang.CharSequence $r6, $r10;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r15;
        android.content.res.Resources r20;
        android.util.TypedValue r21;
        android.content.res.ComplexColor r22;
        org.xmlpull.v1.XmlPullParserException r29;
        java.lang.StringBuilder r30, r32, r34;
        android.content.res.Resources$NotFoundException r31, r33;
        java.lang.UnsupportedOperationException r35;
        java.lang.Throwable r36;

        r0 := @this: android.content.res.ResourcesImpl;

        r20 := @parameter0: android.content.res.Resources;

        r21 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        r1 := @parameter3: android.content.res.Resources$Theme;

        $r6 = r21.<android.util.TypedValue: java.lang.CharSequence string>;

        if $r6 == null goto label14;

        $r10 = r21.<android.util.TypedValue: java.lang.CharSequence string>;

        r2 = interfaceinvoke $r10.<java.lang.CharSequence: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, r2);

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label13;

     label01:
        $i3 = r21.<android.util.TypedValue: int assetCookie>;

        r3 = virtualinvoke r0.<android.content.res.ResourcesImpl: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>(r2, i0, $i3, "ComplexColor");

        r4 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r3);

     label02:
        i1 = interfaceinvoke r3.<android.content.res.XmlResourceParser: int next()>();

     label03:
        if i1 == 2 goto label04;

        if i1 == 1 goto label04;

        goto label02;

     label04:
        if i1 != 2 goto label11;

     label05:
        r5 = interfaceinvoke r3.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("gradient");

        if $z1 == 0 goto label07;

        r22 = staticinvoke <android.content.res.GradientColor: android.content.res.GradientColor createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r20, r3, r4, r1);

     label06:
        goto label09;

     label07:
        r22 = null;

     label08:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("selector");

        if $z2 == 0 goto label09;

        r22 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r20, r3, r4, r1);

     label09:
        interfaceinvoke r3.<android.content.res.XmlResourceParser: void close()>();

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r22;

     label11:
        r29 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r29.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        r36 = (java.lang.Throwable) r29;

        throw r36;

     label12:
        $r15 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ComplexColor resource ID #0x");

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r31 = new android.content.res.Resources$NotFoundException;

        $r19 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r19);

        virtualinvoke r31.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>($r15);

        throw r31;

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from drawable resource ID #0x");

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": .xml extension required");

        r33 = new android.content.res.Resources$NotFoundException;

        $r14 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r33.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r14);

        throw r33;

     label14:
        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t convert to ComplexColor: type=0x");

        $i2 = r21.<android.util.TypedValue: int type>;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r35 = new java.lang.UnsupportedOperationException;

        $r9 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r35.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw r35;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label02 to label03 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label09 to label10 with label12;
        catch java.lang.Exception from label11 to label12 with label12;
    }

    private android.content.res.ComplexColor loadComplexColorFromName(android.content.res.Resources, android.content.res.Resources$Theme, android.util.TypedValue, int)
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        android.util.TypedValue r3;
        int i0, $i2, $i4, $i7, $i8, $i9;
        long l1, $l3, $l5, $l6;
        android.content.res.ConfigurationBoundResourceCache r4;
        java.lang.Object $r5, $r7, $r11;
        android.util.LongSparseArray $r6, $r9;
        boolean $z0, $z1;
        android.content.res.ConstantState $r8, $r10, r13;
        android.content.res.ComplexColor r12, r14;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.content.res.Resources$Theme;

        r3 := @parameter2: android.util.TypedValue;

        i0 := @parameter3: int;

        $i2 = r3.<android.util.TypedValue: int assetCookie>;

        $l3 = (long) $i2;

        $l6 = $l3 << 32;

        $i4 = r3.<android.util.TypedValue: int data>;

        $l5 = (long) $i4;

        l1 = $l6 | $l5;

        r4 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mComplexColorCache>;

        $r5 = virtualinvoke r4.<android.content.res.ConfigurationBoundResourceCache: java.lang.Object getInstance(long,android.content.res.Resources,android.content.res.Resources$Theme)>(l1, r1, r2);

        r12 = (android.content.res.ComplexColor) $r5;

        if r12 == null goto label1;

        return r12;

     label1:
        $r6 = <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedComplexColors>;

        $r7 = virtualinvoke $r6.<android.util.LongSparseArray: java.lang.Object get(long)>(l1);

        r13 = (android.content.res.ConstantState) $r7;

        if r13 == null goto label2;

        $r11 = virtualinvoke r13.<android.content.res.ConstantState: java.lang.Object newInstance(android.content.res.Resources,android.content.res.Resources$Theme)>(r1, r2);

        r12 = (android.content.res.ComplexColor) $r11;

     label2:
        r14 = r12;

        if r12 != null goto label3;

        r14 = specialinvoke r0.<android.content.res.ResourcesImpl: android.content.res.ComplexColor loadComplexColorForCookie(android.content.res.Resources,android.util.TypedValue,int,android.content.res.Resources$Theme)>(r1, r3, i0, r2);

     label3:
        if r14 == null goto label5;

        $i7 = r3.<android.util.TypedValue: int changingConfigurations>;

        virtualinvoke r14.<android.content.res.ComplexColor: void setBaseChangingConfigurations(int)>($i7);

        $z0 = r0.<android.content.res.ResourcesImpl: boolean mPreloading>;

        if $z0 == 0 goto label4;

        $i8 = virtualinvoke r14.<android.content.res.ComplexColor: int getChangingConfigurations()>();

        $i9 = r3.<android.util.TypedValue: int resourceId>;

        $z1 = specialinvoke r0.<android.content.res.ResourcesImpl: boolean verifyPreloadConfig(int,int,int,java.lang.String)>($i8, 0, $i9, "color");

        if $z1 == 0 goto label5;

        $r9 = <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedComplexColors>;

        $r10 = virtualinvoke r14.<android.content.res.ComplexColor: android.content.res.ConstantState getConstantState()>();

        virtualinvoke $r9.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l1, $r10);

        goto label5;

     label4:
        $r8 = virtualinvoke r14.<android.content.res.ComplexColor: android.content.res.ConstantState getConstantState()>();

        virtualinvoke r4.<android.content.res.ConfigurationBoundResourceCache: void put(long,android.content.res.Resources$Theme,java.lang.Object)>(l1, r2, $r8);

     label5:
        return r14;
    }

    private android.graphics.drawable.Drawable loadDrawableForCookie(android.content.res.Resources, android.util.TypedValue, int, int)
    {
        android.content.res.ResourcesImpl r0;
        int i0, i2, i4, $i5, $i6, $i7, $i8, $i9, $i10, i15, i17, i19;
        java.lang.String r1, $r5, $r8, $r13, $r22, $r30, $r40, r56, r59, r61, $r66, $r68;
        long l1, l3, $l11, $l12, $l13, l16, l18;
        java.lang.CharSequence $r2, $r14;
        java.lang.StringBuilder $r3, $r20, $r64;
        android.content.res.Resources$NotFoundException $r12, $r67;
        boolean $z0, $z1, $z2, z3, z4, z5;
        java.lang.ThreadLocal $r15;
        java.lang.Object $r16;
        android.content.res.AssetManager $r17;
        java.io.InputStream $r18;
        android.content.res.AssetManager$AssetInputStream $r19;
        java.lang.Class $r29;
        java.lang.Throwable $r41, $r47, $r48, $r49, $r50, $r51, $r52, r58, r62;
        android.content.res.Resources r53;
        android.util.TypedValue r54;
        android.content.res.ResourcesImpl$LookupStack r55;
        android.graphics.drawable.Drawable r57;
        java.lang.Exception r63;

        r0 := @this: android.content.res.ResourcesImpl;

        r53 := @parameter0: android.content.res.Resources;

        r54 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        i15 := @parameter3: int;

        $r2 = r54.<android.util.TypedValue: java.lang.CharSequence string>;

        if $r2 == null goto label35;

        $r14 = r54.<android.util.TypedValue: java.lang.CharSequence string>;

        r1 = interfaceinvoke $r14.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = <android.content.res.ResourcesImpl: boolean TRACE_FOR_DETAILED_PRELOAD>;

        if $z0 == 0 goto label01;

        l16 = staticinvoke <java.lang.System: long nanoTime()>();

        i17 = <android.graphics.Bitmap: int sPreloadTracingNumInstantiatedBitmaps>;

        l18 = <android.graphics.Bitmap: long sPreloadTracingTotalBitmapsSize>;

        i19 = <android.content.res.ResourcesImpl: int sPreloadTracingNumLoadedDrawables>;

        goto label02;

     label01:
        l16 = 0L;

        i17 = 0;

        l18 = 0L;

        i19 = 0;

     label02:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, r1);

        $r15 = r0.<android.content.res.ResourcesImpl: java.lang.ThreadLocal mLookupStack>;

        $r16 = virtualinvoke $r15.<java.lang.ThreadLocal: java.lang.Object get()>();

        r55 = (android.content.res.ResourcesImpl$LookupStack) $r16;

     label03:
        $z1 = virtualinvoke r55.<android.content.res.ResourcesImpl$LookupStack: boolean contains(int)>(i0);

        if $z1 != 0 goto label31;

        virtualinvoke r55.<android.content.res.ResourcesImpl$LookupStack: void push(int)>(i0);

     label04:
        z3 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

     label05:
        if z3 == 0 goto label16;

     label06:
        r56 = virtualinvoke r0.<android.content.res.ResourcesImpl: java.lang.String getResourceTypeName(int)>(i0);

     label07:
        if r56 == null goto label12;

     label08:
        z4 = virtualinvoke r56.<java.lang.String: boolean equals(java.lang.Object)>("color");

     label09:
        if z4 == 0 goto label12;

     label10:
        r57 = specialinvoke r0.<android.content.res.ResourcesImpl: android.graphics.drawable.Drawable loadColorOrXmlDrawable(android.content.res.Resources,android.util.TypedValue,int,int,java.lang.String)>(r53, r54, i0, i15, r1);

     label11:
        goto label13;

     label12:
        r57 = specialinvoke r0.<android.content.res.ResourcesImpl: android.graphics.drawable.Drawable loadXmlDrawable(android.content.res.Resources,android.util.TypedValue,int,int,java.lang.String)>(r53, r54, i0, i15, r1);

     label13:
        goto label17;

     label14:
        $r49 := @caughtexception;

        r58 = $r49;

        goto label29;

     label15:
        $r52 := @caughtexception;

        r58 = $r52;

        goto label29;

     label16:
        $r17 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $i5 = r54.<android.util.TypedValue: int assetCookie>;

        $r18 = virtualinvoke $r17.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>($i5, r1, 2);

        $r19 = (android.content.res.AssetManager$AssetInputStream) $r18;

        r57 = specialinvoke r0.<android.content.res.ResourcesImpl: android.graphics.drawable.Drawable decodeImageDrawable(android.content.res.AssetManager$AssetInputStream,android.content.res.Resources,android.util.TypedValue)>($r19, r53, r54);

     label17:
        virtualinvoke r55.<android.content.res.ResourcesImpl$LookupStack: void pop()>();

     label18:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        $z2 = <android.content.res.ResourcesImpl: boolean TRACE_FOR_DETAILED_PRELOAD>;

        if $z2 == 0 goto label25;

        $i6 = i0 >>> 24;

        if $i6 != 1 goto label24;

        r59 = virtualinvoke r0.<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>(i0);

        if r59 == null goto label23;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        i2 = <android.graphics.Bitmap: int sPreloadTracingNumInstantiatedBitmaps>;

        l3 = <android.graphics.Bitmap: long sPreloadTracingTotalBitmapsSize>;

        i4 = <android.content.res.ResourcesImpl: int sPreloadTracingNumLoadedDrawables>;

        z5 = 1;

        $i7 = i4 + 1;

        <android.content.res.ResourcesImpl: int sPreloadTracingNumLoadedDrawables> = $i7;

        $i8 = staticinvoke <android.os.Process: int myUid()>();

        if $i8 != 0 goto label19;

        goto label20;

     label19:
        z5 = 0;

     label20:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        if z5 == 0 goto label21;

        r61 = "Preloaded FW drawable #";

        goto label22;

     label21:
        r61 = "Loaded non-preloaded FW drawable #";

     label22:
        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r29 = virtualinvoke r57.<java.lang.Object: java.lang.Class getClass()>();

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getCanonicalName()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" #nested_drawables= ");

        $i9 = i4 - i19;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" #bitmaps= ");

        $i10 = i2 - i17;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" total_bitmap_size= ");

        $l11 = l3 - l18;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in[us] ");

        $l12 = l1 - l16;

        $l13 = $l12 / 1000L;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r40 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Resources.preload", $r40);

        goto label25;

     label23:
        goto label25;

     label24:
        goto label25;

     label25:
        return r57;

     label26:
        $r51 := @caughtexception;

        r62 = $r51;

        goto label34;

     label27:
        $r47 := @caughtexception;

        r58 = $r47;

        goto label29;

     label28:
        $r48 := @caughtexception;

        r58 = $r48;

     label29:
        virtualinvoke r55.<android.content.res.ResourcesImpl$LookupStack: void pop()>();

     label30:
        throw r58;

     label31:
        r63 = new java.lang.Exception;

        specialinvoke r63.<java.lang.Exception: void <init>(java.lang.String)>("Recursive reference in drawable");

        throw r63;

     label32:
        $r50 := @caughtexception;

        r62 = $r50;

        goto label34;

     label33:
        $r41 := @caughtexception;

        r62 = $r41;

     label34:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from drawable resource ID #0x");

        $r66 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r67 = new android.content.res.Resources$NotFoundException;

        $r68 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r67.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r68);

        virtualinvoke $r67.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>(r62);

        throw $r67;

     label35:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource \"");

        $r5 = virtualinvoke r0.<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a Drawable (color or path): ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r12 = new android.content.res.Resources$NotFoundException;

        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r13);

        throw $r12;

        catch java.lang.Exception from label03 to label04 with label33;
        catch java.lang.StackOverflowError from label03 to label04 with label33;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Exception from label17 to label18 with label26;
        catch java.lang.StackOverflowError from label17 to label18 with label26;
        catch java.lang.Exception from label29 to label30 with label32;
        catch java.lang.StackOverflowError from label29 to label30 with label32;
        catch java.lang.Exception from label30 to label31 with label32;
        catch java.lang.StackOverflowError from label30 to label31 with label32;
        catch java.lang.Exception from label31 to label32 with label32;
        catch java.lang.StackOverflowError from label31 to label32 with label32;
    }

    private android.graphics.drawable.Drawable loadXmlDrawable(android.content.res.Resources, android.util.TypedValue, int, int, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.content.res.ResourcesImpl r0;
        int i0, i1, $i2;
        java.lang.String r1;
        java.lang.Throwable $r2, $r3;
        android.content.res.Resources r4;
        android.util.TypedValue r5;
        android.content.res.XmlResourceParser r6;
        android.graphics.drawable.Drawable r7;

        r0 := @this: android.content.res.ResourcesImpl;

        r4 := @parameter0: android.content.res.Resources;

        r5 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        $i2 = r5.<android.util.TypedValue: int assetCookie>;

        r6 = virtualinvoke r0.<android.content.res.ResourcesImpl: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>(r1, i0, $i2, "drawable");

     label1:
        r7 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlForDensity(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,int,android.content.res.Resources$Theme)>(r4, r6, i1, null);

     label2:
        if r6 == null goto label3;

        interfaceinvoke r6.<android.content.res.XmlResourceParser: void close()>();

     label3:
        return r7;

     label4:
        $r3 := @caughtexception;

        if r6 == null goto label8;

     label5:
        interfaceinvoke r6.<android.content.res.XmlResourceParser: void close()>();

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private boolean verifyPreloadConfig(int, int, int, java.lang.String)
    {
        android.content.res.ResourcesImpl r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r1, $r7, $r12, r14;
        java.lang.StringBuilder $r3;
        android.content.res.Resources$NotFoundException $r13;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $i3 = -1073745921 & i0;

        $i4 = $i3 & i1;

        if $i4 == 0 goto label5;

     label1:
        r14 = virtualinvoke r0.<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>(i2);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r14 = "?";

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preloaded ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resource #0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") that varies with configuration!!");

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Resources", $r12);

        return 0;

     label5:
        return 1;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
    }

    public int calcConfigChanges(android.content.res.Configuration)
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.Configuration r1, $r2, $r5, $r6, $r8, $r9, $r10;
        int i0, $i1, i2;
        android.view.DisplayAdjustments $r3;
        android.content.res.CompatibilityInfo $r4;
        android.os.LocaleList $r7, $r11;
        boolean $z0;
        android.util.DisplayMetrics $r12;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 := @parameter0: android.content.res.Configuration;

        if r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mTmpConfig>;

        virtualinvoke $r2.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r1);

        i0 = r1.<android.content.res.Configuration: int densityDpi>;

        i2 = i0;

        if i0 != 0 goto label2;

        $r12 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        i2 = $r12.<android.util.DisplayMetrics: int noncompatDensityDpi>;

     label2:
        $r3 = r0.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r4 = virtualinvoke $r3.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r5 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mTmpConfig>;

        virtualinvoke $r4.<android.content.res.CompatibilityInfo: void applyToConfiguration(int,android.content.res.Configuration)>(i2, $r5);

        $r6 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mTmpConfig>;

        $r7 = virtualinvoke $r6.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $z0 = virtualinvoke $r7.<android.os.LocaleList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r10 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mTmpConfig>;

        $r11 = staticinvoke <android.os.LocaleList: android.os.LocaleList getDefault()>();

        virtualinvoke $r10.<android.content.res.Configuration: void setLocales(android.os.LocaleList)>($r11);

     label3:
        $r9 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $r8 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mTmpConfig>;

        $i1 = virtualinvoke $r9.<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>($r8);

        return $i1;
    }

    public void clearAllCaches()
    {
        android.content.res.ResourcesImpl r0;
        java.lang.Object r1;
        android.content.res.DrawableCache $r3, $r4;
        android.content.res.ConfigurationBoundResourceCache $r5, $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 = r0.<android.content.res.ResourcesImpl: java.lang.Object mAccessLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mDrawableCache>;

        virtualinvoke $r3.<android.content.res.DrawableCache: void clear()>();

        $r4 = r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mColorDrawableCache>;

        virtualinvoke $r4.<android.content.res.DrawableCache: void clear()>();

        $r5 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mComplexColorCache>;

        virtualinvoke $r5.<android.content.res.ConfigurationBoundResourceCache: void clear()>();

        $r6 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mAnimatorCache>;

        virtualinvoke $r6.<android.content.res.ConfigurationBoundResourceCache: void clear()>();

        $r7 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mStateListAnimatorCache>;

        virtualinvoke $r7.<android.content.res.ConfigurationBoundResourceCache: void clear()>();

        virtualinvoke r0.<android.content.res.ResourcesImpl: void flushLayoutCache()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void finishPreloading()
    {
        android.content.res.ResourcesImpl r0;
        long l0, l1, l2, l3, l4, l5, $l7, $l8, $l9;
        boolean $z0, $z1;
        int $i6;
        java.lang.StringBuilder $r2;
        java.lang.String $r10;

        r0 := @this: android.content.res.ResourcesImpl;

        $z0 = r0.<android.content.res.ResourcesImpl: boolean mPreloading>;

        if $z0 == 0 goto label2;

        $z1 = <android.content.res.ResourcesImpl: boolean TRACE_FOR_DETAILED_PRELOAD>;

        if $z1 == 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = r0.<android.content.res.ResourcesImpl: long mPreloadTracingPreloadStartTime>;

        l2 = <android.graphics.Bitmap: long sPreloadTracingTotalBitmapsSize>;

        l3 = r0.<android.content.res.ResourcesImpl: long mPreloadTracingStartBitmapSize>;

        $i6 = <android.graphics.Bitmap: int sPreloadTracingNumInstantiatedBitmaps>;

        l4 = (long) $i6;

        l5 = r0.<android.content.res.ResourcesImpl: long mPreloadTracingStartBitmapCount>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preload finished, ");

        $l7 = l4 - l5;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bitmaps of ");

        $l8 = l2 - l3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes in ");

        $l9 = l0 - l1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Resources.preload", $r10);

     label1:
        r0.<android.content.res.ResourcesImpl: boolean mPreloading> = 0;

        virtualinvoke r0.<android.content.res.ResourcesImpl: void flushLayoutCache()>();

     label2:
        return;
    }

    public void flushLayoutCache()
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.XmlBlock[] r1, r2;
        int[] $r3;
        java.lang.String[] $r4;
        java.lang.Throwable $r5;
        int i0;
        android.content.res.XmlBlock r6;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 = r0.<android.content.res.ResourcesImpl: android.content.res.XmlBlock[] mCachedXmlBlocks>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.content.res.ResourcesImpl: int[] mCachedXmlBlockCookies>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, 0);

        $r4 = r0.<android.content.res.ResourcesImpl: java.lang.String[] mCachedXmlBlockFiles>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r4, null);

        r2 = r0.<android.content.res.ResourcesImpl: android.content.res.XmlBlock[] mCachedXmlBlocks>;

     label02:
        i0 = 0;

     label03:
        if i0 >= 4 goto label06;

        r6 = r2[i0];

        if r6 == null goto label05;

     label04:
        virtualinvoke r6.<android.content.res.XmlBlock: void close()>();

     label05:
        i0 = i0 + 1;

        goto label03;

     label06:
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r2, null);

        exitmonitor r1;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    android.content.res.ConfigurationBoundResourceCache getAnimatorCache()
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.ConfigurationBoundResourceCache $r1;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mAnimatorCache>;

        return $r1;
    }

    public android.content.res.AssetManager getAssets()
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.AssetManager $r1;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        return $r1;
    }

    android.content.res.CompatibilityInfo getCompatibilityInfo()
    {
        android.content.res.ResourcesImpl r0;
        android.view.DisplayAdjustments $r1;
        android.content.res.CompatibilityInfo $r2;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r2 = virtualinvoke $r1.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        return $r2;
    }

    android.content.res.Configuration getConfiguration()
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.Configuration $r1;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        return $r1;
    }

    public android.view.DisplayAdjustments getDisplayAdjustments()
    {
        android.content.res.ResourcesImpl r0;
        android.view.DisplayAdjustments $r1;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        return $r1;
    }

    android.util.DisplayMetrics getDisplayMetrics()
    {
        android.content.res.ResourcesImpl r0;
        android.util.DisplayMetrics $r1;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        return $r1;
    }

    int getIdentifier(java.lang.String, java.lang.String, java.lang.String)
    {
        android.content.res.ResourcesImpl r0;
        java.lang.String r1, r2, r3;
        int i0, $i1;
        java.lang.NullPointerException $r5;
        java.lang.Exception $r6;
        android.content.res.AssetManager $r7;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r1 == null goto label4;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        return i0;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $i1 = virtualinvoke $r7.<android.content.res.AssetManager: int getResourceIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $i1;

     label4:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("name is null");

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    java.lang.String getLastResourceResolution() throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        java.lang.String r1;
        android.content.res.AssetManager $r2;
        android.content.res.Resources$NotFoundException $r3;

        r0 := @this: android.content.res.ResourcesImpl;

        $r2 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r1 = virtualinvoke $r2.<android.content.res.AssetManager: java.lang.String getLastResourceResolution()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new android.content.res.Resources$NotFoundException;

        specialinvoke $r3.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>("Associated AssetManager hasn\'t resolved a resource");

        throw $r3;
    }

    android.util.LongSparseArray getPreloadedDrawables()
    {
        android.content.res.ResourcesImpl r0;
        android.util.LongSparseArray[] $r1;
        android.util.LongSparseArray $r2;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = <android.content.res.ResourcesImpl: android.util.LongSparseArray[] sPreloadedDrawables>;

        $r2 = $r1[0];

        return $r2;
    }

    java.lang.CharSequence getQuantityText(int, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0, i1, $i2;
        android.icu.text.PluralRules r1;
        double $d0, $d1;
        android.content.res.AssetManager $r2, $r4;
        java.lang.String $r3, $r7, $r12, $r15;
        java.lang.StringBuilder $r5;
        android.content.res.Resources$NotFoundException $r14;
        java.lang.CharSequence r16, r17;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<android.content.res.ResourcesImpl: android.icu.text.PluralRules getPluralRule()>();

        $r2 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $d0 = (double) i1;

        $r3 = virtualinvoke r1.<android.icu.text.PluralRules: java.lang.String select(double)>($d0);

        $i2 = staticinvoke <android.content.res.ResourcesImpl: int attrForQuantityCode(java.lang.String)>($r3);

        r16 = virtualinvoke $r2.<android.content.res.AssetManager: java.lang.CharSequence getResourceBagText(int,int)>(i0, $i2);

        if r16 == null goto label1;

        return r16;

     label1:
        $r4 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r17 = virtualinvoke $r4.<android.content.res.AssetManager: java.lang.CharSequence getResourceBagText(int,int)>(i0, 16777220);

        if r17 == null goto label2;

        return r17;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Plural resource ID #0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" quantity=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" item=");

        $d1 = (double) i1;

        $r12 = virtualinvoke r1.<android.icu.text.PluralRules: java.lang.String select(double)>($d1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new android.content.res.Resources$NotFoundException;

        $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r15);

        throw $r14;
    }

    java.lang.String getResourceEntryName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0;
        android.content.res.AssetManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, r8;
        android.content.res.Resources$NotFoundException $r6;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r8 = virtualinvoke $r1.<android.content.res.AssetManager: java.lang.String getResourceEntryName(int)>(i0);

        if r8 == null goto label1;

        return r8;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    java.lang.String getResourceName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0;
        android.content.res.AssetManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, r8;
        android.content.res.Resources$NotFoundException $r6;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r8 = virtualinvoke $r1.<android.content.res.AssetManager: java.lang.String getResourceName(int)>(i0);

        if r8 == null goto label1;

        return r8;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    java.lang.String getResourcePackageName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0;
        android.content.res.AssetManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, r8;
        android.content.res.Resources$NotFoundException $r6;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r8 = virtualinvoke $r1.<android.content.res.AssetManager: java.lang.String getResourcePackageName(int)>(i0);

        if r8 == null goto label1;

        return r8;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    java.lang.String getResourceTypeName(int) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0;
        android.content.res.AssetManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, r8;
        android.content.res.Resources$NotFoundException $r6;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r8 = virtualinvoke $r1.<android.content.res.AssetManager: java.lang.String getResourceTypeName(int)>(i0);

        if r8 == null goto label1;

        return r8;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    android.content.res.Configuration[] getSizeConfigurations()
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.AssetManager $r1;
        android.content.res.Configuration[] $r2;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $r2 = virtualinvoke $r1.<android.content.res.AssetManager: android.content.res.Configuration[] getSizeConfigurations()>();

        return $r2;
    }

    android.content.res.ConfigurationBoundResourceCache getStateListAnimatorCache()
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.ConfigurationBoundResourceCache $r1;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mStateListAnimatorCache>;

        return $r1;
    }

    void getValue(int, android.util.TypedValue, boolean) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0;
        boolean z0, $z1;
        android.content.res.AssetManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7;
        android.content.res.Resources$NotFoundException $r6;
        android.util.TypedValue r8;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        r8 := @parameter1: android.util.TypedValue;

        z0 := @parameter2: boolean;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $z1 = virtualinvoke $r1.<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)>(i0, 0, r8, z0);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    void getValue(java.lang.String, android.util.TypedValue, boolean) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        java.lang.String r1, $r6;
        boolean z0;
        int i0;
        java.lang.StringBuilder $r2;
        android.content.res.Resources$NotFoundException $r5;
        android.util.TypedValue r7;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: android.util.TypedValue;

        z0 := @parameter2: boolean;

        i0 = virtualinvoke r0.<android.content.res.ResourcesImpl: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r1, "string", null);

        if i0 == 0 goto label1;

        virtualinvoke r0.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r7, z0);

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String resource name ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = new android.content.res.Resources$NotFoundException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    void getValueForDensity(int, int, android.util.TypedValue, boolean) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0, i1;
        boolean z0, $z1;
        android.content.res.AssetManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7;
        android.content.res.Resources$NotFoundException $r6;
        android.util.TypedValue r8;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r8 := @parameter2: android.util.TypedValue;

        z0 := @parameter3: boolean;

        $r1 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $z1 = virtualinvoke $r1.<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)>(i0, i1, r8, z0);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ID #0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new android.content.res.Resources$NotFoundException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    android.content.res.ColorStateList loadColorStateList(android.content.res.Resources, android.util.TypedValue, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        android.util.TypedValue r1;
        int i0, $i3, $i4, $i5, $i6;
        android.content.res.Resources$Theme r2;
        long l1, l2, $l7, $l8;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        android.content.res.Resources$NotFoundException $r7;
        boolean $z0;
        android.content.res.ColorStateList $r9, $r10;
        android.content.res.Resources r11;
        android.content.res.ComplexColor r12;

        r0 := @this: android.content.res.ResourcesImpl;

        r11 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.res.Resources$Theme;

        $i3 = r1.<android.util.TypedValue: int assetCookie>;

        l1 = (long) $i3;

        $i4 = r1.<android.util.TypedValue: int data>;

        l2 = (long) $i4;

        $i5 = r1.<android.util.TypedValue: int type>;

        if $i5 < 28 goto label1;

        $i6 = r1.<android.util.TypedValue: int type>;

        if $i6 > 31 goto label1;

        $l7 = l1 << 32;

        $l8 = $l7 | l2;

        $r10 = specialinvoke r0.<android.content.res.ResourcesImpl: android.content.res.ColorStateList getColorStateListFromInt(android.util.TypedValue,long)>(r1, $l8);

        return $r10;

     label1:
        r12 = specialinvoke r0.<android.content.res.ResourcesImpl: android.content.res.ComplexColor loadComplexColorFromName(android.content.res.Resources,android.content.res.Resources$Theme,android.util.TypedValue,int)>(r11, r2, r1, i0);

        if r12 == null goto label2;

        $z0 = r12 instanceof android.content.res.ColorStateList;

        if $z0 == 0 goto label2;

        $r9 = (android.content.res.ColorStateList) r12;

        return $r9;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find ColorStateList from drawable resource ID #0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new android.content.res.Resources$NotFoundException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    android.content.res.ComplexColor loadComplexColor(android.content.res.Resources, android.util.TypedValue, int, android.content.res.Resources$Theme)
    {
        android.content.res.ResourcesImpl r0;
        int i0, $i3, $i4, $i5, $i6;
        android.content.res.Resources$Theme r1;
        long l1, l2, $l7, $l8;
        java.lang.String r2, $r8, $r12, $r19, $r22;
        java.lang.CharSequence $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r15;
        android.content.res.Resources$NotFoundException $r11, $r21;
        android.content.res.ColorStateList $r13;
        java.lang.Exception $r14;
        android.content.res.Resources r24;
        android.util.TypedValue r25;
        android.content.res.ComplexColor r26;

        r0 := @this: android.content.res.ResourcesImpl;

        r24 := @parameter0: android.content.res.Resources;

        r25 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        r1 := @parameter3: android.content.res.Resources$Theme;

        $i3 = r25.<android.util.TypedValue: int assetCookie>;

        l1 = (long) $i3;

        $i4 = r25.<android.util.TypedValue: int data>;

        l2 = (long) $i4;

        $i5 = r25.<android.util.TypedValue: int type>;

        if $i5 < 28 goto label1;

        $i6 = r25.<android.util.TypedValue: int type>;

        if $i6 > 31 goto label1;

        $l7 = l1 << 32;

        $l8 = $l7 | l2;

        $r13 = specialinvoke r0.<android.content.res.ResourcesImpl: android.content.res.ColorStateList getColorStateListFromInt(android.util.TypedValue,long)>(r25, $l8);

        return $r13;

     label1:
        $r3 = r25.<android.util.TypedValue: java.lang.CharSequence string>;

        r2 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label5;

     label2:
        r26 = specialinvoke r0.<android.content.res.ResourcesImpl: android.content.res.ComplexColor loadComplexColorFromName(android.content.res.Resources,android.content.res.Resources$Theme,android.util.TypedValue,int)>(r24, r1, r25, i0);

     label3:
        return r26;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from complex color resource ID #0x");

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = new android.content.res.Resources$NotFoundException;

        $r22 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r22);

        virtualinvoke $r21.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>($r14);

        throw $r21;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from drawable resource ID #0x");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": .xml extension required");

        $r11 = new android.content.res.Resources$NotFoundException;

        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r12);

        throw $r11;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    android.graphics.drawable.Drawable loadDrawable(android.content.res.Resources, android.util.TypedValue, int, int, android.content.res.Resources$Theme) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, $i25;
        long l1, $l4, l26, l27;
        java.lang.StringBuilder r1, $r19;
        android.content.res.Configuration $r2;
        android.util.LongSparseArray[] $r3;
        android.util.LongSparseArray $r4, $r13;
        java.lang.Object $r5, $r14;
        boolean $z0, $z1, z2, z3, $z4, $z5, z6, z7;
        android.graphics.drawable.ColorDrawable $r6;
        java.lang.String $r8, $r12, $r23, $r26, r36, r42;
        android.util.DisplayMetrics $r15, $r16, $r17;
        android.content.res.Resources$NotFoundException $r18, $r25;
        java.lang.StackTraceElement[] $r27;
        java.lang.Exception $r28, $r29, r41;
        android.content.res.Resources r30;
        android.util.TypedValue r31;
        android.content.res.Resources$Theme r32;
        android.content.res.DrawableCache r33;
        android.graphics.drawable.Drawable r34, r37, r38, r39;
        android.graphics.drawable.Drawable$ConstantState r35, r40;

        r0 := @this: android.content.res.ResourcesImpl;

        r30 := @parameter0: android.content.res.Resources;

        r31 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        i24 := @parameter3: int;

        r32 := @parameter4: android.content.res.Resources$Theme;

        if i24 == 0 goto label02;

        $i23 = r31.<android.util.TypedValue: int density>;

        $r17 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $i22 = $r17.<android.util.DisplayMetrics: int densityDpi>;

        if $i23 != $i22 goto label01;

        goto label02;

     label01:
        z2 = 0;

        goto label03;

     label02:
        z2 = 1;

     label03:
        if i24 <= 0 goto label05;

        $i14 = r31.<android.util.TypedValue: int density>;

        if $i14 <= 0 goto label05;

        $i15 = r31.<android.util.TypedValue: int density>;

        if $i15 == 65535 goto label05;

        $i16 = r31.<android.util.TypedValue: int density>;

        if $i16 != i24 goto label04;

        $r16 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $i21 = $r16.<android.util.DisplayMetrics: int densityDpi>;

        r31.<android.util.TypedValue: int density> = $i21;

        goto label05;

     label04:
        $i18 = r31.<android.util.TypedValue: int density>;

        $r15 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $i17 = $r15.<android.util.DisplayMetrics: int densityDpi>;

        $i19 = $i18 * $i17;

        $i20 = $i19 / i24;

        r31.<android.util.TypedValue: int density> = $i20;

     label05:
        $i25 = r31.<android.util.TypedValue: int type>;

        if $i25 < 28 goto label07;

        $i12 = r31.<android.util.TypedValue: int type>;

        if $i12 > 31 goto label07;

        r33 = r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mColorDrawableCache>;

        $i13 = r31.<android.util.TypedValue: int data>;

        l26 = (long) $i13;

     label06:
        z3 = 1;

        goto label09;

     label07:
        r33 = r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mDrawableCache>;

        $i2 = r31.<android.util.TypedValue: int assetCookie>;

        l27 = (long) $i2;

        $i3 = r31.<android.util.TypedValue: int data>;

        l1 = (long) $i3;

     label08:
        z3 = 0;

        $l4 = l27 << 32;

        l26 = $l4 | l1;

     label09:
        $z4 = r0.<android.content.res.ResourcesImpl: boolean mPreloading>;

        if $z4 != 0 goto label15;

     label10:
        if z2 == 0 goto label15;

     label11:
        r34 = virtualinvoke r33.<android.content.res.DrawableCache: android.graphics.drawable.Drawable getInstance(long,android.content.res.Resources,android.content.res.Resources$Theme)>(l26, r30, r32);

     label12:
        if r34 == null goto label15;

     label13:
        $i11 = r31.<android.util.TypedValue: int changingConfigurations>;

        virtualinvoke r34.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>($i11);

     label14:
        return r34;

     label15:
        if z3 == 0 goto label18;

     label16:
        $r13 = <android.content.res.ResourcesImpl: android.util.LongSparseArray sPreloadedColorDrawables>;

        $r14 = virtualinvoke $r13.<android.util.LongSparseArray: java.lang.Object get(long)>(l26);

        r35 = (android.graphics.drawable.Drawable$ConstantState) $r14;

     label17:
        goto label19;

     label18:
        $r3 = <android.content.res.ResourcesImpl: android.util.LongSparseArray[] sPreloadedDrawables>;

        $r2 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i5 = virtualinvoke $r2.<android.content.res.Configuration: int getLayoutDirection()>();

        $r4 = $r3[$i5];

        $r5 = virtualinvoke $r4.<android.util.LongSparseArray: java.lang.Object get(long)>(l26);

        r35 = (android.graphics.drawable.Drawable$ConstantState) $r5;

     label19:
        if r35 == null goto label27;

     label20:
        $z1 = <android.content.res.ResourcesImpl: boolean TRACE_FOR_DETAILED_PRELOAD>;

        if $z1 == 0 goto label25;

     label21:
        $i8 = i0 >>> 24;

        if $i8 != 1 goto label25;

     label22:
        $i9 = staticinvoke <android.os.Process: int myUid()>();

        if $i9 == 0 goto label25;

        r36 = virtualinvoke r0.<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>(i0);

     label23:
        if r36 == null goto label25;

     label24:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hit preloaded FW drawable #");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Resources.preload", $r12);

     label25:
        r37 = virtualinvoke r35.<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>(r30);

     label26:
        goto label31;

     label27:
        if z3 == 0 goto label30;

     label28:
        $r6 = new android.graphics.drawable.ColorDrawable;

        $i7 = r31.<android.util.TypedValue: int data>;

        specialinvoke $r6.<android.graphics.drawable.ColorDrawable: void <init>(int)>($i7);

        r37 = $r6;

     label29:
        goto label31;

     label30:
        r37 = specialinvoke r0.<android.content.res.ResourcesImpl: android.graphics.drawable.Drawable loadDrawableForCookie(android.content.res.Resources,android.util.TypedValue,int,int)>(r30, r31, i0, i24);

     label31:
        $z5 = r37 instanceof android.graphics.drawable.DrawableContainer;

        if $z5 == 0 goto label33;

     label32:
        z6 = 1;

        goto label34;

     label33:
        z6 = 0;

     label34:
        if r37 == null goto label37;

     label35:
        $z0 = virtualinvoke r37.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label37;

     label36:
        z7 = 1;

        goto label38;

     label37:
        z7 = 0;

     label38:
        r38 = r37;

        if z7 == 0 goto label40;

        r38 = r37;

        if r32 == null goto label40;

     label39:
        r38 = virtualinvoke r37.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        virtualinvoke r38.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r32);

        virtualinvoke r38.<android.graphics.drawable.Drawable: void clearMutated()>();

     label40:
        if r38 == null goto label51;

     label41:
        $i6 = r31.<android.util.TypedValue: int changingConfigurations>;

        virtualinvoke r38.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>($i6);

     label42:
        if z2 == 0 goto label50;

     label43:
        specialinvoke r0.<android.content.res.ResourcesImpl: void cacheDrawable(android.util.TypedValue,boolean,android.content.res.DrawableCache,android.content.res.Resources$Theme,boolean,long,android.graphics.drawable.Drawable)>(r31, z3, r33, r32, z7, l26, r38);

     label44:
        r39 = r38;

        if z6 == 0 goto label52;

     label45:
        r40 = virtualinvoke r38.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

     label46:
        r39 = r38;

        if r40 == null goto label52;

     label47:
        r39 = virtualinvoke r40.<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>(r30);

     label48:
        goto label52;

     label49:
        $r28 := @caughtexception;

        r41 = $r28;

        goto label54;

     label50:
        r39 = r38;

        goto label52;

     label51:
        r39 = r38;

     label52:
        return r39;

     label53:
        $r29 := @caughtexception;

        r41 = $r29;

     label54:
        r42 = virtualinvoke r0.<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>(i0);

     label55:
        goto label57;

     label56:
        $r18 := @caughtexception;

        r42 = "(missing name)";

     label57:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drawable ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with resource ID #0x");

        $r23 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = new android.content.res.Resources$NotFoundException;

        $r26 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String,java.lang.Exception)>($r26, r41);

        $r27 = newarray (java.lang.StackTraceElement)[0];

        virtualinvoke $r25.<android.content.res.Resources$NotFoundException: void setStackTrace(java.lang.StackTraceElement[])>($r27);

        throw $r25;

        catch java.lang.Exception from label05 to label06 with label53;
        catch java.lang.Exception from label07 to label08 with label53;
        catch java.lang.Exception from label09 to label10 with label53;
        catch java.lang.Exception from label11 to label12 with label53;
        catch java.lang.Exception from label13 to label14 with label53;
        catch java.lang.Exception from label16 to label17 with label53;
        catch java.lang.Exception from label18 to label19 with label53;
        catch java.lang.Exception from label20 to label21 with label53;
        catch java.lang.Exception from label22 to label23 with label53;
        catch java.lang.Exception from label24 to label25 with label53;
        catch java.lang.Exception from label25 to label26 with label53;
        catch java.lang.Exception from label28 to label29 with label53;
        catch java.lang.Exception from label30 to label31 with label53;
        catch java.lang.Exception from label31 to label32 with label53;
        catch java.lang.Exception from label35 to label36 with label53;
        catch java.lang.Exception from label39 to label40 with label53;
        catch java.lang.Exception from label41 to label42 with label53;
        catch java.lang.Exception from label43 to label44 with label49;
        catch java.lang.Exception from label45 to label46 with label49;
        catch java.lang.Exception from label47 to label48 with label49;
        catch android.content.res.Resources$NotFoundException from label54 to label55 with label56;
    }

    public android.graphics.Typeface loadFont(android.content.res.Resources, android.util.TypedValue, int)
    {
        android.content.res.ResourcesImpl r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r6, $r9, $r14, $r22, $r26;
        android.graphics.Typeface r2, r32, r34;
        java.lang.CharSequence $r3, $r15;
        java.lang.StringBuilder $r4, r37, r39;
        android.content.res.Resources$NotFoundException $r13;
        boolean $z0, $z1;
        android.content.res.AssetManager $r16, $r17, $r18;
        java.lang.Throwable $r19, $r23, $r27;
        android.content.res.Resources r28;
        android.util.TypedValue r29;
        android.content.res.XmlResourceParser r30;
        android.content.res.FontResourcesParser$FamilyResourceEntry r31;
        android.graphics.Typeface$Builder r33;

        r0 := @this: android.content.res.ResourcesImpl;

        r28 := @parameter0: android.content.res.Resources;

        r29 := @parameter1: android.util.TypedValue;

        i0 := @parameter2: int;

        $r3 = r29.<android.util.TypedValue: java.lang.CharSequence string>;

        if $r3 == null goto label18;

        $r15 = r29.<android.util.TypedValue: java.lang.CharSequence string>;

        r1 = interfaceinvoke $r15.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("res/");

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r16 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r2 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface findFromCache(android.content.res.AssetManager,java.lang.String)>($r16, r1);

        if r2 == null goto label02;

        return r2;

     label02:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, r1);

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("xml");

        if $z1 == 0 goto label08;

        $i2 = r29.<android.util.TypedValue: int assetCookie>;

        r30 = virtualinvoke r0.<android.content.res.ResourcesImpl: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>(r1, i0, $i2, "font");

     label04:
        r31 = staticinvoke <android.content.res.FontResourcesParser: android.content.res.FontResourcesParser$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources)>(r30, r28);

     label05:
        if r31 != null goto label06;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return null;

     label06:
        $r18 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r32 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromResources(android.content.res.FontResourcesParser$FamilyResourceEntry,android.content.res.AssetManager,java.lang.String)>(r31, $r18, r1);

     label07:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r32;

     label08:
        r33 = new android.graphics.Typeface$Builder;

        $r17 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $i1 = r29.<android.util.TypedValue: int assetCookie>;

        specialinvoke r33.<android.graphics.Typeface$Builder: void <init>(android.content.res.AssetManager,java.lang.String,boolean,int)>($r17, r1, 0, $i1);

        r34 = virtualinvoke r33.<android.graphics.Typeface$Builder: android.graphics.Typeface build()>();

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r34;

     label10:
        $r27 := @caughtexception;

        goto label17;

     label11:
        $r23 := @caughtexception;

     label12:
        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read xml resource ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Resources", $r26, $r23);

     label13:
        goto label16;

     label14:
        $r19 := @caughtexception;

     label15:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse xml resource ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Resources", $r22, $r19);

     label16:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return null;

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw $r27;

     label18:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource \"");

        $r6 = virtualinvoke r0.<android.content.res.ResourcesImpl: java.lang.String getResourceName(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not a Font: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        $r13 = new android.content.res.Resources$NotFoundException;

        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r14);

        throw $r13;

        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label14;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label14;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label14;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label14;
        catch java.io.IOException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
        catch java.lang.Throwable from label15 to label16 with label10;
    }

    android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String, int, int, java.lang.String) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7;
        java.lang.String r1, $r12, $r15, $r17, $r18, $r28, $r31, r33;
        int[] r2;
        java.lang.String[] r3;
        android.content.res.XmlBlock r4, r5, $r19;
        java.lang.StringBuilder $r6, $r22;
        android.content.res.Resources$NotFoundException $r14, $r30;
        android.content.res.AssetManager $r16;
        boolean $z0;
        java.lang.Throwable $r20;
        java.lang.Exception $r21;
        android.content.res.XmlBlock[] r34, r35;
        android.content.res.XmlResourceParser r36, r37;

        r0 := @this: android.content.res.ResourcesImpl;

        r33 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        if i0 == 0 goto label22;

     label01:
        r34 = r0.<android.content.res.ResourcesImpl: android.content.res.XmlBlock[] mCachedXmlBlocks>;

        entermonitor r34;

     label02:
        r2 = r0.<android.content.res.ResourcesImpl: int[] mCachedXmlBlockCookies>;

        r3 = r0.<android.content.res.ResourcesImpl: java.lang.String[] mCachedXmlBlockFiles>;

        r35 = r0.<android.content.res.ResourcesImpl: android.content.res.XmlBlock[] mCachedXmlBlocks>;

        i2 = lengthof r3;

     label03:
        i6 = 0;

     label04:
        if i6 >= i2 goto label08;

        $i5 = r2[i6];

        if $i5 != i1 goto label07;

        $r17 = r3[i6];

        if $r17 == null goto label07;

     label05:
        $r18 = r3[i6];

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z0 == 0 goto label07;

        $r19 = r35[i6];

        r36 = virtualinvoke $r19.<android.content.res.XmlBlock: android.content.res.XmlResourceParser newParser(int)>(i0);

        exitmonitor r34;

     label06:
        return r36;

     label07:
        i6 = i6 + 1;

        goto label04;

     label08:
        $r16 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r4 = virtualinvoke $r16.<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>(i1, r33);

     label09:
        if r4 == null goto label16;

     label10:
        $i3 = r0.<android.content.res.ResourcesImpl: int mLastCachedXmlBlockIndex>;

        $i4 = $i3 + 1;

        i7 = $i4 % i2;

        r0.<android.content.res.ResourcesImpl: int mLastCachedXmlBlockIndex> = i7;

     label11:
        r5 = r35[i7];

        if r5 == null goto label13;

     label12:
        virtualinvoke r5.<android.content.res.XmlBlock: void close()>();

     label13:
        r2[i7] = i1;

        r3[i7] = r33;

        r35[i7] = r4;

     label14:
        r37 = virtualinvoke r4.<android.content.res.XmlBlock: android.content.res.XmlResourceParser newParser(int)>(i0);

        exitmonitor r34;

     label15:
        return r37;

     label16:
        exitmonitor r34;

     label17:
        goto label22;

     label18:
        $r20 := @caughtexception;

     label19:
        exitmonitor r34;

     label20:
        throw $r20;

     label21:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from xml type ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resource ID #0x");

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = new android.content.res.Resources$NotFoundException;

        $r31 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r31);

        virtualinvoke $r30.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>($r21);

        throw $r30;

     label22:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from xml type ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resource ID #0x");

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new android.content.res.Resources$NotFoundException;

        $r15 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r15);

        throw $r14;

        catch java.lang.Exception from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Exception from label20 to label21 with label21;
    }

    android.content.res.ResourcesImpl$ThemeImpl newThemeImpl()
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.ResourcesImpl$ThemeImpl $r1;

        r0 := @this: android.content.res.ResourcesImpl;

        $r1 = new android.content.res.ResourcesImpl$ThemeImpl;

        specialinvoke $r1.<android.content.res.ResourcesImpl$ThemeImpl: void <init>(android.content.res.ResourcesImpl)>(r0);

        return $r1;
    }

    android.content.res.ResourcesImpl$ThemeImpl newThemeImpl(android.content.res.Resources$ThemeKey)
    {
        android.content.res.ResourcesImpl r0;
        android.content.res.Resources$ThemeKey r1, $r4;
        android.content.res.ResourcesImpl$ThemeImpl $r3;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 := @parameter0: android.content.res.Resources$ThemeKey;

        $r3 = new android.content.res.ResourcesImpl$ThemeImpl;

        specialinvoke $r3.<android.content.res.ResourcesImpl$ThemeImpl: void <init>(android.content.res.ResourcesImpl)>(r0);

        $r4 = staticinvoke <android.content.res.ResourcesImpl$ThemeImpl: android.content.res.Resources$ThemeKey access$000(android.content.res.ResourcesImpl$ThemeImpl)>($r3);

        virtualinvoke $r4.<android.content.res.Resources$ThemeKey: void setTo(android.content.res.Resources$ThemeKey)>(r1);

        virtualinvoke $r3.<android.content.res.ResourcesImpl$ThemeImpl: void rebase()>();

        return $r3;
    }

    java.io.InputStream openRawResource(int, android.util.TypedValue) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0, $i1;
        java.lang.CharSequence $r2, $r8, $r9;
        android.content.res.AssetManager $r3;
        java.lang.String $r4, $r12, $r15, r20;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6;
        android.content.res.Resources$NotFoundException $r14;
        android.util.TypedValue r17;
        java.io.InputStream r18;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        r17 := @parameter1: android.util.TypedValue;

        virtualinvoke r0.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r17, 1);

     label1:
        $r3 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $i1 = r17.<android.util.TypedValue: int assetCookie>;

        $r2 = r17.<android.util.TypedValue: java.lang.CharSequence string>;

        $r4 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        r18 = virtualinvoke $r3.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>($i1, $r4, 2);

     label2:
        return r18;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r8 = r17.<android.util.TypedValue: java.lang.CharSequence string>;

        if $r8 != null goto label4;

        r20 = "(null)";

        goto label5;

     label4:
        $r9 = r17.<android.util.TypedValue: java.lang.CharSequence string>;

        r20 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>();

     label5:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from resource ID #0x");

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new android.content.res.Resources$NotFoundException;

        $r15 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r15);

        virtualinvoke $r14.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        throw $r14;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    android.content.res.AssetFileDescriptor openRawResourceFd(int, android.util.TypedValue) throws android.content.res.Resources$NotFoundException
    {
        android.content.res.ResourcesImpl r0;
        int i0, $i1;
        android.util.TypedValue r1;
        java.lang.CharSequence $r3, $r9;
        android.content.res.AssetManager $r4;
        java.lang.String $r5, $r10, $r13, $r16;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7;
        android.content.res.Resources$NotFoundException $r15;
        android.content.res.AssetFileDescriptor r17;

        r0 := @this: android.content.res.ResourcesImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.TypedValue;

        virtualinvoke r0.<android.content.res.ResourcesImpl: void getValue(int,android.util.TypedValue,boolean)>(i0, r1, 1);

     label1:
        $r4 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $i1 = r1.<android.util.TypedValue: int assetCookie>;

        $r3 = r1.<android.util.TypedValue: java.lang.CharSequence string>;

        $r5 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        r17 = virtualinvoke $r4.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>($i1, $r5);

     label2:
        return r17;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r9 = r1.<android.util.TypedValue: java.lang.CharSequence string>;

        $r10 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from resource ID #0x");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = new android.content.res.Resources$NotFoundException;

        $r16 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String,java.lang.Exception)>($r16, $r6);

        throw $r15;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public final void startPreloading()
    {
        android.content.res.ResourcesImpl r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i3;
        android.content.res.Configuration $r2;
        long $l1, $l2, $l4;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException r4;

        r0 := @this: android.content.res.ResourcesImpl;

        r1 = <android.content.res.ResourcesImpl: java.lang.Object sSync>;

        entermonitor r1;

     label1:
        $z0 = <android.content.res.ResourcesImpl: boolean sPreloaded>;

        if $z0 != 0 goto label4;

        <android.content.res.ResourcesImpl: boolean sPreloaded> = 1;

        r0.<android.content.res.ResourcesImpl: boolean mPreloading> = 1;

        $r2 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i0 = <android.util.DisplayMetrics: int DENSITY_DEVICE>;

        $r2.<android.content.res.Configuration: int densityDpi> = $i0;

        virtualinvoke r0.<android.content.res.ResourcesImpl: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>(null, null, null);

        $z1 = <android.content.res.ResourcesImpl: boolean TRACE_FOR_DETAILED_PRELOAD>;

        if $z1 == 0 goto label2;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.content.res.ResourcesImpl: long mPreloadTracingPreloadStartTime> = $l1;

        $l2 = <android.graphics.Bitmap: long sPreloadTracingTotalBitmapsSize>;

        r0.<android.content.res.ResourcesImpl: long mPreloadTracingStartBitmapSize> = $l2;

        $i3 = <android.graphics.Bitmap: int sPreloadTracingNumInstantiatedBitmaps>;

        $l4 = (long) $i3;

        r0.<android.content.res.ResourcesImpl: long mPreloadTracingStartBitmapCount> = $l4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Resources.preload", "Preload starting");

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Resources already preloaded");

        throw r4;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo)
    {
        android.content.res.ResourcesImpl r0;
        java.lang.Object r1, r73;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        android.os.LocaleList r2, $r16, r40, r41, $r53;
        float f0, $f1, $f2, $f3, $f4, f5;
        android.view.DisplayAdjustments $r3, $r32;
        android.content.res.CompatibilityInfo $r4, r38;
        android.util.DisplayMetrics $r5, $r7, $r9, $r10, $r11, $r12, $r20, $r21, $r24, $r26, $r31, r37, r48;
        android.content.res.Configuration $r6, $r8, $r13, $r14, $r15, $r19, $r22, $r23, $r25, $r30, r36, r46, $r47, $r50, $r51, $r52, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67;
        boolean $z0, $z1, $z2;
        byte $b2;
        java.util.Locale $r17, $r28, r45, $r54;
        android.icu.text.PluralRules $r18, $r74;
        android.content.res.AssetManager $r27, $r29, $r49;
        java.lang.Throwable $r33, $r34, $r35;
        java.lang.String[] r42, r43, r44;
        java.lang.String $r55, $r56;
        android.content.res.DrawableCache $r68, $r69;
        android.content.res.ConfigurationBoundResourceCache $r70, $r71, $r72;

        r0 := @this: android.content.res.ResourcesImpl;

        r36 := @parameter0: android.content.res.Configuration;

        r37 := @parameter1: android.util.DisplayMetrics;

        r38 := @parameter2: android.content.res.CompatibilityInfo;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, "ResourcesImpl#updateConfiguration");

     label01:
        r1 = r0.<android.content.res.ResourcesImpl: java.lang.Object mAccessLock>;

        entermonitor r1;

     label02:
        if r38 == null goto label06;

     label03:
        $r32 = r0.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r32.<android.view.DisplayAdjustments: void setCompatibilityInfo(android.content.res.CompatibilityInfo)>(r38);

     label04:
        goto label06;

     label05:
        $r35 := @caughtexception;

        goto label40;

     label06:
        if r37 == null goto label08;

     label07:
        $r31 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        virtualinvoke $r31.<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>(r37);

     label08:
        $r3 = r0.<android.content.res.ResourcesImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r4 = virtualinvoke $r3.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r5 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        virtualinvoke $r4.<android.content.res.CompatibilityInfo: void applyToDisplayMetrics(android.util.DisplayMetrics)>($r5);

        i0 = virtualinvoke r0.<android.content.res.ResourcesImpl: int calcConfigChanges(android.content.res.Configuration)>(r36);

        $r6 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        r40 = virtualinvoke $r6.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

     label09:
        r41 = r40;

     label10:
        $z0 = virtualinvoke r40.<android.os.LocaleList: boolean isEmpty()>();

        if $z0 == 0 goto label11;

        r41 = staticinvoke <android.os.LocaleList: android.os.LocaleList getDefault()>();

        $r30 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        virtualinvoke $r30.<android.content.res.Configuration: void setLocales(android.os.LocaleList)>(r41);

     label11:
        $i1 = i0 & 4;

        if $i1 == 0 goto label22;

     label12:
        $i9 = virtualinvoke r41.<android.os.LocaleList: int size()>();

        if $i9 <= 1 goto label22;

        $r27 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r42 = virtualinvoke $r27.<android.content.res.AssetManager: java.lang.String[] getNonSystemLocales()>();

     label13:
        r43 = r42;

     label14:
        $z1 = staticinvoke <android.os.LocaleList: boolean isPseudoLocalesOnly(java.lang.String[])>(r42);

        if $z1 == 0 goto label18;

        $r29 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        r44 = virtualinvoke $r29.<android.content.res.AssetManager: java.lang.String[] getLocales()>();

     label15:
        r43 = r44;

     label16:
        $z2 = staticinvoke <android.os.LocaleList: boolean isPseudoLocalesOnly(java.lang.String[])>(r44);

        if $z2 == 0 goto label18;

     label17:
        r43 = null;

     label18:
        if r43 == null goto label22;

     label19:
        r45 = virtualinvoke r41.<android.os.LocaleList: java.util.Locale getFirstMatchWithEnglishSupported(java.lang.String[])>(r43);

     label20:
        if r45 == null goto label22;

     label21:
        $r28 = virtualinvoke r41.<android.os.LocaleList: java.util.Locale get(int)>(0);

        if r45 == $r28 goto label22;

        r46 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        r2 = new android.os.LocaleList;

        specialinvoke r2.<android.os.LocaleList: void <init>(java.util.Locale,android.os.LocaleList)>(r45, r41);

        virtualinvoke r46.<android.content.res.Configuration: void setLocales(android.os.LocaleList)>(r2);

     label22:
        $r47 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i10 = $r47.<android.content.res.Configuration: int densityDpi>;

        if $i10 == 0 goto label23;

        $r24 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $r23 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i7 = $r23.<android.content.res.Configuration: int densityDpi>;

        $r24.<android.util.DisplayMetrics: int densityDpi> = $i7;

        $r26 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $r25 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i8 = $r25.<android.content.res.Configuration: int densityDpi>;

        $f3 = (float) $i8;

        $f4 = $f3 * 0.00625F;

        $r26.<android.util.DisplayMetrics: float density> = $f4;

     label23:
        r48 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $r7 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        f0 = $r7.<android.util.DisplayMetrics: float density>;

        $r8 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $f1 = $r8.<android.content.res.Configuration: float fontScale>;

        $b2 = $f1 cmpl 0.0F;

        if $b2 == 0 goto label25;

        $r22 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        f5 = $r22.<android.content.res.Configuration: float fontScale>;

     label24:
        goto label26;

     label25:
        f5 = 1.0F;

     label26:
        $f2 = f0 * f5;

        r48.<android.util.DisplayMetrics: float scaledDensity> = $f2;

        $r9 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $i4 = $r9.<android.util.DisplayMetrics: int widthPixels>;

        $r10 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        $i3 = $r10.<android.util.DisplayMetrics: int heightPixels>;

        if $i4 < $i3 goto label28;

        $r20 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        i11 = $r20.<android.util.DisplayMetrics: int widthPixels>;

        $r21 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        i12 = $r21.<android.util.DisplayMetrics: int heightPixels>;

     label27:
        goto label29;

     label28:
        $r11 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        i11 = $r11.<android.util.DisplayMetrics: int heightPixels>;

        $r12 = r0.<android.content.res.ResourcesImpl: android.util.DisplayMetrics mMetrics>;

        i12 = $r12.<android.util.DisplayMetrics: int widthPixels>;

     label29:
        $r13 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i5 = $r13.<android.content.res.Configuration: int keyboardHidden>;

        if $i5 != 1 goto label31;

        $r19 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i6 = $r19.<android.content.res.Configuration: int hardKeyboardHidden>;

        if $i6 != 2 goto label31;

     label30:
        i13 = 3;

        goto label32;

     label31:
        $r14 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        i13 = $r14.<android.content.res.Configuration: int keyboardHidden>;

     label32:
        $r49 = r0.<android.content.res.ResourcesImpl: android.content.res.AssetManager mAssets>;

        $r50 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i14 = $r50.<android.content.res.Configuration: int mcc>;

        $r51 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i15 = $r51.<android.content.res.Configuration: int mnc>;

        $r52 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $r53 = virtualinvoke $r52.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $r54 = virtualinvoke $r53.<android.os.LocaleList: java.util.Locale get(int)>(0);

        $r55 = virtualinvoke $r54.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r56 = staticinvoke <android.content.res.ResourcesImpl: java.lang.String adjustLanguageTag(java.lang.String)>($r55);

        $r57 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i16 = $r57.<android.content.res.Configuration: int orientation>;

        $r58 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i17 = $r58.<android.content.res.Configuration: int touchscreen>;

        $r59 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i18 = $r59.<android.content.res.Configuration: int densityDpi>;

        $r60 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i19 = $r60.<android.content.res.Configuration: int keyboard>;

        $r61 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i20 = $r61.<android.content.res.Configuration: int navigation>;

        $r62 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i21 = $r62.<android.content.res.Configuration: int smallestScreenWidthDp>;

        $r63 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i22 = $r63.<android.content.res.Configuration: int screenWidthDp>;

        $r64 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i23 = $r64.<android.content.res.Configuration: int screenHeightDp>;

        $r65 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i24 = $r65.<android.content.res.Configuration: int screenLayout>;

        $r66 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i25 = $r66.<android.content.res.Configuration: int uiMode>;

        $r67 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $i26 = $r67.<android.content.res.Configuration: int colorMode>;

        $i27 = <android.os.Build$VERSION: int RESOURCES_SDK_INT>;

        virtualinvoke $r49.<android.content.res.AssetManager: void setConfiguration(int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>($i14, $i15, $r56, $i16, $i17, $i18, $i19, i13, $i20, i11, i12, $i21, $i22, $i23, $i24, $i25, $i26, $i27);

        $r68 = r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mDrawableCache>;

        virtualinvoke $r68.<android.content.res.DrawableCache: void onConfigurationChange(int)>(i0);

        $r69 = r0.<android.content.res.ResourcesImpl: android.content.res.DrawableCache mColorDrawableCache>;

        virtualinvoke $r69.<android.content.res.DrawableCache: void onConfigurationChange(int)>(i0);

        $r70 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mComplexColorCache>;

        virtualinvoke $r70.<android.content.res.ConfigurationBoundResourceCache: void onConfigurationChange(int)>(i0);

        $r71 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mAnimatorCache>;

        virtualinvoke $r71.<android.content.res.ConfigurationBoundResourceCache: void onConfigurationChange(int)>(i0);

        $r72 = r0.<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache mStateListAnimatorCache>;

        virtualinvoke $r72.<android.content.res.ConfigurationBoundResourceCache: void onConfigurationChange(int)>(i0);

        virtualinvoke r0.<android.content.res.ResourcesImpl: void flushLayoutCache()>();

        exitmonitor r1;

     label33:
        r73 = <android.content.res.ResourcesImpl: java.lang.Object sSync>;

        entermonitor r73;

     label34:
        $r74 = r0.<android.content.res.ResourcesImpl: android.icu.text.PluralRules mPluralRule>;

        if $r74 == null goto label35;

        $r15 = r0.<android.content.res.ResourcesImpl: android.content.res.Configuration mConfiguration>;

        $r16 = virtualinvoke $r15.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $r17 = virtualinvoke $r16.<android.os.LocaleList: java.util.Locale get(int)>(0);

        $r18 = staticinvoke <android.icu.text.PluralRules: android.icu.text.PluralRules forLocale(java.util.Locale)>($r17);

        r0.<android.content.res.ResourcesImpl: android.icu.text.PluralRules mPluralRule> = $r18;

     label35:
        exitmonitor r73;

     label36:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return;

     label37:
        $r34 := @caughtexception;

     label38:
        exitmonitor r73;

     label39:
        throw $r34;

     label40:
        exitmonitor r1;

     label41:
        throw $r35;

     label42:
        $r33 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw $r33;

        catch java.lang.Throwable from label01 to label02 with label42;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
        catch java.lang.Throwable from label19 to label20 with label05;
        catch java.lang.Throwable from label21 to label22 with label05;
        catch java.lang.Throwable from label22 to label23 with label05;
        catch java.lang.Throwable from label23 to label24 with label05;
        catch java.lang.Throwable from label26 to label27 with label05;
        catch java.lang.Throwable from label28 to label29 with label05;
        catch java.lang.Throwable from label29 to label30 with label05;
        catch java.lang.Throwable from label31 to label32 with label05;
        catch java.lang.Throwable from label32 to label33 with label05;
        catch java.lang.Throwable from label33 to label34 with label42;
        catch java.lang.Throwable from label34 to label35 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
        catch java.lang.Throwable from label39 to label40 with label42;
        catch java.lang.Throwable from label40 to label41 with label05;
        catch java.lang.Throwable from label41 to label42 with label42;
    }
}
