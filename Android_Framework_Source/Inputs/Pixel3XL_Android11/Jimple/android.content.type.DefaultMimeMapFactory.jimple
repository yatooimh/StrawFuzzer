public class android.content.type.DefaultMimeMapFactory extends java.lang.Object
{

    private void <init>()
    {
        android.content.type.DefaultMimeMapFactory r0;

        r0 := @this: android.content.type.DefaultMimeMapFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static libcore.content.type.MimeMap create()
    {
        android.content.type._$$Lambda$DefaultMimeMapFactory$3biOnZOOEGRoeaFehYke_eZnpCg $r0;
        libcore.content.type.MimeMap $r1;

        $r0 = new android.content.type._$$Lambda$DefaultMimeMapFactory$3biOnZOOEGRoeaFehYke_eZnpCg;

        specialinvoke $r0.<android.content.type._$$Lambda$DefaultMimeMapFactory$3biOnZOOEGRoeaFehYke_eZnpCg: void <init>(java.lang.Class)>(class "Landroid/content/type/DefaultMimeMapFactory;");

        $r1 = staticinvoke <android.content.type.DefaultMimeMapFactory: libcore.content.type.MimeMap create(java.util.function.Function)>($r0);

        return $r1;
    }

    public static libcore.content.type.MimeMap create(java.util.function.Function)
    {
        java.util.function.Function r0;
        libcore.content.type.MimeMap$Builder r1;
        libcore.content.type.MimeMap $r2;

        r0 := @parameter0: java.util.function.Function;

        r1 = staticinvoke <libcore.content.type.MimeMap: libcore.content.type.MimeMap$Builder builder()>();

        staticinvoke <android.content.type.DefaultMimeMapFactory: void parseTypes(libcore.content.type.MimeMap$Builder,java.util.function.Function,java.lang.String)>(r1, r0, "debian.mime.types");

        staticinvoke <android.content.type.DefaultMimeMapFactory: void parseTypes(libcore.content.type.MimeMap$Builder,java.util.function.Function,java.lang.String)>(r1, r0, "android.mime.types");

        staticinvoke <android.content.type.DefaultMimeMapFactory: void parseTypes(libcore.content.type.MimeMap$Builder,java.util.function.Function,java.lang.String)>(r1, r0, "vendor.mime.types");

        $r2 = virtualinvoke r1.<libcore.content.type.MimeMap$Builder: libcore.content.type.MimeMap build()>();

        return $r2;
    }

    static java.io.InputStream lambda$create$0(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r3;
        java.io.InputStream $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/res/");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r6);

        return $r7;
    }

    private static void parseTypes(libcore.content.type.MimeMap$Builder, java.util.function.Function, java.lang.String)
    {
        java.lang.String r0, $r6, $r8, $r17, r27, r28;
        java.util.ArrayList r1;
        int i0, $i1, $i2, i3, i4, i5;
        java.lang.Object $r2, $r7;
        boolean $z0;
        java.util.List $r9;
        java.lang.Throwable $r11, $r12, $r18, $r19, $r20;
        java.lang.StringBuilder $r13, r30;
        java.lang.RuntimeException $r16;
        libcore.content.type.MimeMap$Builder r21;
        java.util.function.Function r22;
        java.io.InputStream r23, r24;
        java.io.BufferedReader r25;
        java.io.InputStreamReader r26;
        java.lang.IllegalArgumentException r29;

        r21 := @parameter0: libcore.content.type.MimeMap$Builder;

        r22 := @parameter1: java.util.function.Function;

        r0 := @parameter2: java.lang.String;

     label01:
        $r2 = interfaceinvoke r22.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r0);

        r23 = (java.io.InputStream) $r2;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r23);

        r24 = (java.io.InputStream) r23;

     label02:
        r25 = new java.io.BufferedReader;

        r26 = new java.io.InputStreamReader;

        specialinvoke r26.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r24);

        specialinvoke r25.<java.io.BufferedReader: void <init>(java.io.Reader)>(r26);

     label03:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>(10);

     label04:
        r27 = virtualinvoke r25.<java.io.BufferedReader: java.lang.String readLine()>();

     label05:
        if r27 == null goto label16;

     label06:
        interfaceinvoke r1.<java.util.List: void clear()>();

     label07:
        i3 = 0;

     label08:
        i0 = virtualinvoke r27.<java.lang.String: int indexOf(int,int)>(32, i3);

     label09:
        i4 = i0;

        if i0 >= 0 goto label11;

     label10:
        i4 = virtualinvoke r27.<java.lang.String: int length()>();

     label11:
        r28 = virtualinvoke r27.<java.lang.String: java.lang.String substring(int,int)>(i3, i4);

        $z0 = virtualinvoke r28.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label15;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r28);

     label12:
        i5 = i4 + 1;

        i3 = i5;

     label13:
        $i1 = virtualinvoke r27.<java.lang.String: int length()>();

        if i5 < $i1 goto label08;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (java.lang.String) $r7;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r9 = interfaceinvoke r1.<java.util.List: java.util.List subList(int,int)>(1, $i2);

        virtualinvoke r21.<libcore.content.type.MimeMap$Builder: libcore.content.type.MimeMap$Builder put(java.lang.String,java.util.List)>($r8, $r9);

     label14:
        goto label04;

     label15:
        r29 = new java.lang.IllegalArgumentException;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed line: ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r6 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r29;

     label16:
        virtualinvoke r25.<java.io.BufferedReader: void close()>();

     label17:
        if r24 == null goto label19;

     label18:
        virtualinvoke r24.<java.io.InputStream: void close()>();

     label19:
        return;

     label20:
        $r18 := @caughtexception;

     label21:
        virtualinvoke r25.<java.io.BufferedReader: void close()>();

     label22:
        goto label25;

     label23:
        $r20 := @caughtexception;

     label24:
        virtualinvoke $r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

     label25:
        throw $r18;

     label26:
        $r11 := @caughtexception;

        if r24 == null goto label31;

     label27:
        virtualinvoke r24.<java.io.InputStream: void close()>();

     label28:
        goto label31;

     label29:
        $r19 := @caughtexception;

     label30:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

     label31:
        throw $r11;

     label32:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r12);

        throw $r16;

        catch java.io.IOException from label01 to label02 with label32;
        catch java.lang.RuntimeException from label01 to label02 with label32;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.io.IOException from label18 to label19 with label32;
        catch java.lang.RuntimeException from label18 to label19 with label32;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.io.IOException from label30 to label31 with label32;
        catch java.lang.RuntimeException from label30 to label31 with label32;
        catch java.io.IOException from label31 to label32 with label32;
        catch java.lang.RuntimeException from label31 to label32 with label32;
    }
}
