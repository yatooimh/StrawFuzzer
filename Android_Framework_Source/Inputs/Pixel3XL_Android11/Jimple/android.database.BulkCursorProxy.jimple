final class android.database.BulkCursorProxy extends java.lang.Object implements android.database.IBulkCursor
{
    private android.os.Bundle mExtras;
    private android.os.IBinder mRemote;

    public void <init>(android.os.IBinder)
    {
        android.database.BulkCursorProxy r0;
        android.os.IBinder r1;

        r0 := @this: android.database.BulkCursorProxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote> = r1;

        r0.<android.database.BulkCursorProxy: android.os.Bundle mExtras> = null;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.database.BulkCursorProxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.database.BulkCursorProxy;

        $r1 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public void close() throws android.os.RemoteException
    {
        android.database.BulkCursorProxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.BulkCursorProxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.content.IBulkCursor");

        $r4 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(7, r1, r2, 0);

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>(r2);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void deactivate() throws android.os.RemoteException
    {
        android.database.BulkCursorProxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.BulkCursorProxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.content.IBulkCursor");

        $r4 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r1, r2, 0);

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>(r2);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.os.Bundle getExtras() throws android.os.RemoteException
    {
        android.database.BulkCursorProxy r0;
        android.os.Parcel r1, r2;
        android.os.Bundle $r4, $r5, $r7;
        android.os.IBinder $r6;
        java.lang.Throwable $r8;

        r0 := @this: android.database.BulkCursorProxy;

        $r4 = r0.<android.database.BulkCursorProxy: android.os.Bundle mExtras>;

        if $r4 != null goto label4;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.content.IBulkCursor");

        $r6 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        interfaceinvoke $r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(5, r1, r2, 0);

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>(r2);

        $r7 = virtualinvoke r2.<android.os.Parcel: android.os.Bundle readBundle()>();

        r0.<android.database.BulkCursorProxy: android.os.Bundle mExtras> = $r7;

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r8;

     label4:
        $r5 = r0.<android.database.BulkCursorProxy: android.os.Bundle mExtras>;

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.database.CursorWindow getWindow(int) throws android.os.RemoteException
    {
        android.database.BulkCursorProxy r0;
        int i0, $i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r4;
        android.database.CursorWindow r5;

        r0 := @this: android.database.BulkCursorProxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.content.IBulkCursor");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r1, r2, 0);

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>(r2);

     label2:
        r5 = null;

     label3:
        $i1 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        if $i1 != 1 goto label4;

        r5 = staticinvoke <android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>(r2);

     label4:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return r5;

     label5:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void onMove(int) throws android.os.RemoteException
    {
        android.database.BulkCursorProxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.BulkCursorProxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.content.IBulkCursor");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r4 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r1, r2, 0);

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>(r2);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int requery(android.database.IContentObserver) throws android.os.RemoteException
    {
        android.database.BulkCursorProxy r0;
        android.os.Parcel r1, r2;
        boolean z0;
        android.os.IBinder $r3;
        android.os.Bundle $r4;
        java.lang.Throwable $r5;
        android.database.IContentObserver r6;
        int i0;

        r0 := @this: android.database.BulkCursorProxy;

        r6 := @parameter0: android.database.IContentObserver;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.content.IBulkCursor");

        virtualinvoke r1.<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>(r6);

        $r3 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r1, r2, 0);

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>(r2);

     label2:
        if z0 != 0 goto label3;

        i0 = -1;

        goto label4;

     label3:
        i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        $r4 = virtualinvoke r2.<android.os.Parcel: android.os.Bundle readBundle()>();

        r0.<android.database.BulkCursorProxy: android.os.Bundle mExtras> = $r4;

     label4:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return i0;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.os.Bundle respond(android.os.Bundle) throws android.os.RemoteException
    {
        android.database.BulkCursorProxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r4;
        android.os.Bundle r5, r6;

        r0 := @this: android.database.BulkCursorProxy;

        r5 := @parameter0: android.os.Bundle;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.content.IBulkCursor");

        virtualinvoke r1.<android.os.Parcel: void writeBundle(android.os.Bundle)>(r5);

        $r3 = r0.<android.database.BulkCursorProxy: android.os.IBinder mRemote>;

        interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(6, r1, r2, 0);

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>(r2);

        r6 = virtualinvoke r2.<android.os.Parcel: android.os.Bundle readBundle()>();

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return r6;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
