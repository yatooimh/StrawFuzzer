public class android.database.MatrixCursor extends android.database.AbstractCursor
{
    private final int columnCount;
    private final java.lang.String[] columnNames;
    private java.lang.Object[] data;
    private int rowCount;

    public void <init>(java.lang.String[])
    {
        android.database.MatrixCursor r0;
        java.lang.String[] r1;

        r0 := @this: android.database.MatrixCursor;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>(r1, 16);

        return;
    }

    public void <init>(java.lang.String[], int)
    {
        android.database.MatrixCursor r0;
        java.lang.String[] r1;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object[] $r2;

        r0 := @this: android.database.MatrixCursor;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        specialinvoke r0.<android.database.AbstractCursor: void <init>()>();

        r0.<android.database.MatrixCursor: int rowCount> = 0;

        r0.<android.database.MatrixCursor: java.lang.String[] columnNames> = r1;

        $i1 = lengthof r1;

        r0.<android.database.MatrixCursor: int columnCount> = $i1;

        i4 = i0;

        if i0 >= 1 goto label1;

        i4 = 1;

     label1:
        $i2 = r0.<android.database.MatrixCursor: int columnCount>;

        $i3 = $i2 * i4;

        $r2 = newarray (java.lang.Object)[$i3];

        r0.<android.database.MatrixCursor: java.lang.Object[] data> = $r2;

        return;
    }

    static int access$000(android.database.MatrixCursor)
    {
        android.database.MatrixCursor r0;
        int $i0;

        r0 := @parameter0: android.database.MatrixCursor;

        $i0 = r0.<android.database.MatrixCursor: int columnCount>;

        return $i0;
    }

    static java.lang.Object[] access$100(android.database.MatrixCursor)
    {
        android.database.MatrixCursor r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: android.database.MatrixCursor;

        $r1 = r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        return $r1;
    }

    static java.lang.String[] access$200(android.database.MatrixCursor)
    {
        android.database.MatrixCursor r0;
        java.lang.String[] $r1;

        r0 := @parameter0: android.database.MatrixCursor;

        $r1 = r0.<android.database.MatrixCursor: java.lang.String[] columnNames>;

        return $r1;
    }

    private void addRow(java.util.ArrayList, int)
    {
        android.database.MatrixCursor r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object[] r1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        java.lang.Object $r9;
        java.util.ArrayList r10;

        r0 := @this: android.database.MatrixCursor;

        r10 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 = virtualinvoke r10.<java.util.ArrayList: int size()>();

        $i2 = r0.<android.database.MatrixCursor: int columnCount>;

        if i1 != $i2 goto label3;

        $i4 = r0.<android.database.MatrixCursor: int rowCount>;

        $i5 = $i4 + 1;

        r0.<android.database.MatrixCursor: int rowCount> = $i5;

        r1 = r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        i7 = 0;

     label1:
        if i7 >= i1 goto label2;

        $i6 = i0 + i7;

        $r9 = virtualinvoke r10.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r1[$i6] = $r9;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("columnNames.length = ");

        $i3 = r0.<android.database.MatrixCursor: int columnCount>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", columnValues.size() = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private void ensureCapacity(int)
    {
        android.database.MatrixCursor r0;
        int i0, i1, $i2, $i3, $i4, i5;
        java.lang.Object[] r1, r2, r3;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        r2 = r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i2 = lengthof r2;

        if i0 <= $i2 goto label2;

        r1 = r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i3 = lengthof r2;

        i1 = $i3 * 2;

        i5 = i1;

        if i1 >= i0 goto label1;

        i5 = i0;

     label1:
        r3 = newarray (java.lang.Object)[i5];

        r0.<android.database.MatrixCursor: java.lang.Object[] data> = r3;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, $i4);

     label2:
        return;
    }

    private java.lang.Object get(int)
    {
        android.database.MatrixCursor r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringBuilder $r2;
        android.database.CursorIndexOutOfBoundsException $r7, $r9, $r10;
        java.lang.String $r8;
        java.lang.Object[] $r11;
        java.lang.Object $r12;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        if i0 < 0 goto label3;

        $i2 = r0.<android.database.MatrixCursor: int columnCount>;

        if i0 >= $i2 goto label3;

        $i3 = r0.<android.database.MatrixCursor: int mPos>;

        if $i3 < 0 goto label2;

        $i5 = r0.<android.database.MatrixCursor: int mPos>;

        $i4 = r0.<android.database.MatrixCursor: int rowCount>;

        if $i5 >= $i4 goto label1;

        $r11 = r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i7 = r0.<android.database.MatrixCursor: int mPos>;

        $i6 = r0.<android.database.MatrixCursor: int columnCount>;

        $i8 = $i7 * $i6;

        $i9 = $i8 + i0;

        $r12 = $r11[$i9];

        return $r12;

     label1:
        $r10 = new android.database.CursorIndexOutOfBoundsException;

        specialinvoke $r10.<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>("After last row.");

        throw $r10;

     label2:
        $r9 = new android.database.CursorIndexOutOfBoundsException;

        specialinvoke $r9.<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>("Before first row.");

        throw $r9;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested column: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", # of columns: ");

        $i1 = r0.<android.database.MatrixCursor: int columnCount>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = new android.database.CursorIndexOutOfBoundsException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void addRow(java.lang.Iterable)
    {
        android.database.MatrixCursor r0;
        java.lang.Object[] r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3, $r4;
        int $i0, $i1, i2, i3, i4, i5;
        java.util.ArrayList $r5;
        java.lang.Iterable r6;
        java.lang.Object r7;

        r0 := @this: android.database.MatrixCursor;

        r6 := @parameter0: java.lang.Iterable;

        i2 = r0.<android.database.MatrixCursor: int rowCount>;

        i3 = r0.<android.database.MatrixCursor: int columnCount>;

        i4 = i2 * i3;

        i5 = i3 + i4;

        specialinvoke r0.<android.database.MatrixCursor: void ensureCapacity(int)>(i5);

        $z0 = r6 instanceof java.util.ArrayList;

        if $z0 == 0 goto label1;

        $r5 = (java.util.ArrayList) r6;

        specialinvoke r0.<android.database.MatrixCursor: void addRow(java.util.ArrayList,int)>($r5, i4);

        return;

     label1:
        r1 = r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        r2 = interfaceinvoke r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if i4 == i5 goto label3;

        r1[i4] = r7;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("columnValues.size() > columnNames.length");

        throw $r4;

     label4:
        if i4 != i5 goto label5;

        $i0 = r0.<android.database.MatrixCursor: int rowCount>;

        $i1 = $i0 + 1;

        r0.<android.database.MatrixCursor: int rowCount> = $i1;

        return;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("columnValues.size() < columnNames.length");

        throw $r3;
    }

    public void addRow(java.lang.Object[])
    {
        android.database.MatrixCursor r0;
        java.lang.Object[] r1, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;

        r0 := @this: android.database.MatrixCursor;

        r1 := @parameter0: java.lang.Object[];

        i6 = lengthof r1;

        i0 = r0.<android.database.MatrixCursor: int columnCount>;

        if i6 != i0 goto label1;

        i7 = r0.<android.database.MatrixCursor: int rowCount>;

        $i3 = i7 + 1;

        r0.<android.database.MatrixCursor: int rowCount> = $i3;

        i8 = i7 * i0;

        $i4 = i0 + i8;

        specialinvoke r0.<android.database.MatrixCursor: void ensureCapacity(int)>($i4);

        $r10 = r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i5 = r0.<android.database.MatrixCursor: int columnCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r10, i8, $i5);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("columnNames.length = ");

        $i1 = r0.<android.database.MatrixCursor: int columnCount>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", columnValues.length = ");

        $i2 = lengthof r1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public byte[] getBlob(int)
    {
        android.database.MatrixCursor r0;
        int i0;
        java.lang.Object $r1;
        byte[] $r2;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        $r2 = (byte[]) $r1;

        return $r2;
    }

    public java.lang.String[] getColumnNames()
    {
        android.database.MatrixCursor r0;
        java.lang.String[] $r1;

        r0 := @this: android.database.MatrixCursor;

        $r1 = r0.<android.database.MatrixCursor: java.lang.String[] columnNames>;

        return $r1;
    }

    public int getCount()
    {
        android.database.MatrixCursor r0;
        int $i0;

        r0 := @this: android.database.MatrixCursor;

        $i0 = r0.<android.database.MatrixCursor: int rowCount>;

        return $i0;
    }

    public double getDouble(int)
    {
        android.database.MatrixCursor r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r2;
        double $d0, $d1;
        java.lang.Number $r3;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        if r1 != null goto label1;

        return 0.0;

     label1:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Number) r1;

        $d1 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        return $d1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        return $d0;
    }

    public float getFloat(int)
    {
        android.database.MatrixCursor r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r2;
        float $f0, $f1;
        java.lang.Number $r3;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        if r1 != null goto label1;

        return 0.0F;

     label1:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Number) r1;

        $f1 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        return $f1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r2);

        return $f0;
    }

    public int getInt(int)
    {
        android.database.MatrixCursor r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Number $r3;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Number) r1;

        $i2 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        return $i2;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i1;
    }

    public long getLong(int)
    {
        android.database.MatrixCursor r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r2;
        long $l1, $l2;
        java.lang.Number $r3;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        if r1 != null goto label1;

        return 0L;

     label1:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Number) r1;

        $l2 = virtualinvoke $r3.<java.lang.Number: long longValue()>();

        return $l2;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        return $l1;
    }

    public short getShort(int)
    {
        android.database.MatrixCursor r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r2;
        short $s1, $s2;
        java.lang.Number $r3;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Number) r1;

        $s2 = virtualinvoke $r3.<java.lang.Number: short shortValue()>();

        return $s2;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $s1 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>($r2);

        return $s1;
    }

    public java.lang.String getString(int)
    {
        android.database.MatrixCursor r0;
        int i0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int getType(int)
    {
        android.database.MatrixCursor r0;
        int i0, $i1;
        java.lang.Object $r1;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        $i1 = staticinvoke <android.database.DatabaseUtils: int getTypeOfObject(java.lang.Object)>($r1);

        return $i1;
    }

    public boolean isNull(int)
    {
        android.database.MatrixCursor r0;
        int i0;
        java.lang.Object $r1;
        boolean z0;

        r0 := @this: android.database.MatrixCursor;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.database.MatrixCursor: java.lang.Object get(int)>(i0);

        if $r1 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.database.MatrixCursor$RowBuilder newRow()
    {
        android.database.MatrixCursor r0;
        int i0, i1, $i2, $i3;
        android.database.MatrixCursor$RowBuilder $r1;

        r0 := @this: android.database.MatrixCursor;

        i0 = r0.<android.database.MatrixCursor: int rowCount>;

        i1 = i0 + 1;

        r0.<android.database.MatrixCursor: int rowCount> = i1;

        $i2 = r0.<android.database.MatrixCursor: int columnCount>;

        $i3 = i1 * $i2;

        specialinvoke r0.<android.database.MatrixCursor: void ensureCapacity(int)>($i3);

        $r1 = new android.database.MatrixCursor$RowBuilder;

        specialinvoke $r1.<android.database.MatrixCursor$RowBuilder: void <init>(android.database.MatrixCursor,int)>(r0, i0);

        return $r1;
    }
}
