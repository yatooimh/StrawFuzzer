public abstract class android.database.Observable extends java.lang.Object
{
    protected final java.util.ArrayList mObservers;

    public void <init>()
    {
        android.database.Observable r0;
        java.util.ArrayList $r1;

        r0 := @this: android.database.Observable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.database.Observable: java.util.ArrayList mObservers> = $r1;

        return;
    }

    public void registerObserver(java.lang.Object)
    {
        android.database.Observable r0;
        java.util.ArrayList r1, $r5, $r10;
        java.lang.IllegalStateException r2;
        java.lang.StringBuilder r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.lang.String $r9;
        java.lang.Throwable $r11;
        java.lang.Object r12;

        r0 := @this: android.database.Observable;

        r12 := @parameter0: java.lang.Object;

        if r12 == null goto label7;

        r1 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        entermonitor r1;

     label1:
        $r5 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean contains(java.lang.Object)>(r12);

        if $z0 != 0 goto label3;

        $r10 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

        exitmonitor r1;

     label2:
        return;

     label3:
        r2 = new java.lang.IllegalStateException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Observer ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already registered.");

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw r2;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r11;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The observer is null.");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void unregisterAll()
    {
        android.database.Observable r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.database.Observable;

        r1 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void unregisterObserver(java.lang.Object)
    {
        android.database.Observable r0;
        java.util.ArrayList r1, $r5, $r10;
        int i0;
        java.lang.IllegalStateException r2;
        java.lang.StringBuilder r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r9;
        java.lang.Throwable $r12;
        java.lang.Object r13;

        r0 := @this: android.database.Observable;

        r13 := @parameter0: java.lang.Object;

        if r13 == null goto label10;

        r1 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        i0 = virtualinvoke $r5.<java.util.ArrayList: int indexOf(java.lang.Object)>(r13);

     label02:
        if i0 == -1 goto label06;

     label03:
        $r10 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        r2 = new java.lang.IllegalStateException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Observer ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not registered.");

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw r2;

     label07:
        $r12 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r12;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The observer is null.");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }
}
