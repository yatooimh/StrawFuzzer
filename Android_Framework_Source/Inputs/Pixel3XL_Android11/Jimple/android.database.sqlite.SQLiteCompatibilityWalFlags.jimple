public class android.database.sqlite.SQLiteCompatibilityWalFlags extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static volatile boolean sCallingGlobalSettings;
    private static volatile boolean sInitialized;
    private static volatile boolean sLegacyCompatibilityWalEnabled;
    private static volatile long sTruncateSize;
    private static volatile java.lang.String sWALSyncMode;

    static void <clinit>()
    {
        <android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String TAG> = "SQLiteCompatibilityWalFlags";

        <android.database.sqlite.SQLiteCompatibilityWalFlags: long sTruncateSize> = -1L;

        return;
    }

    private void <init>()
    {
        android.database.sqlite.SQLiteCompatibilityWalFlags r0;

        r0 := @this: android.database.sqlite.SQLiteCompatibilityWalFlags;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long getTruncateSize()
    {
        long $l0;

        staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: void initIfNeeded()>();

        $l0 = <android.database.sqlite.SQLiteCompatibilityWalFlags: long sTruncateSize>;

        return $l0;
    }

    public static java.lang.String getWALSyncMode()
    {
        boolean $z0;
        java.lang.IllegalStateException $r0;
        java.lang.String $r1;

        staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: void initIfNeeded()>();

        $z0 = <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sLegacyCompatibilityWalEnabled>;

        if $z0 == 0 goto label1;

        $r1 = <android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String sWALSyncMode>;

        return $r1;

     label1:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("isLegacyCompatibilityWalEnabled() == false");

        throw $r0;
    }

    public static void init(java.lang.String)
    {
        boolean $z0, $z1, $z2;
        android.util.KeyValueListParser $r1;
        java.lang.String $r2, $r3, $r8, $r10, $r15, r16;
        int $i0;
        long $l1;
        java.lang.StringBuilder $r4, $r12;
        java.lang.Throwable $r11;

        r16 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r16);

        if $z0 == 0 goto label1;

        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sInitialized> = 1;

        return;

     label1:
        $r1 = new android.util.KeyValueListParser;

        specialinvoke $r1.<android.util.KeyValueListParser: void <init>(char)>(44);

     label2:
        virtualinvoke $r1.<android.util.KeyValueListParser: void setString(java.lang.String)>(r16);

     label3:
        $z1 = virtualinvoke $r1.<android.util.KeyValueListParser: boolean getBoolean(java.lang.String,boolean)>("legacy_compatibility_wal_enabled", 0);

        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sLegacyCompatibilityWalEnabled> = $z1;

        $r2 = staticinvoke <android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()>();

        $r3 = virtualinvoke $r1.<android.util.KeyValueListParser: java.lang.String getString(java.lang.String,java.lang.String)>("wal_syncmode", $r2);

        <android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String sWALSyncMode> = $r3;

        $i0 = virtualinvoke $r1.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("truncate_size", -1);

        $l1 = (long) $i0;

        <android.database.sqlite.SQLiteCompatibilityWalFlags: long sTruncateSize> = $l1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read compatibility WAL flags: legacy_compatibility_wal_enabled=");

        $z2 = <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sLegacyCompatibilityWalEnabled>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", wal_syncmode=");

        $r8 = <android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String sWALSyncMode>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SQLiteCompatibilityWalFlags", $r10);

        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sInitialized> = 1;

        return;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting has invalid format: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteCompatibilityWalFlags", $r15, $r11);

        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sInitialized> = 1;

        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private static void initIfNeeded()
    {
        boolean $z0, $z1;
        android.content.ContentResolver $r0;
        java.lang.Throwable $r1;
        android.app.ActivityThread r2;
        android.app.Application r3;
        java.lang.String r4;

        $z0 = <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sInitialized>;

        if $z0 != 0 goto label8;

        $z1 = <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sCallingGlobalSettings>;

        if $z1 == 0 goto label1;

        goto label8;

     label1:
        r2 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        if r2 != null goto label2;

        r3 = null;

        goto label3;

     label2:
        r3 = virtualinvoke r2.<android.app.ActivityThread: android.app.Application getApplication()>();

     label3:
        if r3 != null goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteCompatibilityWalFlags", "Cannot read global setting sqlite_compatibility_wal_flags - Application state not available");

        r4 = null;

        goto label6;

     label4:
        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sCallingGlobalSettings> = 1;

        $r0 = virtualinvoke r3.<android.app.Application: android.content.ContentResolver getContentResolver()>();

        r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r0, "sqlite_compatibility_wal_flags");

     label5:
        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sCallingGlobalSettings> = 0;

     label6:
        staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: void init(java.lang.String)>(r4);

        return;

     label7:
        $r1 := @caughtexception;

        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sCallingGlobalSettings> = 0;

        throw $r1;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public static boolean isLegacyCompatibilityWalEnabled()
    {
        boolean $z0;

        staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: void initIfNeeded()>();

        $z0 = <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sLegacyCompatibilityWalEnabled>;

        return $z0;
    }

    public static void reset()
    {
        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sInitialized> = 0;

        <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean sLegacyCompatibilityWalEnabled> = 0;

        <android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String sWALSyncMode> = null;

        return;
    }
}
