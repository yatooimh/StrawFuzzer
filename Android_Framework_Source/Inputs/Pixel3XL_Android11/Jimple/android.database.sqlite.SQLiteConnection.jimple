public final class android.database.sqlite.SQLiteConnection extends java.lang.Object implements android.os.CancellationSignal$OnCancelListener
{
    static final boolean $assertionsDisabled;
    private static final boolean DEBUG;
    private static final byte[] EMPTY_BYTE_ARRAY;
    private static final java.lang.String[] EMPTY_STRING_ARRAY;
    private static final java.lang.String TAG;
    private int mCancellationSignalAttachCount;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration;
    private final int mConnectionId;
    private long mConnectionPtr;
    private final boolean mIsPrimaryConnection;
    private final boolean mIsReadOnlyConnection;
    private boolean mOnlyAllowReadOnlyOperations;
    private final android.database.sqlite.SQLiteConnectionPool mPool;
    private final android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache;
    private android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool;
    private final android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        byte[] $r1;

        <android.database.sqlite.SQLiteConnection: java.lang.String TAG> = "SQLiteConnection";

        <android.database.sqlite.SQLiteConnection: boolean DEBUG> = 0;

        <android.database.sqlite.SQLiteConnection: boolean $assertionsDisabled> = 0;

        $r0 = newarray (java.lang.String)[0];

        <android.database.sqlite.SQLiteConnection: java.lang.String[] EMPTY_STRING_ARRAY> = $r0;

        $r1 = newarray (byte)[0];

        <android.database.sqlite.SQLiteConnection: byte[] EMPTY_BYTE_ARRAY> = $r1;

        return;
    }

    private void <init>(android.database.sqlite.SQLiteConnectionPool, android.database.sqlite.SQLiteDatabaseConfiguration, int, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnectionPool r1;
        android.database.sqlite.SQLiteDatabaseConfiguration r2, $r5, $r7;
        dalvik.system.CloseGuard $r3, $r8;
        android.database.sqlite.SQLiteConnection$OperationLog $r4;
        int $i0, $i1, i2, i3;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r6;
        boolean z0, z1;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        r2 := @parameter1: android.database.sqlite.SQLiteDatabaseConfiguration;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard> = $r3;

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnectionPool mPool> = r1;

        $r4 = new android.database.sqlite.SQLiteConnection$OperationLog;

        specialinvoke $r4.<android.database.sqlite.SQLiteConnection$OperationLog: void <init>(android.database.sqlite.SQLiteConnectionPool)>(r1);

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations> = $r4;

        $r5 = new android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)>(r2);

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration> = $r5;

        r0.<android.database.sqlite.SQLiteConnection: int mConnectionId> = i2;

        r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection> = z0;

        i3 = r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        z1 = 1;

        $i0 = i3 & 1;

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection> = z1;

        $r6 = new android.database.sqlite.SQLiteConnection$PreparedStatementCache;

        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i1 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        specialinvoke $r6.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void <init>(android.database.sqlite.SQLiteConnection,int)>(r0, $i1);

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache> = $r6;

        $r8 = r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    static void access$100(android.database.sqlite.SQLiteConnection, android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnection;

        r1 := @parameter1: android.database.sqlite.SQLiteConnection$PreparedStatement;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void finalizePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r1);

        return;
    }

    static java.lang.String access$200(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String trimSqlForDisplay(java.lang.String)>(r0);

        return $r1;
    }

    static byte[] access$400()
    {
        byte[] $r0;

        $r0 = <android.database.sqlite.SQLiteConnection: byte[] EMPTY_BYTE_ARRAY>;

        return $r0;
    }

    private android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, $l3, $l4, $l5, $l6;
        int i1, i2;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r1, $r3;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;
        android.database.sqlite.SQLiteConnection$PreparedStatement r7, r8, r9;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (android.database.sqlite.SQLiteConnection$PreparedStatement) $r2;

        z4 = 0;

        if r7 == null goto label02;

        $z2 = r7.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse>;

        if $z2 != 0 goto label01;

        return r7;

     label01:
        z4 = 1;

     label02:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        l0 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativePrepareStatement(long,java.lang.String)>($l3, r6);

        r8 = r7;

     label03:
        $l4 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        i1 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeGetParameterCount(long,long)>($l4, l0);

     label04:
        r8 = r7;

     label05:
        i2 = staticinvoke <android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>(r6);

     label06:
        r8 = r7;

     label07:
        $l5 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $z0 = staticinvoke <android.database.sqlite.SQLiteConnection: boolean nativeIsReadOnly(long,long)>($l5, l0);

        r9 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,long,int,int,boolean)>(r6, l0, i1, i2, $z0);

     label08:
        if z4 != 0 goto label14;

        r8 = r9;

     label09:
        $z1 = staticinvoke <android.database.sqlite.SQLiteConnection: boolean isCacheable(int)>(i2);

        if $z1 == 0 goto label14;

     label10:
        r8 = r9;

     label11:
        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r9);

     label12:
        r8 = r9;

     label13:
        r9.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache> = 1;

     label14:
        r9.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse> = 1;

        return r9;

     label15:
        $r5 := @caughtexception;

        if r8 == null goto label16;

        $z3 = r8.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache>;

        if $z3 != 0 goto label17;

     label16:
        $l6 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeFinalizeStatement(long,long)>($l6, l0);

     label17:
        throw $r5;

        catch java.lang.RuntimeException from label03 to label04 with label15;
        catch java.lang.RuntimeException from label05 to label06 with label15;
        catch java.lang.RuntimeException from label07 to label08 with label15;
        catch java.lang.RuntimeException from label09 to label10 with label15;
        catch java.lang.RuntimeException from label11 to label12 with label15;
        catch java.lang.RuntimeException from label13 to label14 with label15;
    }

    private void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0, $z1;
        dalvik.system.BlockGuard$Policy $r3, $r4;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label2;

        $z1 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        if $z1 == 0 goto label1;

        $r4 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r4.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        goto label2;

     label1:
        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

     label2:
        return;
    }

    private void attachCancellationSignal(android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        int i0, $i1;
        long $l2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.os.CancellationSignal;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.CancellationSignal: void throwIfCanceled()>();

        $i1 = r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        i0 = $i1 + 1;

        r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount> = i0;

        if i0 != 1 goto label1;

        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeResetCancel(long,boolean)>($l2, 1);

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(r0);

     label1:
        return;
    }

    private void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement, java.lang.Object[])
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, l2, $l6, $l7, $l9, $l10, $l13, $l14, l19;
        int i1, $i3, $i4, $i5, $i8, $i11, $i12, $i15, $i16, i17, i18;
        java.lang.StringBuilder $r1;
        android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException $r7;
        java.lang.String $r8, $r12;
        java.lang.Number $r9, $r10;
        double $d0;
        byte[] $r11;
        boolean $z0, $z1;
        java.lang.Boolean $r13;
        android.database.sqlite.SQLiteConnection$PreparedStatement r14;
        java.lang.Object[] r15;
        java.lang.Object r16;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r14 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        r15 := @parameter1: java.lang.Object[];

        if r15 == null goto label01;

        i17 = lengthof r15;

        goto label02;

     label01:
        i17 = 0;

     label02:
        $i3 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        if i17 != $i3 goto label14;

        if i17 != 0 goto label03;

        return;

     label03:
        l0 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i18 = 0;

     label04:
        if i18 >= i17 goto label13;

        r16 = r15[i18];

        i1 = staticinvoke <android.database.DatabaseUtils: int getTypeOfObject(java.lang.Object)>(r16);

        if i1 == 0 goto label11;

        if i1 == 1 goto label10;

        if i1 == 2 goto label09;

        if i1 == 4 goto label08;

        $z0 = r16 instanceof java.lang.Boolean;

        if $z0 == 0 goto label07;

        l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $r13 = (java.lang.Boolean) r16;

        $z1 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label05;

        l19 = 1L;

        goto label06;

     label05:
        l19 = 0L;

     label06:
        $i16 = i18 + 1;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindLong(long,long,int,long)>(l2, l0, $i16, l19);

        goto label12;

     label07:
        $l14 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i15 = i18 + 1;

        $r12 = virtualinvoke r16.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindString(long,long,int,java.lang.String)>($l14, l0, $i15, $r12);

        goto label12;

     label08:
        $l13 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i12 = i18 + 1;

        $r11 = (byte[]) r16;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindBlob(long,long,int,byte[])>($l13, l0, $i12, $r11);

        goto label12;

     label09:
        $l10 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i11 = i18 + 1;

        $r10 = (java.lang.Number) r16;

        $d0 = virtualinvoke $r10.<java.lang.Number: double doubleValue()>();

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindDouble(long,long,int,double)>($l10, l0, $i11, $d0);

        goto label12;

     label10:
        $l7 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i8 = i18 + 1;

        $r9 = (java.lang.Number) r16;

        $l9 = virtualinvoke $r9.<java.lang.Number: long longValue()>();

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindLong(long,long,int,long)>($l7, l0, $i8, $l9);

        goto label12;

     label11:
        $l6 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i5 = i18 + 1;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindNull(long,long,int)>($l6, l0, $i5);

     label12:
        i18 = i18 + 1;

        goto label04;

     label13:
        return;

     label14:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $i4 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bind arguments but ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were provided.");

        $r7 = new android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException;

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private static java.lang.String canonicalizeSyncMode(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0, $z1, $z2;
        byte b1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        tableswitch($i0)
        {
            case 48: goto label4;
            case 49: goto label3;
            case 50: goto label2;
            default: goto label1;
        };

     label1:
        goto label5;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("2");

        if $z0 == 0 goto label1;

        b1 = 2;

        goto label6;

     label3:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z1 == 0 goto label1;

        b1 = 1;

        goto label6;

     label4:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z2 == 0 goto label1;

        b1 = 0;

        goto label6;

     label5:
        b1 = -1;

     label6:
        if b1 == 0 goto label9;

        if b1 == 1 goto label8;

        if b1 == 2 goto label7;

        return r0;

     label7:
        return "FULL";

     label8:
        return "NORMAL";

     label9:
        return "OFF";
    }

    private void checkDatabaseWiped()
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.StringBuilder r1;
        boolean z0, $z1, $z2, z4;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2, $r7;
        java.lang.String $r3, $r6, $r8;
        long $l0;
        byte $b1;
        java.lang.Throwable $r9;
        java.io.File r10;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $z1 = staticinvoke <android.database.sqlite.SQLiteGlobal: boolean checkDbWipe()>();

        if $z1 != 0 goto label01;

        return;

     label01:
        r10 = new java.io.File;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r3 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wipecheck");

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r10.<java.io.File: void <init>(java.lang.String)>($r6);

        $l0 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("SELECT count(*) FROM sqlite_master WHERE type=\'table\' AND name=\'android_metadata\'", null, null);

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label03;

     label02:
        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        z0 = virtualinvoke r10.<java.io.File: boolean exists()>();

        $z2 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z2 != 0 goto label07;

     label05:
        if z0 != 0 goto label07;

     label06:
        virtualinvoke r10.<java.io.File: boolean createNewFile()>();

     label07:
        if z4 != 0 goto label09;

        if z0 == 0 goto label09;

     label08:
        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r8 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        staticinvoke <android.database.sqlite.SQLiteDatabase: void wipeDetected(java.lang.String,java.lang.String)>($r8, "unknown");

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        staticinvoke <android.database.sqlite.SQLiteDatabase: void wtfAsSystemServer(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnection", "Unexpected exception while checking for wipe", $r9);

     label11:
        return;

        catch java.lang.RuntimeException from label01 to label02 with label10;
        catch java.io.IOException from label01 to label02 with label10;
        catch java.lang.RuntimeException from label04 to label05 with label10;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.lang.RuntimeException from label06 to label07 with label10;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.lang.RuntimeException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label10;
    }

    private void detachCancellationSignal(android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        int i0, $i1;
        long $l2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.os.CancellationSignal;

        if r1 == null goto label1;

        $i1 = r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        i0 = $i1 - 1;

        r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount> = i0;

        if i0 != 0 goto label1;

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeResetCancel(long,boolean)>($l2, 0);

     label1:
        return;
    }

    private void dispose(boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean z0;
        int i0;
        android.database.sqlite.SQLiteConnection$OperationLog $r1, $r3, $r6;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r2;
        long $l1, $l2;
        dalvik.system.CloseGuard $r4, r7;
        java.lang.Throwable $r5;
        byte $b3;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        z0 := @parameter0: boolean;

        r7 = r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard>;

        if r7 == null goto label2;

        if z0 == 0 goto label1;

        virtualinvoke r7.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void close()>();

     label2:
        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label6;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r1.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("close", null, null);

     label3:
        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void evictAll()>();

        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeClose(long)>($l1);

        r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr> = 0L;

     label4:
        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void executePerConnectionSqlFromConfiguration(int)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.util.Pair r1;
        int i0, $i1, i2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3, $r5;
        java.util.ArrayList $r4, $r6;
        java.lang.Object $r7, $r8, $r10, $r11, $r20, $r21;
        java.lang.String $r9, $r13, $r19, $r23;
        java.lang.Object[] $r12, $r22;
        java.lang.StringBuilder $r15;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        i2 := @parameter0: int;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList perConnectionSql>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i2 >= $i1 goto label5;

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r6 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList perConnectionSql>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r1 = (android.util.Pair) $r7;

        $r8 = r1.<android.util.Pair: java.lang.Object first>;

        $r9 = (java.lang.String) $r8;

        i0 = staticinvoke <android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>($r9);

        if i0 == 1 goto label3;

        if i0 != 7 goto label2;

        $r20 = r1.<android.util.Pair: java.lang.Object first>;

        $r23 = (java.lang.String) $r20;

        $r21 = r1.<android.util.Pair: java.lang.Object second>;

        $r22 = (java.lang.Object[]) $r21;

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r23, $r22, null);

        goto label4;

     label2:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported configuration statement: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label3:
        $r10 = r1.<android.util.Pair: java.lang.Object first>;

        $r13 = (java.lang.String) $r10;

        $r11 = r1.<android.util.Pair: java.lang.Object second>;

        $r12 = (java.lang.Object[]) $r11;

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r13, $r12, null);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    private void finalizePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        long $l0, $l1;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeFinalizeStatement(long,long)>($l1, $l0);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void recyclePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r1);

        return;
    }

    private android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int, long, long)
    {
        android.database.sqlite.SQLiteConnection r0;
        int i0, $i3, $i4, $i5, $i6;
        long l1, l2;
        java.lang.String r1, r12;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0;
        android.database.sqlite.SQLiteDebug$DbStats $r3;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r4, $r5, $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r1 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        r12 = r1;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i6 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r3 = new android.database.sqlite.SQLiteDebug$DbStats;

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i3 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: int hitCount()>();

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i4 = virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: int missCount()>();

        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i5 = virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: int size()>();

        specialinvoke $r3.<android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)>(r12, l1, l2, i0, $i3, $i4, $i5);

        return $r3;
    }

    private static boolean isCacheable(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 2 goto label2;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private void maybeTruncateWalFile()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, l1;
        byte $b2, $b3;
        java.lang.StringBuilder $r2, $r9;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.String $r4, $r8, $r10, $r17;
        java.io.File $r7;
        boolean $z0;
        android.database.sqlite.SQLiteException $r19;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        l0 = staticinvoke <android.database.sqlite.SQLiteGlobal: long getWALTruncateSize()>();

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wal");

        $r7 = new java.io.File;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);

        $z0 = virtualinvoke $r7.<java.io.File: boolean isFile()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        l1 = virtualinvoke $r7.<java.io.File: long length()>();

        $b3 = l1 cmp l0;

        if $b3 >= 0 goto label3;

        return;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes: Bigger than ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; truncating");

        $r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SQLiteConnection", $r17);

     label4:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA wal_checkpoint(TRUNCATE)", null, null);

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnection", "Failed to truncate the -wal file", $r19);

     label7:
        return;

        catch android.database.sqlite.SQLiteException from label4 to label5 with label6;
    }

    private static native void nativeBindBlob(long, long, int, byte[]);

    private static native void nativeBindDouble(long, long, int, double);

    private static native void nativeBindLong(long, long, int, long);

    private static native void nativeBindNull(long, long, int);

    private static native void nativeBindString(long, long, int, java.lang.String);

    private static native void nativeCancel(long);

    private static native void nativeClose(long);

    private static native void nativeExecute(long, long);

    private static native int nativeExecuteForBlobFileDescriptor(long, long);

    private static native int nativeExecuteForChangedRowCount(long, long);

    private static native long nativeExecuteForCursorWindow(long, long, long, int, int, boolean);

    private static native long nativeExecuteForLastInsertedRowId(long, long);

    private static native long nativeExecuteForLong(long, long);

    private static native java.lang.String nativeExecuteForString(long, long);

    private static native void nativeFinalizeStatement(long, long);

    private static native int nativeGetColumnCount(long, long);

    private static native java.lang.String nativeGetColumnName(long, long, int);

    private static native int nativeGetDbLookaside(long);

    private static native int nativeGetParameterCount(long, long);

    private static native boolean nativeIsReadOnly(long, long);

    private static native long nativeOpen(java.lang.String, int, java.lang.String, boolean, boolean, int, int);

    private static native long nativePrepareStatement(long, java.lang.String);

    private static native void nativeRegisterCustomAggregateFunction(long, java.lang.String, java.util.function.BinaryOperator);

    private static native void nativeRegisterCustomScalarFunction(long, java.lang.String, java.util.function.UnaryOperator);

    private static native void nativeRegisterLocalizedCollators(long, java.lang.String);

    private static native void nativeResetCancel(long, boolean);

    private static native void nativeResetStatementAndClearBindings(long, long);

    private android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String, long, int, int, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        long l0;
        int i1, i2;
        boolean z0;
        android.database.sqlite.SQLiteConnection$PreparedStatement $r2, $r3, r4;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool>;

        if r4 == null goto label1;

        $r3 = r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext>;

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool> = $r3;

        r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext> = null;

        r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache> = 0;

        goto label2;

     label1:
        $r2 = new android.database.sqlite.SQLiteConnection$PreparedStatement;

        specialinvoke $r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: void <init>(android.database.sqlite.SQLiteConnection$1)>(null);

        r4 = $r2;

     label2:
        r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql> = r1;

        r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr> = l0;

        r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters> = i1;

        r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mType> = i2;

        r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly> = z0;

        return r4;
    }

    static android.database.sqlite.SQLiteConnection open(android.database.sqlite.SQLiteConnectionPool, android.database.sqlite.SQLiteDatabaseConfiguration, int, boolean)
    {
        int i0;
        boolean z0;
        android.database.sqlite.SQLiteConnection $r0;
        android.database.sqlite.SQLiteException $r1;
        android.database.sqlite.SQLiteConnectionPool r2;
        android.database.sqlite.SQLiteDatabaseConfiguration r3;

        r2 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        r3 := @parameter1: android.database.sqlite.SQLiteDatabaseConfiguration;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r0 = new android.database.sqlite.SQLiteConnection;

        specialinvoke $r0.<android.database.sqlite.SQLiteConnection: void <init>(android.database.sqlite.SQLiteConnectionPool,android.database.sqlite.SQLiteDatabaseConfiguration,int,boolean)>(r2, r3, i0, z0);

     label1:
        specialinvoke $r0.<android.database.sqlite.SQLiteConnection: void open()>();

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        specialinvoke $r0.<android.database.sqlite.SQLiteConnection: void dispose(boolean)>(0);

        throw $r1;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    private void open()
    {
        android.database.sqlite.SQLiteConnection r0;
        int i0, $i1, $i2, $i3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2, $r4, $r5, $r6, $r7;
        android.database.sqlite.SQLiteConnection$OperationLog $r3, $r9, $r41;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.lang.String $r8, $r38, r42, r44, r48;
        long $l4;
        android.database.sqlite.SQLiteCantOpenDatabaseException $r10, r55;
        java.lang.Object[] $r11;
        java.nio.file.FileSystem $r12;
        java.lang.String[] $r13;
        java.nio.file.LinkOption[] $r14, $r19, $r28;
        java.lang.Throwable $r35, $r40;
        java.nio.file.Path r45, r46;
        java.lang.StringBuilder r47, r49, r50, r51, r52, r54;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r42 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("open", null, null);

     label01:
        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i3 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r8 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $z1 = <android.database.sqlite.SQLiteDebug$NoPreloadHolder: boolean DEBUG_SQL_STATEMENTS>;

        $z0 = <android.database.sqlite.SQLiteDebug$NoPreloadHolder: boolean DEBUG_SQL_TIME>;

        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i2 = $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotSize>;

        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i1 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotCount>;

        $l4 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeOpen(java.lang.String,int,java.lang.String,boolean,boolean,int,int)>(r42, $i3, $r8, $z1, $z0, $i2, $i1);

        r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr> = $l4;

     label02:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setPageSize()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setWalModeFromConfiguration()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setJournalSizeLimit()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setAutoCheckpointInterval()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setCustomFunctionsFromConfiguration()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void executePerConnectionSqlFromConfiguration(int)>(0);

        return;

     label03:
        $r40 := @caughtexception;

        goto label23;

     label04:
        $r10 := @caughtexception;

     label05:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r42;

        r44 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot open database \'%s\'", $r11);

     label06:
        $r12 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();

        $r13 = newarray (java.lang.String)[0];

        r45 = virtualinvoke $r12.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(r42, $r13);

        r46 = interfaceinvoke r45.<java.nio.file.Path: java.nio.file.Path getParent()>();

        $r14 = newarray (java.nio.file.LinkOption)[0];

        z4 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r46, $r14);

     label07:
        if z4 == 0 goto label18;

     label08:
        $r19 = newarray (java.nio.file.LinkOption)[0];

        z5 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r45, $r19);

     label09:
        if z5 == 0 goto label16;

     label10:
        $z2 = staticinvoke <java.nio.file.Files: boolean isReadable(java.nio.file.Path)>(r45);

        if $z2 == 0 goto label14;

        $r28 = newarray (java.nio.file.LinkOption)[0];

        $z3 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r45, $r28);

        if $z3 == 0 goto label12;

        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Path ");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a directory");

        r48 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        goto label19;

     label12:
        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Unknown reason");

        r48 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        goto label19;

     label14:
        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": File ");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not readable");

        r48 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        goto label19;

     label16:
        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": File ");

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist");

        r48 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        goto label19;

     label18:
        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Directory ");

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist");

        r48 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

     label19:
        goto label22;

     label20:
        $r35 := @caughtexception;

     label21:
        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Unknown reason; cannot examine filesystem: ");

        $r38 = virtualinvoke $r35.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        r48 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

     label22:
        r55 = new android.database.sqlite.SQLiteCantOpenDatabaseException;

        specialinvoke r55.<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>(java.lang.String,java.lang.Throwable)>(r48, $r10);

        throw r55;

     label23:
        $r41 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r41.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r40;

        catch android.database.sqlite.SQLiteCantOpenDatabaseException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label03;
        catch java.lang.Throwable from label22 to label23 with label03;
    }

    private void recyclePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1, $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql> = null;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool>;

        r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext> = $r2;

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool> = r1;

        return;
    }

    private void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        boolean $z0;
        long $l0, $l1;
        android.database.sqlite.SQLiteException $r3;
        java.lang.String $r4;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r5;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse> = 0;

        $z0 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache>;

        if $z0 == 0 goto label5;

     label1:
        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeResetStatementAndClearBindings(long,long)>($l1, $l0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r4 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object remove(java.lang.Object)>($r4);

     label4:
        goto label6;

     label5:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void finalizePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r1);

     label6:
        return;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    private void setAutoCheckpointInterval()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, $l2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0, $z1;
        int $i1;
        byte $b3;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 != 0 goto label1;

        $i1 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()>();

        l0 = (long) $i1;

        $l2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA wal_autocheckpoint", null, null);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA wal_autocheckpoint=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r6, null, null);

     label1:
        return;
    }

    private void setCustomFunctionsFromConfiguration()
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1, $r3, $r5, $r8, $r13, $r16;
        android.util.ArrayMap $r2, $r4, $r6, $r9, $r14, $r17;
        int $i0, $i1, i4, i5;
        long $l2, $l3;
        java.lang.Object $r7, $r11, $r15, $r19;
        java.lang.String $r10, $r18;
        java.util.function.BinaryOperator $r12;
        java.util.function.UnaryOperator $r20;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        i4 = 0;

     label1:
        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r2 = $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customScalarFunctions>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if i4 >= $i0 goto label2;

        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $r13 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r14 = $r13.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customScalarFunctions>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i4);

        $r18 = (java.lang.String) $r15;

        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r17 = $r16.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customScalarFunctions>;

        $r19 = virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        $r20 = (java.util.function.UnaryOperator) $r19;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeRegisterCustomScalarFunction(long,java.lang.String,java.util.function.UnaryOperator)>($l3, $r18, $r20);

        i4 = i4 + 1;

        goto label1;

     label2:
        i5 = 0;

     label3:
        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customAggregateFunctions>;

        $i1 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        if i5 >= $i1 goto label4;

        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r6 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customAggregateFunctions>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        $r10 = (java.lang.String) $r7;

        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r9 = $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customAggregateFunctions>;

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        $r12 = (java.util.function.BinaryOperator) $r11;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeRegisterCustomAggregateFunction(long,java.lang.String,java.util.function.BinaryOperator)>($l2, $r10, $r12);

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    private void setForeignKeyModeFromConfiguration()
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        long $l0, l2;
        byte $b1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label3;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z1 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z1 == 0 goto label1;

        l2 = 1L;

        goto label2;

     label1:
        l2 = 0L;

     label2:
        $l0 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA foreign_keys", null, null);

        $b1 = $l0 cmp l2;

        if $b1 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA foreign_keys=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r6, null, null);

     label3:
        return;
    }

    private void setJournalMode(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, r2, $r5, $r6, $r10, $r17;
        boolean z0, $z1;
        java.lang.StringBuilder $r7, r19;
        android.database.sqlite.SQLiteDatabaseConfiguration $r9;
        android.database.sqlite.SQLiteDatabaseLockedException $r18;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA journal_mode", null, null);

        $z1 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 != 0 goto label6;

     label1:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA journal_mode=");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r5, null, null);

        z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

     label2:
        if z0 == 0 goto label3;

        return;

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not change the database journal mode of \'");

        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r10 = $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from \'");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' because the database is locked.  This usually means that there are other open connections to the database which prevents the database from enabling or disabling write-ahead logging mode.  Proceeding without changing the journal mode.");

        $r17 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnection", $r17);

     label6:
        return;

        catch android.database.sqlite.SQLiteDatabaseLockedException from label1 to label2 with label4;
    }

    private void setJournalSizeLimit()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, $l2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0, $z1;
        int $i1;
        byte $b3;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 != 0 goto label1;

        $i1 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()>();

        l0 = (long) $i1;

        $l2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA journal_size_limit", null, null);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA journal_size_limit=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r6, null, null);

     label1:
        return;
    }

    private void setLocaleFromConfiguration()
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, $r13, $r19, r20, r21;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2, $r3, $r5, $r12;
        int $i0, $i1;
        java.util.Locale $r4;
        long $l2;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r6;
        android.database.sqlite.SQLiteException $r7, $r18;
        java.lang.Throwable $r8;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r20 = "COMMIT";

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label01;

        return;

     label01:
        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        r1 = virtualinvoke $r4.<java.util.Locale: java.lang.String toString()>();

        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeRegisterLocalizedCollators(long,java.lang.String)>($l2, r1);

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label02;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void checkDatabaseWiped()>();

     label02:
        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 == 0 goto label03;

        return;

     label03:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("CREATE TABLE IF NOT EXISTS android_metadata (locale TEXT)", null, null);

        r21 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("SELECT locale FROM android_metadata UNION SELECT NULL ORDER BY locale DESC LIMIT 1", null, null);

     label04:
        if r21 == null goto label07;

     label05:
        $z2 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label07;

     label06:
        return;

     label07:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("BEGIN", null, null);

     label08:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("DELETE FROM android_metadata", null, null);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("INSERT INTO android_metadata (locale) VALUES(?)", $r6, null);

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("REINDEX LOCALIZED", null, null);

     label09:
        goto label10;

     label10:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r20, null, null);

     label11:
        return;

     label12:
        $r8 := @caughtexception;

        goto label13;

     label13:
        r20 = "ROLLBACK";

     label14:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r20, null, null);

     label15:
        throw $r8;

     label16:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to change locale for db \'");

        $r12 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r13 = $r12.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r18 = new android.database.sqlite.SQLiteException;

        $r19 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<android.database.sqlite.SQLiteException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r9);

        throw $r18;

     label17:
        $r7 := @caughtexception;

        throw $r7;

        catch android.database.sqlite.SQLiteException from label03 to label04 with label17;
        catch java.lang.RuntimeException from label03 to label04 with label16;
        catch android.database.sqlite.SQLiteException from label05 to label06 with label17;
        catch java.lang.RuntimeException from label05 to label06 with label16;
        catch android.database.sqlite.SQLiteException from label07 to label08 with label17;
        catch java.lang.RuntimeException from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch android.database.sqlite.SQLiteException from label10 to label11 with label17;
        catch java.lang.RuntimeException from label10 to label11 with label16;
        catch android.database.sqlite.SQLiteException from label14 to label15 with label17;
        catch java.lang.RuntimeException from label14 to label15 with label16;
        catch android.database.sqlite.SQLiteException from label15 to label16 with label17;
        catch java.lang.RuntimeException from label15 to label16 with label16;
    }

    private void setPageSize()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, $l2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0, $z1;
        int $i1;
        byte $b3;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 != 0 goto label1;

        $i1 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()>();

        l0 = (long) $i1;

        $l2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA page_size", null, null);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA page_size=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r6, null, null);

     label1:
        return;
    }

    private void setSyncMode(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, $r3, $r4, $r5, $r9;
        boolean $z0;
        java.lang.StringBuilder $r6;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA synchronous", null, null);

        $r4 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String canonicalizeSyncMode(java.lang.String)>($r3);

        $r5 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String canonicalizeSyncMode(java.lang.String)>(r1);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA synchronous=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r9, null, null);

     label1:
        return;
    }

    private void setWalModeFromConfiguration()
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean z0, $z1, $z2, z3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1, $r2, $r3, $r4, $r8, $r10, $r12, $r13, $r15;
        int $i0, $i1;
        java.lang.String $r5, $r6, $r7, $r9, $r11, $r14, r16, r17;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z1 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z1 != 0 goto label12;

        $z2 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z2 != 0 goto label12;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        z0 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isLegacyCompatibilityWalEnabled()>();

        if z3 != 0 goto label08;

        if z0 == 0 goto label03;

        goto label08;

     label03:
        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r11 = $r10.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String journalMode>;

        if $r11 != null goto label04;

        r16 = staticinvoke <android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()>();

        goto label05;

     label04:
        $r12 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r16 = $r12.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String journalMode>;

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)>(r16);

        $r13 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r14 = $r13.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String syncMode>;

        if $r14 != null goto label06;

        r17 = staticinvoke <android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()>();

        goto label07;

     label06:
        $r15 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r17 = $r15.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String syncMode>;

     label07:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>(r17);

        goto label12;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)>("WAL");

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String syncMode>;

        if $r5 == null goto label09;

        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r9 = $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String syncMode>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>($r9);

        goto label11;

     label09:
        if z0 == 0 goto label10;

        $r7 = staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String getWALSyncMode()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>($r7);

        goto label11;

     label10:
        $r6 = staticinvoke <android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>($r6);

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void maybeTruncateWalFile()>();

     label12:
        return;
    }

    private void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteException $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations>;

        if $z0 == 0 goto label2;

        $z1 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new android.database.sqlite.SQLiteException;

        specialinvoke $r2.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>("Cannot execute this statement because it might modify the database but the connection is read-only.");

        throw $r2;

     label2:
        return;
    }

    private static java.lang.String trimSqlForDisplay(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\\s]*\\n+[\\s]*", " ");

        return $r1;
    }

    void close()
    {
        android.database.sqlite.SQLiteConnection r0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void dispose(boolean)>(0);

        return;
    }

    void collectDbStats(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteConnection r0;
        int i0, i4, i9;
        long l1, $l2, l5, l6, l7, l8, l12, l13, l15, l16;
        android.database.sqlite.SQLiteDebug$DbStats $r1, r37;
        android.database.CursorWindow $r2, r25, r26, r27;
        java.lang.String $r6, $r10, r28, r29, r34, r35;
        boolean $z1;
        android.database.sqlite.SQLiteException $r16, $r17, $r18, $r19;
        java.lang.Throwable $r20, $r21, r38;
        java.util.ArrayList r22;
        java.lang.StringBuilder r30, r31, r33, r36;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r22 := @parameter0: java.util.ArrayList;

        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        i4 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeGetDbLookaside(long)>($l2);

        l5 = 0L;

     label01:
        l6 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA page_count;", null, null);

     label02:
        l5 = l6;

     label03:
        l7 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA page_size;", null, null);

     label04:
        l5 = l6;

        l8 = l7;

        goto label06;

     label05:
        $r18 := @caughtexception;

        l8 = 0L;

     label06:
        $r1 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int,long,long)>(i4, l5, l8);

        virtualinvoke r22.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r2 = new android.database.CursorWindow;

        specialinvoke $r2.<android.database.CursorWindow: void <init>(java.lang.String)>("collectDbStats");

        r25 = $r2;

        r26 = $r2;

        r27 = $r2;

     label07:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,android.os.CancellationSignal)>("PRAGMA database_list;", null, $r2, 0, 0, 0, null);

     label08:
        i9 = 1;

     label09:
        r26 = $r2;

        r27 = $r2;

     label10:
        i0 = virtualinvoke $r2.<android.database.CursorWindow: int getNumRows()>();

     label11:
        if i9 >= i0 goto label46;

     label12:
        r28 = virtualinvoke $r2.<android.database.CursorWindow: java.lang.String getString(int,int)>(i9, 1);

        r29 = virtualinvoke $r2.<android.database.CursorWindow: java.lang.String getString(int,int)>(i9, 2);

     label13:
        l12 = 0L;

     label14:
        r30 = new java.lang.StringBuilder;

     label15:
        l12 = 0L;

     label16:
        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

     label17:
        l12 = 0L;

     label18:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

     label19:
        l12 = 0L;

     label20:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

     label21:
        l12 = 0L;

     label22:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".page_count;");

     label23:
        l12 = 0L;

     label24:
        $r6 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        l13 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r6, null, null);

     label25:
        l12 = l13;

     label26:
        r31 = new java.lang.StringBuilder;

     label27:
        l12 = l13;

     label28:
        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

     label29:
        l12 = l13;

     label30:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

     label31:
        l12 = l13;

     label32:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

     label33:
        l12 = l13;

     label34:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".page_size;");

     label35:
        l12 = l13;

     label36:
        $r10 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r10, null, null);

     label37:
        l15 = l13;

        l16 = l1;

        goto label39;

     label38:
        $r19 := @caughtexception;

        l16 = 0L;

        l15 = l12;

     label39:
        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  (attached) ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        r34 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

     label40:
        r35 = r34;

     label41:
        $z1 = virtualinvoke r29.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label42;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        r35 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

     label42:
        r37 = new android.database.sqlite.SQLiteDebug$DbStats;

        specialinvoke r37.<android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)>(r35, l15, l16, 0, 0, 0, 0);

        virtualinvoke r22.<java.util.ArrayList: boolean add(java.lang.Object)>(r37);

     label43:
        i9 = i9 + 1;

        goto label09;

     label44:
        $r20 := @caughtexception;

        r38 = $r20;

        goto label49;

     label45:
        $r17 := @caughtexception;

        goto label50;

     label46:
        goto label50;

     label47:
        $r21 := @caughtexception;

        r38 = $r21;

        r25 = r26;

        goto label49;

     label48:
        $r16 := @caughtexception;

        r25 = r27;

        goto label50;

     label49:
        virtualinvoke r25.<android.database.CursorWindow: void close()>();

        throw r38;

     label50:
        virtualinvoke r25.<android.database.CursorWindow: void close()>();

        return;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label05;
        catch android.database.sqlite.SQLiteException from label03 to label04 with label05;
        catch android.database.sqlite.SQLiteException from label07 to label08 with label48;
        catch java.lang.Throwable from label07 to label08 with label47;
        catch android.database.sqlite.SQLiteException from label10 to label11 with label48;
        catch java.lang.Throwable from label10 to label11 with label47;
        catch android.database.sqlite.SQLiteException from label12 to label13 with label45;
        catch java.lang.Throwable from label12 to label13 with label44;
        catch android.database.sqlite.SQLiteException from label14 to label15 with label38;
        catch java.lang.Throwable from label14 to label15 with label44;
        catch android.database.sqlite.SQLiteException from label16 to label17 with label38;
        catch java.lang.Throwable from label16 to label17 with label44;
        catch android.database.sqlite.SQLiteException from label18 to label19 with label38;
        catch java.lang.Throwable from label18 to label19 with label44;
        catch android.database.sqlite.SQLiteException from label20 to label21 with label38;
        catch java.lang.Throwable from label20 to label21 with label44;
        catch android.database.sqlite.SQLiteException from label22 to label23 with label38;
        catch java.lang.Throwable from label22 to label23 with label44;
        catch android.database.sqlite.SQLiteException from label24 to label25 with label38;
        catch java.lang.Throwable from label24 to label25 with label44;
        catch android.database.sqlite.SQLiteException from label26 to label27 with label38;
        catch java.lang.Throwable from label26 to label27 with label44;
        catch android.database.sqlite.SQLiteException from label28 to label29 with label38;
        catch java.lang.Throwable from label28 to label29 with label44;
        catch android.database.sqlite.SQLiteException from label30 to label31 with label38;
        catch java.lang.Throwable from label30 to label31 with label44;
        catch android.database.sqlite.SQLiteException from label32 to label33 with label38;
        catch java.lang.Throwable from label32 to label33 with label44;
        catch android.database.sqlite.SQLiteException from label34 to label35 with label38;
        catch java.lang.Throwable from label34 to label35 with label44;
        catch android.database.sqlite.SQLiteException from label36 to label37 with label38;
        catch java.lang.Throwable from label36 to label37 with label44;
        catch android.database.sqlite.SQLiteException from label39 to label40 with label45;
        catch java.lang.Throwable from label39 to label40 with label44;
        catch android.database.sqlite.SQLiteException from label41 to label42 with label45;
        catch java.lang.Throwable from label41 to label42 with label44;
        catch android.database.sqlite.SQLiteException from label42 to label43 with label45;
        catch java.lang.Throwable from label42 to label43 with label44;
    }

    void collectDbStatsUnsafe(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.util.ArrayList r1;
        android.database.sqlite.SQLiteDebug$DbStats $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int,long,long)>(0, 0L, 0L);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    java.lang.String describeCurrentOperationUnsafe()
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$OperationLog $r1;
        java.lang.String $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteConnection$OperationLog: java.lang.String describeCurrentOperation()>();

        return $r2;
    }

    public void dump(android.util.Printer, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.util.Printer r1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void dumpUnsafe(android.util.Printer,boolean)>(r1, z0);

        return;
    }

    void dumpUnsafe(android.util.Printer, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.util.Printer r1;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r7, $r11, $r17;
        int $i0;
        java.lang.String $r6, $r10, $r14, $r19, $r21;
        android.database.sqlite.SQLiteConnection$OperationLog $r15;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r16;
        long $l1;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection #");

        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r6);

        if z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  connectionPtr: 0x");

        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $r19 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r21);

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isPrimaryConnection: ");

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  onlyAllowReadOnlyOperations: ");

        $z2 = r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r14);

        $r15 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r15.<android.database.sqlite.SQLiteConnection$OperationLog: void dump(android.util.Printer)>(r1);

        if z0 == 0 goto label2;

        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void dump(android.util.Printer)>(r1);

     label2:
        return;
    }

    public void execute(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.database.sqlite.SQLiteConnection$OperationLog $r3, $r4, $r6, $r9;
        long $l1, $l2;
        java.lang.RuntimeException $r5;
        java.lang.Throwable $r7, $r8, $r10;
        java.lang.String r11;
        java.lang.Object[] r12;
        android.database.sqlite.SQLiteConnection$PreparedStatement r13;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.Object[];

        r1 := @parameter2: android.os.CancellationSignal;

        if r11 == null goto label18;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("execute", r11, r12);

     label01:
        r13 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r11);

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r13, r12);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r1);

     label03:
        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l1 = r13.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeExecute(long,long)>($l2, $l1);

     label04:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

     label06:
        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return;

     label07:
        $r7 := @caughtexception;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label09:
        throw $r7;

     label10:
        $r10 := @caughtexception;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

     label12:
        throw $r10;

     label13:
        $r8 := @caughtexception;

        goto label17;

     label14:
        $r5 := @caughtexception;

     label15:
        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, $r5);

     label16:
        throw $r5;

     label17:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r8;

     label18:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r2;

        catch java.lang.RuntimeException from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.RuntimeException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.RuntimeException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
    }

    public android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.Object[] r1;
        android.os.CancellationSignal r2;
        int i0, i1;
        android.database.sqlite.SQLiteConnection$PreparedStatement r3;
        java.lang.IllegalArgumentException $r4;
        android.database.sqlite.SQLiteConnection$OperationLog $r5, $r6, $r8, $r12;
        long $l2, $l3;
        java.lang.Throwable $r7, $r9, $r10;
        java.lang.RuntimeException $r11;
        java.lang.String r13;
        android.os.ParcelFileDescriptor r14;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: android.os.CancellationSignal;

        if r13 == null goto label22;

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForBlobFileDescriptor", r13, r1);

     label01:
        r3 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r13);

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r3);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r3, r1);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r3);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r2);

     label03:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l2 = r3.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i1 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeExecuteForBlobFileDescriptor(long,long)>($l3, $l2);

     label04:
        if i1 < 0 goto label07;

     label05:
        r14 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>(i1);

     label06:
        goto label08;

     label07:
        r14 = null;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r2);

     label09:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r3);

     label10:
        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return r14;

     label11:
        $r9 := @caughtexception;

     label12:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r2);

     label13:
        throw $r9;

     label14:
        $r10 := @caughtexception;

     label15:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r3);

     label16:
        throw $r10;

     label17:
        $r7 := @caughtexception;

        goto label21;

     label18:
        $r11 := @caughtexception;

     label19:
        $r12 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r12.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, $r11);

     label20:
        throw $r11;

     label21:
        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r7;

     label22:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r4;

        catch java.lang.RuntimeException from label01 to label02 with label18;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.RuntimeException from label09 to label10 with label18;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.RuntimeException from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.RuntimeException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label19 to label20 with label17;
        catch java.lang.Throwable from label20 to label21 with label17;
    }

    public int executeForChangedRowCount(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        int i0, i3, i4, i6, i7;
        java.lang.IllegalArgumentException $r1;
        android.database.sqlite.SQLiteConnection$OperationLog $r2, $r3, $r9, $r16, r22, r28;
        long $l1, $l2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r10;
        java.lang.String $r7, $r13, r18;
        java.lang.Throwable $r8, $r14, $r17;
        java.lang.RuntimeException $r15;
        java.lang.Object[] r19;
        android.os.CancellationSignal r20;
        android.database.sqlite.SQLiteConnection$PreparedStatement r21;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r18 := @parameter0: java.lang.String;

        r19 := @parameter1: java.lang.Object[];

        r20 := @parameter2: android.os.CancellationSignal;

        if r18 == null goto label32;

        i3 = 0;

        i4 = 0;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r2.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForChangedRowCount", r18, r19);

     label01:
        r21 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r18);

     label02:
        i6 = 0;

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r21);

     label04:
        i6 = 0;

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r21, r19);

     label06:
        i6 = 0;

     label07:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r21);

     label08:
        i6 = 0;

     label09:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r20);

     label10:
        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l1 = r21.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i7 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeExecuteForChangedRowCount(long,long)>($l2, $l1);

     label11:
        i6 = i7;

     label12:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r20);

     label13:
        i3 = i7;

        i4 = i7;

     label14:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r21);

     label15:
        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z0 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i0);

        if $z0 == 0 goto label16;

        r22 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changedRows=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r22.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i0, $r7);

     label16:
        return i7;

     label17:
        $r14 := @caughtexception;

        i6 = 0;

     label18:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r20);

     label19:
        i6 = 0;

     label20:
        throw $r14;

     label21:
        $r17 := @caughtexception;

        i3 = i6;

        i4 = i6;

     label22:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r21);

     label23:
        i3 = i6;

        i4 = i6;

     label24:
        throw $r17;

     label25:
        $r8 := @caughtexception;

        goto label30;

     label26:
        $r15 := @caughtexception;

        i3 = i4;

     label27:
        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, $r15);

     label28:
        i3 = i4;

     label29:
        throw $r15;

     label30:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z1 = virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i0);

        if $z1 == 0 goto label31;

        r28 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changedRows=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r28.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i0, $r13);

     label31:
        throw $r8;

     label32:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r1;

        catch java.lang.RuntimeException from label01 to label02 with label26;
        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.RuntimeException from label14 to label15 with label26;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.RuntimeException from label22 to label23 with label26;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.RuntimeException from label24 to label25 with label26;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label27 to label28 with label25;
        catch java.lang.Throwable from label29 to label30 with label25;
    }

    public int executeForCursorWindow(java.lang.String, java.lang.Object[], android.database.CursorWindow, int, int, boolean, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.CursorWindow r1;
        int i0, i1, i5, i6, i11, i12, i13, i16, i17, i22, i23, i24;
        boolean z0, $z1, $z2;
        android.database.sqlite.SQLiteConnection$PreparedStatement r2;
        long l2, l3, $l4, l9, l10;
        java.lang.IllegalArgumentException $r3, $r4;
        android.database.sqlite.SQLiteConnection$OperationLog $r5, $r6, r49, $r56, $r57, r58;
        java.lang.String $r17, $r31, r46;
        java.lang.RuntimeException $r18, $r35, $r38, r53;
        java.lang.Throwable $r19, $r20, $r32, $r33, $r34, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r44, $r45, r51, r52, r54, r55;
        java.lang.Object[] r47;
        android.os.CancellationSignal r48;
        java.lang.StringBuilder r50, r59;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r46 := @parameter0: java.lang.String;

        r47 := @parameter1: java.lang.Object[];

        r1 := @parameter2: android.database.CursorWindow;

        i0 := @parameter3: int;

        i5 := @parameter4: int;

        z0 := @parameter5: boolean;

        r48 := @parameter6: android.os.CancellationSignal;

        if r46 == null goto label48;

        if r1 == null goto label47;

        virtualinvoke r1.<android.database.CursorWindow: void acquireReference()>();

        i6 = -1;

     label01:
        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i1 = virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForCursorWindow", r46, r47);

     label02:
        r2 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r46);

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r2, r47);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r48);

     label04:
        l9 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        l2 = r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

     label05:
        l3 = r1.<android.database.CursorWindow: long mWindowPtr>;

     label06:
        l10 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeExecuteForCursorWindow(long,long,long,int,int,boolean)>(l9, l2, l3, i0, i5, z0);

     label07:
        $l4 = l10 >> 32;

        i11 = (int) $l4;

        i12 = (int) l10;

     label08:
        i13 = virtualinvoke r1.<android.database.CursorWindow: int getNumRows()>();

     label09:
        virtualinvoke r1.<android.database.CursorWindow: void setStartPosition(int)>(i11);

     label10:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r48);

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r2);

     label12:
        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z1 = virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i1);

        if $z1 == 0 goto label15;

        r49 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("window=\'");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', startPos=");

     label13:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actualPos=");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filledRows=");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", countedRows=");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r17 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r49.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i1, $r17);

     label14:
        goto label15;

     label15:
        virtualinvoke r1.<android.database.CursorWindow: void releaseReference()>();

        return i12;

     label16:
        $r32 := @caughtexception;

        r51 = $r32;

        goto label46;

     label17:
        $r40 := @caughtexception;

        r52 = $r40;

        goto label42;

     label18:
        $r38 := @caughtexception;

        r53 = $r38;

        i6 = i11;

        i16 = i12;

        i17 = i13;

        goto label37;

     label19:
        $r45 := @caughtexception;

        r54 = $r45;

        i17 = i13;

        i6 = i11;

        i16 = i12;

        goto label30;

     label20:
        $r41 := @caughtexception;

        r55 = $r41;

        i6 = i11;

        i16 = i12;

        i17 = i13;

        goto label26;

     label21:
        $r19 := @caughtexception;

        r55 = $r19;

        i16 = i12;

        i6 = i11;

        i17 = -1;

        goto label26;

     label22:
        $r39 := @caughtexception;

        r55 = $r39;

        i16 = -1;

        i17 = -1;

        goto label26;

     label23:
        $r44 := @caughtexception;

        r55 = $r44;

        goto label25;

     label24:
        $r34 := @caughtexception;

        r55 = $r34;

     label25:
        i17 = -1;

        i16 = -1;

     label26:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r48);

     label27:
        throw r55;

     label28:
        $r37 := @caughtexception;

        r54 = $r37;

        goto label30;

     label29:
        $r33 := @caughtexception;

        r54 = $r33;

        i17 = -1;

        i16 = -1;

     label30:
        i22 = i6;

        i23 = i16;

        i24 = i17;

     label31:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r2);

     label32:
        i22 = i6;

        i23 = i16;

        i24 = i17;

     label33:
        throw r54;

     label34:
        $r18 := @caughtexception;

        r53 = $r18;

        goto label37;

     label35:
        $r20 := @caughtexception;

        r52 = $r20;

        i11 = -1;

        i12 = -1;

        i13 = -1;

        goto label42;

     label36:
        $r35 := @caughtexception;

        r53 = $r35;

        i17 = -1;

        i16 = -1;

     label37:
        i22 = i6;

        i23 = i16;

        i24 = i17;

     label38:
        $r56 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r56.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i1, r53);

     label39:
        i22 = i6;

        i23 = i16;

        i24 = i17;

     label40:
        throw r53;

     label41:
        $r36 := @caughtexception;

        r52 = $r36;

        i11 = i22;

        i12 = i23;

        i13 = i24;

     label42:
        $r57 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z2 = virtualinvoke $r57.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i1);

        if $z2 == 0 goto label43;

        r58 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("window=\'");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', startPos=");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actualPos=");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filledRows=");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", countedRows=");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r31 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r58.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i1, $r31);

     label43:
        throw r52;

     label44:
        $r42 := @caughtexception;

        r51 = $r42;

        goto label46;

     label45:
        $r43 := @caughtexception;

        r51 = $r43;

     label46:
        virtualinvoke r1.<android.database.CursorWindow: void releaseReference()>();

        throw r51;

     label47:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("window must not be null.");

        throw $r4;

     label48:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label45;
        catch java.lang.RuntimeException from label02 to label03 with label36;
        catch java.lang.Throwable from label02 to label03 with label35;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.RuntimeException from label11 to label12 with label18;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label13 to label14 with label44;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label27 to label28 with label28;
        catch java.lang.RuntimeException from label31 to label32 with label34;
        catch java.lang.Throwable from label31 to label32 with label41;
        catch java.lang.RuntimeException from label33 to label34 with label34;
        catch java.lang.Throwable from label33 to label34 with label41;
        catch java.lang.Throwable from label38 to label39 with label41;
        catch java.lang.Throwable from label40 to label41 with label41;
        catch java.lang.Throwable from label42 to label43 with label44;
        catch java.lang.Throwable from label43 to label44 with label44;
    }

    public long executeForLastInsertedRowId(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        int i0;
        long l1, $l2, $l3;
        java.lang.IllegalArgumentException $r2;
        android.database.sqlite.SQLiteConnection$OperationLog $r3, $r4, $r8, $r10;
        java.lang.Throwable $r5, $r6, $r9;
        java.lang.RuntimeException $r7;
        java.lang.String r11;
        java.lang.Object[] r12;
        android.database.sqlite.SQLiteConnection$PreparedStatement r13;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.Object[];

        r1 := @parameter2: android.os.CancellationSignal;

        if r11 == null goto label18;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForLastInsertedRowId", r11, r12);

     label01:
        r13 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r11);

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r13, r12);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r1);

     label03:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l2 = r13.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        l1 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeExecuteForLastInsertedRowId(long,long)>($l3, $l2);

     label04:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

     label06:
        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return l1;

     label07:
        $r5 := @caughtexception;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label09:
        throw $r5;

     label10:
        $r6 := @caughtexception;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r13);

     label12:
        throw $r6;

     label13:
        $r9 := @caughtexception;

        goto label17;

     label14:
        $r7 := @caughtexception;

     label15:
        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, $r7);

     label16:
        throw $r7;

     label17:
        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r10.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r9;

     label18:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r2;

        catch java.lang.RuntimeException from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.RuntimeException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.RuntimeException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
    }

    public long executeForLong(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        int i0;
        long l1, $l2, $l3;
        java.lang.IllegalArgumentException $r2;
        android.database.sqlite.SQLiteConnection$OperationLog $r3, $r4, $r5, $r8, $r11;
        java.lang.Throwable $r6, $r7, $r9;
        java.lang.RuntimeException $r10;
        java.lang.String r12;
        java.lang.Object[] r13;
        android.database.sqlite.SQLiteConnection$PreparedStatement r14;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.Object[];

        r1 := @parameter2: android.os.CancellationSignal;

        if r12 == null goto label18;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForLong", r12, r13);

     label01:
        r14 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r12);

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r14, r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r1);

     label03:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l2 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        l1 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeExecuteForLong(long,long)>($l3, $l2);

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection$OperationLog: void setResult(long)>(l1);

     label04:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

     label06:
        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return l1;

     label07:
        $r9 := @caughtexception;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label09:
        throw $r9;

     label10:
        $r6 := @caughtexception;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

     label12:
        throw $r6;

     label13:
        $r7 := @caughtexception;

        goto label17;

     label14:
        $r10 := @caughtexception;

     label15:
        $r11 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r11.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, $r10);

     label16:
        throw $r10;

     label17:
        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r7;

     label18:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r2;

        catch java.lang.RuntimeException from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.RuntimeException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.RuntimeException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
    }

    public java.lang.String executeForString(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.database.sqlite.SQLiteConnection$OperationLog $r3, $r4, $r5, $r9, $r11;
        long $l1, $l2;
        java.lang.Throwable $r6, $r7, $r8;
        java.lang.RuntimeException $r10;
        java.lang.String r12, r15;
        java.lang.Object[] r13;
        android.database.sqlite.SQLiteConnection$PreparedStatement r14;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.Object[];

        r1 := @parameter2: android.os.CancellationSignal;

        if r12 == null goto label18;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForString", r12, r13);

     label01:
        r14 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r12);

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r14, r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r1);

     label03:
        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l1 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        r15 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String nativeExecuteForString(long,long)>($l2, $l1);

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection$OperationLog: void setResult(java.lang.String)>(r15);

     label04:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

     label06:
        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return r15;

     label07:
        $r7 := @caughtexception;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r1);

     label09:
        throw $r7;

     label10:
        $r6 := @caughtexception;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

     label12:
        throw $r6;

     label13:
        $r8 := @caughtexception;

        goto label17;

     label14:
        $r10 := @caughtexception;

     label15:
        $r11 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r11.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, $r10);

     label16:
        throw $r10;

     label17:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r8;

     label18:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r2;

        catch java.lang.RuntimeException from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.RuntimeException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.RuntimeException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.RuntimeException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnectionPool $r2, $r3;
        long $l0;
        byte $b1;
        java.lang.Throwable $r4;

        r0 := @this: android.database.sqlite.SQLiteConnection;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnectionPool mPool>;

        if $r2 == null goto label2;

        $l0 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnectionPool mPool>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteConnectionPool: void onConnectionLeaked()>();

     label2:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void dispose(boolean)>(1);

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int getConnectionId()
    {
        android.database.sqlite.SQLiteConnection r0;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        return $i0;
    }

    boolean isPreparedStatementInCache(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r2;
        java.lang.Object $r3;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isPrimaryConnection()
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        return $z0;
    }

    public void onCancel()
    {
        android.database.sqlite.SQLiteConnection r0;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $l0 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeCancel(long)>($l0);

        return;
    }

    public void prepare(java.lang.String, android.database.sqlite.SQLiteStatementInfo)
    {
        android.database.sqlite.SQLiteConnection r0;
        int i0, i1, $i2, i7;
        java.lang.IllegalArgumentException $r1;
        android.database.sqlite.SQLiteConnection$OperationLog $r2, $r8, $r11, $r16;
        boolean $z0;
        long $l3, $l4, $l5, $l6;
        java.lang.String[] $r3, $r4, $r6;
        java.lang.String $r5, r12;
        java.lang.RuntimeException $r7;
        java.lang.Throwable $r9, $r10;
        android.database.sqlite.SQLiteStatementInfo r13;
        android.database.sqlite.SQLiteConnection$PreparedStatement r14;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: android.database.sqlite.SQLiteStatementInfo;

        if r12 == null goto label22;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r2.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("prepare", r12, null);

     label01:
        r14 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r12);

     label02:
        if r13 == null goto label15;

     label03:
        $i2 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        r13.<android.database.sqlite.SQLiteStatementInfo: int numParameters> = $i2;

        $z0 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        r13.<android.database.sqlite.SQLiteStatementInfo: boolean readOnly> = $z0;

        $l4 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l3 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i1 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeGetColumnCount(long,long)>($l4, $l3);

     label04:
        if i1 != 0 goto label07;

     label05:
        $r6 = <android.database.sqlite.SQLiteConnection: java.lang.String[] EMPTY_STRING_ARRAY>;

        r13.<android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames> = $r6;

     label06:
        goto label15;

     label07:
        $r3 = newarray (java.lang.String)[i1];

        r13.<android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames> = $r3;

     label08:
        i7 = 0;

     label09:
        if i7 >= i1 goto label15;

     label10:
        $r4 = r13.<android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames>;

        $l6 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l5 = r14.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $r5 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String nativeGetColumnName(long,long,int)>($l6, $l5, i7);

        $r4[i7] = $r5;

     label11:
        i7 = i7 + 1;

        goto label09;

     label12:
        $r9 := @caughtexception;

     label13:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

     label14:
        throw $r9;

     label15:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r14);

     label16:
        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return;

     label17:
        $r10 := @caughtexception;

        goto label21;

     label18:
        $r7 := @caughtexception;

     label19:
        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, $r7);

     label20:
        throw $r7;

     label21:
        $r11 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r11.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw $r10;

     label22:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r1;

        catch java.lang.RuntimeException from label01 to label02 with label18;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.RuntimeException from label13 to label14 with label18;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.RuntimeException from label14 to label15 with label18;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.RuntimeException from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label17;
        catch java.lang.Throwable from label20 to label21 with label17;
    }

    void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1, $r2, $r3, $r4, $r7, $r10, $r13, $r16;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Locale $r5, $r6;
        android.util.ArrayMap $r8, $r9, $r11, $r12;
        java.util.ArrayList $r14, $r15;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r17;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        z8 = 0;

        r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations> = 0;

        $z4 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z3 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z4 == $z3 goto label01;

        z9 = 1;

        goto label02;

     label01:
        z9 = 0;

     label02:
        $i2 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i1 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i3 = $i2 ^ $i1;

        $i4 = $i3 & -1610612736;

        if $i4 == 0 goto label03;

        z10 = 1;

        goto label04;

     label03:
        z10 = 0;

     label04:
        $r6 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        z0 = virtualinvoke $r6.<java.util.Locale: boolean equals(java.lang.Object)>($r5);

        $r9 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customScalarFunctions>;

        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r8 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customScalarFunctions>;

        z1 = virtualinvoke $r9.<android.util.ArrayMap: boolean equals(java.lang.Object)>($r8);

        $r12 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customAggregateFunctions>;

        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r11 = $r10.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customAggregateFunctions>;

        z2 = virtualinvoke $r12.<android.util.ArrayMap: boolean equals(java.lang.Object)>($r11);

        $r13 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r14 = $r13.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList perConnectionSql>;

        i0 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        $r15 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList perConnectionSql>;

        $i5 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i5 <= i0 goto label05;

        z8 = 1;

     label05:
        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>(r1);

        $r17 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i6 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        virtualinvoke $r17.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void resize(int)>($i6);

        if z9 == 0 goto label06;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()>();

     label06:
        if z10 == 0 goto label07;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setWalModeFromConfiguration()>();

     label07:
        $z5 = z0 ^ 1;

        if $z5 == 0 goto label08;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()>();

     label08:
        $z6 = z1 ^ 1;

        if $z6 != 0 goto label09;

        $z7 = z2 ^ 1;

        if $z7 == 0 goto label10;

     label09:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setCustomFunctionsFromConfiguration()>();

     label10:
        if z8 == 0 goto label11;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void executePerConnectionSqlFromConfiguration(int)>(i0);

     label11:
        return;
    }

    void setOnlyAllowReadOnlyOperations(boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        z0 := @parameter0: boolean;

        r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations> = z0;

        return;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.StringBuilder $r2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4;
        java.lang.String $r5, $r10;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteConnection: ");

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
