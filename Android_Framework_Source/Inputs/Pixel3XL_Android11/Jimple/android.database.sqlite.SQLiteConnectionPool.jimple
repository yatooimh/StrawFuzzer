public final class android.database.sqlite.SQLiteConnectionPool extends java.lang.Object implements java.io.Closeable
{
    static final boolean $assertionsDisabled;
    public static final int CONNECTION_FLAG_INTERACTIVE;
    public static final int CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
    public static final int CONNECTION_FLAG_READ_ONLY;
    private static final long CONNECTION_POOL_BUSY_MILLIS;
    private static final java.lang.String TAG;
    private final java.util.WeakHashMap mAcquiredConnections;
    private final java.util.ArrayList mAvailableNonPrimaryConnections;
    private android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration;
    private final java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked;
    private android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool;
    private android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue;
    private android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler;
    private boolean mIsOpen;
    private final java.lang.Object mLock;
    private int mMaxConnectionPoolSize;
    private int mNextConnectionId;
    private final java.util.concurrent.atomic.AtomicLong mTotalExecutionTimeCounter;

    static void <clinit>()
    {
        <android.database.sqlite.SQLiteConnectionPool: java.lang.String TAG> = "SQLiteConnectionPool";

        <android.database.sqlite.SQLiteConnectionPool: long CONNECTION_POOL_BUSY_MILLIS> = 30000L;

        <android.database.sqlite.SQLiteConnectionPool: int CONNECTION_FLAG_READ_ONLY> = 1;

        <android.database.sqlite.SQLiteConnectionPool: int CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY> = 2;

        <android.database.sqlite.SQLiteConnectionPool: int CONNECTION_FLAG_INTERACTIVE> = 4;

        <android.database.sqlite.SQLiteConnectionPool: boolean $assertionsDisabled> = 0;

        return;
    }

    private void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1, $r8, $r9, $r11;
        dalvik.system.CloseGuard $r2;
        java.lang.Object $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.util.ArrayList $r5;
        java.util.concurrent.atomic.AtomicLong $r6;
        java.util.WeakHashMap $r7;
        long $l0, $l2;
        byte $b1;
        android.os.Looper $r10;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicLong mTotalExecutionTimeCounter> = $r6;

        $r7 = new java.util.WeakHashMap;

        specialinvoke $r7.<java.util.WeakHashMap: void <init>()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections> = $r7;

        $r8 = new android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)>(r1);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration> = $r8;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()>();

        $r9 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $l0 = $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: long idleConnectionTimeoutMs>;

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 == 0 goto label1;

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r11 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $l2 = $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: long idleConnectionTimeoutMs>;

        virtualinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void setupIdleConnectionHandler(android.os.Looper,long)>($r10, $l2);

     label1:
        return;
    }

    static java.lang.Object access$000(android.database.sqlite.SQLiteConnectionPool)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        return $r1;
    }

    static void access$100(android.database.sqlite.SQLiteConnectionPool, android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter1: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void cancelConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)>(r1);

        return;
    }

    static android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler access$300(android.database.sqlite.SQLiteConnectionPool)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler $r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        return $r1;
    }

    static boolean access$400(android.database.sqlite.SQLiteConnectionPool, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: boolean closeAvailableConnectionLocked(int)>(i0);

        return $z0;
    }

    static android.database.sqlite.SQLiteDatabaseConfiguration access$500(android.database.sqlite.SQLiteConnectionPool)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        return $r1;
    }

    private void cancelConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1, $r4, $r7, r8, r9;
        android.database.sqlite.SQLiteConnection $r2;
        java.lang.RuntimeException $r3;
        android.os.OperationCanceledException $r5;
        java.lang.Thread $r6;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        $r2 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection>;

        if $r2 != null goto label6;

        $r3 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException>;

        if $r3 == null goto label1;

        goto label6;

     label1:
        r8 = null;

        r9 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

     label2:
        if r9 == r1 goto label3;

        r8 = r9;

        r9 = r9.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        goto label2;

     label3:
        if r8 == null goto label4;

        $r7 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        r8.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = $r7;

        goto label5;

     label4:
        $r4 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue> = $r4;

     label5:
        $r5 = new android.os.OperationCanceledException;

        specialinvoke $r5.<android.os.OperationCanceledException: void <init>()>();

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException> = $r5;

        $r6 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r6);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        return;

     label6:
        return;
    }

    private boolean closeAvailableConnectionLocked(int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, $i1, $i2, $i3, i4;
        java.util.ArrayList $r1, $r3, $r5;
        android.database.sqlite.SQLiteConnection $r2, r7, r8;
        java.lang.Object $r4;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        i0 := @parameter0: int;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i4 = $i1 - 1;

     label1:
        if i4 < 0 goto label3;

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r7 = (android.database.sqlite.SQLiteConnection) $r4;

        $i3 = virtualinvoke r7.<android.database.sqlite.SQLiteConnection: int getConnectionId()>();

        if $i3 != i0 goto label2;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r7);

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i4);

        return 1;

     label2:
        i4 = i4 + -1;

        goto label1;

     label3:
        r8 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if r8 == null goto label4;

        $i2 = virtualinvoke r8.<android.database.sqlite.SQLiteConnection: int getConnectionId()>();

        if $i2 != i0 goto label4;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r2);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = null;

        return 1;

     label4:
        return 0;
    }

    private void closeAvailableConnectionsAndLogExceptionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()>();

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if r1 == null goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = null;

     label1:
        return;
    }

    private void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, i1;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteConnection $r5;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.database.sqlite.SQLiteConnection) $r4;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        return;
    }

    private void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;
        android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler $r4, $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

     label1:
        virtualinvoke r1.<android.database.sqlite.SQLiteConnection: void close()>();

        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        if $r4 == null goto label2;

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler: void connectionClosed(android.database.sqlite.SQLiteConnection)>(r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close connection, its fate is now in the hands of the merciful GC: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r10, $r6);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void closeExcessConnectionsAndLogExceptionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r1, $r2;
        java.lang.Object $r3;
        android.database.sqlite.SQLiteConnection $r4;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i3 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

     label1:
        i0 = i3 - 1;

        $i1 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        $i2 = $i1 - 1;

        if i3 <= $i2 goto label2;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        $r4 = (android.database.sqlite.SQLiteConnection) $r3;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r4);

        i3 = i0;

        goto label1;

     label2:
        return;
    }

    private void discardAcquiredConnectionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus $r1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>($r1);

        return;
    }

    private void dispose(boolean)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean z0;
        int i0;
        java.util.WeakHashMap $r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.String $r4, $r9;
        dalvik.system.CloseGuard $r10, r12;
        java.lang.Throwable $r11;
        java.lang.Object r13;
        java.lang.StringBuilder r14;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        z0 := @parameter0: boolean;

        r12 = r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard>;

        if r12 == null goto label02;

        if z0 == 0 goto label01;

        virtualinvoke r12.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label01:
        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r10.<dalvik.system.CloseGuard: void close()>();

     label02:
        if z0 != 0 goto label11;

        r13 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r13;

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen> = 0;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()>();

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        i0 = virtualinvoke $r1.<java.util.WeakHashMap: int size()>();

     label04:
        if i0 == 0 goto label06;

     label05:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The connection pool for ");

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been closed but there are still ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" connections in use.  They will be closed as they are released back to the pool.");

        $r9 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r9);

     label06:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        exitmonitor r13;

     label07:
        goto label11;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r13;

     label10:
        throw $r11;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;
        int i0, $i1;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus $r4;
        java.util.WeakHashMap $r5;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r13;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

        i0 := @parameter1: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r1.<android.database.sqlite.SQLiteConnection: void setOnlyAllowReadOnlyOperations(boolean)>(z0);

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r4 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus NORMAL>;

        virtualinvoke $r5.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare acquired connection for session, closing it: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", connectionFlags=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

        throw $r7;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    private static int getPriority(int)
    {
        int $i0, i1;
        byte b2;

        i1 := @parameter0: int;

        $i0 = i1 & 4;

        if $i0 == 0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = 0;

     label2:
        return b2;
    }

    private boolean isSessionBlockingImportantConnectionWaitersLocked(boolean, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean z0, $z1;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1, r2;
        int $i0, i1, i2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        z0 := @parameter0: boolean;

        i1 := @parameter1: int;

        r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

        if r2 == null goto label5;

        i2 = staticinvoke <android.database.sqlite.SQLiteConnectionPool: int getPriority(int)>(i1);

     label1:
        $i0 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority>;

        if i2 <= $i0 goto label2;

        goto label5;

     label2:
        if z0 != 0 goto label4;

        $z1 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: boolean mWantPrimaryConnection>;

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        r1 = r2.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        r2 = r1;

        if r1 != null goto label1;

        goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    private void logConnectionPoolBusyLocked(long, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        long l0, $l1;
        java.lang.StringBuilder $r3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r5;
        java.lang.String $r6, $r11, $r15, $r31, r43, r45;
        float $f0, $f1;
        java.util.ArrayList $r20, $r22;
        java.util.WeakHashMap $r21, $r37;
        boolean $z0, $z1, $z2, $z3;
        android.database.sqlite.SQLiteConnection $r23, $r40;
        java.lang.Object $r33, $r39;
        java.util.Set $r38;
        int i3, i4, i5, i6, i7, i8, i9;
        java.lang.Thread r41;
        java.util.Iterator r42, r44;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        l0 := @parameter0: long;

        i3 := @parameter1: int;

        r41 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The connection pool for database \'");

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r6 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has been unable to grant a connection to thread ");

        $l1 = virtualinvoke r41.<java.lang.Thread: long getId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r11 = virtualinvoke r41.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with flags 0x");

        $r15 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $f0 = (float) l0;

        $f1 = $f0 * 0.001F;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds.\n");

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        i4 = 0;

        i5 = 0;

        i6 = 0;

        i7 = 0;

        $r21 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z0 = virtualinvoke $r21.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r37 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r38 = virtualinvoke $r37.<java.util.WeakHashMap: java.util.Set keySet()>();

        r42 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        i4 = i5;

        i6 = i7;

        $z3 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r39 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        $r40 = (android.database.sqlite.SQLiteConnection) $r39;

        r43 = virtualinvoke $r40.<android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()>();

        if r43 == null goto label2;

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>(r43);

        i5 = i5 + 1;

        goto label3;

     label2:
        i7 = i7 + 1;

     label3:
        goto label1;

     label4:
        $r22 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i8 = virtualinvoke $r22.<java.util.ArrayList: int size()>();

        i9 = i8;

        $r23 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r23 == null goto label5;

        i9 = i8 + 1;

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connections: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active, ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" idle, ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available.\n");

        $z1 = virtualinvoke $r20.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label7;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nRequests in progress:\n");

        r44 = virtualinvoke $r20.<java.util.ArrayList: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r33 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.lang.String) $r33;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label6;

     label7:
        $r31 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r31);

        return;
    }

    private void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus r1, r5, $r17;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int i0, $i1, i2;
        java.util.WeakHashMap $r6, $r8, $r9, $r11;
        boolean $z0, $z1;
        java.util.ArrayList $r7;
        java.util.Set $r10;
        java.lang.Object $r12, $r15, $r16, $r18;
        android.database.sqlite.SQLiteConnection $r13, $r19;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;

        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z0 = virtualinvoke $r6.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r7 = new java.util.ArrayList;

        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $i1 = virtualinvoke $r8.<java.util.WeakHashMap: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i1);

        $r9 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r10 = virtualinvoke $r9.<java.util.WeakHashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus) $r16;

        if r1 == r5 goto label2;

        $r17 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

        if r5 == $r17 goto label2;

        $r18 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (android.database.sqlite.SQLiteConnection) $r18;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

     label2:
        goto label1;

     label3:
        i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        i2 = 0;

     label4:
        if i2 >= i0 goto label5;

        $r11 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r12 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r13 = (android.database.sqlite.SQLiteConnection) $r12;

        virtualinvoke $r11.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r1);

        i2 = i2 + 1;

        goto label4;

     label5:
        return;
    }

    private android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter obtainConnectionWaiterLocked(java.lang.Thread, long, int, boolean, java.lang.String, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Thread r1;
        long l0;
        int i1, i2;
        boolean z0;
        java.lang.String r2;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter $r3, $r4, r5;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: java.lang.Thread;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: java.lang.String;

        i2 := @parameter5: int;

        r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool>;

        if r5 == null goto label1;

        $r4 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool> = $r4;

        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = null;

        goto label2;

     label1:
        $r3 = new android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        specialinvoke $r3.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: void <init>(android.database.sqlite.SQLiteConnectionPool$1)>(null);

        r5 = $r3;

     label2:
        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread> = r1;

        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime> = l0;

        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority> = i1;

        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: boolean mWantPrimaryConnection> = z0;

        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql> = r2;

        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mConnectionFlags> = i2;

        return r5;
    }

    public static android.database.sqlite.SQLiteConnectionPool open(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        java.lang.IllegalArgumentException $r0;
        android.database.sqlite.SQLiteConnectionPool $r1;
        android.database.sqlite.SQLiteDatabaseConfiguration r2;

        r2 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        if r2 == null goto label1;

        $r1 = new android.database.sqlite.SQLiteConnectionPool;

        specialinvoke $r1.<android.database.sqlite.SQLiteConnectionPool: void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)>(r2);

        specialinvoke $r1.<android.database.sqlite.SQLiteConnectionPool: void open()>();

        return $r1;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("configuration must not be null.");

        throw $r0;
    }

    private void open()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        android.database.sqlite.SQLiteConnection $r4, $r7;
        android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler $r5, $r8;
        dalvik.system.CloseGuard $r6;
        java.lang.Throwable $r9;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>($r3, 1);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = $r4;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        if $r5 == null goto label2;

        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler: void connectionReleased(android.database.sqlite.SQLiteConnection)>($r7);

     label2:
        exitmonitor r1;

     label3:
        r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen> = 1;

        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r6.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration, boolean)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1;
        boolean z0;
        int i0, $i1;
        android.database.sqlite.SQLiteConnection $r2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        z0 := @parameter1: boolean;

        i0 = r0.<android.database.sqlite.SQLiteConnectionPool: int mNextConnectionId>;

        $i1 = i0 + 1;

        r0.<android.database.sqlite.SQLiteConnectionPool: int mNextConnectionId> = $i1;

        $r2 = staticinvoke <android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection open(android.database.sqlite.SQLiteConnectionPool,android.database.sqlite.SQLiteDatabaseConfiguration,int,boolean)>(r0, r1, i0, z0);

        return $r2;
    }

    private void reconfigureAllConnectionsLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus $r2;
        java.util.ArrayList $r3, $r12, $r24;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteDatabaseConfiguration $r5, $r6;
        java.lang.RuntimeException $r7, $r14;
        java.lang.StringBuilder $r8, $r15;
        java.lang.String $r11, $r19;
        android.database.sqlite.SQLiteConnection $r17, $r20, r21, r25;
        int i2, i3;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r21 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if r21 == null goto label04;

     label01:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke r21.<android.database.sqlite.SQLiteConnection: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r6);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to reconfigure available primary connection, closing it: ");

        $r17 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r19, $r14);

        $r20 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>($r20);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = null;

     label04:
        $r24 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i2 = virtualinvoke $r24.<java.util.ArrayList: int size()>();

        i3 = 0;

     label05:
        if i3 >= i2 goto label10;

        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r25 = (android.database.sqlite.SQLiteConnection) $r4;

     label06:
        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke r25.<android.database.sqlite.SQLiteConnection: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r5);

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to reconfigure available non-primary connection, closing it: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r11, $r7);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r25);

        $r12 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r12.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        i2 = i2 + -1;

        i3 = i3 + -1;

     label09:
        i3 = i3 + 1;

        goto label05;

     label10:
        $r2 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus RECONFIGURE>;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>($r2);

        return;

        catch java.lang.RuntimeException from label01 to label02 with label03;
        catch java.lang.RuntimeException from label06 to label07 with label08;
    }

    private boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection, android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnection r1;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus $r2, r9, r10, $r13;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection;

        r9 := @parameter1: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus;

        r10 = r9;

        $r2 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus RECONFIGURE>;

        if r9 != $r2 goto label4;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke r1.<android.database.sqlite.SQLiteConnection: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r3);

     label2:
        r10 = r9;

        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to reconfigure released connection, closing it: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteConnectionPool", $r8, $r4);

        r10 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

     label4:
        $r13 = <android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus DISCARD>;

        if r10 != $r13 goto label5;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r1);

        return 0;

     label5:
        return 1;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void recycleConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r1, $r2;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool>;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = $r2;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread> = null;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql> = null;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection> = null;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException> = null;

        $i0 = r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mNonce>;

        $i1 = $i0 + 1;

        r1.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mNonce> = $i1;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterPool> = r1;

        return;
    }

    private void setMaxConnectionPoolSizeLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1, $r2;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label1;

        $i2 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize> = $i2;

        goto label2;

     label1:
        r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize> = 1;

     label2:
        return;
    }

    private void throwIfClosedLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $z0 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because the connection pool has been closed.");

        throw $r1;
    }

    private android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, $i1, $i2, i3, i4, i5, i6;
        android.database.sqlite.SQLiteConnection r1, $r4, r13, r14;
        java.util.ArrayList $r2, $r6, $r8, $r10;
        java.util.WeakHashMap $r3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r5;
        java.lang.Object $r7, $r9;
        boolean $z0;
        java.lang.String r12;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i3 <= 1 goto label3;

        if r12 == null goto label3;

        i4 = 0;

     label1:
        if i4 >= i3 goto label3;

        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r1 = (android.database.sqlite.SQLiteConnection) $r9;

        $z0 = virtualinvoke r1.<android.database.sqlite.SQLiteConnection: boolean isPreparedStatementInCache(java.lang.String)>(r12);

        if $z0 == 0 goto label2;

        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>(i4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r1, i0);

        return r1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        if i3 <= 0 goto label4;

        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $i2 = i3 - 1;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>($i2);

        r13 = (android.database.sqlite.SQLiteConnection) $r7;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r13, i0);

        return r13;

     label4:
        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        i5 = virtualinvoke $r3.<java.util.WeakHashMap: int size()>();

        i6 = i5;

        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r4 == null goto label5;

        i6 = i5 + 1;

     label5:
        $i1 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        if i6 < $i1 goto label6;

        return null;

     label6:
        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r14 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>($r5, 0);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r14, i0);

        return r14;
    }

    private android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0;
        java.util.WeakHashMap $r1;
        java.util.Set $r2;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteConnection $r5, r6, r8;
        java.util.Iterator r7;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        i0 := @parameter0: int;

        r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if r6 == null goto label1;

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = null;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r6, i0);

        return r6;

     label1:
        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r2 = virtualinvoke $r1.<java.util.WeakHashMap: java.util.Set keySet()>();

        r7 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.database.sqlite.SQLiteConnection) $r4;

        $z1 = virtualinvoke $r5.<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()>();

        if $z1 == 0 goto label3;

        return null;

     label3:
        goto label2;

     label4:
        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r8 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>($r3, 1);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)>(r8, i0);

        return r8;
    }

    private android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0, $i2, $i8, i9, i11;
        android.os.CancellationSignal r1;
        long l1, $l3, $l4, $l6, $l7, l10, l12, l13;
        java.lang.Thread $r2;
        byte $b5;
        android.database.sqlite.SQLiteConnectionPool$1 $r3;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, r16, r25, r29;
        java.lang.String r14;
        boolean z1, z4;
        java.lang.Object r15, r23, r26;
        android.database.sqlite.SQLiteConnection r17, r18, r27;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r19, r20, r21;
        java.util.concurrent.atomic.AtomicBoolean $r22;
        java.lang.RuntimeException r28;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r14 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.CancellationSignal;

        $i2 = i0 & 2;

        if $i2 == 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        r15 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r15;

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

     label04:
        if r1 == null goto label08;

     label05:
        virtualinvoke r1.<android.os.CancellationSignal: void throwIfCanceled()>();

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

        r16 = $r11;

        goto label66;

     label08:
        r17 = null;

        if z1 != 0 goto label10;

     label09:
        r17 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String,int)>(r14, i0);

     label10:
        r18 = r17;

        if r17 != null goto label12;

     label11:
        r18 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)>(i0);

     label12:
        if r18 == null goto label15;

     label13:
        exitmonitor r15;

     label14:
        return r18;

     label15:
        i9 = staticinvoke <android.database.sqlite.SQLiteConnectionPool: int getPriority(int)>(i0);

        l10 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r19 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter obtainConnectionWaiterLocked(java.lang.Thread,long,int,boolean,java.lang.String,int)>($r2, l10, i9, z1, r14, i0);

     label16:
        r20 = null;

     label17:
        r21 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

     label18:
        if r21 == null goto label24;

     label19:
        $i8 = r21.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority>;

        if i9 <= $i8 goto label21;

        r19.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = r21;

     label20:
        goto label24;

     label21:
        r20 = r21;

     label22:
        r21 = r21.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

     label23:
        goto label18;

     label24:
        if r20 == null goto label27;

     label25:
        r20.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = r19;

     label26:
        goto label28;

     label27:
        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue> = r19;

     label28:
        i11 = r19.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mNonce>;

        exitmonitor r15;

     label29:
        if r1 == null goto label30;

        $r3 = new android.database.sqlite.SQLiteConnectionPool$1;

        specialinvoke $r3.<android.database.sqlite.SQLiteConnectionPool$1: void <init>(android.database.sqlite.SQLiteConnectionPool,android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter,int)>(r0, r19, i11);

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>($r3);

     label30:
        l12 = 30000L;

     label31:
        $l3 = r19.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime>;

        l13 = $l3 + 30000L;

     label32:
        $r22 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked>;

        z4 = virtualinvoke $r22.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);

     label33:
        if z4 == 0 goto label41;

     label34:
        r23 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r23;

     label35:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        exitmonitor r23;

     label36:
        goto label41;

     label37:
        $r10 := @caughtexception;

     label38:
        exitmonitor r23;

     label39:
        throw $r10;

     label40:
        $r6 := @caughtexception;

        r25 = $r6;

        goto label63;

     label41:
        $l4 = l12 * 1000000L;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, $l4);

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        r26 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r26;

     label42:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

        r27 = r19.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection>;

        r28 = r19.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException>;

     label43:
        if r27 != null goto label50;

        if r28 == null goto label44;

        goto label50;

     label44:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label45:
        $b5 = l1 cmp l13;

        if $b5 >= 0 goto label46;

        l12 = l1 - l13;

        goto label48;

     label46:
        $l6 = r19.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime>;

        $l7 = l1 - $l6;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void logConnectionPoolBusyLocked(long,int)>($l7, i0);

     label47:
        l12 = 30000L;

        l13 = l1 + 30000L;

     label48:
        exitmonitor r26;

     label49:
        goto label32;

     label50:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void recycleConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)>(r19);

     label51:
        if r27 == null goto label55;

     label52:
        exitmonitor r26;

     label53:
        if r1 == null goto label54;

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

     label54:
        return r27;

     label55:
        throw r28;

     label56:
        $r8 := @caughtexception;

        r29 = $r8;

        goto label58;

     label57:
        $r4 := @caughtexception;

        r29 = $r4;

     label58:
        exitmonitor r26;

     label59:
        throw r29;

     label60:
        $r9 := @caughtexception;

        r29 = $r9;

        goto label58;

     label61:
        $r12 := @caughtexception;

        r25 = $r12;

        goto label63;

     label62:
        $r5 := @caughtexception;

        r25 = $r5;

     label63:
        if r1 == null goto label64;

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

     label64:
        throw r25;

     label65:
        $r7 := @caughtexception;

        r16 = $r7;

     label66:
        exitmonitor r15;

     label67:
        throw r16;

     label68:
        $r13 := @caughtexception;

        r16 = $r13;

        goto label66;

        catch java.lang.Throwable from label03 to label04 with label65;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Throwable from label15 to label16 with label65;
        catch java.lang.Throwable from label17 to label18 with label65;
        catch java.lang.Throwable from label19 to label20 with label07;
        catch java.lang.Throwable from label22 to label23 with label07;
        catch java.lang.Throwable from label25 to label26 with label07;
        catch java.lang.Throwable from label27 to label28 with label65;
        catch java.lang.Throwable from label28 to label29 with label65;
        catch java.lang.Throwable from label31 to label32 with label62;
        catch java.lang.Throwable from label32 to label33 with label62;
        catch java.lang.Throwable from label34 to label35 with label40;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
        catch java.lang.Throwable from label39 to label40 with label40;
        catch java.lang.Throwable from label41 to label42 with label61;
        catch java.lang.Throwable from label42 to label43 with label57;
        catch java.lang.Throwable from label44 to label45 with label57;
        catch java.lang.Throwable from label46 to label47 with label56;
        catch java.lang.Throwable from label48 to label49 with label60;
        catch java.lang.Throwable from label50 to label51 with label56;
        catch java.lang.Throwable from label52 to label53 with label56;
        catch java.lang.Throwable from label55 to label56 with label56;
        catch java.lang.Throwable from label58 to label59 with label60;
        catch java.lang.Throwable from label59 to label60 with label61;
        catch java.lang.Throwable from label66 to label67 with label68;
    }

    private void wakeConnectionWaitersLocked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean $z0, $z1, z2, z3, z4, z5, z6, z7, z8, z9;
        java.lang.Thread $r1;
        int $i0, $i1;
        java.lang.String $r2;
        java.lang.RuntimeException $r3;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter r4, r5, r11;
        android.database.sqlite.SQLiteConnection r6, r7, r8, r9;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r4 = null;

        r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

        z2 = 0;

        z3 = 0;

     label01:
        if r5 == null goto label21;

        $z0 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z0 != 0 goto label02;

        z4 = z3;

        z5 = 1;

        goto label16;

     label02:
        z4 = z3;

        r6 = null;

        z6 = z2;

        z7 = z3;

     label03:
        $z1 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: boolean mWantPrimaryConnection>;

        if $z1 != 0 goto label07;

     label04:
        z4 = z3;

        r6 = null;

        if z3 != 0 goto label07;

        z6 = z2;

        z7 = z3;

     label05:
        $r2 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql>;

        $i1 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mConnectionFlags>;

        r7 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String,int)>($r2, $i1);

     label06:
        z4 = z3;

        r6 = r7;

        if r7 != null goto label07;

        z4 = 1;

        r6 = r7;

     label07:
        z8 = z2;

        r8 = r6;

        if r6 != null goto label10;

        z8 = z2;

        r8 = r6;

        if z2 != 0 goto label10;

        z6 = z2;

        z7 = z4;

     label08:
        $i0 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mConnectionFlags>;

        r9 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)>($i0);

     label09:
        z8 = z2;

        r8 = r9;

        if r9 != null goto label10;

        z8 = 1;

        r8 = r9;

     label10:
        if r8 == null goto label13;

        z6 = z8;

        z7 = z4;

     label11:
        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnection mAssignedConnection> = r8;

     label12:
        z9 = 1;

        goto label14;

     label13:
        z9 = 0;

        if z4 == 0 goto label14;

        z9 = 0;

        if z8 == 0 goto label14;

        goto label21;

     label14:
        z2 = z8;

        z5 = z9;

        goto label16;

     label15:
        $r3 := @caughtexception;

        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.RuntimeException mException> = $r3;

        z5 = 1;

        z4 = z7;

        z2 = z6;

     label16:
        r11 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

        if z5 == 0 goto label19;

        if r4 == null goto label17;

        r4.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = r11;

        goto label18;

     label17:
        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue> = r11;

     label18:
        r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext> = null;

        $r1 = r5.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r1);

        goto label20;

     label19:
        r4 = r5;

     label20:
        r5 = r11;

        z3 = z4;

        goto label01;

     label21:
        return;

        catch java.lang.RuntimeException from label03 to label04 with label15;
        catch java.lang.RuntimeException from label05 to label06 with label15;
        catch java.lang.RuntimeException from label08 to label09 with label15;
        catch java.lang.RuntimeException from label11 to label12 with label15;
    }

    public android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0;
        android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler $r1, $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        android.os.CancellationSignal r5;
        android.database.sqlite.SQLiteConnection r6;
        java.lang.Object r7;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r5 := @parameter2: android.os.CancellationSignal;

        r6 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,int,android.os.CancellationSignal)>(r4, i0, r5);

        r7 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r7;

     label1:
        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        if $r1 == null goto label2;

        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler: void connectionAcquired(android.database.sqlite.SQLiteConnection)>(r6);

     label2:
        exitmonitor r7;

     label3:
        return r6;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r7;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void close()
    {
        android.database.sqlite.SQLiteConnectionPool r0;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void dispose(boolean)>(0);

        return;
    }

    void closeAvailableNonPrimaryConnectionsAndLogExceptions()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void collectDbStats(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object r1, $r6, $r8;
        android.database.sqlite.SQLiteConnection $r2, $r7, $r9, $r10;
        java.util.ArrayList $r3, r12;
        java.util.WeakHashMap $r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Throwable $r11;
        java.util.Iterator r13, r14;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r12 := @parameter0: java.util.ArrayList;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r2 == null goto label02;

        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        virtualinvoke $r10.<android.database.sqlite.SQLiteConnection: void collectDbStats(java.util.ArrayList)>(r12);

     label02:
        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        r13 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r8 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.database.sqlite.SQLiteConnection) $r8;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection: void collectDbStats(java.util.ArrayList)>(r12);

     label04:
        goto label03;

     label05:
        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.util.Set keySet()>();

        r14 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.database.sqlite.SQLiteConnection) $r6;

        virtualinvoke $r7.<android.database.sqlite.SQLiteConnection: void collectDbStatsUnsafe(java.util.ArrayList)>(r12);

     label07:
        goto label06;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void disableIdleConnectionHandler()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void dump(android.util.Printer, boolean, android.util.ArraySet)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.util.Printer r1, r89;
        java.lang.Object r2, $r58, $r59, $r62, $r67;
        int i0, $i2, $i3, $i8, $i10, $i11, i12, i13;
        java.lang.StringBuilder r3, r92, r93, r94, r95, r96, r97, r98, r99, r103;
        long l1, $l4, $l6, $l7, $l9;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4, $r6, $r22, $r27, $r32, $r37, $r38, $r71, $r75, $r78, $r85;
        java.lang.String $r7, $r10, $r13, $r16, $r20, $r28, $r29, $r33, $r34, $r36, $r52, $r55, $r64, $r73, $r80, $r82, $r84, $r86, $r87;
        java.util.concurrent.atomic.AtomicLong $r18;
        byte $b5;
        android.database.sqlite.SQLiteConnection $r39, $r60, $r68, $r69;
        java.util.ArrayList $r40, $r65, $r66;
        java.util.WeakHashMap $r41, $r56;
        android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter $r42, r102;
        float $f0, $f1;
        java.lang.Thread $r47;
        java.util.Set $r57;
        java.lang.Throwable $r88;
        android.util.ArraySet r90;
        java.io.File r91;
        java.util.Iterator r100;
        java.util.Map$Entry r101;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r89 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        r90 := @parameter2: android.util.ArraySet;

        r1 = staticinvoke <android.util.PrefixPrinter: android.util.Printer create(android.util.Printer,java.lang.String)>(r89, "    ");

        r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r2;

        if r90 == null goto label02;

     label01:
        r91 = new java.io.File;

        $r85 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r86 = $r85.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        specialinvoke r91.<java.io.File: void <init>(java.lang.String)>($r86);

        $r87 = virtualinvoke r91.<java.io.File: java.lang.String getParent()>();

        virtualinvoke r90.<android.util.ArraySet: boolean add(java.lang.Object)>($r87);

     label02:
        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        z1 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isLegacyCompatibilityWalEnabled()>();

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection pool for ");

        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r7 = $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r10);

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Open: ");

        $z2 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r13 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r13);

        r94 = new java.lang.StringBuilder;

        specialinvoke r94.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Max connections: ");

        $i2 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r16);

        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Total execution time: ");

        $r18 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicLong mTotalExecutionTimeCounter>;

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r20);

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Configuration: openFlags=");

        $r22 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i3 = $r22.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isLegacyCompatibilityWalEnabled=");

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", journalMode=");

        $r27 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r28 = $r27.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String journalMode>;

        $r29 = staticinvoke <android.text.TextUtils: java.lang.String emptyIfNull(java.lang.String)>($r28);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", syncMode=");

        $r32 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r33 = $r32.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String syncMode>;

        $r34 = staticinvoke <android.text.TextUtils: java.lang.String emptyIfNull(java.lang.String)>($r33);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r36);

     label03:
        if z1 == 0 goto label05;

     label04:
        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Compatibility WAL enabled: wal_syncmode=");

        $r82 = staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String getWALSyncMode()>();

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        $r84 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r84);

     label05:
        $r37 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z3 = virtualinvoke $r37.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isLookasideConfigSet()>();

        if $z3 == 0 goto label06;

        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Lookaside config: sz=");

        $r75 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i10 = $r75.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotSize>;

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cnt=");

        $r78 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i11 = $r78.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotCount>;

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r80 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r80);

     label06:
        $r38 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $l4 = $r38.<android.database.sqlite.SQLiteDatabaseConfiguration: long idleConnectionTimeoutMs>;

        $b5 = $l4 cmp 9223372036854775807L;

        if $b5 == 0 goto label07;

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Idle connection timeout: ");

        $r71 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $l9 = $r71.<android.database.sqlite.SQLiteDatabaseConfiguration: long idleConnectionTimeoutMs>;

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r73 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>($r73);

     label07:
        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>("  Available primary connection:");

        $r39 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        if $r39 == null goto label09;

        $r69 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection>;

        virtualinvoke $r69.<android.database.sqlite.SQLiteConnection: void dump(android.util.Printer,boolean)>(r1, z0);

     label08:
        goto label10;

     label09:
        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("<none>");

     label10:
        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>("  Available non-primary connections:");

        $r40 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $z4 = virtualinvoke $r40.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 != 0 goto label16;

        $r65 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        i0 = virtualinvoke $r65.<java.util.ArrayList: int size()>();

     label11:
        i12 = 0;

     label12:
        if i12 >= i0 goto label15;

     label13:
        $r66 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $r67 = virtualinvoke $r66.<java.util.ArrayList: java.lang.Object get(int)>(i12);

        $r68 = (android.database.sqlite.SQLiteConnection) $r67;

        virtualinvoke $r68.<android.database.sqlite.SQLiteConnection: void dump(android.util.Printer,boolean)>(r1, z0);

     label14:
        i12 = i12 + 1;

        goto label12;

     label15:
        goto label17;

     label16:
        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("<none>");

     label17:
        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>("  Acquired connections:");

        $r41 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z5 = virtualinvoke $r41.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z5 != 0 goto label21;

        $r56 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r57 = virtualinvoke $r56.<java.util.WeakHashMap: java.util.Set entrySet()>();

        r100 = interfaceinvoke $r57.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z6 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label20;

        $r58 = interfaceinvoke r100.<java.util.Iterator: java.lang.Object next()>();

        r101 = (java.util.Map$Entry) $r58;

        $r59 = interfaceinvoke r101.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r60 = (android.database.sqlite.SQLiteConnection) $r59;

        virtualinvoke $r60.<android.database.sqlite.SQLiteConnection: void dumpUnsafe(android.util.Printer,boolean)>(r1, z0);

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Status: ");

        $r62 = interfaceinvoke r101.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r62);

        $r64 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r64);

     label19:
        goto label18;

     label20:
        goto label22;

     label21:
        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("<none>");

     label22:
        interfaceinvoke r89.<android.util.Printer: void println(java.lang.String)>("  Connection waiters:");

        $r42 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

        if $r42 == null goto label29;

     label23:
        i13 = 0;

     label24:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r102 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mConnectionWaiterQueue>;

     label25:
        if r102 == null goto label28;

     label26:
        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": waited for ");

        $l6 = r102.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: long mStartTime>;

        $l7 = l1 - $l6;

        $f0 = (float) $l7;

        $f1 = $f0 * 0.001F;

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms - thread=");

        $r47 = r102.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.Thread mThread>;

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", priority=");

        $i8 = r102.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: int mPriority>;

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sql=\'");

        $r52 = r102.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: java.lang.String mSql>;

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r55 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r55);

        r102 = r102.<android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter mNext>;

     label27:
        i13 = i13 + 1;

        goto label25;

     label28:
        goto label30;

     label29:
        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("<none>");

     label30:
        exitmonitor r2;

     label31:
        return;

     label32:
        $r88 := @caughtexception;

     label33:
        exitmonitor r2;

     label34:
        throw $r88;

        catch java.lang.Throwable from label01 to label02 with label32;
        catch java.lang.Throwable from label02 to label03 with label32;
        catch java.lang.Throwable from label04 to label05 with label32;
        catch java.lang.Throwable from label05 to label06 with label32;
        catch java.lang.Throwable from label06 to label07 with label32;
        catch java.lang.Throwable from label07 to label08 with label32;
        catch java.lang.Throwable from label09 to label10 with label32;
        catch java.lang.Throwable from label10 to label11 with label32;
        catch java.lang.Throwable from label13 to label14 with label32;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.lang.Throwable from label18 to label19 with label32;
        catch java.lang.Throwable from label21 to label22 with label32;
        catch java.lang.Throwable from label22 to label23 with label32;
        catch java.lang.Throwable from label24 to label25 with label32;
        catch java.lang.Throwable from label26 to label27 with label32;
        catch java.lang.Throwable from label29 to label30 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Throwable $r2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getPath()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        java.lang.String $r2;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r2 = $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        return $r2;
    }

    void onConnectionLeaked()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.StringBuilder $r2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4;
        java.lang.String $r5, $r8;
        java.util.concurrent.atomic.AtomicBoolean $r9;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A SQLiteConnection object for database \'");

        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was leaked!  Please fix your application to end transactions in progress properly and to close the database when it is no longer needed.");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnectionPool", $r8);

        $r9 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicBoolean mConnectionLeaked>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    void onStatementExecuted(long)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        long l0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        l0 := @parameter0: long;

        $r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.concurrent.atomic.AtomicLong mTotalExecutionTimeCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

        return;
    }

    public void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteConnection r2;
        java.lang.IllegalArgumentException $r3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4, $r5, $r6, $r7, $r8, $r9, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        boolean $z1, $z2, $z3, $z4, z5, z6, z7;
        java.util.WeakHashMap $r10, $r11;
        java.lang.Throwable $r12;
        java.lang.IllegalStateException r14, r15;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r13 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        if r13 == null goto label30;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()>();

        i7 = r13.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        i8 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

     label02:
        $i0 = i7 ^ i8;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        if z5 == 0 goto label08;

     label05:
        $r11 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z4 = virtualinvoke $r11.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z4 == 0 goto label07;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()>();

     label06:
        goto label08;

     label07:
        r14 = new java.lang.IllegalStateException;

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Write Ahead Logging (WAL) mode cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");

        throw r14;

     label08:
        $z2 = r13.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        $r5 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z1 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z2 == $z1 goto label10;

     label09:
        z6 = 1;

        goto label11;

     label10:
        z6 = 0;

     label11:
        if z6 == 0 goto label15;

     label12:
        $r10 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z3 = virtualinvoke $r10.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z3 == 0 goto label14;

     label13:
        goto label15;

     label14:
        r15 = new java.lang.IllegalStateException;

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Foreign Key Constraints cannot be enabled or disabled while there are transactions in progress.  Finish all transactions and release all active database connections first.");

        throw r15;

     label15:
        z7 = 0;

     label16:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i3 = $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i2 = r13.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i4 = $i3 ^ $i2;

        if $i4 != -2147483648 goto label18;

     label17:
        z7 = 1;

     label18:
        if z7 != 0 goto label24;

     label19:
        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i6 = $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i5 = r13.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        if $i6 == $i5 goto label24;

     label20:
        if z5 == 0 goto label22;

     label21:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()>();

     label22:
        r2 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)>(r13, 1);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void discardAcquiredConnectionsLocked()>();

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = r2;

        $r9 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>(r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()>();

     label23:
        goto label25;

     label24:
        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>(r13);

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeExcessConnectionsAndLogExceptionsLocked()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void reconfigureAllConnectionsLocked()>();

     label25:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

        exitmonitor r1;

     label26:
        return;

     label27:
        $r12 := @caughtexception;

     label28:
        exitmonitor r1;

     label29:
        throw $r12;

     label30:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("configuration must not be null.");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label05 to label06 with label27;
        catch java.lang.Throwable from label07 to label08 with label27;
        catch java.lang.Throwable from label08 to label09 with label27;
        catch java.lang.Throwable from label12 to label13 with label27;
        catch java.lang.Throwable from label14 to label15 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
    }

    public void releaseConnection(android.database.sqlite.SQLiteConnection)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.Object r1, $r5;
        android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus r2;
        android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler $r3, $r8;
        java.util.WeakHashMap $r4;
        boolean $z0, $z1, $z2, $z4;
        java.util.ArrayList $r6, $r7;
        int $i0, $i1, $i2;
        java.lang.Throwable $r9;
        android.database.sqlite.SQLiteConnection r10;
        java.lang.IllegalStateException r11;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r10 := @parameter0: android.database.sqlite.SQLiteConnection;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        if $r3 == null goto label02;

        $r8 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler: void connectionReleased(android.database.sqlite.SQLiteConnection)>(r10);

     label02:
        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r10);

        r2 = (android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus) $r5;

     label03:
        if r2 == null goto label16;

     label04:
        $z0 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z0 != 0 goto label06;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r10);

     label05:
        goto label14;

     label06:
        $z1 = virtualinvoke r10.<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()>();

        if $z1 == 0 goto label10;

        $z4 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection,android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>(r10, r2);

        if $z4 == 0 goto label08;

     label07:
        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection mAvailablePrimaryConnection> = r10;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

     label09:
        goto label14;

     label10:
        $r6 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        $i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i1 = r0.<android.database.sqlite.SQLiteConnectionPool: int mMaxConnectionPoolSize>;

        $i2 = $i1 - 1;

        if $i0 < $i2 goto label12;

        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)>(r10);

     label11:
        goto label14;

     label12:
        $z2 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection,android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)>(r10, r2);

        if $z2 == 0 goto label13;

        $r7 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.ArrayList mAvailableNonPrimaryConnections>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

     label13:
        specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()>();

     label14:
        exitmonitor r1;

     label15:
        return;

     label16:
        r11 = new java.lang.IllegalStateException;

        specialinvoke r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");

        throw r11;

     label17:
        $r9 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void setupIdleConnectionHandler(android.os.Looper, long)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        long l0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler r2;
        java.lang.Throwable $r3;
        android.os.Looper r4;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r4 := @parameter0: android.os.Looper;

        l0 := @parameter1: long;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler;

        specialinvoke r2.<android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler: void <init>(android.database.sqlite.SQLiteConnectionPool,android.os.Looper,long)>(r0, r4, l0);

        r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$IdleConnectionHandler mIdleConnectionHandler> = r2;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean shouldYieldConnection(android.database.sqlite.SQLiteConnection, int)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        int i0;
        java.lang.Object r1;
        boolean z0, $z1, $z2, $z3;
        java.util.WeakHashMap $r2;
        java.lang.Throwable $r3;
        android.database.sqlite.SQLiteConnection r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        r4 := @parameter0: android.database.sqlite.SQLiteConnection;

        i0 := @parameter1: int;

        r1 = r0.<android.database.sqlite.SQLiteConnectionPool: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteConnectionPool: java.util.WeakHashMap mAcquiredConnections>;

        $z1 = virtualinvoke $r2.<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label5;

        $z2 = r0.<android.database.sqlite.SQLiteConnectionPool: boolean mIsOpen>;

        if $z2 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $z3 = virtualinvoke r4.<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()>();

        z0 = specialinvoke r0.<android.database.sqlite.SQLiteConnectionPool: boolean isSessionBlockingImportantConnectionWaitersLocked(boolean,int)>($z3, i0);

        exitmonitor r1;

     label4:
        return z0;

     label5:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because the specified connection was not acquired from this pool or has already been released.");

        throw r5;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        java.lang.StringBuilder $r2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4;
        java.lang.String $r5, $r7;

        r0 := @this: android.database.sqlite.SQLiteConnectionPool;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteConnectionPool: ");

        $r4 = r0.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
