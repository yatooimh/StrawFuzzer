public class android.database.sqlite.SQLiteCursor extends android.database.AbstractWindowedCursor
{
    static final int NO_COUNT;
    static final java.lang.String TAG;
    private java.util.Map mColumnNameMap;
    private final java.lang.String[] mColumns;
    private int mCount;
    private int mCursorWindowCapacity;
    private final android.database.sqlite.SQLiteCursorDriver mDriver;
    private final java.lang.String mEditTable;
    private boolean mFillWindowForwardOnly;
    private final android.database.sqlite.SQLiteQuery mQuery;
    private final java.lang.Throwable mStackTrace;

    public void <init>(android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery)
    {
        android.database.sqlite.SQLiteCursor r0;
        android.database.sqlite.SQLiteCursorDriver r1;
        java.lang.String r2;
        android.database.sqlite.SQLiteQuery r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.lang.String[] $r5;
        android.database.sqlite.DatabaseObjectNotClosedException $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        r1 := @parameter0: android.database.sqlite.SQLiteCursorDriver;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteQuery;

        specialinvoke r0.<android.database.AbstractWindowedCursor: void <init>()>();

        r0.<android.database.sqlite.SQLiteCursor: int mCount> = -1;

        if r3 == null goto label3;

        $z0 = staticinvoke <android.os.StrictMode: boolean vmSqliteObjectLeaksEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = new android.database.sqlite.DatabaseObjectNotClosedException;

        specialinvoke $r6.<android.database.sqlite.DatabaseObjectNotClosedException: void <init>()>();

        $r7 = virtualinvoke $r6.<android.database.sqlite.DatabaseObjectNotClosedException: java.lang.Throwable fillInStackTrace()>();

        r0.<android.database.sqlite.SQLiteCursor: java.lang.Throwable mStackTrace> = $r7;

        goto label2;

     label1:
        r0.<android.database.sqlite.SQLiteCursor: java.lang.Throwable mStackTrace> = null;

     label2:
        r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver> = r1;

        r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable> = r2;

        r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap> = null;

        r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery> = r3;

        $r5 = virtualinvoke r3.<android.database.sqlite.SQLiteQuery: java.lang.String[] getColumnNames()>();

        r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns> = $r5;

        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("query object cannot be null");

        throw $r4;
    }

    public void <init>(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery)
    {
        android.database.sqlite.SQLiteCursor r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.database.sqlite.SQLiteCursorDriver r2;
        java.lang.String r3;
        android.database.sqlite.SQLiteQuery r4;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: android.database.sqlite.SQLiteCursorDriver;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.database.sqlite.SQLiteQuery;

        specialinvoke r0.<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>(r2, r3, r4);

        return;
    }

    private void fillWindow(int)
    {
        android.database.sqlite.SQLiteCursor r0;
        int i0, $i2, $i3, $i5, $i6, $i7, i9;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2, $r5, $r13;
        boolean $z0, $z1;
        android.database.CursorWindow $r6, $r8, $r10;
        android.database.sqlite.SQLiteQuery $r7, $r9;
        java.lang.RuntimeException $r14;
        java.lang.StringBuilder r15, r16;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteCursor: void clearOrCreateWindow(java.lang.String)>($r2);

     label1:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requiredPos cannot be negative, but was ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i0, $r5);

        $i2 = r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        if $i2 != -1 goto label3;

        $r9 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $r8 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        $i5 = virtualinvoke $r9.<android.database.sqlite.SQLiteQuery: int fillWindow(android.database.CursorWindow,int,int,boolean)>($r8, i0, i0, 1);

        r0.<android.database.sqlite.SQLiteCursor: int mCount> = $i5;

        $r10 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        $i6 = virtualinvoke $r10.<android.database.CursorWindow: int getNumRows()>();

        r0.<android.database.sqlite.SQLiteCursor: int mCursorWindowCapacity> = $i6;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteCursor", 3);

        if $z1 == 0 goto label7;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("received count(*) from native_fill_window: ");

        $i7 = r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteCursor", $r13);

     label2:
        goto label7;

     label3:
        $z0 = r0.<android.database.sqlite.SQLiteCursor: boolean mFillWindowForwardOnly>;

        if $z0 == 0 goto label5;

     label4:
        i9 = i0;

        goto label6;

     label5:
        $i3 = r0.<android.database.sqlite.SQLiteCursor: int mCursorWindowCapacity>;

        i9 = staticinvoke <android.database.DatabaseUtils: int cursorPickFillWindowStartPosition(int,int)>(i0, $i3);

     label6:
        $r7 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $r6 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        virtualinvoke $r7.<android.database.sqlite.SQLiteQuery: int fillWindow(android.database.CursorWindow,int,int,boolean)>($r6, i9, i0, 0);

     label7:
        return;

     label8:
        $r14 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteCursor: void closeWindow()>();

        throw $r14;

        catch java.lang.RuntimeException from label1 to label2 with label8;
        catch java.lang.RuntimeException from label3 to label4 with label8;
        catch java.lang.RuntimeException from label5 to label6 with label8;
        catch java.lang.RuntimeException from label6 to label7 with label8;
    }

    public void close()
    {
        android.database.sqlite.SQLiteCursor r0;
        android.database.sqlite.SQLiteQuery $r2;
        android.database.sqlite.SQLiteCursorDriver $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        specialinvoke r0.<android.database.AbstractWindowedCursor: void close()>();

        entermonitor r0;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteQuery: void close()>();

        $r3 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r3.<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void deactivate()
    {
        android.database.sqlite.SQLiteCursor r0;
        android.database.sqlite.SQLiteCursorDriver $r1;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        specialinvoke r0.<android.database.AbstractWindowedCursor: void deactivate()>();

        $r1 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r1.<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>();

        return;
    }

    protected void finalize()
    {
        android.database.sqlite.SQLiteCursor r0;
        int i0, i1;
        java.lang.StringBuilder r1;
        android.database.CursorWindow $r2;
        java.lang.Throwable $r3, $r17, $r18;
        android.database.sqlite.SQLiteQuery $r4, $r6;
        android.database.sqlite.SQLiteDatabase $r7;
        java.lang.String $r8, $r11, $r14, $r16, r19;

        r0 := @this: android.database.sqlite.SQLiteCursor;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        if $r2 == null goto label6;

        $r3 = r0.<android.database.sqlite.SQLiteCursor: java.lang.Throwable mStackTrace>;

        if $r3 == null goto label5;

        $r4 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        r19 = virtualinvoke $r4.<android.database.sqlite.SQLiteQuery: java.lang.String getSql()>();

        i0 = virtualinvoke r19.<java.lang.String: int length()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finalizing a Cursor that has not been deactivated or closed. database = ");

        $r6 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $r7 = virtualinvoke $r6.<android.database.sqlite.SQLiteQuery: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r8 = virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", table = ");

        $r11 = r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", query = ");

     label2:
        i1 = 1000;

        if i0 <= 1000 goto label3;

        goto label4;

     label3:
        i1 = i0;

     label4:
        $r14 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<android.database.sqlite.SQLiteCursor: java.lang.Throwable mStackTrace>;

        staticinvoke <android.os.StrictMode: void onSqliteObjectLeaked(java.lang.String,java.lang.Throwable)>($r16, $r17);

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteCursor: void close()>();

     label6:
        specialinvoke r0.<android.database.AbstractWindowedCursor: void finalize()>();

        return;

     label7:
        $r18 := @caughtexception;

        specialinvoke r0.<android.database.AbstractWindowedCursor: void finalize()>();

        throw $r18;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public int getColumnIndex(java.lang.String)
    {
        android.database.sqlite.SQLiteCursor r0;
        int i0, $i1, $i3, i4, i5;
        java.util.Map $r1, $r2;
        java.lang.Object $r3;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, $r10, r13, r16;
        java.util.HashMap $r9;
        java.lang.Integer $r11, r19;
        java.lang.String[] r14;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        r13 := @parameter0: java.lang.String;

        $r1 = r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap>;

        if $r1 != null goto label3;

        r14 = r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns>;

        i0 = lengthof r14;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>(int,float)>(i0, 1.0F);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r10 = r14[i4];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        i4 = i4 + 1;

        goto label1;

     label2:
        r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap> = $r9;

     label3:
        i5 = virtualinvoke r13.<java.lang.String: int lastIndexOf(int)>(46);

        r16 = r13;

        if i5 == -1 goto label4;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requesting column name with table name -- ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteCursor", $r8, $r4);

        $i3 = i5 + 1;

        r16 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int)>($i3);

     label4:
        $r2 = r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);

        r19 = (java.lang.Integer) $r3;

        if r19 == null goto label5;

        $i1 = virtualinvoke r19.<java.lang.Integer: int intValue()>();

        return $i1;

     label5:
        return -1;
    }

    public java.lang.String[] getColumnNames()
    {
        android.database.sqlite.SQLiteCursor r0;
        java.lang.String[] $r1;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 = r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns>;

        return $r1;
    }

    public int getCount()
    {
        android.database.sqlite.SQLiteCursor r0;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        $i0 = r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        if $i0 != -1 goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteCursor: void fillWindow(int)>(0);

     label1:
        $i1 = r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        return $i1;
    }

    public android.database.sqlite.SQLiteDatabase getDatabase()
    {
        android.database.sqlite.SQLiteCursor r0;
        android.database.sqlite.SQLiteQuery $r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteQuery: android.database.sqlite.SQLiteDatabase getDatabase()>();

        return $r2;
    }

    public boolean onMove(int, int)
    {
        android.database.sqlite.SQLiteCursor r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.database.CursorWindow $r1, $r2, $r3, $r4;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        if $r1 == null goto label1;

        $r2 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        $i2 = virtualinvoke $r2.<android.database.CursorWindow: int getStartPosition()>();

        if i1 < $i2 goto label1;

        $r3 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        $i3 = virtualinvoke $r3.<android.database.CursorWindow: int getStartPosition()>();

        $r4 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        $i4 = virtualinvoke $r4.<android.database.CursorWindow: int getNumRows()>();

        $i5 = $i3 + $i4;

        if i1 < $i5 goto label2;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteCursor: void fillWindow(int)>(i1);

     label2:
        return 1;
    }

    public boolean requery()
    {
        android.database.sqlite.SQLiteCursor r0;
        boolean z0, $z1, $z2;
        android.database.sqlite.SQLiteQuery $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.CursorWindow $r4, $r6;
        android.database.sqlite.SQLiteCursorDriver $r5;
        java.lang.Throwable $r7, $r13;
        java.lang.String $r10, $r12;
        java.lang.StringBuilder r16;
        java.lang.IllegalStateException r17;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        $z1 = virtualinvoke r0.<android.database.sqlite.SQLiteCursor: boolean isClosed()>();

        if $z1 == 0 goto label01;

        return 0;

     label01:
        entermonitor r0;

     label02:
        $r2 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteQuery: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $z2 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z2 != 0 goto label04;

        exitmonitor r0;

     label03:
        return 0;

     label04:
        $r4 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        if $r4 == null goto label05;

        $r6 = r0.<android.database.sqlite.SQLiteCursor: android.database.CursorWindow mWindow>;

        virtualinvoke $r6.<android.database.CursorWindow: void clear()>();

     label05:
        r0.<android.database.sqlite.SQLiteCursor: int mPos> = -1;

        r0.<android.database.sqlite.SQLiteCursor: int mCount> = -1;

        $r5 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r5.<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>(r0);

        exitmonitor r0;

     label06:
        z0 = specialinvoke r0.<android.database.AbstractWindowedCursor: boolean requery()>();

     label07:
        return z0;

     label08:
        $r7 := @caughtexception;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requery() failed ");

        r17 = (java.lang.IllegalStateException) $r7;

        $r10 = virtualinvoke r17.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteCursor", $r12, $r7);

        return 0;

     label09:
        $r13 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.IllegalStateException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setFillWindowForwardOnly(boolean)
    {
        android.database.sqlite.SQLiteCursor r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        z0 := @parameter0: boolean;

        r0.<android.database.sqlite.SQLiteCursor: boolean mFillWindowForwardOnly> = z0;

        return;
    }

    public void setSelectionArguments(java.lang.String[])
    {
        android.database.sqlite.SQLiteCursor r0;
        java.lang.String[] r1;
        android.database.sqlite.SQLiteCursorDriver $r2;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r2.<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>(r1);

        return;
    }

    public void setWindow(android.database.CursorWindow)
    {
        android.database.sqlite.SQLiteCursor r0;
        android.database.CursorWindow r1;

        r0 := @this: android.database.sqlite.SQLiteCursor;

        r1 := @parameter0: android.database.CursorWindow;

        specialinvoke r0.<android.database.AbstractWindowedCursor: void setWindow(android.database.CursorWindow)>(r1);

        r0.<android.database.sqlite.SQLiteCursor: int mCount> = -1;

        return;
    }

    public static void <clinit>()
    {
        <android.database.sqlite.SQLiteCursor: java.lang.String TAG> = "SQLiteCursor";

        <android.database.sqlite.SQLiteCursor: int NO_COUNT> = -1;

        return;
    }
}
