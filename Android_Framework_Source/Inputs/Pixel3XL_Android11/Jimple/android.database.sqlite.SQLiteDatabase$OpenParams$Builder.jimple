public final class android.database.sqlite.SQLiteDatabase$OpenParams$Builder extends java.lang.Object
{
    private android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory;
    private android.database.DatabaseErrorHandler mErrorHandler;
    private long mIdleConnectionTimeout;
    private java.lang.String mJournalMode;
    private int mLookasideSlotCount;
    private int mLookasideSlotSize;
    private int mOpenFlags;
    private java.lang.String mSyncMode;

    public void <init>()
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotSize> = -1;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotCount> = -1;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: long mIdleConnectionTimeout> = -1L;

        return;
    }

    public void <init>(android.database.sqlite.SQLiteDatabase$OpenParams)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        android.database.sqlite.SQLiteDatabase$OpenParams r1;
        int $i0, $i1, $i2;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r2;
        android.database.DatabaseErrorHandler $r3;
        java.lang.String $r4, $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$OpenParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotSize> = -1;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotCount> = -1;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: long mIdleConnectionTimeout> = -1L;

        $i0 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: int access$300(android.database.sqlite.SQLiteDatabase$OpenParams)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotSize> = $i0;

        $i1 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: int access$400(android.database.sqlite.SQLiteDatabase$OpenParams)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotCount> = $i1;

        $i2 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: int access$000(android.database.sqlite.SQLiteDatabase$OpenParams)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags> = $i2;

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory access$100(android.database.sqlite.SQLiteDatabase$OpenParams)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory> = $r2;

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler access$200(android.database.sqlite.SQLiteDatabase$OpenParams)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.DatabaseErrorHandler mErrorHandler> = $r3;

        $r4 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String access$600(android.database.sqlite.SQLiteDatabase$OpenParams)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: java.lang.String mJournalMode> = $r4;

        $r5 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String access$700(android.database.sqlite.SQLiteDatabase$OpenParams)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: java.lang.String mSyncMode> = $r5;

        return;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        int i0, $i1, $i2;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        i0 := @parameter0: int;

        $i1 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags>;

        $i2 = $i1 | i0;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags> = $i2;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams build()
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        android.database.sqlite.SQLiteDatabase$OpenParams $r1;
        java.lang.String $r2, $r3;
        long $l0;
        int $i1, $i2, $i3;
        android.database.DatabaseErrorHandler $r4;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        $r1 = new android.database.sqlite.SQLiteDatabase$OpenParams;

        $i3 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags>;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory>;

        $r4 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.DatabaseErrorHandler mErrorHandler>;

        $i2 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotSize>;

        $i1 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotCount>;

        $l0 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: long mIdleConnectionTimeout>;

        $r3 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: java.lang.String mJournalMode>;

        $r2 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: java.lang.String mSyncMode>;

        specialinvoke $r1.<android.database.sqlite.SQLiteDatabase$OpenParams: void <init>(int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler,int,int,long,java.lang.String,java.lang.String,android.database.sqlite.SQLiteDatabase$1)>($i3, $r5, $r4, $i2, $i1, $l0, $r3, $r2, null);

        return $r1;
    }

    public boolean isWriteAheadLoggingEnabled()
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        $i0 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        int i0, $i1, $i2;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        i0 := @parameter0: int;

        $i1 = r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags>;

        $i2 = $i1 & i0;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags> = $i2;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory> = r1;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder setErrorHandler(android.database.DatabaseErrorHandler)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        android.database.DatabaseErrorHandler r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        r1 := @parameter0: android.database.DatabaseErrorHandler;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.DatabaseErrorHandler mErrorHandler> = r1;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder setIdleConnectionTimeout(long)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        long l0;
        byte $b1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "idle connection timeout cannot be negative");

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: long mIdleConnectionTimeout> = l0;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder setJournalMode(java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        java.lang.String r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: java.lang.String mJournalMode> = r1;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder setLookasideConfig(int, int)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        int i0, i1;
        boolean z1, z2, z3;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "lookasideSlotCount cannot be negative");

        if i1 < 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "lookasideSlotSize cannot be negative");

        if i0 <= 0 goto label5;

        z3 = 1;

        if i1 > 0 goto label7;

     label5:
        if i1 != 0 goto label6;

        if i0 != 0 goto label6;

        z3 = 1;

        goto label7;

     label6:
        z3 = 0;

     label7:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid configuration: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, $r7);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotSize> = i0;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mLookasideSlotCount> = i1;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder setOpenFlags(int)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        int i0;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        i0 := @parameter0: int;

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: int mOpenFlags> = i0;

        return r0;
    }

    public android.database.sqlite.SQLiteDatabase$OpenParams$Builder setSynchronousMode(java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        java.lang.String r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: java.lang.String mSyncMode> = r1;

        return r0;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>(536870912);

        goto label2;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)>(536870912);

     label2:
        return;
    }
}
