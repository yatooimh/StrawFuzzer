public final class android.database.sqlite.SQLiteDatabase extends android.database.sqlite.SQLiteClosable
{
    static final boolean $assertionsDisabled;
    public static final int CONFLICT_ABORT;
    public static final int CONFLICT_FAIL;
    public static final int CONFLICT_IGNORE;
    public static final int CONFLICT_NONE;
    public static final int CONFLICT_REPLACE;
    public static final int CONFLICT_ROLLBACK;
    public static final java.lang.String[] CONFLICT_VALUES;
    public static final int CREATE_IF_NECESSARY;
    private static final boolean DEBUG_CLOSE_IDLE_CONNECTIONS;
    public static final int ENABLE_LEGACY_COMPATIBILITY_WAL;
    public static final int ENABLE_WRITE_AHEAD_LOGGING;
    private static final int EVENT_DB_CORRUPT;
    public static final int MAX_SQL_CACHE_SIZE;
    public static final int NO_LOCALIZED_COLLATORS;
    public static final int OPEN_READONLY;
    public static final int OPEN_READWRITE;
    private static final int OPEN_READ_MASK;
    public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH;
    private static final java.lang.String TAG;
    private static java.util.WeakHashMap sActiveDatabases;
    private final dalvik.system.CloseGuard mCloseGuardLocked;
    private final android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked;
    private android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked;
    private final android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory;
    private final android.database.DatabaseErrorHandler mErrorHandler;
    private boolean mHasAttachedDbsLocked;
    private final java.lang.Object mLock;
    private final java.lang.ThreadLocal mThreadSession;

    static void <clinit>()
    {
        boolean $z0;
        java.util.WeakHashMap $r0;
        java.lang.String[] $r1;

        <android.database.sqlite.SQLiteDatabase: java.lang.String TAG> = "SQLiteDatabase";

        <android.database.sqlite.SQLiteDatabase: int SQLITE_MAX_LIKE_PATTERN_LENGTH> = 50000;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READ_MASK> = 1;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READWRITE> = 0;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READONLY> = 1;

        <android.database.sqlite.SQLiteDatabase: int NO_LOCALIZED_COLLATORS> = 16;

        <android.database.sqlite.SQLiteDatabase: int MAX_SQL_CACHE_SIZE> = 100;

        <android.database.sqlite.SQLiteDatabase: int EVENT_DB_CORRUPT> = 75004;

        <android.database.sqlite.SQLiteDatabase: int ENABLE_WRITE_AHEAD_LOGGING> = 536870912;

        <android.database.sqlite.SQLiteDatabase: int ENABLE_LEGACY_COMPATIBILITY_WAL> = -2147483648;

        <android.database.sqlite.SQLiteDatabase: int CREATE_IF_NECESSARY> = 268435456;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_ROLLBACK> = 1;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_REPLACE> = 5;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_NONE> = 0;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_IGNORE> = 4;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_FAIL> = 3;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_ABORT> = 2;

        <android.database.sqlite.SQLiteDatabase: boolean $assertionsDisabled> = 0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.debug.sqlite.close_idle_connections", 0);

        <android.database.sqlite.SQLiteDatabase: boolean DEBUG_CLOSE_IDLE_CONNECTIONS> = $z0;

        $r0 = new java.util.WeakHashMap;

        specialinvoke $r0.<java.util.WeakHashMap: void <init>()>();

        <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases> = $r0;

        $r1 = newarray (java.lang.String)[6];

        $r1[0] = "";

        $r1[1] = " OR ROLLBACK ";

        $r1[2] = " OR ABORT ";

        $r1[3] = " OR FAIL ";

        $r1[4] = " OR IGNORE ";

        $r1[5] = " OR REPLACE ";

        <android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler, int, int, long, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1, i2, $i5, $i6, $i8;
        android.database.DatabaseErrorHandler r1, r16;
        long l3, l9;
        java.lang.String r2, r3, r14;
        android.database.sqlite._$$Lambda$RBWjWVyGrOTsQrLCYzJ_G8Uk25Q $r4;
        java.lang.ThreadLocal $r5;
        java.lang.Object $r6;
        dalvik.system.CloseGuard $r7;
        android.database.DefaultDatabaseErrorHandler $r8;
        android.database.sqlite.SQLiteDatabaseConfiguration $r9, $r10, $r11, $r12, $r13, $r18, $r19, $r20, r21;
        boolean $z0, $z1, $z2, $z3;
        byte $b7;
        android.database.sqlite.SQLiteDatabase$CursorFactory r15;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r14 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r15 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r1 := @parameter3: android.database.DatabaseErrorHandler;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        l3 := @parameter6: long;

        r2 := @parameter7: java.lang.String;

        r3 := @parameter8: java.lang.String;

        specialinvoke r0.<android.database.sqlite.SQLiteClosable: void <init>()>();

        $r4 = new android.database.sqlite._$$Lambda$RBWjWVyGrOTsQrLCYzJ_G8Uk25Q;

        specialinvoke $r4.<android.database.sqlite._$$Lambda$RBWjWVyGrOTsQrLCYzJ_G8Uk25Q: void <init>(android.database.sqlite.SQLiteDatabase)>(r0);

        $r5 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($r4);

        r0.<android.database.sqlite.SQLiteDatabase: java.lang.ThreadLocal mThreadSession> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock> = $r6;

        $r7 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked> = $r7;

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory> = r15;

        if r1 == null goto label1;

        r16 = r1;

        goto label2;

     label1:
        $r8 = new android.database.DefaultDatabaseErrorHandler;

        specialinvoke $r8.<android.database.DefaultDatabaseErrorHandler: void <init>()>();

        r16 = $r8;

     label2:
        r0.<android.database.sqlite.SQLiteDatabase: android.database.DatabaseErrorHandler mErrorHandler> = r16;

        $r9 = new android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(java.lang.String,int)>(r14, i0);

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked> = $r9;

        $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotSize> = i1;

        $r10 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r10.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotCount> = i2;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label3;

        $r12 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r12.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotCount> = 0;

        $r13 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r13.<android.database.sqlite.SQLiteDatabaseConfiguration: int lookasideSlotSize> = 0;

     label3:
        l9 = 9223372036854775807L;

        $r11 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z1 = virtualinvoke $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z1 != 0 goto label5;

        $b7 = l3 cmp 0L;

        if $b7 < 0 goto label4;

        l9 = l3;

        goto label5;

     label4:
        l9 = 9223372036854775807L;

        $z2 = <android.database.sqlite.SQLiteDatabase: boolean DEBUG_CLOSE_IDLE_CONNECTIONS>;

        if $z2 == 0 goto label5;

        $i8 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getIdleConnectionTimeout()>();

        l9 = (long) $i8;

     label5:
        $r18 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r18.<android.database.sqlite.SQLiteDatabaseConfiguration: long idleConnectionTimeoutMs> = l9;

        $r19 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r19.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String journalMode> = r2;

        $r20 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r20.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String syncMode> = r3;

        $z3 = staticinvoke <android.database.sqlite.SQLiteCompatibilityWalFlags: boolean isLegacyCompatibilityWalEnabled()>();

        if $z3 == 0 goto label6;

        r21 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i5 = r21.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i6 = $i5 | -2147483648;

        r21.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i6;

     label6:
        return;
    }

    private void beginTransaction(android.database.sqlite.SQLiteTransactionListener, boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        android.database.sqlite.SQLiteSession r1;
        int $i0;
        java.lang.Throwable $r2;
        android.database.sqlite.SQLiteTransactionListener r3;
        byte b1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r3 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

     label2:
        if z0 == 0 goto label3;

        b1 = 2;

        goto label4;

     label3:
        b1 = 1;

     label4:
        $i0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>(0);

        virtualinvoke r1.<android.database.sqlite.SQLiteSession: void beginTransaction(int,android.database.sqlite.SQLiteTransactionListener,int,android.os.CancellationSignal)>(b1, r3, $i0, null);

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label6:
        $r2 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void collectDbStats(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteConnectionPool $r2, $r3;
        java.lang.Throwable $r4;
        java.util.ArrayList r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r5 := @parameter0: java.util.ArrayList;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r2 == null goto label2;

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteConnectionPool: void collectDbStats(java.util.ArrayList)>(r5);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.database.sqlite.SQLiteDatabase$CursorFactory r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r1 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(":memory:", r0, 268435456);

        return $r1;
    }

    public static android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase$OpenParams)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams r0, $r3;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder $r1, $r2;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase$OpenParams;

        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$OpenParams$Builder toBuilder()>();

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>(268435456);

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>();

        $r4 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$OpenParams)>(":memory:", $r3);

        return $r4;
    }

    public static boolean deleteDatabase(java.io.File)
    {
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File,boolean)>(r0, 1);

        return $z0;
    }

    public static boolean deleteDatabase(java.io.File, boolean)
    {
        boolean z0, $z1, $z2, $z3, $z4, $z6, z7, z8, z9, z10, z11;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r8, $r14, $r20, $r26;
        java.lang.String $r3, $r7, $r9, $r13, $r15, $r19, $r21, $r25, $r27, $r31;
        java.io.File $r6, $r12, $r18, $r24, $r32, r33, r38;
        android.database.sqlite.SQLiteDatabase$1 $r30;
        java.io.File[] r39;

        r33 := @parameter0: java.io.File;

        z7 := @parameter1: boolean;

        if r33 == null goto label3;

        z0 = virtualinvoke r33.<java.io.File: boolean delete()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r33.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-journal");

        $r6 = new java.io.File;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        z8 = virtualinvoke $r6.<java.io.File: boolean delete()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r33.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-shm");

        $r12 = new java.io.File;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);

        z9 = virtualinvoke $r12.<java.io.File: boolean delete()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r33.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wal");

        $z1 = 0 | z0;

        $z2 = $z1 | z8;

        $z3 = $z2 | z9;

        $r18 = new java.io.File;

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>($r19);

        $z4 = virtualinvoke $r18.<java.io.File: boolean delete()>();

        z10 = $z3 | $z4;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r33.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wipecheck");

        $r24 = new java.io.File;

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>($r25);

        virtualinvoke $r24.<java.io.File: boolean delete()>();

        r38 = virtualinvoke r33.<java.io.File: java.io.File getParentFile()>();

        z11 = z10;

        if r38 == null goto label2;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r33.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-mj");

        $r30 = new android.database.sqlite.SQLiteDatabase$1;

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<android.database.sqlite.SQLiteDatabase$1: void <init>(java.lang.String)>($r31);

        r39 = virtualinvoke r38.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r30);

        z11 = z10;

        if r39 == null goto label2;

        i0 = lengthof r39;

        i1 = 0;

     label1:
        z11 = z10;

        if i1 >= i0 goto label2;

        $r32 = r39[i1];

        $z6 = virtualinvoke $r32.<java.io.File: boolean delete()>();

        z10 = z10 | $z6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return z11;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file must not be null");

        throw $r1;
    }

    private void dispose(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        dalvik.system.CloseGuard $r1, $r4, $r5;
        java.util.WeakHashMap $r2, r10;
        java.lang.Throwable $r6, $r7;
        java.lang.Object r8;
        android.database.sqlite.SQLiteConnectionPool r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        r8 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r8;

     label01:
        $r1 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        if $r1 == null goto label05;

     label02:
        if z0 == 0 goto label04;

     label03:
        $r5 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label04:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void close()>();

     label05:
        r9 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked> = null;

        exitmonitor r8;

     label06:
        if z0 != 0 goto label12;

        r10 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor r10;

     label07:
        $r2 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        exitmonitor r10;

     label08:
        if r9 == null goto label12;

        virtualinvoke r9.<android.database.sqlite.SQLiteConnectionPool: void close()>();

        goto label12;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r10;

     label11:
        throw $r6;

     label12:
        return;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r8;

     label15:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void dump(android.util.Printer, boolean, boolean, android.util.ArraySet)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0, z1;
        android.util.ArraySet r1;
        java.lang.Object r2;
        android.database.sqlite.SQLiteConnectionPool $r3, $r4;
        java.lang.Throwable $r5;
        android.util.Printer r6;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r6 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: android.util.ArraySet;

        r2 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r3 == null goto label2;

        interfaceinvoke r6.<android.util.Printer: void println(java.lang.String)>("");

        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnectionPool: void dump(android.util.Printer,boolean,android.util.ArraySet)>(r6, z0, r1);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static void dumpAll(android.util.Printer, boolean, boolean)
    {
        android.util.Printer r0;
        boolean z0, z1, $z2;
        int i0, $i1, $i2, i3;
        android.util.ArraySet $r2;
        java.util.ArrayList $r3;
        java.lang.String[] $r4, r11;
        java.lang.Object[] $r5;
        java.io.File $r6;
        java.lang.String $r7;
        java.lang.Object $r8;
        android.database.sqlite.SQLiteDatabase $r9;
        java.util.Iterator r10;

        r0 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.util.ArrayList getActiveDatabases()>();

        r10 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.database.sqlite.SQLiteDatabase) $r8;

        specialinvoke $r9.<android.database.sqlite.SQLiteDatabase: void dump(android.util.Printer,boolean,boolean,android.util.ArraySet)>(r0, z0, z1, $r2);

        goto label1;

     label2:
        $i1 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i1 <= 0 goto label4;

        $i2 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        $r4 = newarray (java.lang.String)[$i2];

        $r5 = virtualinvoke $r2.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r11 = (java.lang.String[]) $r5;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r11);

        i0 = lengthof r11;

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r6 = new java.io.File;

        $r7 = r11[i3];

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        staticinvoke <android.database.sqlite.SQLiteDatabase: void dumpDatabaseDirectory(android.util.Printer,java.io.File,boolean)>(r0, $r6, z1);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    private static void dumpDatabaseDirectory(android.util.Printer, java.io.File, boolean)
    {
        android.util.Printer r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, $i1, i2;
        java.lang.String r1, $r4, $r7, $r14, $r16, $r17, $r18;
        android.database.sqlite.'-$$Lambda$SQLiteDatabase$1FsSJH2q7x3eeDFXCAu9l4piDsE' $r8;
        java.io.File r9, r12;
        java.io.File[] r11;
        java.lang.Object[] $r13;
        long $l3;
        java.lang.Long $r15;
        java.lang.StringBuilder r19;
        java.util.Comparator r20;

        r0 := @parameter0: android.util.Printer;

        r9 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        interfaceinvoke r0.<android.util.Printer: void println(java.lang.String)>("");

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database files in ");

        $r4 = virtualinvoke r9.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<android.util.Printer: void println(java.lang.String)>($r7);

        r11 = virtualinvoke r9.<java.io.File: java.io.File[] listFiles()>();

        if r11 == null goto label6;

        $i1 = lengthof r11;

        if $i1 != 0 goto label1;

        goto label6;

     label1:
        $r8 = <android.database.sqlite._$$Lambda$SQLiteDatabase$1FsSJH2q7x3eeDFXCAu9l4piDsE: android.database.sqlite.'-$$Lambda$SQLiteDatabase$1FsSJH2q7x3eeDFXCAu9l4piDsE' INSTANCE>;

        r20 = (java.util.Comparator) $r8;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r11, r20);

        i0 = lengthof r11;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r12 = r11[i2];

        if z0 == 0 goto label3;

        r1 = virtualinvoke r12.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".db");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".db-wal");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".db-journal");

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-wipecheck");

        if $z4 != 0 goto label3;

        goto label4;

     label3:
        $r13 = newarray (java.lang.Object)[3];

        $r14 = virtualinvoke r12.<java.io.File: java.lang.String getName()>();

        $r13[0] = $r14;

        $l3 = virtualinvoke r12.<java.io.File: long length()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r13[1] = $r15;

        $r16 = virtualinvoke r12.<java.io.File: java.lang.String getAbsolutePath()>();

        $r17 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String getFileTimestamps(java.lang.String)>($r16);

        $r13[2] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("  %-40s %7db %s", $r13);

        interfaceinvoke r0.<android.util.Printer: void println(java.lang.String)>($r18);

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        return;

     label6:
        interfaceinvoke r0.<android.util.Printer: void println(java.lang.String)>("  [none]");

        return;
    }

    public static java.lang.String findEditTable(java.lang.String)
    {
        java.lang.String r0, $r2, $r3;
        int i0, i1;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label5;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(44);

        if i0 <= 0 goto label2;

        if i0 < i1 goto label1;

        if i1 >= 0 goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r3;

     label2:
        if i1 <= 0 goto label4;

        if i1 < i0 goto label3;

        if i0 >= 0 goto label4;

     label3:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        return $r2;

     label4:
        return r0;

     label5:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid tables");

        throw $r1;
    }

    private static java.util.ArrayList getActiveDatabases()
    {
        java.util.WeakHashMap r0, $r2;
        java.util.ArrayList $r1;
        java.util.Set $r3;
        java.lang.Throwable $r4;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor r0;

     label1:
        $r2 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.util.Set keySet()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r3);

        exitmonitor r0;

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static java.util.ArrayList getDbStats()
    {
        java.util.Iterator r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteDatabase $r5;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.util.ArrayList getActiveDatabases()>();

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.database.sqlite.SQLiteDatabase) $r4;

        specialinvoke $r5.<android.database.sqlite.SQLiteDatabase: void collectDbStats(java.util.ArrayList)>($r2);

        goto label1;

     label2:
        return $r2;
    }

    public static java.lang.String getFileTimestamps(java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.nio.file.FileSystem $r1;
        java.lang.String[] $r2;
        java.nio.file.Path $r3;
        java.nio.file.LinkOption[] $r4;
        java.nio.file.attribute.FileTime $r6, $r9, $r12;
        java.lang.Throwable $r14;
        java.lang.String r15, r17;
        java.nio.file.attribute.BasicFileAttributes r16;

        r15 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();

        $r2 = newarray (java.lang.String)[0];

        $r3 = virtualinvoke $r1.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(r15, $r2);

        $r4 = newarray (java.nio.file.LinkOption)[0];

        r16 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>($r3, class "Ljava/nio/file/attribute/BasicFileAttributes;", $r4);

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ctime=");

        $r6 = interfaceinvoke r16.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mtime=");

        $r9 = interfaceinvoke r16.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" atime=");

        $r12 = interfaceinvoke r16.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        r17 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r17;

     label3:
        $r14 := @caughtexception;

        return "[unable to obtain timestamp]";

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static boolean isMainThread()
    {
        android.os.Looper r0, $r1;
        boolean z0;

        r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r0 == null goto label1;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r0 != $r1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isReadOnlyLocked()
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, $i1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i0 = $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static int lambda$dumpDatabaseDirectory$0(java.io.File, java.io.File)
    {
        java.io.File r0, r1;
        java.lang.String $r2, $r3;
        int $i0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    private void open()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        java.lang.RuntimeException $r9;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void openInner()>();

     label2:
        goto label6;

     label3:
        $r2 := @caughtexception;

        goto label8;

     label4:
        $r9 := @caughtexception;

     label5:
        $z0 = staticinvoke <android.database.sqlite.SQLiteDatabaseCorruptException: boolean isCorruptException(java.lang.Throwable)>($r9);

        if $z0 == 0 goto label7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", "Database corruption detected in open()", $r9);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void openInner()>();

     label6:
        return;

     label7:
        throw $r9;

     label8:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open database \'");

        $r5 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r8, $r2);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void close()>();

        throw $r2;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
        catch android.database.sqlite.SQLiteException from label5 to label6 with label3;
        catch android.database.sqlite.SQLiteException from label7 to label8 with label3;
    }

    public static android.database.sqlite.SQLiteDatabase openDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$OpenParams)
    {
        java.io.File r0;
        android.database.sqlite.SQLiteDatabase$OpenParams r1;
        java.lang.String $r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$OpenParams;

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$OpenParams)>($r2, r1);

        return $r3;
    }

    public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        java.lang.String r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        int i0;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter2: int;

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r0, r1, i0, null);

        return $r2;
    }

    public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler)
    {
        android.database.sqlite.SQLiteDatabase$CursorFactory r0;
        int i0;
        android.database.DatabaseErrorHandler r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter2: int;

        r1 := @parameter3: android.database.DatabaseErrorHandler;

        $r2 = new android.database.sqlite.SQLiteDatabase;

        specialinvoke $r2.<android.database.sqlite.SQLiteDatabase: void <init>(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler,int,int,long,java.lang.String,java.lang.String)>(r3, i0, r0, r1, -1, -1, -1L, null, null);

        specialinvoke $r2.<android.database.sqlite.SQLiteDatabase: void open()>();

        return $r2;
    }

    private static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$OpenParams)
    {
        android.database.sqlite.SQLiteDatabase$OpenParams r0;
        android.database.sqlite.SQLiteDatabase $r1;
        int $i0, $i1, $i2;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r2;
        android.database.DatabaseErrorHandler $r3;
        long $l3;
        java.lang.String $r4, $r5, r6;
        boolean z0;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: android.database.sqlite.SQLiteDatabase$OpenParams;

        if r0 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "OpenParams cannot be null");

        $r1 = new android.database.sqlite.SQLiteDatabase;

        $i0 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: int access$000(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory access$100(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler access$200(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        $i1 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: int access$300(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        $i2 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: int access$400(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        $l3 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: long access$500(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        $r4 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String access$600(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        $r5 = staticinvoke <android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String access$700(android.database.sqlite.SQLiteDatabase$OpenParams)>(r0);

        specialinvoke $r1.<android.database.sqlite.SQLiteDatabase: void <init>(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler,int,int,long,java.lang.String,java.lang.String)>(r6, $i0, $r2, $r3, $i1, $i2, $l3, $r4, $r5);

        specialinvoke $r1.<android.database.sqlite.SQLiteDatabase: void open()>();

        return $r1;
    }

    private void openInner()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        android.database.sqlite.SQLiteConnectionPool $r2;
        dalvik.system.CloseGuard $r3;
        java.util.WeakHashMap $r4, r9;
        java.lang.Throwable $r6, $r7;
        java.lang.Object r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r8 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r8;

     label01:
        $r1 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r2 = staticinvoke <android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool open(android.database.sqlite.SQLiteDatabaseConfiguration)>($r1);

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked> = $r2;

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        exitmonitor r8;

     label02:
        r9 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor r9;

     label03:
        $r4 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);

        exitmonitor r9;

     label04:
        return;

     label05:
        $r6 := @caughtexception;

     label06:
        exitmonitor r9;

     label07:
        throw $r6;

     label08:
        exitmonitor r8;

     label09:
        throw $r7;

     label10:
        $r7 := @caughtexception;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.io.File r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        java.lang.String $r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r2, r1);

        return $r3;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.lang.String r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r0, r1, 268435456, null);

        return $r2;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        java.lang.String r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        android.database.DatabaseErrorHandler r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r2 := @parameter2: android.database.DatabaseErrorHandler;

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r0, r1, 268435456, r2);

        return $r3;
    }

    public static int releaseMemory()
    {
        int $i0;

        $i0 = staticinvoke <android.database.sqlite.SQLiteGlobal: int releaseMemory()>();

        return $i0;
    }

    private void throwIfNotOpenLocked()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteConnectionPool $r2;
        java.lang.StringBuilder $r3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r5;
        java.lang.String $r6, $r10;
        java.lang.IllegalStateException $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r2 == null goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The database \'");

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r6 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not open.");

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public static void wipeDetected(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r4, $r11, $r17, $r18, $r20, r22;
        java.lang.StringBuilder $r2, $r14;
        java.lang.Throwable $r21;

        r0 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DB wipe detected: package=");

        $r4 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reason=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String getFileTimestamps(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" checkfile ");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wipecheck");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String getFileTimestamps(java.lang.String)>($r17);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new java.lang.Throwable;

        specialinvoke $r21.<java.lang.Throwable: void <init>(java.lang.String)>("STACKTRACE");

        staticinvoke <android.database.sqlite.SQLiteDatabase: void wtfAsSystemServer(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r20, $r21);

        return;
    }

    static void wtfAsSystemServer(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0, r1;
        java.lang.Throwable r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r0, r1, r2);

        staticinvoke <android.content.ContentResolver: void onDbCorruption(java.lang.String,java.lang.String,java.lang.Throwable)>(r0, r1, r2);

        return;
    }

    private boolean yieldIfContendedHelper(boolean, long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0;
        android.database.sqlite.SQLiteSession $r2;
        java.lang.Throwable $r3;
        boolean z0, z1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        z1 = virtualinvoke $r2.<android.database.sqlite.SQLiteSession: boolean yieldTransaction(long,boolean,android.os.CancellationSignal)>(l0, z0, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return z1;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void beginTransaction()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(null, 1);

        return;
    }

    public void beginTransactionNonExclusive()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(null, 0);

        return;
    }

    public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(r1, 1);

        return;
    }

    public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(r1, 0);

        return;
    }

    public android.database.sqlite.SQLiteStatement compileStatement(java.lang.String) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteStatement $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r3 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r1 = new android.database.sqlite.SQLiteStatement;

        specialinvoke $r1.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, r3, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $r1;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    android.database.sqlite.SQLiteSession createSession()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteSession $r2;
        java.lang.Throwable $r3;
        android.database.sqlite.SQLiteConnectionPool r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        exitmonitor r1;

     label2:
        $r2 = new android.database.sqlite.SQLiteSession;

        specialinvoke $r2.<android.database.sqlite.SQLiteSession: void <init>(android.database.sqlite.SQLiteConnectionPool)>(r4);

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int delete(java.lang.String, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r8, r13, r15;
        java.lang.String[] r2;
        android.database.sqlite.SQLiteStatement r3;
        java.lang.StringBuilder r4, r14;
        int i0;
        boolean $z0;
        java.lang.Throwable $r11, $r12;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        r3 = new android.database.sqlite.SQLiteStatement;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label03;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r15 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        goto label04;

     label03:
        r15 = "";

     label04:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r8 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r8, r2);

     label05:
        i0 = virtualinvoke r3.<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label06:
        virtualinvoke r3.<android.database.sqlite.SQLiteStatement: void close()>();

     label07:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return i0;

     label08:
        $r11 := @caughtexception;

     label09:
        virtualinvoke r3.<android.database.sqlite.SQLiteStatement: void close()>();

     label10:
        throw $r11;

     label11:
        $r12 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void disableWriteAheadLogging()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2, $r3, $r6, r8, r9;
        android.database.sqlite.SQLiteConnectionPool $r4;
        java.lang.RuntimeException $r5;
        java.lang.Throwable $r7;
        boolean z0, z1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i0 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

     label02:
        z0 = 1;

        $i1 = 536870912 & i0;

        if $i1 == 0 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        $i2 = -2147483648 & i0;

        if $i2 == 0 goto label05;

        goto label06;

     label05:
        z0 = 0;

     label06:
        if z1 != 0 goto label09;

        if z0 != 0 goto label09;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i3 = r8.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i4 = $i3 & -536870913;

        r8.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i4;

        r9 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i5 = r9.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i6 = $i5 & 2147483647;

        r9.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i6;

     label10:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r3);

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r5 := @caughtexception;

     label14:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = i0;

     label15:
        throw $r5;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.RuntimeException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public boolean enableWriteAheadLogging()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3, $r4, $r5, $r8, r16, r17;
        int $i0, $i1, $i2, $i3, $i6, $i7;
        boolean $z0, $z1, $z2, $z3;
        android.database.sqlite.SQLiteConnectionPool $r6;
        java.lang.String $r9, $r12;
        java.lang.Throwable $r13;
        java.lang.RuntimeException $r14;
        java.lang.StringBuilder r15;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 1;

     label03:
        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        if $z0 == 0 goto label05;

        exitmonitor r1;

     label04:
        return 0;

     label05:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z1 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z1 == 0 goto label07;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SQLiteDatabase", "can\'t enable WAL for memory databases.");

        exitmonitor r1;

     label06:
        return 0;

     label07:
        $z2 = r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked>;

        if $z2 == 0 goto label10;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteDatabase", 3);

        if $z3 == 0 goto label08;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this database: ");

        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r9 = $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has attached databases. can\'t  enable WAL.");

        $r12 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteDatabase", $r12);

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        r16 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i2 = r16.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i3 = 536870912 | $i2;

        r16.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i3;

     label11:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r5);

     label12:
        exitmonitor r1;

     label13:
        return 1;

     label14:
        $r14 := @caughtexception;

     label15:
        r17 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i6 = r17.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i7 = $i6 & -536870913;

        r17.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i7;

     label16:
        throw $r14;

     label17:
        $r13 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.RuntimeException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void endTransaction()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteSession $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteSession: void endTransaction(android.os.CancellationSignal)>(null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void execPerConnectionSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object[] r1, r16;
        int i0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3, $r5, $r8, $r11;
        java.util.ArrayList $r4, $r6, $r12;
        android.util.Pair $r7;
        android.database.sqlite.SQLiteConnectionPool $r9;
        java.lang.RuntimeException $r10;
        java.lang.Throwable $r14;
        java.lang.String r15;
        java.lang.Object r17;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.Object[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r15);

        r1 = staticinvoke <android.database.DatabaseUtils: java.lang.Object[] deepCopyOf(java.lang.Object[])>(r16);

        r17 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r17;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList perConnectionSql>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r6 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList perConnectionSql>;

        $r7 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r15, r1);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label02:
        $r9 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r8);

     label03:
        exitmonitor r17;

     label04:
        return;

     label05:
        $r10 := @caughtexception;

     label06:
        $r11 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r12 = $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList perConnectionSql>;

        virtualinvoke $r12.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label07:
        throw $r10;

     label08:
        $r14 := @caughtexception;

     label09:
        exitmonitor r17;

     label10:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.RuntimeException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void execSQL(java.lang.String) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])>(r1, null);

        return;
    }

    public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        if r2 == null goto label1;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])>(r1, r2);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty bindArgs");

        throw $r3;
    }

    public int executeSql(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        android.database.sqlite.SQLiteConnectionPool $r1, $r2, $r6;
        boolean $z0, z1;
        java.lang.Throwable $r3, $r4, $r5, $r7, $r8;
        java.lang.String r9;
        java.lang.Object[] r10;
        java.lang.Object r11;
        android.database.sqlite.SQLiteStatement r13;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.Object[];

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        i0 = staticinvoke <android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>(r9);

     label02:
        if i0 != 3 goto label14;

        z1 = 0;

     label03:
        r11 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r11;

     label04:
        $z0 = r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked>;

        if $z0 != 0 goto label07;

        r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked> = 1;

     label05:
        z1 = 1;

     label06:
        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteConnectionPool: void disableIdleConnectionHandler()>();

     label07:
        exitmonitor r11;

     label08:
        if z1 == 0 goto label14;

     label09:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>();

     label10:
        goto label14;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r11;

     label13:
        throw $r4;

     label14:
        r13 = new android.database.sqlite.SQLiteStatement;

        specialinvoke r13.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, r9, r10);

     label15:
        i1 = virtualinvoke r13.<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label16:
        virtualinvoke r13.<android.database.sqlite.SQLiteStatement: void close()>();

     label17:
        if i0 != 8 goto label19;

     label18:
        $r1 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptions()>();

     label19:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return i1;

     label20:
        $r3 := @caughtexception;

     label21:
        virtualinvoke r13.<android.database.sqlite.SQLiteStatement: void close()>();

     label22:
        goto label25;

     label23:
        $r8 := @caughtexception;

     label24:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label25:
        throw $r3;

     label26:
        $r5 := @caughtexception;

        if i0 != 8 goto label28;

     label27:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptions()>();

     label28:
        throw $r5;

     label29:
        $r7 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label28 to label29 with label29;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List getAttachedDbs()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.util.Pair r2, r13;
        java.util.ArrayList $r3;
        android.database.sqlite.SQLiteConnectionPool $r4;
        boolean $z0, $z1;
        java.lang.String $r5, $r6, $r8;
        android.database.sqlite.SQLiteDatabaseConfiguration $r7;
        java.lang.Throwable $r9, $r10, $r11;
        java.lang.Object r12;
        android.database.Cursor r14, r15;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r12 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r12;

     label01:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r4 != null goto label03;

        exitmonitor r12;

     label02:
        return null;

     label03:
        $z0 = r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked>;

        if $z0 != 0 goto label05;

        r13 = new android.util.Pair;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r8 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        specialinvoke r13.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("main", $r8);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

        exitmonitor r12;

     label04:
        return $r3;

     label05:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

        exitmonitor r12;

     label06:
        r14 = null;

     label07:
        r15 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("pragma database_list;", null);

     label08:
        r14 = r15;

     label09:
        $z1 = interfaceinvoke r15.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label17;

     label10:
        r14 = r15;

     label11:
        r2 = new android.util.Pair;

     label12:
        r14 = r15;

     label13:
        $r5 = interfaceinvoke r15.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r6 = interfaceinvoke r15.<android.database.Cursor: java.lang.String getString(int)>(2);

        specialinvoke r2.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

     label14:
        r14 = r15;

     label15:
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label16:
        goto label08;

     label17:
        if r15 == null goto label19;

     label18:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label19:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return $r3;

     label20:
        $r11 := @caughtexception;

        if r14 == null goto label22;

     label21:
        interfaceinvoke r14.<android.database.Cursor: void close()>();

     label22:
        throw $r11;

     label23:
        $r9 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r9;

     label24:
        $r10 := @caughtexception;

     label25:
        exitmonitor r12;

     label26:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    java.lang.String getLabel()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r4 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        exitmonitor r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public long getMaximumSize()
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0, $l1, $l2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA max_page_count;", null);

        $l1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        $l2 = $l1 * l0;

        return $l2;
    }

    public long getPageSize()
    {
        android.database.sqlite.SQLiteDatabase r0;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA page_size;", null);

        return $l0;
    }

    public final java.lang.String getPath()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r4 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        exitmonitor r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Map getSyncedTables()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.util.HashMap $r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(0);

        return $r1;
    }

    int getThreadDefaultConnectionFlags(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0, $z1;
        byte b0, b1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 2;

     label2:
        b1 = b0;

        $z1 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean isMainThread()>();

        if $z1 == 0 goto label3;

        b1 = b0 | 4;

     label3:
        return b1;
    }

    android.database.sqlite.SQLiteSession getThreadSession()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        android.database.sqlite.SQLiteSession $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.ThreadLocal mThreadSession>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (android.database.sqlite.SQLiteSession) $r2;

        return $r3;
    }

    public int getVersion()
    {
        android.database.sqlite.SQLiteDatabase r0;
        long $l0;
        java.lang.Long $r1;
        int $i1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA user_version;", null);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $i1 = virtualinvoke $r1.<java.lang.Long: int intValue()>();

        return $i1;
    }

    public boolean inTransaction()
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        android.database.sqlite.SQLiteSession $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteSession: boolean hasTransaction()>();

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return z0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long insert(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.content.ContentValues r1;
        long l0;
        android.database.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r7, r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r1 := @parameter2: android.content.ContentValues;

     label1:
        l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r7, r8, r1, 0);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r6, $r2);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2;
        android.content.ContentValues r3;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentValues;

        $l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r1, r2, r3, 0);

        return $l0;
    }

    public long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.StringBuilder r1, r34;
        java.util.Iterator r2;
        java.lang.String r3, $r6, $r13, $r16, r27, r28, r32, r33;
        long l0;
        java.lang.String[] $r5;
        java.util.Set $r17;
        boolean $z0, $z1;
        java.lang.Object $r21, $r24;
        java.lang.Throwable $r25, $r26;
        android.content.ContentValues r29;
        int i1, i2, i3, i4;
        java.lang.Object[] r30, r31;
        android.database.sqlite.SQLiteStatement r35;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r27 := @parameter0: java.lang.String;

        r28 := @parameter1: java.lang.String;

        r29 := @parameter2: android.content.ContentValues;

        i1 := @parameter3: int;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT");

        $r5 = <android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES>;

        $r6 = $r5[i1];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTO ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label02:
        r30 = null;

        if r29 == null goto label05;

     label03:
        $z1 = virtualinvoke r29.<android.content.ContentValues: boolean isEmpty()>();

        if $z1 != 0 goto label05;

        i2 = virtualinvoke r29.<android.content.ContentValues: int size()>();

     label04:
        goto label06;

     label05:
        i2 = 0;

     label06:
        if i2 <= 0 goto label22;

     label07:
        r31 = newarray (java.lang.Object)[i2];

     label08:
        i3 = 0;

     label09:
        $r17 = virtualinvoke r29.<android.content.ContentValues: java.util.Set keySet()>();

        r2 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r21 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r21;

     label11:
        if i3 <= 0 goto label12;

        r32 = ",";

        goto label13;

     label12:
        r32 = "";

     label13:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r24 = virtualinvoke r29.<android.content.ContentValues: java.lang.Object get(java.lang.String)>(r3);

        r31[i3] = $r24;

     label14:
        i3 = i3 + 1;

        goto label10;

     label15:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" VALUES (");

     label16:
        i4 = 0;

     label17:
        if i4 >= i2 goto label21;

        if i4 <= 0 goto label18;

        r33 = ",?";

        goto label19;

     label18:
        r33 = "?";

     label19:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

     label20:
        i4 = i4 + 1;

        goto label17;

     label21:
        r30 = r31;

        goto label23;

     label22:
        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") VALUES (NULL");

        $r13 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label23:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        r35 = new android.database.sqlite.SQLiteStatement;

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r35.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r16, r30);

     label24:
        l0 = virtualinvoke r35.<android.database.sqlite.SQLiteStatement: long executeInsert()>();

     label25:
        virtualinvoke r35.<android.database.sqlite.SQLiteStatement: void close()>();

     label26:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return l0;

     label27:
        $r26 := @caughtexception;

     label28:
        virtualinvoke r35.<android.database.sqlite.SQLiteStatement: void close()>();

     label29:
        throw $r26;

     label30:
        $r25 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r25;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.lang.Throwable from label10 to label11 with label30;
        catch java.lang.Throwable from label13 to label14 with label30;
        catch java.lang.Throwable from label15 to label16 with label30;
        catch java.lang.Throwable from label19 to label20 with label30;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label23 to label24 with label30;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label29 to label30 with label30;
    }

    public boolean isDatabaseIntegrityOk()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.util.Pair r1, r29;
        java.lang.String $r2, $r3, $r6, $r7, $r9, $r10, $r14, r23;
        java.lang.Object $r4, $r5, $r8, r15;
        boolean $z0;
        java.lang.Throwable $r11, $r12;
        android.database.sqlite.SQLiteException $r13;
        int i0, $i1;
        android.database.sqlite.SQLiteStatement r20, r22;
        java.lang.StringBuilder r26, r30, r31;
        java.lang.IllegalStateException r27;
        java.util.ArrayList r28;
        java.util.List r32, r33, r34;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        r15 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>();

     label02:
        if r15 == null goto label03;

        goto label08;

     label03:
        r27 = new java.lang.IllegalStateException;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("databaselist for: ");

        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" couldn\'t be retrieved. probably because the database is closed");

        $r3 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw r27;

     label04:
        $r11 := @caughtexception;

        goto label50;

     label05:
        $r13 := @caughtexception;

     label06:
        r28 = new java.util.ArrayList;

        r15 = r28;

        specialinvoke r28.<java.util.ArrayList: void <init>()>();

     label07:
        r29 = new android.util.Pair;

        $r14 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        specialinvoke r29.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("main", $r14);

        r32 = (java.util.List) r28;

        interfaceinvoke r32.<java.util.List: boolean add(java.lang.Object)>(r29);

     label08:
        i0 = 0;

     label09:
        r33 = (java.util.List) r15;

        $i1 = interfaceinvoke r33.<java.util.List: int size()>();

        if i0 >= $i1 goto label49;

        r34 = (java.util.List) r15;

        $r4 = interfaceinvoke r34.<java.util.List: java.lang.Object get(int)>(i0);

        r1 = (android.util.Pair) $r4;

     label10:
        r20 = null;

     label11:
        r30 = new java.lang.StringBuilder;

     label12:
        r20 = null;

     label13:
        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

     label14:
        r20 = null;

     label15:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

     label16:
        r20 = null;

     label17:
        $r5 = r1.<android.util.Pair: java.lang.Object first>;

        $r6 = (java.lang.String) $r5;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label18:
        r20 = null;

     label19:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".integrity_check(1);");

     label20:
        r20 = null;

     label21:
        $r7 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        r22 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r7);

     label22:
        r20 = r22;

     label23:
        r23 = virtualinvoke r22.<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>();

     label24:
        r20 = r22;

     label25:
        $z0 = virtualinvoke r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ok");

        if $z0 != 0 goto label43;

     label26:
        r20 = r22;

     label27:
        r31 = new java.lang.StringBuilder;

     label28:
        r20 = r22;

     label29:
        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

     label30:
        r20 = r22;

     label31:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA integrity_check on ");

     label32:
        r20 = r22;

     label33:
        $r8 = r1.<android.util.Pair: java.lang.Object second>;

        $r9 = (java.lang.String) $r8;

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label34:
        r20 = r22;

     label35:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned: ");

     label36:
        r20 = r22;

     label37:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

     label38:
        r20 = r22;

     label39:
        $r10 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SQLiteDatabase", $r10);

     label40:
        if r22 == null goto label42;

     label41:
        virtualinvoke r22.<android.database.sqlite.SQLiteStatement: void close()>();

     label42:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return 0;

     label43:
        if r22 == null goto label45;

     label44:
        virtualinvoke r22.<android.database.sqlite.SQLiteStatement: void close()>();

     label45:
        i0 = i0 + 1;

        goto label09;

     label46:
        $r12 := @caughtexception;

        if r20 == null goto label48;

     label47:
        virtualinvoke r20.<android.database.sqlite.SQLiteStatement: void close()>();

     label48:
        throw $r12;

     label49:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return 1;

     label50:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r11;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch android.database.sqlite.SQLiteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label11 to label12 with label46;
        catch java.lang.Throwable from label13 to label14 with label46;
        catch java.lang.Throwable from label15 to label16 with label46;
        catch java.lang.Throwable from label17 to label18 with label46;
        catch java.lang.Throwable from label19 to label20 with label46;
        catch java.lang.Throwable from label21 to label22 with label46;
        catch java.lang.Throwable from label23 to label24 with label46;
        catch java.lang.Throwable from label25 to label26 with label46;
        catch java.lang.Throwable from label27 to label28 with label46;
        catch java.lang.Throwable from label29 to label30 with label46;
        catch java.lang.Throwable from label31 to label32 with label46;
        catch java.lang.Throwable from label33 to label34 with label46;
        catch java.lang.Throwable from label35 to label36 with label46;
        catch java.lang.Throwable from label37 to label38 with label46;
        catch java.lang.Throwable from label39 to label40 with label46;
        catch java.lang.Throwable from label41 to label42 with label04;
        catch java.lang.Throwable from label44 to label45 with label04;
        catch java.lang.Throwable from label47 to label48 with label04;
        catch java.lang.Throwable from label48 to label49 with label04;
    }

    public boolean isDbLockedByCurrentThread()
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        android.database.sqlite.SQLiteSession $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteSession: boolean hasConnection()>();

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return z0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isDbLockedByOtherThreads()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        return 0;
    }

    public boolean isInMemoryDatabase()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        boolean z0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        z0 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isOpen()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteConnectionPool $r3;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r3 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isReadOnly()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isWriteAheadLoggingEnabled()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        int $i0, $i1;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void markTableSyncable(java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void markTableSyncable(java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2, r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public boolean needUpgrade(int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if i0 <= $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected void onAllReferencesReleased()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void dispose(boolean)>(0);

        return;
    }

    void onCorruption()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        android.database.DatabaseErrorHandler $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(75004, $r1);

        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.DatabaseErrorHandler mErrorHandler>;

        interfaceinvoke $r2.<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3, r5, r6, r7;
        java.lang.String[] r2, r4;
        android.database.Cursor $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, r1, r2, r3, r4, r5, r6, r7, null);

        return $r8;
    }

    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3, r5, r6, r7, r8;
        java.lang.String[] r2, r4;
        android.database.Cursor $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, r1, r2, r3, r4, r5, r6, r7, r8);

        return $r9;
    }

    public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        java.lang.String r1, r3, r5, r6, r7, r8;
        java.lang.String[] r2, r4;
        android.database.Cursor $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(null, z0, r1, r2, r3, r4, r5, r6, r7, r8, null);

        return $r9;
    }

    public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        java.lang.String r1, r3, r5, r6, r7, r8;
        java.lang.String[] r2, r4;
        android.os.CancellationSignal r9;
        android.database.Cursor $r10;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        r9 := @parameter9: android.os.CancellationSignal;

        $r10 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(null, z0, r1, r2, r3, r4, r5, r6, r7, r8, r9);

        return $r10;
    }

    public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        boolean z0;
        java.lang.String r2, r4, r6, r7, r8, r9;
        java.lang.String[] r3, r5;
        android.database.Cursor $r10;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String[];

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        r9 := @parameter9: java.lang.String;

        $r10 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r1, z0, r2, r3, r4, r5, r6, r7, r8, r9, null);

        return $r10;
    }

    public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        java.lang.String r1, r2, r4, r5, r6, r7, $r9, r13;
        java.lang.String[] r3, r12;
        android.os.CancellationSignal r8;
        java.lang.Throwable $r10;
        android.database.sqlite.SQLiteDatabase$CursorFactory r11;
        android.database.Cursor r14;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r11 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r12 := @parameter3: java.lang.String[];

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String[];

        r4 := @parameter6: java.lang.String;

        r5 := @parameter7: java.lang.String;

        r6 := @parameter8: java.lang.String;

        r7 := @parameter9: java.lang.String;

        r8 := @parameter10: android.os.CancellationSignal;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        r13 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(z0, r1, r12, r2, r4, r5, r6, r7);

     label2:
        $r9 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>(r1);

        r14 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r11, r13, r3, $r9, r8);

     label3:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return r14;

     label4:
        $r10 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.database.Cursor rawQuery(java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.database.Cursor $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(null, r1, r2, null, null);

        return $r3;
    }

    public android.database.Cursor rawQuery(java.lang.String, java.lang.String[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.os.CancellationSignal r3;
        android.database.Cursor $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.CancellationSignal;

        $r4 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(null, r1, r2, null, r3);

        return $r4;
    }

    public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        java.lang.String r2, r4;
        java.lang.String[] r3;
        android.database.Cursor $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.String;

        $r5 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, null);

        return $r5;
    }

    public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        android.os.CancellationSignal r4;
        android.database.sqlite.SQLiteDirectCursorDriver r5;
        java.lang.Throwable $r6;
        android.database.sqlite.SQLiteDatabase$CursorFactory r7;
        android.database.Cursor r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r7 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.os.CancellationSignal;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        r5 = new android.database.sqlite.SQLiteDirectCursorDriver;

        specialinvoke r5.<android.database.sqlite.SQLiteDirectCursorDriver: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r0, r1, r3, r4);

     label2:
        if r7 == null goto label3;

        goto label4;

     label3:
        r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory>;

     label4:
        r8 = interfaceinvoke r5.<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>(r7, r2);

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return r8;

     label6:
        $r6 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void reopenReadWrite()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2, $r3, $r4, $r5, $r9;
        android.database.sqlite.SQLiteConnectionPool $r6;
        java.lang.Throwable $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i0 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i1 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i2 = $i1 & -2;

        $i3 = $i2 | 0;

        $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i3;

     label04:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r5);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r8 := @caughtexception;

     label08:
        $r9 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = i0;

     label09:
        throw $r8;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.RuntimeException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public long replace(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.content.ContentValues r1;
        long l0;
        android.database.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r7, r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r1 := @parameter2: android.content.ContentValues;

     label1:
        l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r7, r8, r1, 5);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r6, $r2);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2;
        android.content.ContentValues r3;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentValues;

        $l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r1, r2, r3, 5);

        return $l0;
    }

    public void setCustomAggregateFunction(java.lang.String, java.util.function.BinaryOperator) throws android.database.sqlite.SQLiteException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4, $r7, $r11;
        android.util.ArrayMap $r5, $r12;
        android.database.sqlite.SQLiteConnectionPool $r8;
        java.lang.Throwable $r9;
        java.lang.RuntimeException $r10;
        java.lang.String r14;
        java.util.function.BinaryOperator r15;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: java.util.function.BinaryOperator;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r14);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r15);

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customAggregateFunctions>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r15);

     label02:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r7);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r10 := @caughtexception;

     label06:
        $r11 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r12 = $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customAggregateFunctions>;

        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r14);

     label07:
        throw $r10;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.RuntimeException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setCustomScalarFunction(java.lang.String, java.util.function.UnaryOperator) throws android.database.sqlite.SQLiteException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4, $r7, $r11;
        android.util.ArrayMap $r5, $r12;
        android.database.sqlite.SQLiteConnectionPool $r8;
        java.lang.Throwable $r9;
        java.lang.RuntimeException $r10;
        java.lang.String r14;
        java.util.function.UnaryOperator r15;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: java.util.function.UnaryOperator;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r14);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r15);

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customScalarFunctions>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r15);

     label02:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r7);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r10 := @caughtexception;

     label06:
        $r11 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r12 = $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: android.util.ArrayMap customScalarFunctions>;

        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r14);

     label07:
        throw $r10;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.RuntimeException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setForeignKeyConstraintsEnabled(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3, $r4, $r5, r9;
        boolean $z0, z1, z2;
        android.database.sqlite.SQLiteConnectionPool $r6;
        java.lang.Throwable $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z1 := @parameter0: boolean;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z0 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z0 != z1 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled> = z1;

     label04:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r5);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r8 := @caughtexception;

     label08:
        r9 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

     label09:
        if z1 != 0 goto label10;

        z2 = 1;

        goto label11;

     label10:
        z2 = 0;

     label11:
        r9.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled> = z2;

     label12:
        throw $r8;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.RuntimeException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setLocale(java.util.Locale)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.util.Locale r2, r11;
        java.lang.IllegalArgumentException $r3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4, $r5, $r6, $r10;
        android.database.sqlite.SQLiteConnectionPool $r7;
        java.lang.Throwable $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r11 := @parameter0: java.util.Locale;

        if r11 == null goto label11;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r2 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = r11;

     label02:
        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r7.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r6);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r9 := @caughtexception;

     label06:
        $r10 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r10.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = r2;

     label07:
        throw $r9;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r8;

     label11:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("locale must not be null.");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.RuntimeException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setLockingEnabled(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        return;
    }

    public void setMaxSqlCacheSize(int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        java.lang.Object r1;
        java.lang.IllegalStateException $r2;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3, $r4, $r5, $r8;
        android.database.sqlite.SQLiteConnectionPool $r6;
        java.lang.RuntimeException $r7;
        java.lang.Throwable $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter0: int;

        if i0 > 100 goto label11;

        if i0 < 0 goto label11;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i1 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = i0;

     label02:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r5);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r7 := @caughtexception;

     label06:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = i1;

     label07:
        throw $r7;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

     label11:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("expected value between 0 and 100");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.RuntimeException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public long setMaximumSize(long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0, l1, l2, $l3, $l5, $l6, l7;
        byte $b4;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        l2 = l0 / l1;

        l7 = l2;

        $l3 = l0 % l1;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        l7 = l2 + 1L;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA max_page_count = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l7);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $l5 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, $r5, null);

        $l6 = $l5 * l1;

        return $l6;
    }

    public void setPageSize(long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter0: long;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA page_size = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        return;
    }

    public void setTransactionSuccessful()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteSession $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteSession: void setTransactionSuccessful()>();

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setVersion(int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA user_version = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        return;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteDatabase: ");

        $r4 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3;
        android.content.ContentValues r2;
        java.lang.String[] r4;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $i0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>(r1, r2, r3, r4, 0);

        return $i0;
    }

    public int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r6, $r10, $r15, $r18, r26, r28;
        java.lang.String[] r2, $r9;
        java.lang.StringBuilder r3;
        java.lang.Object[] r4;
        java.util.Iterator r5;
        java.lang.IllegalArgumentException $r7;
        boolean $z0, $z1, $z2;
        int $i0, $i1, i2, i3, i4, i5, i6, i7;
        java.util.Set $r14;
        java.lang.Object $r19, $r22;
        java.lang.Throwable $r24, $r25;
        android.content.ContentValues r27;
        android.database.sqlite.SQLiteStatement r29;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r26 := @parameter0: java.lang.String;

        r27 := @parameter1: android.content.ContentValues;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String[];

        i2 := @parameter4: int;

        if r27 == null goto label23;

        $z0 = virtualinvoke r27.<android.content.ContentValues: boolean isEmpty()>();

        if $z0 != 0 goto label23;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r9 = <android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES>;

        $r10 = $r9[i2];

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        i3 = virtualinvoke r27.<android.content.ContentValues: int size()>();

     label02:
        if r2 != null goto label03;

        i4 = i3;

        goto label04;

     label03:
        $i0 = lengthof r2;

        i4 = $i0 + i3;

     label04:
        r4 = newarray (java.lang.Object)[i4];

     label05:
        i5 = 0;

     label06:
        $r14 = virtualinvoke r27.<android.content.ContentValues: java.util.Set keySet()>();

        r5 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r19;

     label08:
        if i5 <= 0 goto label09;

        r28 = ",";

        goto label10;

     label09:
        r28 = "";

     label10:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r22 = virtualinvoke r27.<android.content.ContentValues: java.lang.Object get(java.lang.String)>(r6);

        r4[i5] = $r22;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

     label11:
        i5 = i5 + 1;

        goto label07;

     label12:
        if r2 == null goto label14;

        i6 = i3;

     label13:
        if i6 >= i4 goto label14;

        $i1 = i6 - i3;

        $r18 = r2[$i1];

        r4[i6] = $r18;

        i6 = i6 + 1;

        goto label13;

     label14:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label15;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label15:
        r29 = new android.database.sqlite.SQLiteStatement;

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r29.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r15, r4);

     label16:
        i7 = virtualinvoke r29.<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label17:
        virtualinvoke r29.<android.database.sqlite.SQLiteStatement: void close()>();

     label18:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return i7;

     label19:
        $r25 := @caughtexception;

     label20:
        virtualinvoke r29.<android.database.sqlite.SQLiteStatement: void close()>();

     label21:
        throw $r25;

     label22:
        $r24 := @caughtexception;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw $r24;

     label23:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty values");

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    public void validateSql(java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        android.os.CancellationSignal r2;
        android.database.sqlite.SQLiteSession $r3;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.CancellationSignal;

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        $i0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>(1);

        virtualinvoke $r3.<android.database.sqlite.SQLiteSession: void prepare(java.lang.String,int,android.os.CancellationSignal,android.database.sqlite.SQLiteStatementInfo)>(r1, $i0, r2, null);

        return;
    }

    public boolean yieldIfContended()
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(0, -1L);

        return $z0;
    }

    public boolean yieldIfContendedSafely()
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(1, -1L);

        return $z0;
    }

    public boolean yieldIfContendedSafely(long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter0: long;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(1, l0);

        return $z0;
    }
}
