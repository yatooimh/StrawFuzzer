public abstract class android.database.sqlite.SQLiteOpenHelper extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private android.database.sqlite.SQLiteDatabase mDatabase;
    private boolean mIsInitializing;
    private final int mMinimumSupportedVersion;
    private final java.lang.String mName;
    private final int mNewVersion;
    private android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroid/database/sqlite/SQLiteOpenHelper;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG> = $r1;

        return;
    }

    private void <init>(android.content.Context, java.lang.String, int, int, android.database.sqlite.SQLiteDatabase$OpenParams$Builder)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.String r1, $r8;
        int i0, i1, $i2;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r2;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        android.content.Context r9;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r9 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        if i0 < 1 goto label1;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext> = r9;

        r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName> = r1;

        r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion> = i0;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, i1);

        r0.<android.database.sqlite.SQLiteOpenHelper: int mMinimumSupportedVersion> = $i2;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void setOpenParamsBuilder(android.database.sqlite.SQLiteDatabase$OpenParams$Builder)>(r2);

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version must be >= 1, was ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void <init>(android.content.Context, java.lang.String, int, android.database.sqlite.SQLiteDatabase$OpenParams)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        int i0;
        android.database.sqlite.SQLiteDatabase$OpenParams r3;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder $r4;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.database.sqlite.SQLiteDatabase$OpenParams;

        $r4 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$OpenParams$Builder toBuilder()>();

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,int,int,android.database.sqlite.SQLiteDatabase$OpenParams$Builder)>(r1, r2, i0, 0, $r4);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r1, r2, r3, i0, null);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, int, android.database.DatabaseErrorHandler)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0, i1;
        android.database.DatabaseErrorHandler r4;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder $r5, $r6, $r8;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r4 := @parameter5: android.database.DatabaseErrorHandler;

        $r5 = new android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        specialinvoke $r5.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>()>();

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,int,int,android.database.sqlite.SQLiteDatabase$OpenParams$Builder)>(r1, r2, i0, i1, $r5);

        $r6 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>(r3);

        $r8 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setErrorHandler(android.database.DatabaseErrorHandler)>(r4);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0;
        android.database.DatabaseErrorHandler r4;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        r4 := @parameter4: android.database.DatabaseErrorHandler;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,int,android.database.DatabaseErrorHandler)>(r1, r2, r3, i0, 0, r4);

        return;
    }

    private android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.io.File r1, r55;
        java.lang.StringBuilder r3, r58, r61, r63;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10;
        java.lang.IllegalStateException $r4, r57;
        java.lang.String $r5, $r6, $r9, $r11, $r14, $r20, $r22, $r23, $r25, $r29, $r37, $r40, r54, r62;
        android.content.Context $r7;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder $r8, $r31, $r41, $r42;
        android.database.sqlite.SQLiteDatabase $r30, $r33, $r34, $r46, r47, r48, r49, r50, r52, r53, r56;
        android.database.sqlite.SQLiteDatabase$OpenParams $r32, $r43, r51;
        android.database.SQLException $r35;
        java.lang.Throwable $r44, $r45;
        android.database.sqlite.SQLiteException r60;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        z0 := @parameter0: boolean;

        r47 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if r47 == null goto label003;

        $z5 = virtualinvoke r47.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z5 != 0 goto label001;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = null;

        goto label003;

     label001:
        if z0 == 0 goto label002;

        $r34 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z6 = virtualinvoke $r34.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z6 != 0 goto label003;

     label002:
        $r33 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        return $r33;

     label003:
        $z7 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z7 != 0 goto label148;

        r48 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        r49 = r48;

     label004:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 1;

     label005:
        if r48 == null goto label010;

        r50 = r48;

        if z0 == 0 goto label040;

        r50 = r48;

        r49 = r48;

     label006:
        $z4 = virtualinvoke r48.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z4 == 0 goto label040;

     label007:
        r49 = r48;

     label008:
        virtualinvoke r48.<android.database.sqlite.SQLiteDatabase: void reopenReadWrite()>();

     label009:
        r50 = r48;

        goto label040;

     label010:
        r49 = r48;

     label011:
        $r5 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        if $r5 != null goto label015;

     label012:
        r49 = r48;

     label013:
        $r31 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        $r32 = virtualinvoke $r31.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>();

        r50 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase$OpenParams)>($r32);

     label014:
        goto label040;

     label015:
        r49 = r48;

     label016:
        $r7 = r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext>;

        $r6 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        r1 = virtualinvoke $r7.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>($r6);

     label017:
        r49 = r48;

     label018:
        $r8 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        r51 = virtualinvoke $r8.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>();

     label019:
        r52 = r48;

        r49 = r48;

     label020:
        r53 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>(r1, r51);

     label021:
        r52 = r53;

        r49 = r53;

     label022:
        $r9 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.database.sqlite.SQLiteOpenHelper: void setFilePermissionsForDb(java.lang.String)>($r9);

     label023:
        r50 = r53;

        goto label040;

     label024:
        $r35 := @caughtexception;

        if z0 != 0 goto label144;

        r49 = r52;

     label025:
        r54 = <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

     label026:
        r49 = r52;

     label027:
        r3 = new java.lang.StringBuilder;

     label028:
        r49 = r52;

     label029:
        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

     label030:
        r49 = r52;

     label031:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t open ");

     label032:
        r49 = r52;

     label033:
        $r37 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

     label034:
        r49 = r52;

     label035:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for writing (will try read-only):");

     label036:
        r49 = r52;

     label037:
        $r40 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r54, $r40, $r35);

     label038:
        r49 = r52;

     label039:
        $r41 = virtualinvoke r51.<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$OpenParams$Builder toBuilder()>();

        $r42 = virtualinvoke $r41.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>(1);

        $r43 = virtualinvoke $r42.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>();

        r50 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>(r1, $r43);

     label040:
        r49 = r50;

     label041:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)>(r50);

     label042:
        r49 = r50;

     label043:
        i0 = virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

     label044:
        r49 = r50;

     label045:
        $i9 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        if i0 == $i9 goto label122;

     label046:
        r49 = r50;

     label047:
        $z2 = virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z2 != 0 goto label100;

     label048:
        if i0 <= 0 goto label084;

        r49 = r50;

     label049:
        $i7 = r0.<android.database.sqlite.SQLiteOpenHelper: int mMinimumSupportedVersion>;

        if i0 >= $i7 goto label084;

     label050:
        r49 = r50;

     label051:
        r55 = new java.io.File;

     label052:
        r49 = r50;

     label053:
        $r23 = virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        specialinvoke r55.<java.io.File: void <init>(java.lang.String)>($r23);

     label054:
        r49 = r50;

     label055:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onBeforeDelete(android.database.sqlite.SQLiteDatabase)>(r50);

     label056:
        r49 = r50;

     label057:
        virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: void close()>();

     label058:
        r49 = r50;

     label059:
        $z3 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>(r55);

        if $z3 == 0 goto label066;

     label060:
        r49 = r50;

     label061:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

     label062:
        r49 = r50;

     label063:
        r56 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(z0);

     label064:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if r50 == null goto label065;

        $r30 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if r50 == $r30 goto label065;

        virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: void close()>();

     label065:
        return r56;

     label066:
        r49 = r50;

     label067:
        r57 = new java.lang.IllegalStateException;

     label068:
        r49 = r50;

     label069:
        r58 = new java.lang.StringBuilder;

     label070:
        r49 = r50;

     label071:
        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

     label072:
        r49 = r50;

     label073:
        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete obsolete database ");

     label074:
        r49 = r50;

     label075:
        $r25 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

     label076:
        r49 = r50;

     label077:
        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with version ");

     label078:
        r49 = r50;

     label079:
        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label080:
        r49 = r50;

     label081:
        $r29 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r57.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

     label082:
        r49 = r50;

     label083:
        throw r57;

     label084:
        r49 = r50;

     label085:
        virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label086:
        if i0 != 0 goto label089;

     label087:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>(r50);

     label088:
        goto label092;

     label089:
        $i4 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        if i0 <= $i4 goto label091;

        $i6 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>(r50, i0, $i6);

     label090:
        goto label092;

     label091:
        $i5 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>(r50, i0, $i5);

     label092:
        $i10 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>($i10);

        virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label093:
        r49 = r50;

     label094:
        virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label095:
        goto label122;

     label096:
        $r44 := @caughtexception;

        r49 = r50;

     label097:
        virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label098:
        r49 = r50;

     label099:
        throw $r44;

     label100:
        r49 = r50;

     label101:
        r60 = new android.database.sqlite.SQLiteException;

     label102:
        r49 = r50;

     label103:
        r61 = new java.lang.StringBuilder;

     label104:
        r49 = r50;

     label105:
        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

     label106:
        r49 = r50;

     label107:
        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t upgrade read-only database from version ");

     label108:
        r49 = r50;

     label109:
        $i2 = virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

     label110:
        r49 = r50;

     label111:
        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

     label112:
        r49 = r50;

     label113:
        $i3 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

     label114:
        r49 = r50;

     label115:
        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

     label116:
        r49 = r50;

     label117:
        $r20 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

     label118:
        r49 = r50;

     label119:
        $r22 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r60.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r22);

     label120:
        r49 = r50;

     label121:
        throw r60;

     label122:
        r49 = r50;

     label123:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>(r50);

     label124:
        r49 = r50;

     label125:
        $z1 = virtualinvoke r50.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z1 == 0 goto label140;

     label126:
        r49 = r50;

     label127:
        r62 = <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

     label128:
        r49 = r50;

     label129:
        r63 = new java.lang.StringBuilder;

     label130:
        r49 = r50;

     label131:
        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

     label132:
        r49 = r50;

     label133:
        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opened ");

     label134:
        r49 = r50;

     label135:
        $r11 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label136:
        r49 = r50;

     label137:
        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in read-only mode");

     label138:
        r49 = r50;

     label139:
        $r14 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r62, $r14);

     label140:
        r49 = r50;

     label141:
        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = r50;

     label142:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if r50 == null goto label143;

        goto label143;

     label143:
        return r50;

     label144:
        r49 = r52;

     label145:
        throw $r35;

     label146:
        $r45 := @caughtexception;

        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if r49 == null goto label147;

        $r46 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if r49 == $r46 goto label147;

        virtualinvoke r49.<android.database.sqlite.SQLiteDatabase: void close()>();

     label147:
        throw $r45;

     label148:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getDatabase called recursively");

        throw $r4;

        catch java.lang.Throwable from label004 to label005 with label146;
        catch java.lang.Throwable from label006 to label007 with label146;
        catch java.lang.Throwable from label008 to label009 with label146;
        catch java.lang.Throwable from label011 to label012 with label146;
        catch java.lang.Throwable from label013 to label014 with label146;
        catch java.lang.Throwable from label016 to label017 with label146;
        catch java.lang.Throwable from label018 to label019 with label146;
        catch android.database.SQLException from label020 to label021 with label024;
        catch java.lang.Throwable from label020 to label021 with label146;
        catch android.database.SQLException from label022 to label023 with label024;
        catch java.lang.Throwable from label022 to label023 with label146;
        catch java.lang.Throwable from label025 to label026 with label146;
        catch java.lang.Throwable from label027 to label028 with label146;
        catch java.lang.Throwable from label029 to label030 with label146;
        catch java.lang.Throwable from label031 to label032 with label146;
        catch java.lang.Throwable from label033 to label034 with label146;
        catch java.lang.Throwable from label035 to label036 with label146;
        catch java.lang.Throwable from label037 to label038 with label146;
        catch java.lang.Throwable from label039 to label040 with label146;
        catch java.lang.Throwable from label041 to label042 with label146;
        catch java.lang.Throwable from label043 to label044 with label146;
        catch java.lang.Throwable from label045 to label046 with label146;
        catch java.lang.Throwable from label047 to label048 with label146;
        catch java.lang.Throwable from label049 to label050 with label146;
        catch java.lang.Throwable from label051 to label052 with label146;
        catch java.lang.Throwable from label053 to label054 with label146;
        catch java.lang.Throwable from label055 to label056 with label146;
        catch java.lang.Throwable from label057 to label058 with label146;
        catch java.lang.Throwable from label059 to label060 with label146;
        catch java.lang.Throwable from label061 to label062 with label146;
        catch java.lang.Throwable from label063 to label064 with label146;
        catch java.lang.Throwable from label067 to label068 with label146;
        catch java.lang.Throwable from label069 to label070 with label146;
        catch java.lang.Throwable from label071 to label072 with label146;
        catch java.lang.Throwable from label073 to label074 with label146;
        catch java.lang.Throwable from label075 to label076 with label146;
        catch java.lang.Throwable from label077 to label078 with label146;
        catch java.lang.Throwable from label079 to label080 with label146;
        catch java.lang.Throwable from label081 to label082 with label146;
        catch java.lang.Throwable from label083 to label084 with label146;
        catch java.lang.Throwable from label085 to label086 with label146;
        catch java.lang.Throwable from label087 to label088 with label096;
        catch java.lang.Throwable from label089 to label090 with label096;
        catch java.lang.Throwable from label091 to label092 with label096;
        catch java.lang.Throwable from label092 to label093 with label096;
        catch java.lang.Throwable from label094 to label095 with label146;
        catch java.lang.Throwable from label097 to label098 with label146;
        catch java.lang.Throwable from label099 to label100 with label146;
        catch java.lang.Throwable from label101 to label102 with label146;
        catch java.lang.Throwable from label103 to label104 with label146;
        catch java.lang.Throwable from label105 to label106 with label146;
        catch java.lang.Throwable from label107 to label108 with label146;
        catch java.lang.Throwable from label109 to label110 with label146;
        catch java.lang.Throwable from label111 to label112 with label146;
        catch java.lang.Throwable from label113 to label114 with label146;
        catch java.lang.Throwable from label115 to label116 with label146;
        catch java.lang.Throwable from label117 to label118 with label146;
        catch java.lang.Throwable from label119 to label120 with label146;
        catch java.lang.Throwable from label121 to label122 with label146;
        catch java.lang.Throwable from label123 to label124 with label146;
        catch java.lang.Throwable from label125 to label126 with label146;
        catch java.lang.Throwable from label127 to label128 with label146;
        catch java.lang.Throwable from label129 to label130 with label146;
        catch java.lang.Throwable from label131 to label132 with label146;
        catch java.lang.Throwable from label133 to label134 with label146;
        catch java.lang.Throwable from label135 to label136 with label146;
        catch java.lang.Throwable from label137 to label138 with label146;
        catch java.lang.Throwable from label139 to label140 with label146;
        catch java.lang.Throwable from label141 to label142 with label146;
        catch java.lang.Throwable from label145 to label146 with label146;
    }

    private static void setFilePermissionsForDb(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>(r0, 432, -1, -1);

        return;
    }

    private void setOpenParamsBuilder(android.database.sqlite.SQLiteDatabase$OpenParams$Builder)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder> = r1;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>(268435456);

        return;
    }

    public void close()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabase $r1, $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        $z0 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z0 != 0 goto label3;

        $r1 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 == null goto label2;

        $r2 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z1 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void close()>();

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Closed during initialization");

        throw r5;

     label4:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public java.lang.String getDatabaseName()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.String $r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        $r1 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        return $r1;
    }

    public android.database.sqlite.SQLiteDatabase getReadableDatabase()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.Throwable $r1;
        android.database.sqlite.SQLiteDatabase r2;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        r2 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.database.sqlite.SQLiteDatabase getWritableDatabase()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.Throwable $r1;
        android.database.sqlite.SQLiteDatabase r2;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        r2 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(1);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onBeforeDelete(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public void onConfigure(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public abstract void onCreate(android.database.sqlite.SQLiteDatabase);

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        int i0, i1;
        java.lang.StringBuilder $r1;
        android.database.sqlite.SQLiteException $r6;
        java.lang.String $r7;
        android.database.sqlite.SQLiteDatabase r8;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r8 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t downgrade database from version ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = new android.database.sqlite.SQLiteException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public abstract void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int);

    public void setIdleConnectionTimeout(long)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        long l0;
        android.database.sqlite.SQLiteDatabase $r1, $r4;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder $r2;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException r6;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $r1 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 == null goto label4;

        $r4 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z0 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 != 0 goto label3;

     label2:
        goto label4;

     label3:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection timeout setting cannot be changed after opening the database");

        throw r6;

     label4:
        $r2 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setIdleConnectionTimeout(long)>(l0);

        exitmonitor r0;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setLookasideConfig(int, int)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        int i0, i1;
        android.database.sqlite.SQLiteDatabase $r1, $r4;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder $r2;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException r6;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label1:
        $r1 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 == null goto label4;

        $r4 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z0 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 != 0 goto label3;

     label2:
        goto label4;

     label3:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Lookaside memory config cannot be changed after opening the database");

        throw r6;

     label4:
        $r2 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setLookasideConfig(int,int)>(i0, i1);

        exitmonitor r0;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setOpenParams(android.database.sqlite.SQLiteDatabase$OpenParams)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder r1;
        android.database.sqlite.SQLiteDatabase $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        android.database.sqlite.SQLiteDatabase$OpenParams r6;
        java.lang.IllegalStateException r7;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r6 := @parameter0: android.database.sqlite.SQLiteDatabase$OpenParams;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        entermonitor r0;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r3 == null goto label4;

        $r4 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z0 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 != 0 goto label3;

     label2:
        goto label4;

     label3:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("OpenParams cannot be set after opening the database");

        throw r7;

     label4:
        r1 = new android.database.sqlite.SQLiteDatabase$OpenParams$Builder;

        specialinvoke r1.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>(android.database.sqlite.SQLiteDatabase$OpenParams)>(r6);

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void setOpenParamsBuilder(android.database.sqlite.SQLiteDatabase$OpenParams$Builder)>(r1);

        exitmonitor r0;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        boolean z0, $z1, $z2, $z3;
        android.database.sqlite.SQLiteDatabase$OpenParams$Builder $r2, $r10, $r11;
        android.database.sqlite.SQLiteDatabase $r4, $r5, $r6, $r7, $r8;
        java.lang.Throwable $r9;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        $r2 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        $z1 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: boolean isWriteAheadLoggingEnabled()>();

        if $z1 == z0 goto label07;

        $r4 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r4 == null goto label06;

        $r5 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z2 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z2 == 0 goto label06;

        $r6 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z3 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z3 != 0 goto label06;

     label02:
        if z0 == 0 goto label05;

     label03:
        $r8 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>();

     label04:
        goto label06;

     label05:
        $r7 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>();

     label06:
        $r10 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        virtualinvoke $r10.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void setWriteAheadLoggingEnabled(boolean)>(z0);

     label07:
        $r11 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$OpenParams$Builder mOpenParamsBuilder>;

        virtualinvoke $r11.<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)>(-2147483648);

        exitmonitor r0;

     label08:
        return;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }
}
