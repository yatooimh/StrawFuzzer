public abstract class android.database.sqlite.SQLiteProgram extends android.database.sqlite.SQLiteClosable
{
    private static final java.lang.String[] EMPTY_STRING_ARRAY;
    private final java.lang.Object[] mBindArgs;
    private final java.lang.String[] mColumnNames;
    private final android.database.sqlite.SQLiteDatabase mDatabase;
    private final int mNumParameters;
    private final boolean mReadOnly;
    private final java.lang.String mSql;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];

        <android.database.sqlite.SQLiteProgram: java.lang.String[] EMPTY_STRING_ARRAY> = $r0;

        return;
    }

    void <init>(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteProgram r0;
        java.lang.Object[] r1, r21;
        android.os.CancellationSignal r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r9;
        java.lang.String $r10, $r13, r16, r17;
        android.database.sqlite.SQLiteStatementInfo $r11;
        android.database.sqlite.SQLiteSession $r12;
        boolean $z0, z1;
        java.lang.String[] $r14, $r19;
        android.database.sqlite.SQLiteDatabase r15;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        r15 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r16 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        r2 := @parameter3: android.os.CancellationSignal;

        specialinvoke r0.<android.database.sqlite.SQLiteClosable: void <init>()>();

        r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase> = r15;

        r17 = virtualinvoke r16.<java.lang.String: java.lang.String trim()>();

        r0.<android.database.sqlite.SQLiteProgram: java.lang.String mSql> = r17;

        i7 = staticinvoke <android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>(r17);

        if i7 == 4 goto label3;

        if i7 == 5 goto label3;

        if i7 == 6 goto label3;

        z1 = 1;

        if i7 != 1 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r11 = new android.database.sqlite.SQLiteStatementInfo;

        specialinvoke $r11.<android.database.sqlite.SQLiteStatementInfo: void <init>()>();

        $r12 = virtualinvoke r15.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        $r13 = r0.<android.database.sqlite.SQLiteProgram: java.lang.String mSql>;

        $i5 = virtualinvoke r15.<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>(z1);

        virtualinvoke $r12.<android.database.sqlite.SQLiteSession: void prepare(java.lang.String,int,android.os.CancellationSignal,android.database.sqlite.SQLiteStatementInfo)>($r13, $i5, r2, $r11);

        $z0 = $r11.<android.database.sqlite.SQLiteStatementInfo: boolean readOnly>;

        r0.<android.database.sqlite.SQLiteProgram: boolean mReadOnly> = $z0;

        $r14 = $r11.<android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames>;

        r0.<android.database.sqlite.SQLiteProgram: java.lang.String[] mColumnNames> = $r14;

        $i6 = $r11.<android.database.sqlite.SQLiteStatementInfo: int numParameters>;

        r0.<android.database.sqlite.SQLiteProgram: int mNumParameters> = $i6;

        goto label4;

     label3:
        r0.<android.database.sqlite.SQLiteProgram: boolean mReadOnly> = 0;

        $r19 = <android.database.sqlite.SQLiteProgram: java.lang.String[] EMPTY_STRING_ARRAY>;

        r0.<android.database.sqlite.SQLiteProgram: java.lang.String[] mColumnNames> = $r19;

        r0.<android.database.sqlite.SQLiteProgram: int mNumParameters> = 0;

     label4:
        if r1 == null goto label6;

        $i2 = lengthof r1;

        $i1 = r0.<android.database.sqlite.SQLiteProgram: int mNumParameters>;

        if $i2 > $i1 goto label5;

        goto label6;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many bind arguments.  ");

        $i3 = lengthof r1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments were provided but the statement needs ");

        $i4 = r0.<android.database.sqlite.SQLiteProgram: int mNumParameters>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments.");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label6:
        i8 = r0.<android.database.sqlite.SQLiteProgram: int mNumParameters>;

        if i8 == 0 goto label7;

        r21 = newarray (java.lang.Object)[i8];

        r0.<android.database.sqlite.SQLiteProgram: java.lang.Object[] mBindArgs> = r21;

        if r1 == null goto label8;

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r21, 0, $i0);

        goto label8;

     label7:
        r0.<android.database.sqlite.SQLiteProgram: java.lang.Object[] mBindArgs> = null;

     label8:
        return;
    }

    private void bind(int, java.lang.Object)
    {
        android.database.sqlite.SQLiteProgram r0;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        java.lang.Object[] $r9;
        java.lang.Object r10;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.Object;

        if i0 < 1 goto label1;

        $i2 = r0.<android.database.sqlite.SQLiteProgram: int mNumParameters>;

        if i0 > $i2 goto label1;

        $r9 = r0.<android.database.sqlite.SQLiteProgram: java.lang.Object[] mBindArgs>;

        $i3 = i0 - 1;

        $r9[$i3] = r10;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot bind argument at index ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because the index is out of range.  The statement has ");

        $i1 = r0.<android.database.sqlite.SQLiteProgram: int mNumParameters>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameters.");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void bindAllArgsAsStrings(java.lang.String[])
    {
        android.database.sqlite.SQLiteProgram r0;
        java.lang.String[] r1;
        int $i0, i1;
        java.lang.String $r2;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label2;

        i1 = lengthof r1;

     label1:
        if i1 == 0 goto label2;

        $i0 = i1 - 1;

        $r2 = r1[$i0];

        virtualinvoke r0.<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>(i1, $r2);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public void bindBlob(int, byte[])
    {
        android.database.sqlite.SQLiteProgram r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        byte[] r7;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        i0 := @parameter0: int;

        r7 := @parameter1: byte[];

        if r7 == null goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteProgram: void bind(int,java.lang.Object)>(i0, r7);

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the bind value at index ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void bindDouble(int, double)
    {
        android.database.sqlite.SQLiteProgram r0;
        int i0;
        double d0;
        java.lang.Double $r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke r0.<android.database.sqlite.SQLiteProgram: void bind(int,java.lang.Object)>(i0, $r1);

        return;
    }

    public void bindLong(int, long)
    {
        android.database.sqlite.SQLiteProgram r0;
        int i0;
        long l1;
        java.lang.Long $r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke r0.<android.database.sqlite.SQLiteProgram: void bind(int,java.lang.Object)>(i0, $r1);

        return;
    }

    public void bindNull(int)
    {
        android.database.sqlite.SQLiteProgram r0;
        int i0;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        i0 := @parameter0: int;

        specialinvoke r0.<android.database.sqlite.SQLiteProgram: void bind(int,java.lang.Object)>(i0, null);

        return;
    }

    public void bindString(int, java.lang.String)
    {
        android.database.sqlite.SQLiteProgram r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, r7;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        if r7 == null goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteProgram: void bind(int,java.lang.Object)>(i0, r7);

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the bind value at index ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void clearBindings()
    {
        android.database.sqlite.SQLiteProgram r0;
        java.lang.Object[] r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        r1 = r0.<android.database.sqlite.SQLiteProgram: java.lang.Object[] mBindArgs>;

        if r1 == null goto label1;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r1, null);

     label1:
        return;
    }

    final java.lang.Object[] getBindArgs()
    {
        android.database.sqlite.SQLiteProgram r0;
        java.lang.Object[] $r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        $r1 = r0.<android.database.sqlite.SQLiteProgram: java.lang.Object[] mBindArgs>;

        return $r1;
    }

    final java.lang.String[] getColumnNames()
    {
        android.database.sqlite.SQLiteProgram r0;
        java.lang.String[] $r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        $r1 = r0.<android.database.sqlite.SQLiteProgram: java.lang.String[] mColumnNames>;

        return $r1;
    }

    protected final int getConnectionFlags()
    {
        android.database.sqlite.SQLiteProgram r0;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase $r1;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        $r1 = r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z0 = r0.<android.database.sqlite.SQLiteProgram: boolean mReadOnly>;

        $i0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>($z0);

        return $i0;
    }

    final android.database.sqlite.SQLiteDatabase getDatabase()
    {
        android.database.sqlite.SQLiteProgram r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        $r1 = r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        return $r1;
    }

    protected final android.database.sqlite.SQLiteSession getSession()
    {
        android.database.sqlite.SQLiteProgram r0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.database.sqlite.SQLiteSession $r2;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        $r1 = r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        return $r2;
    }

    final java.lang.String getSql()
    {
        android.database.sqlite.SQLiteProgram r0;
        java.lang.String $r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        $r1 = r0.<android.database.sqlite.SQLiteProgram: java.lang.String mSql>;

        return $r1;
    }

    public final int getUniqueId()
    {
        android.database.sqlite.SQLiteProgram r0;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        return -1;
    }

    protected void onAllReferencesReleased()
    {
        android.database.sqlite.SQLiteProgram r0;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        virtualinvoke r0.<android.database.sqlite.SQLiteProgram: void clearBindings()>();

        return;
    }

    protected final void onCorruption()
    {
        android.database.sqlite.SQLiteProgram r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: android.database.sqlite.SQLiteProgram;

        $r1 = r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        return;
    }
}
