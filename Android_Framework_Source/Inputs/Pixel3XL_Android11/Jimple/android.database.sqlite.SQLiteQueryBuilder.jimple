public class android.database.sqlite.SQLiteQueryBuilder extends java.lang.Object
{
    private static final int STRICT_COLUMNS;
    private static final int STRICT_GRAMMAR;
    private static final int STRICT_PARENTHESES;
    private static final java.lang.String TAG;
    private static final java.util.regex.Pattern sAggregationPattern;
    private boolean mDistinct;
    private android.database.sqlite.SQLiteDatabase$CursorFactory mFactory;
    private java.util.Collection mProjectionGreylist;
    private java.util.Map mProjectionMap;
    private int mStrictFlags;
    private java.lang.String mTables;
    private java.lang.StringBuilder mWhereClause;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <android.database.sqlite.SQLiteQueryBuilder: java.lang.String TAG> = "SQLiteQueryBuilder";

        <android.database.sqlite.SQLiteQueryBuilder: int STRICT_PARENTHESES> = 1;

        <android.database.sqlite.SQLiteQueryBuilder: int STRICT_GRAMMAR> = 4;

        <android.database.sqlite.SQLiteQueryBuilder: int STRICT_COLUMNS> = 2;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)(AVG|COUNT|MAX|MIN|SUM|TOTAL|GROUP_CONCAT)\\((.+)\\)");

        <android.database.sqlite.SQLiteQueryBuilder: java.util.regex.Pattern sAggregationPattern> = $r0;

        return;
    }

    public void <init>()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap> = null;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Collection mProjectionGreylist> = null;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables> = "";

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = null;

        r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct> = 0;

        r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = null;

        return;
    }

    private static void appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label1:
        return;
    }

    public static void appendColumns(java.lang.StringBuilder, java.lang.String[])
    {
        java.lang.StringBuilder r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        if r2 == null goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        return;
    }

    public static java.lang.String buildQueryString(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        boolean z0, $z1, $z2;
        java.lang.String r0, r2, r3, r4, r5, r6, $r15;
        java.lang.String[] r1;
        java.lang.StringBuilder $r8;
        int $i0;
        java.lang.IllegalArgumentException $r14;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: java.lang.String;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HAVING clauses are only permitted when using a groupBy clause");

        throw $r14;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        if z0 == 0 goto label3;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTINCT ");

     label3:
        if r1 == null goto label4;

        $i0 = lengthof r1;

        if $i0 == 0 goto label4;

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>($r8, r1);

        goto label5;

     label4:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* ");

     label5:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FROM ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r8, " WHERE ", r2);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r8, " GROUP BY ", r3);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r8, " HAVING ", r4);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r8, " ORDER BY ", r5);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r8, " LIMIT ", r6);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private java.lang.String computeSingleProjection(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r5, $r6, $r10, $r11, r15, r17, r18, r19;
        java.util.regex.Matcher r2, $r9;
        java.lang.Object $r3, $r7, $r14;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.StringBuilder $r4;
        java.util.regex.Pattern $r8, $r12;
        java.util.Map $r13, r16;
        java.util.Collection r20;
        java.util.Iterator r21;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r15 := @parameter0: java.lang.String;

        r16 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        if r16 != null goto label1;

        return r15;

     label1:
        $r3 = interfaceinvoke r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        r1 = (java.lang.String) $r3;

        r17 = r1;

        r18 = null;

        r19 = r15;

        if r1 != null goto label2;

        $r12 = <android.database.sqlite.SQLiteQueryBuilder: java.util.regex.Pattern sAggregationPattern>;

        r2 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r15);

        r17 = r1;

        r18 = null;

        r19 = r15;

        $z4 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z4 == 0 goto label2;

        r18 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r19 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r13 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        r17 = (java.lang.String) $r14;

     label2:
        if r17 == null goto label3;

        $r11 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String maybeWithOperator(java.lang.String,java.lang.String)>(r18, r17);

        return $r11;

     label3:
        $i0 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        if $i0 != 0 goto label5;

        $z2 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>(" AS ");

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>(" as ");

        if $z3 == 0 goto label5;

     label4:
        $r10 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String maybeWithOperator(java.lang.String,java.lang.String)>(r18, r19);

        return $r10;

     label5:
        r20 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Collection mProjectionGreylist>;

        if r20 == null goto label9;

        r21 = interfaceinvoke r20.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        z5 = 0;

        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.regex.Pattern) $r7;

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r19);

        $z1 = virtualinvoke $r9.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label7;

        z5 = 1;

        goto label8;

     label7:
        goto label6;

     label8:
        if z5 == 0 goto label9;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allowing abusive custom column: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", $r5);

        $r6 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String maybeWithOperator(java.lang.String,java.lang.String)>(r18, r19);

        return $r6;

     label9:
        return null;
    }

    private java.lang.String computeSingleProjectionOrThrow(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r6, r7;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r7 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String computeSingleProjection(java.lang.String)>(r1);

        if r7 == null goto label1;

        return r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid column ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void enforceStrictColumns(android.content.ContentValues)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.util.Map $r1, $r4;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9, r12;
        android.content.ContentValues r10;
        android.util.ArrayMap r11;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r10 := @parameter0: android.content.ContentValues;

        $r1 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "No projection map defined");

        r11 = virtualinvoke r10.<android.content.ContentValues: android.util.ArrayMap getValues()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r11.<android.util.ArrayMap: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = virtualinvoke r11.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r12 = (java.lang.String) $r3;

        $r4 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r12);

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid column ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label3:
        return;
    }

    private void enforceStrictColumns(java.lang.String[])
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String[] r1;
        java.util.Map $r2;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r2, "No projection map defined");

        virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String[] computeProjection(java.lang.String[])>(r1);

        return;
    }

    private void enforceStrictGrammar(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, r2, r3, r4, r5;
        android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI $r6, $r7, $r8, $r9, $r10;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r6 = new android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI;

        specialinvoke $r6.<android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI: void <init>(android.database.sqlite.SQLiteQueryBuilder)>(r0);

        staticinvoke <android.database.sqlite.SQLiteTokenizer: void tokenize(java.lang.String,int,java.util.function.Consumer)>(r1, 0, $r6);

        $r7 = new android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI;

        specialinvoke $r7.<android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI: void <init>(android.database.sqlite.SQLiteQueryBuilder)>(r0);

        staticinvoke <android.database.sqlite.SQLiteTokenizer: void tokenize(java.lang.String,int,java.util.function.Consumer)>(r2, 0, $r7);

        $r8 = new android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI;

        specialinvoke $r8.<android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI: void <init>(android.database.sqlite.SQLiteQueryBuilder)>(r0);

        staticinvoke <android.database.sqlite.SQLiteTokenizer: void tokenize(java.lang.String,int,java.util.function.Consumer)>(r3, 0, $r8);

        $r9 = new android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI;

        specialinvoke $r9.<android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI: void <init>(android.database.sqlite.SQLiteQueryBuilder)>(r0);

        staticinvoke <android.database.sqlite.SQLiteTokenizer: void tokenize(java.lang.String,int,java.util.function.Consumer)>(r4, 0, $r9);

        $r10 = new android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI;

        specialinvoke $r10.<android.database.sqlite._$$Lambda$SQLiteQueryBuilder$W2yQ6UjYGqGIu6HEomKgdgvGNKI: void <init>(android.database.sqlite.SQLiteQueryBuilder)>(r0);

        staticinvoke <android.database.sqlite.SQLiteTokenizer: void tokenize(java.lang.String,int,java.util.function.Consumer)>(r5, 0, $r10);

        return;
    }

    private void enforceStrictToken(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r7, r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        java.util.Locale $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        byte b1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isTableOrColumn(java.lang.String)>(r1);

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = staticinvoke <android.database.sqlite.SQLiteTokenizer: boolean isFunction(java.lang.String)>(r1);

        if $z1 == 0 goto label02;

        return;

     label02:
        $z2 = staticinvoke <android.database.sqlite.SQLiteTokenizer: boolean isType(java.lang.String)>(r1);

        if $z2 == 0 goto label03;

        return;

     label03:
        z12 = staticinvoke <android.database.sqlite.SQLiteTokenizer: boolean isKeyword(java.lang.String)>(r1);

        $r2 = <java.util.Locale: java.util.Locale US>;

        r8 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        b1 = -1;

        $i0 = virtualinvoke r8.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1852692228: goto label13;
            case -1770483422: goto label12;
            case -1734422544: goto label11;
            case 2166698: goto label10;
            case 68091487: goto label09;
            case 72438683: goto label08;
            case 75468590: goto label07;
            case 82560199: goto label06;
            case 2123962405: goto label05;
            default: goto label04;
        };

     label04:
        goto label14;

     label05:
        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("HAVING");

        if $z3 == 0 goto label04;

        b1 = 4;

        goto label14;

     label06:
        $z4 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("WHERE");

        if $z4 == 0 goto label04;

        b1 = 2;

        goto label14;

     label07:
        $z5 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("ORDER");

        if $z5 == 0 goto label04;

        b1 = 7;

        goto label14;

     label08:
        $z6 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("LIMIT");

        if $z6 == 0 goto label04;

        b1 = 8;

        goto label14;

     label09:
        $z7 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("GROUP");

        if $z7 == 0 goto label04;

        b1 = 3;

        goto label14;

     label10:
        $z8 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("FROM");

        if $z8 == 0 goto label04;

        b1 = 1;

        goto label14;

     label11:
        $z9 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("WINDOW");

        if $z9 == 0 goto label04;

        b1 = 5;

        goto label14;

     label12:
        $z10 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("VALUES");

        if $z10 == 0 goto label04;

        b1 = 6;

        goto label14;

     label13:
        $z11 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("SELECT");

        if $z11 == 0 goto label04;

        b1 = 0;

     label14:
        tableswitch(b1)
        {
            case 0: goto label16;
            case 1: goto label16;
            case 2: goto label16;
            case 3: goto label16;
            case 4: goto label16;
            case 5: goto label16;
            case 6: goto label16;
            case 7: goto label16;
            case 8: goto label16;
            default: goto label15;
        };

     label15:
        goto label17;

     label16:
        z12 = 0;

     label17:
        if z12 == 0 goto label18;

        return;

     label18:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid token ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private boolean isTableOrColumn(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r2, $r3;
        boolean z0, z1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String computeSingleProjection(java.lang.String)>(r1);

        if $r3 == null goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    public static void lambda$W2yQ6UjYGqGIu6HEomKgdgvGNKI(android.database.sqlite.SQLiteQueryBuilder, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1;

        r0 := @parameter0: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void enforceStrictToken(java.lang.String)>(r1);

        return;
    }

    private static java.lang.String maybeWithOperator(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r8;
        java.lang.StringBuilder $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label1:
        return r1;
    }

    private java.lang.String wrap(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public void appendWhere(java.lang.CharSequence)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.CharSequence r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        if $r2 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + 16;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i1);

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = $r5;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);

        return;
    }

    public void appendWhereEscapeString(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        if $r2 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 + 16;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i1);

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = $r4;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        staticinvoke <android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>($r3, r1);

        return;
    }

    public void appendWhereStandalone(java.lang.CharSequence)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.CharSequence r1;
        java.lang.StringBuilder r2, $r3, $r4, $r8, $r10;
        int $i0, $i1, $i2;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        if $r3 != null goto label1;

        $r10 = new java.lang.StringBuilder;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = $i1 + 16;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i2);

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = $r10;

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i0 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label2;

        $r8 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

     label2:
        r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        return;
    }

    public java.lang.String buildDelete(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r5, $r6, $r8, $r9;
        java.lang.StringBuilder $r3;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ");

        $r5 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r6 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String computeWhere(java.lang.String)>(r1);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r3, " WHERE ", $r8);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String buildInsert(android.content.ContentValues)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r6, $r11, $r15;
        int $i0, $i1, i2, i3;
        java.lang.Object $r14;
        android.content.ContentValues r18;
        android.util.ArrayMap r19;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r18 := @parameter0: android.content.ContentValues;

        if r18 == null goto label7;

        $z0 = virtualinvoke r18.<android.content.ContentValues: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT INTO ");

        $r5 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r6 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        r19 = virtualinvoke r18.<android.content.ContentValues: android.util.ArrayMap getValues()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r19.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label3;

        if i2 <= 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r14 = virtualinvoke r19.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r15 = (java.lang.String) $r14;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") VALUES (");

        i3 = 0;

     label4:
        $i1 = virtualinvoke r19.<android.util.ArrayMap: int size()>();

        if i3 >= $i1 goto label6;

        if i3 <= 0 goto label5;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

        i3 = i3 + 1;

        goto label4;

     label6:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty values");

        throw $r2;
    }

    public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, r2, r3, r4, $r5, $r6, r8, r10;
        boolean $z0;
        java.lang.String[] r7, r9;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r7 := @parameter0: java.lang.String[];

        r8 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r9 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String[] computeProjection(java.lang.String[])>(r7);

        r10 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String computeWhere(java.lang.String)>(r8);

        $z0 = r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct>;

        $r5 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r6 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($z0, $r5, r9, r10, r1, r2, r3, r4);

        return $r6;
    }

    public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String[] r1, r3;
        java.lang.String r2, r4, r5, r6, r7, $r8;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r4, r5, r6, r7);

        return $r8;
    }

    public java.lang.String buildUnionQuery(java.lang.String[], java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String[] r1;
        java.lang.String r2, r3, $r6, $r7, r10;
        int i0, i1;
        java.lang.StringBuilder $r5;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(128);

        i0 = lengthof r1;

        $z0 = r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct>;

        if $z0 == 0 goto label1;

        r10 = " UNION ";

        goto label2;

     label1:
        r10 = " UNION ALL ";

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        if i1 <= 0 goto label4;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

     label4:
        $r7 = r1[i1];

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label3;

     label5:
        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r5, " ORDER BY ", r2);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r5, " LIMIT ", r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, r4, r5, r6, r7, r9, $r10, $r14, $r20;
        java.lang.String[] r2, r8;
        java.util.Set r3;
        int i0, i1, i2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r11, $r15;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.util.Set;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        i1 = lengthof r2;

        r8 = newarray (java.lang.String)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        r9 = r2[i2];

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' AS ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r8[i2] = $r20;

        goto label5;

     label2:
        if i2 <= i0 goto label4;

        $z1 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NULL AS ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r8[i2] = $r14;

        goto label5;

     label4:
        r8[i2] = r9;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r10 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r8, r5, r6, r7, null, null);

        return $r10;
    }

    public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, r4, r5, r7, r8, $r9;
        java.lang.String[] r2, r6;
        java.util.Set r3;
        int i0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.util.Set;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String[];

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, i0, r4, r5, r7, r8);

        return $r9;
    }

    public java.lang.String buildUpdate(android.content.ContentValues, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r6, $r7, $r10, $r11, $r13;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        int $i0, i1;
        java.lang.Object $r12;
        android.content.ContentValues r17;
        android.util.ArrayMap r18;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r17 := @parameter0: android.content.ContentValues;

        r1 := @parameter1: java.lang.String;

        if r17 == null goto label4;

        $z0 = virtualinvoke r17.<android.content.ContentValues: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r6 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r7 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        r18 = virtualinvoke r17.<android.content.ContentValues: android.util.ArrayMap getValues()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r18.<android.util.ArrayMap: int size()>();

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r12 = virtualinvoke r18.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r13 = (java.lang.String) $r12;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        i1 = i1 + 1;

        goto label1;

     label3:
        $r10 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String computeWhere(java.lang.String)>(r1);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r4, " WHERE ", $r10);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty values");

        throw $r3;
    }

    public java.lang.String[] computeProjection(java.lang.String[])
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.util.Iterator r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r2, $r3, $r5;
        java.lang.String $r4, $r6, $r7, $r8;
        java.lang.String[] r9, r10, r13;
        java.util.Map r11;
        java.util.Set r12;
        java.util.Map$Entry r14;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r9 := @parameter0: java.lang.String[];

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r9);

        if $z0 != 0 goto label3;

        $i1 = lengthof r9;

        r10 = newarray (java.lang.String)[$i1];

        i3 = 0;

     label1:
        $i2 = lengthof r9;

        if i3 >= $i2 goto label2;

        $r7 = r9[i3];

        $r8 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String computeSingleProjectionOrThrow(java.lang.String)>($r7);

        r10[i3] = $r8;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r10;

     label3:
        r11 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        if r11 == null goto label7;

        r12 = interfaceinvoke r11.<java.util.Map: java.util.Set entrySet()>();

        $i0 = interfaceinvoke r12.<java.util.Set: int size()>();

        r13 = newarray (java.lang.String)[$i0];

        r1 = interfaceinvoke r12.<java.util.Set: java.util.Iterator iterator()>();

        i4 = 0;

     label4:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r2;

        $r3 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = (java.lang.String) $r3;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("_count");

        if $z1 == 0 goto label5;

        goto label4;

     label5:
        $r5 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.lang.String) $r5;

        r13[i4] = $r6;

        i4 = i4 + 1;

        goto label4;

     label6:
        return r13;

     label7:
        return null;
    }

    public java.lang.String computeWhere(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, $r5;
        boolean z0, z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r4, $r11;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        z0 = $z2 ^ 1;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        z1 = $z3 ^ 1;

        if z0 != 0 goto label2;

        if z1 == 0 goto label1;

        goto label2;

     label1:
        return null;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r11 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label3:
        if z0 == 0 goto label4;

        if z1 == 0 goto label4;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

     label4:
        if z1 == 0 goto label5;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label5:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public int delete(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2;
        java.lang.String $r3, $r9, $r11, $r12, r13, r14, r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r6;
        int $i2;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r13 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r3, "No tables defined");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "No database defined");

        r14 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildDelete(java.lang.String)>(r13);

        $z0 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictGrammar()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void enforceStrictGrammar(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r13, null, null, null, null);

     label1:
        $z1 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>(r14, null);

        $r12 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String wrap(java.lang.String)>(r13);

        r15 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildDelete(java.lang.String)>($r12);

        goto label3;

     label2:
        r15 = r14;

     label3:
        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteQueryBuilder", 3);

        if $z2 == 0 goto label5;

        $z3 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z3 == 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with args ");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", $r11);

        goto label5;

     label4:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", r15);

     label5:
        $i2 = staticinvoke <android.database.DatabaseUtils: int executeUpdateDelete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r1, r15, r2);

        return $i2;
    }

    public android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 = r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        return $r1;
    }

    public java.util.Collection getProjectionGreylist()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.util.Collection $r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Collection mProjectionGreylist>;

        return $r1;
    }

    public java.util.Map getProjectionMap()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.util.Map $r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        return $r1;
    }

    public java.lang.String getTables()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String $r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        return $r1;
    }

    public long insert(android.database.sqlite.SQLiteDatabase, android.content.ContentValues)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, $r3, $r10, $r12;
        boolean $z0, $z1, $z2;
        int $i0, i3, $i4;
        java.lang.StringBuilder $r7;
        java.lang.Object $r13;
        android.content.ContentValues r14;
        android.util.ArrayMap r15;
        java.lang.Object[] r16;
        long $l5;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r14 := @parameter1: android.content.ContentValues;

        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r3, "No tables defined");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "No database defined");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "No values defined");

        $z0 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictColumns()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void enforceStrictColumns(android.content.ContentValues)>(r14);

     label1:
        r2 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildInsert(android.content.ContentValues)>(r14);

        r15 = virtualinvoke r14.<android.content.ContentValues: android.util.ArrayMap getValues()>();

        $i0 = virtualinvoke r15.<android.util.ArrayMap: int size()>();

        r16 = newarray (java.lang.Object)[$i0];

        i3 = 0;

     label2:
        $i4 = lengthof r16;

        if i3 >= $i4 goto label3;

        $r13 = virtualinvoke r15.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        r16[i3] = $r13;

        i3 = i3 + 1;

        goto label2;

     label3:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteQueryBuilder", 3);

        if $z1 == 0 goto label5;

        $z2 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z2 == 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with args ");

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r16);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", $r12);

        goto label5;

     label4:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", r2);

     label5:
        $l5 = staticinvoke <android.database.DatabaseUtils: long executeInsert(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r1, r2, r16);

        return $l5;
    }

    public boolean isDistinct()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $z0 = r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct>;

        return $z0;
    }

    public boolean isProjectionAggregationAllowed()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        return 1;
    }

    public boolean isStrict()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        i0 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isStrictColumns()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $i0 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isStrictGrammar()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $i0 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, r6, r7;
        android.database.Cursor $r8;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, r5, r6, r7, null, null);

        return $r8;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, r6, r7, r8;
        android.database.Cursor $r9;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, r5, r6, r7, r8, null);

        return $r9;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2, r18;
        java.lang.String r3, r4, r5, r6, r8, $r9, $r13, $r15, $r16, $r17, r19, r20, $r23, $r24;
        android.os.CancellationSignal r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r10;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r22;
        android.database.Cursor $r25;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r18 := @parameter1: java.lang.String[];

        r19 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String[];

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: java.lang.String;

        r7 := @parameter8: android.os.CancellationSignal;

        $r9 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        if $r9 != null goto label1;

        return null;

     label1:
        r8 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r18, r19, r3, r4, r5, r6);

        $z0 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictColumns()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void enforceStrictColumns(java.lang.String[])>(r18);

        goto label2;

     label2:
        $z1 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictGrammar()>();

        if $z1 == 0 goto label3;

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void enforceStrictGrammar(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r19, r3, r4, r5, r6);

     label3:
        $z2 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>();

        if $z2 == 0 goto label4;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>(r8, r7);

        $r16 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String wrap(java.lang.String)>(r19);

        $r17 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String wrap(java.lang.String)>(r4);

        r20 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r18, $r16, r3, $r17, r5, r6);

        goto label5;

     label4:
        r20 = r8;

     label5:
        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteQueryBuilder", 3);

        if $z3 == 0 goto label7;

        $z4 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z4 == 0 goto label6;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with args ");

        $r13 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", $r15);

        goto label7;

     label6:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", r20);

     label7:
        $r22 = r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r23 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r24 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r23);

        $r25 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>($r22, r20, r2, $r24, r7);

        return $r25;
    }

    public void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = r1;

        return;
    }

    public void setDistinct(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        z0 := @parameter0: boolean;

        r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct> = z0;

        return;
    }

    public void setProjectionAggregationAllowed(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        z0 := @parameter0: boolean;

        return;
    }

    public void setProjectionGreylist(java.util.Collection)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.util.Collection r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.util.Collection;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Collection mProjectionGreylist> = r1;

        return;
    }

    public void setProjectionMap(java.util.Map)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.util.Map r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.util.Map;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap> = r1;

        return;
    }

    public void setStrict(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i3 = $i2 | 1;

        r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i1 = $i0 & -2;

        r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags> = $i1;

     label2:
        return;
    }

    public void setStrictColumns(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i3 = $i2 | 2;

        r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i1 = $i0 & -3;

        r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags> = $i1;

     label2:
        return;
    }

    public void setStrictGrammar(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i3 = $i2 | 4;

        r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags>;

        $i1 = $i0 & -5;

        r0.<android.database.sqlite.SQLiteQueryBuilder: int mStrictFlags> = $i1;

     label2:
        return;
    }

    public void setTables(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables> = r1;

        return;
    }

    public int update(android.database.sqlite.SQLiteDatabase, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, $i1, $i2, $i5, i6, $i7, $i8;
        java.lang.String $r2, $r9, $r11, $r12, $r14, r16, r18, r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r6;
        java.lang.Object $r13;
        android.content.ContentValues r15;
        java.lang.String[] r17, r20;
        android.util.ArrayMap r21;
        java.lang.Object[] r22;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r15 := @parameter1: android.content.ContentValues;

        r16 := @parameter2: java.lang.String;

        r17 := @parameter3: java.lang.String[];

        $r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r2, "No tables defined");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "No database defined");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "No values defined");

        r18 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUpdate(android.content.ContentValues,java.lang.String)>(r15, r16);

        $z0 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictColumns()>();

        if $z0 == 0 goto label01;

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void enforceStrictColumns(android.content.ContentValues)>(r15);

     label01:
        $z1 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictGrammar()>();

        if $z1 == 0 goto label02;

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void enforceStrictGrammar(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r16, null, null, null, null);

     label02:
        $z2 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>();

        if $z2 == 0 goto label03;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>(r18, null);

        $r14 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String wrap(java.lang.String)>(r16);

        r19 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUpdate(android.content.ContentValues,java.lang.String)>(r15, $r14);

        goto label04;

     label03:
        r19 = r18;

     label04:
        r20 = r17;

        if r17 != null goto label05;

        r20 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

     label05:
        r21 = virtualinvoke r15.<android.content.ContentValues: android.util.ArrayMap getValues()>();

        i0 = virtualinvoke r21.<android.util.ArrayMap: int size()>();

        $i1 = lengthof r20;

        $i2 = $i1 + i0;

        r22 = newarray (java.lang.Object)[$i2];

        i6 = 0;

     label06:
        $i7 = lengthof r22;

        if i6 >= $i7 goto label09;

        if i6 >= i0 goto label07;

        $r13 = virtualinvoke r21.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        r22[i6] = $r13;

        goto label08;

     label07:
        $i5 = i6 - i0;

        $r12 = r20[$i5];

        r22[i6] = $r12;

     label08:
        i6 = i6 + 1;

        goto label06;

     label09:
        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteQueryBuilder", 3);

        if $z3 == 0 goto label11;

        $z4 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z4 == 0 goto label10;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with args ");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r22);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", $r11);

        goto label11;

     label10:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", r19);

     label11:
        $i8 = staticinvoke <android.database.DatabaseUtils: int executeUpdateDelete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r1, r19, r22);

        return $i8;
    }
}
