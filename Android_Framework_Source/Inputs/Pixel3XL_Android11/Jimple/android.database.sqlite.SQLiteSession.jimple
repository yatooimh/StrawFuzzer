public final class android.database.sqlite.SQLiteSession extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    public static final int TRANSACTION_MODE_DEFERRED;
    public static final int TRANSACTION_MODE_EXCLUSIVE;
    public static final int TRANSACTION_MODE_IMMEDIATE;
    private android.database.sqlite.SQLiteConnection mConnection;
    private int mConnectionFlags;
    private final android.database.sqlite.SQLiteConnectionPool mConnectionPool;
    private int mConnectionUseCount;
    private android.database.sqlite.SQLiteSession$Transaction mTransactionPool;
    private android.database.sqlite.SQLiteSession$Transaction mTransactionStack;

    static void <clinit>()
    {
        <android.database.sqlite.SQLiteSession: int TRANSACTION_MODE_IMMEDIATE> = 1;

        <android.database.sqlite.SQLiteSession: int TRANSACTION_MODE_EXCLUSIVE> = 2;

        <android.database.sqlite.SQLiteSession: int TRANSACTION_MODE_DEFERRED> = 0;

        <android.database.sqlite.SQLiteSession: boolean $assertionsDisabled> = 0;

        return;
    }

    public void <init>(android.database.sqlite.SQLiteConnectionPool)
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteConnectionPool r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnectionPool mConnectionPool> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionPool must not be null");

        throw $r2;
    }

    private void acquireConnection(java.lang.String, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        android.os.CancellationSignal r2;
        android.database.sqlite.SQLiteConnection $r3, $r5;
        android.database.sqlite.SQLiteConnectionPool $r4;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.CancellationSignal;

        $r3 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        if $r3 != null goto label1;

        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnectionPool mConnectionPool>;

        $r5 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r1, i0, r2);

        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection> = $r5;

        r0.<android.database.sqlite.SQLiteSession: int mConnectionFlags> = i0;

     label1:
        $i1 = r0.<android.database.sqlite.SQLiteSession: int mConnectionUseCount>;

        $i2 = $i1 + 1;

        r0.<android.database.sqlite.SQLiteSession: int mConnectionUseCount> = $i2;

        return;
    }

    private void beginTransactionUnchecked(int, android.database.sqlite.SQLiteTransactionListener, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        int i0, i1;
        android.os.CancellationSignal r1;
        android.database.sqlite.SQLiteSession$Transaction $r2, $r3, $r4, $r9, $r12, r15;
        android.database.sqlite.SQLiteConnection $r5, $r6, $r7, $r10;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r11;
        android.database.sqlite.SQLiteTransactionListener r13;

        r0 := @this: android.database.sqlite.SQLiteSession;

        i0 := @parameter0: int;

        r13 := @parameter1: android.database.sqlite.SQLiteTransactionListener;

        i1 := @parameter2: int;

        r1 := @parameter3: android.os.CancellationSignal;

        if r1 == null goto label01;

        virtualinvoke r1.<android.os.CancellationSignal: void throwIfCanceled()>();

     label01:
        $r2 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if $r2 != null goto label02;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(null, i1, r1);

     label02:
        $r3 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if $r3 != null goto label09;

     label03:
        if i0 == 1 goto label08;

        if i0 == 2 goto label06;

     label04:
        $r7 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r7.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("BEGIN;", null, r1);

     label05:
        goto label09;

     label06:
        $r6 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("BEGIN EXCLUSIVE;", null, r1);

     label07:
        goto label09;

     label08:
        $r5 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("BEGIN IMMEDIATE;", null, r1);

     label09:
        if r13 == null goto label15;

     label10:
        interfaceinvoke r13.<android.database.sqlite.SQLiteTransactionListener: void onBegin()>();

     label11:
        goto label15;

     label12:
        $r8 := @caughtexception;

     label13:
        $r9 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if $r9 != null goto label14;

        $r10 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r10.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("ROLLBACK;", null, r1);

     label14:
        throw $r8;

     label15:
        r15 = specialinvoke r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction obtainTransaction(int,android.database.sqlite.SQLiteTransactionListener)>(i0, r13);

        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        r15.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteSession$Transaction mParent> = $r4;

        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack> = r15;

     label16:
        if r15 != null goto label17;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

     label17:
        return;

     label18:
        $r11 := @caughtexception;

        $r12 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if $r12 != null goto label19;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

     label19:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.RuntimeException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
    }

    private void endTransactionUnchecked(android.os.CancellationSignal, boolean)
    {
        android.database.sqlite.SQLiteSession r0;
        boolean z0, $z1, $z2, z3, z4;
        android.database.sqlite.SQLiteSession$Transaction r1, $r9, r10;
        android.database.sqlite.SQLiteTransactionListener r2;
        android.database.sqlite.SQLiteConnection $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.RuntimeException $r6, r8;
        android.os.CancellationSignal r7;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r7 := @parameter0: android.os.CancellationSignal;

        z0 := @parameter1: boolean;

        if r7 == null goto label01;

        virtualinvoke r7.<android.os.CancellationSignal: void throwIfCanceled()>();

     label01:
        r1 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        $z1 = r1.<android.database.sqlite.SQLiteSession$Transaction: boolean mMarkedSuccessful>;

        if $z1 != 0 goto label02;

        if z0 == 0 goto label03;

     label02:
        $z2 = r1.<android.database.sqlite.SQLiteSession$Transaction: boolean mChildFailed>;

        if $z2 != 0 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        r2 = r1.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteTransactionListener mListener>;

        z4 = z3;

        r8 = null;

        if r2 == null goto label10;

        if z3 == 0 goto label07;

     label05:
        interfaceinvoke r2.<android.database.sqlite.SQLiteTransactionListener: void onCommit()>();

     label06:
        goto label08;

     label07:
        interfaceinvoke r2.<android.database.sqlite.SQLiteTransactionListener: void onRollback()>();

     label08:
        z4 = z3;

        r8 = null;

        goto label10;

     label09:
        $r6 := @caughtexception;

        r8 = $r6;

        z4 = 0;

     label10:
        $r9 = r1.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteSession$Transaction mParent>;

        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack> = $r9;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void recycleTransaction(android.database.sqlite.SQLiteSession$Transaction)>(r1);

        r10 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if r10 == null goto label11;

        if z4 != 0 goto label16;

        r10.<android.database.sqlite.SQLiteSession$Transaction: boolean mChildFailed> = 1;

        goto label16;

     label11:
        if z4 == 0 goto label14;

     label12:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("COMMIT;", null, r7);

     label13:
        goto label15;

     label14:
        $r3 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("ROLLBACK;", null, r7);

     label15:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

     label16:
        if r8 != null goto label17;

        return;

     label17:
        throw r8;

     label18:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

        catch java.lang.RuntimeException from label05 to label06 with label09;
        catch java.lang.RuntimeException from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
    }

    private boolean executeSpecial(java.lang.String, java.lang.Object[], int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        int i0, i1;
        android.os.CancellationSignal r3;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.CancellationSignal;

        if r3 == null goto label1;

        virtualinvoke r3.<android.os.CancellationSignal: void throwIfCanceled()>();

     label1:
        i1 = staticinvoke <android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>(r1);

        if i1 == 4 goto label4;

        if i1 == 5 goto label3;

        if i1 == 6 goto label2;

        return 0;

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteSession: void endTransaction(android.os.CancellationSignal)>(r3);

        return 1;

     label3:
        virtualinvoke r0.<android.database.sqlite.SQLiteSession: void setTransactionSuccessful()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteSession: void endTransaction(android.os.CancellationSignal)>(r3);

        return 1;

     label4:
        virtualinvoke r0.<android.database.sqlite.SQLiteSession: void beginTransaction(int,android.database.sqlite.SQLiteTransactionListener,int,android.os.CancellationSignal)>(2, null, i0, r3);

        return 1;
    }

    private android.database.sqlite.SQLiteSession$Transaction obtainTransaction(int, android.database.sqlite.SQLiteTransactionListener)
    {
        android.database.sqlite.SQLiteSession r0;
        int i0;
        android.database.sqlite.SQLiteTransactionListener r1;
        android.database.sqlite.SQLiteSession$Transaction $r2, $r3, r4;

        r0 := @this: android.database.sqlite.SQLiteSession;

        i0 := @parameter0: int;

        r1 := @parameter1: android.database.sqlite.SQLiteTransactionListener;

        r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionPool>;

        if r4 == null goto label1;

        $r3 = r4.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteSession$Transaction mParent>;

        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionPool> = $r3;

        r4.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteSession$Transaction mParent> = null;

        r4.<android.database.sqlite.SQLiteSession$Transaction: boolean mMarkedSuccessful> = 0;

        r4.<android.database.sqlite.SQLiteSession$Transaction: boolean mChildFailed> = 0;

        goto label2;

     label1:
        $r2 = new android.database.sqlite.SQLiteSession$Transaction;

        specialinvoke $r2.<android.database.sqlite.SQLiteSession$Transaction: void <init>(android.database.sqlite.SQLiteSession$1)>(null);

        r4 = $r2;

     label2:
        r4.<android.database.sqlite.SQLiteSession$Transaction: int mMode> = i0;

        r4.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteTransactionListener mListener> = r1;

        return r4;
    }

    private void recycleTransaction(android.database.sqlite.SQLiteSession$Transaction)
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteSession$Transaction r1, $r2;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r1 := @parameter0: android.database.sqlite.SQLiteSession$Transaction;

        $r2 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionPool>;

        r1.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteSession$Transaction mParent> = $r2;

        r1.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteTransactionListener mListener> = null;

        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionPool> = r1;

        return;
    }

    private void releaseConnection()
    {
        android.database.sqlite.SQLiteSession r0;
        int i0, $i1;
        android.database.sqlite.SQLiteConnection $r2;
        android.database.sqlite.SQLiteConnectionPool $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.database.sqlite.SQLiteSession;

        $i1 = r0.<android.database.sqlite.SQLiteSession: int mConnectionUseCount>;

        i0 = $i1 - 1;

        r0.<android.database.sqlite.SQLiteSession: int mConnectionUseCount> = i0;

        if i0 != 0 goto label4;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnectionPool mConnectionPool>;

        $r2 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteConnectionPool: void releaseConnection(android.database.sqlite.SQLiteConnection)>($r2);

     label2:
        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection> = null;

        goto label4;

     label3:
        $r4 := @caughtexception;

        r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection> = null;

        throw $r4;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void throwIfNestedTransaction()
    {
        android.database.sqlite.SQLiteSession r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.database.sqlite.SQLiteSession;

        $z0 = virtualinvoke r0.<android.database.sqlite.SQLiteSession: boolean hasNestedTransaction()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because a nested transaction is in progress.");

        throw $r1;
    }

    private void throwIfNoTransaction()
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteSession$Transaction $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.database.sqlite.SQLiteSession;

        $r1 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because there is no current transaction.");

        throw $r2;
    }

    private void throwIfTransactionMarkedSuccessful()
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteSession$Transaction r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r1 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if r1 == null goto label2;

        $z0 = r1.<android.database.sqlite.SQLiteSession$Transaction: boolean mMarkedSuccessful>;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot perform this operation because the transaction has already been marked successful.  The only thing you can do now is call endTransaction().");

        throw $r2;

     label2:
        return;
    }

    private boolean yieldTransactionUnchecked(long, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        long l0;
        android.os.CancellationSignal r1;
        int i1, i2, $i3;
        android.database.sqlite.SQLiteTransactionListener r2;
        android.database.sqlite.SQLiteConnection $r4;
        android.database.sqlite.SQLiteConnectionPool $r5;
        boolean $z0;
        android.database.sqlite.SQLiteSession$Transaction $r6, $r7;
        byte $b4;
        java.lang.Throwable $r8;

        r0 := @this: android.database.sqlite.SQLiteSession;

        l0 := @parameter0: long;

        r1 := @parameter1: android.os.CancellationSignal;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.CancellationSignal: void throwIfCanceled()>();

     label1:
        $r5 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnectionPool mConnectionPool>;

        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        $i3 = r0.<android.database.sqlite.SQLiteSession: int mConnectionFlags>;

        $z0 = virtualinvoke $r5.<android.database.sqlite.SQLiteConnectionPool: boolean shouldYieldConnection(android.database.sqlite.SQLiteConnection,int)>($r4, $i3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r6 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        i1 = $r6.<android.database.sqlite.SQLiteSession$Transaction: int mMode>;

        $r7 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        r2 = $r7.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteTransactionListener mListener>;

        i2 = r0.<android.database.sqlite.SQLiteSession: int mConnectionFlags>;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void endTransactionUnchecked(android.os.CancellationSignal,boolean)>(r1, 1);

        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label6;

     label3:
        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void beginTransactionUnchecked(int,android.database.sqlite.SQLiteTransactionListener,int,android.os.CancellationSignal)>(i1, r2, i2, r1);

        return 1;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public void beginTransaction(int, android.database.sqlite.SQLiteTransactionListener, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        int i0, i1;
        android.database.sqlite.SQLiteTransactionListener r1;
        android.os.CancellationSignal r2;

        r0 := @this: android.database.sqlite.SQLiteSession;

        i0 := @parameter0: int;

        r1 := @parameter1: android.database.sqlite.SQLiteTransactionListener;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.CancellationSignal;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void throwIfTransactionMarkedSuccessful()>();

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void beginTransactionUnchecked(int,android.database.sqlite.SQLiteTransactionListener,int,android.os.CancellationSignal)>(i0, r1, i1, r2);

        return;
    }

    public void endTransaction(android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        android.os.CancellationSignal r1;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r1 := @parameter0: android.os.CancellationSignal;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void throwIfNoTransaction()>();

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void endTransactionUnchecked(android.os.CancellationSignal,boolean)>(r1, 0);

        return;
    }

    public void execute(java.lang.String, java.lang.Object[], int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.Object[] r1;
        int i0;
        android.os.CancellationSignal r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.CancellationSignal;

        if r6 == null goto label5;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>(r6, r1, i0, r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r6, i0, r2);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r6, r1, r2);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return;

     label4:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String, java.lang.Object[], int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.Object[] r1;
        int i0;
        android.os.CancellationSignal r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        android.os.ParcelFileDescriptor r7;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.CancellationSignal;

        if r6 == null goto label5;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>(r6, r1, i0, r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r6, i0, r2);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        r7 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r6, r1, r2);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return r7;

     label4:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int executeForChangedRowCount(java.lang.String, java.lang.Object[], int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.Object[] r1;
        android.os.CancellationSignal r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        int i0, i1;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.CancellationSignal;

        if r6 == null goto label5;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>(r6, r1, i0, r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r6, i0, r2);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        i1 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: int executeForChangedRowCount(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r6, r1, r2);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return i1;

     label4:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int executeForCursorWindow(java.lang.String, java.lang.Object[], android.database.CursorWindow, int, int, boolean, int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.Object[] r1;
        android.database.CursorWindow r2;
        int i0, i1, i2, i3;
        boolean z0, $z1;
        android.os.CancellationSignal r3;
        java.lang.IllegalArgumentException $r4, $r5;
        android.database.sqlite.SQLiteConnection $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: android.database.CursorWindow;

        i2 := @parameter3: int;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        i1 := @parameter6: int;

        r3 := @parameter7: android.os.CancellationSignal;

        if r8 == null goto label6;

        if r2 == null goto label5;

        $z1 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>(r8, r1, i1, r3);

        if $z1 == 0 goto label1;

        virtualinvoke r2.<android.database.CursorWindow: void clear()>();

        return 0;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r8, i1, r3);

     label2:
        $r6 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        i3 = virtualinvoke $r6.<android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,android.os.CancellationSignal)>(r8, r1, r2, i2, i0, z0, r3);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return i3;

     label4:
        $r7 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r7;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("window must not be null.");

        throw $r5;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public long executeForLastInsertedRowId(java.lang.String, java.lang.Object[], int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.Object[] r1;
        int i0;
        android.os.CancellationSignal r2;
        long l1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.CancellationSignal;

        if r6 == null goto label5;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>(r6, r1, i0, r2);

        if $z0 == 0 goto label1;

        return 0L;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r6, i0, r2);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        l1 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r6, r1, r2);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return l1;

     label4:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public long executeForLong(java.lang.String, java.lang.Object[], int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.Object[] r1;
        int i0;
        android.os.CancellationSignal r2;
        long l1;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.CancellationSignal;

        if r6 == null goto label5;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>(r6, r1, i0, r2);

        if $z0 == 0 goto label1;

        return 0L;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r6, i0, r2);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        l1 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r6, r1, r2);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return l1;

     label4:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.String executeForString(java.lang.String, java.lang.Object[], int, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        java.lang.Object[] r1;
        int i0;
        android.os.CancellationSignal r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.Throwable $r5;
        java.lang.String r6, r7;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.CancellationSignal;

        if r6 == null goto label5;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>(r6, r1, i0, r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r6, i0, r2);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        r7 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r6, r1, r2);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return r7;

     label4:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean hasConnection()
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteConnection $r1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteSession;

        $r1 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasNestedTransaction()
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteSession$Transaction r1, $r2;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r1 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if r1 == null goto label1;

        $r2 = r1.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteSession$Transaction mParent>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasTransaction()
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteSession$Transaction $r1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteSession;

        $r1 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void prepare(java.lang.String, int, android.os.CancellationSignal, android.database.sqlite.SQLiteStatementInfo)
    {
        android.database.sqlite.SQLiteSession r0;
        int i0;
        android.os.CancellationSignal r1;
        android.database.sqlite.SQLiteStatementInfo r2;
        java.lang.IllegalArgumentException $r3;
        android.database.sqlite.SQLiteConnection $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: android.database.sqlite.SQLiteSession;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.CancellationSignal;

        r2 := @parameter3: android.database.sqlite.SQLiteStatementInfo;

        if r6 == null goto label5;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.CancellationSignal: void throwIfCanceled()>();

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)>(r6, i0, r1);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteConnection mConnection>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection: void prepare(java.lang.String,android.database.sqlite.SQLiteStatementInfo)>(r6, r2);

     label3:
        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        return;

     label4:
        $r5 := @caughtexception;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void releaseConnection()>();

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void setTransactionSuccessful()
    {
        android.database.sqlite.SQLiteSession r0;
        android.database.sqlite.SQLiteSession$Transaction $r1;

        r0 := @this: android.database.sqlite.SQLiteSession;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void throwIfNoTransaction()>();

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void throwIfTransactionMarkedSuccessful()>();

        $r1 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        $r1.<android.database.sqlite.SQLiteSession$Transaction: boolean mMarkedSuccessful> = 1;

        return;
    }

    public boolean yieldTransaction(long, boolean, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteSession r0;
        long l0;
        boolean z0, $z1, $z2, $z3;
        android.os.CancellationSignal r1;
        android.database.sqlite.SQLiteSession$Transaction r2, $r3, $r4, $r5;

        r0 := @this: android.database.sqlite.SQLiteSession;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.CancellationSignal;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void throwIfNoTransaction()>();

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void throwIfTransactionMarkedSuccessful()>();

        specialinvoke r0.<android.database.sqlite.SQLiteSession: void throwIfNestedTransaction()>();

        goto label2;

     label1:
        r2 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        if r2 == null goto label4;

        $z1 = r2.<android.database.sqlite.SQLiteSession$Transaction: boolean mMarkedSuccessful>;

        if $z1 != 0 goto label4;

        $r3 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        $r4 = $r3.<android.database.sqlite.SQLiteSession$Transaction: android.database.sqlite.SQLiteSession$Transaction mParent>;

        if $r4 == null goto label2;

        goto label4;

     label2:
        $r5 = r0.<android.database.sqlite.SQLiteSession: android.database.sqlite.SQLiteSession$Transaction mTransactionStack>;

        $z2 = $r5.<android.database.sqlite.SQLiteSession$Transaction: boolean mChildFailed>;

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $z3 = specialinvoke r0.<android.database.sqlite.SQLiteSession: boolean yieldTransactionUnchecked(long,android.os.CancellationSignal)>(l0, r1);

        return $z3;

     label4:
        return 0;
    }
}
