public final class android.database.sqlite.SQLiteStatement extends android.database.sqlite.SQLiteProgram
{

    void <init>(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.Object[])
    {
        android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2;
        java.lang.Object[] r3;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<android.database.sqlite.SQLiteProgram: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[],android.os.CancellationSignal)>(r1, r2, r3, null);

        return;
    }

    public void execute()
    {
        android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteSession $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int $i0;
        android.database.sqlite.SQLiteDatabaseCorruptException $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: android.database.sqlite.SQLiteSession getSession()>();

        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteSession: void execute(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>($r2, $r3, $i0, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void onCorruption()>();

     label6:
        throw $r4;

     label7:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public long executeInsert()
    {
        android.database.sqlite.SQLiteStatement r0;
        long l0;
        android.database.sqlite.SQLiteSession $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int $i1;
        android.database.sqlite.SQLiteDatabaseCorruptException $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: android.database.sqlite.SQLiteSession getSession()>();

        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteSession: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>($r2, $r3, $i1, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return l0;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void onCorruption()>();

     label6:
        throw $r4;

     label7:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public int executeUpdateDelete()
    {
        android.database.sqlite.SQLiteStatement r0;
        int i0, $i1;
        android.database.sqlite.SQLiteSession $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        android.database.sqlite.SQLiteDatabaseCorruptException $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: android.database.sqlite.SQLiteSession getSession()>();

        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        i0 = virtualinvoke $r1.<android.database.sqlite.SQLiteSession: int executeForChangedRowCount(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>($r2, $r3, $i1, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return i0;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void onCorruption()>();

     label6:
        throw $r4;

     label7:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()
    {
        android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteSession $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int $i0;
        android.database.sqlite.SQLiteDatabaseCorruptException $r4;
        java.lang.Throwable $r5;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: android.database.sqlite.SQLiteSession getSession()>();

        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        r6 = virtualinvoke $r1.<android.database.sqlite.SQLiteSession: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>($r2, $r3, $i0, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return r6;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void onCorruption()>();

     label6:
        throw $r4;

     label7:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public long simpleQueryForLong()
    {
        android.database.sqlite.SQLiteStatement r0;
        long l0;
        android.database.sqlite.SQLiteSession $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int $i1;
        android.database.sqlite.SQLiteDatabaseCorruptException $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: android.database.sqlite.SQLiteSession getSession()>();

        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteSession: long executeForLong(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>($r2, $r3, $i1, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return l0;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void onCorruption()>();

     label6:
        throw $r4;

     label7:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public java.lang.String simpleQueryForString()
    {
        android.database.sqlite.SQLiteStatement r0;
        android.database.sqlite.SQLiteSession $r1;
        java.lang.String $r2, r6;
        java.lang.Object[] $r3;
        int $i0;
        android.database.sqlite.SQLiteDatabaseCorruptException $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void acquireReference()>();

     label1:
        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: android.database.sqlite.SQLiteSession getSession()>();

        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.Object[] getBindArgs()>();

        $i0 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: int getConnectionFlags()>();

        r6 = virtualinvoke $r1.<android.database.sqlite.SQLiteSession: java.lang.String executeForString(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)>($r2, $r3, $i0, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        return r6;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void onCorruption()>();

     label6:
        throw $r4;

     label7:
        virtualinvoke r0.<android.database.sqlite.SQLiteStatement: void releaseReference()>();

        throw $r5;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteStatement r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;

        r0 := @this: android.database.sqlite.SQLiteStatement;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteProgram: ");

        $r4 = virtualinvoke r0.<android.database.sqlite.SQLiteStatement: java.lang.String getSql()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
