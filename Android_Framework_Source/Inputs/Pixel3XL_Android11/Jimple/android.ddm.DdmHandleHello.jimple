public class android.ddm.DdmHandleHello extends org.apache.harmony.dalvik.ddmc.ChunkHandler
{
    public static final int CHUNK_FEAT;
    public static final int CHUNK_HELO;
    public static final int CHUNK_WAIT;
    private static final int CLIENT_PROTOCOL_VERSION;
    private static final java.lang.String[] FRAMEWORK_FEATURES;
    private static android.ddm.DdmHandleHello mInstance;

    static void <clinit>()
    {
        int $i0, $i1, $i2;
        android.ddm.DdmHandleHello $r0;
        java.lang.String[] $r1;

        <android.ddm.DdmHandleHello: int CLIENT_PROTOCOL_VERSION> = 1;

        $i0 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("HELO");

        <android.ddm.DdmHandleHello: int CHUNK_HELO> = $i0;

        $i1 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("WAIT");

        <android.ddm.DdmHandleHello: int CHUNK_WAIT> = $i1;

        $i2 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("FEAT");

        <android.ddm.DdmHandleHello: int CHUNK_FEAT> = $i2;

        $r0 = new android.ddm.DdmHandleHello;

        specialinvoke $r0.<android.ddm.DdmHandleHello: void <init>()>();

        <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "opengl-tracing";

        $r1[1] = "view-hierarchy";

        <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES> = $r1;

        return;
    }

    private void <init>()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        specialinvoke r0.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void <init>()>();

        return;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleFEAT(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        java.nio.ByteBuffer r1;
        java.lang.String[] $r2, $r3, $r6, $r8, $r10, $r13, $r18, r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22;
        java.nio.ByteOrder $r4;
        org.apache.harmony.dalvik.ddmc.Chunk $r9, r21;
        java.lang.String $r11, $r14, $r15, $r17, $r19, $r20;

        r0 := @this: android.ddm.DdmHandleHello;

        r21 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        r22 = staticinvoke <android.os.Debug: java.lang.String[] getVmFeatureList()>();

        $i1 = lengthof r22;

        $r2 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i0 = lengthof $r2;

        $i2 = $i1 + $i0;

        $i3 = $i2 * 4;

        i18 = $i3 + 4;

        $i4 = lengthof r22;

        i19 = $i4 - 1;

     label1:
        if i19 < 0 goto label2;

        $r20 = r22[i19];

        $i16 = virtualinvoke $r20.<java.lang.String: int length()>();

        $i17 = $i16 * 2;

        i18 = i18 + $i17;

        i19 = i19 + -1;

        goto label1;

     label2:
        $r3 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i5 = lengthof $r3;

        i20 = $i5 - 1;

     label3:
        if i20 < 0 goto label4;

        $r18 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r19 = $r18[i20];

        $i14 = virtualinvoke $r19.<java.lang.String: int length()>();

        $i15 = $i14 * 2;

        i18 = i18 + $i15;

        i20 = i20 + -1;

        goto label3;

     label4:
        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i18);

        $r4 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $i7 = lengthof r22;

        $r6 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i6 = lengthof $r6;

        $i8 = $i7 + $i6;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i8);

        $i9 = lengthof r22;

        i21 = $i9 - 1;

     label5:
        if i21 < 0 goto label6;

        $r15 = r22[i21];

        $i13 = virtualinvoke $r15.<java.lang.String: int length()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i13);

        $r17 = r22[i21];

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r1, $r17);

        i21 = i21 + -1;

        goto label5;

     label6:
        $r8 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i10 = lengthof $r8;

        i22 = $i10 - 1;

     label7:
        if i22 < 0 goto label8;

        $r10 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r11 = $r10[i22];

        $i12 = virtualinvoke $r11.<java.lang.String: int length()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i12);

        $r13 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r14 = $r13[i22];

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r1, $r14);

        i22 = i22 + -1;

        goto label7;

     label8:
        $r9 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i11 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        specialinvoke $r9.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i11, r1);

        return $r9;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleHELO(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        java.lang.String r1, r2, r28, r29, r32, r34, r35, r36, r40, r41;
        boolean z0, $z1, $z2, $z3;
        java.nio.ByteBuffer $r3, r42;
        java.lang.StringBuilder $r4, $r22, $r38;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26;
        java.nio.ByteOrder $r10;
        byte $b23;
        org.apache.harmony.dalvik.ddmc.Chunk $r21, r27;
        android.ddm.DdmHandleAppName$Names r31;
        dalvik.system.VMRuntime r33;

        r0 := @this: android.ddm.DdmHandleHello;

        r27 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r3 = staticinvoke <android.ddm.DdmHandleHello: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r27);

        virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        r28 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.name", "?");

        r29 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.version", "?");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" v");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = staticinvoke <android.ddm.DdmHandleAppName: android.ddm.DdmHandleAppName$Names getNames()>();

        r32 = virtualinvoke r31.<android.ddm.DdmHandleAppName$Names: java.lang.String getAppName()>();

        r2 = virtualinvoke r31.<android.ddm.DdmHandleAppName$Names: java.lang.String getPkgName()>();

        r33 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z1 = virtualinvoke r33.<dalvik.system.VMRuntime: boolean is64Bit()>();

        if $z1 == 0 goto label1;

        r34 = "64-bit";

        goto label2;

     label1:
        r34 = "32-bit";

     label2:
        r35 = virtualinvoke r33.<dalvik.system.VMRuntime: java.lang.String vmInstructionSet()>();

        r36 = r34;

        if r35 == null goto label3;

        r36 = r34;

        $i26 = virtualinvoke r35.<java.lang.String: int length()>();

        if $i26 <= 0 goto label3;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r36 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CheckJNI=");

        $z3 = virtualinvoke r33.<dalvik.system.VMRuntime: boolean isCheckJniEnabled()>();

        if $z3 == 0 goto label4;

        r40 = "true";

        goto label5;

     label4:
        r40 = "false";

     label5:
        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = virtualinvoke r33.<dalvik.system.VMRuntime: boolean isNativeDebuggable()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 * 2;

        $i3 = $i2 + 32;

        $i4 = virtualinvoke r32.<java.lang.String: int length()>();

        $i5 = $i4 * 2;

        $i6 = $i3 + $i5;

        $i7 = virtualinvoke r36.<java.lang.String: int length()>();

        $i8 = $i7 * 2;

        $i9 = $i6 + $i8;

        $i10 = virtualinvoke r41.<java.lang.String: int length()>();

        $i11 = $i10 * 2;

        $i12 = $i9 + $i11;

        $i13 = $i12 + 1;

        $i14 = virtualinvoke r2.<java.lang.String: int length()>();

        $i15 = $i14 * 2;

        $i16 = $i13 + $i15;

        r42 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i16);

        $r10 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r10);

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1);

        $i17 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i17);

        $i18 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i18);

        $i19 = virtualinvoke r32.<java.lang.String: int length()>();

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i19);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r42, r1);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r42, r32);

        $i20 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i20);

        $i21 = virtualinvoke r36.<java.lang.String: int length()>();

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i21);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r42, r36);

        $i22 = virtualinvoke r41.<java.lang.String: int length()>();

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i22);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r42, r41);

        $b23 = (byte) z0;

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b23);

        $i24 = virtualinvoke r2.<java.lang.String: int length()>();

        virtualinvoke r42.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i24);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r42, r2);

        $r21 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i25 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        specialinvoke $r21.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i25, r42);

        $z2 = staticinvoke <android.os.Debug: boolean waitingForDebugger()>();

        if $z2 == 0 goto label6;

        staticinvoke <android.ddm.DdmHandleHello: void sendWAIT(int)>(0);

     label6:
        return $r21;
    }

    public static void register()
    {
        android.ddm.DdmHandleHello $r0, $r1;
        int $i0, $i1;

        $i0 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        $r0 = <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        $i1 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        $r1 = <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i1, $r1);

        return;
    }

    public static void sendWAIT(int)
    {
        int i0, $i2;
        byte b1;
        org.apache.harmony.dalvik.ddmc.Chunk $r0;
        byte[] $r1;

        i0 := @parameter0: int;

        b1 = (byte) i0;

        $r0 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i2 = <android.ddm.DdmHandleHello: int CHUNK_WAIT>;

        $r1 = newarray (byte)[1];

        $r1[0] = b1;

        specialinvoke $r0.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i2, $r1, 0, 1);

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r0);

        return;
    }

    public void connected()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        return;
    }

    public void disconnected()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        return;
    }

    public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r6;
        java.lang.RuntimeException $r5;
        org.apache.harmony.dalvik.ddmc.Chunk $r7, $r8, r9;

        r0 := @this: android.ddm.DdmHandleHello;

        r9 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        i0 = r9.<org.apache.harmony.dalvik.ddmc.Chunk: int type>;

        $i1 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        if i0 != $i1 goto label1;

        $r8 = specialinvoke r0.<android.ddm.DdmHandleHello: org.apache.harmony.dalvik.ddmc.Chunk handleHELO(org.apache.harmony.dalvik.ddmc.Chunk)>(r9);

        return $r8;

     label1:
        $i2 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        if i0 != $i2 goto label2;

        $r7 = specialinvoke r0.<android.ddm.DdmHandleHello: org.apache.harmony.dalvik.ddmc.Chunk handleFEAT(org.apache.harmony.dalvik.ddmc.Chunk)>(r9);

        return $r7;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown packet ");

        $r3 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String name(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }
}
