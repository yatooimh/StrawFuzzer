public class android.filterfw.core.AsyncRunner extends android.filterfw.core.GraphRunner
{
    private static final java.lang.String TAG;
    private boolean isProcessing;
    private android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener;
    private java.lang.Exception mException;
    private boolean mLogVerbose;
    private android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask;
    private android.filterfw.core.SyncRunner mRunner;
    private java.lang.Class mSchedulerClass;

    public void <init>(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        specialinvoke r0.<android.filterfw.core.GraphRunner: void <init>(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterfw.core.AsyncRunner: java.lang.Class mSchedulerClass> = class "Landroid/filterfw/core/SimpleScheduler;";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AsyncRunner", 2);

        r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose> = $z0;

        return;
    }

    public void <init>(android.filterfw.core.FilterContext, java.lang.Class)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.FilterContext r1;
        java.lang.Class r2;
        boolean $z0;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<android.filterfw.core.GraphRunner: void <init>(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterfw.core.AsyncRunner: java.lang.Class mSchedulerClass> = r2;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AsyncRunner", 2);

        r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose> = $z0;

        return;
    }

    static boolean access$100(android.filterfw.core.AsyncRunner)
    {
        android.filterfw.core.AsyncRunner r0;
        boolean $z0;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        $z0 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        return $z0;
    }

    static void access$200(android.filterfw.core.AsyncRunner, boolean)
    {
        android.filterfw.core.AsyncRunner r0;
        boolean z0;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setRunning(boolean)>(z0);

        return;
    }

    static void access$300(android.filterfw.core.AsyncRunner, java.lang.Exception)
    {
        android.filterfw.core.AsyncRunner r0;
        java.lang.Exception r1;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        r1 := @parameter1: java.lang.Exception;

        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setException(java.lang.Exception)>(r1);

        return;
    }

    static android.filterfw.core.SyncRunner access$400(android.filterfw.core.AsyncRunner)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.SyncRunner $r1;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        return $r1;
    }

    static android.filterfw.core.GraphRunner$OnRunnerDoneListener access$500(android.filterfw.core.AsyncRunner)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.GraphRunner$OnRunnerDoneListener $r1;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener>;

        return $r1;
    }

    private void setException(java.lang.Exception)
    {
        android.filterfw.core.AsyncRunner r0;
        java.lang.Throwable $r1;
        java.lang.Exception r2;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r2 := @parameter0: java.lang.Exception;

        entermonitor r0;

     label1:
        r0.<android.filterfw.core.AsyncRunner: java.lang.Exception mException> = r2;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setRunning(boolean)
    {
        android.filterfw.core.AsyncRunner r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: android.filterfw.core.AsyncRunner;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<android.filterfw.core.AsyncRunner: boolean isProcessing> = z0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void close()
    {
        android.filterfw.core.AsyncRunner r0;
        boolean $z0, $z1;
        android.filterfw.core.SyncRunner $r1;
        java.lang.Throwable $r2;
        java.lang.RuntimeException r3;

        r0 := @this: android.filterfw.core.AsyncRunner;

        entermonitor r0;

     label1:
        $z0 = virtualinvoke r0.<android.filterfw.core.AsyncRunner: boolean isRunning()>();

        if $z0 != 0 goto label4;

        $z1 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AsyncRunner", "Closing filters.");

     label2:
        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        virtualinvoke $r1.<android.filterfw.core.SyncRunner: void close()>();

     label3:
        exitmonitor r0;

        return;

     label4:
        r3 = new java.lang.RuntimeException;

        specialinvoke r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot close graph while it is running!");

        throw r3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public java.lang.Exception getError()
    {
        android.filterfw.core.AsyncRunner r0;
        java.lang.Throwable $r1;
        java.lang.Exception r2;

        r0 := @this: android.filterfw.core.AsyncRunner;

        entermonitor r0;

     label1:
        r2 = r0.<android.filterfw.core.AsyncRunner: java.lang.Exception mException>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.filterfw.core.FilterGraph getGraph()
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.SyncRunner r1;
        android.filterfw.core.FilterGraph r2;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public boolean isRunning()
    {
        android.filterfw.core.AsyncRunner r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: android.filterfw.core.AsyncRunner;

        entermonitor r0;

     label1:
        z0 = r0.<android.filterfw.core.AsyncRunner: boolean isProcessing>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void run()
    {
        android.filterfw.core.AsyncRunner r0;
        boolean $z0, $z1;
        android.filterfw.core.SyncRunner $r1, $r3;
        android.filterfw.core.SyncRunner[] $r2;
        android.filterfw.core.AsyncRunner$AsyncRunnerTask $r4, r7;
        java.lang.Throwable $r6;
        java.lang.RuntimeException r8, r9;

        r0 := @this: android.filterfw.core.AsyncRunner;

        entermonitor r0;

     label1:
        $z0 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AsyncRunner", "Running graph.");

     label2:
        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setException(java.lang.Exception)>(null);

        $z1 = virtualinvoke r0.<android.filterfw.core.AsyncRunner: boolean isRunning()>();

        if $z1 != 0 goto label5;

        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        if $r1 == null goto label4;

        r7 = new android.filterfw.core.AsyncRunner$AsyncRunnerTask;

        specialinvoke r7.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void <init>(android.filterfw.core.AsyncRunner,android.filterfw.core.AsyncRunner$1)>(r0, null);

        r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask> = r7;

        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setRunning(boolean)>(1);

        $r4 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        $r2 = newarray (android.filterfw.core.SyncRunner)[1];

        $r3 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        $r2[0] = $r3;

        virtualinvoke $r4.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.os.AsyncTask execute(java.lang.Object[])>($r2);

     label3:
        exitmonitor r0;

        return;

     label4:
        r8 = new java.lang.RuntimeException;

        specialinvoke r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot run before a graph is set!");

        throw r8;

     label5:
        r9 = new java.lang.RuntimeException;

        specialinvoke r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Graph is already running!");

        throw r9;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void setDoneCallback(android.filterfw.core.GraphRunner$OnRunnerDoneListener)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.GraphRunner$OnRunnerDoneListener r1;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: android.filterfw.core.GraphRunner$OnRunnerDoneListener;

        r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener> = r1;

        return;
    }

    public void setGraph(android.filterfw.core.FilterGraph)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.SyncRunner r1;
        boolean $z0;
        java.lang.Class $r2;
        android.filterfw.core.FilterContext $r3;
        java.lang.Throwable $r4;
        android.filterfw.core.FilterGraph r5;
        java.lang.RuntimeException r6;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r5 := @parameter0: android.filterfw.core.FilterGraph;

        entermonitor r0;

     label1:
        $z0 = virtualinvoke r0.<android.filterfw.core.AsyncRunner: boolean isRunning()>();

        if $z0 != 0 goto label3;

        r1 = new android.filterfw.core.SyncRunner;

        $r3 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.FilterContext mFilterContext>;

        $r2 = r0.<android.filterfw.core.AsyncRunner: java.lang.Class mSchedulerClass>;

        specialinvoke r1.<android.filterfw.core.SyncRunner: void <init>(android.filterfw.core.FilterContext,android.filterfw.core.FilterGraph,java.lang.Class)>($r3, r5, $r2);

        r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner> = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        r6 = new java.lang.RuntimeException;

        specialinvoke r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Graph is already running!");

        throw r6;

     label4:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void stop()
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.AsyncRunner$AsyncRunnerTask $r2, $r3, $r4;
        boolean $z0, $z1;
        java.lang.Throwable $r5;

        r0 := @this: android.filterfw.core.AsyncRunner;

        entermonitor r0;

     label1:
        $r2 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        if $r2 == null goto label3;

        $r3 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        $z0 = virtualinvoke $r3.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: boolean isCancelled()>();

        if $z0 != 0 goto label3;

        $z1 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AsyncRunner", "Stopping graph.");

     label2:
        $r4 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        virtualinvoke $r4.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: boolean cancel(boolean)>(0);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static void <clinit>()
    {
        <android.filterfw.core.AsyncRunner: java.lang.String TAG> = "AsyncRunner";

        return;
    }
}
