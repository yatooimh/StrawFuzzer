public class android.filterfw.core.FilterGraph extends java.lang.Object
{
    public static final int AUTOBRANCH_OFF;
    public static final int AUTOBRANCH_SYNCED;
    public static final int AUTOBRANCH_UNSYNCED;
    public static final int TYPECHECK_DYNAMIC;
    public static final int TYPECHECK_OFF;
    public static final int TYPECHECK_STRICT;
    private java.lang.String TAG;
    private int mAutoBranchMode;
    private boolean mDiscardUnconnectedOutputs;
    private java.util.HashSet mFilters;
    private boolean mIsReady;
    private boolean mLogVerbose;
    private java.util.HashMap mNameMap;
    private java.util.HashMap mPreconnections;
    private int mTypeCheckMode;

    public void <init>()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.HashSet $r1;
        java.util.HashMap $r2, $r3;
        boolean $z0;

        r0 := @this: android.filterfw.core.FilterGraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.filterfw.core.FilterGraph: java.util.HashMap mNameMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.filterfw.core.FilterGraph: java.util.HashMap mPreconnections> = $r3;

        r0.<android.filterfw.core.FilterGraph: boolean mIsReady> = 0;

        r0.<android.filterfw.core.FilterGraph: int mAutoBranchMode> = 0;

        r0.<android.filterfw.core.FilterGraph: int mTypeCheckMode> = 2;

        r0.<android.filterfw.core.FilterGraph: boolean mDiscardUnconnectedOutputs> = 0;

        r0.<android.filterfw.core.FilterGraph: java.lang.String TAG> = "FilterGraph";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("FilterGraph", 2);

        r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose> = $z0;

        return;
    }

    private void checkConnections()
    {
        android.filterfw.core.FilterGraph r0;

        r0 := @this: android.filterfw.core.FilterGraph;

        return;
    }

    private void connectPorts()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.HashMap $r2, $r4;
        java.util.Set $r3;
        boolean $z0, $z1, $z3;
        java.lang.Object $r5, $r6, $r7, $r25, $r27, $r34;
        int $i0, $i1, $i2, $i3, i5;
        java.lang.StringBuilder $r8, $r15, $r29;
        java.lang.RuntimeException $r12, $r14;
        java.lang.String $r13, $r19, $r33, r40;
        android.filterpacks.base.FrameBranch $r18;
        android.filterfw.core.KeyValueMap $r20;
        java.lang.Object[] $r21;
        java.lang.Integer $r22;
        android.filterfw.core.InputPort $r23, $r28, $r35;
        java.util.Collection $r24;
        android.filterfw.core.OutputPort $r26, r38;
        java.util.Iterator r36, r43, r44;
        java.util.Map$Entry r37;
        java.util.LinkedList r39;

        r0 := @this: android.filterfw.core.FilterGraph;

        i5 = 1;

        $r2 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mPreconnections>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set entrySet()>();

        r36 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r5 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>();

        r38 = (android.filterfw.core.OutputPort) $r6;

        $r7 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>();

        r39 = (java.util.LinkedList) $r7;

        $i0 = virtualinvoke r39.<java.util.LinkedList: int size()>();

        if $i0 != 1 goto label2;

        $r34 = virtualinvoke r39.<java.util.LinkedList: java.lang.Object get(int)>(0);

        $r35 = (android.filterfw.core.InputPort) $r34;

        virtualinvoke r38.<android.filterfw.core.OutputPort: void connectTo(android.filterfw.core.InputPort)>($r35);

        goto label6;

     label2:
        $i1 = r0.<android.filterfw.core.FilterGraph: int mAutoBranchMode>;

        if $i1 == 0 goto label8;

        $z1 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z1 == 0 goto label3;

        r40 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating branch for ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r40, $r33);

     label3:
        $i2 = r0.<android.filterfw.core.FilterGraph: int mAutoBranchMode>;

        if $i2 != 1 goto label7;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("branch");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r18 = new android.filterpacks.base.FrameBranch;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<android.filterpacks.base.FrameBranch: void <init>(java.lang.String)>($r19);

        $r20 = new android.filterfw.core.KeyValueMap;

        specialinvoke $r20.<android.filterfw.core.KeyValueMap: void <init>()>();

        $r21 = newarray (java.lang.Object)[2];

        $r21[0] = "outputs";

        $i3 = virtualinvoke r39.<java.util.LinkedList: int size()>();

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r21[1] = $r22;

        virtualinvoke $r18.<android.filterpacks.base.FrameBranch: void initWithAssignmentList(java.lang.Object[])>($r21);

        virtualinvoke r0.<android.filterfw.core.FilterGraph: boolean addFilter(android.filterfw.core.Filter)>($r18);

        $r23 = virtualinvoke $r18.<android.filterpacks.base.FrameBranch: android.filterfw.core.InputPort getInputPort(java.lang.String)>("in");

        virtualinvoke r38.<android.filterfw.core.OutputPort: void connectTo(android.filterfw.core.InputPort)>($r23);

        r43 = virtualinvoke r39.<java.util.LinkedList: java.util.Iterator iterator()>();

        $r24 = virtualinvoke $r18.<android.filterfw.core.Filter: java.util.Collection getOutputPorts()>();

        r44 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r25 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (android.filterfw.core.OutputPort) $r25;

        $r27 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        $r28 = (android.filterfw.core.InputPort) $r27;

        virtualinvoke $r26.<android.filterfw.core.OutputPort: void connectTo(android.filterfw.core.InputPort)>($r28);

        goto label4;

     label5:
        i5 = i5 + 1;

     label6:
        goto label1;

     label7:
        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("TODO: Unsynced branches not implemented yet!");

        throw $r14;

     label8:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to connect ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to multiple filter ports! Enable auto-branching to allow this.");

        $r12 = new java.lang.RuntimeException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label9:
        $r4 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mPreconnections>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        return;
    }

    private void discardUnconnectedOutputs()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.Iterator r2, r26, r30;
        android.filterfw.core.Filter r3, $r9;
        android.filterfw.core.OutputPort r4;
        java.util.LinkedList $r6;
        java.util.HashSet $r7;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.lang.Object $r8, $r10, $r12;
        java.util.Collection $r11;
        java.lang.StringBuilder $r13, $r21;
        java.lang.String $r14, $r19, $r25, r27;
        android.filterpacks.base.NullFilter $r18;
        android.filterfw.core.InputPort $r20;
        int i1, i2;

        r0 := @this: android.filterfw.core.FilterGraph;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        $r7 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        r2 = virtualinvoke $r7.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.filterfw.core.Filter) $r10;

        i1 = 0;

        $r11 = virtualinvoke r3.<android.filterfw.core.Filter: java.util.Collection getOutputPorts()>();

        r26 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r12 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.filterfw.core.OutputPort) $r12;

        i2 = i1;

        $z4 = virtualinvoke r4.<android.filterfw.core.OutputPort: boolean isConnected()>();

        if $z4 != 0 goto label4;

        $z5 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z5 == 0 goto label3;

        r27 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Autoconnecting unconnected ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Null filter.");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r27, $r25);

     label3:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r3.<android.filterfw.core.Filter: java.lang.String getName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ToNull");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = new android.filterpacks.base.NullFilter;

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<android.filterpacks.base.NullFilter: void <init>(java.lang.String)>($r19);

        virtualinvoke $r18.<android.filterpacks.base.NullFilter: void init()>();

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r18.<android.filterpacks.base.NullFilter: android.filterfw.core.InputPort getInputPort(java.lang.String)>("frame");

        virtualinvoke r4.<android.filterfw.core.OutputPort: void connectTo(android.filterfw.core.InputPort)>($r20);

        i2 = i1 + 1;

     label4:
        i1 = i2;

        goto label2;

     label5:
        goto label1;

     label6:
        r30 = virtualinvoke $r6.<java.util.LinkedList: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.filterfw.core.Filter) $r8;

        virtualinvoke r0.<android.filterfw.core.FilterGraph: boolean addFilter(android.filterfw.core.Filter)>($r9);

        goto label7;

     label8:
        return;
    }

    private java.util.HashSet getSourceFilters()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.Iterator r2;
        android.filterfw.core.Filter r3;
        java.lang.String r4, $r12;
        java.util.HashSet $r6;
        java.util.Set $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        int $i0;
        java.lang.StringBuilder $r9;

        r0 := @this: android.filterfw.core.FilterGraph;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = virtualinvoke r0.<android.filterfw.core.FilterGraph: java.util.Set getFilters()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.filterfw.core.Filter) $r8;

        $i0 = virtualinvoke r3.<android.filterfw.core.Filter: int getNumberOfConnectedInputs()>();

        if $i0 != 0 goto label3;

        $z1 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        r4 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found source filter: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r4, $r12);

     label2:
        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

     label3:
        goto label1;

     label4:
        return $r6;
    }

    private void preconnect(android.filterfw.core.OutputPort, android.filterfw.core.InputPort)
    {
        android.filterfw.core.FilterGraph r0;
        android.filterfw.core.OutputPort r1;
        android.filterfw.core.InputPort r2;
        java.util.LinkedList r3, $r6, r9;
        java.util.HashMap $r4, $r7;
        java.lang.Object $r5;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: android.filterfw.core.OutputPort;

        r2 := @parameter1: android.filterfw.core.InputPort;

        $r4 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mPreconnections>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.LinkedList) $r5;

        r9 = r3;

        if r3 != null goto label1;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r9 = $r6;

        $r7 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mPreconnections>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label1:
        virtualinvoke r9.<java.util.LinkedList: boolean add(java.lang.Object)>(r2);

        return;
    }

    private boolean readyForProcessing(android.filterfw.core.Filter, java.util.Set)
    {
        android.filterfw.core.FilterGraph r0;
        java.util.Set r1;
        android.filterfw.core.Filter r2, r6;
        boolean $z0, $z1, $z2;
        java.util.Collection $r3;
        java.lang.Object $r4;
        android.filterfw.core.InputPort $r5;
        java.util.Iterator r7;

        r0 := @this: android.filterfw.core.FilterGraph;

        r6 := @parameter0: android.filterfw.core.Filter;

        r1 := @parameter1: java.util.Set;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r6.<android.filterfw.core.Filter: java.util.Collection getInputPorts()>();

        r7 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.filterfw.core.InputPort) $r4;

        r2 = virtualinvoke $r5.<android.filterfw.core.InputPort: android.filterfw.core.Filter getSourceFilter()>();

        if r2 == null goto label3;

        $z2 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    private void removeFilter(android.filterfw.core.Filter)
    {
        android.filterfw.core.FilterGraph r0;
        android.filterfw.core.Filter r1;
        java.util.HashSet $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: android.filterfw.core.Filter;

        $r2 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        virtualinvoke $r2.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mNameMap>;

        $r4 = virtualinvoke r1.<android.filterfw.core.Filter: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    private void runTypeCheck()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.Stack $r4;
        java.util.HashSet $r5, $r6;
        boolean $z1, $z3, $z4, $z5;
        int $i0, $i1;
        java.util.Set $r7;
        java.lang.RuntimeException $r8;
        java.lang.Object $r9, $r11;
        java.util.Collection $r10;
        android.filterfw.core.OutputPort $r12;
        java.lang.StringBuilder $r14;
        java.lang.String $r18, r20;
        android.filterfw.core.Filter r19, r22;
        java.util.Iterator r21;

        r0 := @this: android.filterfw.core.FilterGraph;

        $r4 = new java.util.Stack;

        specialinvoke $r4.<java.util.Stack: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = specialinvoke r0.<android.filterfw.core.FilterGraph: java.util.HashSet getSourceFilters()>();

        virtualinvoke $r4.<java.util.Stack: boolean addAll(java.util.Collection)>($r6);

     label1:
        $z1 = virtualinvoke $r4.<java.util.Stack: boolean empty()>();

        if $z1 != 0 goto label6;

        $r9 = virtualinvoke $r4.<java.util.Stack: java.lang.Object pop()>();

        r19 = (android.filterfw.core.Filter) $r9;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r19);

        specialinvoke r0.<android.filterfw.core.FilterGraph: void updateOutputs(android.filterfw.core.Filter)>(r19);

        $z3 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z3 == 0 goto label2;

        r20 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running type check on ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r20, $r18);

     label2:
        specialinvoke r0.<android.filterfw.core.FilterGraph: void runTypeCheckOn(android.filterfw.core.Filter)>(r19);

        $r10 = virtualinvoke r19.<android.filterfw.core.Filter: java.util.Collection getOutputPorts()>();

        r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r11 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (android.filterfw.core.OutputPort) $r11;

        r22 = virtualinvoke $r12.<android.filterfw.core.OutputPort: android.filterfw.core.Filter getTargetFilter()>();

        if r22 == null goto label4;

        $z4 = specialinvoke r0.<android.filterfw.core.FilterGraph: boolean readyForProcessing(android.filterfw.core.Filter,java.util.Set)>(r22, $r5);

        if $z4 == 0 goto label4;

        virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r22);

     label4:
        goto label3;

     label5:
        goto label1;

     label6:
        $i0 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r7 = virtualinvoke r0.<android.filterfw.core.FilterGraph: java.util.Set getFilters()>();

        $i1 = interfaceinvoke $r7.<java.util.Set: int size()>();

        if $i0 != $i1 goto label7;

        return;

     label7:
        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not schedule all filters! Is your graph malformed?");

        throw $r8;
    }

    private void runTypeCheckOn(android.filterfw.core.Filter)
    {
        android.filterfw.core.FilterGraph r0;
        android.filterfw.core.Filter r1;
        java.util.Iterator r2;
        java.lang.String r3, $r16, $r23, $r27, r29;
        int i0;
        java.util.Collection $r5;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r17, $r24;
        java.lang.RuntimeException $r15;
        android.filterfw.core.InputPort r28;
        android.filterfw.core.FrameFormat r31, r32;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: android.filterfw.core.Filter;

        $r5 = virtualinvoke r1.<android.filterfw.core.Filter: java.util.Collection getInputPorts()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r28 = (android.filterfw.core.InputPort) $r6;

        $z1 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z1 == 0 goto label02;

        r29 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type checking port ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r29, $r27);

     label02:
        r31 = virtualinvoke r28.<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getSourceFormat()>();

        r32 = virtualinvoke r28.<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getPortFormat()>();

        if r31 == null goto label09;

        if r32 == null goto label09;

        $z2 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z2 == 0 goto label03;

        r3 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" against ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r3, $r23);

     label03:
        z3 = 1;

        i0 = r0.<android.filterfw.core.FilterGraph: int mTypeCheckMode>;

        if i0 == 0 goto label06;

        if i0 == 1 goto label05;

        if i0 == 2 goto label04;

        goto label07;

     label04:
        z3 = virtualinvoke r31.<android.filterfw.core.FrameFormat: boolean isCompatibleWith(android.filterfw.core.FrameFormat)>(r32);

        virtualinvoke r28.<android.filterfw.core.InputPort: void setChecksType(boolean)>(0);

        goto label07;

     label05:
        z3 = virtualinvoke r31.<android.filterfw.core.FrameFormat: boolean mayBeCompatibleWith(android.filterfw.core.FrameFormat)>(r32);

        virtualinvoke r28.<android.filterfw.core.InputPort: void setChecksType(boolean)>(1);

        goto label07;

     label06:
        virtualinvoke r28.<android.filterfw.core.InputPort: void setChecksType(boolean)>(0);

     label07:
        if z3 == 0 goto label08;

        goto label09;

     label08:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: Filter ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expects a format of type ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got a format of type ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r15 = new java.lang.RuntimeException;

        $r16 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label09:
        goto label01;

     label10:
        return;
    }

    private void updateOutputs(android.filterfw.core.Filter)
    {
        android.filterfw.core.FilterGraph r0;
        java.util.Iterator r1;
        android.filterfw.core.OutputPort r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5, $r11;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r10;
        android.filterfw.core.Filter r12;
        android.filterfw.core.InputPort r13;
        android.filterfw.core.FrameFormat r14, r15;

        r0 := @this: android.filterfw.core.FilterGraph;

        r12 := @parameter0: android.filterfw.core.Filter;

        $r3 = virtualinvoke r12.<android.filterfw.core.Filter: java.util.Collection getOutputPorts()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.filterfw.core.OutputPort) $r4;

        r13 = virtualinvoke r2.<android.filterfw.core.OutputPort: android.filterfw.core.InputPort getBasePort()>();

        if r13 == null goto label3;

        r14 = virtualinvoke r13.<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getSourceFormat()>();

        $r5 = virtualinvoke r2.<android.filterfw.core.OutputPort: java.lang.String getName()>();

        r15 = virtualinvoke r12.<android.filterfw.core.Filter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>($r5, r14);

        if r15 == null goto label2;

        virtualinvoke r2.<android.filterfw.core.OutputPort: void setPortFormat(android.filterfw.core.FrameFormat)>(r15);

        goto label3;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter did not return an output format for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label3:
        goto label1;

     label4:
        return;
    }

    public boolean addFilter(android.filterfw.core.Filter)
    {
        android.filterfw.core.FilterGraph r0;
        android.filterfw.core.Filter r1;
        boolean $z0;
        java.util.HashSet $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: android.filterfw.core.Filter;

        $z0 = virtualinvoke r0.<android.filterfw.core.FilterGraph: boolean containsFilter(android.filterfw.core.Filter)>(r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mNameMap>;

        $r4 = virtualinvoke r1.<android.filterfw.core.Filter: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        return 1;

     label1:
        return 0;
    }

    public void beginProcessing()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.Iterator r1;
        boolean $z0, $z1;
        java.util.HashSet $r2;
        java.lang.Object $r3;
        android.filterfw.core.Filter $r4;
        java.lang.String $r5;

        r0 := @this: android.filterfw.core.FilterGraph;

        $z0 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r5 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r5, "Opening all filter connections...");

     label1:
        $r2 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        r1 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.filterfw.core.Filter) $r3;

        virtualinvoke $r4.<android.filterfw.core.Filter: void openOutputs()>();

        goto label2;

     label3:
        r0.<android.filterfw.core.FilterGraph: boolean mIsReady> = 1;

        return;
    }

    public void closeFilters(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.FilterGraph r0;
        android.filterfw.core.FilterContext r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.util.HashSet $r3;
        java.lang.Object $r4;
        android.filterfw.core.Filter $r5;
        java.lang.String $r6;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterfw.core.FilterGraph: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r6 = r0.<android.filterfw.core.FilterGraph: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r6, "Closing all filters...");

     label1:
        $r3 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        r2 = virtualinvoke $r3.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.filterfw.core.Filter) $r4;

        virtualinvoke $r5.<android.filterfw.core.Filter: void performClose(android.filterfw.core.FilterContext)>(r1);

        goto label2;

     label3:
        r0.<android.filterfw.core.FilterGraph: boolean mIsReady> = 0;

        return;
    }

    public void connect(android.filterfw.core.Filter, java.lang.String, android.filterfw.core.Filter, java.lang.String)
    {
        android.filterfw.core.FilterGraph r0;
        java.lang.String r1, r2, $r14, $r22;
        android.filterfw.core.OutputPort r3;
        android.filterfw.core.InputPort r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0, $z1;
        java.lang.RuntimeException $r6, $r13, $r21;
        java.lang.StringBuilder $r7, $r15;
        android.filterfw.core.Filter r23, r24;

        r0 := @this: android.filterfw.core.FilterGraph;

        r23 := @parameter0: android.filterfw.core.Filter;

        r1 := @parameter1: java.lang.String;

        r24 := @parameter2: android.filterfw.core.Filter;

        r2 := @parameter3: java.lang.String;

        if r23 == null goto label4;

        if r24 == null goto label4;

        $z0 = virtualinvoke r0.<android.filterfw.core.FilterGraph: boolean containsFilter(android.filterfw.core.Filter)>(r23);

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<android.filterfw.core.FilterGraph: boolean containsFilter(android.filterfw.core.Filter)>(r24);

        if $z1 == 0 goto label3;

        r3 = virtualinvoke r23.<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)>(r1);

        r4 = virtualinvoke r24.<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>(r2);

        if r3 == null goto label2;

        if r4 == null goto label1;

        specialinvoke r0.<android.filterfw.core.FilterGraph: void preconnect(android.filterfw.core.OutputPort,android.filterfw.core.InputPort)>(r3, r4);

        return;

     label1:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown input port \'");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on Filter ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r21 = new java.lang.RuntimeException;

        $r22 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown output port \'");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on Filter ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r13 = new java.lang.RuntimeException;

        $r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label3:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to connect filter not in graph!");

        throw $r6;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Passing null Filter in connect()!");

        throw $r5;
    }

    public void connect(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.filterfw.core.FilterGraph r0;
        java.lang.String r1, r2, $r10, $r16, r17, r18;
        android.filterfw.core.Filter r3, r4;
        java.lang.StringBuilder $r5, $r11;
        java.lang.RuntimeException $r9, $r15;

        r0 := @this: android.filterfw.core.FilterGraph;

        r17 := @parameter0: java.lang.String;

        r18 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 = virtualinvoke r0.<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)>(r17);

        r4 = virtualinvoke r0.<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)>(r1);

        if r3 == null goto label2;

        if r4 == null goto label1;

        virtualinvoke r0.<android.filterfw.core.FilterGraph: void connect(android.filterfw.core.Filter,java.lang.String,android.filterfw.core.Filter,java.lang.String)>(r3, r18, r4, r2);

        return;

     label1:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to connect unknown target filter \'");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r15 = new java.lang.RuntimeException;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to connect unknown source filter \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r9 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public boolean containsFilter(android.filterfw.core.Filter)
    {
        android.filterfw.core.FilterGraph r0;
        android.filterfw.core.Filter r1;
        java.util.HashSet $r2;
        boolean $z0;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: android.filterfw.core.Filter;

        $r2 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void flushFrames()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.Iterator r1;
        java.util.HashSet $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.filterfw.core.Filter $r4;

        r0 := @this: android.filterfw.core.FilterGraph;

        $r2 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        r1 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.filterfw.core.Filter) $r3;

        virtualinvoke $r4.<android.filterfw.core.Filter: void clearOutputs()>();

        goto label1;

     label2:
        return;
    }

    public android.filterfw.core.Filter getFilter(java.lang.String)
    {
        android.filterfw.core.FilterGraph r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.filterfw.core.Filter $r4;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mNameMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.filterfw.core.Filter) $r3;

        return $r4;
    }

    public java.util.Set getFilters()
    {
        android.filterfw.core.FilterGraph r0;
        java.util.HashSet $r1;

        r0 := @this: android.filterfw.core.FilterGraph;

        $r1 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        return $r1;
    }

    public boolean isReady()
    {
        android.filterfw.core.FilterGraph r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.FilterGraph;

        $z0 = r0.<android.filterfw.core.FilterGraph: boolean mIsReady>;

        return $z0;
    }

    public void setAutoBranchMode(int)
    {
        android.filterfw.core.FilterGraph r0;
        int i0;

        r0 := @this: android.filterfw.core.FilterGraph;

        i0 := @parameter0: int;

        r0.<android.filterfw.core.FilterGraph: int mAutoBranchMode> = i0;

        return;
    }

    public void setDiscardUnconnectedOutputs(boolean)
    {
        android.filterfw.core.FilterGraph r0;
        boolean z0;

        r0 := @this: android.filterfw.core.FilterGraph;

        z0 := @parameter0: boolean;

        r0.<android.filterfw.core.FilterGraph: boolean mDiscardUnconnectedOutputs> = z0;

        return;
    }

    public void setTypeCheckMode(int)
    {
        android.filterfw.core.FilterGraph r0;
        int i0;

        r0 := @this: android.filterfw.core.FilterGraph;

        i0 := @parameter0: int;

        r0.<android.filterfw.core.FilterGraph: int mTypeCheckMode> = i0;

        return;
    }

    void setupFilters()
    {
        android.filterfw.core.FilterGraph r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.FilterGraph;

        $z0 = r0.<android.filterfw.core.FilterGraph: boolean mDiscardUnconnectedOutputs>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.filterfw.core.FilterGraph: void discardUnconnectedOutputs()>();

     label1:
        specialinvoke r0.<android.filterfw.core.FilterGraph: void connectPorts()>();

        specialinvoke r0.<android.filterfw.core.FilterGraph: void checkConnections()>();

        specialinvoke r0.<android.filterfw.core.FilterGraph: void runTypeCheck()>();

        return;
    }

    public void tearDown(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.FilterGraph r0;
        android.filterfw.core.FilterContext r1;
        java.util.Iterator r2;
        java.util.HashSet $r3, $r4, $r5;
        boolean $z0, $z1;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        android.filterfw.core.Filter $r8;

        r0 := @this: android.filterfw.core.FilterGraph;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r3 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        $z0 = virtualinvoke $r3.<java.util.HashSet: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<android.filterfw.core.FilterGraph: void flushFrames()>();

        $r4 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        r2 = virtualinvoke $r4.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.filterfw.core.Filter) $r7;

        virtualinvoke $r8.<android.filterfw.core.Filter: void performTearDown(android.filterfw.core.FilterContext)>(r1);

        goto label1;

     label2:
        $r5 = r0.<android.filterfw.core.FilterGraph: java.util.HashSet mFilters>;

        virtualinvoke $r5.<java.util.HashSet: void clear()>();

        $r6 = r0.<android.filterfw.core.FilterGraph: java.util.HashMap mNameMap>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        r0.<android.filterfw.core.FilterGraph: boolean mIsReady> = 0;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <android.filterfw.core.FilterGraph: int TYPECHECK_STRICT> = 2;

        <android.filterfw.core.FilterGraph: int TYPECHECK_OFF> = 0;

        <android.filterfw.core.FilterGraph: int TYPECHECK_DYNAMIC> = 1;

        <android.filterfw.core.FilterGraph: int AUTOBRANCH_UNSYNCED> = 2;

        <android.filterfw.core.FilterGraph: int AUTOBRANCH_SYNCED> = 1;

        <android.filterfw.core.FilterGraph: int AUTOBRANCH_OFF> = 0;

        return;
    }
}
