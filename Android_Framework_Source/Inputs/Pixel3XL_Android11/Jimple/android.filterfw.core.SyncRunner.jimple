public class android.filterfw.core.SyncRunner extends android.filterfw.core.GraphRunner
{
    private static final java.lang.String TAG;
    private android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener;
    private final boolean mLogVerbose;
    private android.filterfw.core.Scheduler mScheduler;
    private android.filterfw.core.StopWatchMap mTimer;
    private android.os.ConditionVariable mWakeCondition;
    private java.util.concurrent.ScheduledThreadPoolExecutor mWakeExecutor;

    public void <init>(android.filterfw.core.FilterContext, android.filterfw.core.FilterGraph, java.lang.Class)
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.FilterGraph r1;
        java.lang.Class r2, $r5;
        boolean z0, $z1, $z2;
        java.util.concurrent.ScheduledThreadPoolExecutor $r3;
        android.os.ConditionVariable $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.Class[] $r7;
        java.lang.reflect.Constructor $r8;
        java.lang.Object[] $r9;
        java.lang.Object $r10;
        android.filterfw.core.Scheduler $r11;
        android.filterfw.core.FilterContext $r12, r24;
        android.filterfw.core.StopWatchMap $r13;
        java.lang.Throwable $r14, $r18, $r20, $r22;
        java.lang.RuntimeException $r15, $r17, $r19, $r21, $r23;
        java.lang.Exception $r16;

        r0 := @this: android.filterfw.core.SyncRunner;

        r24 := @parameter0: android.filterfw.core.FilterContext;

        r1 := @parameter1: android.filterfw.core.FilterGraph;

        r2 := @parameter2: java.lang.Class;

        specialinvoke r0.<android.filterfw.core.GraphRunner: void <init>(android.filterfw.core.FilterContext)>(r24);

        r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler> = null;

        r0.<android.filterfw.core.SyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener> = null;

        $r3 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r3.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(1);

        r0.<android.filterfw.core.SyncRunner: java.util.concurrent.ScheduledThreadPoolExecutor mWakeExecutor> = $r3;

        $r4 = new android.os.ConditionVariable;

        specialinvoke $r4.<android.os.ConditionVariable: void <init>()>();

        r0.<android.filterfw.core.SyncRunner: android.os.ConditionVariable mWakeCondition> = $r4;

        r0.<android.filterfw.core.SyncRunner: android.filterfw.core.StopWatchMap mTimer> = null;

        z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SyncRunner", 2);

        r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose> = z0;

        if z0 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Initializing SyncRunner");

     label01:
        $r5 = class "Landroid/filterfw/core/Scheduler;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z1 == 0 goto label10;

     label02:
        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "Landroid/filterfw/core/FilterGraph;";

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r7);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        $r10 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        $r11 = (android.filterfw.core.Scheduler) $r10;

        r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler> = $r11;

     label03:
        r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterContext mFilterContext> = r24;

        $r12 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterContext mFilterContext>;

        virtualinvoke $r12.<android.filterfw.core.FilterContext: void addGraph(android.filterfw.core.FilterGraph)>(r1);

        $r13 = new android.filterfw.core.StopWatchMap;

        specialinvoke $r13.<android.filterfw.core.StopWatchMap: void <init>()>();

        r0.<android.filterfw.core.SyncRunner: android.filterfw.core.StopWatchMap mTimer> = $r13;

        $z2 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z2 == 0 goto label04;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Setting up filters");

     label04:
        virtualinvoke r1.<android.filterfw.core.FilterGraph: void setupFilters()>();

        return;

     label05:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not instantiate Scheduler", $r16);

        throw $r17;

     label06:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Scheduler constructor threw an exception", $r18);

        throw $r19;

     label07:
        $r20 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot access Scheduler constructor!", $r20);

        throw $r21;

     label08:
        $r22 := @caughtexception;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not instantiate the Scheduler instance!", $r22);

        throw $r23;

     label09:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Scheduler does not have constructor <init>(FilterGraph)!", $r14);

        throw $r15;

     label10:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Class provided is not a Scheduler subclass!");

        throw $r6;

        catch java.lang.NoSuchMethodException from label02 to label03 with label09;
        catch java.lang.InstantiationException from label02 to label03 with label08;
        catch java.lang.IllegalAccessException from label02 to label03 with label07;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label06;
        catch java.lang.Exception from label02 to label03 with label05;
    }

    void assertReadyToStep()
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.Scheduler $r1;
        java.lang.RuntimeException $r2, $r4;
        android.filterfw.core.FilterGraph $r3;

        r0 := @this: android.filterfw.core.SyncRunner;

        $r1 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler>;

        if $r1 == null goto label2;

        $r3 = virtualinvoke r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()>();

        if $r3 == null goto label1;

        return;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Calling step on scheduler with no graph in place!");

        throw $r4;

     label2:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to run schedule with no scheduler in place!");

        throw $r2;
    }

    public void beginProcessing()
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.Scheduler $r1;
        android.filterfw.core.FilterGraph $r2;

        r0 := @this: android.filterfw.core.SyncRunner;

        $r1 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler>;

        virtualinvoke $r1.<android.filterfw.core.Scheduler: void reset()>();

        $r2 = virtualinvoke r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()>();

        virtualinvoke $r2.<android.filterfw.core.FilterGraph: void beginProcessing()>();

        return;
    }

    public void close()
    {
        android.filterfw.core.SyncRunner r0;
        boolean $z0;
        android.filterfw.core.FilterGraph $r1;
        android.filterfw.core.FilterContext $r2;
        android.filterfw.core.Scheduler $r3;

        r0 := @this: android.filterfw.core.SyncRunner;

        $z0 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Closing graph.");

     label1:
        $r1 = virtualinvoke r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()>();

        $r2 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterContext mFilterContext>;

        virtualinvoke $r1.<android.filterfw.core.FilterGraph: void closeFilters(android.filterfw.core.FilterContext)>($r2);

        $r3 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler>;

        virtualinvoke $r3.<android.filterfw.core.Scheduler: void reset()>();

        return;
    }

    protected int determinePostRunState()
    {
        android.filterfw.core.SyncRunner r0;
        java.util.Iterator r1;
        android.filterfw.core.Filter r2;
        android.filterfw.core.Scheduler $r3;
        android.filterfw.core.FilterGraph $r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        int $i0;

        r0 := @this: android.filterfw.core.SyncRunner;

        $r3 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler>;

        $r4 = virtualinvoke $r3.<android.filterfw.core.Scheduler: android.filterfw.core.FilterGraph getGraph()>();

        $r5 = virtualinvoke $r4.<android.filterfw.core.FilterGraph: java.util.Set getFilters()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.filterfw.core.Filter) $r6;

        $z1 = virtualinvoke r2.<android.filterfw.core.Filter: boolean isOpen()>();

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r2.<android.filterfw.core.Filter: int getStatus()>();

        if $i0 != 4 goto label2;

        return 3;

     label2:
        return 4;

     label3:
        goto label1;

     label4:
        return 2;
    }

    public java.lang.Exception getError()
    {
        android.filterfw.core.SyncRunner r0;

        r0 := @this: android.filterfw.core.SyncRunner;

        entermonitor r0;

        exitmonitor r0;

        return null;
    }

    public android.filterfw.core.FilterGraph getGraph()
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.Scheduler r1;
        android.filterfw.core.FilterGraph r2;

        r0 := @this: android.filterfw.core.SyncRunner;

        r1 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.filterfw.core.Scheduler: android.filterfw.core.FilterGraph getGraph()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public boolean isRunning()
    {
        android.filterfw.core.SyncRunner r0;

        r0 := @this: android.filterfw.core.SyncRunner;

        return 0;
    }

    boolean performStep()
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.Filter r1;
        boolean $z0;
        android.filterfw.core.Scheduler $r2;
        android.filterfw.core.StopWatchMap $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: android.filterfw.core.SyncRunner;

        $z0 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Performing one step.");

     label1:
        $r2 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.Scheduler mScheduler>;

        r1 = virtualinvoke $r2.<android.filterfw.core.Scheduler: android.filterfw.core.Filter scheduleNextNode()>();

        if r1 == null goto label2;

        $r3 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.StopWatchMap mTimer>;

        $r4 = virtualinvoke r1.<android.filterfw.core.Filter: java.lang.String getName()>();

        virtualinvoke $r3.<android.filterfw.core.StopWatchMap: void start(java.lang.String)>($r4);

        virtualinvoke r0.<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)>(r1);

        $r5 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.StopWatchMap mTimer>;

        $r6 = virtualinvoke r1.<android.filterfw.core.Filter: java.lang.String getName()>();

        virtualinvoke $r5.<android.filterfw.core.StopWatchMap: void stop(java.lang.String)>($r6);

        return 1;

     label2:
        return 0;
    }

    protected void processFilterNode(android.filterfw.core.Filter)
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.Filter r1;
        boolean $z0, $z1;
        android.filterfw.core.FilterContext $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4;
        java.lang.RuntimeException $r8;
        java.lang.String $r9;

        r0 := @this: android.filterfw.core.SyncRunner;

        r1 := @parameter0: android.filterfw.core.Filter;

        $z0 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Processing filter node");

     label1:
        $r3 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterContext mFilterContext>;

        virtualinvoke r1.<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)>($r3);

        $i0 = virtualinvoke r1.<android.filterfw.core.Filter: int getStatus()>();

        if $i0 == 6 goto label4;

        $i1 = virtualinvoke r1.<android.filterfw.core.Filter: int getStatus()>();

        if $i1 != 4 goto label3;

        $z1 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Scheduling filter wakeup");

     label2:
        $i2 = virtualinvoke r1.<android.filterfw.core.Filter: int getSleepDelay()>();

        virtualinvoke r0.<android.filterfw.core.SyncRunner: void scheduleFilterWake(android.filterfw.core.Filter,int)>(r1, $i2);

     label3:
        return;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was an error executing ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r8 = new java.lang.RuntimeException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void run()
    {
        android.filterfw.core.SyncRunner r0;
        boolean z0, $z1, $z2, z3, $z4;
        android.filterfw.core.GraphRunner$OnRunnerDoneListener $r1, $r2;
        int $i1;

        r0 := @this: android.filterfw.core.SyncRunner;

        $z1 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Beginning run.");

     label1:
        virtualinvoke r0.<android.filterfw.core.SyncRunner: void assertReadyToStep()>();

        virtualinvoke r0.<android.filterfw.core.SyncRunner: void beginProcessing()>();

        z0 = virtualinvoke r0.<android.filterfw.core.SyncRunner: boolean activateGlContext()>();

        z3 = 1;

     label2:
        if z3 == 0 goto label3;

        z3 = virtualinvoke r0.<android.filterfw.core.SyncRunner: boolean performStep()>();

        goto label2;

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r0.<android.filterfw.core.SyncRunner: void deactivateGlContext()>();

     label4:
        $r1 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener>;

        if $r1 == null goto label6;

        $z2 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z2 == 0 goto label5;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Calling completion listener.");

     label5:
        $r2 = r0.<android.filterfw.core.SyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener>;

        $i1 = virtualinvoke r0.<android.filterfw.core.SyncRunner: int determinePostRunState()>();

        interfaceinvoke $r2.<android.filterfw.core.GraphRunner$OnRunnerDoneListener: void onRunnerDone(int)>($i1);

     label6:
        $z4 = r0.<android.filterfw.core.SyncRunner: boolean mLogVerbose>;

        if $z4 == 0 goto label7;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncRunner", "Run complete");

     label7:
        return;
    }

    protected void scheduleFilterWake(android.filterfw.core.Filter, int)
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.Filter r1;
        int i0;
        android.os.ConditionVariable r2, $r3;
        android.filterfw.core.SyncRunner$1 $r4;
        java.util.concurrent.ScheduledThreadPoolExecutor $r5;
        java.util.concurrent.TimeUnit $r6;
        long $l1;

        r0 := @this: android.filterfw.core.SyncRunner;

        r1 := @parameter0: android.filterfw.core.Filter;

        i0 := @parameter1: int;

        $r3 = r0.<android.filterfw.core.SyncRunner: android.os.ConditionVariable mWakeCondition>;

        virtualinvoke $r3.<android.os.ConditionVariable: void close()>();

        r2 = r0.<android.filterfw.core.SyncRunner: android.os.ConditionVariable mWakeCondition>;

        $r5 = r0.<android.filterfw.core.SyncRunner: java.util.concurrent.ScheduledThreadPoolExecutor mWakeExecutor>;

        $r4 = new android.filterfw.core.SyncRunner$1;

        specialinvoke $r4.<android.filterfw.core.SyncRunner$1: void <init>(android.filterfw.core.SyncRunner,android.filterfw.core.Filter,android.os.ConditionVariable)>(r0, r1, r2);

        $l1 = (long) i0;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r5.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, $l1, $r6);

        return;
    }

    public void setDoneCallback(android.filterfw.core.GraphRunner$OnRunnerDoneListener)
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.GraphRunner$OnRunnerDoneListener r1;

        r0 := @this: android.filterfw.core.SyncRunner;

        r1 := @parameter0: android.filterfw.core.GraphRunner$OnRunnerDoneListener;

        r0.<android.filterfw.core.SyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener> = r1;

        return;
    }

    public int step()
    {
        android.filterfw.core.SyncRunner r0;
        android.filterfw.core.FilterGraph $r1;
        boolean $z0, $z1;
        java.lang.RuntimeException $r2;
        int i0;

        r0 := @this: android.filterfw.core.SyncRunner;

        virtualinvoke r0.<android.filterfw.core.SyncRunner: void assertReadyToStep()>();

        $r1 = virtualinvoke r0.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()>();

        $z0 = virtualinvoke $r1.<android.filterfw.core.FilterGraph: boolean isReady()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<android.filterfw.core.SyncRunner: boolean performStep()>();

        if $z1 == 0 goto label1;

        i0 = 1;

        goto label2;

     label1:
        i0 = virtualinvoke r0.<android.filterfw.core.SyncRunner: int determinePostRunState()>();

     label2:
        return i0;

     label3:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to process graph that is not open!");

        throw $r2;
    }

    public void stop()
    {
        android.filterfw.core.SyncRunner r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.SyncRunner;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("SyncRunner does not support stopping a graph!");

        throw $r1;
    }

    protected void waitUntilWake()
    {
        android.filterfw.core.SyncRunner r0;
        android.os.ConditionVariable $r1;

        r0 := @this: android.filterfw.core.SyncRunner;

        $r1 = r0.<android.filterfw.core.SyncRunner: android.os.ConditionVariable mWakeCondition>;

        virtualinvoke $r1.<android.os.ConditionVariable: void block()>();

        return;
    }

    public static void <clinit>()
    {
        <android.filterfw.core.SyncRunner: java.lang.String TAG> = "SyncRunner";

        return;
    }
}
