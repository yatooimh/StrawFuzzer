public class android.filterfw.format.ObjectFormat extends java.lang.Object
{

    public void <init>()
    {
        android.filterfw.format.ObjectFormat r0;

        r0 := @this: android.filterfw.format.ObjectFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int bytesPerSampleForClass(java.lang.Class, int)
    {
        java.lang.Class r0, $r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r11;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, $r16;
        java.lang.Object $r8;
        android.filterfw.core.NativeBuffer $r9;
        java.lang.Exception $r10;
        java.lang.RuntimeException $r15;
        int i0, i1;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        if i0 != 2 goto label5;

        $r1 = class "Landroid/filterfw/core/NativeBuffer;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label4;

     label1:
        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r9 = (android.filterfw.core.NativeBuffer) $r8;

        i1 = virtualinvoke $r9.<android.filterfw.core.NativeBuffer: int getElementSize()>();

     label2:
        return i1;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not determine the size of an element in a native object-based frame of type ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("! Perhaps it is missing a default constructor?");

        $r15 = new java.lang.RuntimeException;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Native object-based formats must be of a NativeBuffer subclass! (Received class: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label5:
        return 1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class, int)
    {
        java.lang.Class r0;
        int i0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)>(r0, 0, i0);

        return $r1;
    }

    public static android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class, int, int)
    {
        java.lang.Class r0, $r3;
        int i0, i1, $i2;
        android.filterfw.core.MutableFrameFormat $r2;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r2.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(8, i1);

        $r3 = staticinvoke <android.filterfw.format.ObjectFormat: java.lang.Class getBoxedClass(java.lang.Class)>(r0);

        virtualinvoke $r2.<android.filterfw.core.MutableFrameFormat: void setObjectClass(java.lang.Class)>($r3);

        if i0 == 0 goto label1;

        virtualinvoke $r2.<android.filterfw.core.MutableFrameFormat: void setDimensions(int)>(i0);

     label1:
        $i2 = staticinvoke <android.filterfw.format.ObjectFormat: int bytesPerSampleForClass(java.lang.Class,int)>(r0, i1);

        virtualinvoke $r2.<android.filterfw.core.MutableFrameFormat: void setBytesPerSample(int)>($i2);

        return $r2;
    }

    public static android.filterfw.core.MutableFrameFormat fromObject(java.lang.Object, int)
    {
        int i0;
        java.lang.Class $r0;
        android.filterfw.core.MutableFrameFormat $r1, r3;
        java.lang.Object r2;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r2 != null goto label1;

        $r1 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r1.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(8, i0);

        r3 = $r1;

        goto label2;

     label1:
        $r0 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        r3 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)>($r0, 0, i0);

     label2:
        return r3;
    }

    public static android.filterfw.core.MutableFrameFormat fromObject(java.lang.Object, int, int)
    {
        int i0, i1;
        java.lang.Class $r0;
        android.filterfw.core.MutableFrameFormat $r1, r3;
        java.lang.Object r2;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r2 != null goto label1;

        $r1 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r1.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(8, i1);

        r3 = $r1;

        goto label2;

     label1:
        $r0 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        r3 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int,int)>($r0, i0, i1);

     label2:
        return r3;
    }

    private static java.lang.Class getBoxedClass(java.lang.Class)
    {
        java.lang.Class r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0;
        java.lang.StringBuilder $r10;
        java.lang.String $r12, $r16;
        java.lang.IllegalArgumentException $r15;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label9;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r2 goto label1;

        return class "Ljava/lang/Boolean;";

     label1:
        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r3 goto label2;

        return class "Ljava/lang/Byte;";

     label2:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r4 goto label3;

        return class "Ljava/lang/Character;";

     label3:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r5 goto label4;

        return class "Ljava/lang/Short;";

     label4:
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r6 goto label5;

        return class "Ljava/lang/Integer;";

     label5:
        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r7 goto label6;

        return class "Ljava/lang/Long;";

     label6:
        $r8 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r8 goto label7;

        return class "Ljava/lang/Float;";

     label7:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r9 goto label8;

        return class "Ljava/lang/Double;";

     label8:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown primitive type: ");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label9:
        return r0;
    }
}
