public class android.filterfw.io.PatternScanner extends java.lang.Object
{
    private java.util.regex.Pattern mIgnorePattern;
    private java.lang.String mInput;
    private int mLineNo;
    private int mOffset;
    private int mStartOfLine;

    public void <init>(java.lang.String)
    {
        android.filterfw.io.PatternScanner r0;
        java.lang.String r1;

        r0 := @this: android.filterfw.io.PatternScanner;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.filterfw.io.PatternScanner: int mOffset> = 0;

        r0.<android.filterfw.io.PatternScanner: int mLineNo> = 0;

        r0.<android.filterfw.io.PatternScanner: int mStartOfLine> = 0;

        r0.<android.filterfw.io.PatternScanner: java.lang.String mInput> = r1;

        return;
    }

    public void <init>(java.lang.String, java.util.regex.Pattern)
    {
        android.filterfw.io.PatternScanner r0;
        java.lang.String r1;
        java.util.regex.Pattern r2;

        r0 := @this: android.filterfw.io.PatternScanner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.regex.Pattern;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.filterfw.io.PatternScanner: int mOffset> = 0;

        r0.<android.filterfw.io.PatternScanner: int mLineNo> = 0;

        r0.<android.filterfw.io.PatternScanner: int mStartOfLine> = 0;

        r0.<android.filterfw.io.PatternScanner: java.lang.String mInput> = r1;

        r0.<android.filterfw.io.PatternScanner: java.util.regex.Pattern mIgnorePattern> = r2;

        virtualinvoke r0.<android.filterfw.io.PatternScanner: void skip(java.util.regex.Pattern)>(r2);

        return;
    }

    public boolean atEnd()
    {
        android.filterfw.io.PatternScanner r0;
        java.lang.String $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.filterfw.io.PatternScanner;

        $i0 = r0.<android.filterfw.io.PatternScanner: int mOffset>;

        $r1 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public java.lang.String eat(java.util.regex.Pattern, java.lang.String)
    {
        android.filterfw.io.PatternScanner r0;
        java.lang.String r1, $r3, r5;
        java.lang.RuntimeException $r2;
        java.util.regex.Pattern r4;

        r0 := @this: android.filterfw.io.PatternScanner;

        r4 := @parameter0: java.util.regex.Pattern;

        r1 := @parameter1: java.lang.String;

        r5 = virtualinvoke r0.<android.filterfw.io.PatternScanner: java.lang.String tryEat(java.util.regex.Pattern)>(r4);

        if r5 == null goto label1;

        return r5;

     label1:
        $r2 = new java.lang.RuntimeException;

        $r3 = virtualinvoke r0.<android.filterfw.io.PatternScanner: java.lang.String unexpectedTokenMessage(java.lang.String)>(r1);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public int lineNo()
    {
        android.filterfw.io.PatternScanner r0;
        int $i0;

        r0 := @this: android.filterfw.io.PatternScanner;

        $i0 = r0.<android.filterfw.io.PatternScanner: int mLineNo>;

        return $i0;
    }

    public boolean peek(java.util.regex.Pattern)
    {
        android.filterfw.io.PatternScanner r0;
        java.util.regex.Pattern r1, r5;
        java.lang.String $r2, $r3;
        int $i0, $i1;
        boolean $z0;
        java.util.regex.Matcher r6;

        r0 := @this: android.filterfw.io.PatternScanner;

        r5 := @parameter0: java.util.regex.Pattern;

        r1 = r0.<android.filterfw.io.PatternScanner: java.util.regex.Pattern mIgnorePattern>;

        if r1 == null goto label1;

        virtualinvoke r0.<android.filterfw.io.PatternScanner: void skip(java.util.regex.Pattern)>(r1);

     label1:
        $r2 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        r6 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $i0 = r0.<android.filterfw.io.PatternScanner: int mOffset>;

        $r3 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke r6.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i0, $i1);

        $z0 = virtualinvoke r6.<java.util.regex.Matcher: boolean lookingAt()>();

        return $z0;
    }

    public void skip(java.util.regex.Pattern)
    {
        android.filterfw.io.PatternScanner r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.util.regex.Pattern r4;
        java.util.regex.Matcher r5;

        r0 := @this: android.filterfw.io.PatternScanner;

        r4 := @parameter0: java.util.regex.Pattern;

        $r1 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $i0 = r0.<android.filterfw.io.PatternScanner: int mOffset>;

        $r2 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        virtualinvoke r5.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i0, $i1);

        $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label1;

        $i2 = r0.<android.filterfw.io.PatternScanner: int mOffset>;

        $i3 = virtualinvoke r5.<java.util.regex.Matcher: int end()>();

        virtualinvoke r0.<android.filterfw.io.PatternScanner: void updateLineCount(int,int)>($i2, $i3);

        $i4 = virtualinvoke r5.<java.util.regex.Matcher: int end()>();

        r0.<android.filterfw.io.PatternScanner: int mOffset> = $i4;

     label1:
        return;
    }

    public java.lang.String tryEat(java.util.regex.Pattern)
    {
        android.filterfw.io.PatternScanner r0;
        java.lang.String $r1, $r2, $r4, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.util.regex.Pattern r5, r6, r9;
        java.util.regex.Matcher r7;

        r0 := @this: android.filterfw.io.PatternScanner;

        r5 := @parameter0: java.util.regex.Pattern;

        r6 = r0.<android.filterfw.io.PatternScanner: java.util.regex.Pattern mIgnorePattern>;

        if r6 == null goto label1;

        virtualinvoke r0.<android.filterfw.io.PatternScanner: void skip(java.util.regex.Pattern)>(r6);

     label1:
        $r1 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        r7 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $i0 = r0.<android.filterfw.io.PatternScanner: int mOffset>;

        $r2 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        virtualinvoke r7.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($i0, $i1);

        r8 = null;

        $z0 = virtualinvoke r7.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label2;

        $i2 = r0.<android.filterfw.io.PatternScanner: int mOffset>;

        $i3 = virtualinvoke r7.<java.util.regex.Matcher: int end()>();

        virtualinvoke r0.<android.filterfw.io.PatternScanner: void updateLineCount(int,int)>($i2, $i3);

        $i4 = virtualinvoke r7.<java.util.regex.Matcher: int end()>();

        r0.<android.filterfw.io.PatternScanner: int mOffset> = $i4;

        $r4 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        $i5 = virtualinvoke r7.<java.util.regex.Matcher: int start()>();

        $i6 = virtualinvoke r7.<java.util.regex.Matcher: int end()>();

        r8 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i5, $i6);

     label2:
        if r8 == null goto label3;

        r9 = r0.<android.filterfw.io.PatternScanner: java.util.regex.Pattern mIgnorePattern>;

        if r9 == null goto label3;

        virtualinvoke r0.<android.filterfw.io.PatternScanner: void skip(java.util.regex.Pattern)>(r9);

     label3:
        return r8;
    }

    public java.lang.String unexpectedTokenMessage(java.lang.String)
    {
        android.filterfw.io.PatternScanner r0;
        java.lang.String r1, r2, $r4, $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r5;

        r0 := @this: android.filterfw.io.PatternScanner;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        $i1 = r0.<android.filterfw.io.PatternScanner: int mStartOfLine>;

        $i0 = r0.<android.filterfw.io.PatternScanner: int mOffset>;

        r2 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token on line ");

        $i2 = r0.<android.filterfw.io.PatternScanner: int mLineNo>;

        $i3 = $i2 + 1;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' <- Expected ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public void updateLineCount(int, int)
    {
        android.filterfw.io.PatternScanner r0;
        int i0, $i2, $i3, $i4, i5;
        java.lang.String $r1;
        char $c1;

        r0 := @this: android.filterfw.io.PatternScanner;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

     label1:
        if i5 >= i0 goto label3;

        $r1 = r0.<android.filterfw.io.PatternScanner: java.lang.String mInput>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i5);

        if $c1 != 10 goto label2;

        $i2 = r0.<android.filterfw.io.PatternScanner: int mLineNo>;

        $i3 = $i2 + 1;

        r0.<android.filterfw.io.PatternScanner: int mLineNo> = $i3;

        $i4 = i5 + 1;

        r0.<android.filterfw.io.PatternScanner: int mStartOfLine> = $i4;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }
}
