public class android.filterpacks.base.OutputStreamTarget extends android.filterfw.core.Filter
{
    private java.io.OutputStream mOutputStream;

    public void <init>(java.lang.String)
    {
        android.filterpacks.base.OutputStreamTarget r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.base.OutputStreamTarget;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.base.OutputStreamTarget r0;
        android.filterfw.core.FrameFormat $r2;
        java.lang.Class $r3;
        java.io.OutputStream $r4, $r6;
        byte[] $r5, $r9;
        int $i0;
        java.lang.Object $r7;
        java.lang.String $r8, $r13, $r17;
        java.lang.Throwable $r10;
        android.filterfw.core.FilterContext r18;
        android.filterfw.core.Frame r19;
        java.nio.ByteBuffer r20;
        java.lang.StringBuilder r22;
        java.lang.RuntimeException r23;
        java.io.IOException r24;

        r0 := @this: android.filterpacks.base.OutputStreamTarget;

        r18 := @parameter0: android.filterfw.core.FilterContext;

        r19 = virtualinvoke r0.<android.filterpacks.base.OutputStreamTarget: android.filterfw.core.Frame pullInput(java.lang.String)>("data");

        $r2 = virtualinvoke r19.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r3 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: java.lang.Class getObjectClass()>();

        if $r3 != class "Ljava/lang/String;" goto label1;

        $r7 = virtualinvoke r19.<android.filterfw.core.Frame: java.lang.Object getObjectValue()>();

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();

        r20 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r9);

        goto label2;

     label1:
        r20 = virtualinvoke r19.<android.filterfw.core.Frame: java.nio.ByteBuffer getData()>();

     label2:
        $r4 = r0.<android.filterpacks.base.OutputStreamTarget: java.io.OutputStream mOutputStream>;

        $r5 = virtualinvoke r20.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r20.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, $i0);

        $r6 = r0.<android.filterpacks.base.OutputStreamTarget: java.io.OutputStream mOutputStream>;

        virtualinvoke $r6.<java.io.OutputStream: void flush()>();

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OutputStreamTarget: Could not write to stream: ");

        r24 = (java.io.IOException) $r10;

        $r13 = virtualinvoke r24.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        r23 = new java.lang.RuntimeException;

        $r17 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw r23;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void setupPorts()
    {
        android.filterpacks.base.OutputStreamTarget r0;

        r0 := @this: android.filterpacks.base.OutputStreamTarget;

        virtualinvoke r0.<android.filterpacks.base.OutputStreamTarget: void addInputPort(java.lang.String)>("data");

        return;
    }
}
