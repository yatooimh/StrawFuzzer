public class android.filterpacks.imageproc.RedEyeFilter extends android.filterfw.core.Filter
{
    private static final float DEFAULT_RED_INTENSITY;
    private static final float MIN_RADIUS;
    private static final float RADIUS_RATIO;
    private final android.graphics.Canvas mCanvas;
    private float[] mCenters;
    private int mHeight;
    private final android.graphics.Paint mPaint;
    private android.filterfw.core.Program mProgram;
    private float mRadius;
    private android.graphics.Bitmap mRedEyeBitmap;
    private android.filterfw.core.Frame mRedEyeFrame;
    private final java.lang.String mRedEyeShader;
    private int mTarget;
    private int mTileSize;
    private int mWidth;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        java.lang.String r1;
        android.graphics.Canvas $r2;
        android.graphics.Paint $r3;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.RedEyeFilter: int mTileSize> = 640;

        $r2 = new android.graphics.Canvas;

        specialinvoke $r2.<android.graphics.Canvas: void <init>()>();

        r0.<android.filterpacks.imageproc.RedEyeFilter: android.graphics.Canvas mCanvas> = $r2;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        r0.<android.filterpacks.imageproc.RedEyeFilter: android.graphics.Paint mPaint> = $r3;

        r0.<android.filterpacks.imageproc.RedEyeFilter: int mWidth> = 0;

        r0.<android.filterpacks.imageproc.RedEyeFilter: int mHeight> = 0;

        r0.<android.filterpacks.imageproc.RedEyeFilter: int mTarget> = 0;

        r0.<android.filterpacks.imageproc.RedEyeFilter: java.lang.String mRedEyeShader> = "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float intensity;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_1, v_texcoord);\n  if (mask.a > 0.0) {\n    float green_blue = color.g + color.b;\n    float red_intensity = color.r / green_blue;\n    if (red_intensity > intensity) {\n      color.r = 0.5 * green_blue;\n    }\n  }\n  gl_FragColor = color;\n}\n";

        return;
    }

    private void createRedEyeFrame(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.graphics.Bitmap r1;
        android.graphics.Bitmap$Config $r2;
        android.graphics.Canvas $r3, $r7;
        android.graphics.Paint $r4, $r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.filterfw.core.FrameManager $r5;
        android.filterfw.core.FilterContext r8;
        float[] r9;
        android.filterfw.core.MutableFrameFormat r10;
        android.filterfw.core.Frame r11;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        r8 := @parameter0: android.filterfw.core.FilterContext;

        $i2 = r0.<android.filterpacks.imageproc.RedEyeFilter: int mWidth>;

        i0 = $i2 / 2;

        $i3 = r0.<android.filterpacks.imageproc.RedEyeFilter: int mHeight>;

        i1 = $i3 / 2;

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i1, $r2);

        $r3 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.graphics.Canvas mCanvas>;

        virtualinvoke $r3.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(r1);

        $r4 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.graphics.Paint mPaint>;

        virtualinvoke $r4.<android.graphics.Paint: void setColor(int)>(-1);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        $f0 = (float) $i4;

        $f1 = $f0 * 0.06F;

        $f2 = staticinvoke <java.lang.Math: float max(float,float)>(10.0F, $f1);

        r0.<android.filterpacks.imageproc.RedEyeFilter: float mRadius> = $f2;

        i7 = 0;

     label1:
        r9 = r0.<android.filterpacks.imageproc.RedEyeFilter: float[] mCenters>;

        $i5 = lengthof r9;

        if i7 >= $i5 goto label2;

        $r7 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.graphics.Canvas mCanvas>;

        $f4 = r9[i7];

        $f3 = (float) i0;

        $f9 = $f4 * $f3;

        $i6 = i7 + 1;

        $f6 = r9[$i6];

        $f5 = (float) i1;

        $f8 = $f6 * $f5;

        $f7 = r0.<android.filterpacks.imageproc.RedEyeFilter: float mRadius>;

        $r6 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.graphics.Paint mPaint>;

        virtualinvoke $r7.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f9, $f8, $f7, $r6);

        i7 = i7 + 2;

        goto label1;

     label2:
        r10 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>(i0, i1, 3, 3);

        $r5 = virtualinvoke r8.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r11 = virtualinvoke $r5.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r10);

        r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Frame mRedEyeFrame> = r11;

        virtualinvoke r11.<android.filterfw.core.Frame: void setBitmap(android.graphics.Bitmap)>(r1);

        virtualinvoke r1.<android.graphics.Bitmap: void recycle()>();

        return;
    }

    private void updateProgramParams()
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        float[] $r1;
        int $i0, $i1;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        $r1 = r0.<android.filterpacks.imageproc.RedEyeFilter: float[] mCenters>;

        $i0 = lengthof $r1;

        $i1 = $i0 % 2;

        if $i1 == 1 goto label1;

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("The size of center array must be even.");

        throw $r2;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        android.filterfw.core.Program $r3;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $r3 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Program mProgram>;

        if $r3 == null goto label1;

        specialinvoke r0.<android.filterpacks.imageproc.RedEyeFilter: void updateProgramParams()>();

     label1:
        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        return r2;
    }

    public void initProgram(android.filterfw.core.FilterContext, int)
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        int i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;
        android.filterfw.core.ShaderProgram $r7;
        java.lang.Float $r8;
        android.filterfw.core.FilterContext r9;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        r9 := @parameter0: android.filterfw.core.FilterContext;

        i0 := @parameter1: int;

        if i0 != 3 goto label1;

        $r7 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r7.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r9, "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float intensity;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_1, v_texcoord);\n  if (mask.a > 0.0) {\n    float green_blue = color.g + color.b;\n    float red_intensity = color.r / green_blue;\n    if (red_intensity > intensity) {\n      color.r = 0.5 * green_blue;\n    }\n  }\n  gl_FragColor = color;\n}\n");

        $i1 = r0.<android.filterpacks.imageproc.RedEyeFilter: int mTileSize>;

        virtualinvoke $r7.<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)>($i1);

        r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Program mProgram> = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.3F);

        virtualinvoke $r7.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("intensity", $r8);

        r0.<android.filterpacks.imageproc.RedEyeFilter: int mTarget> = i0;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter RedEye does not support frames of target ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        android.filterfw.core.Frame r1, r3, r9, $r12;
        android.filterfw.core.FrameFormat r2;
        android.filterfw.core.FrameManager $r4;
        android.filterfw.core.Program $r5, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.filterfw.core.FilterContext r8;
        android.filterfw.core.Frame[] $r11;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        r8 := @parameter0: android.filterfw.core.FilterContext;

        r1 = virtualinvoke r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        r2 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r4 = virtualinvoke r8.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r3 = virtualinvoke $r4.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r2);

        $r5 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Program mProgram>;

        if $r5 == null goto label1;

        $i5 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getTarget()>();

        $i6 = r0.<android.filterpacks.imageproc.RedEyeFilter: int mTarget>;

        if $i5 == $i6 goto label2;

     label1:
        $i0 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getTarget()>();

        virtualinvoke r0.<android.filterpacks.imageproc.RedEyeFilter: void initProgram(android.filterfw.core.FilterContext,int)>(r8, $i0);

     label2:
        $i7 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i8 = r0.<android.filterpacks.imageproc.RedEyeFilter: int mWidth>;

        if $i7 != $i8 goto label3;

        $i3 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i4 = r0.<android.filterpacks.imageproc.RedEyeFilter: int mHeight>;

        if $i3 == $i4 goto label4;

     label3:
        $i1 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getWidth()>();

        r0.<android.filterpacks.imageproc.RedEyeFilter: int mWidth> = $i1;

        $i2 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getHeight()>();

        r0.<android.filterpacks.imageproc.RedEyeFilter: int mHeight> = $i2;

     label4:
        specialinvoke r0.<android.filterpacks.imageproc.RedEyeFilter: void createRedEyeFrame(android.filterfw.core.FilterContext)>(r8);

        r9 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Frame mRedEyeFrame>;

        $r10 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Program mProgram>;

        $r11 = newarray (android.filterfw.core.Frame)[2];

        $r11[0] = r1;

        $r11[1] = r9;

        virtualinvoke $r10.<android.filterfw.core.Program: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>($r11, r3);

        virtualinvoke r0.<android.filterpacks.imageproc.RedEyeFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r3);

        virtualinvoke r3.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        $r12 = r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Frame mRedEyeFrame>;

        virtualinvoke $r12.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        r0.<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.Frame mRedEyeFrame> = null;

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.RedEyeFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.RedEyeFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>(3);

        virtualinvoke r0.<android.filterpacks.imageproc.RedEyeFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        virtualinvoke r0.<android.filterpacks.imageproc.RedEyeFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }

    public static void <clinit>()
    {
        <android.filterpacks.imageproc.RedEyeFilter: float RADIUS_RATIO> = 0.06F;

        <android.filterpacks.imageproc.RedEyeFilter: float MIN_RADIUS> = 10.0F;

        <android.filterpacks.imageproc.RedEyeFilter: float DEFAULT_RED_INTENSITY> = 1.3F;

        return;
    }
}
