public class android.filterpacks.videoproc.BackDropperFilter extends android.filterfw.core.Filter
{
    private static final float DEFAULT_ACCEPT_STDDEV;
    private static final float DEFAULT_ADAPT_RATE_BG;
    private static final float DEFAULT_ADAPT_RATE_FG;
    private static final java.lang.String DEFAULT_AUTO_WB_SCALE;
    private static final float[] DEFAULT_BG_FIT_TRANSFORM;
    private static final float DEFAULT_EXPOSURE_CHANGE;
    private static final int DEFAULT_HIER_LRG_EXPONENT;
    private static final float DEFAULT_HIER_LRG_SCALE;
    private static final int DEFAULT_HIER_MID_EXPONENT;
    private static final float DEFAULT_HIER_MID_SCALE;
    private static final int DEFAULT_HIER_SML_EXPONENT;
    private static final float DEFAULT_HIER_SML_SCALE;
    private static final float DEFAULT_LEARNING_ADAPT_RATE;
    private static final int DEFAULT_LEARNING_DONE_THRESHOLD;
    private static final int DEFAULT_LEARNING_DURATION;
    private static final int DEFAULT_LEARNING_VERIFY_DURATION;
    private static final float DEFAULT_MASK_BLEND_BG;
    private static final float DEFAULT_MASK_BLEND_FG;
    private static final int DEFAULT_MASK_HEIGHT_EXPONENT;
    private static final float DEFAULT_MASK_VERIFY_RATE;
    private static final int DEFAULT_MASK_WIDTH_EXPONENT;
    private static final float DEFAULT_UV_SCALE_FACTOR;
    private static final float DEFAULT_WHITE_BALANCE_BLUE_CHANGE;
    private static final float DEFAULT_WHITE_BALANCE_RED_CHANGE;
    private static final int DEFAULT_WHITE_BALANCE_TOGGLE;
    private static final float DEFAULT_Y_SCALE_FACTOR;
    private static final java.lang.String DISTANCE_STORAGE_SCALE;
    private static final java.lang.String MASK_SMOOTH_EXPONENT;
    private static final java.lang.String MIN_VARIANCE;
    private static final java.lang.String RGB_TO_YUV_MATRIX;
    private static final java.lang.String TAG;
    private static final java.lang.String VARIANCE_STORAGE_SCALE;
    private static final java.lang.String mAutomaticWhiteBalance;
    private static final java.lang.String mBgDistanceShader;
    private static final java.lang.String mBgMaskShader;
    private static final java.lang.String mBgSubtractForceShader;
    private static final java.lang.String mBgSubtractShader;
    private static final java.lang.String[] mDebugOutputNames;
    private static final java.lang.String[] mInputNames;
    private static final java.lang.String mMaskVerifyShader;
    private static final java.lang.String[] mOutputNames;
    private static java.lang.String mSharedUtilShader;
    private static final java.lang.String mUpdateBgModelMeanShader;
    private static final java.lang.String mUpdateBgModelVarianceShader;
    private final int BACKGROUND_FILL_CROP;
    private final int BACKGROUND_FIT;
    private final int BACKGROUND_STRETCH;
    private android.filterfw.core.ShaderProgram copyShaderProgram;
    private boolean isOpen;
    private float mAcceptStddev;
    private float mAdaptRateBg;
    private float mAdaptRateFg;
    private float mAdaptRateLearning;
    private android.filterfw.core.GLFrame mAutoWB;
    private int mAutoWBToggle;
    private android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram;
    private android.filterfw.core.MutableFrameFormat mAverageFormat;
    private int mBackgroundFitMode;
    private boolean mBackgroundFitModeChanged;
    private android.filterfw.core.ShaderProgram mBgDistProgram;
    private android.filterfw.core.GLFrame mBgInput;
    private android.filterfw.core.ShaderProgram mBgMaskProgram;
    private android.filterfw.core.GLFrame[] mBgMean;
    private android.filterfw.core.ShaderProgram mBgSubtractProgram;
    private android.filterfw.core.ShaderProgram mBgUpdateMeanProgram;
    private android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram;
    private android.filterfw.core.GLFrame[] mBgVariance;
    private float mChromaScale;
    private android.filterfw.core.ShaderProgram mCopyOutProgram;
    private android.filterfw.core.GLFrame mDistance;
    private float mExposureChange;
    private int mFrameCount;
    private int mHierarchyLrgExp;
    private float mHierarchyLrgScale;
    private int mHierarchyMidExp;
    private float mHierarchyMidScale;
    private int mHierarchySmlExp;
    private float mHierarchySmlScale;
    private android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningDoneListener;
    private int mLearningDuration;
    private int mLearningVerifyDuration;
    private final boolean mLogVerbose;
    private float mLumScale;
    private android.filterfw.core.GLFrame mMask;
    private android.filterfw.core.GLFrame mMaskAverage;
    private float mMaskBg;
    private float mMaskFg;
    private android.filterfw.core.MutableFrameFormat mMaskFormat;
    private int mMaskHeightExp;
    private android.filterfw.core.GLFrame[] mMaskVerify;
    private android.filterfw.core.ShaderProgram mMaskVerifyProgram;
    private int mMaskWidthExp;
    private android.filterfw.core.MutableFrameFormat mMemoryFormat;
    private boolean mMirrorBg;
    private int mOrientation;
    private android.filterfw.core.FrameFormat mOutputFormat;
    private boolean mPingPong;
    private boolean mProvideDebugOutputs;
    private int mPyramidDepth;
    private float mRelativeAspect;
    private boolean mStartLearning;
    private int mSubsampleLevel;
    private boolean mUseTheForce;
    private float mVerifyRate;
    private android.filterfw.core.GLFrame mVideoInput;
    private float mWhiteBalanceBlueChange;
    private float mWhiteBalanceRedChange;
    private long startTime;

    static void <clinit>()
    {
        float[] $r0;
        java.lang.String[] $r1, $r2, $r3;

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mUpdateBgModelVarianceShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_3, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 cur_variance = (fg-mean)*(fg-mean);\n  vec4 new_variance = mix(variance, cur_variance, alpha);\n  new_variance = max(new_variance, vec4(min_variance));\n  gl_FragColor = var_scale * new_variance;\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mUpdateBgModelMeanShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 new_mean = mix(mean, fg, alpha);\n  gl_FragColor = new_mean;\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mMaskVerifyShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float verify_rate;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 lastmask = texture2D(tex_sampler_0, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_1, v_texcoord);\n  float newmask = mix(lastmask.a, mask.a, verify_rate);\n  gl_FragColor = vec4(0., 0., 0., newmask);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgSubtractShader> = "uniform mat3 bg_fit_transform;\nuniform float mask_blend_bg;\nuniform float mask_blend_fg;\nuniform float exposure_change;\nuniform float whitebalancered_change;\nuniform float whitebalanceblue_change;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec2 bg_texcoord = (bg_fit_transform * vec3(v_texcoord, 1.)).xy;\n  vec4 bg_rgb = texture2D(tex_sampler_1, bg_texcoord);\n  vec4 wb_auto_scale = texture2D(tex_sampler_3, v_texcoord) * exposure_change / auto_wb_scale;\n  vec4 wb_manual_scale = vec4(1. + whitebalancered_change, 1., 1. + whitebalanceblue_change, 1.);\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord);\n  vec4 fg_adjusted = fg_rgb * wb_manual_scale * wb_auto_scale;\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n  float alpha = smoothstep(mask_blend_bg, mask_blend_fg, mask.a);\n  gl_FragColor = mix(bg_rgb, fg_adjusted, alpha);\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgSubtractForceShader> = "  vec4 ghost_rgb = (fg_adjusted * 0.7 + vec4(0.3,0.3,0.4,0.))*0.65 + \n                   0.35*bg_rgb;\n  float glow_start = 0.75 * mask_blend_bg; \n  float glow_max   = mask_blend_bg; \n  gl_FragColor = mask.a < glow_start ? bg_rgb : \n                 mask.a < glow_max ? mix(bg_rgb, vec4(0.9,0.9,1.0,1.0), \n                                     (mask.a - glow_start) / (glow_max - glow_start) ) : \n                 mask.a < mask_blend_fg ? mix(vec4(0.9,0.9,1.0,1.0), ghost_rgb, \n                                    (mask.a - glow_max) / (mask_blend_fg - glow_max) ) : \n                 ghost_rgb;\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgMaskShader> = "uniform sampler2D tex_sampler_0;\nuniform float accept_variance;\nuniform vec2 yuv_weights;\nuniform float scale_lrg;\nuniform float scale_mid;\nuniform float scale_sml;\nuniform float exp_lrg;\nuniform float exp_mid;\nuniform float exp_sml;\nvarying vec2 v_texcoord;\nbool is_fg(vec2 dist_yc, float accept_variance) {\n  return ( dot(yuv_weights, dist_yc) >= accept_variance );\n}\nvoid main() {\n  vec4 dist_lrg_sc = texture2D(tex_sampler_0, v_texcoord, exp_lrg);\n  vec4 dist_mid_sc = texture2D(tex_sampler_0, v_texcoord, exp_mid);\n  vec4 dist_sml_sc = texture2D(tex_sampler_0, v_texcoord, exp_sml);\n  vec2 dist_lrg = inv_dist_scale * dist_lrg_sc.ba;\n  vec2 dist_mid = inv_dist_scale * dist_mid_sc.ba;\n  vec2 dist_sml = inv_dist_scale * dist_sml_sc.ba;\n  vec2 norm_dist = 0.75 * dist_sml / accept_variance;\n  bool is_fg_lrg = is_fg(dist_lrg, accept_variance * scale_lrg);\n  bool is_fg_mid = is_fg_lrg || is_fg(dist_mid, accept_variance * scale_mid);\n  float is_fg_sml =\n      float(is_fg_mid || is_fg(dist_sml, accept_variance * scale_sml));\n  float alpha = 0.5 * is_fg_sml + 0.3 * float(is_fg_mid) + 0.2 * float(is_fg_lrg);\n  gl_FragColor = vec4(alpha, norm_dist, is_fg_sml);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgDistanceShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n\n  float dist_y = gauss_dist_y(fg.r, mean.r, variance.r);\n  float dist_uv = gauss_dist_uv(fg.gb, mean.gb, variance.gb);\n  gl_FragColor = vec4(0.5*fg.rg, dist_scale*dist_y, dist_scale*dist_uv);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mAutomaticWhiteBalance> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float pyramid_depth;\nuniform bool autowb_toggle;\nvarying vec2 v_texcoord;\nvoid main() {\n   vec4 mean_video = texture2D(tex_sampler_0, v_texcoord, pyramid_depth);\n   vec4 mean_bg = texture2D(tex_sampler_1, v_texcoord, pyramid_depth);\n   float green_normalizer = mean_video.g / mean_bg.g;\n   vec4 adjusted_value = vec4(mean_bg.r / mean_video.r * green_normalizer, 1., \n                         mean_bg.b / mean_video.b * green_normalizer, 1.) * auto_wb_scale; \n   gl_FragColor = autowb_toggle ? adjusted_value : vec4(auto_wb_scale);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String VARIANCE_STORAGE_SCALE> = "5.0";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String TAG> = "BackDropperFilter";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String RGB_TO_YUV_MATRIX> = "0.299, -0.168736,  0.5,      0.000, 0.587, -0.331264, -0.418688, 0.000, 0.114,  0.5,      -0.081312, 0.000, 0.000,  0.5,       0.5,      1.000 ";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String MIN_VARIANCE> = "3.0";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String MASK_SMOOTH_EXPONENT> = "2.0";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String DISTANCE_STORAGE_SCALE> = "0.6";

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_Y_SCALE_FACTOR> = 0.4F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_WHITE_BALANCE_TOGGLE> = 0;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_WHITE_BALANCE_RED_CHANGE> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_WHITE_BALANCE_BLUE_CHANGE> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_UV_SCALE_FACTOR> = 1.35F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_MASK_WIDTH_EXPONENT> = 8;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_MASK_VERIFY_RATE> = 0.25F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_MASK_HEIGHT_EXPONENT> = 8;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_MASK_BLEND_FG> = 0.95F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_MASK_BLEND_BG> = 0.65F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_LEARNING_VERIFY_DURATION> = 10;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_LEARNING_DURATION> = 40;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_LEARNING_DONE_THRESHOLD> = 20;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_LEARNING_ADAPT_RATE> = 0.2F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_HIER_SML_SCALE> = 0.5F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_HIER_SML_EXPONENT> = 0;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_HIER_MID_SCALE> = 0.6F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_HIER_MID_EXPONENT> = 2;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_HIER_LRG_SCALE> = 0.7F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_HIER_LRG_EXPONENT> = 3;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_EXPOSURE_CHANGE> = 1.0F;

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String DEFAULT_AUTO_WB_SCALE> = "0.25";

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_ADAPT_RATE_FG> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_ADAPT_RATE_BG> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_ACCEPT_STDDEV> = 0.85F;

        $r0 = newarray (float)[9];

        $r0[0] = 1.0F;

        $r0[1] = 0.0F;

        $r0[2] = 0.0F;

        $r0[3] = 0.0F;

        $r0[4] = 1.0F;

        $r0[5] = 0.0F;

        $r0[6] = 0.0F;

        $r0[7] = 0.0F;

        $r0[8] = 1.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float[] DEFAULT_BG_FIT_TRANSFORM> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "video";

        $r1[1] = "background";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mInputNames> = $r1;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "video";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mOutputNames> = $r2;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "debug1";

        $r3[1] = "debug2";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mDebugOutputNames> = $r3;

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader> = "precision mediump float;\nuniform float fg_adapt_rate;\nuniform float bg_adapt_rate;\nconst mat4 coeff_yuv = mat4(0.299, -0.168736,  0.5,      0.000, 0.587, -0.331264, -0.418688, 0.000, 0.114,  0.5,      -0.081312, 0.000, 0.000,  0.5,       0.5,      1.000 );\nconst float dist_scale = 0.6;\nconst float inv_dist_scale = 1. / dist_scale;\nconst float var_scale=5.0;\nconst float inv_var_scale = 1. / var_scale;\nconst float min_variance = inv_var_scale *3.0/ 256.;\nconst float auto_wb_scale = 0.25;\n\nfloat gauss_dist_y(float y, float mean, float variance) {\n  float dist = (y - mean) * (y - mean) / variance;\n  return dist;\n}\nfloat gauss_dist_uv(vec2 uv, vec2 mean, vec2 variance) {\n  vec2 dist = (uv - mean) * (uv - mean) / variance;\n  return dist.r + dist.g;\n}\nfloat local_adapt_rate(float alpha) {\n  return mix(bg_adapt_rate, fg_adapt_rate, alpha);\n}\n\n";

        return;
    }

    public void <init>(java.lang.String)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        boolean $z0, $z1;
        int $i0;
        float $f0, $f1, $f2, $f3;
        java.lang.String $r5, $r10, r11, r12;
        java.lang.Throwable $r6;
        java.lang.StringBuilder $r7, r13;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r11 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r11);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int BACKGROUND_STRETCH> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int BACKGROUND_FIT> = 1;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int BACKGROUND_FILL_CROP> = 2;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mBackgroundFitMode> = 2;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration> = 40;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningVerifyDuration> = 10;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev> = 0.85F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyLrgScale> = 0.7F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyMidScale> = 0.6F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchySmlScale> = 0.5F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp> = 8;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp> = 8;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyLrgExp> = 3;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyMidExp> = 2;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchySmlExp> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mLumScale> = 0.4F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mChromaScale> = 1.35F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskBg> = 0.65F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskFg> = 0.95F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mExposureChange> = 1.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceRedChange> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceBlueChange> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mAutoWBToggle> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning> = 0.2F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mVerifyRate> = 0.25F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningDoneListener> = null;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mUseTheForce> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mProvideDebugOutputs> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mMirrorBg> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mOrientation> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime> = -1L;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackDropperFilter", 2);

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose> = $z0;

        r12 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.media.effect.bgdropper.adj");

        $i0 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

     label1:
        $f0 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r12);

        $f2 = $f0 + $f1;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev> = $f2;

        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adjusting accept threshold by ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", now ");

        $f3 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r5 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Badly formatted property ro.media.effect.bgdropper.adj: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackDropperFilter", $r10);

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private void allocateFrames(android.filterfw.core.FrameFormat, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FilterContext r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i22, i23;
        byte[] r2, r3, r141;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, f18, f19;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.filterfw.core.MutableFrameFormat $r4, $r6, $r10, $r14, $r18, $r22, $r26, $r109, $r121, $r128, $r135;
        android.filterfw.core.FrameManager $r5, $r9, $r13, $r17, $r21, $r25, $r120, $r127, $r134;
        android.filterfw.core.Frame $r7, $r11, $r15, $r19, $r23, $r27, $r122, $r129, $r136;
        android.filterfw.core.GLFrame $r8, $r12, $r16, $r20, $r24, $r28, $r123, $r125, $r130, $r132, $r137, $r139;
        java.lang.StringBuilder $r29, $r36, $r57, $r76, $r83, $r91, $r100, $r107, $r112;
        java.lang.String $r30, $r34, $r37, $r41, $r58, $r63, $r77, $r81, $r84, $r88, $r92, $r96, $r101, $r105, $r111, $r113, $r118;
        android.filterfw.core.ShaderProgram $r33, $r40, $r44, $r45, $r47, $r49, $r51, $r53, $r55, $r62, $r65, $r66, $r68, $r70, $r72, $r74, $r80, $r87, $r90, $r95, $r98, $r104, $r117;
        java.lang.Float $r35, $r42, $r46, $r48, $r50, $r52, $r54, $r56, $r67, $r69, $r71, $r73, $r75, $r82, $r89, $r97, $r106;
        float[] $r43, $r64;
        java.lang.Integer $r99;
        android.filterfw.core.GLFrame[] $r119, $r124, $r126, $r131, $r133, $r138;
        byte $b18, $b19, $b20;
        android.filterfw.core.FrameFormat r140;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r140 := @parameter0: android.filterfw.core.FrameFormat;

        r1 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: boolean createMemoryFormat(android.filterfw.core.FrameFormat)>(r140);

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z1 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Allocating BackDropperFilter frames");

     label02:
        $r4 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        i0 = virtualinvoke $r4.<android.filterfw.core.MutableFrameFormat: int getSize()>();

        r141 = newarray (byte)[i0];

        r2 = newarray (byte)[i0];

        r3 = newarray (byte)[i0];

        i22 = 0;

     label03:
        if i22 >= i0 goto label04;

        $b18 = (byte) -128;

        r141[i22] = $b18;

        $b19 = (byte) 10;

        r2[i22] = $b19;

        $b20 = (byte) 0;

        r3[i22] = $b20;

        i22 = i22 + 1;

        goto label03;

     label04:
        i23 = 0;

     label05:
        if i23 >= 2 goto label06;

        $r119 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r120 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r121 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r122 = virtualinvoke $r120.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r121);

        $r123 = (android.filterfw.core.GLFrame) $r122;

        $r119[i23] = $r123;

        $r124 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r125 = $r124[i23];

        virtualinvoke $r125.<android.filterfw.core.GLFrame: void setData(byte[],int,int)>(r141, 0, i0);

        $r126 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r127 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r128 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r129 = virtualinvoke $r127.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r128);

        $r130 = (android.filterfw.core.GLFrame) $r129;

        $r126[i23] = $r130;

        $r131 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r132 = $r131[i23];

        virtualinvoke $r132.<android.filterfw.core.GLFrame: void setData(byte[],int,int)>(r2, 0, i0);

        $r133 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r134 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r135 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r136 = virtualinvoke $r134.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r135);

        $r137 = (android.filterfw.core.GLFrame) $r136;

        $r133[i23] = $r137;

        $r138 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r139 = $r138[i23];

        virtualinvoke $r139.<android.filterfw.core.GLFrame: void setData(byte[],int,int)>(r3, 0, i0);

        i23 = i23 + 1;

        goto label05;

     label06:
        $z2 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z2 == 0 goto label07;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Done allocating texture for Mean and Variance objects!");

     label07:
        $r5 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r6 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r7 = virtualinvoke $r5.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r6);

        $r8 = (android.filterfw.core.GLFrame) $r7;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance> = $r8;

        $r9 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r10 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r11 = virtualinvoke $r9.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r10);

        $r12 = (android.filterfw.core.GLFrame) $r11;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask> = $r12;

        $r13 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r14 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mAverageFormat>;

        $r15 = virtualinvoke $r13.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r14);

        $r16 = (android.filterfw.core.GLFrame) $r15;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB> = $r16;

        $r17 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r18 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        $r19 = virtualinvoke $r17.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r18);

        $r20 = (android.filterfw.core.GLFrame) $r19;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput> = $r20;

        $r21 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r22 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        $r23 = virtualinvoke $r21.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r22);

        $r24 = (android.filterfw.core.GLFrame) $r23;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput> = $r24;

        $r25 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r26 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mAverageFormat>;

        $r27 = virtualinvoke $r25.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r26);

        $r28 = (android.filterfw.core.GLFrame) $r27;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage> = $r28;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n\n  float dist_y = gauss_dist_y(fg.r, mean.r, variance.r);\n  float dist_uv = gauss_dist_uv(fg.gb, mean.gb, variance.gb);\n  gl_FragColor = vec4(0.5*fg.rg, dist_scale*dist_y, dist_scale*dist_uv);\n}\n");

        $r33 = new android.filterfw.core.ShaderProgram;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r34);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgDistProgram> = $r33;

        $i1 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $f1 = (float) $i1;

        $r35 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke $r33.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("subsample_level", $r35);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform float accept_variance;\nuniform vec2 yuv_weights;\nuniform float scale_lrg;\nuniform float scale_mid;\nuniform float scale_sml;\nuniform float exp_lrg;\nuniform float exp_mid;\nuniform float exp_sml;\nvarying vec2 v_texcoord;\nbool is_fg(vec2 dist_yc, float accept_variance) {\n  return ( dot(yuv_weights, dist_yc) >= accept_variance );\n}\nvoid main() {\n  vec4 dist_lrg_sc = texture2D(tex_sampler_0, v_texcoord, exp_lrg);\n  vec4 dist_mid_sc = texture2D(tex_sampler_0, v_texcoord, exp_mid);\n  vec4 dist_sml_sc = texture2D(tex_sampler_0, v_texcoord, exp_sml);\n  vec2 dist_lrg = inv_dist_scale * dist_lrg_sc.ba;\n  vec2 dist_mid = inv_dist_scale * dist_mid_sc.ba;\n  vec2 dist_sml = inv_dist_scale * dist_sml_sc.ba;\n  vec2 norm_dist = 0.75 * dist_sml / accept_variance;\n  bool is_fg_lrg = is_fg(dist_lrg, accept_variance * scale_lrg);\n  bool is_fg_mid = is_fg_lrg || is_fg(dist_mid, accept_variance * scale_mid);\n  float is_fg_sml =\n      float(is_fg_mid || is_fg(dist_sml, accept_variance * scale_sml));\n  float alpha = 0.5 * is_fg_sml + 0.3 * float(is_fg_mid) + 0.2 * float(is_fg_lrg);\n  gl_FragColor = vec4(alpha, norm_dist, is_fg_sml);\n}\n");

        $r40 = new android.filterfw.core.ShaderProgram;

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r41);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram> = $r40;

        f18 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f2 = f18 * f18;

        $r42 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke $r40.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("accept_variance", $r42);

        f0 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mLumScale>;

        f19 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mChromaScale>;

        $r44 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $r43 = newarray (float)[2];

        $r43[0] = f0;

        $r43[1] = f19;

        virtualinvoke $r44.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("yuv_weights", $r43);

        $r45 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f3 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyLrgScale>;

        $r46 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r45.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_lrg", $r46);

        $r47 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f4 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyMidScale>;

        $r48 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        virtualinvoke $r47.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_mid", $r48);

        $r49 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f5 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchySmlScale>;

        $r50 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        virtualinvoke $r49.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_sml", $r50);

        $r51 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i3 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i2 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyLrgExp>;

        $i4 = $i3 + $i2;

        $f6 = (float) $i4;

        $r52 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f6);

        virtualinvoke $r51.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_lrg", $r52);

        $r53 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i6 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i5 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyMidExp>;

        $i7 = $i6 + $i5;

        $f7 = (float) $i7;

        $r54 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);

        virtualinvoke $r53.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_mid", $r54);

        $r55 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i9 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i8 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchySmlExp>;

        $i10 = $i9 + $i8;

        $f8 = (float) $i10;

        $r56 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        virtualinvoke $r55.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_sml", $r56);

        $z3 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mUseTheForce>;

        if $z3 == 0 goto label08;

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r113 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r113);

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform mat3 bg_fit_transform;\nuniform float mask_blend_bg;\nuniform float mask_blend_fg;\nuniform float exposure_change;\nuniform float whitebalancered_change;\nuniform float whitebalanceblue_change;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec2 bg_texcoord = (bg_fit_transform * vec3(v_texcoord, 1.)).xy;\n  vec4 bg_rgb = texture2D(tex_sampler_1, bg_texcoord);\n  vec4 wb_auto_scale = texture2D(tex_sampler_3, v_texcoord) * exposure_change / auto_wb_scale;\n  vec4 wb_manual_scale = vec4(1. + whitebalancered_change, 1., 1. + whitebalanceblue_change, 1.);\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord);\n  vec4 fg_adjusted = fg_rgb * wb_manual_scale * wb_auto_scale;\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n  float alpha = smoothstep(mask_blend_bg, mask_blend_fg, mask.a);\n  gl_FragColor = mix(bg_rgb, fg_adjusted, alpha);\n");

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  vec4 ghost_rgb = (fg_adjusted * 0.7 + vec4(0.3,0.3,0.4,0.))*0.65 + \n                   0.35*bg_rgb;\n  float glow_start = 0.75 * mask_blend_bg; \n  float glow_max   = mask_blend_bg; \n  gl_FragColor = mask.a < glow_start ? bg_rgb : \n                 mask.a < glow_max ? mix(bg_rgb, vec4(0.9,0.9,1.0,1.0), \n                                     (mask.a - glow_start) / (glow_max - glow_start) ) : \n                 mask.a < mask_blend_fg ? mix(vec4(0.9,0.9,1.0,1.0), ghost_rgb, \n                                    (mask.a - glow_max) / (mask_blend_fg - glow_max) ) : \n                 ghost_rgb;\n}\n");

        $r117 = new android.filterfw.core.ShaderProgram;

        $r118 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r117.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r118);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram> = $r117;

        goto label09;

     label08:
        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform mat3 bg_fit_transform;\nuniform float mask_blend_bg;\nuniform float mask_blend_fg;\nuniform float exposure_change;\nuniform float whitebalancered_change;\nuniform float whitebalanceblue_change;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec2 bg_texcoord = (bg_fit_transform * vec3(v_texcoord, 1.)).xy;\n  vec4 bg_rgb = texture2D(tex_sampler_1, bg_texcoord);\n  vec4 wb_auto_scale = texture2D(tex_sampler_3, v_texcoord) * exposure_change / auto_wb_scale;\n  vec4 wb_manual_scale = vec4(1. + whitebalancered_change, 1., 1. + whitebalanceblue_change, 1.);\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord);\n  vec4 fg_adjusted = fg_rgb * wb_manual_scale * wb_auto_scale;\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n  float alpha = smoothstep(mask_blend_bg, mask_blend_fg, mask.a);\n  gl_FragColor = mix(bg_rgb, fg_adjusted, alpha);\n");

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}\n");

        $r62 = new android.filterfw.core.ShaderProgram;

        $r63 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r62.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r63);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram> = $r62;

     label09:
        $r65 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $r64 = <android.filterpacks.videoproc.BackDropperFilter: float[] DEFAULT_BG_FIT_TRANSFORM>;

        virtualinvoke $r65.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_fit_transform", $r64);

        $r66 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f9 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskBg>;

        $r67 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f9);

        virtualinvoke $r66.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_bg", $r67);

        $r68 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f10 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskFg>;

        $r69 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f10);

        virtualinvoke $r68.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_fg", $r69);

        $r70 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f11 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mExposureChange>;

        $r71 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f11);

        virtualinvoke $r70.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exposure_change", $r71);

        $r72 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f12 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceBlueChange>;

        $r73 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f12);

        virtualinvoke $r72.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalanceblue_change", $r73);

        $r74 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f13 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceRedChange>;

        $r75 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f13);

        virtualinvoke $r74.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalancered_change", $r75);

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 new_mean = mix(mean, fg, alpha);\n  gl_FragColor = new_mean;\n}\n");

        $r80 = new android.filterfw.core.ShaderProgram;

        $r81 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r80.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r81);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram> = $r80;

        $i11 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $f14 = (float) $i11;

        $r82 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f14);

        virtualinvoke $r80.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("subsample_level", $r82);

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r84 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_3, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 cur_variance = (fg-mean)*(fg-mean);\n  vec4 new_variance = mix(variance, cur_variance, alpha);\n  new_variance = max(new_variance, vec4(min_variance));\n  gl_FragColor = var_scale * new_variance;\n}\n");

        $r87 = new android.filterfw.core.ShaderProgram;

        $r88 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r87.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r88);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram> = $r87;

        $i12 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $f15 = (float) $i12;

        $r89 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f15);

        virtualinvoke $r87.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("subsample_level", $r89);

        $r90 = staticinvoke <android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram createIdentity(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mCopyOutProgram> = $r90;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r92 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float pyramid_depth;\nuniform bool autowb_toggle;\nvarying vec2 v_texcoord;\nvoid main() {\n   vec4 mean_video = texture2D(tex_sampler_0, v_texcoord, pyramid_depth);\n   vec4 mean_bg = texture2D(tex_sampler_1, v_texcoord, pyramid_depth);\n   float green_normalizer = mean_video.g / mean_bg.g;\n   vec4 adjusted_value = vec4(mean_bg.r / mean_video.r * green_normalizer, 1., \n                         mean_bg.b / mean_video.b * green_normalizer, 1.) * auto_wb_scale; \n   gl_FragColor = autowb_toggle ? adjusted_value : vec4(auto_wb_scale);\n}\n");

        $r95 = new android.filterfw.core.ShaderProgram;

        $r96 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r95.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r96);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram> = $r95;

        $i13 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth>;

        $f16 = (float) $i13;

        $r97 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f16);

        virtualinvoke $r95.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("pyramid_depth", $r97);

        $r98 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram>;

        $i14 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mAutoWBToggle>;

        $r99 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        virtualinvoke $r98.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("autowb_toggle", $r99);

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r101 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float verify_rate;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 lastmask = texture2D(tex_sampler_0, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_1, v_texcoord);\n  float newmask = mix(lastmask.a, mask.a, verify_rate);\n  gl_FragColor = vec4(0., 0., 0., newmask);\n}\n");

        $r104 = new android.filterfw.core.ShaderProgram;

        $r105 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r104.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, $r105);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mMaskVerifyProgram> = $r104;

        $f17 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mVerifyRate>;

        $r106 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f17);

        virtualinvoke $r104.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("verify_rate", $r106);

        $z4 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z4 == 0 goto label10;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shader width set to ");

        $r109 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        $i15 = virtualinvoke $r109.<android.filterfw.core.MutableFrameFormat: int getWidth()>();

        virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r111 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r111);

     label10:
        r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect> = 1.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 1;

        return;
    }

    private boolean createMemoryFormat(android.filterfw.core.FrameFormat)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        android.filterfw.core.MutableFrameFormat $r1, $r3, $r4, $r5, $r6, $r7, r30;
        java.lang.RuntimeException $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0;
        java.lang.StringBuilder $r8, $r14, $r20;
        java.lang.String $r13, $r19, $r25;
        android.filterfw.core.FrameFormat r26;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r26 := @parameter0: android.filterfw.core.FrameFormat;

        $r1 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        if $r1 == null goto label1;

        return 0;

     label1:
        $i6 = virtualinvoke r26.<android.filterfw.core.FrameFormat: int getWidth()>();

        if $i6 == 0 goto label3;

        $i7 = virtualinvoke r26.<android.filterfw.core.FrameFormat: int getHeight()>();

        if $i7 == 0 goto label3;

        $r3 = virtualinvoke r26.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat> = $r3;

        $i8 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $d0 = (double) $i8;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);

        i0 = (int) $d1;

        $i9 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $d2 = (double) $i9;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d2);

        i1 = (int) $d3;

        $r4 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        virtualinvoke $r4.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(i0, i1);

        $i11 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $i10 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>($i11, $i10);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth> = $i12;

        $r5 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r6 = virtualinvoke $r5.<android.filterfw.core.MutableFrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat> = $r6;

        $i13 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $i14 = virtualinvoke r26.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i15 = specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: int pyramidLevel(int)>($i14);

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i15);

        $i16 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $i17 = virtualinvoke r26.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i18 = specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: int pyramidLevel(int)>($i17);

        i3 = staticinvoke <java.lang.Math: int max(int,int)>($i16, $i18);

        $i19 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i3);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth> = $i19;

        $d4 = (double) i2;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d4);

        $i20 = (int) $d5;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i20);

        $d6 = (double) i3;

        $d7 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d6);

        $i21 = (int) $d7;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i21);

        $r7 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        virtualinvoke $r7.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(i4, i5);

        $i24 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth>;

        $i23 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $i22 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $i25 = staticinvoke <java.lang.Math: int max(int,int)>($i23, $i22);

        $i26 = $i24 - $i25;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel> = $i26;

        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mask frames size ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pyramid levels ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Memory frames size ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r25);

     label2:
        r30 = virtualinvoke r26.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mAverageFormat> = r30;

        virtualinvoke r30.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(1, 1);

        return 1;

     label3:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to process input frame with unknown size");

        throw $r2;
    }

    private int pyramidLevel(int)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        int i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double log10(double)>(2.0);

        $d3 = $d1 / $d2;

        $d4 = staticinvoke <java.lang.Math: double floor(double)>($d3);

        $i1 = (int) $d4;

        $i2 = $i1 - 1;

        return $i2;
    }

    private void updateBgScaling(android.filterfw.core.Frame, android.filterfw.core.Frame, boolean)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.Frame r1, r20;
        boolean z0, $z1, $z2, $z3;
        android.filterfw.core.FrameFormat $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, i9, i10;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14, f15, f16, f17, f18, f19, f20;
        byte $b4, $b5, $b8;
        float[] $r6;
        android.filterfw.core.ShaderProgram $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r19;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r20 := @parameter0: android.filterfw.core.Frame;

        r1 := @parameter1: android.filterfw.core.Frame;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r20.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getWidth()>();

        $f0 = (float) $i0;

        $r3 = virtualinvoke r20.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i1 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        $f1 = (float) $i1;

        $f2 = $f0 / $f1;

        $r4 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r4.<android.filterfw.core.FrameFormat: int getWidth()>();

        $f3 = (float) $i2;

        $r5 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r5.<android.filterfw.core.FrameFormat: int getHeight()>();

        $f4 = (float) $i3;

        $f5 = $f3 / $f4;

        f12 = $f2 / $f5;

        $f6 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $b4 = f12 cmpl $f6;

        if $b4 != 0 goto label01;

        if z0 == 0 goto label12;

     label01:
        r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect> = f12;

        f13 = 0.0F;

        f14 = 1.0F;

        f15 = 0.0F;

        f16 = 1.0F;

        i9 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mBackgroundFitMode>;

        if i9 == 1 goto label04;

        if i9 == 2 goto label02;

        goto label06;

     label02:
        $b8 = f12 cmpl 1.0F;

        if $b8 <= 0 goto label03;

        $f11 = 0.5F / f12;

        f15 = 0.5F - $f11;

        f16 = 1.0F / f12;

        goto label06;

     label03:
        $f10 = f12 * 0.5F;

        f13 = 0.5F - $f10;

        f14 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        goto label06;

     label04:
        $b5 = f12 cmpl 1.0F;

        if $b5 <= 0 goto label05;

        $f9 = f12 * 0.5F;

        f13 = 0.5F - $f9;

        f14 = f12 * 1.0F;

        goto label06;

     label05:
        $f7 = 0.5F / f12;

        f15 = 0.5F - $f7;

        f16 = 1.0F / f12;

     label06:
        f17 = f13;

        f18 = f14;

        f19 = f15;

        f20 = f16;

        $z2 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mMirrorBg>;

        if $z2 == 0 goto label10;

        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z1 == 0 goto label07;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Mirroring the background!");

     label07:
        i10 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mOrientation>;

        if i10 == 0 goto label09;

        if i10 != 180 goto label08;

        goto label09;

     label08:
        f20 = neg f16;

        f19 = 1.0F - f15;

        f17 = f13;

        f18 = f14;

        goto label10;

     label09:
        f18 = neg f14;

        f17 = 1.0F - f13;

        f20 = f16;

        f19 = f15;

     label10:
        $z3 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z3 == 0 goto label11;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bgTransform: xMin, yMin, xWidth, yWidth : ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f17);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f19);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f18);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f20);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRelAspRatio = ");

        $f8 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f8);

        $r19 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r19);

     label11:
        $r7 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $r6 = newarray (float)[9];

        $r6[0] = f18;

        $r6[1] = 0.0F;

        $r6[2] = 0.0F;

        $r6[3] = 0.0F;

        $r6[4] = f20;

        $r6[5] = 0.0F;

        $r6[6] = f17;

        $r6[7] = f19;

        $r6[8] = 1.0F;

        virtualinvoke $r7.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_fit_transform", $r6);

     label12:
        return;
    }

    public void close(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.MutableFrameFormat $r2;
        boolean $z0;
        android.filterfw.core.GLFrame $r3, $r5, $r7, $r9, $r11, $r13, $r16, $r19, $r22;
        android.filterfw.core.GLFrame[] $r15, $r18, $r21;
        int i1;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        if $r2 != null goto label1;

        return;

     label1:
        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Filter Closing!");

     label2:
        i1 = 0;

     label3:
        if i1 >= 2 goto label4;

        $r15 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r16 = $r15[i1];

        virtualinvoke $r16.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r18 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r19 = $r18[i1];

        virtualinvoke $r19.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r21 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r22 = $r21[i1];

        virtualinvoke $r22.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        i1 = i1 + 1;

        goto label3;

     label4:
        $r3 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        virtualinvoke $r3.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r5 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r5.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r7 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB>;

        virtualinvoke $r7.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r9 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r9.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r11 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r11.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r13 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage>;

        virtualinvoke $r13.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat> = null;

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FilterContext r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, f14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        float[] $r2;
        android.filterfw.core.ShaderProgram $r3, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, r30;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Integer $r5;
        java.lang.Float $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r28;
        java.lang.String r29;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r29 := @parameter0: java.lang.String;

        r1 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("backgroundFitMode");

        if $z0 == 0 goto label01;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mBackgroundFitModeChanged> = 1;

        goto label16;

     label01:
        $z1 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("acceptStddev");

        if $z1 == 0 goto label02;

        r30 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        f13 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f12 = f13 * f13;

        $r28 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f12);

        virtualinvoke r30.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("accept_variance", $r28);

        goto label16;

     label02:
        $z2 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("hierLrgScale");

        if $z2 == 0 goto label03;

        $r26 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f11 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyLrgScale>;

        $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f11);

        virtualinvoke $r26.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_lrg", $r27);

        goto label16;

     label03:
        $z3 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("hierMidScale");

        if $z3 == 0 goto label04;

        $r24 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f10 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyMidScale>;

        $r25 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f10);

        virtualinvoke $r24.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_mid", $r25);

        goto label16;

     label04:
        $z4 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("hierSmlScale");

        if $z4 == 0 goto label05;

        $r22 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f9 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchySmlScale>;

        $r23 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f9);

        virtualinvoke $r22.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_sml", $r23);

        goto label16;

     label05:
        $z5 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("hierLrgExp");

        if $z5 == 0 goto label06;

        $r20 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i8 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i7 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyLrgExp>;

        $i9 = $i8 + $i7;

        $f8 = (float) $i9;

        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        virtualinvoke $r20.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_lrg", $r21);

        goto label16;

     label06:
        $z6 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("hierMidExp");

        if $z6 == 0 goto label07;

        $r18 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i5 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i4 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyMidExp>;

        $i6 = $i5 + $i4;

        $f7 = (float) $i6;

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);

        virtualinvoke $r18.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_mid", $r19);

        goto label16;

     label07:
        $z7 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("hierSmlExp");

        if $z7 == 0 goto label08;

        $r16 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i2 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i1 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchySmlExp>;

        $i3 = $i2 + $i1;

        $f6 = (float) $i3;

        $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f6);

        virtualinvoke $r16.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_sml", $r17);

        goto label16;

     label08:
        $z8 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("lumScale");

        if $z8 != 0 goto label15;

        $z9 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("chromaScale");

        if $z9 == 0 goto label09;

        goto label15;

     label09:
        $z10 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("maskBg");

        if $z10 == 0 goto label10;

        $r14 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f5 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskBg>;

        $r15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        virtualinvoke $r14.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_bg", $r15);

        goto label16;

     label10:
        $z11 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("maskFg");

        if $z11 == 0 goto label11;

        $r12 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f4 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskFg>;

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        virtualinvoke $r12.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_fg", $r13);

        goto label16;

     label11:
        $z12 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("exposureChange");

        if $z12 == 0 goto label12;

        $r10 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f3 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mExposureChange>;

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r10.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exposure_change", $r11);

        goto label16;

     label12:
        $z13 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("whitebalanceredChange");

        if $z13 == 0 goto label13;

        $r8 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f2 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceRedChange>;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke $r8.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalancered_change", $r9);

        goto label16;

     label13:
        $z14 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("whitebalanceblueChange");

        if $z14 == 0 goto label14;

        $r6 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f1 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceBlueChange>;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke $r6.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalanceblue_change", $r7);

        goto label16;

     label14:
        $z15 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("autowbToggle");

        if $z15 == 0 goto label16;

        $r4 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram>;

        $i0 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mAutoWBToggle>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r4.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("autowb_toggle", $r5);

        goto label16;

     label15:
        f0 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mLumScale>;

        f14 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mChromaScale>;

        $r3 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $r2 = newarray (float)[2];

        $r2[0] = f0;

        $r2[1] = f14;

        virtualinvoke $r3.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("yuv_weights", $r2);

     label16:
        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        java.lang.String r1;
        java.lang.String[] $r2;
        java.util.List $r3;
        boolean $z0;
        android.filterfw.core.FrameFormat r4;
        android.filterfw.core.MutableFrameFormat r5;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: android.filterfw.core.FrameFormat;

        r5 = virtualinvoke r4.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        $r2 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mOutputNames>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r5.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(0, 0);

     label1:
        return r5;
    }

    public void prepare(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.filterfw.core.GLFrame[] $r2, $r3, $r4;
        android.filterfw.core.ShaderProgram $r5;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Preparing BackDropperFilter!");

     label1:
        $r2 = newarray (android.filterfw.core.GLFrame)[2];

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean> = $r2;

        $r3 = newarray (android.filterfw.core.GLFrame)[2];

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance> = $r3;

        $r4 = newarray (android.filterfw.core.GLFrame)[2];

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify> = $r4;

        $r5 = staticinvoke <android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram createIdentity(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram> = $r5;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9, $z10;
        int i0, i1, $i3, $i4, $i5, $i6, $i17, $i18, i23, $i24, $i25, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49;
        long l2, $l7, $l9, $l10, $l11, $l12, $l14;
        android.filterfw.core.FrameFormat $r1, $r14, $r33;
        android.filterfw.core.GLFrame[] $r2, $r3, $r41, $r53, $r55, $r57, $r69, r101, r111, $r117, $r119, $r122, r124, $r130, $r132;
        android.filterfw.core.Frame[] $r4, $r12, $r15, $r52, $r116, $r129;
        android.filterfw.core.GLFrame $r5, $r6, $r7, $r8, $r10, $r11, $r38, $r42, $r43, $r45, $r54, $r56, $r58, $r59, $r70, $r71, $r85, $r87, $r88, $r89, $r90, $r91, r92, r93, r94, r96, r97, r98, r100, r102, r103, r105, r108, r109, r110, r112, r113, r115, $r118, $r120, r121, r123, r125, r126, r128, $r131, $r133;
        android.filterfw.core.ShaderProgram $r9, $r16, $r34, $r39, $r44, $r60, $r61, $r63, $r65, $r67, $r72, $r73, $r75, $r77, $r79, $r84, $r86, r95, r99, r104, r114, r127;
        android.filterfw.core.FrameManager $r13, $r32, $r36;
        byte $b8, $b15, $b16, $b19;
        android.filterfw.core.GLEnvironment $r18, $r31;
        java.lang.StringBuilder $r19;
        java.lang.Object[] $r21, $r26, $r48;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.Double $r22, $r27;
        java.lang.String $r23, $r28, $r30, $r51;
        android.filterfw.core.MutableFrameFormat $r37;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        java.nio.ByteBuffer $r46;
        byte[] $r47;
        java.lang.Integer $r49, $r50;
        java.lang.Float $r62, $r64, $r66, $r68, $r74, $r76, $r78, $r80;
        android.filterfw.core.FilterContext r81;
        android.filterfw.core.Frame r82, r83, r107, r134, r135;
        short s26;
        android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener r106;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r81 := @parameter0: android.filterfw.core.FilterContext;

        r82 = virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("video");

        r83 = virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("background");

        $r1 = virtualinvoke r82.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void allocateFrames(android.filterfw.core.FrameFormat,android.filterfw.core.FilterContext)>($r1, r81);

        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning>;

        if $z1 == 0 goto label02;

        $z5 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z5 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Starting learning");

     label01:
        $r73 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f6 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r74 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f6);

        virtualinvoke $r73.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r74);

        $r75 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f7 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r76 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);

        virtualinvoke $r75.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r76);

        $r77 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f8 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r78 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        virtualinvoke $r77.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r78);

        $r79 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f9 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r80 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f9);

        virtualinvoke $r79.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r80);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount> = 0;

     label02:
        z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mPingPong>;

        z6 = z0 ^ 1;

        $z7 = z0 ^ 1;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mPingPong> = $z7;

        $z8 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mBackgroundFitModeChanged>;

        specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void updateBgScaling(android.filterfw.core.Frame,android.filterfw.core.Frame,boolean)>(r82, r83, $z8);

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mBackgroundFitModeChanged> = 0;

        $r84 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r85 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r84.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r82, $r85);

        $r86 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r87 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r86.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r83, $r87);

        $r88 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r88.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r89 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r89.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $r90 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r90.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r91 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r91.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $z9 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning>;

        if $z9 == 0 goto label03;

        $r72 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r71 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r69 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        i32 = (int) z6;

        $r70 = $r69[i32];

        virtualinvoke $r72.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r71, $r70);

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 0;

     label03:
        r92 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r2 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        i33 = (int) z6;

        r93 = $r2[i33];

        $r3 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        i34 = (int) z6;

        r94 = $r3[i34];

        r95 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgDistProgram>;

        r96 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        $r4 = newarray (android.filterfw.core.Frame)[3];

        $r4[0] = r92;

        $r4[1] = r93;

        $r4[2] = r94;

        virtualinvoke r95.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>($r4, r96);

        $r5 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        virtualinvoke $r5.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r6 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        virtualinvoke $r6.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $r9 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $r8 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        $r7 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r9.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r8, $r7);

        $r10 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r10.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r11 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r11.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        r97 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        r98 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        r99 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram>;

        r100 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB>;

        $r12 = newarray (android.filterfw.core.Frame)[2];

        $r12[0] = r97;

        $r12[1] = r98;

        virtualinvoke r99.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>($r12, r100);

        $i4 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i3 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        if $i4 > $i3 goto label10;

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("video", r82);

        i0 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        i23 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        i1 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningVerifyDuration>;

        $i17 = i23 - i1;

        if i0 != $i17 goto label04;

        $r60 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r59 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        $r57 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        i35 = (int) z0;

        $r58 = $r57[i35];

        virtualinvoke $r60.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r59, $r58);

        $r61 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f2 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg>;

        $r62 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke $r61.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r62);

        $r63 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f3 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg>;

        $r64 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r63.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r64);

        $r65 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f4 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg>;

        $r66 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        virtualinvoke $r65.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r66);

        $r67 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f5 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg>;

        $r68 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        virtualinvoke $r67.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r68);

        goto label05;

     label04:
        $i18 = i23 - i1;

        if i0 <= $i18 goto label05;

        r101 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        i36 = (int) z6;

        r102 = r101[i36];

        r103 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        r104 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mMaskVerifyProgram>;

        i37 = (int) z0;

        r105 = r101[i37];

        $r52 = newarray (android.filterfw.core.Frame)[2];

        $r52[0] = r102;

        $r52[1] = r103;

        virtualinvoke r104.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>($r52, r105);

        $r53 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        i38 = (int) z0;

        $r54 = $r53[i38];

        virtualinvoke $r54.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r55 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        i39 = (int) z0;

        $r56 = $r55[i39];

        virtualinvoke $r56.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

     label05:
        $i24 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i25 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        if $i24 != $i25 goto label11;

        $r44 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r41 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        i40 = (int) z0;

        $r43 = $r41[i40];

        $r42 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage>;

        virtualinvoke $r44.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r43, $r42);

        $r45 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage>;

        $r46 = virtualinvoke $r45.<android.filterfw.core.GLFrame: java.nio.ByteBuffer getData()>();

        $r47 = virtualinvoke $r46.<java.nio.ByteBuffer: byte[] array()>();

        $b19 = $r47[3];

        s26 = $b19 & 255;

        $z3 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z3 == 0 goto label06;

        $r48 = newarray (java.lang.Object)[2];

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(s26);

        $r48[0] = $r49;

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r48[1] = $r50;

        $r51 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Mask_average is %d, threshold is %d", $r48);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r51);

     label06:
        if s26 < 20 goto label07;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 1;

        goto label09;

     label07:
        $z4 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z4 == 0 goto label08;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Learning done");

     label08:
        r106 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningDoneListener>;

        if r106 == null goto label09;

        interfaceinvoke r106.<android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener: void onLearningDone(android.filterpacks.videoproc.BackDropperFilter)>(r0);

     label09:
        goto label11;

     label10:
        $r13 = virtualinvoke r81.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r14 = virtualinvoke r82.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        r107 = virtualinvoke $r13.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r14);

        r108 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        r109 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB>;

        $r16 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $r15 = newarray (android.filterfw.core.Frame)[4];

        $r15[0] = r82;

        $r15[1] = r83;

        $r15[2] = r108;

        $r15[3] = r109;

        virtualinvoke $r16.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>($r15, r107);

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("video", r107);

        virtualinvoke r107.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

     label11:
        $i27 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i28 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        $i29 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningVerifyDuration>;

        $i30 = $i28 - $i29;

        if $i27 < $i30 goto label12;

        $f0 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg>;

        $d5 = (double) $f0;

        $b15 = $d5 cmpl 0.0;

        if $b15 > 0 goto label12;

        $f1 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg>;

        $d6 = (double) $f1;

        $b16 = $d6 cmpl 0.0;

        if $b16 <= 0 goto label13;

     label12:
        r110 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        r111 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        i41 = (int) z6;

        r112 = r111[i41];

        r113 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        r114 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        i42 = (int) z0;

        r115 = r111[i42];

        $r116 = newarray (android.filterfw.core.Frame)[3];

        $r116[0] = r110;

        $r116[1] = r112;

        $r116[2] = r113;

        virtualinvoke r114.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>($r116, r115);

        $r117 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        i43 = (int) z0;

        $r118 = $r117[i43];

        virtualinvoke $r118.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r119 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        i44 = (int) z0;

        $r120 = $r119[i44];

        virtualinvoke $r120.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        r121 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r122 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        i45 = (int) z6;

        r123 = $r122[i45];

        r124 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        i46 = (int) z6;

        r125 = r124[i46];

        r126 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        r127 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        i47 = (int) z0;

        r128 = r124[i47];

        $r129 = newarray (android.filterfw.core.Frame)[4];

        $r129[0] = r121;

        $r129[1] = r123;

        $r129[2] = r125;

        $r129[3] = r126;

        virtualinvoke r127.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>($r129, r128);

        $r130 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        i48 = (int) z0;

        $r131 = $r130[i48];

        virtualinvoke $r131.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r132 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        i49 = (int) z0;

        $r133 = $r132[i49];

        virtualinvoke $r133.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

     label13:
        $z10 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mProvideDebugOutputs>;

        if $z10 == 0 goto label14;

        $r32 = virtualinvoke r81.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r33 = virtualinvoke r82.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        r134 = virtualinvoke $r32.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r33);

        $r34 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mCopyOutProgram>;

        virtualinvoke $r34.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r82, r134);

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("debug1", r134);

        virtualinvoke r134.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        $r36 = virtualinvoke r81.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r37 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        r135 = virtualinvoke $r36.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r37);

        $r39 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mCopyOutProgram>;

        $r38 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r39.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r38, r135);

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("debug2", r135);

        virtualinvoke r135.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

     label14:
        $i5 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        i31 = $i5 + 1;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount> = i31;

        $z2 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z2 == 0 goto label16;

        $i6 = i31 % 30;

        if $i6 != 0 goto label16;

        $l7 = r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime>;

        $b8 = $l7 cmp -1L;

        if $b8 != 0 goto label15;

        $r31 = virtualinvoke r81.<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>();

        virtualinvoke $r31.<android.filterfw.core.GLEnvironment: void activate()>();

        staticinvoke <android.opengl.GLES20: void glFinish()>();

        $l14 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime> = $l14;

        goto label16;

     label15:
        $r18 = virtualinvoke r81.<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>();

        virtualinvoke $r18.<android.filterfw.core.GLEnvironment: void activate()>();

        staticinvoke <android.opengl.GLES20: void glFinish()>();

        l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Avg. frame duration: ");

        $r21 = newarray (java.lang.Object)[1];

        $l9 = r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime>;

        $l10 = l2 - $l9;

        $d0 = (double) $l10;

        $d1 = $d0 / 30.0;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r21[0] = $r22;

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%.2f", $r21);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms. Avg. fps: ");

        $r26 = newarray (java.lang.Object)[1];

        $l11 = r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime>;

        $l12 = l2 - $l11;

        $d2 = (double) $l12;

        $d3 = $d2 / 30.0;

        $d4 = 1000.0 / $d3;

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r26[0] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%.2f", $r26);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r30);

        r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime> = l2;

     label16:
        return;
    }

    public void relearn()
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        java.lang.Throwable $r2;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        entermonitor r0;

     label1:
        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setupPorts()
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.MutableFrameFormat r1;
        boolean $z0;
        java.lang.String $r2, $r3, $r4;
        java.lang.String[] r5, r6, r7;
        int i1, i2, i3, i4, i5, i6;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 0);

        r5 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mInputNames>;

        i1 = lengthof r5;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r4 = r5[i2];

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>($r4, r1);

        i2 = i2 + 1;

        goto label1;

     label2:
        r6 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mOutputNames>;

        i3 = lengthof r6;

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        $r3 = r6[i4];

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>($r3, "video");

        i4 = i4 + 1;

        goto label3;

     label4:
        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mProvideDebugOutputs>;

        if $z0 == 0 goto label6;

        r7 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mDebugOutputNames>;

        i5 = lengthof r7;

        i6 = 0;

     label5:
        if i6 >= i5 goto label6;

        $r2 = r7[i6];

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>($r2, "video");

        i6 = i6 + 1;

        goto label5;

     label6:
        return;
    }
}
