public class android.filterpacks.videosink.MediaEncoderFilter extends android.filterfw.core.Filter
{
    private static final int NO_AUDIO_SOURCE;
    private static final java.lang.String TAG;
    private int mAudioSource;
    private boolean mCaptureTimeLapse;
    private android.media.MediaRecorder$OnErrorListener mErrorListener;
    private java.io.FileDescriptor mFd;
    private int mFps;
    private int mHeight;
    private android.media.MediaRecorder$OnInfoListener mInfoListener;
    private long mLastTimeLapseFrameRealTimestampNs;
    private boolean mLogVerbose;
    private int mMaxDurationMs;
    private long mMaxFileSize;
    private android.media.MediaRecorder mMediaRecorder;
    private int mNumFramesEncoded;
    private int mOrientationHint;
    private java.lang.String mOutputFile;
    private int mOutputFormat;
    private android.media.CamcorderProfile mProfile;
    private android.filterfw.core.ShaderProgram mProgram;
    private boolean mRecording;
    private boolean mRecordingActive;
    private android.filterpacks.videosink.MediaEncoderFilter$OnRecordingDoneListener mRecordingDoneListener;
    private android.filterfw.core.GLFrame mScreen;
    private android.filterfw.geometry.Quad mSourceRegion;
    private int mSurfaceId;
    private long mTimeBetweenTimeLapseFrameCaptureUs;
    private long mTimestampNs;
    private int mVideoEncoder;
    private int mWidth;

    public void <init>(java.lang.String)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        java.lang.String r1, $r2;
        android.filterfw.geometry.Quad $r3;
        android.filterfw.geometry.Point $r4, $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecording> = 1;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>("/sdcard/MediaEncoderOut.mp4");

        r0.<android.filterpacks.videosink.MediaEncoderFilter: java.lang.String mOutputFile> = $r2;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: java.io.FileDescriptor mFd> = null;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mAudioSource> = -1;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder$OnInfoListener mInfoListener> = null;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder$OnErrorListener mErrorListener> = null;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterpacks.videosink.MediaEncoderFilter$OnRecordingDoneListener mRecordingDoneListener> = null;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mOrientationHint> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.CamcorderProfile mProfile> = null;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mWidth> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mHeight> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mFps> = 30;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mOutputFormat> = 2;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mVideoEncoder> = 2;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mMaxFileSize> = 0L;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mMaxDurationMs> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimeBetweenTimeLapseFrameCaptureUs> = 0L;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs> = 0L;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mLastTimeLapseFrameRealTimestampNs> = 0L;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mNumFramesEncoded> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mCaptureTimeLapse> = 0;

        $r3 = new android.filterfw.geometry.Quad;

        $r4 = new android.filterfw.geometry.Point;

        specialinvoke $r4.<android.filterfw.geometry.Point: void <init>(float,float)>(0.0F, 0.0F);

        $r5 = new android.filterfw.geometry.Point;

        specialinvoke $r5.<android.filterfw.geometry.Point: void <init>(float,float)>(1.0F, 0.0F);

        $r6 = new android.filterfw.geometry.Point;

        specialinvoke $r6.<android.filterfw.geometry.Point: void <init>(float,float)>(0.0F, 1.0F);

        $r7 = new android.filterfw.geometry.Point;

        specialinvoke $r7.<android.filterfw.geometry.Point: void <init>(float,float)>(1.0F, 1.0F);

        specialinvoke $r3.<android.filterfw.geometry.Quad: void <init>(android.filterfw.geometry.Point,android.filterfw.geometry.Point,android.filterfw.geometry.Point,android.filterfw.geometry.Point)>($r4, $r5, $r6, $r7);

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.geometry.Quad mSourceRegion> = $r3;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("MediaEncoderFilter", 2);

        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose> = $z0;

        return;
    }

    private void startRecording(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.media.CamcorderProfile r2, $r6;
        boolean $z0, z1, $z2;
        android.filterfw.core.MutableFrameFormat $r3;
        int $i0, $i1, $i3, i5, i6;
        android.filterfw.core.GLEnvironment $r4;
        android.media.MediaRecorder $r5, $r16, $r17, $r18;
        java.lang.Exception $r7;
        java.lang.RuntimeException $r8, $r10;
        java.lang.Throwable $r9, $r11;
        android.filterfw.core.FilterContext r12;
        android.filterfw.core.FrameManager $r13;
        android.filterfw.core.Frame $r14;
        android.filterfw.core.GLFrame $r15;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r12 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", "Starting recording");

     label01:
        $r3 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r3.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(2, 3);

        virtualinvoke $r3.<android.filterfw.core.MutableFrameFormat: void setBytesPerSample(int)>(4);

        $i0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mWidth>;

        if $i0 <= 0 goto label02;

        $i3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mHeight>;

        if $i3 <= 0 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        r2 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.CamcorderProfile mProfile>;

        if r2 == null goto label04;

        if z1 != 0 goto label04;

        i5 = r2.<android.media.CamcorderProfile: int videoFrameWidth>;

        $r6 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.CamcorderProfile mProfile>;

        i6 = $r6.<android.media.CamcorderProfile: int videoFrameHeight>;

        goto label05;

     label04:
        i5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mWidth>;

        i6 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mHeight>;

     label05:
        virtualinvoke $r3.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(i5, i6);

        $r13 = virtualinvoke r12.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r14 = virtualinvoke $r13.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)>($r3, 101, 0L);

        $r15 = (android.filterfw.core.GLFrame) $r14;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.GLFrame mScreen> = $r15;

        $r16 = new android.media.MediaRecorder;

        specialinvoke $r16.<android.media.MediaRecorder: void <init>()>();

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder> = $r16;

        specialinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()>();

     label06:
        $r17 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r17.<android.media.MediaRecorder: void prepare()>();

     label07:
        $r18 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r18.<android.media.MediaRecorder: void start()>();

        $z2 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z2 == 0 goto label08;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", "Open: registering surface from Mediarecorder");

     label08:
        $r4 = virtualinvoke r12.<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>();

        $r5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $i1 = virtualinvoke $r4.<android.filterfw.core.GLEnvironment: int registerSurfaceFromMediaRecorder(android.media.MediaRecorder)>($r5);

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mSurfaceId> = $i1;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mNumFramesEncoded> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive> = 1;

        return;

     label09:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unknown Exception inMediaRecorder.prepare()!", $r7);

        throw $r8;

     label10:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("IOException inMediaRecorder.prepare()!", $r9);

        throw $r10;

     label11:
        $r11 := @caughtexception;

        throw $r11;

        catch java.lang.IllegalStateException from label06 to label07 with label11;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.lang.Exception from label06 to label07 with label09;
    }

    private void stopRecording(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        boolean $z0, $z1;
        int $i0, $i1;
        android.media.MediaRecorder $r1, $r2;
        android.filterfw.core.GLFrame $r3;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;
        java.lang.RuntimeException $r8;
        android.filterpacks.videosink.MediaRecorderStopException $r9;
        android.filterfw.core.FilterContext r10;
        android.filterfw.core.GLEnvironment r11;
        android.filterpacks.videosink.MediaEncoderFilter$OnRecordingDoneListener r12;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r10 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", "Stopping recording");

     label1:
        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive> = 0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mNumFramesEncoded> = 0;

        r11 = virtualinvoke r10.<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>();

        $z1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        $r5 = newarray (java.lang.Object)[1];

        $i1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mSurfaceId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unregistering surface %d", $r5);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", $r7);

     label2:
        $i0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mSurfaceId>;

        virtualinvoke r11.<android.filterfw.core.GLEnvironment: void unregisterSurfaceId(int)>($i0);

     label3:
        $r1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r1.<android.media.MediaRecorder: void stop()>();

     label4:
        $r2 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r2.<android.media.MediaRecorder: void release()>();

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder> = null;

        $r3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.GLFrame mScreen>;

        virtualinvoke $r3.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.GLFrame mScreen> = null;

        r12 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterpacks.videosink.MediaEncoderFilter$OnRecordingDoneListener mRecordingDoneListener>;

        if r12 == null goto label5;

        interfaceinvoke r12.<android.filterpacks.videosink.MediaEncoderFilter$OnRecordingDoneListener: void onRecordingDone()>();

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        $r9 = new android.filterpacks.videosink.MediaRecorderStopException;

        specialinvoke $r9.<android.filterpacks.videosink.MediaRecorderStopException: void <init>(java.lang.String,java.lang.Throwable)>("MediaRecorder.stop() failed!", $r8);

        throw $r9;

        catch java.lang.RuntimeException from label3 to label4 with label6;
    }

    private void updateMediaRecorderParams()
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        int i0, $i3, $i4, $i5, $i6, $i7, $i9, $i10, i12, i13, $i14;
        long $l1, $l8;
        byte $b2;
        android.media.MediaRecorder $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r23, $r24, $r26;
        boolean $z0, z1;
        java.lang.String $r7, $r19, $r21;
        android.media.CamcorderProfile $r13, r22;
        java.lang.Exception $r16;
        java.lang.StringBuilder $r17;
        android.media.MediaRecorder$OnInfoListener $r25;
        android.media.MediaRecorder$OnErrorListener $r27;
        java.io.FileDescriptor r28;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        $l1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimeBetweenTimeLapseFrameCaptureUs>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mCaptureTimeLapse> = z1;

        $r2 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r2.<android.media.MediaRecorder: void setVideoSource(int)>(2);

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mCaptureTimeLapse>;

        if $z0 != 0 goto label03;

        i12 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mAudioSource>;

        if i12 == -1 goto label03;

        $r15 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r15.<android.media.MediaRecorder: void setAudioSource(int)>(i12);

     label03:
        r22 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.CamcorderProfile mProfile>;

        if r22 == null goto label04;

        $r12 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r12.<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)>(r22);

        $r13 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.CamcorderProfile mProfile>;

        $i10 = $r13.<android.media.CamcorderProfile: int videoFrameRate>;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mFps> = $i10;

        i13 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mWidth>;

        if i13 <= 0 goto label05;

        i0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mHeight>;

        if i0 <= 0 goto label05;

        $r14 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r14.<android.media.MediaRecorder: void setVideoSize(int,int)>(i13, i0);

        goto label05;

     label04:
        $r3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $i3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mOutputFormat>;

        virtualinvoke $r3.<android.media.MediaRecorder: void setOutputFormat(int)>($i3);

        $r4 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $i4 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mVideoEncoder>;

        virtualinvoke $r4.<android.media.MediaRecorder: void setVideoEncoder(int)>($i4);

        $r5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $i6 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mWidth>;

        $i5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mHeight>;

        virtualinvoke $r5.<android.media.MediaRecorder: void setVideoSize(int,int)>($i6, $i5);

        $r6 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $i7 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mFps>;

        virtualinvoke $r6.<android.media.MediaRecorder: void setVideoFrameRate(int)>($i7);

     label05:
        $r23 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $i14 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mOrientationHint>;

        virtualinvoke $r23.<android.media.MediaRecorder: void setOrientationHint(int)>($i14);

        $r24 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $r25 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder$OnInfoListener mInfoListener>;

        virtualinvoke $r24.<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>($r25);

        $r26 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $r27 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder$OnErrorListener mErrorListener>;

        virtualinvoke $r26.<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)>($r27);

        r28 = r0.<android.filterpacks.videosink.MediaEncoderFilter: java.io.FileDescriptor mFd>;

        if r28 == null goto label06;

        $r11 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r11.<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>(r28);

        goto label07;

     label06:
        $r8 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $r7 = r0.<android.filterpacks.videosink.MediaEncoderFilter: java.lang.String mOutputFile>;

        virtualinvoke $r8.<android.media.MediaRecorder: void setOutputFile(java.lang.String)>($r7);

     label07:
        $r9 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $l8 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mMaxFileSize>;

        virtualinvoke $r9.<android.media.MediaRecorder: void setMaxFileSize(long)>($l8);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting maxFileSize on MediaRecorder unsuccessful! ");

        $r19 = virtualinvoke $r16.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaEncoderFilter", $r21);

     label10:
        $r10 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        $i9 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mMaxDurationMs>;

        virtualinvoke $r10.<android.media.MediaRecorder: void setMaxDuration(int)>($i9);

        return;

        catch java.lang.Exception from label07 to label08 with label09;
    }

    private void updateSourceRegion()
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.filterfw.geometry.Quad $r2, $r3, $r5, $r7, $r9;
        android.filterfw.geometry.Point $r4, $r6, $r8, $r10;
        android.filterfw.core.ShaderProgram $r11;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        $r2 = new android.filterfw.geometry.Quad;

        specialinvoke $r2.<android.filterfw.geometry.Quad: void <init>()>();

        $r3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.geometry.Quad mSourceRegion>;

        $r4 = $r3.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p2>;

        $r2.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p0> = $r4;

        $r5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.geometry.Quad mSourceRegion>;

        $r6 = $r5.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p3>;

        $r2.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p1> = $r6;

        $r7 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.geometry.Quad mSourceRegion>;

        $r8 = $r7.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p0>;

        $r2.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p2> = $r8;

        $r9 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.geometry.Quad mSourceRegion>;

        $r10 = $r9.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p1>;

        $r2.<android.filterfw.geometry.Quad: android.filterfw.geometry.Point p3> = $r10;

        $r11 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.ShaderProgram mProgram>;

        virtualinvoke $r11.<android.filterfw.core.ShaderProgram: void setSourceRegion(android.filterfw.geometry.Quad)>($r2);

        return;
    }

    public void close(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0, $z1;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", "Closing");

     label1:
        $z1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void stopRecording(android.filterfw.core.FilterContext)>(r1);

     label2:
        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        java.lang.String r1, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3;
        android.filterfw.core.FilterContext r8;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r1 := @parameter0: java.lang.String;

        r8 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been updated");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", $r7);

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("recording");

        if $z1 == 0 goto label2;

        return;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("inputRegion");

        if $z2 == 0 goto label4;

        $z5 = virtualinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean isOpen()>();

        if $z5 == 0 goto label3;

        specialinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void updateSourceRegion()>();

     label3:
        return;

     label4:
        $z3 = virtualinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean isOpen()>();

        if $z3 == 0 goto label6;

        $z4 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive>;

        if $z4 != 0 goto label5;

        goto label6;

     label5:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot change recording parameters when the filter is recording!");

        throw $r2;

     label6:
        return;
    }

    public void open(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0, $z1;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", "Opening");

     label1:
        specialinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void updateSourceRegion()>();

        $z1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecording>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)>(r1);

     label2:
        return;
    }

    public void prepare(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.filterfw.core.ShaderProgram $r2;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", "Preparing");

     label1:
        $r2 = staticinvoke <android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram createIdentity(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.ShaderProgram mProgram> = $r2;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive> = 0;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.GLEnvironment r2;
        android.filterfw.core.Frame r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        long $l0, $l2, $l5;
        int $i1, $i3, $i4;
        android.filterfw.core.GLFrame $r4;
        android.filterfw.core.ShaderProgram $r5;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>();

        r3 = virtualinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("videoframe");

        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive>;

        if $z0 != 0 goto label1;

        $z4 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecording>;

        if $z4 == 0 goto label1;

        specialinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)>(r1);

     label1:
        $z5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive>;

        if $z5 == 0 goto label2;

        $z3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecording>;

        if $z3 != 0 goto label2;

        specialinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void stopRecording(android.filterfw.core.FilterContext)>(r1);

     label2:
        $z6 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mRecordingActive>;

        if $z6 != 0 goto label3;

        return;

     label3:
        $z1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mCaptureTimeLapse>;

        if $z1 == 0 goto label4;

        $l5 = virtualinvoke r3.<android.filterfw.core.Frame: long getTimestamp()>();

        $z2 = virtualinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean skipFrameAndModifyTimestamp(long)>($l5);

        if $z2 == 0 goto label5;

        return;

     label4:
        $l0 = virtualinvoke r3.<android.filterfw.core.Frame: long getTimestamp()>();

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs> = $l0;

     label5:
        $i1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mSurfaceId>;

        virtualinvoke r2.<android.filterfw.core.GLEnvironment: void activateSurfaceWithId(int)>($i1);

        $r5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.ShaderProgram mProgram>;

        $r4 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.GLFrame mScreen>;

        virtualinvoke $r5.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r3, $r4);

        $l2 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs>;

        virtualinvoke r2.<android.filterfw.core.GLEnvironment: void setSurfaceTimestamp(long)>($l2);

        virtualinvoke r2.<android.filterfw.core.GLEnvironment: void swapBuffers()>();

        $i3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mNumFramesEncoded>;

        $i4 = $i3 + 1;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: int mNumFramesEncoded> = $i4;

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 3);

        virtualinvoke r0.<android.filterpacks.videosink.MediaEncoderFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("videoframe", $r1);

        return;
    }

    public boolean skipFrameAndModifyTimestamp(long)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        long l0, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l13, $l14, $l16, $l17, $l18, $l19, $l22, $l23;
        int i1, $i2, $i8, $i11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r1, $r9, $r17;
        java.lang.String $r8, $r16, $r22;
        byte $b20;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        l0 := @parameter0: long;

        i1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mNumFramesEncoded>;

        if i1 != 0 goto label2;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mLastTimeLapseFrameRealTimestampNs> = l0;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs> = l0;

        $z3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z3 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timelapse: FIRST frame, last real t= ");

        $l22 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mLastTimeLapseFrameRealTimestampNs>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l22);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", setting t = ");

        $l23 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l23);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", $r22);

     label1:
        return 0;

     label2:
        if i1 < 2 goto label4;

        $l18 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mLastTimeLapseFrameRealTimestampNs>;

        $l16 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimeBetweenTimeLapseFrameCaptureUs>;

        $l17 = $l16 * 1000L;

        $l19 = $l18 + $l17;

        $b20 = l0 cmp $l19;

        if $b20 >= 0 goto label4;

        $z2 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z2 == 0 goto label3;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", "timelapse: skipping intermediate frame");

     label3:
        return 1;

     label4:
        $z0 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timelapse: encoding frame, Timestamp t = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", last real t= ");

        $l13 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mLastTimeLapseFrameRealTimestampNs>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", interval = ");

        $l14 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimeBetweenTimeLapseFrameCaptureUs>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l14);

        $r16 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", $r16);

     label5:
        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mLastTimeLapseFrameRealTimestampNs> = l0;

        $l5 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs>;

        $i2 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mFps>;

        $l3 = (long) $i2;

        $l4 = 1000000000L / $l3;

        $l6 = $l5 + $l4;

        r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs> = $l6;

        $z1 = r0.<android.filterpacks.videosink.MediaEncoderFilter: boolean mLogVerbose>;

        if $z1 == 0 goto label6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timelapse: encoding frame, setting t = ");

        $l7 = r0.<android.filterpacks.videosink.MediaEncoderFilter: long mTimestampNs>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", delta t = ");

        $i8 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mFps>;

        $l9 = (long) $i8;

        $l10 = 1000000000L / $l9;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fps = ");

        $i11 = r0.<android.filterpacks.videosink.MediaEncoderFilter: int mFps>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaEncoderFilter", $r8);

     label6:
        return 0;
    }

    public void tearDown(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosink.MediaEncoderFilter r0;
        android.filterfw.core.FilterContext r2;
        android.media.MediaRecorder r3;
        android.filterfw.core.GLFrame r4;

        r0 := @this: android.filterpacks.videosink.MediaEncoderFilter;

        r2 := @parameter0: android.filterfw.core.FilterContext;

        r3 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.media.MediaRecorder mMediaRecorder>;

        if r3 == null goto label1;

        virtualinvoke r3.<android.media.MediaRecorder: void release()>();

     label1:
        r4 = r0.<android.filterpacks.videosink.MediaEncoderFilter: android.filterfw.core.GLFrame mScreen>;

        if r4 == null goto label2;

        virtualinvoke r4.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <android.filterpacks.videosink.MediaEncoderFilter: java.lang.String TAG> = "MediaEncoderFilter";

        <android.filterpacks.videosink.MediaEncoderFilter: int NO_AUDIO_SOURCE> = -1;

        return;
    }
}
