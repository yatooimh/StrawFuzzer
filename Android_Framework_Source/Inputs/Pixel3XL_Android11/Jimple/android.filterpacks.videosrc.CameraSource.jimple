public class android.filterpacks.videosrc.CameraSource extends android.filterfw.core.Filter
{
    private static final int NEWFRAME_TIMEOUT;
    private static final int NEWFRAME_TIMEOUT_REPEAT;
    private static final java.lang.String TAG;
    private static final java.lang.String mFrameShader;
    private static final float[] mSourceCoords;
    private android.hardware.Camera mCamera;
    private android.filterfw.core.GLFrame mCameraFrame;
    private int mCameraId;
    private android.hardware.Camera$Parameters mCameraParameters;
    private float[] mCameraTransform;
    private int mFps;
    private android.filterfw.core.ShaderProgram mFrameExtractor;
    private int mHeight;
    private final boolean mLogVerbose;
    private float[] mMappedCoords;
    private boolean mNewFrameAvailable;
    private android.filterfw.core.MutableFrameFormat mOutputFormat;
    private android.graphics.SurfaceTexture mSurfaceTexture;
    private boolean mWaitForNewFrame;
    private int mWidth;
    private android.graphics.SurfaceTexture$OnFrameAvailableListener onCameraFrameAvailableListener;

    static void <clinit>()
    {
        float[] $r0;

        <android.filterpacks.videosrc.CameraSource: java.lang.String mFrameShader> = "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nuniform samplerExternalOES tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n}\n";

        <android.filterpacks.videosrc.CameraSource: java.lang.String TAG> = "CameraSource";

        <android.filterpacks.videosrc.CameraSource: int NEWFRAME_TIMEOUT_REPEAT> = 10;

        <android.filterpacks.videosrc.CameraSource: int NEWFRAME_TIMEOUT> = 100;

        $r0 = newarray (float)[16];

        $r0[0] = 0.0F;

        $r0[1] = 1.0F;

        $r0[2] = 0.0F;

        $r0[3] = 1.0F;

        $r0[4] = 1.0F;

        $r0[5] = 1.0F;

        $r0[6] = 0.0F;

        $r0[7] = 1.0F;

        $r0[8] = 0.0F;

        $r0[9] = 0.0F;

        $r0[10] = 0.0F;

        $r0[11] = 1.0F;

        $r0[12] = 1.0F;

        $r0[13] = 0.0F;

        $r0[14] = 0.0F;

        $r0[15] = 1.0F;

        <android.filterpacks.videosrc.CameraSource: float[] mSourceCoords> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        android.filterpacks.videosrc.CameraSource r0;
        java.lang.String r1;
        android.filterpacks.videosrc.CameraSource$1 $r2;
        float[] $r3, $r4;
        boolean $z0;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.videosrc.CameraSource: int mCameraId> = 0;

        r0.<android.filterpacks.videosrc.CameraSource: int mWidth> = 320;

        r0.<android.filterpacks.videosrc.CameraSource: int mHeight> = 240;

        r0.<android.filterpacks.videosrc.CameraSource: int mFps> = 30;

        r0.<android.filterpacks.videosrc.CameraSource: boolean mWaitForNewFrame> = 1;

        $r2 = new android.filterpacks.videosrc.CameraSource$1;

        specialinvoke $r2.<android.filterpacks.videosrc.CameraSource$1: void <init>(android.filterpacks.videosrc.CameraSource)>(r0);

        r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture$OnFrameAvailableListener onCameraFrameAvailableListener> = $r2;

        $r3 = newarray (float)[16];

        r0.<android.filterpacks.videosrc.CameraSource: float[] mCameraTransform> = $r3;

        $r4 = newarray (float)[16];

        r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords> = $r4;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CameraSource", 2);

        r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose> = $z0;

        return;
    }

    static boolean access$000(android.filterpacks.videosrc.CameraSource)
    {
        android.filterpacks.videosrc.CameraSource r0;
        boolean $z0;

        r0 := @parameter0: android.filterpacks.videosrc.CameraSource;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        return $z0;
    }

    static boolean access$102(android.filterpacks.videosrc.CameraSource, boolean)
    {
        android.filterpacks.videosrc.CameraSource r0;
        boolean z0;

        r0 := @parameter0: android.filterpacks.videosrc.CameraSource;

        z0 := @parameter1: boolean;

        r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable> = z0;

        return z0;
    }

    private void createFormats()
    {
        android.filterpacks.videosrc.CameraSource r0;
        int $i0, $i1;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        $i1 = r0.<android.filterpacks.videosrc.CameraSource: int mWidth>;

        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mHeight>;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>($i1, $i0, 3, 3);

        r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.MutableFrameFormat mOutputFormat> = $r1;

        return;
    }

    private int[] findClosestFpsRange(int, android.hardware.Camera$Parameters)
    {
        android.filterpacks.videosrc.CameraSource r0;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.Iterator r1;
        int[] r2, r16, r17;
        java.lang.Object $r3, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r12;
        android.hardware.Camera$Parameters r14;
        java.util.List r15;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        i0 := @parameter0: int;

        r14 := @parameter1: android.hardware.Camera$Parameters;

        r15 = virtualinvoke r14.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        $r3 = interfaceinvoke r15.<java.util.List: java.lang.Object get(int)>(0);

        r16 = (int[]) $r3;

        r1 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (int[]) $r13;

        r17 = r16;

        $i5 = r2[0];

        $i4 = i0 * 1000;

        if $i5 >= $i4 goto label2;

        r17 = r16;

        $i7 = r2[1];

        $i6 = i0 * 1000;

        if $i7 <= $i6 goto label2;

        r17 = r16;

        $i9 = r2[0];

        $i8 = r16[0];

        if $i9 <= $i8 goto label2;

        r17 = r16;

        $i11 = r2[1];

        $i10 = r16[1];

        if $i11 >= $i10 goto label2;

        r17 = r2;

     label2:
        r16 = r17;

        goto label1;

     label3:
        $z1 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z1 == 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested fps: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Closest frame rate range: [");

        $i1 = r16[0];

        $d0 = (double) $i1;

        $d1 = $d0 / 1000.0;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i2 = r16[1];

        $d2 = (double) $i2;

        $d3 = $d2 / 1000.0;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r12);

     label4:
        return r16;
    }

    private int[] findClosestSize(int, int, android.hardware.Camera$Parameters)
    {
        android.filterpacks.videosrc.CameraSource r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, $i16, i17;
        java.util.Iterator r1;
        java.lang.Object $r2, $r4, $r18;
        android.hardware.Camera$Size $r3, $r5, r21;
        boolean $z0, $z1;
        int[] $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r17;
        android.hardware.Camera$Parameters r19;
        java.util.List r20;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r19 := @parameter2: android.hardware.Camera$Parameters;

        r20 = virtualinvoke r19.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

        i8 = -1;

        i9 = -1;

        $r2 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (android.hardware.Camera$Size) $r2;

        i10 = $r3.<android.hardware.Camera$Size: int width>;

        $r4 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (android.hardware.Camera$Size) $r4;

        i11 = $r5.<android.hardware.Camera$Size: int height>;

        r1 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r21 = (android.hardware.Camera$Size) $r18;

        i12 = i8;

        i13 = i9;

        $i3 = r21.<android.hardware.Camera$Size: int width>;

        if $i3 > i0 goto label2;

        i12 = i8;

        i13 = i9;

        $i5 = r21.<android.hardware.Camera$Size: int height>;

        if $i5 > i1 goto label2;

        i12 = i8;

        i13 = i9;

        $i6 = r21.<android.hardware.Camera$Size: int width>;

        if $i6 < i8 goto label2;

        i12 = i8;

        i13 = i9;

        $i7 = r21.<android.hardware.Camera$Size: int height>;

        if $i7 < i9 goto label2;

        i12 = r21.<android.hardware.Camera$Size: int width>;

        i13 = r21.<android.hardware.Camera$Size: int height>;

     label2:
        i14 = i10;

        i15 = i11;

        $i16 = r21.<android.hardware.Camera$Size: int width>;

        if $i16 >= i10 goto label3;

        i14 = i10;

        i15 = i11;

        $i4 = r21.<android.hardware.Camera$Size: int height>;

        if $i4 >= i11 goto label3;

        i14 = r21.<android.hardware.Camera$Size: int width>;

        i15 = r21.<android.hardware.Camera$Size: int height>;

     label3:
        i8 = i12;

        i9 = i13;

        i10 = i14;

        i11 = i15;

        goto label1;

     label4:
        i17 = i8;

        if i8 != -1 goto label5;

        i9 = i11;

        i17 = i10;

     label5:
        $z1 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z1 == 0 goto label6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested resolution: (");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). Closest match: (");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r17 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r17);

     label6:
        $r6 = newarray (int)[2];

        $r6[0] = i17;

        $r6[1] = i9;

        return $r6;
    }

    public void close(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.hardware.Camera $r2;
        android.graphics.SurfaceTexture $r3;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Closing");

     label1:
        $r2 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        virtualinvoke $r2.<android.hardware.Camera: void release()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = null;

        $r3 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r3.<android.graphics.SurfaceTexture: void release()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture> = null;

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.hardware.Camera$Parameters $r3, $r4, $r5;
        int $i0, $i1, $i2;
        android.hardware.Camera $r6;
        java.lang.String r7;
        int[] r8;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("framerate");

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters getCameraParameters()>();

        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mFps>;

        $r3 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        r8 = specialinvoke r0.<android.filterpacks.videosrc.CameraSource: int[] findClosestFpsRange(int,android.hardware.Camera$Parameters)>($i0, $r3);

        $r4 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        $i2 = r8[0];

        $i1 = r8[1];

        virtualinvoke $r4.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i2, $i1);

        $r6 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r5 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        virtualinvoke $r6.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r5);

     label1:
        return;
    }

    public android.hardware.Camera$Parameters getCameraParameters()
    {
        android.filterpacks.videosrc.CameraSource r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        android.hardware.Camera$Parameters $r1, $r4, $r8, $r10, $r11, $r13, r14;
        android.hardware.Camera $r2, $r3, $r5, $r6;
        java.lang.Throwable $r7;
        boolean z0;
        int[] r9, r12;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        entermonitor r0;

        z0 = 0;

     label01:
        $r1 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        if $r1 != null goto label07;

     label02:
        $r2 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        if $r2 != null goto label04;

        $i1 = r0.<android.filterpacks.videosrc.CameraSource: int mCameraId>;

        $r6 = staticinvoke <android.hardware.Camera: android.hardware.Camera open(int)>($i1);

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = $r6;

     label03:
        z0 = 1;

     label04:
        $r3 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r4 = virtualinvoke $r3.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters> = $r4;

     label05:
        if z0 == 0 goto label07;

     label06:
        $r5 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        virtualinvoke $r5.<android.hardware.Camera: void release()>();

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = null;

     label07:
        $i2 = r0.<android.filterpacks.videosrc.CameraSource: int mWidth>;

        $i3 = r0.<android.filterpacks.videosrc.CameraSource: int mHeight>;

        $r8 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        r9 = specialinvoke r0.<android.filterpacks.videosrc.CameraSource: int[] findClosestSize(int,int,android.hardware.Camera$Parameters)>($i2, $i3, $r8);

     label08:
        i4 = r9[0];

     label09:
        r0.<android.filterpacks.videosrc.CameraSource: int mWidth> = i4;

     label10:
        i0 = r9[1];

     label11:
        r0.<android.filterpacks.videosrc.CameraSource: int mHeight> = i0;

        $r10 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        virtualinvoke $r10.<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>(i4, i0);

        $i5 = r0.<android.filterpacks.videosrc.CameraSource: int mFps>;

        $r11 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        r12 = specialinvoke r0.<android.filterpacks.videosrc.CameraSource: int[] findClosestFpsRange(int,android.hardware.Camera$Parameters)>($i5, $r11);

        $r13 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        $i6 = r12[0];

        $i7 = r12[1];

        virtualinvoke $r13.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i6, $i7);

        r14 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

     label12:
        exitmonitor r0;

        return r14;

     label13:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public void open(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        boolean $z0;
        int $i0, $i1;
        android.hardware.Camera $r2, $r5, $r10, $r13;
        android.hardware.Camera$Parameters $r4;
        android.filterfw.core.FrameManager $r6;
        android.filterfw.core.MutableFrameFormat $r7;
        android.filterfw.core.Frame $r8;
        android.graphics.SurfaceTexture$OnFrameAvailableListener $r11;
        android.graphics.SurfaceTexture $r12, r26;
        java.lang.Throwable $r14;
        java.lang.String $r17, $r21;
        android.filterfw.core.FilterContext r22;
        android.filterfw.core.GLFrame r23;
        java.lang.StringBuilder r27;
        java.lang.RuntimeException r28;
        java.io.IOException r29;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r22 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Opening");

     label1:
        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mCameraId>;

        $r2 = staticinvoke <android.hardware.Camera: android.hardware.Camera open(int)>($i0);

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera> = $r2;

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters getCameraParameters()>();

        $r5 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r4 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        virtualinvoke $r5.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r4);

        specialinvoke r0.<android.filterpacks.videosrc.CameraSource: void createFormats()>();

        $r6 = virtualinvoke r22.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r7 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        $r8 = virtualinvoke $r6.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)>($r7, 104, 0L);

        r23 = (android.filterfw.core.GLFrame) $r8;

        r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame> = r23;

        r26 = new android.graphics.SurfaceTexture;

        $i1 = virtualinvoke r23.<android.filterfw.core.GLFrame: int getTextureId()>();

        specialinvoke r26.<android.graphics.SurfaceTexture: void <init>(int)>($i1);

        r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture> = r26;

     label2:
        $r10 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        virtualinvoke $r10.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>(r26);

     label3:
        $r12 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        $r11 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture$OnFrameAvailableListener onCameraFrameAvailableListener>;

        virtualinvoke $r12.<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>($r11);

        r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable> = 0;

        $r13 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        virtualinvoke $r13.<android.hardware.Camera: void startPreview()>();

        return;

     label4:
        $r14 := @caughtexception;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not bind camera surface texture: ");

        r29 = (java.io.IOException) $r14;

        $r17 = virtualinvoke r29.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        r28 = new java.lang.RuntimeException;

        $r21 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw r28;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void prepare(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.filterfw.core.ShaderProgram $r2;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Preparing");

     label1:
        $r2 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r2.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nuniform samplerExternalOES tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n}\n");

        r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.ShaderProgram mFrameExtractor> = $r2;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.ShaderProgram r1, $r10;
        long l0;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8;
        float[] $r2, $r4, $r5, $r6, r29;
        android.graphics.SurfaceTexture $r3, $r11, $r27;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.filterfw.core.FrameManager $r7;
        android.filterfw.core.MutableFrameFormat $r8;
        android.filterfw.core.GLFrame $r9;
        java.lang.StringBuilder $r13, $r18;
        double $d0, $d1;
        java.lang.String $r17, $r22;
        java.lang.Thread $r20;
        java.lang.Throwable $r24;
        android.filterfw.core.FilterContext r25;
        android.filterfw.core.Frame r30;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r25 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Processing new frame");

     label01:
        $z1 = r0.<android.filterpacks.videosrc.CameraSource: boolean mWaitForNewFrame>;

        if $z1 == 0 goto label07;

     label02:
        $z5 = r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable>;

        if $z5 != 0 goto label06;

     label03:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(100L);

     label04:
        goto label02;

     label05:
        $r24 := @caughtexception;

        $z7 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z7 == 0 goto label04;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Interrupted while waiting for new frame");

        goto label04;

     label06:
        r0.<android.filterpacks.videosrc.CameraSource: boolean mNewFrameAvailable> = 0;

        $z6 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z6 == 0 goto label07;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Got new frame");

     label07:
        $r27 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r27.<android.graphics.SurfaceTexture: void updateTexImage()>();

        $z8 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z8 == 0 goto label08;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using frame extractor in thread: ");

        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r22);

     label08:
        $r3 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        $r2 = r0.<android.filterpacks.videosrc.CameraSource: float[] mCameraTransform>;

        virtualinvoke $r3.<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>($r2);

        $r6 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $r5 = r0.<android.filterpacks.videosrc.CameraSource: float[] mCameraTransform>;

        $r4 = <android.filterpacks.videosrc.CameraSource: float[] mSourceCoords>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r6, 0, $r5, 0, $r4, 0);

        r1 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.ShaderProgram mFrameExtractor>;

        r29 = r0.<android.filterpacks.videosrc.CameraSource: float[] mMappedCoords>;

        $f7 = r29[0];

        $f6 = r29[1];

        $f5 = r29[4];

        $f4 = r29[5];

        $f3 = r29[8];

        $f2 = r29[9];

        $f1 = r29[12];

        $f0 = r29[13];

        virtualinvoke r1.<android.filterfw.core.ShaderProgram: boolean setSourceRegion(float,float,float,float,float,float,float,float)>($f7, $f6, $f5, $f4, $f3, $f2, $f1, $f0);

        $r7 = virtualinvoke r25.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r8 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        r30 = virtualinvoke $r7.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r8);

        $r10 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.ShaderProgram mFrameExtractor>;

        $r9 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame>;

        virtualinvoke $r10.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r9, r30);

        $r11 = r0.<android.filterpacks.videosrc.CameraSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        l0 = virtualinvoke $r11.<android.graphics.SurfaceTexture: long getTimestamp()>();

        $z3 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z3 == 0 goto label09;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timestamp: ");

        $d0 = (double) l0;

        $d1 = $d0 / 1.0E9;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", $r17);

     label09:
        virtualinvoke r30.<android.filterfw.core.Frame: void setTimestamp(long)>(l0);

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("video", r30);

        virtualinvoke r30.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        $z4 = r0.<android.filterpacks.videosrc.CameraSource: boolean mLogVerbose>;

        if $z4 == 0 goto label10;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraSource", "Done processing new frame");

     label10:
        return;

        catch java.lang.InterruptedException from label03 to label04 with label05;
    }

    public void setCameraParameters(android.hardware.Camera$Parameters)
    {
        android.filterpacks.videosrc.CameraSource r0;
        int $i0, $i1;
        boolean $z0;
        android.hardware.Camera$Parameters $r1, r4;
        android.hardware.Camera $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r4 := @parameter0: android.hardware.Camera$Parameters;

        entermonitor r0;

     label1:
        $i1 = r0.<android.filterpacks.videosrc.CameraSource: int mWidth>;

        $i0 = r0.<android.filterpacks.videosrc.CameraSource: int mHeight>;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>($i1, $i0);

        r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters> = r4;

        $z0 = virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: boolean isOpen()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera mCamera>;

        $r1 = r0.<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters mCameraParameters>;

        virtualinvoke $r2.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setupPorts()
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 3);

        virtualinvoke r0.<android.filterpacks.videosrc.CameraSource: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)>("video", $r1);

        return;
    }

    public void tearDown(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.CameraSource r0;
        android.filterfw.core.FilterContext r2;
        android.filterfw.core.GLFrame r3;

        r0 := @this: android.filterpacks.videosrc.CameraSource;

        r2 := @parameter0: android.filterfw.core.FilterContext;

        r3 = r0.<android.filterpacks.videosrc.CameraSource: android.filterfw.core.GLFrame mCameraFrame>;

        if r3 == null goto label1;

        virtualinvoke r3.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

     label1:
        return;
    }
}
