public class android.filterpacks.videosrc.MediaSource extends android.filterfw.core.Filter
{
    private static final int NEWFRAME_TIMEOUT;
    private static final int NEWFRAME_TIMEOUT_REPEAT;
    private static final int PREP_TIMEOUT;
    private static final int PREP_TIMEOUT_REPEAT;
    private static final java.lang.String TAG;
    private static final float[] mSourceCoords_0;
    private static final float[] mSourceCoords_180;
    private static final float[] mSourceCoords_270;
    private static final float[] mSourceCoords_90;
    private boolean mCompleted;
    private android.content.Context mContext;
    private android.filterfw.core.ShaderProgram mFrameExtractor;
    private final java.lang.String mFrameShader;
    private boolean mGotSize;
    private int mHeight;
    private final boolean mLogVerbose;
    private boolean mLooping;
    private android.filterfw.core.GLFrame mMediaFrame;
    private android.media.MediaPlayer mMediaPlayer;
    private boolean mNewFrameAvailable;
    private int mOrientation;
    private boolean mOrientationUpdated;
    private android.filterfw.core.MutableFrameFormat mOutputFormat;
    private boolean mPaused;
    private boolean mPlaying;
    private boolean mPrepared;
    private boolean mSelectedIsUrl;
    private android.content.res.AssetFileDescriptor mSourceAsset;
    private java.lang.String mSourceUrl;
    private android.graphics.SurfaceTexture mSurfaceTexture;
    private float mVolume;
    private boolean mWaitForNewFrame;
    private int mWidth;
    private android.media.MediaPlayer$OnCompletionListener onCompletionListener;
    private android.graphics.SurfaceTexture$OnFrameAvailableListener onMediaFrameAvailableListener;
    private android.media.MediaPlayer$OnPreparedListener onPreparedListener;
    private android.media.MediaPlayer$OnVideoSizeChangedListener onVideoSizeChangedListener;

    static void <clinit>()
    {
        float[] $r0, $r1, $r2, $r3;

        <android.filterpacks.videosrc.MediaSource: java.lang.String TAG> = "MediaSource";

        <android.filterpacks.videosrc.MediaSource: int PREP_TIMEOUT_REPEAT> = 100;

        <android.filterpacks.videosrc.MediaSource: int PREP_TIMEOUT> = 100;

        <android.filterpacks.videosrc.MediaSource: int NEWFRAME_TIMEOUT_REPEAT> = 10;

        <android.filterpacks.videosrc.MediaSource: int NEWFRAME_TIMEOUT> = 100;

        $r0 = newarray (float)[16];

        $r0[0] = 1.0F;

        $r0[1] = 1.0F;

        $r0[2] = 0.0F;

        $r0[3] = 1.0F;

        $r0[4] = 0.0F;

        $r0[5] = 1.0F;

        $r0[6] = 0.0F;

        $r0[7] = 1.0F;

        $r0[8] = 1.0F;

        $r0[9] = 0.0F;

        $r0[10] = 0.0F;

        $r0[11] = 1.0F;

        $r0[12] = 0.0F;

        $r0[13] = 0.0F;

        $r0[14] = 0.0F;

        $r0[15] = 1.0F;

        <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_0> = $r0;

        $r1 = newarray (float)[16];

        $r1[0] = 0.0F;

        $r1[1] = 1.0F;

        $r1[2] = 0.0F;

        $r1[3] = 1.0F;

        $r1[4] = 0.0F;

        $r1[5] = 0.0F;

        $r1[6] = 0.0F;

        $r1[7] = 1.0F;

        $r1[8] = 1.0F;

        $r1[9] = 1.0F;

        $r1[10] = 0.0F;

        $r1[11] = 1.0F;

        $r1[12] = 1.0F;

        $r1[13] = 0.0F;

        $r1[14] = 0.0F;

        $r1[15] = 1.0F;

        <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_270> = $r1;

        $r2 = newarray (float)[16];

        $r2[0] = 0.0F;

        $r2[1] = 0.0F;

        $r2[2] = 0.0F;

        $r2[3] = 1.0F;

        $r2[4] = 1.0F;

        $r2[5] = 0.0F;

        $r2[6] = 0.0F;

        $r2[7] = 1.0F;

        $r2[8] = 0.0F;

        $r2[9] = 1.0F;

        $r2[10] = 0.0F;

        $r2[11] = 1.0F;

        $r2[12] = 1.0F;

        $r2[13] = 1.0F;

        $r2[14] = 0.0F;

        $r2[15] = 1.0F;

        <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_180> = $r2;

        $r3 = newarray (float)[16];

        $r3[0] = 1.0F;

        $r3[1] = 0.0F;

        $r3[2] = 0.0F;

        $r3[3] = 1.0F;

        $r3[4] = 1.0F;

        $r3[5] = 1.0F;

        $r3[6] = 0.0F;

        $r3[7] = 1.0F;

        $r3[8] = 0.0F;

        $r3[9] = 0.0F;

        $r3[10] = 0.0F;

        $r3[11] = 1.0F;

        $r3[12] = 0.0F;

        $r3[13] = 1.0F;

        $r3[14] = 0.0F;

        $r3[15] = 1.0F;

        <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_90> = $r3;

        return;
    }

    public void <init>(java.lang.String)
    {
        android.filterpacks.videosrc.MediaSource r0;
        java.lang.String r1;
        android.filterpacks.videosrc.MediaSource$1 $r2;
        android.filterpacks.videosrc.MediaSource$2 $r3;
        android.filterpacks.videosrc.MediaSource$3 $r4;
        android.filterpacks.videosrc.MediaSource$4 $r5;
        boolean $z0;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mSourceUrl> = "";

        r0.<android.filterpacks.videosrc.MediaSource: android.content.res.AssetFileDescriptor mSourceAsset> = null;

        r0.<android.filterpacks.videosrc.MediaSource: android.content.Context mContext> = null;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mSelectedIsUrl> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mWaitForNewFrame> = 1;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mLooping> = 1;

        r0.<android.filterpacks.videosrc.MediaSource: float mVolume> = 0.0F;

        r0.<android.filterpacks.videosrc.MediaSource: int mOrientation> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mFrameShader> = "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nuniform samplerExternalOES tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n}\n";

        $r2 = new android.filterpacks.videosrc.MediaSource$1;

        specialinvoke $r2.<android.filterpacks.videosrc.MediaSource$1: void <init>(android.filterpacks.videosrc.MediaSource)>(r0);

        r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer$OnVideoSizeChangedListener onVideoSizeChangedListener> = $r2;

        $r3 = new android.filterpacks.videosrc.MediaSource$2;

        specialinvoke $r3.<android.filterpacks.videosrc.MediaSource$2: void <init>(android.filterpacks.videosrc.MediaSource)>(r0);

        r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer$OnPreparedListener onPreparedListener> = $r3;

        $r4 = new android.filterpacks.videosrc.MediaSource$3;

        specialinvoke $r4.<android.filterpacks.videosrc.MediaSource$3: void <init>(android.filterpacks.videosrc.MediaSource)>(r0);

        r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer$OnCompletionListener onCompletionListener> = $r4;

        $r5 = new android.filterpacks.videosrc.MediaSource$4;

        specialinvoke $r5.<android.filterpacks.videosrc.MediaSource$4: void <init>(android.filterpacks.videosrc.MediaSource)>(r0);

        r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture$OnFrameAvailableListener onMediaFrameAvailableListener> = $r5;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mNewFrameAvailable> = 0;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("MediaSource", 2);

        r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose> = $z0;

        return;
    }

    static boolean access$000(android.filterpacks.videosrc.MediaSource)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean $z0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        $z0 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        return $z0;
    }

    static boolean access$100(android.filterpacks.videosrc.MediaSource)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean $z0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        $z0 = r0.<android.filterpacks.videosrc.MediaSource: boolean mGotSize>;

        return $z0;
    }

    static boolean access$102(android.filterpacks.videosrc.MediaSource, boolean)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean z0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        z0 := @parameter1: boolean;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mGotSize> = z0;

        return z0;
    }

    static int access$200(android.filterpacks.videosrc.MediaSource)
    {
        android.filterpacks.videosrc.MediaSource r0;
        int $i0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        $i0 = r0.<android.filterpacks.videosrc.MediaSource: int mOrientation>;

        return $i0;
    }

    static android.filterfw.core.MutableFrameFormat access$300(android.filterpacks.videosrc.MediaSource)
    {
        android.filterpacks.videosrc.MediaSource r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        $r1 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        return $r1;
    }

    static int access$402(android.filterpacks.videosrc.MediaSource, int)
    {
        android.filterpacks.videosrc.MediaSource r0;
        int i0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        i0 := @parameter1: int;

        r0.<android.filterpacks.videosrc.MediaSource: int mWidth> = i0;

        return i0;
    }

    static int access$502(android.filterpacks.videosrc.MediaSource, int)
    {
        android.filterpacks.videosrc.MediaSource r0;
        int i0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        i0 := @parameter1: int;

        r0.<android.filterpacks.videosrc.MediaSource: int mHeight> = i0;

        return i0;
    }

    static boolean access$602(android.filterpacks.videosrc.MediaSource, boolean)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean z0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        z0 := @parameter1: boolean;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mPrepared> = z0;

        return z0;
    }

    static boolean access$702(android.filterpacks.videosrc.MediaSource, boolean)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean z0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        z0 := @parameter1: boolean;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mCompleted> = z0;

        return z0;
    }

    static boolean access$802(android.filterpacks.videosrc.MediaSource, boolean)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean z0;

        r0 := @parameter0: android.filterpacks.videosrc.MediaSource;

        z0 := @parameter1: boolean;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mNewFrameAvailable> = z0;

        return z0;
    }

    private void createFormats()
    {
        android.filterpacks.videosrc.MediaSource r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 3);

        r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.MutableFrameFormat mOutputFormat> = $r1;

        return;
    }

    private boolean setupMediaPlayer(boolean)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.media.MediaPlayer $r1, $r3, $r7, $r14, $r19, $r24, $r27, $r35, r42, r43, $r46, $r47, $r50, $r51, $r53, $r55;
        android.content.res.AssetFileDescriptor $r2, $r5, $r6, $r9, $r29, $r37;
        java.io.FileDescriptor $r4;
        long $l0, $l1;
        java.lang.String $r11, $r13, $r16, $r18, $r21, $r23, $r30, $r32, $r33, $r38, $r40, $r41;
        android.content.Context $r12, $r15;
        android.net.Uri $r17;
        java.lang.Throwable $r25, $r26, $r34;
        java.lang.Object[] $r28, $r31, $r36, $r39;
        java.lang.StringBuilder r44, r45;
        float $f0, $f1;
        android.view.Surface r48;
        android.graphics.SurfaceTexture $r49, $r57;
        android.media.MediaPlayer$OnVideoSizeChangedListener $r52;
        android.media.MediaPlayer$OnPreparedListener $r54;
        android.media.MediaPlayer$OnCompletionListener $r56;
        android.graphics.SurfaceTexture$OnFrameAvailableListener $r58;
        java.lang.RuntimeException r60, r61, r63, r64, r65;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        r0.<android.filterpacks.videosrc.MediaSource: boolean mPrepared> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mGotSize> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mPlaying> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mPaused> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mCompleted> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mNewFrameAvailable> = 0;

        $z1 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z1 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Setting up playback.");

     label02:
        $r1 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        if $r1 == null goto label05;

        $z5 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z5 == 0 goto label03;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Resetting existing MediaPlayer.");

     label03:
        $r24 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r24.<android.media.MediaPlayer: void reset()>();

     label04:
        goto label07;

     label05:
        $z2 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z2 == 0 goto label06;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Creating new MediaPlayer.");

     label06:
        r42 = new android.media.MediaPlayer;

        specialinvoke r42.<android.media.MediaPlayer: void <init>()>();

        r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer> = r42;

     label07:
        r43 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

     label08:
        if r43 == null goto label29;

        if z0 == 0 goto label14;

     label09:
        $z4 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z4 == 0 goto label10;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting MediaPlayer source to URI ");

        $r21 = r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mSourceUrl>;

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", $r23);

     label10:
        $r12 = r0.<android.filterpacks.videosrc.MediaSource: android.content.Context mContext>;

        if $r12 != null goto label12;

        $r19 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $r18 = r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mSourceUrl>;

        virtualinvoke $r19.<android.media.MediaPlayer: void setDataSource(java.lang.String)>($r18);

     label11:
        goto label16;

     label12:
        $r14 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $r15 = r0.<android.filterpacks.videosrc.MediaSource: android.content.Context mContext>;

        $r13 = r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mSourceUrl>;

        $r16 = virtualinvoke $r13.<java.lang.String: java.lang.String toString()>();

        $r17 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r16);

        virtualinvoke $r14.<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>($r15, $r17);

     label13:
        goto label16;

     label14:
        $z3 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z3 == 0 goto label15;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting MediaPlayer source to asset ");

        $r9 = r0.<android.filterpacks.videosrc.MediaSource: android.content.res.AssetFileDescriptor mSourceAsset>;

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", $r11);

     label15:
        $r3 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $r2 = r0.<android.filterpacks.videosrc.MediaSource: android.content.res.AssetFileDescriptor mSourceAsset>;

        $r4 = virtualinvoke $r2.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r5 = r0.<android.filterpacks.videosrc.MediaSource: android.content.res.AssetFileDescriptor mSourceAsset>;

        $l0 = virtualinvoke $r5.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $r6 = r0.<android.filterpacks.videosrc.MediaSource: android.content.res.AssetFileDescriptor mSourceAsset>;

        $l1 = virtualinvoke $r6.<android.content.res.AssetFileDescriptor: long getLength()>();

        virtualinvoke $r3.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r4, $l0, $l1);

     label16:
        $r46 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $z6 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLooping>;

        virtualinvoke $r46.<android.media.MediaPlayer: void setLooping(boolean)>($z6);

        $r47 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $f0 = r0.<android.filterpacks.videosrc.MediaSource: float mVolume>;

        $f1 = r0.<android.filterpacks.videosrc.MediaSource: float mVolume>;

        virtualinvoke $r47.<android.media.MediaPlayer: void setVolume(float,float)>($f0, $f1);

        r48 = new android.view.Surface;

        $r49 = r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        specialinvoke r48.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>($r49);

        $r50 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r50.<android.media.MediaPlayer: void setSurface(android.view.Surface)>(r48);

        virtualinvoke r48.<android.view.Surface: void release()>();

        $r51 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $r52 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer$OnVideoSizeChangedListener onVideoSizeChangedListener>;

        virtualinvoke $r51.<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>($r52);

        $r53 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $r54 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer$OnPreparedListener onPreparedListener>;

        virtualinvoke $r53.<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>($r54);

        $r55 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $r56 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer$OnCompletionListener onCompletionListener>;

        virtualinvoke $r55.<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>($r56);

        $r57 = r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        $r58 = r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture$OnFrameAvailableListener onMediaFrameAvailableListener>;

        virtualinvoke $r57.<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>($r58);

        $z7 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z7 == 0 goto label17;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Preparing MediaPlayer.");

     label17:
        $r7 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r7.<android.media.MediaPlayer: void prepareAsync()>();

     label18:
        exitmonitor r0;

        return 1;

     label19:
        $r26 := @caughtexception;

     label20:
        $r27 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r27.<android.media.MediaPlayer: void release()>();

        r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer> = null;

     label21:
        if z0 == 0 goto label23;

     label22:
        r60 = new java.lang.RuntimeException;

        $r31 = newarray (java.lang.Object)[1];

        $r32 = r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mSourceUrl>;

        $r31[0] = $r32;

        $r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to set MediaPlayer to URL %s!", $r31);

        specialinvoke r60.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r33, $r26);

        throw r60;

     label23:
        r61 = new java.lang.RuntimeException;

        $r28 = newarray (java.lang.Object)[1];

        $r29 = r0.<android.filterpacks.videosrc.MediaSource: android.content.res.AssetFileDescriptor mSourceAsset>;

        $r28[0] = $r29;

        $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to set MediaPlayer to asset %s!", $r28);

        specialinvoke r61.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r26);

        throw r61;

     label24:
        $r34 := @caughtexception;

     label25:
        $r35 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r35.<android.media.MediaPlayer: void release()>();

        r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer> = null;

     label26:
        if z0 == 0 goto label28;

     label27:
        r63 = new java.lang.RuntimeException;

        $r39 = newarray (java.lang.Object)[1];

        $r40 = r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mSourceUrl>;

        $r39[0] = $r40;

        $r41 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to set MediaPlayer to URL %s!", $r39);

        specialinvoke r63.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r41, $r34);

        throw r63;

     label28:
        r64 = new java.lang.RuntimeException;

        $r36 = newarray (java.lang.Object)[1];

        $r37 = r0.<android.filterpacks.videosrc.MediaSource: android.content.res.AssetFileDescriptor mSourceAsset>;

        $r36[0] = $r37;

        $r38 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to set MediaPlayer to asset %s!", $r36);

        specialinvoke r64.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r38, $r34);

        throw r64;

     label29:
        r65 = new java.lang.RuntimeException;

        specialinvoke r65.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to create a MediaPlayer!");

        throw r65;

     label30:
        $r25 := @caughtexception;

        exitmonitor r0;

        throw $r25;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label06 to label07 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.io.IOException from label09 to label10 with label24;
        catch java.lang.IllegalArgumentException from label09 to label10 with label19;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.io.IOException from label10 to label11 with label24;
        catch java.lang.IllegalArgumentException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label30;
        catch java.io.IOException from label12 to label13 with label24;
        catch java.lang.IllegalArgumentException from label12 to label13 with label19;
        catch java.lang.Throwable from label12 to label13 with label30;
        catch java.io.IOException from label14 to label15 with label24;
        catch java.lang.IllegalArgumentException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label30;
        catch java.io.IOException from label15 to label16 with label24;
        catch java.lang.IllegalArgumentException from label15 to label16 with label19;
        catch java.lang.Throwable from label15 to label16 with label30;
        catch java.lang.Throwable from label16 to label17 with label30;
        catch java.lang.Throwable from label17 to label18 with label30;
        catch java.lang.Throwable from label20 to label21 with label30;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label23 to label24 with label30;
        catch java.lang.Throwable from label25 to label26 with label30;
        catch java.lang.Throwable from label27 to label28 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label29 to label30 with label30;
    }

    public void close(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.MediaSource r0;
        android.filterfw.core.FilterContext r1;
        android.media.MediaPlayer $r2, $r3, $r5;
        boolean $z0, $z1;
        android.graphics.SurfaceTexture $r4;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $z0 = virtualinvoke $r2.<android.media.MediaPlayer: boolean isPlaying()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r5.<android.media.MediaPlayer: void stop()>();

     label1:
        r0.<android.filterpacks.videosrc.MediaSource: boolean mPrepared> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mGotSize> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mPlaying> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mPaused> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mCompleted> = 0;

        r0.<android.filterpacks.videosrc.MediaSource: boolean mNewFrameAvailable> = 0;

        $r3 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r3.<android.media.MediaPlayer: void release()>();

        r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer> = null;

        $r4 = r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r4.<android.graphics.SurfaceTexture: void release()>();

        r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture> = null;

        $z1 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "MediaSource closed");

     label2:
        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.MediaSource r0;
        android.filterfw.core.FilterContext r1;
        float f0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13, $z14, $z15, $z16, $z17, $z19, $z20, z22, z23, $z24;
        android.filterfw.core.MutableFrameFormat $r2, $r3;
        android.media.MediaPlayer $r4, r6;
        java.lang.String r5;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Parameter update");

     label01:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("sourceUrl");

        if $z1 == 0 goto label03;

        $z19 = virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean isOpen()>();

        if $z19 == 0 goto label14;

        $z20 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z20 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Opening new source URL");

     label02:
        z22 = r0.<android.filterpacks.videosrc.MediaSource: boolean mSelectedIsUrl>;

        if z22 == 0 goto label14;

        specialinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean setupMediaPlayer(boolean)>(z22);

        goto label14;

     label03:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("sourceAsset");

        if $z2 == 0 goto label05;

        $z16 = virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean isOpen()>();

        if $z16 == 0 goto label14;

        $z17 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z17 == 0 goto label04;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Opening new source FD");

     label04:
        z23 = r0.<android.filterpacks.videosrc.MediaSource: boolean mSelectedIsUrl>;

        if z23 != 0 goto label14;

        specialinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean setupMediaPlayer(boolean)>(z23);

        goto label14;

     label05:
        $z3 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("loop");

        if $z3 == 0 goto label06;

        $z14 = virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean isOpen()>();

        if $z14 == 0 goto label14;

        $r4 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        $z15 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLooping>;

        virtualinvoke $r4.<android.media.MediaPlayer: void setLooping(boolean)>($z15);

        goto label14;

     label06:
        $z4 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("sourceIsUrl");

        if $z4 == 0 goto label09;

        $z9 = virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean isOpen()>();

        if $z9 == 0 goto label14;

        $z10 = r0.<android.filterpacks.videosrc.MediaSource: boolean mSelectedIsUrl>;

        if $z10 == 0 goto label07;

        $z13 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z13 == 0 goto label08;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Opening new source URL");

        goto label08;

     label07:
        $z11 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z11 == 0 goto label08;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Opening new source Asset");

     label08:
        $z24 = r0.<android.filterpacks.videosrc.MediaSource: boolean mSelectedIsUrl>;

        specialinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean setupMediaPlayer(boolean)>($z24);

        goto label14;

     label09:
        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("volume");

        if $z5 == 0 goto label10;

        $z8 = virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean isOpen()>();

        if $z8 == 0 goto label14;

        r6 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        f0 = r0.<android.filterpacks.videosrc.MediaSource: float mVolume>;

        virtualinvoke r6.<android.media.MediaPlayer: void setVolume(float,float)>(f0, f0);

        goto label14;

     label10:
        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("orientation");

        if $z6 == 0 goto label14;

        $z7 = r0.<android.filterpacks.videosrc.MediaSource: boolean mGotSize>;

        if $z7 == 0 goto label14;

        i0 = r0.<android.filterpacks.videosrc.MediaSource: int mOrientation>;

        if i0 == 0 goto label12;

        if i0 != 180 goto label11;

        goto label12;

     label11:
        $r3 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        $i4 = r0.<android.filterpacks.videosrc.MediaSource: int mHeight>;

        $i3 = r0.<android.filterpacks.videosrc.MediaSource: int mWidth>;

        virtualinvoke $r3.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>($i4, $i3);

        goto label13;

     label12:
        $r2 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        $i2 = r0.<android.filterpacks.videosrc.MediaSource: int mWidth>;

        $i1 = r0.<android.filterpacks.videosrc.MediaSource: int mHeight>;

        virtualinvoke $r2.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>($i2, $i1);

     label13:
        r0.<android.filterpacks.videosrc.MediaSource: boolean mOrientationUpdated> = 1;

     label14:
        return;
    }

    public void open(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        android.filterfw.core.FilterContext r8;
        android.filterfw.core.FrameManager $r9;
        android.filterfw.core.MutableFrameFormat $r10;
        android.filterfw.core.Frame $r11;
        android.filterfw.core.GLFrame r12;
        android.graphics.SurfaceTexture $r13;
        int $i3;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        r8 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Opening MediaSource");

        $z1 = r0.<android.filterpacks.videosrc.MediaSource: boolean mSelectedIsUrl>;

        if $z1 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current URL is ");

        $r5 = r0.<android.filterpacks.videosrc.MediaSource: java.lang.String mSourceUrl>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", $r7);

        goto label2;

     label1:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Current source is Asset!");

     label2:
        $r9 = virtualinvoke r8.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r10 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        $r11 = virtualinvoke $r9.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)>($r10, 104, 0L);

        r12 = (android.filterfw.core.GLFrame) $r11;

        r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.GLFrame mMediaFrame> = r12;

        $r13 = new android.graphics.SurfaceTexture;

        $i3 = virtualinvoke r12.<android.filterfw.core.GLFrame: int getTextureId()>();

        specialinvoke $r13.<android.graphics.SurfaceTexture: void <init>(int)>($i3);

        r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture> = $r13;

        $z2 = r0.<android.filterpacks.videosrc.MediaSource: boolean mSelectedIsUrl>;

        $z3 = specialinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean setupMediaPlayer(boolean)>($z2);

        if $z3 == 0 goto label3;

        return;

     label3:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error setting up MediaPlayer!");

        throw $r2;
    }

    public void pauseVideo(boolean)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean z0, $z1, $z2, $z3;
        android.media.MediaPlayer $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $z1 = virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: boolean isOpen()>();

        if $z1 == 0 goto label7;

     label2:
        if z0 == 0 goto label5;

     label3:
        $z3 = r0.<android.filterpacks.videosrc.MediaSource: boolean mPaused>;

        if $z3 != 0 goto label5;

        $r3 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r3.<android.media.MediaPlayer: void pause()>();

     label4:
        goto label7;

     label5:
        if z0 != 0 goto label7;

     label6:
        $z2 = r0.<android.filterpacks.videosrc.MediaSource: boolean mPaused>;

        if $z2 == 0 goto label7;

        $r2 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r2.<android.media.MediaPlayer: void start()>();

     label7:
        r0.<android.filterpacks.videosrc.MediaSource: boolean mPaused> = z0;

     label8:
        exitmonitor r0;

        return;

     label9:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    protected void prepare(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.MediaSource r0;
        boolean $z0;
        android.filterfw.core.ShaderProgram $r1;
        android.filterfw.core.FilterContext r2;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        r2 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Preparing MediaSource");

     label1:
        $r1 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r1.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nuniform samplerExternalOES tex_sampler_0;\nvarying vec2 v_texcoord;\nvoid main() {\n  gl_FragColor = texture2D(tex_sampler_0, v_texcoord);\n}\n");

        r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.ShaderProgram mFrameExtractor> = $r1;

        virtualinvoke $r1.<android.filterfw.core.ShaderProgram: void setSourceRect(float,float,float,float)>(0.0F, 1.0F, 1.0F, -1.0F);

        specialinvoke r0.<android.filterpacks.videosrc.MediaSource: void createFormats()>();

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.MediaSource r0;
        long l0;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        android.media.MediaPlayer $r1, $r30, $r32;
        java.lang.NullPointerException $r2;
        java.lang.StringBuilder $r4, $r12;
        double $d0, $d1;
        java.lang.String $r8, $r15, $r25;
        android.graphics.SurfaceTexture $r9, $r38, $r47;
        float[] $r10, $r26, $r27, $r28, r39, r40;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        android.filterfw.core.ShaderProgram $r11, $r45;
        int $i2, i11, i12, i13;
        java.lang.Object[] $r16;
        java.lang.Float $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.RuntimeException $r29, $r31;
        java.lang.Throwable $r33, $r34;
        android.filterfw.core.FilterContext r35;
        android.filterfw.core.FrameManager $r42;
        android.filterfw.core.MutableFrameFormat $r43;
        android.filterfw.core.Frame r44;
        android.filterfw.core.GLFrame $r46;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        r35 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Processing new frame");

     label01:
        $r1 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        if $r1 == null goto label32;

        $z1 = r0.<android.filterpacks.videosrc.MediaSource: boolean mCompleted>;

        if $z1 == 0 goto label02;

        virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: void closeOutputPort(java.lang.String)>("video");

        return;

     label02:
        $z2 = r0.<android.filterpacks.videosrc.MediaSource: boolean mPlaying>;

        if $z2 != 0 goto label13;

        $z10 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z10 == 0 goto label03;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Waiting for preparation to complete");

     label03:
        i11 = 0;

     label04:
        $z15 = r0.<android.filterpacks.videosrc.MediaSource: boolean mGotSize>;

        if $z15 == 0 goto label07;

        $z12 = r0.<android.filterpacks.videosrc.MediaSource: boolean mPrepared>;

        if $z12 != 0 goto label05;

        goto label07;

     label05:
        $z13 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z13 == 0 goto label06;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Starting playback");

     label06:
        $r32 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r32.<android.media.MediaPlayer: void start()>();

        goto label13;

     label07:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(100L);

     label08:
        goto label10;

     label09:
        $r33 := @caughtexception;

     label10:
        $z11 = r0.<android.filterpacks.videosrc.MediaSource: boolean mCompleted>;

        if $z11 == 0 goto label11;

        virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: void closeOutputPort(java.lang.String)>("video");

        return;

     label11:
        i11 = i11 + 1;

        if i11 == 100 goto label12;

        goto label04;

     label12:
        $r30 = r0.<android.filterpacks.videosrc.MediaSource: android.media.MediaPlayer mMediaPlayer>;

        virtualinvoke $r30.<android.media.MediaPlayer: void release()>();

        $r31 = new java.lang.RuntimeException;

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>("MediaPlayer timed out while preparing!");

        throw $r31;

     label13:
        $z3 = r0.<android.filterpacks.videosrc.MediaSource: boolean mPaused>;

        if $z3 == 0 goto label14;

        $z9 = r0.<android.filterpacks.videosrc.MediaSource: boolean mPlaying>;

        if $z9 != 0 goto label24;

     label14:
        $z4 = r0.<android.filterpacks.videosrc.MediaSource: boolean mWaitForNewFrame>;

        if $z4 == 0 goto label23;

        $z6 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z6 == 0 goto label15;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Waiting for new frame");

     label15:
        i12 = 0;

     label16:
        $z16 = r0.<android.filterpacks.videosrc.MediaSource: boolean mNewFrameAvailable>;

        if $z16 != 0 goto label22;

        if i12 != 10 goto label18;

        $z8 = r0.<android.filterpacks.videosrc.MediaSource: boolean mCompleted>;

        if $z8 == 0 goto label17;

        virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: void closeOutputPort(java.lang.String)>("video");

        return;

     label17:
        $r29 = new java.lang.RuntimeException;

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String)>("Timeout waiting for new frame!");

        throw $r29;

     label18:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(100L);

     label19:
        goto label21;

     label20:
        $r34 := @caughtexception;

        $z14 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z14 == 0 goto label21;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "interrupted");

     label21:
        i12 = i12 + 1;

        goto label16;

     label22:
        r0.<android.filterpacks.videosrc.MediaSource: boolean mNewFrameAvailable> = 0;

        $z7 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z7 == 0 goto label23;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", "Got new frame");

     label23:
        $r38 = r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r38.<android.graphics.SurfaceTexture: void updateTexImage()>();

        r0.<android.filterpacks.videosrc.MediaSource: boolean mOrientationUpdated> = 1;

     label24:
        $z17 = r0.<android.filterpacks.videosrc.MediaSource: boolean mOrientationUpdated>;

        if $z17 == 0 goto label30;

        r39 = newarray (float)[16];

        $r9 = r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        virtualinvoke $r9.<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>(r39);

        r40 = newarray (float)[16];

        i13 = r0.<android.filterpacks.videosrc.MediaSource: int mOrientation>;

        if i13 == 90 goto label27;

        if i13 == 180 goto label26;

        if i13 == 270 goto label25;

        $r28 = <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_0>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r40, 0, r39, 0, $r28, 0);

        goto label28;

     label25:
        $r27 = <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_270>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r40, 0, r39, 0, $r27, 0);

        goto label28;

     label26:
        $r26 = <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_180>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r40, 0, r39, 0, $r26, 0);

        goto label28;

     label27:
        $r10 = <android.filterpacks.videosrc.MediaSource: float[] mSourceCoords_90>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r40, 0, r39, 0, $r10, 0);

     label28:
        $z18 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z18 == 0 goto label29;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OrientationHint = ");

        $i2 = r0.<android.filterpacks.videosrc.MediaSource: int mOrientation>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", $r15);

        $r16 = newarray (java.lang.Object)[8];

        $f8 = r40[4];

        $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        $r16[0] = $r17;

        $f9 = r40[5];

        $r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f9);

        $r16[1] = $r18;

        $f10 = r40[0];

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f10);

        $r16[2] = $r19;

        $f11 = r40[1];

        $r20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f11);

        $r16[3] = $r20;

        $f12 = r40[12];

        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f12);

        $r16[4] = $r21;

        $f13 = r40[13];

        $r22 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f13);

        $r16[5] = $r22;

        $f14 = r40[8];

        $r23 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f14);

        $r16[6] = $r23;

        $f15 = r40[9];

        $r24 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f15);

        $r16[7] = $r24;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("SetSourceRegion: %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f", $r16);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", $r25);

     label29:
        $r11 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.ShaderProgram mFrameExtractor>;

        $f7 = r40[4];

        $f6 = r40[5];

        $f5 = r40[0];

        $f4 = r40[1];

        $f3 = r40[12];

        $f2 = r40[13];

        $f1 = r40[8];

        $f0 = r40[9];

        virtualinvoke $r11.<android.filterfw.core.ShaderProgram: boolean setSourceRegion(float,float,float,float,float,float,float,float)>($f7, $f6, $f5, $f4, $f3, $f2, $f1, $f0);

        r0.<android.filterpacks.videosrc.MediaSource: boolean mOrientationUpdated> = 0;

     label30:
        $r42 = virtualinvoke r35.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r43 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        r44 = virtualinvoke $r42.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r43);

        $r45 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.ShaderProgram mFrameExtractor>;

        $r46 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.GLFrame mMediaFrame>;

        virtualinvoke $r45.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r46, r44);

        $r47 = r0.<android.filterpacks.videosrc.MediaSource: android.graphics.SurfaceTexture mSurfaceTexture>;

        l0 = virtualinvoke $r47.<android.graphics.SurfaceTexture: long getTimestamp()>();

        $z19 = r0.<android.filterpacks.videosrc.MediaSource: boolean mLogVerbose>;

        if $z19 == 0 goto label31;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timestamp: ");

        $d0 = (double) l0;

        $d1 = $d0 / 1.0E9;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaSource", $r8);

     label31:
        virtualinvoke r44.<android.filterfw.core.Frame: void setTimestamp(long)>(l0);

        virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("video", r44);

        virtualinvoke r44.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        r0.<android.filterpacks.videosrc.MediaSource: boolean mPlaying> = 1;

        return;

     label32:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Unexpected null media player!");

        throw $r2;

        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.InterruptedException from label18 to label19 with label20;
    }

    public void setupPorts()
    {
        android.filterpacks.videosrc.MediaSource r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 3);

        virtualinvoke r0.<android.filterpacks.videosrc.MediaSource: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)>("video", $r1);

        return;
    }

    public void tearDown(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videosrc.MediaSource r0;
        android.filterfw.core.FilterContext r2;
        android.filterfw.core.GLFrame r3;

        r0 := @this: android.filterpacks.videosrc.MediaSource;

        r2 := @parameter0: android.filterfw.core.FilterContext;

        r3 = r0.<android.filterpacks.videosrc.MediaSource: android.filterfw.core.GLFrame mMediaFrame>;

        if r3 == null goto label1;

        virtualinvoke r3.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

     label1:
        return;
    }
}
