public final class android.graphics.Bitmap extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int DENSITY_NONE;
    private static final long NATIVE_ALLOCATION_SIZE;
    private static final java.lang.String TAG;
    private static final int WORKING_COMPRESS_STORAGE;
    private static volatile int sDefaultDensity;
    public static volatile int sPreloadTracingNumInstantiatedBitmaps;
    public static volatile long sPreloadTracingTotalBitmapsSize;
    private android.graphics.ColorSpace mColorSpace;
    public int mDensity;
    private int mHeight;
    private final long mNativePtr;
    private byte[] mNinePatchChunk;
    private android.graphics.NinePatch$InsetStruct mNinePatchInsets;
    private boolean mRecycled;
    private boolean mRequestPremultiplied;
    private int mWidth;

    static void <clinit>()
    {
        android.graphics.Bitmap$1 $r0;

        <android.graphics.Bitmap: int WORKING_COMPRESS_STORAGE> = 4096;

        <android.graphics.Bitmap: java.lang.String TAG> = "Bitmap";

        <android.graphics.Bitmap: long NATIVE_ALLOCATION_SIZE> = 32L;

        <android.graphics.Bitmap: int DENSITY_NONE> = 0;

        <android.graphics.Bitmap: int sDefaultDensity> = -1;

        $r0 = new android.graphics.Bitmap$1;

        specialinvoke $r0.<android.graphics.Bitmap$1: void <init>()>();

        <android.graphics.Bitmap: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    void <init>(long, int, int, int, boolean, byte[], android.graphics.NinePatch$InsetStruct)
    {
        android.graphics.Bitmap r0;
        long l0;
        int i1, i2, i3;
        boolean z0;
        byte[] r1;
        android.graphics.NinePatch$InsetStruct r2;

        r0 := @this: android.graphics.Bitmap;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        r1 := @parameter5: byte[];

        r2 := @parameter6: android.graphics.NinePatch$InsetStruct;

        specialinvoke r0.<android.graphics.Bitmap: void <init>(long,int,int,int,boolean,byte[],android.graphics.NinePatch$InsetStruct,boolean)>(l0, i1, i2, i3, z0, r1, r2, 1);

        return;
    }

    void <init>(long, int, int, int, boolean, byte[], android.graphics.NinePatch$InsetStruct, boolean)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2, $i6, $i7, i14, i15;
        boolean z0, z1, $z2;
        android.graphics.NinePatch$InsetStruct r1;
        byte $b3;
        java.lang.RuntimeException $r2;
        java.lang.Class $r3, $r6;
        java.lang.ClassLoader $r4, $r7;
        long $l4, $l5, $l8, $l9, $l10, $l11, $l12, l13, l16;
        byte[] r8;
        libcore.util.NativeAllocationRegistry r9;

        r0 := @this: android.graphics.Bitmap;

        l13 := @parameter0: long;

        i14 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        r8 := @parameter5: byte[];

        r1 := @parameter6: android.graphics.NinePatch$InsetStruct;

        z1 := @parameter7: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = staticinvoke <android.graphics.Bitmap: int getDefaultDensity()>();

        r0.<android.graphics.Bitmap: int mDensity> = $i2;

        $b3 = l13 cmp 0L;

        if $b3 == 0 goto label5;

        r0.<android.graphics.Bitmap: int mWidth> = i14;

        r0.<android.graphics.Bitmap: int mHeight> = i0;

        r0.<android.graphics.Bitmap: boolean mRequestPremultiplied> = z0;

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = r8;

        r0.<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct mNinePatchInsets> = r1;

        if i1 < 0 goto label1;

        r0.<android.graphics.Bitmap: int mDensity> = i1;

     label1:
        r0.<android.graphics.Bitmap: long mNativePtr> = l13;

        i15 = virtualinvoke r0.<android.graphics.Bitmap: int getAllocationByteCount()>();

        if z1 == 0 goto label2;

        $r6 = class "Landroid/graphics/Bitmap;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l11 = staticinvoke <android.graphics.Bitmap: long nativeGetNativeFinalizer()>();

        $l12 = (long) i15;

        r9 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long,long)>($r7, $l11, $l12);

        goto label3;

     label2:
        $r3 = class "Landroid/graphics/Bitmap;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l4 = staticinvoke <android.graphics.Bitmap: long nativeGetNativeFinalizer()>();

        $l5 = (long) i15;

        r9 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createNonmalloced(java.lang.ClassLoader,long,long)>($r4, $l4, $l5);

     label3:
        virtualinvoke r9.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l13);

        $z2 = <android.content.res.ResourcesImpl: boolean TRACE_FOR_DETAILED_PRELOAD>;

        if $z2 == 0 goto label4;

        $i6 = <android.graphics.Bitmap: int sPreloadTracingNumInstantiatedBitmaps>;

        $i7 = $i6 + 1;

        <android.graphics.Bitmap: int sPreloadTracingNumInstantiatedBitmaps> = $i7;

        l16 = (long) i15;

        $l9 = <android.graphics.Bitmap: long sPreloadTracingTotalBitmapsSize>;

        $l8 = l16 + 32L;

        $l10 = $l9 + $l8;

        <android.graphics.Bitmap: long sPreloadTracingTotalBitmapsSize> = $l10;

     label4:
        return;

     label5:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("internal error: native bitmap is 0");

        throw $r2;
    }

    static android.graphics.Bitmap access$000(android.os.Parcel)
    {
        android.os.Parcel r0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: android.os.Parcel;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel)>(r0);

        return $r1;
    }

    private void checkHardware(java.lang.String)
    {
        android.graphics.Bitmap r0;
        java.lang.String r1;
        android.graphics.Bitmap$Config $r2, $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if $r2 == $r3 goto label1;

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r4;
    }

    private void checkPixelAccess(int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if i0 >= $i2 goto label2;

        $i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i1 >= $i3 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be < bitmap.height()");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be < bitmap.width()");

        throw $r1;
    }

    private void checkPixelsAccess(int, int, int, int, int, int, int[])
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        int[] r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4, $r5, $r6;
        java.lang.ArrayIndexOutOfBoundsException $r7;

        r0 := @this: android.graphics.Bitmap;

        i13 := @parameter0: int;

        i14 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r1 := @parameter6: int[];

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i13, i14);

        if i0 < 0 goto label6;

        if i1 < 0 goto label5;

        $i4 = i13 + i0;

        $i5 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if $i4 > $i5 goto label4;

        $i6 = i14 + i1;

        $i7 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if $i6 > $i7 goto label3;

        $i8 = staticinvoke <java.lang.Math: int abs(int)>(i3);

        if $i8 < i0 goto label2;

        $i9 = i1 - 1;

        $i10 = $i9 * i3;

        i15 = $i10 + i2;

        i16 = lengthof r1;

        if i2 < 0 goto label1;

        $i11 = i2 + i0;

        if $i11 > i16 goto label1;

        if i15 < 0 goto label1;

        $i12 = i15 + i0;

        if $i12 > i16 goto label1;

        return;

     label1:
        $r7 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r7;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r6;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r5;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r4;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be >= 0");

        throw $r3;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be >= 0");

        throw $r2;
    }

    private void checkRecycled(java.lang.String)
    {
        android.graphics.Bitmap r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    private static void checkWidthHeight(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= 0 goto label2;

        if i1 <= 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be > 0");

        throw $r1;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be > 0");

        throw $r0;
    }

    private static void checkXYSign(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label2;

        if i1 < 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be >= 0");

        throw $r1;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be >= 0");

        throw $r0;
    }

    private static float clamp(float, android.graphics.ColorSpace, int)
    {
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.ColorSpace r0;
        int i0;

        f0 := @parameter0: float;

        r0 := @parameter1: android.graphics.ColorSpace;

        i0 := @parameter2: int;

        $f1 = virtualinvoke r0.<android.graphics.ColorSpace: float getMaxValue(int)>(i0);

        $f2 = staticinvoke <java.lang.Math: float min(float,float)>(f0, $f1);

        $f3 = virtualinvoke r0.<android.graphics.ColorSpace: float getMinValue(int)>(i0);

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);

        return $f4;
    }

    public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config)
    {
        int i0, i1;
        android.graphics.Bitmap$Config r0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>(i0, i1, r0, 1);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config, boolean)
    {
        int i0, i1;
        android.graphics.Bitmap$Config r0;
        boolean z0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        z0 := @parameter3: boolean;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>(null, i0, i1, r0, z0);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config, boolean, android.graphics.ColorSpace)
    {
        int i0, i1;
        android.graphics.Bitmap$Config r0;
        boolean z0;
        android.graphics.ColorSpace r1;
        android.graphics.Bitmap $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        z0 := @parameter3: boolean;

        r1 := @parameter4: android.graphics.ColorSpace;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>(null, i0, i1, r0, z0, r1);

        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r0, 0, 0, $i0, $i1);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int)
    {
        android.graphics.Bitmap r0, $r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r0, i0, i1, i2, i3, null, 0);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int, android.graphics.Matrix, boolean)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, i11, i12, i13, i14, i15, i16, $i17;
        android.graphics.Matrix r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, z9, z10, z11, $z12, $z13;
        android.graphics.ColorSpace r4, r26;
        java.lang.IllegalArgumentException $r5, $r6, $r7;
        android.graphics.Rect $r8;
        android.graphics.RectF $r9, $r10;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.Bitmap$Config $r11, $r13, $r14, $r19, $r20, r22, r23, r25, r27;
        android.graphics.Bitmap $r12, r17, r21, r28;
        android.graphics.ColorSpace$Named $r15;
        int[] $r16;
        long $l8;
        android.graphics.Paint $r29, r30;
        android.graphics.Canvas $r31;

        r17 := @parameter0: android.graphics.Bitmap;

        i11 := @parameter1: int;

        i12 := @parameter2: int;

        i13 := @parameter3: int;

        i0 := @parameter4: int;

        r0 := @parameter5: android.graphics.Matrix;

        z0 := @parameter6: boolean;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i11, i12);

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>(i13, i0);

        $i1 = i11 + i13;

        $i2 = virtualinvoke r17.<android.graphics.Bitmap: int getWidth()>();

        if $i1 > $i2 goto label21;

        $i3 = i12 + i0;

        $i4 = virtualinvoke r17.<android.graphics.Bitmap: int getHeight()>();

        if $i3 > $i4 goto label20;

        $z1 = virtualinvoke r17.<android.graphics.Bitmap: boolean isRecycled()>();

        if $z1 != 0 goto label19;

        $z2 = virtualinvoke r17.<android.graphics.Bitmap: boolean isMutable()>();

        if $z2 != 0 goto label02;

        if i11 != 0 goto label02;

        if i12 != 0 goto label02;

        $i9 = virtualinvoke r17.<android.graphics.Bitmap: int getWidth()>();

        if i13 != $i9 goto label02;

        $i10 = virtualinvoke r17.<android.graphics.Bitmap: int getHeight()>();

        if i0 != $i10 goto label02;

        if r0 == null goto label01;

        $z8 = virtualinvoke r0.<android.graphics.Matrix: boolean isIdentity()>();

        if $z8 == 0 goto label02;

     label01:
        return r17;

     label02:
        $r19 = virtualinvoke r17.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r20 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if $r19 != $r20 goto label03;

        z9 = 1;

        goto label04;

     label03:
        z9 = 0;

     label04:
        r21 = r17;

        if z9 == 0 goto label05;

        specialinvoke r17.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        $l8 = r17.<android.graphics.Bitmap: long mNativePtr>;

        r21 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCopyPreserveInternalConfig(long)>($l8);

     label05:
        $r8 = new android.graphics.Rect;

        $i6 = i11 + i13;

        $i5 = i12 + i0;

        specialinvoke $r8.<android.graphics.Rect: void <init>(int,int,int,int)>(i11, i12, $i6, $i5);

        $r9 = new android.graphics.RectF;

        $f1 = (float) i13;

        $f0 = (float) i0;

        specialinvoke $r9.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f1, $f0);

        $r10 = new android.graphics.RectF;

        specialinvoke $r10.<android.graphics.RectF: void <init>()>();

        r22 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r23 = virtualinvoke r21.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if r23 == null goto label09;

        $r16 = <android.graphics.Bitmap$2: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i7 = virtualinvoke r23.<android.graphics.Bitmap$Config: int ordinal()>();

        i14 = $r16[$i7];

        if i14 == 1 goto label08;

        if i14 == 2 goto label07;

        if i14 == 3 goto label06;

        r22 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label09;

     label06:
        r22 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGBA_F16>;

        goto label09;

     label07:
        r22 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        goto label09;

     label08:
        r22 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        goto label09;

     label09:
        r4 = virtualinvoke r21.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

        if r0 == null goto label16;

        $z4 = virtualinvoke r0.<android.graphics.Matrix: boolean isIdentity()>();

        if $z4 == 0 goto label10;

        goto label16;

     label10:
        $z5 = virtualinvoke r0.<android.graphics.Matrix: boolean rectStaysRect()>();

        z10 = $z5 ^ 1;

        virtualinvoke r0.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>($r10, $r9);

        $f2 = virtualinvoke $r10.<android.graphics.RectF: float width()>();

        i15 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $f3 = virtualinvoke $r10.<android.graphics.RectF: float height()>();

        i16 = staticinvoke <java.lang.Math: int round(float)>($f3);

        r25 = r22;

        r26 = r4;

        if z10 == 0 goto label11;

        r25 = r22;

        r26 = r4;

        $r13 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if r22 == $r13 goto label11;

        r25 = r22;

        r26 = r4;

        $r14 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGBA_F16>;

        if r22 == $r14 goto label11;

        r27 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r25 = r27;

        r26 = r4;

        if r4 != null goto label11;

        $r15 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        r26 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r15);

        r25 = r27;

     label11:
        if z10 != 0 goto label13;

        $z7 = virtualinvoke r21.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z7 == 0 goto label12;

        goto label13;

     label12:
        z11 = 0;

        goto label14;

     label13:
        z11 = 1;

     label14:
        r28 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>(null, i15, i16, r25, z11, r26);

        $r29 = new android.graphics.Paint;

        specialinvoke $r29.<android.graphics.Paint: void <init>()>();

        r30 = $r29;

        virtualinvoke $r29.<android.graphics.Paint: void setFilterBitmap(boolean)>(z0);

        if z10 == 0 goto label15;

        virtualinvoke $r29.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

     label15:
        goto label17;

     label16:
        $z3 = virtualinvoke r21.<android.graphics.Bitmap: boolean hasAlpha()>();

        r28 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>(null, i13, i0, r22, $z3, r4);

        r30 = null;

     label17:
        $i17 = r21.<android.graphics.Bitmap: int mDensity>;

        r28.<android.graphics.Bitmap: int mDensity> = $i17;

        $z12 = virtualinvoke r21.<android.graphics.Bitmap: boolean hasAlpha()>();

        virtualinvoke r28.<android.graphics.Bitmap: void setHasAlpha(boolean)>($z12);

        $z13 = r21.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        virtualinvoke r28.<android.graphics.Bitmap: void setPremultiplied(boolean)>($z13);

        $r31 = new android.graphics.Canvas;

        specialinvoke $r31.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r28);

        $f4 = $r10.<android.graphics.RectF: float left>;

        $f5 = neg $f4;

        $f6 = $r10.<android.graphics.RectF: float top>;

        $f7 = neg $f6;

        virtualinvoke $r31.<android.graphics.Canvas: void translate(float,float)>($f5, $f7);

        virtualinvoke $r31.<android.graphics.Canvas: void concat(android.graphics.Matrix)>(r0);

        virtualinvoke $r31.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>(r21, $r8, $r9, r30);

        virtualinvoke $r31.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        if z9 == 0 goto label18;

        $r11 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        $r12 = virtualinvoke r28.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>($r11, 0);

        return $r12;

     label18:
        return r28;

     label19:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot use a recycled source in createBitmap");

        throw $r7;

     label20:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r6;

     label21:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r5;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Picture)
    {
        android.graphics.Picture r0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: android.graphics.Picture;

        $i0 = virtualinvoke r0.<android.graphics.Picture: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Picture: int getHeight()>();

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap$Config)>(r0, $i0, $i1, $r1);

        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Picture, int, int, android.graphics.Bitmap$Config)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.RenderNode r0;
        java.lang.IllegalArgumentException $r1, $r2;
        boolean $z0, $z4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.graphics.Canvas $r3;
        android.graphics.Bitmap$Config $r4, r6, $r7, $r13;
        android.graphics.Picture r5;
        android.graphics.Bitmap r8, r11, r12;
        android.graphics.RecordingCanvas r10;

        r5 := @parameter0: android.graphics.Picture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r6 := @parameter3: android.graphics.Bitmap$Config;

        if i0 <= 0 goto label10;

        if i1 <= 0 goto label10;

        if r6 == null goto label09;

        virtualinvoke r5.<android.graphics.Picture: void endRecording()>();

        $z0 = virtualinvoke r5.<android.graphics.Picture: boolean requiresHardwareAcceleration()>();

        if $z0 == 0 goto label01;

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if r6 == $r4 goto label01;

        staticinvoke <android.os.StrictMode: void noteSlowCall(java.lang.String)>("GPU readback");

     label01:
        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if r6 == $r7 goto label05;

        $z4 = virtualinvoke r5.<android.graphics.Picture: boolean requiresHardwareAcceleration()>();

        if $z4 == 0 goto label02;

        goto label05;

     label02:
        r8 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i1, r6);

        $r3 = new android.graphics.Canvas;

        specialinvoke $r3.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r8);

        $i6 = virtualinvoke r5.<android.graphics.Picture: int getWidth()>();

        if $i6 != i0 goto label03;

        $i9 = virtualinvoke r5.<android.graphics.Picture: int getHeight()>();

        if $i9 == i1 goto label04;

     label03:
        $f6 = (float) i0;

        $i7 = virtualinvoke r5.<android.graphics.Picture: int getWidth()>();

        $f7 = (float) $i7;

        $f8 = $f6 / $f7;

        $f9 = (float) i1;

        $i8 = virtualinvoke r5.<android.graphics.Picture: int getHeight()>();

        $f10 = (float) $i8;

        $f11 = $f9 / $f10;

        virtualinvoke $r3.<android.graphics.Canvas: void scale(float,float)>($f8, $f11);

     label04:
        virtualinvoke $r3.<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>(r5);

        virtualinvoke $r3.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        virtualinvoke r8.<android.graphics.Bitmap: void setImmutable()>();

        return r8;

     label05:
        r0 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode create(java.lang.String,android.graphics.RenderNode$AnimationHost)>("BitmapTemporary", null);

        virtualinvoke r0.<android.graphics.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>(0, 0, i0, i1);

        virtualinvoke r0.<android.graphics.RenderNode: boolean setClipToBounds(boolean)>(0);

        virtualinvoke r0.<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>(0);

        r10 = virtualinvoke r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>(i0, i1);

        $i2 = virtualinvoke r5.<android.graphics.Picture: int getWidth()>();

        if $i2 != i0 goto label06;

        $i5 = virtualinvoke r5.<android.graphics.Picture: int getHeight()>();

        if $i5 == i1 goto label07;

     label06:
        $f0 = (float) i0;

        $i3 = virtualinvoke r5.<android.graphics.Picture: int getWidth()>();

        $f1 = (float) $i3;

        $f2 = $f0 / $f1;

        $f3 = (float) i1;

        $i4 = virtualinvoke r5.<android.graphics.Picture: int getHeight()>();

        $f4 = (float) $i4;

        $f5 = $f3 / $f4;

        virtualinvoke r10.<android.graphics.RecordingCanvas: void scale(float,float)>($f2, $f5);

     label07:
        virtualinvoke r10.<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture)>(r5);

        virtualinvoke r0.<android.graphics.RenderNode: void endRecording()>();

        r11 = staticinvoke <android.view.ThreadedRenderer: android.graphics.Bitmap createHardwareBitmap(android.graphics.RenderNode,int,int)>(r0, i0, i1);

        r12 = r11;

        $r13 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if r6 == $r13 goto label08;

        r12 = virtualinvoke r11.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>(r6, 0);

     label08:
        return r12;

     label09:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Config must not be null");

        throw $r2;

     label10:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width & height must be > 0");

        throw $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: android.util.DisplayMetrics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>(r0, i0, i1, r1, 1);

        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config, boolean)
    {
        android.util.DisplayMetrics r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        boolean z0;
        android.graphics.ColorSpace$Named $r2;
        android.graphics.ColorSpace $r3;
        android.graphics.Bitmap $r4;

        r0 := @parameter0: android.util.DisplayMetrics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        z0 := @parameter4: boolean;

        $r2 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        $r3 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r2);

        $r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>(r0, i0, i1, r1, z0, $r3);

        return $r4;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config, boolean, android.graphics.ColorSpace)
    {
        android.util.DisplayMetrics r0;
        int i0, i1, i2, $i4;
        android.graphics.Bitmap$Config r1, $r3, $r5, $r6, $r7;
        boolean z0;
        java.lang.IllegalArgumentException $r2, $r4, $r8;
        long $l3, l5;
        android.graphics.ColorSpace r9;
        android.graphics.Bitmap r10;

        r0 := @parameter0: android.util.DisplayMetrics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        z0 := @parameter4: boolean;

        r9 := @parameter5: android.graphics.ColorSpace;

        if i0 <= 0 goto label9;

        if i1 <= 0 goto label9;

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if r1 == $r3 goto label8;

        if r9 != null goto label2;

        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        if r1 != $r7 goto label1;

        goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t create bitmap without a color space");

        throw $r8;

     label2:
        i2 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        if r9 != null goto label3;

        l5 = 0L;

        goto label4;

     label3:
        l5 = virtualinvoke r9.<android.graphics.ColorSpace: long getNativeInstance()>();

     label4:
        r10 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean,long)>(null, 0, i0, i0, i1, i2, 1, l5);

        if r0 == null goto label5;

        $i4 = r0.<android.util.DisplayMetrics: int densityDpi>;

        r10.<android.graphics.Bitmap: int mDensity> = $i4;

     label5:
        virtualinvoke r10.<android.graphics.Bitmap: void setHasAlpha(boolean)>(z0);

        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if r1 == $r5 goto label6;

        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGBA_F16>;

        if r1 != $r6 goto label7;

     label6:
        if z0 != 0 goto label7;

        $l3 = r10.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeErase(long,int)>($l3, -16777216);

     label7:
        return r10;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t create mutable bitmap with Config.HARDWARE");

        throw $r4;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r2;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        android.graphics.Bitmap$Config r1;
        android.graphics.ColorSpace r2;
        java.lang.IllegalArgumentException $r3, $r4;
        android.graphics.ColorSpace$Named $r5;
        long $l12;
        int[] r6;
        android.graphics.Bitmap r7;
        java.lang.ArrayIndexOutOfBoundsException $r8;

        r0 := @parameter0: android.util.DisplayMetrics;

        r6 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r1 := @parameter6: android.graphics.Bitmap$Config;

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>(i2, i3);

        $i6 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i6 < i2 goto label4;

        $i7 = i3 - 1;

        $i8 = $i7 * i1;

        i4 = i0 + $i8;

        i5 = lengthof r6;

        if i0 < 0 goto label3;

        $i9 = i0 + i2;

        if $i9 > i5 goto label3;

        if i4 < 0 goto label3;

        $i10 = i4 + i2;

        if $i10 > i5 goto label3;

        if i2 <= 0 goto label2;

        if i3 <= 0 goto label2;

        $r5 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        r2 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r5);

        $i11 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        $l12 = virtualinvoke r2.<android.graphics.ColorSpace: long getNativeInstance()>();

        r7 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean,long)>(r6, i0, i1, i2, i3, $i11, 0, $l12);

        if r0 == null goto label1;

        $i13 = r0.<android.util.DisplayMetrics: int densityDpi>;

        r7.<android.graphics.Bitmap: int mDensity> = $i13;

     label1:
        return r7;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r4;

     label3:
        $r8 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r8.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r8;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r3;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int[] r1;
        int i0, i1;
        android.graphics.Bitmap$Config r2;
        android.graphics.Bitmap $r3;

        r0 := @parameter0: android.util.DisplayMetrics;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.graphics.Bitmap$Config;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(r0, r1, 0, i0, i0, i1, r2);

        return $r3;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, int, int, android.graphics.Bitmap$Config)
    {
        int[] r0;
        int i0, i1, i2, i3;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(null, r0, i0, i1, i2, i3, r1);

        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, android.graphics.Bitmap$Config)
    {
        int[] r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(null, r0, 0, i0, i0, i1, r1);

        return $r2;
    }

    public static android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap, int, int, boolean)
    {
        android.graphics.Bitmap r0, $r3;
        int i0, i1, i2, i3;
        boolean z0;
        android.graphics.Matrix $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i2 != i0 goto label1;

        if i3 == i1 goto label2;

     label1:
        $f1 = (float) i0;

        $f0 = (float) i2;

        $f5 = $f1 / $f0;

        $f3 = (float) i1;

        $f2 = (float) i3;

        $f4 = $f3 / $f2;

        virtualinvoke $r2.<android.graphics.Matrix: void setScale(float,float)>($f5, $f4);

     label2:
        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r0, 0, 0, i2, i3, $r2, z0);

        return $r3;
    }

    static int getDefaultDensity()
    {
        int $i0, $i1, $i2, $i3;

        $i0 = <android.graphics.Bitmap: int sDefaultDensity>;

        if $i0 < 0 goto label1;

        $i3 = <android.graphics.Bitmap: int sDefaultDensity>;

        return $i3;

     label1:
        $i1 = <android.util.DisplayMetrics: int DENSITY_DEVICE>;

        <android.graphics.Bitmap: int sDefaultDensity> = $i1;

        $i2 = <android.graphics.Bitmap: int sDefaultDensity>;

        return $i2;
    }

    private static native boolean nativeCompress(long, int, int, java.io.OutputStream, byte[]);

    private static native android.graphics.ColorSpace nativeComputeColorSpace(long);

    private static native int nativeConfig(long);

    private static native android.graphics.Bitmap nativeCopy(long, int, boolean);

    private static native android.graphics.Bitmap nativeCopyAshmem(long);

    private static native android.graphics.Bitmap nativeCopyAshmemConfig(long, int);

    private static native void nativeCopyPixelsFromBuffer(long, java.nio.Buffer);

    private static native void nativeCopyPixelsToBuffer(long, java.nio.Buffer);

    private static native android.graphics.Bitmap nativeCopyPreserveInternalConfig(long);

    private static native android.graphics.Bitmap nativeCreate(int[], int, int, int, int, int, boolean, long);

    private static native android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel);

    private static native void nativeErase(long, int);

    private static native void nativeErase(long, long, long);

    private static native android.graphics.Bitmap nativeExtractAlpha(long, long, int[]);

    private static native int nativeGenerationId(long);

    private static native int nativeGetAllocationByteCount(long);

    private static native long nativeGetColor(long, int, int);

    private static native android.hardware.HardwareBuffer nativeGetHardwareBuffer(long);

    private static native long nativeGetNativeFinalizer();

    private static native int nativeGetPixel(long, int, int);

    private static native void nativeGetPixels(long, int[], int, int, int, int, int, int);

    private static native boolean nativeHasAlpha(long);

    private static native boolean nativeHasMipMap(long);

    private static native boolean nativeIsImmutable(long);

    private static native boolean nativeIsPremultiplied(long);

    private static native boolean nativeIsSRGB(long);

    private static native boolean nativeIsSRGBLinear(long);

    private static native void nativePrepareToDraw(long);

    private static native void nativeReconfigure(long, int, int, int, boolean);

    private static native void nativeRecycle(long);

    private static native int nativeRowBytes(long);

    private static native boolean nativeSameAs(long, long);

    private static native void nativeSetColorSpace(long, long);

    private static native void nativeSetHasAlpha(long, boolean, boolean);

    private static native void nativeSetHasMipMap(long, boolean);

    private static native void nativeSetImmutable(long);

    private static native void nativeSetPixel(long, int, int, int);

    private static native void nativeSetPixels(long, int[], int, int, int, int, int, int);

    private static native void nativeSetPremultiplied(long, boolean);

    private static native android.graphics.Bitmap nativeWrapHardwareBufferBitmap(android.hardware.HardwareBuffer, long);

    private static native boolean nativeWriteToParcel(long, int, android.os.Parcel);

    private void noteHardwareBitmapSlowCall()
    {
        android.graphics.Bitmap r0;
        android.graphics.Bitmap$Config $r1, $r2;

        r0 := @this: android.graphics.Bitmap;

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if $r1 != $r2 goto label1;

        staticinvoke <android.os.StrictMode: void noteSlowCall(java.lang.String)>("Warning: attempt to read pixels from hardware bitmap, which is very slow operation");

     label1:
        return;
    }

    public static int scaleFromDensity(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 == 0 goto label2;

        if i2 == 0 goto label2;

        if i1 != i2 goto label1;

        goto label2;

     label1:
        $i4 = i0 * i2;

        $i3 = i1 >> 1;

        $i5 = $i4 + $i3;

        $i6 = $i5 / i1;

        return $i6;

     label2:
        return i0;
    }

    public static void setDefaultDensity(int)
    {
        int i0;

        i0 := @parameter0: int;

        <android.graphics.Bitmap: int sDefaultDensity> = i0;

        return;
    }

    public static android.graphics.Bitmap wrapHardwareBuffer(android.graphics.GraphicBuffer, android.graphics.ColorSpace)
    {
        java.lang.Throwable $r0, $r1;
        android.graphics.GraphicBuffer r2;
        android.graphics.ColorSpace r3;
        android.hardware.HardwareBuffer r4;
        android.graphics.Bitmap r5;

        r2 := @parameter0: android.graphics.GraphicBuffer;

        r3 := @parameter1: android.graphics.ColorSpace;

        r4 = staticinvoke <android.hardware.HardwareBuffer: android.hardware.HardwareBuffer createFromGraphicBuffer(android.graphics.GraphicBuffer)>(r2);

     label1:
        r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)>(r4, r3);

     label2:
        if r4 == null goto label3;

        virtualinvoke r4.<android.hardware.HardwareBuffer: void close()>();

     label3:
        return r5;

     label4:
        $r0 := @caughtexception;

        if r4 == null goto label8;

     label5:
        virtualinvoke r4.<android.hardware.HardwareBuffer: void close()>();

     label6:
        goto label8;

     label7:
        $r1 := @caughtexception;

        virtualinvoke $r0.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label8:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer, android.graphics.ColorSpace)
    {
        android.hardware.HardwareBuffer r0;
        android.graphics.ColorSpace r1, r5;
        long $l0, $l1, $l4;
        byte $b2;
        java.lang.IllegalArgumentException $r2;
        android.graphics.Bitmap $r3;
        android.graphics.ColorSpace$Named $r4;

        r0 := @parameter0: android.hardware.HardwareBuffer;

        r1 := @parameter1: android.graphics.ColorSpace;

        $l0 = virtualinvoke r0.<android.hardware.HardwareBuffer: long getUsage()>();

        $l1 = $l0 & 256L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        virtualinvoke r0.<android.hardware.HardwareBuffer: int getFormat()>();

        r5 = r1;

        if r1 != null goto label1;

        $r4 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        r5 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r4);

     label1:
        $l4 = virtualinvoke r5.<android.graphics.ColorSpace: long getNativeInstance()>();

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeWrapHardwareBufferBitmap(android.hardware.HardwareBuffer,long)>(r0, $l4);

        return $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("usage flags must contain USAGE_GPU_SAMPLED_IMAGE.");

        throw $r2;
    }

    public boolean compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream)
    {
        android.graphics.Bitmap r0;
        android.graphics.Bitmap$CompressFormat r1;
        int i0, $i1;
        java.io.OutputStream r2;
        boolean z0;
        java.lang.IllegalArgumentException $r3;
        byte[] $r4;
        long $l2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$CompressFormat;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.OutputStream;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t compress a recycled bitmap");

        if r2 == null goto label2;

        if i0 < 0 goto label1;

        if i0 > 100 goto label1;

        staticinvoke <android.os.StrictMode: void noteSlowCall(java.lang.String)>("Compression of a bitmap is slow");

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, "Bitmap.compress");

        $l2 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i1 = r1.<android.graphics.Bitmap$CompressFormat: int nativeInt>;

        $r4 = newarray (byte)[4096];

        z0 = staticinvoke <android.graphics.Bitmap: boolean nativeCompress(long,int,int,java.io.OutputStream,byte[])>($l2, $i1, i0, r2, $r4);

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return z0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("quality must be 0..100");

        throw $r3;

     label2:
        throw null;
    }

    public android.graphics.Bitmap copy(android.graphics.Bitmap$Config, boolean)
    {
        android.graphics.Bitmap r0, r4;
        boolean z0, $z1;
        android.graphics.Bitmap$Config $r1, r3;
        int $i0, $i2;
        long $l1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.graphics.Bitmap;

        r3 := @parameter0: android.graphics.Bitmap$Config;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t copy a recycled bitmap");

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if r3 != $r1 goto label2;

        if z0 != 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hardware bitmaps are always immutable");

        throw $r2;

     label2:
        specialinvoke r0.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        $l1 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i0 = r3.<android.graphics.Bitmap$Config: int nativeInt>;

        r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCopy(long,int,boolean)>($l1, $i0, z0);

        if r4 == null goto label3;

        $z1 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        virtualinvoke r4.<android.graphics.Bitmap: void setPremultiplied(boolean)>($z1);

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        r4.<android.graphics.Bitmap: int mDensity> = $i2;

     label3:
        return r4;
    }

    public void copyPixelsFromBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap r0;
        java.nio.Buffer r1;
        int i0, $i4, $i8, $i10;
        long l1, l2, $l3, $l5, $l6, $l7, $l11;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2, $r3;
        byte b9, $b12;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.nio.Buffer;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("copyPixelsFromBuffer called on recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void checkHardware(java.lang.String)>("unable to copyPixelsFromBuffer, Config#HARDWARE bitmaps are immutable");

        i0 = virtualinvoke r1.<java.nio.Buffer: int remaining()>();

        $z0 = r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label1;

        b9 = 0;

        goto label3;

     label1:
        $z1 = r1 instanceof java.nio.ShortBuffer;

        if $z1 == 0 goto label2;

        b9 = 1;

        goto label3;

     label2:
        $z2 = r1 instanceof java.nio.IntBuffer;

        if $z2 == 0 goto label5;

        b9 = 2;

     label3:
        l1 = (long) i0;

        $i10 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        l2 = (long) $i10;

        $l11 = l1 << b9;

        $b12 = $l11 cmp l2;

        if $b12 < 0 goto label4;

        $l3 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsFromBuffer(long,java.nio.Buffer)>($l3, r1);

        $i4 = virtualinvoke r1.<java.nio.Buffer: int position()>();

        $l6 = (long) $i4;

        $l5 = l2 >> b9;

        $l7 = $l6 + $l5;

        $i8 = (int) $l7;

        virtualinvoke r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i8);

        return;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r3;

     label5:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;
    }

    public void copyPixelsToBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap r0;
        java.nio.Buffer r1;
        int i0, $i4, $i8, $i10;
        long l1, l2, $l3, $l5, $l6, $l7, $l11;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2, $r3;
        byte b9, $b12;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.nio.Buffer;

        specialinvoke r0.<android.graphics.Bitmap: void checkHardware(java.lang.String)>("unable to copyPixelsToBuffer, pixel access is not supported on Config#HARDWARE bitmaps");

        i0 = virtualinvoke r1.<java.nio.Buffer: int remaining()>();

        $z0 = r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label1;

        b9 = 0;

        goto label3;

     label1:
        $z1 = r1 instanceof java.nio.ShortBuffer;

        if $z1 == 0 goto label2;

        b9 = 1;

        goto label3;

     label2:
        $z2 = r1 instanceof java.nio.IntBuffer;

        if $z2 == 0 goto label5;

        b9 = 2;

     label3:
        l1 = (long) i0;

        $i10 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        l2 = (long) $i10;

        $l11 = l1 << b9;

        $b12 = $l11 cmp l2;

        if $b12 < 0 goto label4;

        $l3 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsToBuffer(long,java.nio.Buffer)>($l3, r1);

        $i4 = virtualinvoke r1.<java.nio.Buffer: int position()>();

        $l6 = (long) $i4;

        $l5 = l2 >> b9;

        $l7 = $l6 + $l5;

        $i8 = (int) $l7;

        virtualinvoke r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i8);

        return;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r3;

     label5:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;
    }

    public android.graphics.Bitmap createAshmemBitmap()
    {
        android.graphics.Bitmap r0, r1;
        long $l0;
        boolean $z0;
        int $i1;

        r0 := @this: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t copy a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCopyAshmem(long)>($l0);

        if r1 == null goto label1;

        $z0 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        virtualinvoke r1.<android.graphics.Bitmap: void setPremultiplied(boolean)>($z0);

        $i1 = r0.<android.graphics.Bitmap: int mDensity>;

        r1.<android.graphics.Bitmap: int mDensity> = $i1;

     label1:
        return r1;
    }

    public android.graphics.Bitmap createAshmemBitmap(android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap r0, r2;
        int $i0, $i2;
        long $l1;
        boolean $z0;
        android.graphics.Bitmap$Config r1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t copy a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        $l1 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i0 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCopyAshmemConfig(long,int)>($l1, $i0);

        if r2 == null goto label1;

        $z0 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        virtualinvoke r2.<android.graphics.Bitmap: void setPremultiplied(boolean)>($z0);

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        r2.<android.graphics.Bitmap: int mDensity> = $i2;

     label1:
        return r2;
    }

    public android.graphics.GraphicBuffer createGraphicBufferHandle()
    {
        android.graphics.Bitmap r0;
        android.hardware.HardwareBuffer $r1;
        android.graphics.GraphicBuffer $r2;

        r0 := @this: android.graphics.Bitmap;

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()>();

        $r2 = staticinvoke <android.graphics.GraphicBuffer: android.graphics.GraphicBuffer createFromHardwareBuffer(android.hardware.HardwareBuffer)>($r1);

        return $r2;
    }

    public int describeContents()
    {
        android.graphics.Bitmap r0;

        r0 := @this: android.graphics.Bitmap;

        return 0;
    }

    public void eraseColor(int)
    {
        android.graphics.Bitmap r0;
        int i0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long $l1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t erase a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label1;

        $l1 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeErase(long,int)>($l1, i0);

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot erase immutable bitmaps");

        throw $r1;
    }

    public void eraseColor(long)
    {
        android.graphics.Bitmap r0;
        long l0, $l1, $l2;
        android.graphics.ColorSpace r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.Bitmap;

        l0 := @parameter0: long;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t erase a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label1;

        r1 = staticinvoke <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>(l0);

        $l1 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $l2 = virtualinvoke r1.<android.graphics.ColorSpace: long getNativeInstance()>();

        staticinvoke <android.graphics.Bitmap: void nativeErase(long,long,long)>($l1, $l2, l0);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot erase immutable bitmaps");

        throw $r2;
    }

    public android.graphics.Bitmap extractAlpha()
    {
        android.graphics.Bitmap r0, $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>(null, null);

        return $r1;
    }

    public android.graphics.Bitmap extractAlpha(android.graphics.Paint, int[])
    {
        android.graphics.Bitmap r0, r4;
        int[] r1;
        long $l0, l2;
        java.lang.RuntimeException $r2;
        int $i1;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Bitmap;

        r3 := @parameter0: android.graphics.Paint;

        r1 := @parameter1: int[];

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t extractAlpha on a recycled bitmap");

        if r3 == null goto label1;

        l2 = virtualinvoke r3.<android.graphics.Paint: long getNativeInstance()>();

        goto label2;

     label1:
        l2 = 0L;

     label2:
        specialinvoke r0.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeExtractAlpha(long,long,int[])>($l0, l2, r1);

        if r4 == null goto label3;

        $i1 = r0.<android.graphics.Bitmap: int mDensity>;

        r4.<android.graphics.Bitmap: int mDensity> = $i1;

        return r4;

     label3:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to extractAlpha on Bitmap");

        throw $r2;
    }

    public final int getAllocationByteCount()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getAllocationByteCount() on a recycle()\'d bitmap! This is undefined behavior!");

        return 0;

     label1:
        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeGetAllocationByteCount(long)>($l0);

        return $i1;
    }

    public final int getByteCount()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getByteCount() on a recycle()\'d bitmap! This is undefined behavior!");

        return 0;

     label1:
        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getRowBytes()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public android.graphics.Color getColor(int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i6, $i10, $i14, $i18, $i21;
        android.graphics.ColorSpace r1, $r3;
        long l2, $l3, $l4, $l5, $l8, $l9, $l12, $l13, $l16, $l17, $l20;
        float f0, f1, f2, f3, $f4, $f5, $f6;
        android.graphics.ColorSpace$Named $r2;
        boolean $z0;
        short $s7, $s11, $s15, $s19;
        android.graphics.Color $r4, $r5;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getColor() on a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void checkHardware(java.lang.String)>("unable to getColor(), pixel access is not supported on Config#HARDWARE bitmaps");

        specialinvoke r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>(i0, i1);

        r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

        $r2 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        $r3 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r2);

        $z0 = virtualinvoke r1.<android.graphics.ColorSpace: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $l20 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i21 = staticinvoke <android.graphics.Bitmap: int nativeGetPixel(long,int,int)>($l20, i0, i1);

        $r5 = staticinvoke <android.graphics.Color: android.graphics.Color valueOf(int)>($i21);

        return $r5;

     label1:
        $l3 = r0.<android.graphics.Bitmap: long mNativePtr>;

        l2 = staticinvoke <android.graphics.Bitmap: long nativeGetColor(long,int,int)>($l3, i0, i1);

        $l4 = l2 >> 0;

        $l5 = $l4 & 65535L;

        $i6 = (int) $l5;

        $s7 = (short) $i6;

        f0 = staticinvoke <android.util.Half: float toFloat(short)>($s7);

        $l8 = l2 >> 16;

        $l9 = $l8 & 65535L;

        $i10 = (int) $l9;

        $s11 = (short) $i10;

        f1 = staticinvoke <android.util.Half: float toFloat(short)>($s11);

        $l12 = l2 >> 32;

        $l13 = $l12 & 65535L;

        $i14 = (int) $l13;

        $s15 = (short) $i14;

        f2 = staticinvoke <android.util.Half: float toFloat(short)>($s15);

        $l16 = l2 >> 48;

        $l17 = 65535L & $l16;

        $i18 = (int) $l17;

        $s19 = (short) $i18;

        f3 = staticinvoke <android.util.Half: float toFloat(short)>($s19);

        $f4 = staticinvoke <android.graphics.Bitmap: float clamp(float,android.graphics.ColorSpace,int)>(f0, r1, 0);

        $f5 = staticinvoke <android.graphics.Bitmap: float clamp(float,android.graphics.ColorSpace,int)>(f1, r1, 1);

        $f6 = staticinvoke <android.graphics.Bitmap: float clamp(float,android.graphics.ColorSpace,int)>(f2, r1, 2);

        $r4 = staticinvoke <android.graphics.Color: android.graphics.Color valueOf(float,float,float,float,android.graphics.ColorSpace)>($f4, $f5, $f6, f3, r1);

        return $r4;
    }

    public final android.graphics.ColorSpace getColorSpace()
    {
        android.graphics.Bitmap r0;
        android.graphics.ColorSpace $r1, $r2, $r3;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("getColorSpace called on a recycled bitmap");

        $r1 = r0.<android.graphics.Bitmap: android.graphics.ColorSpace mColorSpace>;

        if $r1 != null goto label1;

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.ColorSpace nativeComputeColorSpace(long)>($l0);

        r0.<android.graphics.Bitmap: android.graphics.ColorSpace mColorSpace> = $r3;

     label1:
        $r2 = r0.<android.graphics.Bitmap: android.graphics.ColorSpace mColorSpace>;

        return $r2;
    }

    public final android.graphics.Bitmap$Config getConfig()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        long $l0;
        int $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getConfig() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeConfig(long)>($l0);

        $r1 = staticinvoke <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config nativeToConfig(int)>($i1);

        return $r1;
    }

    public int getDensity()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getDensity() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $i0 = r0.<android.graphics.Bitmap: int mDensity>;

        return $i0;
    }

    public int getGenerationId()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getGenerationId() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeGenerationId(long)>($l0);

        return $i1;
    }

    public android.hardware.HardwareBuffer getHardwareBuffer()
    {
        android.graphics.Bitmap r0;
        long $l0;
        android.hardware.HardwareBuffer $r1;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $r1 = staticinvoke <android.graphics.Bitmap: android.hardware.HardwareBuffer nativeGetHardwareBuffer(long)>($l0);

        return $r1;
    }

    public final int getHeight()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getHeight() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $i0 = r0.<android.graphics.Bitmap: int mHeight>;

        return $i0;
    }

    public long getNativeInstance()
    {
        android.graphics.Bitmap r0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        return $l0;
    }

    public byte[] getNinePatchChunk()
    {
        android.graphics.Bitmap r0;
        byte[] $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: byte[] mNinePatchChunk>;

        return $r1;
    }

    public android.graphics.NinePatch$InsetStruct getNinePatchInsets()
    {
        android.graphics.Bitmap r0;
        android.graphics.NinePatch$InsetStruct $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct mNinePatchInsets>;

        return $r1;
    }

    public void getOpticalInsets(android.graphics.Rect)
    {
        android.graphics.Bitmap r0;
        android.graphics.Rect r1, $r3;
        android.graphics.NinePatch$InsetStruct r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct mNinePatchInsets>;

        if r2 != null goto label1;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        goto label2;

     label1:
        $r3 = r2.<android.graphics.NinePatch$InsetStruct: android.graphics.Rect opticalRect>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

     label2:
        return;
    }

    public int getPixel(int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i3;
        long $l2;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixel() on a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void checkHardware(java.lang.String)>("unable to getPixel(), pixel access is not supported on Config#HARDWARE bitmaps");

        specialinvoke r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>(i0, i1);

        $l2 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i3 = staticinvoke <android.graphics.Bitmap: int nativeGetPixel(long,int,int)>($l2, i0, i1);

        return $i3;
    }

    public void getPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5;
        long $l6;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixels() on a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void checkHardware(java.lang.String)>("unable to getPixels(), pixel access is not supported on Config#HARDWARE bitmaps");

        if i4 == 0 goto label2;

        if i5 != 0 goto label1;

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>(i2, i3, i4, i5, i0, i1, r1);

        $l6 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeGetPixels(long,int[],int,int,int,int,int,int)>($l6, r1, i0, i1, i2, i3, i4, i5);

        return;

     label2:
        return;
    }

    public final int getRowBytes()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getRowBytes() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeRowBytes(long)>($l0);

        return $i1;
    }

    public int getScaledHeight(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i1, $i2, i0);

        return $i3;
    }

    public int getScaledHeight(android.graphics.Canvas)
    {
        android.graphics.Bitmap r0;
        android.graphics.Canvas r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.graphics.Canvas: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledHeight(android.util.DisplayMetrics)
    {
        android.graphics.Bitmap r0;
        android.util.DisplayMetrics r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.util.DisplayMetrics: int densityDpi>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledWidth(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i1, $i2, i0);

        return $i3;
    }

    public int getScaledWidth(android.graphics.Canvas)
    {
        android.graphics.Bitmap r0;
        android.graphics.Canvas r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.graphics.Canvas: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledWidth(android.util.DisplayMetrics)
    {
        android.graphics.Bitmap r0;
        android.util.DisplayMetrics r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.util.DisplayMetrics: int densityDpi>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public final int getWidth()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called getWidth() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $i0 = r0.<android.graphics.Bitmap: int mWidth>;

        return $i0;
    }

    public final boolean hasAlpha()
    {
        android.graphics.Bitmap r0;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called hasAlpha() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeHasAlpha(long)>($l0);

        return $z1;
    }

    public final boolean hasMipMap()
    {
        android.graphics.Bitmap r0;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called hasMipMap() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeHasMipMap(long)>($l0);

        return $z1;
    }

    public final boolean isMutable()
    {
        android.graphics.Bitmap r0;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeIsImmutable(long)>($l0);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public final boolean isPremultiplied()
    {
        android.graphics.Bitmap r0;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Bitmap", "Called isPremultiplied() on a recycle()\'d bitmap! This is undefined behavior!");

     label1:
        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeIsPremultiplied(long)>($l0);

        return $z1;
    }

    public final boolean isRecycled()
    {
        android.graphics.Bitmap r0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        return $z0;
    }

    public void prepareToDraw()
    {
        android.graphics.Bitmap r0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t prepareToDraw on a recycled bitmap!");

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativePrepareToDraw(long)>($l0);

        return;
    }

    public void reconfigure(int, int, android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2;
        android.graphics.Bitmap$Config r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3;
        long $l3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call reconfigure() on a recycled bitmap");

        if i0 <= 0 goto label2;

        if i1 <= 0 goto label2;

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label1;

        $l3 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i2 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        $z1 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeReconfigure(long,int,int,int,boolean)>($l3, i0, i1, $i2, $z1);

        r0.<android.graphics.Bitmap: int mWidth> = i0;

        r0.<android.graphics.Bitmap: int mHeight> = i1;

        r0.<android.graphics.Bitmap: android.graphics.ColorSpace mColorSpace> = null;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("only mutable bitmaps may be reconfigured");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r2;
    }

    public void recycle()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 != 0 goto label1;

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeRecycle(long)>($l0);

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = null;

        r0.<android.graphics.Bitmap: boolean mRecycled> = 1;

     label1:
        return;
    }

    void reinit(int, int, boolean)
    {
        android.graphics.Bitmap r0;
        int i0, i1;
        boolean z0;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<android.graphics.Bitmap: int mWidth> = i0;

        r0.<android.graphics.Bitmap: int mHeight> = i1;

        r0.<android.graphics.Bitmap: boolean mRequestPremultiplied> = z0;

        r0.<android.graphics.Bitmap: android.graphics.ColorSpace mColorSpace> = null;

        return;
    }

    public boolean sameAs(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        long $l0, $l1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call sameAs on a recycled bitmap!");

        specialinvoke r0.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        specialinvoke r1.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        $z0 = virtualinvoke r1.<android.graphics.Bitmap: boolean isRecycled()>();

        if $z0 != 0 goto label3;

        $l1 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $l0 = r1.<android.graphics.Bitmap: long mNativePtr>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeSameAs(long,long)>($l1, $l0);

        return $z1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t compare to a recycled bitmap!");

        throw $r2;
    }

    public void setColorSpace(android.graphics.ColorSpace)
    {
        android.graphics.Bitmap r0;
        android.graphics.ColorSpace r1, r7, r8;
        java.lang.IllegalArgumentException $r2, $r5, r9, r10, r11;
        android.graphics.Bitmap$Config $r3, $r4;
        long $l0, $l1, $l7, $l8;
        int $i2, $i3, $i4, i9;
        float $f0, $f1, $f2, $f3;
        byte $b5, $b6;
        java.lang.Throwable $r6;

        r0 := @this: android.graphics.Bitmap;

        r7 := @parameter0: android.graphics.ColorSpace;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("setColorSpace called on a recycled bitmap");

        if r7 == null goto label11;

        $r3 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        if $r3 == $r4 goto label10;

        r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $l1 = virtualinvoke r7.<android.graphics.ColorSpace: long getNativeInstance()>();

        staticinvoke <android.graphics.Bitmap: void nativeSetColorSpace(long,long)>($l0, $l1);

        r0.<android.graphics.Bitmap: android.graphics.ColorSpace mColorSpace> = null;

        r8 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

     label01:
        $i2 = virtualinvoke r1.<android.graphics.ColorSpace: int getComponentCount()>();

        $i3 = virtualinvoke r8.<android.graphics.ColorSpace: int getComponentCount()>();

        if $i2 != $i3 goto label08;

     label02:
        i9 = 0;

     label03:
        $i4 = virtualinvoke r1.<android.graphics.ColorSpace: int getComponentCount()>();

        if i9 >= $i4 goto label07;

        $f0 = virtualinvoke r1.<android.graphics.ColorSpace: float getMinValue(int)>(i9);

        $f1 = virtualinvoke r8.<android.graphics.ColorSpace: float getMinValue(int)>(i9);

        $b5 = $f0 cmpg $f1;

        if $b5 < 0 goto label06;

        $f2 = virtualinvoke r1.<android.graphics.ColorSpace: float getMaxValue(int)>(i9);

        $f3 = virtualinvoke r8.<android.graphics.ColorSpace: float getMaxValue(int)>(i9);

        $b6 = $f2 cmpl $f3;

        if $b6 > 0 goto label05;

     label04:
        i9 = i9 + 1;

        goto label03;

     label05:
        r9 = new java.lang.IllegalArgumentException;

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The new ColorSpace cannot decrease the maximum value for any of the components compared to the current ColorSpace/ To perform this type of conversion create a new Bitmap in the desired ColorSpace and draw this Bitmap into it.");

        throw r9;

     label06:
        r10 = new java.lang.IllegalArgumentException;

        specialinvoke r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The new ColorSpace cannot increase the minimum value for any of the components compared to the current ColorSpace. To perform this type of conversion create a new Bitmap in the desired ColorSpace and draw this Bitmap into it.");

        throw r10;

     label07:
        return;

     label08:
        r11 = new java.lang.IllegalArgumentException;

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The new ColorSpace must have the same component count as the current ColorSpace");

        throw r11;

     label09:
        $r6 := @caughtexception;

        r0.<android.graphics.Bitmap: android.graphics.ColorSpace mColorSpace> = r1;

        $l7 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $l8 = virtualinvoke r1.<android.graphics.ColorSpace: long getNativeInstance()>();

        staticinvoke <android.graphics.Bitmap: void nativeSetColorSpace(long,long)>($l7, $l8);

        throw $r6;

     label10:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set a ColorSpace on ALPHA_8");

        throw $r5;

     label11:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The colorSpace cannot be set to null");

        throw $r2;

        catch java.lang.IllegalArgumentException from label01 to label02 with label09;
        catch java.lang.IllegalArgumentException from label03 to label04 with label09;
        catch java.lang.IllegalArgumentException from label05 to label06 with label09;
        catch java.lang.IllegalArgumentException from label06 to label07 with label09;
        catch java.lang.IllegalArgumentException from label08 to label09 with label09;
    }

    public void setConfig(android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap r0;
        android.graphics.Bitmap$Config r1;
        int $i0, $i1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i0, $i1, r1);

        return;
    }

    public void setDensity(int)
    {
        android.graphics.Bitmap r0;
        int i0;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        r0.<android.graphics.Bitmap: int mDensity> = i0;

        return;
    }

    public void setHasAlpha(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("setHasAlpha called on a recycled bitmap");

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $z1 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeSetHasAlpha(long,boolean,boolean)>($l0, z0, $z1);

        return;
    }

    public final void setHasMipMap(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("setHasMipMap called on a recycled bitmap");

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeSetHasMipMap(long,boolean)>($l0, z0);

        return;
    }

    public void setHeight(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i1, i0, $r1);

        return;
    }

    public void setImmutable()
    {
        android.graphics.Bitmap r0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeSetImmutable(long)>($l0);

     label1:
        return;
    }

    public void setNinePatchChunk(byte[])
    {
        android.graphics.Bitmap r0;
        byte[] r1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: byte[];

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = r1;

        return;
    }

    public void setPixel(int, int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long $l3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixel() on a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>(i0, i1);

        $l3 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixel(long,int,int,int)>($l3, i0, i1, i2);

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    public void setPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        long $l6;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixels() on a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label3;

        if i4 == 0 goto label2;

        if i5 != 0 goto label1;

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>(i2, i3, i4, i5, i0, i1, r1);

        $l6 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixels(long,int[],int,int,int,int,int,int)>($l6, r1, i0, i1, i2, i3, i4, i5);

        return;

     label2:
        return;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public final void setPremultiplied(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("setPremultiplied called on a recycled bitmap");

        r0.<android.graphics.Bitmap: boolean mRequestPremultiplied> = z0;

        $l0 = r0.<android.graphics.Bitmap: long mNativePtr>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPremultiplied(long,boolean)>($l0, z0);

        return;
    }

    public void setWidth(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>(i0, $i1, $r1);

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.graphics.Bitmap r0;
        android.os.Parcel r1;
        int i0, $i1;
        long $l2;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t parcel a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void noteHardwareBitmapSlowCall()>();

        $l2 = r0.<android.graphics.Bitmap: long mNativePtr>;

        $i1 = r0.<android.graphics.Bitmap: int mDensity>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeWriteToParcel(long,int,android.os.Parcel)>($l2, $i1, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("native writeToParcel failed");

        throw $r2;
    }
}
