public class android.graphics.BitmapFactory$Options extends java.lang.Object
{
    public android.graphics.Bitmap inBitmap;
    public int inDensity;
    public boolean inDither;
    public boolean inInputShareable;
    public boolean inJustDecodeBounds;
    public boolean inMutable;
    public boolean inPreferQualityOverSpeed;
    public android.graphics.ColorSpace inPreferredColorSpace;
    public android.graphics.Bitmap$Config inPreferredConfig;
    public boolean inPremultiplied;
    public boolean inPurgeable;
    public int inSampleSize;
    public boolean inScaled;
    public int inScreenDensity;
    public int inTargetDensity;
    public byte[] inTempStorage;
    public boolean mCancel;
    public android.graphics.ColorSpace outColorSpace;
    public android.graphics.Bitmap$Config outConfig;
    public int outHeight;
    public java.lang.String outMimeType;
    public int outWidth;

    public void <init>()
    {
        android.graphics.BitmapFactory$Options r0;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.BitmapFactory$Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r1;

        r0.<android.graphics.BitmapFactory$Options: android.graphics.ColorSpace inPreferredColorSpace> = null;

        r0.<android.graphics.BitmapFactory$Options: boolean inScaled> = 1;

        r0.<android.graphics.BitmapFactory$Options: boolean inPremultiplied> = 1;

        return;
    }

    static long nativeColorSpace(android.graphics.BitmapFactory$Options)
    {
        long $l0;
        android.graphics.BitmapFactory$Options r0;
        android.graphics.ColorSpace r1;

        r0 := @parameter0: android.graphics.BitmapFactory$Options;

        if r0 == null goto label2;

        r1 = r0.<android.graphics.BitmapFactory$Options: android.graphics.ColorSpace inPreferredColorSpace>;

        if r1 != null goto label1;

        goto label2;

     label1:
        $l0 = virtualinvoke r1.<android.graphics.ColorSpace: long getNativeInstance()>();

        return $l0;

     label2:
        return 0L;
    }

    static long nativeInBitmap(android.graphics.BitmapFactory$Options)
    {
        long $l0;
        android.graphics.BitmapFactory$Options r0;
        android.graphics.Bitmap r1;

        r0 := @parameter0: android.graphics.BitmapFactory$Options;

        if r0 == null goto label2;

        r1 = r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        if r1 != null goto label1;

        goto label2;

     label1:
        $l0 = virtualinvoke r1.<android.graphics.Bitmap: long getNativeInstance()>();

        return $l0;

     label2:
        return 0L;
    }

    static void validate(android.graphics.BitmapFactory$Options)
    {
        android.graphics.Bitmap r0, $r11;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1, $r4, $r7, $r10, $r12;
        android.graphics.ColorSpace$Rgb $r2;
        android.graphics.ColorSpace$Rgb$TransferParameters $r3;
        android.graphics.Bitmap$Config $r5, $r6, $r8, $r9;
        android.graphics.BitmapFactory$Options r13;
        android.graphics.ColorSpace r14;

        r13 := @parameter0: android.graphics.BitmapFactory$Options;

        if r13 != null goto label1;

        return;

     label1:
        r0 = r13.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        if r0 == null goto label4;

        $r8 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r9 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if $r8 == $r9 goto label3;

        $r11 = r13.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        $z2 = virtualinvoke $r11.<android.graphics.Bitmap: boolean isRecycled()>();

        if $z2 != 0 goto label2;

        goto label4;

     label2:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot reuse a recycled Bitmap");

        throw $r12;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bitmaps with Config.HARDWARE are always immutable");

        throw $r10;

     label4:
        $z0 = r13.<android.graphics.BitmapFactory$Options: boolean inMutable>;

        if $z0 == 0 goto label6;

        $r6 = r13.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig>;

        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>;

        if $r6 == $r5 goto label5;

        goto label6;

     label5:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bitmaps with Config.HARDWARE cannot be decoded into - they are immutable");

        throw $r7;

     label6:
        r14 = r13.<android.graphics.BitmapFactory$Options: android.graphics.ColorSpace inPreferredColorSpace>;

        if r14 == null goto label9;

        $z1 = r14 instanceof android.graphics.ColorSpace$Rgb;

        if $z1 == 0 goto label8;

        $r2 = (android.graphics.ColorSpace$Rgb) r14;

        $r3 = virtualinvoke $r2.<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()>();

        if $r3 == null goto label7;

        goto label9;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The destination color space must use an ICC parametric transfer function");

        throw $r4;

     label8:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The destination color space must use the RGB color model");

        throw $r1;

     label9:
        return;
    }

    public void requestCancelDecode()
    {
        android.graphics.BitmapFactory$Options r0;

        r0 := @this: android.graphics.BitmapFactory$Options;

        r0.<android.graphics.BitmapFactory$Options: boolean mCancel> = 1;

        return;
    }
}
