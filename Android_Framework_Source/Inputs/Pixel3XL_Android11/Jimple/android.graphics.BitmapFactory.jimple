public class android.graphics.BitmapFactory extends java.lang.Object
{
    private static final int DECODE_BUFFER_SIZE;

    public void <init>()
    {
        android.graphics.BitmapFactory r0;

        r0 := @this: android.graphics.BitmapFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.graphics.Bitmap decodeByteArray(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>(r0, i0, i1, null);

        return $r1;
    }

    public static android.graphics.Bitmap decodeByteArray(byte[], int, int, android.graphics.BitmapFactory$Options)
    {
        int i0, i1, $i2, $i3, $i4;
        android.graphics.BitmapFactory$Options r0;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        long $l5, $l6;
        android.graphics.Bitmap $r2, r5;
        java.lang.Throwable $r3;
        byte[] r4;
        java.lang.IllegalArgumentException r6;

        r4 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: android.graphics.BitmapFactory$Options;

        $i2 = i0 | i1;

        if $i2 < 0 goto label9;

        $i4 = lengthof r4;

        $i3 = i0 + i1;

        if $i4 < $i3 goto label9;

        staticinvoke <android.graphics.BitmapFactory$Options: void validate(android.graphics.BitmapFactory$Options)>(r0);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2L, "decodeBitmap");

     label1:
        $l5 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeInBitmap(android.graphics.BitmapFactory$Options)>(r0);

        $l6 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeColorSpace(android.graphics.BitmapFactory$Options)>(r0);

        r5 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options,long,long)>(r4, i0, i1, r0, $l5, $l6);

     label2:
        if r5 != null goto label6;

        if r0 == null goto label6;

     label3:
        $r2 = r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        if $r2 != null goto label5;

     label4:
        goto label6;

     label5:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Problem decoding into existing bitmap");

        throw r6;

     label6:
        staticinvoke <android.graphics.BitmapFactory: void setDensityFromOptions(android.graphics.Bitmap,android.graphics.BitmapFactory$Options)>(r5, r0);

     label7:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        return r5;

     label8:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        throw $r3;

     label9:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public static android.graphics.Bitmap decodeFile(java.lang.String)
    {
        java.lang.String r0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>(r0, null);

        return $r1;
    }

    public static android.graphics.Bitmap decodeFile(java.lang.String, android.graphics.BitmapFactory$Options)
    {
        java.io.FileInputStream r0, r8, r9;
        java.lang.Throwable $r1, $r2, $r5;
        java.lang.Exception $r3;
        java.lang.String $r4, r6;
        android.graphics.BitmapFactory$Options r7;
        android.graphics.Bitmap r11, r13, r14;
        java.lang.StringBuilder r17;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: android.graphics.BitmapFactory$Options;

        staticinvoke <android.graphics.BitmapFactory$Options: void validate(android.graphics.BitmapFactory$Options)>(r7);

        r8 = null;

        r9 = null;

     label01:
        r0 = new java.io.FileInputStream;

     label02:
        r8 = null;

        r9 = null;

     label03:
        specialinvoke r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r6);

     label04:
        r8 = r0;

        r9 = r0;

     label05:
        r11 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r0, null, r7);

     label06:
        r13 = r11;

     label07:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label08:
        r14 = r11;

     label09:
        goto label25;

     label10:
        $r5 := @caughtexception;

        r14 = r13;

        goto label09;

     label11:
        $r1 := @caughtexception;

        goto label26;

     label12:
        $r3 := @caughtexception;

        r8 = r9;

     label13:
        r17 = new java.lang.StringBuilder;

     label14:
        r8 = r9;

     label15:
        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

     label16:
        r8 = r9;

     label17:
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to decode stream: ");

     label18:
        r8 = r9;

     label19:
        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

     label20:
        r8 = r9;

     label21:
        $r4 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BitmapFactory", $r4);

     label22:
        r14 = null;

        if r9 == null goto label25;

        r13 = null;

     label23:
        virtualinvoke r9.<java.io.InputStream: void close()>();

     label24:
        r14 = null;

        goto label09;

     label25:
        return r14;

     label26:
        if r8 == null goto label30;

     label27:
        virtualinvoke r8.<java.io.InputStream: void close()>();

     label28:
        goto label30;

     label29:
        $r2 := @caughtexception;

     label30:
        throw $r1;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label10;
        catch java.lang.Throwable from label13 to label14 with label11;
        catch java.lang.Throwable from label15 to label16 with label11;
        catch java.lang.Throwable from label17 to label18 with label11;
        catch java.lang.Throwable from label19 to label20 with label11;
        catch java.lang.Throwable from label21 to label22 with label11;
        catch java.io.IOException from label23 to label24 with label10;
        catch java.io.IOException from label27 to label28 with label29;
    }

    public static android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)
    {
        java.io.FileDescriptor r0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: java.io.FileDescriptor;

        $r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r0, null, null);

        return $r1;
    }

    public static android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor, android.graphics.Rect, android.graphics.BitmapFactory$Options)
    {
        android.graphics.BitmapFactory$Options r0;
        java.io.FileInputStream r1;
        boolean $z0;
        android.graphics.Bitmap $r2, r9;
        long $l0, $l1;
        java.lang.Throwable $r3, $r4, $r5, $r6;
        java.io.FileDescriptor r7;
        android.graphics.Rect r8;
        java.lang.IllegalArgumentException r11;

        r7 := @parameter0: java.io.FileDescriptor;

        r8 := @parameter1: android.graphics.Rect;

        r0 := @parameter2: android.graphics.BitmapFactory$Options;

        staticinvoke <android.graphics.BitmapFactory$Options: void validate(android.graphics.BitmapFactory$Options)>(r0);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2L, "decodeFileDescriptor");

     label01:
        $z0 = staticinvoke <android.graphics.BitmapFactory: boolean nativeIsSeekable(java.io.FileDescriptor)>(r7);

        if $z0 == 0 goto label04;

     label02:
        $l0 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeInBitmap(android.graphics.BitmapFactory$Options)>(r0);

        $l1 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeColorSpace(android.graphics.BitmapFactory$Options)>(r0);

        r9 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options,long,long)>(r7, r8, r0, $l0, $l1);

     label03:
        goto label09;

     label04:
        r1 = new java.io.FileInputStream;

        specialinvoke r1.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>(r7);

     label05:
        r9 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStreamInternal(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r1, r8, r0);

     label06:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

     label09:
        if r9 != null goto label13;

        if r0 == null goto label13;

     label10:
        $r2 = r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        if $r2 != null goto label12;

     label11:
        goto label13;

     label12:
        r11 = new java.lang.IllegalArgumentException;

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Problem decoding into existing bitmap");

        throw r11;

     label13:
        staticinvoke <android.graphics.BitmapFactory: void setDensityFromOptions(android.graphics.Bitmap,android.graphics.BitmapFactory$Options)>(r9, r0);

     label14:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        return r9;

     label15:
        $r6 := @caughtexception;

     label16:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r3 := @caughtexception;

        goto label17;

     label19:
        throw $r6;

     label20:
        $r5 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    public static android.graphics.Bitmap decodeResource(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        $r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>(r0, i0, null);

        return $r1;
    }

    public static android.graphics.Bitmap decodeResource(android.content.res.Resources, int, android.graphics.BitmapFactory$Options)
    {
        int i0;
        android.util.TypedValue r0;
        android.graphics.Bitmap $r1, r12, r14;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3, $r4, $r5;
        java.lang.Exception $r6;
        android.content.res.Resources r7;
        android.graphics.BitmapFactory$Options r8;
        java.io.InputStream r9, r10, r11;

        r7 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r8 := @parameter2: android.graphics.BitmapFactory$Options;

        staticinvoke <android.graphics.BitmapFactory$Options: void validate(android.graphics.BitmapFactory$Options)>(r8);

        r9 = null;

        r10 = null;

     label01:
        r0 = new android.util.TypedValue;

     label02:
        r9 = null;

        r10 = null;

     label03:
        specialinvoke r0.<android.util.TypedValue: void <init>()>();

     label04:
        r9 = null;

        r10 = null;

     label05:
        r11 = virtualinvoke r7.<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>(i0, r0);

     label06:
        r9 = r11;

        r10 = r11;

     label07:
        r12 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r7, r0, r11, null, r8);

     label08:
        r14 = r12;

        if r11 == null goto label12;

        r14 = r12;

     label09:
        virtualinvoke r11.<java.io.InputStream: void close()>();

     label10:
        r14 = r12;

        goto label12;

     label11:
        $r5 := @caughtexception;

        goto label21;

     label12:
        goto label21;

     label13:
        $r4 := @caughtexception;

        if r9 == null goto label17;

     label14:
        virtualinvoke r9.<java.io.InputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r3 := @caughtexception;

        goto label17;

     label17:
        throw $r4;

     label18:
        $r6 := @caughtexception;

        r14 = null;

        if r10 == null goto label12;

        r14 = null;

     label19:
        virtualinvoke r10.<java.io.InputStream: void close()>();

     label20:
        r14 = null;

        goto label12;

     label21:
        if r14 != null goto label23;

        if r8 == null goto label23;

        $r1 = r8.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        if $r1 != null goto label22;

        goto label23;

     label22:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Problem decoding into existing bitmap");

        throw $r2;

     label23:
        return r14;

        catch java.lang.Exception from label01 to label02 with label18;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Exception from label03 to label04 with label18;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Exception from label05 to label06 with label18;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label18;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label19 to label20 with label11;
    }

    public static android.graphics.Bitmap decodeResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options)
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        java.io.InputStream r2;
        android.graphics.Rect r3;
        android.graphics.BitmapFactory$Options r4, $r6, r7;
        int i0, $i1, $i2, $i3;
        android.util.DisplayMetrics $r5;
        android.graphics.Bitmap $r8;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.TypedValue;

        r2 := @parameter2: java.io.InputStream;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.BitmapFactory$Options;

        staticinvoke <android.graphics.BitmapFactory$Options: void validate(android.graphics.BitmapFactory$Options)>(r4);

        r7 = r4;

        if r4 != null goto label1;

        $r6 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r6.<android.graphics.BitmapFactory$Options: void <init>()>();

        r7 = $r6;

     label1:
        $i1 = r7.<android.graphics.BitmapFactory$Options: int inDensity>;

        if $i1 != 0 goto label3;

        if r1 == null goto label3;

        i0 = r1.<android.util.TypedValue: int density>;

        if i0 != 0 goto label2;

        r7.<android.graphics.BitmapFactory$Options: int inDensity> = 160;

        goto label3;

     label2:
        if i0 == 65535 goto label3;

        r7.<android.graphics.BitmapFactory$Options: int inDensity> = i0;

     label3:
        $i3 = r7.<android.graphics.BitmapFactory$Options: int inTargetDensity>;

        if $i3 != 0 goto label4;

        if r0 == null goto label4;

        $r5 = virtualinvoke r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i2 = $r5.<android.util.DisplayMetrics: int densityDpi>;

        r7.<android.graphics.BitmapFactory$Options: int inTargetDensity> = $i2;

     label4:
        $r8 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r2, r3, r7);

        return $r8;
    }

    public static android.graphics.Bitmap decodeStream(java.io.InputStream)
    {
        java.io.InputStream r0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r0, null, null);

        return $r1;
    }

    public static android.graphics.Bitmap decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options)
    {
        android.graphics.Rect r0;
        android.graphics.BitmapFactory$Options r1;
        boolean $z0;
        android.graphics.Bitmap $r2, r6;
        android.content.res.AssetManager$AssetInputStream $r3;
        long $l0, $l1, $l2;
        java.lang.Throwable $r4;
        java.io.InputStream r5;
        java.lang.IllegalArgumentException r7;

        r5 := @parameter0: java.io.InputStream;

        r0 := @parameter1: android.graphics.Rect;

        r1 := @parameter2: android.graphics.BitmapFactory$Options;

        if r5 != null goto label01;

        return null;

     label01:
        staticinvoke <android.graphics.BitmapFactory$Options: void validate(android.graphics.BitmapFactory$Options)>(r1);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2L, "decodeBitmap");

     label02:
        $z0 = r5 instanceof android.content.res.AssetManager$AssetInputStream;

        if $z0 == 0 goto label04;

        $r3 = (android.content.res.AssetManager$AssetInputStream) r5;

        $l0 = virtualinvoke $r3.<android.content.res.AssetManager$AssetInputStream: long getNativeAsset()>();

        $l1 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeInBitmap(android.graphics.BitmapFactory$Options)>(r1);

        $l2 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeColorSpace(android.graphics.BitmapFactory$Options)>(r1);

        r6 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeAsset(long,android.graphics.Rect,android.graphics.BitmapFactory$Options,long,long)>($l0, r0, r1, $l1, $l2);

     label03:
        goto label05;

     label04:
        r6 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStreamInternal(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r5, r0, r1);

     label05:
        if r6 != null goto label09;

        if r1 == null goto label09;

     label06:
        $r2 = r1.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        if $r2 != null goto label08;

     label07:
        goto label09;

     label08:
        r7 = new java.lang.IllegalArgumentException;

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Problem decoding into existing bitmap");

        throw r7;

     label09:
        staticinvoke <android.graphics.BitmapFactory: void setDensityFromOptions(android.graphics.Bitmap,android.graphics.BitmapFactory$Options)>(r6, r1);

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        return r6;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    private static android.graphics.Bitmap decodeStreamInternal(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options)
    {
        java.io.InputStream r0;
        android.graphics.Rect r1;
        android.graphics.BitmapFactory$Options r2;
        long $l0, $l1;
        android.graphics.Bitmap $r3;
        byte[] r4, r5;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.BitmapFactory$Options;

        r4 = null;

        if r2 == null goto label1;

        r4 = r2.<android.graphics.BitmapFactory$Options: byte[] inTempStorage>;

     label1:
        r5 = r4;

        if r4 != null goto label2;

        r5 = newarray (byte)[16384];

     label2:
        $l0 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeInBitmap(android.graphics.BitmapFactory$Options)>(r2);

        $l1 = staticinvoke <android.graphics.BitmapFactory$Options: long nativeColorSpace(android.graphics.BitmapFactory$Options)>(r2);

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeStream(java.io.InputStream,byte[],android.graphics.Rect,android.graphics.BitmapFactory$Options,long,long)>(r0, r5, r1, r2, $l0, $l1);

        return $r3;
    }

    private static native android.graphics.Bitmap nativeDecodeAsset(long, android.graphics.Rect, android.graphics.BitmapFactory$Options, long, long);

    private static native android.graphics.Bitmap nativeDecodeByteArray(byte[], int, int, android.graphics.BitmapFactory$Options, long, long);

    private static native android.graphics.Bitmap nativeDecodeFileDescriptor(java.io.FileDescriptor, android.graphics.Rect, android.graphics.BitmapFactory$Options, long, long);

    private static native android.graphics.Bitmap nativeDecodeStream(java.io.InputStream, byte[], android.graphics.Rect, android.graphics.BitmapFactory$Options, long, long);

    private static native boolean nativeIsSeekable(java.io.FileDescriptor);

    private static void setDensityFromOptions(android.graphics.Bitmap, android.graphics.BitmapFactory$Options)
    {
        android.graphics.Bitmap r0, $r3;
        android.graphics.BitmapFactory$Options r1;
        int i0, $i1, $i2, i3;
        byte[] r2;
        boolean $z0, z1, $z2;

        r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: android.graphics.BitmapFactory$Options;

        if r0 == null goto label9;

        if r1 != null goto label1;

        goto label9;

     label1:
        i3 = r1.<android.graphics.BitmapFactory$Options: int inDensity>;

        if i3 == 0 goto label7;

        virtualinvoke r0.<android.graphics.Bitmap: void setDensity(int)>(i3);

        i0 = r1.<android.graphics.BitmapFactory$Options: int inTargetDensity>;

        if i0 == 0 goto label6;

        if i3 == i0 goto label6;

        $i2 = r1.<android.graphics.BitmapFactory$Options: int inScreenDensity>;

        if i3 != $i2 goto label2;

        goto label6;

     label2:
        r2 = virtualinvoke r0.<android.graphics.Bitmap: byte[] getNinePatchChunk()>();

        if r2 == null goto label3;

        $z0 = staticinvoke <android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>(r2);

        if $z0 == 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        $z2 = r1.<android.graphics.BitmapFactory$Options: boolean inScaled>;

        if $z2 != 0 goto label5;

        if z1 == 0 goto label8;

     label5:
        virtualinvoke r0.<android.graphics.Bitmap: void setDensity(int)>(i0);

        goto label8;

     label6:
        return;

     label7:
        $r3 = r1.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>;

        if $r3 == null goto label8;

        $i1 = staticinvoke <android.graphics.Bitmap: int getDefaultDensity()>();

        virtualinvoke r0.<android.graphics.Bitmap: void setDensity(int)>($i1);

        goto label8;

     label8:
        return;

     label9:
        return;
    }

    public static void <clinit>()
    {
        <android.graphics.BitmapFactory: int DECODE_BUFFER_SIZE> = 16384;

        return;
    }
}
