public class android.graphics.Canvas extends android.graphics.BaseCanvas
{
    public static final int ALL_SAVE_FLAG;
    public static final int CLIP_SAVE_FLAG;
    public static final int CLIP_TO_LAYER_SAVE_FLAG;
    public static final int FULL_COLOR_LAYER_SAVE_FLAG;
    public static final int HAS_ALPHA_LAYER_SAVE_FLAG;
    public static final int MATRIX_SAVE_FLAG;
    private static final int MAXMIMUM_BITMAP_SIZE;
    public static boolean sCompatibilityRestore;
    public static boolean sCompatibilitySetBitmap;
    private static int sCompatiblityVersion;
    private android.graphics.Bitmap mBitmap;
    private android.graphics.DrawFilter mDrawFilter;
    private java.lang.Runnable mFinalizer;

    static void <clinit>()
    {
        <android.graphics.Canvas: int MAXMIMUM_BITMAP_SIZE> = 32766;

        <android.graphics.Canvas: int MATRIX_SAVE_FLAG> = 1;

        <android.graphics.Canvas: int HAS_ALPHA_LAYER_SAVE_FLAG> = 4;

        <android.graphics.Canvas: int FULL_COLOR_LAYER_SAVE_FLAG> = 8;

        <android.graphics.Canvas: int CLIP_TO_LAYER_SAVE_FLAG> = 16;

        <android.graphics.Canvas: int CLIP_SAVE_FLAG> = 2;

        <android.graphics.Canvas: int ALL_SAVE_FLAG> = 31;

        <android.graphics.Canvas: int sCompatiblityVersion> = 0;

        <android.graphics.Canvas: boolean sCompatibilityRestore> = 0;

        <android.graphics.Canvas: boolean sCompatibilitySetBitmap> = 0;

        return;
    }

    public void <init>()
    {
        android.graphics.Canvas r0;
        boolean $z0;
        long $l0, $l1;
        libcore.util.NativeAllocationRegistry $r1;
        java.lang.Runnable $r2;

        r0 := @this: android.graphics.Canvas;

        specialinvoke r0.<android.graphics.BaseCanvas: void <init>()>();

        $z0 = virtualinvoke r0.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z0 != 0 goto label1;

        $l0 = staticinvoke <android.graphics.Canvas: long nInitRaster(long)>(0L);

        r0.<android.graphics.Canvas: long mNativeCanvasWrapper> = $l0;

        $r1 = <android.graphics.Canvas$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $r2 = virtualinvoke $r1.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l1);

        r0.<android.graphics.Canvas: java.lang.Runnable mFinalizer> = $r2;

        goto label2;

     label1:
        r0.<android.graphics.Canvas: java.lang.Runnable mFinalizer> = null;

     label2:
        return;
    }

    public void <init>(long)
    {
        android.graphics.Canvas r0;
        long l0, $l2;
        byte $b1;
        java.lang.IllegalStateException $r1;
        libcore.util.NativeAllocationRegistry $r2;
        java.lang.Runnable $r3;
        int $i3;

        r0 := @this: android.graphics.Canvas;

        l0 := @parameter0: long;

        specialinvoke r0.<android.graphics.BaseCanvas: void <init>()>();

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        r0.<android.graphics.Canvas: long mNativeCanvasWrapper> = l0;

        $r2 = <android.graphics.Canvas$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l2 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $r3 = virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l2);

        r0.<android.graphics.Canvas: java.lang.Runnable mFinalizer> = $r3;

        $i3 = staticinvoke <android.graphics.Bitmap: int getDefaultDensity()>();

        r0.<android.graphics.Canvas: int mDensity> = $i3;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    public void <init>(android.graphics.Bitmap)
    {
        android.graphics.Canvas r0;
        android.graphics.Bitmap r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        long $l0, $l1, $l2;
        libcore.util.NativeAllocationRegistry $r3;
        java.lang.Runnable $r4;
        int $i3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.BaseCanvas: void <init>()>();

        $z0 = virtualinvoke r1.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.graphics.Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        $l0 = virtualinvoke r1.<android.graphics.Bitmap: long getNativeInstance()>();

        $l1 = staticinvoke <android.graphics.Canvas: long nInitRaster(long)>($l0);

        r0.<android.graphics.Canvas: long mNativeCanvasWrapper> = $l1;

        $r3 = <android.graphics.Canvas$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l2 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $r4 = virtualinvoke $r3.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l2);

        r0.<android.graphics.Canvas: java.lang.Runnable mFinalizer> = $r4;

        r0.<android.graphics.Canvas: android.graphics.Bitmap mBitmap> = r1;

        $i3 = r1.<android.graphics.Bitmap: int mDensity>;

        r0.<android.graphics.Canvas: int mDensity> = $i3;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Immutable bitmap passed to Canvas constructor");

        throw $r2;
    }

    static long access$000()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.Canvas: long nGetNativeFinalizer()>();

        return $l0;
    }

    private static void checkValidClipOp(android.graphics.Region$Op)
    {
        android.graphics.Region$Op r0, $r1, $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: android.graphics.Region$Op;

        $i0 = <android.graphics.Canvas: int sCompatiblityVersion>;

        if $i0 < 28 goto label2;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        if r0 == $r1 goto label2;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        if r0 != $r2 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Region.Op - only INTERSECT and DIFFERENCE are allowed");

        throw $r3;

     label2:
        return;
    }

    private static void checkValidSaveFlags(int)
    {
        int i0, $i1;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        $i1 = <android.graphics.Canvas: int sCompatiblityVersion>;

        if $i1 < 28 goto label2;

        if i0 != 31 goto label1;

        goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Layer Save Flag - only ALL_SAVE_FLAGS is allowed");

        throw $r0;

     label2:
        return;
    }

    public static void freeCaches()
    {
        staticinvoke <android.graphics.Canvas: void nFreeCaches()>();

        return;
    }

    public static void freeTextLayoutCaches()
    {
        staticinvoke <android.graphics.Canvas: void nFreeTextLayoutCaches()>();

        return;
    }

    private static native boolean nClipPath(long, long, int);

    private static native boolean nClipRect(long, float, float, float, float, int);

    private static native void nConcat(long, long);

    private static native void nFreeCaches();

    private static native void nFreeTextLayoutCaches();

    private static native boolean nGetClipBounds(long, android.graphics.Rect);

    private static native int nGetHeight(long);

    private static native void nGetMatrix(long, long);

    private static native long nGetNativeFinalizer();

    private static native int nGetSaveCount(long);

    private static native int nGetWidth(long);

    private static native long nInitRaster(long);

    private static native boolean nIsOpaque(long);

    private static native boolean nQuickReject(long, float, float, float, float);

    private static native boolean nQuickReject(long, long);

    private static native boolean nRestore(long);

    private static native void nRestoreToCount(long, int);

    private static native void nRestoreUnclippedLayer(long, int, long);

    private static native void nRotate(long, float);

    private static native int nSave(long, int);

    private static native int nSaveLayer(long, float, float, float, float, long, int);

    private static native int nSaveLayerAlpha(long, float, float, float, float, int, int);

    private static native int nSaveUnclippedLayer(long, int, int, int, int);

    private static native void nScale(long, float, float);

    private static native void nSetBitmap(long, long);

    private static native void nSetCompatibilityVersion(int);

    private static native void nSetDrawFilter(long, long);

    private static native void nSetMatrix(long, long);

    private static native void nSkew(long, float, float);

    private static native void nTranslate(long, float, float);

    public static void setCompatibilityVersion(int)
    {
        int i0;

        i0 := @parameter0: int;

        <android.graphics.Canvas: int sCompatiblityVersion> = i0;

        staticinvoke <android.graphics.Canvas: void nSetCompatibilityVersion(int)>(i0);

        return;
    }

    public boolean clipOutPath(android.graphics.Path)
    {
        android.graphics.Canvas r0;
        android.graphics.Path r1;
        android.graphics.Region$Op $r2;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Path;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        $z0 = virtualinvoke r0.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>(r1, $r2);

        return $z0;
    }

    public boolean clipOutRect(float, float, float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Region$Op $r1;
        int $i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        $i0 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, f0, f1, f2, f3, $i0);

        return $z0;
    }

    public boolean clipOutRect(int, int, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, $i4;
        android.graphics.Region$Op $r1;
        float $f0, $f1, $f2, $f3;
        long $l5;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l5 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        $i4 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l5, $f3, $f2, $f1, $f0, $i4);

        return $z0;
    }

    public boolean clipOutRect(android.graphics.Rect)
    {
        android.graphics.Canvas r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Region$Op $r2;
        float $f0, $f1, $f2, $f3;
        long $l5;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $l5 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i0;

        $i1 = r1.<android.graphics.Rect: int top>;

        $f2 = (float) $i1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f1 = (float) $i2;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i3;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        $i4 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l5, $f3, $f2, $f1, $f0, $i4);

        return $z0;
    }

    public boolean clipOutRect(android.graphics.RectF)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Region$Op $r2;
        int $i0;
        float $f0, $f1, $f2, $f3;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, $f3, $f2, $f1, $f0, $i0);

        return $z0;
    }

    public boolean clipPath(android.graphics.Path)
    {
        android.graphics.Canvas r0;
        android.graphics.Path r1;
        android.graphics.Region$Op $r2;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Path;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $z0 = virtualinvoke r0.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>(r1, $r2);

        return $z0;
    }

    public boolean clipPath(android.graphics.Path, android.graphics.Region$Op)
    {
        android.graphics.Canvas r0;
        android.graphics.Path r1;
        android.graphics.Region$Op r2;
        long $l0, $l1;
        int $i2;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Region$Op;

        staticinvoke <android.graphics.Canvas: void checkValidClipOp(android.graphics.Region$Op)>(r2);

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $l1 = virtualinvoke r1.<android.graphics.Path: long readOnlyNI()>();

        $i2 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipPath(long,long,int)>($l0, $l1, $i2);

        return $z0;
    }

    public boolean clipRect(float, float, float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Region$Op $r1;
        int $i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, f0, f1, f2, f3, $i0);

        return $z0;
    }

    public boolean clipRect(float, float, float, float, android.graphics.Region$Op)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Region$Op r1;
        int $i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Region$Op;

        staticinvoke <android.graphics.Canvas: void checkValidClipOp(android.graphics.Region$Op)>(r1);

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i0 = r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, f0, f1, f2, f3, $i0);

        return $z0;
    }

    public boolean clipRect(int, int, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, $i4;
        android.graphics.Region$Op $r1;
        float $f0, $f1, $f2, $f3;
        long $l5;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l5 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i4 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l5, $f3, $f2, $f1, $f0, $i4);

        return $z0;
    }

    public boolean clipRect(android.graphics.Rect)
    {
        android.graphics.Canvas r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Region$Op $r2;
        float $f0, $f1, $f2, $f3;
        long $l5;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $l5 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i0;

        $i1 = r1.<android.graphics.Rect: int top>;

        $f2 = (float) $i1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f1 = (float) $i2;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i3;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i4 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l5, $f3, $f2, $f1, $f0, $i4);

        return $z0;
    }

    public boolean clipRect(android.graphics.Rect, android.graphics.Region$Op)
    {
        android.graphics.Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Region$Op r2;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;
        long $l5;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Region$Op;

        staticinvoke <android.graphics.Canvas: void checkValidClipOp(android.graphics.Region$Op)>(r2);

        $l5 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i0;

        $i1 = r1.<android.graphics.Rect: int top>;

        $f2 = (float) $i1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f1 = (float) $i2;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i3;

        $i4 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l5, $f3, $f2, $f1, $f0, $i4);

        return $z0;
    }

    public boolean clipRect(android.graphics.RectF)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Region$Op $r2;
        int $i0;
        float $f0, $f1, $f2, $f3;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, $f3, $f2, $f1, $f0, $i0);

        return $z0;
    }

    public boolean clipRect(android.graphics.RectF, android.graphics.Region$Op)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Region$Op r2;
        int $i0;
        float $f0, $f1, $f2, $f3;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Region$Op;

        staticinvoke <android.graphics.Canvas: void checkValidClipOp(android.graphics.Region$Op)>(r2);

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, $f3, $f2, $f1, $f0, $i0);

        return $z0;
    }

    public boolean clipRectUnion(android.graphics.Rect)
    {
        android.graphics.Canvas r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Region$Op $r2;
        float $f0, $f1, $f2, $f3;
        long $l5;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $l5 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i0;

        $i1 = r1.<android.graphics.Rect: int top>;

        $f2 = (float) $i1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f1 = (float) $i2;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i3;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        $i4 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nClipRect(long,float,float,float,float,int)>($l5, $f3, $f2, $f1, $f0, $i4);

        return $z0;
    }

    public boolean clipRegion(android.graphics.Region)
    {
        android.graphics.Canvas r0;
        android.graphics.Region r1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Region;

        return 0;
    }

    public boolean clipRegion(android.graphics.Region, android.graphics.Region$Op)
    {
        android.graphics.Canvas r0;
        android.graphics.Region r1;
        android.graphics.Region$Op r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Region;

        r2 := @parameter1: android.graphics.Region$Op;

        return 0;
    }

    public void concat(android.graphics.Matrix)
    {
        android.graphics.Canvas r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        if r1 == null goto label1;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.graphics.Canvas: void nConcat(long,long)>($l1, $l0);

     label1:
        return;
    }

    public void disableZ()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        return;
    }

    public void drawARGB(int, int, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawARGB(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void drawArc(float, float, float, float, float, float, boolean, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3, f4, f5;
        boolean z0;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        z0 := @parameter6: boolean;

        r1 := @parameter7: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>(f0, f1, f2, f3, f4, f5, z0, r1);

        return;
    }

    public void drawArc(android.graphics.RectF, float, float, boolean, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        r2 := @parameter4: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>(r1, f0, f1, z0, r2);

        return;
    }

    public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Bitmap r1;
        float f0, f1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r1, f0, f1, r2);

        return;
    }

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Matrix r2;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Matrix;

        r3 := @parameter2: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r1, r2, r3);

        return;
    }

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2, r3;
        android.graphics.Paint r4;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>(r1, r2, r3, r4);

        return;
    }

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2;
        android.graphics.RectF r3;
        android.graphics.Paint r4;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.RectF;

        r4 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>(r1, r2, r3, r4);

        return;
    }

    public void drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        int[] r1;
        int i0, i1, i2, i3;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>(r1, i0, i1, f0, f1, i2, i3, z0, r2);

        return;
    }

    public void drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5;
        boolean z0;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>(r1, i0, i1, i2, i3, i4, i5, z0, r2);

        return;
    }

    public void drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Bitmap r1;
        int i0, i1, i2, i3;
        float[] r2;
        int[] r3;
        android.graphics.Paint r4;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: float[];

        i2 := @parameter4: int;

        r3 := @parameter5: int[];

        i3 := @parameter6: int;

        r4 := @parameter7: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>(r1, i0, i1, r2, i2, r3, i3, r4);

        return;
    }

    public void drawCircle(float, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r1 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawCircle(float,float,float,android.graphics.Paint)>(f0, f1, f2, r1);

        return;
    }

    public void drawColor(int)
    {
        android.graphics.Canvas r0;
        int i0;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawColor(int)>(i0);

        return;
    }

    public void drawColor(int, android.graphics.BlendMode)
    {
        android.graphics.Canvas r0;
        int i0;
        android.graphics.BlendMode r1;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.BlendMode;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawColor(int,android.graphics.BlendMode)>(i0, r1);

        return;
    }

    public void drawColor(int, android.graphics.PorterDuff$Mode)
    {
        android.graphics.Canvas r0;
        int i0;
        android.graphics.PorterDuff$Mode r1;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.PorterDuff$Mode;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(i0, r1);

        return;
    }

    public void drawColor(long)
    {
        android.graphics.Canvas r0;
        long l0;
        android.graphics.BlendMode $r1;

        r0 := @this: android.graphics.Canvas;

        l0 := @parameter0: long;

        $r1 = <android.graphics.BlendMode: android.graphics.BlendMode SRC_OVER>;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawColor(long,android.graphics.BlendMode)>(l0, $r1);

        return;
    }

    public void drawColor(long, android.graphics.BlendMode)
    {
        android.graphics.Canvas r0;
        long l0;
        android.graphics.BlendMode r1;

        r0 := @this: android.graphics.Canvas;

        l0 := @parameter0: long;

        r1 := @parameter1: android.graphics.BlendMode;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawColor(long,android.graphics.BlendMode)>(l0, r1);

        return;
    }

    public void drawDoubleRoundRect(android.graphics.RectF, float, float, android.graphics.RectF, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1, r2;
        float f0, f1, f2, f3;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.RectF;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        r3 := @parameter6: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>(r1, f0, f1, r2, f2, f3, r3);

        return;
    }

    public void drawDoubleRoundRect(android.graphics.RectF, float[], android.graphics.RectF, float[], android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1, r3;
        float[] r2, r4;
        android.graphics.Paint r5;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: float[];

        r3 := @parameter2: android.graphics.RectF;

        r4 := @parameter3: float[];

        r5 := @parameter4: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>(r1, r2, r3, r4, r5);

        return;
    }

    public void drawLine(float, float, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawLine(float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, r1);

        return;
    }

    public void drawLines(float[], int, int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float[] r1;
        int i0, i1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawLines(float[],int,int,android.graphics.Paint)>(r1, i0, i1, r2);

        return;
    }

    public void drawLines(float[], android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float[] r1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawLines(float[],android.graphics.Paint)>(r1, r2);

        return;
    }

    public void drawOval(float, float, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawOval(float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, r1);

        return;
    }

    public void drawOval(android.graphics.RectF, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>(r1, r2);

        return;
    }

    public void drawPaint(android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPaint(android.graphics.Paint)>(r1);

        return;
    }

    public void drawPatch(android.graphics.NinePatch, android.graphics.Rect, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.NinePatch r1;
        android.graphics.Rect r2;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.NinePatch;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>(r1, r2, r3);

        return;
    }

    public void drawPatch(android.graphics.NinePatch, android.graphics.RectF, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.NinePatch r1;
        android.graphics.RectF r2;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.NinePatch;

        r2 := @parameter1: android.graphics.RectF;

        r3 := @parameter2: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>(r1, r2, r3);

        return;
    }

    public void drawPath(android.graphics.Path, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Path r1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r1, r2);

        return;
    }

    public void drawPicture(android.graphics.Picture)
    {
        android.graphics.Canvas r0;
        android.graphics.Picture r1;
        int i0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Picture;

        virtualinvoke r1.<android.graphics.Picture: void endRecording()>();

        i0 = virtualinvoke r0.<android.graphics.Canvas: int save()>();

        virtualinvoke r1.<android.graphics.Picture: void draw(android.graphics.Canvas)>(r0);

        virtualinvoke r0.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        return;
    }

    public void drawPicture(android.graphics.Picture, android.graphics.Rect)
    {
        android.graphics.Canvas r0;
        android.graphics.Picture r1;
        android.graphics.Rect r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Picture;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.graphics.Canvas: int save()>();

        $i1 = r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f0 = (float) $i2;

        virtualinvoke r0.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        $i3 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        if $i3 <= 0 goto label1;

        $i4 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        if $i4 <= 0 goto label1;

        $i5 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $f2 = (float) $i5;

        $i6 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        $f3 = (float) $i6;

        $f4 = $f2 / $f3;

        $i7 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $f5 = (float) $i7;

        $i8 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        $f6 = (float) $i8;

        $f7 = $f5 / $f6;

        virtualinvoke r0.<android.graphics.Canvas: void scale(float,float)>($f4, $f7);

     label1:
        virtualinvoke r0.<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>(r1);

        virtualinvoke r0.<android.graphics.Canvas: void restore()>();

        return;
    }

    public void drawPicture(android.graphics.Picture, android.graphics.RectF)
    {
        android.graphics.Canvas r0;
        android.graphics.Picture r1;
        android.graphics.RectF r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i1, $i2, $i3, $i4;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Picture;

        r2 := @parameter1: android.graphics.RectF;

        virtualinvoke r0.<android.graphics.Canvas: int save()>();

        $f1 = r2.<android.graphics.RectF: float left>;

        $f0 = r2.<android.graphics.RectF: float top>;

        virtualinvoke r0.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        $i1 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        if $i1 <= 0 goto label1;

        $i2 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        if $i2 <= 0 goto label1;

        $f2 = virtualinvoke r2.<android.graphics.RectF: float width()>();

        $i3 = virtualinvoke r1.<android.graphics.Picture: int getWidth()>();

        $f3 = (float) $i3;

        $f4 = $f2 / $f3;

        $f5 = virtualinvoke r2.<android.graphics.RectF: float height()>();

        $i4 = virtualinvoke r1.<android.graphics.Picture: int getHeight()>();

        $f6 = (float) $i4;

        $f7 = $f5 / $f6;

        virtualinvoke r0.<android.graphics.Canvas: void scale(float,float)>($f4, $f7);

     label1:
        virtualinvoke r0.<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>(r1);

        virtualinvoke r0.<android.graphics.Canvas: void restore()>();

        return;
    }

    public void drawPoint(float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPoint(float,float,android.graphics.Paint)>(f0, f1, r1);

        return;
    }

    public void drawPoints(float[], int, int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float[] r1;
        int i0, i1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPoints(float[],int,int,android.graphics.Paint)>(r1, i0, i1, r2);

        return;
    }

    public void drawPoints(float[], android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float[] r1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPoints(float[],android.graphics.Paint)>(r1, r2);

        return;
    }

    public void drawPosText(java.lang.String, float[], android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        java.lang.String r1;
        float[] r2;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: float[];

        r3 := @parameter2: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>(r1, r2, r3);

        return;
    }

    public void drawPosText(char[], int, int, float[], android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        char[] r1;
        int i0, i1;
        float[] r2;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: float[];

        r3 := @parameter4: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>(r1, i0, i1, r2, r3);

        return;
    }

    public void drawRGB(int, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawRGB(int,int,int)>(i0, i1, i2);

        return;
    }

    public void drawRect(float, float, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, r1);

        return;
    }

    public void drawRect(android.graphics.Rect, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>(r1, r2);

        return;
    }

    public void drawRect(android.graphics.RectF, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>(r1, r2);

        return;
    }

    public void drawRenderNode(android.graphics.RenderNode)
    {
        android.graphics.Canvas r0;
        android.graphics.RenderNode r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RenderNode;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Software rendering doesn\'t support drawRenderNode");

        throw $r2;
    }

    public void drawRoundRect(float, float, float, float, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3, f4, f5;
        android.graphics.Paint r1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r1 := @parameter6: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>(f0, f1, f2, f3, f4, f5, r1);

        return;
    }

    public void drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        float f0, f1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>(r1, f0, f1, r2);

        return;
    }

    public void drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        java.lang.CharSequence r1;
        int i0, i1;
        float f0, f1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>(r1, i0, i1, f0, f1, r2);

        return;
    }

    public void drawText(java.lang.String, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        java.lang.String r1;
        float f0, f1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>(r1, f0, f1, r2);

        return;
    }

    public void drawText(java.lang.String, int, int, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        java.lang.String r1;
        int i0, i1;
        float f0, f1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>(r1, i0, i1, f0, f1, r2);

        return;
    }

    public void drawText(char[], int, int, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        char[] r1;
        int i0, i1;
        float f0, f1;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>(r1, i0, i1, f0, f1, r2);

        return;
    }

    public void drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        java.lang.String r1;
        android.graphics.Path r2;
        float f0, f1;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Path;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r3 := @parameter4: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>(r1, r2, f0, f1, r3);

        return;
    }

    public void drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        char[] r1;
        int i0, i1;
        android.graphics.Path r2;
        float f0, f1;
        android.graphics.Paint r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Path;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r3 := @parameter6: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>(r1, i0, i1, r2, f0, f1, r3);

        return;
    }

    public void drawTextRun(android.graphics.text.MeasuredText, int, int, int, int, float, float, boolean, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.text.MeasuredText r1;
        int i0, i1, i2, i3;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.text.MeasuredText;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>(r1, i0, i1, i2, i3, f0, f1, z0, r2);

        return;
    }

    public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, boolean, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>(r1, i0, i1, i2, i3, f0, f1, z0, r2);

        return;
    }

    public void drawTextRun(char[], int, int, int, int, float, float, boolean, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        char[] r1;
        int i0, i1, i2, i3;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>(r1, i0, i1, i2, i3, f0, f1, z0, r2);

        return;
    }

    public void drawVertices(android.graphics.Canvas$VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.Canvas$VertexMode r1;
        int i0, i1, i2, i3, i4, i5;
        float[] r2, r3;
        int[] r4;
        short[] r5;
        android.graphics.Paint r6;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Canvas$VertexMode;

        i0 := @parameter1: int;

        r2 := @parameter2: float[];

        i1 := @parameter3: int;

        r3 := @parameter4: float[];

        i2 := @parameter5: int;

        r4 := @parameter6: int[];

        i3 := @parameter7: int;

        r5 := @parameter8: short[];

        i4 := @parameter9: int;

        i5 := @parameter10: int;

        r6 := @parameter11: android.graphics.Paint;

        specialinvoke r0.<android.graphics.BaseCanvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>(r1, i0, r2, i1, r3, i2, r4, i3, r5, i4, i5, r6);

        return;
    }

    public void enableZ()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        return;
    }

    public final android.graphics.Rect getClipBounds()
    {
        android.graphics.Canvas r0;
        android.graphics.Rect $r2;

        r0 := @this: android.graphics.Canvas;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        virtualinvoke r0.<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>($r2);

        return $r2;
    }

    public boolean getClipBounds(android.graphics.Rect)
    {
        android.graphics.Canvas r0;
        android.graphics.Rect r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nGetClipBounds(long,android.graphics.Rect)>($l0, r1);

        return $z0;
    }

    public int getDensity()
    {
        android.graphics.Canvas r0;
        int $i0;

        r0 := @this: android.graphics.Canvas;

        $i0 = r0.<android.graphics.Canvas: int mDensity>;

        return $i0;
    }

    public android.graphics.DrawFilter getDrawFilter()
    {
        android.graphics.Canvas r0;
        android.graphics.DrawFilter $r1;

        r0 := @this: android.graphics.Canvas;

        $r1 = r0.<android.graphics.Canvas: android.graphics.DrawFilter mDrawFilter>;

        return $r1;
    }

    protected javax.microedition.khronos.opengles.GL getGL()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        return null;
    }

    public int getHeight()
    {
        android.graphics.Canvas r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Canvas;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i1 = staticinvoke <android.graphics.Canvas: int nGetHeight(long)>($l0);

        return $i1;
    }

    public final android.graphics.Matrix getMatrix()
    {
        android.graphics.Canvas r0;
        android.graphics.Matrix $r2;

        r0 := @this: android.graphics.Canvas;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        virtualinvoke r0.<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>($r2);

        return $r2;
    }

    public void getMatrix(android.graphics.Matrix)
    {
        android.graphics.Canvas r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.graphics.Canvas: void nGetMatrix(long,long)>($l1, $l0);

        return;
    }

    public int getMaximumBitmapHeight()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        return 32766;
    }

    public int getMaximumBitmapWidth()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        return 32766;
    }

    public long getNativeCanvasWrapper()
    {
        android.graphics.Canvas r0;
        long $l0;

        r0 := @this: android.graphics.Canvas;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        return $l0;
    }

    public int getSaveCount()
    {
        android.graphics.Canvas r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Canvas;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i1 = staticinvoke <android.graphics.Canvas: int nGetSaveCount(long)>($l0);

        return $i1;
    }

    public int getWidth()
    {
        android.graphics.Canvas r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Canvas;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i1 = staticinvoke <android.graphics.Canvas: int nGetWidth(long)>($l0);

        return $i1;
    }

    public void insertInorderBarrier()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        virtualinvoke r0.<android.graphics.Canvas: void disableZ()>();

        return;
    }

    public void insertReorderBarrier()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        virtualinvoke r0.<android.graphics.Canvas: void enableZ()>();

        return;
    }

    public boolean isHardwareAccelerated()
    {
        android.graphics.Canvas r0;

        r0 := @this: android.graphics.Canvas;

        return 0;
    }

    public boolean isOpaque()
    {
        android.graphics.Canvas r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nIsOpaque(long)>($l0);

        return $z0;
    }

    public boolean isRecordingFor(java.lang.Object)
    {
        android.graphics.Canvas r0;
        java.lang.Object r1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public boolean quickReject(float, float, float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nQuickReject(long,float,float,float,float)>($l0, f0, f1, f2, f3);

        return $z0;
    }

    public boolean quickReject(float, float, float, float, android.graphics.Canvas$EdgeType)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Canvas$EdgeType r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Canvas$EdgeType;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nQuickReject(long,float,float,float,float)>($l0, f0, f1, f2, f3);

        return $z0;
    }

    public boolean quickReject(android.graphics.Path)
    {
        android.graphics.Canvas r0;
        android.graphics.Path r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Path;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $l1 = virtualinvoke r1.<android.graphics.Path: long readOnlyNI()>();

        $z0 = staticinvoke <android.graphics.Canvas: boolean nQuickReject(long,long)>($l0, $l1);

        return $z0;
    }

    public boolean quickReject(android.graphics.Path, android.graphics.Canvas$EdgeType)
    {
        android.graphics.Canvas r0;
        android.graphics.Path r1;
        android.graphics.Canvas$EdgeType r2;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Canvas$EdgeType;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $l1 = virtualinvoke r1.<android.graphics.Path: long readOnlyNI()>();

        $z0 = staticinvoke <android.graphics.Canvas: boolean nQuickReject(long,long)>($l0, $l1);

        return $z0;
    }

    public boolean quickReject(android.graphics.RectF)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        float $f0, $f1, $f2, $f3;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nQuickReject(long,float,float,float,float)>($l0, $f3, $f2, $f1, $f0);

        return $z0;
    }

    public boolean quickReject(android.graphics.RectF, android.graphics.Canvas$EdgeType)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Canvas$EdgeType r2;
        float $f0, $f1, $f2, $f3;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Canvas$EdgeType;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nQuickReject(long,float,float,float,float)>($l0, $f3, $f2, $f1, $f0);

        return $z0;
    }

    public void release()
    {
        android.graphics.Canvas r0;
        java.lang.Runnable r1;

        r0 := @this: android.graphics.Canvas;

        r0.<android.graphics.Canvas: long mNativeCanvasWrapper> = 0L;

        r1 = r0.<android.graphics.Canvas: java.lang.Runnable mFinalizer>;

        if r1 == null goto label1;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        r0.<android.graphics.Canvas: java.lang.Runnable mFinalizer> = null;

     label1:
        return;
    }

    public void restore()
    {
        android.graphics.Canvas r0;
        long $l0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.Canvas;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $z0 = staticinvoke <android.graphics.Canvas: boolean nRestore(long)>($l0);

        if $z0 != 0 goto label2;

        $z1 = <android.graphics.Canvas: boolean sCompatibilityRestore>;

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Underflow in restore - more restores than saves");

        throw $r1;

     label2:
        return;
    }

    public void restoreToCount(int)
    {
        android.graphics.Canvas r0;
        int i0, i2;
        long $l1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        i2 = i0;

        if i0 >= 1 goto label2;

        $z0 = <android.graphics.Canvas: boolean sCompatibilityRestore>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z1 == 0 goto label1;

        i2 = 1;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Underflow in restoreToCount - more restores than saves");

        throw $r1;

     label2:
        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.Canvas: void nRestoreToCount(long,int)>($l1, i2);

        return;
    }

    public void restoreUnclippedLayer(int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        int i0;
        android.graphics.Paint r1;
        long $l1, $l2;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Paint;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $l2 = virtualinvoke r1.<android.graphics.Paint: long getNativeInstance()>();

        staticinvoke <android.graphics.Canvas: void nRestoreUnclippedLayer(long,int,long)>($l1, i0, $l2);

        return;
    }

    public void rotate(float)
    {
        android.graphics.Canvas r0;
        float f0;
        byte $b0;
        long $l1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return;

     label1:
        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.Canvas: void nRotate(long,float)>($l1, f0);

        return;
    }

    public final void rotate(float, float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, $f3, $f4;
        byte $b0;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.graphics.Canvas: void translate(float,float)>(f1, f2);

        virtualinvoke r0.<android.graphics.Canvas: void rotate(float)>(f0);

        $f4 = neg f1;

        $f3 = neg f2;

        virtualinvoke r0.<android.graphics.Canvas: void translate(float,float)>($f4, $f3);

        return;
    }

    public int save()
    {
        android.graphics.Canvas r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Canvas;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i1 = staticinvoke <android.graphics.Canvas: int nSave(long,int)>($l0, 3);

        return $i1;
    }

    public int save(int)
    {
        android.graphics.Canvas r0;
        int i0, $i2;
        long $l1;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i2 = staticinvoke <android.graphics.Canvas: int nSave(long,int)>($l1, i0);

        return $i2;
    }

    public int saveLayer(float, float, float, float, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        int $i0;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>(f0, f1, f2, f3, r1, 31);

        return $i0;
    }

    public int saveLayer(float, float, float, float, android.graphics.Paint, int)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        int i0, $i2;
        long l1, l3;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        i0 := @parameter5: int;

        staticinvoke <android.graphics.Canvas: void checkValidSaveFlags(int)>(i0);

        l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        if r1 == null goto label1;

        l3 = virtualinvoke r1.<android.graphics.Paint: long getNativeInstance()>();

        goto label2;

     label1:
        l3 = 0L;

     label2:
        $i2 = staticinvoke <android.graphics.Canvas: int nSaveLayer(long,float,float,float,float,long,int)>(l1, f0, f1, f2, f3, l3, 31);

        return $i2;
    }

    public int saveLayer(android.graphics.RectF, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;
        int $i0;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>(r1, r2, 31);

        return $i0;
    }

    public int saveLayer(android.graphics.RectF, android.graphics.Paint, int)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1, $r3, r5;
        android.graphics.Paint r2;
        int i0, $i1;
        float $f0, $f1, $f2, $f3;
        android.graphics.Rect $r4;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        r5 = r1;

        if r1 != null goto label1;

        $r3 = new android.graphics.RectF;

        $r4 = virtualinvoke r0.<android.graphics.Canvas: android.graphics.Rect getClipBounds()>();

        specialinvoke $r3.<android.graphics.RectF: void <init>(android.graphics.Rect)>($r4);

        r5 = $r3;

     label1:
        staticinvoke <android.graphics.Canvas: void checkValidSaveFlags(int)>(i0);

        $f3 = r5.<android.graphics.RectF: float left>;

        $f2 = r5.<android.graphics.RectF: float top>;

        $f1 = r5.<android.graphics.RectF: float right>;

        $f0 = r5.<android.graphics.RectF: float bottom>;

        $i1 = virtualinvoke r0.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f3, $f2, $f1, $f0, r2, 31);

        return $i1;
    }

    public int saveLayerAlpha(float, float, float, float, int)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        int i0, $i1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i0 := @parameter4: int;

        $i1 = virtualinvoke r0.<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>(f0, f1, f2, f3, i0, 31);

        return $i1;
    }

    public int saveLayerAlpha(float, float, float, float, int, int)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3;
        int i0, $i1, $i3, i4, i5;
        long $l2;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i4 := @parameter4: int;

        i0 := @parameter5: int;

        staticinvoke <android.graphics.Canvas: void checkValidSaveFlags(int)>(i0);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, i4);

        i5 = staticinvoke <java.lang.Math: int min(int,int)>(255, $i1);

        $l2 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i3 = staticinvoke <android.graphics.Canvas: int nSaveLayerAlpha(long,float,float,float,float,int,int)>($l2, f0, f1, f2, f3, i5, 31);

        return $i3;
    }

    public int saveLayerAlpha(android.graphics.RectF, int)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1;
        int i0, $i1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>(r1, i0, 31);

        return $i1;
    }

    public int saveLayerAlpha(android.graphics.RectF, int, int)
    {
        android.graphics.Canvas r0;
        android.graphics.RectF r1, $r2, r4;
        int i0, i1, $i2;
        float $f0, $f1, $f2, $f3;
        android.graphics.Rect $r3;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.RectF;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r4 = r1;

        if r1 != null goto label1;

        $r2 = new android.graphics.RectF;

        $r3 = virtualinvoke r0.<android.graphics.Canvas: android.graphics.Rect getClipBounds()>();

        specialinvoke $r2.<android.graphics.RectF: void <init>(android.graphics.Rect)>($r3);

        r4 = $r2;

     label1:
        staticinvoke <android.graphics.Canvas: void checkValidSaveFlags(int)>(i1);

        $f3 = r4.<android.graphics.RectF: float left>;

        $f2 = r4.<android.graphics.RectF: float top>;

        $f1 = r4.<android.graphics.RectF: float right>;

        $f0 = r4.<android.graphics.RectF: float bottom>;

        $i2 = virtualinvoke r0.<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>($f3, $f2, $f1, $f0, i0, 31);

        return $i2;
    }

    public int saveUnclippedLayer(int, int, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, $i5;
        long $l4;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $i5 = staticinvoke <android.graphics.Canvas: int nSaveUnclippedLayer(long,int,int,int,int)>($l4, i0, i1, i2, i3);

        return $i5;
    }

    public void scale(float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1;
        byte $b0, $b2;
        long $l1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl 1.0F;

        if $b0 != 0 goto label1;

        $b2 = f1 cmpl 1.0F;

        if $b2 != 0 goto label1;

        return;

     label1:
        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.Canvas: void nScale(long,float,float)>($l1, f0, f1);

        return;
    }

    public final void scale(float, float, float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1, f2, f3, $f4, $f5;
        byte $b0, $b1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $b0 = f0 cmpl 1.0F;

        if $b0 != 0 goto label1;

        $b1 = f1 cmpl 1.0F;

        if $b1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.graphics.Canvas: void translate(float,float)>(f2, f3);

        virtualinvoke r0.<android.graphics.Canvas: void scale(float,float)>(f0, f1);

        $f5 = neg f2;

        $f4 = neg f3;

        virtualinvoke r0.<android.graphics.Canvas: void translate(float,float)>($f5, $f4);

        return;
    }

    public void setBitmap(android.graphics.Bitmap)
    {
        android.graphics.Canvas r0;
        android.graphics.Bitmap r1;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2;
        java.lang.IllegalStateException $r3;
        long $l0, $l1, $l3;
        int $i2;
        android.graphics.Matrix r4;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        $z0 = virtualinvoke r0.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z0 != 0 goto label6;

        r4 = null;

        if r1 == null goto label1;

        r4 = null;

        $z2 = <android.graphics.Canvas: boolean sCompatibilitySetBitmap>;

        if $z2 == 0 goto label1;

        r4 = virtualinvoke r0.<android.graphics.Canvas: android.graphics.Matrix getMatrix()>();

     label1:
        if r1 != null goto label2;

        $l3 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.Canvas: void nSetBitmap(long,long)>($l3, 0L);

        r0.<android.graphics.Canvas: int mDensity> = 0;

        goto label3;

     label2:
        $z1 = virtualinvoke r1.<android.graphics.Bitmap: boolean isMutable()>();

        if $z1 == 0 goto label5;

        virtualinvoke r0.<android.graphics.Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        $l1 = virtualinvoke r1.<android.graphics.Bitmap: long getNativeInstance()>();

        staticinvoke <android.graphics.Canvas: void nSetBitmap(long,long)>($l0, $l1);

        $i2 = r1.<android.graphics.Bitmap: int mDensity>;

        r0.<android.graphics.Canvas: int mDensity> = $i2;

     label3:
        if r4 == null goto label4;

        virtualinvoke r0.<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>(r4);

     label4:
        r0.<android.graphics.Canvas: android.graphics.Bitmap mBitmap> = r1;

        return;

     label5:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label6:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can\'t set a bitmap device on a HW accelerated canvas");

        throw $r2;
    }

    public void setDensity(int)
    {
        android.graphics.Canvas r0;
        int i0;
        android.graphics.Bitmap r1;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        r1 = r0.<android.graphics.Canvas: android.graphics.Bitmap mBitmap>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.Bitmap: void setDensity(int)>(i0);

     label1:
        r0.<android.graphics.Canvas: int mDensity> = i0;

        return;
    }

    public void setDrawFilter(android.graphics.DrawFilter)
    {
        android.graphics.Canvas r0;
        android.graphics.DrawFilter r1;
        long $l0, l1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.DrawFilter;

        l1 = 0L;

        if r1 == null goto label1;

        l1 = r1.<android.graphics.DrawFilter: long mNativeInt>;

     label1:
        r0.<android.graphics.Canvas: android.graphics.DrawFilter mDrawFilter> = r1;

        $l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.Canvas: void nSetDrawFilter(long,long)>($l0, l1);

        return;
    }

    public void setMatrix(android.graphics.Matrix)
    {
        android.graphics.Canvas r0;
        android.graphics.Matrix r1;
        long l0, l1;

        r0 := @this: android.graphics.Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        l0 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        if r1 != null goto label1;

        l1 = 0L;

        goto label2;

     label1:
        l1 = r1.<android.graphics.Matrix: long native_instance>;

     label2:
        staticinvoke <android.graphics.Canvas: void nSetMatrix(long,long)>(l0, l1);

        return;
    }

    public void setScreenDensity(int)
    {
        android.graphics.Canvas r0;
        int i0;

        r0 := @this: android.graphics.Canvas;

        i0 := @parameter0: int;

        r0.<android.graphics.Canvas: int mScreenDensity> = i0;

        return;
    }

    public void skew(float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1;
        byte $b0, $b2;
        long $l1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $b2 = f1 cmpl 0.0F;

        if $b2 != 0 goto label1;

        return;

     label1:
        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.Canvas: void nSkew(long,float,float)>($l1, f0, f1);

        return;
    }

    public void translate(float, float)
    {
        android.graphics.Canvas r0;
        float f0, f1;
        byte $b0, $b2;
        long $l1;

        r0 := @this: android.graphics.Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $b2 = f1 cmpl 0.0F;

        if $b2 != 0 goto label1;

        return;

     label1:
        $l1 = r0.<android.graphics.Canvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.Canvas: void nTranslate(long,float,float)>($l1, f0, f1);

        return;
    }
}
