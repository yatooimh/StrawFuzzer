public class android.graphics.FontFamily extends java.lang.Object
{
    private static java.lang.String TAG;
    private static final libcore.util.NativeAllocationRegistry sBuilderRegistry;
    private static final libcore.util.NativeAllocationRegistry sFamilyRegistry;
    private long mBuilderPtr;
    private java.lang.Runnable mNativeBuilderCleaner;
    public long mNativePtr;

    static void <clinit>()
    {
        java.lang.Class $r0, $r3;
        java.lang.ClassLoader $r1, $r4;
        long $l0, $l1;
        libcore.util.NativeAllocationRegistry $r2, $r5;

        <android.graphics.FontFamily: java.lang.String TAG> = "FontFamily";

        $r0 = class "Landroid/graphics/FontFamily;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l0 = staticinvoke <android.graphics.FontFamily: long nGetBuilderReleaseFunc()>();

        $r2 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long)>($r1, $l0);

        <android.graphics.FontFamily: libcore.util.NativeAllocationRegistry sBuilderRegistry> = $r2;

        $r3 = class "Landroid/graphics/FontFamily;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l1 = staticinvoke <android.graphics.FontFamily: long nGetFamilyReleaseFunc()>();

        $r5 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long)>($r4, $l1);

        <android.graphics.FontFamily: libcore.util.NativeAllocationRegistry sFamilyRegistry> = $r5;

        return;
    }

    public void <init>()
    {
        android.graphics.FontFamily r0;
        long l0;
        libcore.util.NativeAllocationRegistry $r1;
        java.lang.Runnable $r2;

        r0 := @this: android.graphics.FontFamily;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        l0 = staticinvoke <android.graphics.FontFamily: long nInitBuilder(java.lang.String,int)>(null, 0);

        r0.<android.graphics.FontFamily: long mBuilderPtr> = l0;

        $r1 = <android.graphics.FontFamily: libcore.util.NativeAllocationRegistry sBuilderRegistry>;

        $r2 = virtualinvoke $r1.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l0);

        r0.<android.graphics.FontFamily: java.lang.Runnable mNativeBuilderCleaner> = $r2;

        return;
    }

    public void <init>(java.lang.String[], int)
    {
        android.graphics.FontFamily r0;
        int i0, $i2, $i3;
        long l1;
        java.lang.String[] r1;
        java.lang.String r2;
        libcore.util.NativeAllocationRegistry $r3;
        java.lang.Runnable $r4;

        r0 := @this: android.graphics.FontFamily;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label3;

        $i2 = lengthof r1;

        if $i2 != 0 goto label1;

        goto label3;

     label1:
        $i3 = lengthof r1;

        if $i3 != 1 goto label2;

        r2 = r1[0];

        goto label4;

     label2:
        r2 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(",", r1);

        goto label4;

     label3:
        r2 = null;

     label4:
        l1 = staticinvoke <android.graphics.FontFamily: long nInitBuilder(java.lang.String,int)>(r2, i0);

        r0.<android.graphics.FontFamily: long mBuilderPtr> = l1;

        $r3 = <android.graphics.FontFamily: libcore.util.NativeAllocationRegistry sBuilderRegistry>;

        $r4 = virtualinvoke $r3.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l1);

        r0.<android.graphics.FontFamily: java.lang.Runnable mNativeBuilderCleaner> = $r4;

        return;
    }

    private static native void nAddAxisValue(long, int, float);

    private static native boolean nAddFont(long, java.nio.ByteBuffer, int, int, int);

    private static native boolean nAddFontWeightStyle(long, java.nio.ByteBuffer, int, int, int);

    private static native long nCreateFamily(long);

    private static native long nGetBuilderReleaseFunc();

    private static native long nGetFamilyReleaseFunc();

    private static native long nInitBuilder(java.lang.String, int);

    public void abortCreation()
    {
        android.graphics.FontFamily r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;
        java.lang.Runnable $r2;

        r0 := @this: android.graphics.FontFamily;

        $l0 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r2 = r0.<android.graphics.FontFamily: java.lang.Runnable mNativeBuilderCleaner>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

        r0.<android.graphics.FontFamily: long mBuilderPtr> = 0L;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This FontFamily is already frozen or abandoned");

        throw $r1;
    }

    public boolean addFont(java.lang.String, int, android.graphics.fonts.FontVariationAxis[], int, int)
    {
        android.graphics.FontFamily r0;
        int i0, i1, i2, i4, $i9, i10;
        java.io.FileInputStream r1;
        long l3, $l5, $l7, $l8;
        android.graphics.fonts.FontVariationAxis r2;
        boolean z0;
        byte $b6;
        java.lang.IllegalStateException $r3;
        java.nio.channels.FileChannel$MapMode $r4;
        float $f0;
        java.lang.Throwable $r5, $r6, $r7, $r8;
        java.lang.String r9;
        android.graphics.fonts.FontVariationAxis[] r10;
        java.nio.channels.FileChannel r11;
        java.nio.MappedByteBuffer r12;

        r0 := @this: android.graphics.FontFamily;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r10 := @parameter2: android.graphics.fonts.FontVariationAxis[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $l5 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label22;

     label01:
        r1 = new java.io.FileInputStream;

     label02:
        specialinvoke r1.<java.io.FileInputStream: void <init>(java.lang.String)>(r9);

     label03:
        r11 = virtualinvoke r1.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        l3 = virtualinvoke r11.<java.nio.channels.FileChannel: long size()>();

        $r4 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r12 = virtualinvoke r11.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r4, 0L, l3);

     label04:
        if r10 == null goto label10;

     label05:
        i4 = lengthof r10;

     label06:
        i10 = 0;

     label07:
        if i10 >= i4 goto label10;

        r2 = r10[i10];

     label08:
        $l8 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $i9 = virtualinvoke r2.<android.graphics.fonts.FontVariationAxis: int getOpenTypeTagValue()>();

        $f0 = virtualinvoke r2.<android.graphics.fonts.FontVariationAxis: float getStyleValue()>();

        staticinvoke <android.graphics.FontFamily: void nAddAxisValue(long,int,float)>($l8, $i9, $f0);

     label09:
        i10 = i10 + 1;

        goto label07;

     label10:
        $l7 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        z0 = staticinvoke <android.graphics.FontFamily: boolean nAddFont(long,java.nio.ByteBuffer,int,int,int)>($l7, r12, i0, i1, i2);

     label11:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label12:
        return z0;

     label13:
        $r8 := @caughtexception;

     label14:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label15:
        goto label18;

     label16:
        $r5 := @caughtexception;

     label17:
        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label18:
        throw $r8;

     label19:
        $r6 := @caughtexception;

        goto label21;

     label20:
        $r7 := @caughtexception;

     label21:
        return 0;

     label22:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to call addFont after freezing.");

        throw $r3;

        catch java.io.IOException from label01 to label02 with label20;
        catch java.io.IOException from label02 to label03 with label19;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.io.IOException from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label18 to label19 with label19;
    }

    public boolean addFontFromAssetManager(android.content.res.AssetManager, java.lang.String, int, boolean, int, int, int, android.graphics.fonts.FontVariationAxis[])
    {
        android.graphics.FontFamily r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        android.graphics.fonts.FontVariationAxis[] r2;
        long $l4;
        byte $b5;
        java.lang.IllegalStateException $r3;
        java.nio.ByteBuffer $r4;
        java.lang.Throwable $r5;
        android.content.res.AssetManager r6;
        boolean z0, z1;

        r0 := @this: android.graphics.FontFamily;

        r6 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        r2 := @parameter7: android.graphics.fonts.FontVariationAxis[];

        $l4 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label4;

     label1:
        $r4 = staticinvoke <android.graphics.fonts.Font$Builder: java.nio.ByteBuffer createBuffer(android.content.res.AssetManager,java.lang.String,boolean,int)>(r6, r1, z0, i0);

        z1 = virtualinvoke r0.<android.graphics.FontFamily: boolean addFontFromBuffer(java.nio.ByteBuffer,int,android.graphics.fonts.FontVariationAxis[],int,int)>($r4, i1, r2, i2, i3);

     label2:
        return z1;

     label3:
        $r5 := @caughtexception;

        return 0;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to call addFontFromAsset after freezing.");

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean addFontFromBuffer(java.nio.ByteBuffer, int, android.graphics.fonts.FontVariationAxis[], int, int)
    {
        android.graphics.FontFamily r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, i3, $i8, i9;
        android.graphics.fonts.FontVariationAxis[] r2;
        android.graphics.fonts.FontVariationAxis r3;
        long $l4, $l6, $l7;
        byte $b5;
        java.lang.IllegalStateException $r4;
        boolean $z0;
        float $f0;

        r0 := @this: android.graphics.FontFamily;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r2 := @parameter2: android.graphics.fonts.FontVariationAxis[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $l4 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label3;

        if r2 == null goto label2;

        i3 = lengthof r2;

        i9 = 0;

     label1:
        if i9 >= i3 goto label2;

        r3 = r2[i9];

        $l7 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $i8 = virtualinvoke r3.<android.graphics.fonts.FontVariationAxis: int getOpenTypeTagValue()>();

        $f0 = virtualinvoke r3.<android.graphics.fonts.FontVariationAxis: float getStyleValue()>();

        staticinvoke <android.graphics.FontFamily: void nAddAxisValue(long,int,float)>($l7, $i8, $f0);

        i9 = i9 + 1;

        goto label1;

     label2:
        $l6 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $z0 = staticinvoke <android.graphics.FontFamily: boolean nAddFontWeightStyle(long,java.nio.ByteBuffer,int,int,int)>($l6, r1, i0, i1, i2);

        return $z0;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to call addFontWeightStyle after freezing.");

        throw $r4;
    }

    public boolean freeze()
    {
        android.graphics.FontFamily r0;
        byte $b0, $b2, $b4;
        java.lang.IllegalStateException $r1;
        long $l1, $l3, l5, l6;
        java.lang.Runnable $r2;
        libcore.util.NativeAllocationRegistry $r3;
        boolean z0;

        r0 := @this: android.graphics.FontFamily;

        l5 = r0.<android.graphics.FontFamily: long mBuilderPtr>;

        $b0 = l5 cmp 0L;

        if $b0 == 0 goto label4;

        $l1 = staticinvoke <android.graphics.FontFamily: long nCreateFamily(long)>(l5);

        r0.<android.graphics.FontFamily: long mNativePtr> = $l1;

        $r2 = r0.<android.graphics.FontFamily: java.lang.Runnable mNativeBuilderCleaner>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

        r0.<android.graphics.FontFamily: long mBuilderPtr> = 0L;

        l6 = r0.<android.graphics.FontFamily: long mNativePtr>;

        $b2 = l6 cmp 0L;

        if $b2 == 0 goto label1;

        $r3 = <android.graphics.FontFamily: libcore.util.NativeAllocationRegistry sFamilyRegistry>;

        virtualinvoke $r3.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l6);

     label1:
        $l3 = r0.<android.graphics.FontFamily: long mNativePtr>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;

     label4:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This FontFamily is already frozen");

        throw $r1;
    }
}
