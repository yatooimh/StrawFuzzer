public class android.graphics.HardwareRenderer extends java.lang.Object
{
    private static final java.lang.String CACHE_PATH_SHADERS;
    private static final java.lang.String CACHE_PATH_SKIASHADERS;
    public static final int FLAG_DUMP_ALL;
    public static final int FLAG_DUMP_FRAMESTATS;
    public static final int FLAG_DUMP_RESET;
    private static final java.lang.String LOG_TAG;
    public static final int SYNC_CONTEXT_IS_STOPPED;
    public static final int SYNC_FRAME_DROPPED;
    public static final int SYNC_LOST_SURFACE_REWARD_IF_FOUND;
    public static final int SYNC_OK;
    public static final int SYNC_REDRAW_REQUESTED;
    private boolean mForceDark;
    private boolean mIsWideGamut;
    private final long mNativeProxy;
    private boolean mOpaque;
    private android.graphics.HardwareRenderer$FrameRenderRequest mRenderRequest;
    protected android.graphics.RenderNode mRootNode;

    public void <init>()
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode r1, $r3;
        long l0, $l1, $l2, $l4;
        android.graphics.HardwareRenderer$FrameRenderRequest $r2;
        boolean $z1, $z2, $z3;
        byte $b3;
        java.lang.OutOfMemoryError $r4;
        android.graphics.HardwareRenderer$DestroyContextRunnable $r5;
        android.graphics.HardwareRenderer$ProcessInitializer $r7;

        r0 := @this: android.graphics.HardwareRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.HardwareRenderer: boolean mOpaque> = 1;

        r0.<android.graphics.HardwareRenderer: boolean mForceDark> = 0;

        r0.<android.graphics.HardwareRenderer: boolean mIsWideGamut> = 0;

        $r2 = new android.graphics.HardwareRenderer$FrameRenderRequest;

        specialinvoke $r2.<android.graphics.HardwareRenderer$FrameRenderRequest: void <init>(android.graphics.HardwareRenderer,android.graphics.HardwareRenderer$1)>(r0, null);

        r0.<android.graphics.HardwareRenderer: android.graphics.HardwareRenderer$FrameRenderRequest mRenderRequest> = $r2;

        $l1 = staticinvoke <android.graphics.HardwareRenderer: long nCreateRootRenderNode()>();

        r1 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode adopt(long)>($l1);

        r0.<android.graphics.HardwareRenderer: android.graphics.RenderNode mRootNode> = r1;

        virtualinvoke r1.<android.graphics.RenderNode: boolean setClipToBounds(boolean)>(0);

        $z1 = r0.<android.graphics.HardwareRenderer: boolean mOpaque>;

        $z3 = 1 ^ $z1;

        $z2 = r0.<android.graphics.HardwareRenderer: boolean mIsWideGamut>;

        $r3 = r0.<android.graphics.HardwareRenderer: android.graphics.RenderNode mRootNode>;

        $l2 = $r3.<android.graphics.RenderNode: long mNativeRenderNode>;

        l0 = staticinvoke <android.graphics.HardwareRenderer: long nCreateProxy(boolean,boolean,long)>($z3, $z2, $l2);

        r0.<android.graphics.HardwareRenderer: long mNativeProxy> = l0;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label1;

        $r5 = new android.graphics.HardwareRenderer$DestroyContextRunnable;

        specialinvoke $r5.<android.graphics.HardwareRenderer$DestroyContextRunnable: void <init>(long)>(l0);

        staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>(r0, $r5);

        $r7 = <android.graphics.HardwareRenderer$ProcessInitializer: android.graphics.HardwareRenderer$ProcessInitializer sInstance>;

        $l4 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        virtualinvoke $r7.<android.graphics.HardwareRenderer$ProcessInitializer: void init(long)>($l4);

        return;

     label1:
        $r4 = new java.lang.OutOfMemoryError;

        specialinvoke $r4.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Unable to create hardware renderer");

        throw $r4;
    }

    static android.graphics.HardwareRenderer$FrameRenderRequest access$000(android.graphics.HardwareRenderer)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.HardwareRenderer$FrameRenderRequest $r1;

        r0 := @parameter0: android.graphics.HardwareRenderer;

        $r1 = r0.<android.graphics.HardwareRenderer: android.graphics.HardwareRenderer$FrameRenderRequest mRenderRequest>;

        return $r1;
    }

    static void access$300(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.graphics.HardwareRenderer: void nDeleteProxy(long)>(l0);

        return;
    }

    static int access$500(long)
    {
        long l0;
        int $i1;

        l0 := @parameter0: long;

        $i1 = staticinvoke <android.graphics.HardwareRenderer: int nGetRenderThreadTid(long)>(l0);

        return $i1;
    }

    static void access$600()
    {
        staticinvoke <android.graphics.HardwareRenderer: void nRotateProcessStatsBuffer()>();

        return;
    }

    static void access$700(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.graphics.HardwareRenderer: void nSetProcessStatsBuffer(int)>(i0);

        return;
    }

    public static int copySurfaceInto(android.view.Surface, android.graphics.Rect, android.graphics.Bitmap)
    {
        android.view.Surface r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap r2;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        long $l4, $l6;

        r0 := @parameter0: android.view.Surface;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Bitmap;

        if r1 != null goto label1;

        $l6 = virtualinvoke r2.<android.graphics.Bitmap: long getNativeInstance()>();

        $i7 = staticinvoke <android.graphics.HardwareRenderer: int nCopySurfaceInto(android.view.Surface,int,int,int,int,long)>(r0, 0, 0, 0, 0, $l6);

        return $i7;

     label1:
        $i0 = r1.<android.graphics.Rect: int left>;

        $i1 = r1.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $l4 = virtualinvoke r2.<android.graphics.Bitmap: long getNativeInstance()>();

        $i5 = staticinvoke <android.graphics.HardwareRenderer: int nCopySurfaceInto(android.view.Surface,int,int,int,int,long)>(r0, $i0, $i1, $i2, $i3, $l4);

        return $i5;
    }

    public static android.graphics.Bitmap createHardwareBitmap(android.graphics.RenderNode, int, int)
    {
        android.graphics.RenderNode r0;
        int i0, i1;
        long $l2;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: android.graphics.RenderNode;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $r1 = staticinvoke <android.graphics.HardwareRenderer: android.graphics.Bitmap nCreateHardwareBitmap(long,int,int)>($l2, i0, i1);

        return $r1;
    }

    public static native void disableVsync();

    public static void invokeFunctor(long, boolean)
    {
        long l0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        staticinvoke <android.graphics.HardwareRenderer: void nInvokeFunctor(long,boolean)>(l0, z0);

        return;
    }

    static void invokePictureCapturedCallback(long, android.graphics.HardwareRenderer$PictureCapturedCallback)
    {
        long l0;
        android.graphics.HardwareRenderer$PictureCapturedCallback r0;
        android.graphics.Picture $r1;

        l0 := @parameter0: long;

        r0 := @parameter1: android.graphics.HardwareRenderer$PictureCapturedCallback;

        $r1 = new android.graphics.Picture;

        specialinvoke $r1.<android.graphics.Picture: void <init>(long)>(l0);

        interfaceinvoke r0.<android.graphics.HardwareRenderer$PictureCapturedCallback: void onPictureCaptured(android.graphics.Picture)>($r1);

        return;
    }

    private static native void nAddObserver(long, long);

    private static native void nAddRenderNode(long, long, boolean);

    private static native void nAllocateBuffers(long);

    private static native void nBuildLayer(long, long);

    private static native void nCancelLayerUpdate(long, long);

    private static native boolean nCopyLayerInto(long, long, long);

    private static native int nCopySurfaceInto(android.view.Surface, int, int, int, int, long);

    private static native android.graphics.Bitmap nCreateHardwareBitmap(long, int, int);

    private static native long nCreateProxy(boolean, boolean, long);

    private static native long nCreateRootRenderNode();

    private static native long nCreateTextureLayer(long);

    private static native void nDeleteProxy(long);

    private static native void nDestroy(long, long);

    private static native void nDestroyHardwareResources(long);

    private static native void nDetachSurfaceTexture(long, long);

    private static native void nDrawRenderNode(long, long);

    private static native void nDumpProfileInfo(long, java.io.FileDescriptor, int);

    private static native void nFence(long);

    private static native int nGetRenderThreadTid(long);

    private static native void nHackySetRTAnimationsEnabled(boolean);

    private static native void nInvokeFunctor(long, boolean);

    private static native boolean nLoadSystemProperties(long);

    private static native void nNotifyFramePending(long);

    private static native void nOverrideProperty(java.lang.String, java.lang.String);

    private static native boolean nPause(long);

    private static native void nPushLayerUpdate(long, long);

    private static native void nRegisterAnimatingRenderNode(long, long);

    private static native void nRegisterVectorDrawableAnimator(long, long);

    private static native void nRemoveObserver(long, long);

    private static native void nRemoveRenderNode(long, long);

    private static native void nRotateProcessStatsBuffer();

    private static native void nSetContentDrawBounds(long, int, int, int, int);

    private static native void nSetContextPriority(int);

    private static native void nSetDebuggingEnabled(boolean);

    private static native void nSetForceDark(long, boolean);

    private static native void nSetFrameCallback(long, android.graphics.HardwareRenderer$FrameDrawingCallback);

    private static native void nSetFrameCompleteCallback(long, android.graphics.HardwareRenderer$FrameCompleteCallback);

    private static native void nSetHighContrastText(boolean);

    private static native void nSetIsolatedProcess(boolean);

    private static native void nSetLightAlpha(long, float, float);

    private static native void nSetLightGeometry(long, float, float, float, float);

    private static native void nSetName(long, java.lang.String);

    private static native void nSetOpaque(long, boolean);

    private static native void nSetPictureCaptureCallback(long, android.graphics.HardwareRenderer$PictureCapturedCallback);

    private static native void nSetProcessStatsBuffer(int);

    private static native void nSetStopped(long, boolean);

    private static native void nSetSurface(long, android.view.Surface, boolean);

    private static native void nSetWideGamut(long, boolean);

    private static native void nStopDrawing(long);

    private static native int nSyncAndDrawFrame(long, long[], int);

    private static native void nTrimMemory(int);

    public static void overrideProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        staticinvoke <android.graphics.HardwareRenderer: void nOverrideProperty(java.lang.String,java.lang.String)>(r0, r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name and value must be non-null");

        throw $r2;
    }

    public static native void preload();

    public static void setContextPriority(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.graphics.HardwareRenderer: void nSetContextPriority(int)>(i0);

        return;
    }

    public static void setDebuggingEnabled(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <android.graphics.HardwareRenderer: void nSetDebuggingEnabled(boolean)>(z0);

        return;
    }

    public static void setFPSDivisor(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        z0 = 1;

        if i0 > 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <android.graphics.HardwareRenderer: void nHackySetRTAnimationsEnabled(boolean)>(z0);

        return;
    }

    public static void setHighContrastText(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <android.graphics.HardwareRenderer: void nSetHighContrastText(boolean)>(z0);

        return;
    }

    public static void setIsolatedProcess(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <android.graphics.HardwareRenderer: void nSetIsolatedProcess(boolean)>(z0);

        return;
    }

    public static void setPackageName(java.lang.String)
    {
        java.lang.String r0;
        android.graphics.HardwareRenderer$ProcessInitializer $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.graphics.HardwareRenderer$ProcessInitializer: android.graphics.HardwareRenderer$ProcessInitializer sInstance>;

        virtualinvoke $r1.<android.graphics.HardwareRenderer$ProcessInitializer: void setPackageName(java.lang.String)>(r0);

        return;
    }

    public static void setupDiskCache(java.io.File)
    {
        java.io.File r0, $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @parameter0: java.io.File;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "com.android.opengl.shaders_cache");

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "com.android.skia.shaders_cache");

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.graphics.HardwareRenderer: void setupShadersDiskCache(java.lang.String,java.lang.String)>($r2, $r4);

        return;
    }

    protected static native void setupShadersDiskCache(java.lang.String, java.lang.String);

    public static void trimMemory(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.graphics.HardwareRenderer: void nTrimMemory(int)>(i0);

        return;
    }

    private static void validateAlpha(float, java.lang.String)
    {
        float f0;
        java.lang.String r0, $r8;
        byte $b0, $b1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r7;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a valid alpha, ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not in the range of 0.0f to 1.0f");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private static void validateFinite(float, java.lang.String)
    {
        float f0;
        java.lang.String r0, $r7;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r6;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isFinite(float)>(f0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be finite, given=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private static void validatePositive(float, java.lang.String)
    {
        float f0;
        java.lang.String r0, $r7;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r6;
        byte $b0;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isFinite(float)>(f0);

        if $z0 == 0 goto label1;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a finite positive, given=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public void addObserver(android.graphics.HardwareRendererObserver)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.HardwareRendererObserver r1;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.HardwareRendererObserver;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.graphics.HardwareRendererObserver: long getNativeInstance()>();

        staticinvoke <android.graphics.HardwareRenderer: void nAddObserver(long,long)>($l0, $l1);

        return;
    }

    public void addRenderNode(android.graphics.RenderNode, boolean)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode r1;
        boolean z0;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.RenderNode;

        z0 := @parameter1: boolean;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l0 = r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.HardwareRenderer: void nAddRenderNode(long,long,boolean)>($l1, $l0, z0);

        return;
    }

    public void allocateBuffers()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nAllocateBuffers(long)>($l0);

        return;
    }

    public void buildLayer(android.graphics.RenderNode)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode r1;
        boolean $z0;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.RenderNode;

        $z0 = virtualinvoke r1.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z0 == 0 goto label1;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l0 = r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.HardwareRenderer: void nBuildLayer(long,long)>($l1, $l0);

     label1:
        return;
    }

    public void clearContent()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nDestroyHardwareResources(long)>($l0);

        return;
    }

    public boolean copyLayerInto(android.view.TextureLayer, android.graphics.Bitmap)
    {
        android.graphics.HardwareRenderer r0;
        android.view.TextureLayer r1;
        android.graphics.Bitmap r2;
        long $l0, $l1, $l2;
        boolean $z0;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.view.TextureLayer;

        r2 := @parameter1: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.view.TextureLayer: long getDeferredLayerUpdater()>();

        $l2 = virtualinvoke r2.<android.graphics.Bitmap: long getNativeInstance()>();

        $z0 = staticinvoke <android.graphics.HardwareRenderer: boolean nCopyLayerInto(long,long,long)>($l0, $l1, $l2);

        return $z0;
    }

    public android.graphics.HardwareRenderer$FrameRenderRequest createRenderRequest()
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.HardwareRenderer$FrameRenderRequest $r1, $r2;

        r0 := @this: android.graphics.HardwareRenderer;

        $r1 = r0.<android.graphics.HardwareRenderer: android.graphics.HardwareRenderer$FrameRenderRequest mRenderRequest>;

        staticinvoke <android.graphics.HardwareRenderer$FrameRenderRequest: void access$200(android.graphics.HardwareRenderer$FrameRenderRequest)>($r1);

        $r2 = r0.<android.graphics.HardwareRenderer: android.graphics.HardwareRenderer$FrameRenderRequest mRenderRequest>;

        return $r2;
    }

    public android.view.TextureLayer createTextureLayer()
    {
        android.graphics.HardwareRenderer r0;
        long $l0, $l1;
        android.view.TextureLayer $r1;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l1 = staticinvoke <android.graphics.HardwareRenderer: long nCreateTextureLayer(long)>($l0);

        $r1 = staticinvoke <android.view.TextureLayer: android.view.TextureLayer adoptTextureLayer(android.graphics.HardwareRenderer,long)>(r0, $l1);

        return $r1;
    }

    public void destroy()
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode $r1;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $r1 = r0.<android.graphics.HardwareRenderer: android.graphics.RenderNode mRootNode>;

        $l0 = $r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.HardwareRenderer: void nDestroy(long,long)>($l1, $l0);

        return;
    }

    public void detachSurfaceTexture(long)
    {
        android.graphics.HardwareRenderer r0;
        long l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        l0 := @parameter0: long;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nDetachSurfaceTexture(long,long)>($l1, l0);

        return;
    }

    public void drawRenderNode(android.graphics.RenderNode)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode r1;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.RenderNode;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l0 = r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.HardwareRenderer: void nDrawRenderNode(long,long)>($l1, $l0);

        return;
    }

    public void dumpProfileInfo(java.io.FileDescriptor, int)
    {
        android.graphics.HardwareRenderer r0;
        java.io.FileDescriptor r1;
        int i0;
        long $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: java.io.FileDescriptor;

        i0 := @parameter1: int;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nDumpProfileInfo(long,java.io.FileDescriptor,int)>($l1, r1, i0);

        return;
    }

    public void fence()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nFence(long)>($l0);

        return;
    }

    public boolean isOpaque()
    {
        android.graphics.HardwareRenderer r0;
        boolean $z0;

        r0 := @this: android.graphics.HardwareRenderer;

        $z0 = r0.<android.graphics.HardwareRenderer: boolean mOpaque>;

        return $z0;
    }

    public boolean isWideGamut()
    {
        android.graphics.HardwareRenderer r0;
        boolean $z0;

        r0 := @this: android.graphics.HardwareRenderer;

        $z0 = r0.<android.graphics.HardwareRenderer: boolean mIsWideGamut>;

        return $z0;
    }

    public boolean loadSystemProperties()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $z0 = staticinvoke <android.graphics.HardwareRenderer: boolean nLoadSystemProperties(long)>($l0);

        return $z0;
    }

    public void notifyFramePending()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nNotifyFramePending(long)>($l0);

        return;
    }

    public void onLayerDestroyed(android.view.TextureLayer)
    {
        android.graphics.HardwareRenderer r0;
        android.view.TextureLayer r1;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.view.TextureLayer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.view.TextureLayer: long getDeferredLayerUpdater()>();

        staticinvoke <android.graphics.HardwareRenderer: void nCancelLayerUpdate(long,long)>($l0, $l1);

        return;
    }

    public boolean pause()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $z0 = staticinvoke <android.graphics.HardwareRenderer: boolean nPause(long)>($l0);

        return $z0;
    }

    public void pushLayerUpdate(android.view.TextureLayer)
    {
        android.graphics.HardwareRenderer r0;
        android.view.TextureLayer r1;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.view.TextureLayer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.view.TextureLayer: long getDeferredLayerUpdater()>();

        staticinvoke <android.graphics.HardwareRenderer: void nPushLayerUpdate(long,long)>($l0, $l1);

        return;
    }

    public void registerAnimatingRenderNode(android.graphics.RenderNode)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode r1, $r2;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.RenderNode;

        $r2 = r0.<android.graphics.HardwareRenderer: android.graphics.RenderNode mRootNode>;

        $l1 = $r2.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.HardwareRenderer: void nRegisterAnimatingRenderNode(long,long)>($l1, $l0);

        return;
    }

    public void registerVectorDrawableAnimator(android.view.NativeVectorDrawableAnimator)
    {
        android.graphics.HardwareRenderer r0;
        android.view.NativeVectorDrawableAnimator r1;
        android.graphics.RenderNode $r2;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.view.NativeVectorDrawableAnimator;

        $r2 = r0.<android.graphics.HardwareRenderer: android.graphics.RenderNode mRootNode>;

        $l0 = $r2.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l1 = interfaceinvoke r1.<android.view.NativeVectorDrawableAnimator: long getAnimatorNativePtr()>();

        staticinvoke <android.graphics.HardwareRenderer: void nRegisterVectorDrawableAnimator(long,long)>($l0, $l1);

        return;
    }

    public void removeObserver(android.graphics.HardwareRendererObserver)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.HardwareRendererObserver r1;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.HardwareRendererObserver;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.graphics.HardwareRendererObserver: long getNativeInstance()>();

        staticinvoke <android.graphics.HardwareRenderer: void nRemoveObserver(long,long)>($l0, $l1);

        return;
    }

    public void removeRenderNode(android.graphics.RenderNode)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode r1;
        long $l0, $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.RenderNode;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $l0 = r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.HardwareRenderer: void nRemoveRenderNode(long,long)>($l1, $l0);

        return;
    }

    public void setContentDrawBounds(int, int, int, int)
    {
        android.graphics.HardwareRenderer r0;
        int i0, i1, i2, i3;
        long $l4;

        r0 := @this: android.graphics.HardwareRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetContentDrawBounds(long,int,int,int,int)>($l4, i0, i1, i2, i3);

        return;
    }

    public void setContentRoot(android.graphics.RenderNode)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.RenderNode r1, $r3, $r4;
        android.graphics.RecordingCanvas r2;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.RenderNode;

        $r3 = r0.<android.graphics.HardwareRenderer: android.graphics.RenderNode mRootNode>;

        r2 = virtualinvoke $r3.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording()>();

        if r1 == null goto label1;

        virtualinvoke r2.<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>(r1);

     label1:
        $r4 = r0.<android.graphics.HardwareRenderer: android.graphics.RenderNode mRootNode>;

        virtualinvoke $r4.<android.graphics.RenderNode: void endRecording()>();

        return;
    }

    public boolean setForceDark(boolean)
    {
        android.graphics.HardwareRenderer r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.graphics.HardwareRenderer: boolean mForceDark>;

        if $z1 == z0 goto label1;

        r0.<android.graphics.HardwareRenderer: boolean mForceDark> = z0;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetForceDark(long,boolean)>($l0, z0);

        return 1;

     label1:
        return 0;
    }

    public void setFrameCallback(android.graphics.HardwareRenderer$FrameDrawingCallback)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.HardwareRenderer$FrameDrawingCallback r1;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.HardwareRenderer$FrameDrawingCallback;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetFrameCallback(long,android.graphics.HardwareRenderer$FrameDrawingCallback)>($l0, r1);

        return;
    }

    public void setFrameCompleteCallback(android.graphics.HardwareRenderer$FrameCompleteCallback)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.HardwareRenderer$FrameCompleteCallback r1;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.HardwareRenderer$FrameCompleteCallback;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetFrameCompleteCallback(long,android.graphics.HardwareRenderer$FrameCompleteCallback)>($l0, r1);

        return;
    }

    public void setLightSourceAlpha(float, float)
    {
        android.graphics.HardwareRenderer r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        staticinvoke <android.graphics.HardwareRenderer: void validateAlpha(float,java.lang.String)>(f0, "ambientShadowAlpha");

        staticinvoke <android.graphics.HardwareRenderer: void validateAlpha(float,java.lang.String)>(f1, "spotShadowAlpha");

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetLightAlpha(long,float,float)>($l0, f0, f1);

        return;
    }

    public void setLightSourceGeometry(float, float, float, float)
    {
        android.graphics.HardwareRenderer r0;
        float f0, f1, f2, f3;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        staticinvoke <android.graphics.HardwareRenderer: void validateFinite(float,java.lang.String)>(f0, "lightX");

        staticinvoke <android.graphics.HardwareRenderer: void validateFinite(float,java.lang.String)>(f1, "lightY");

        staticinvoke <android.graphics.HardwareRenderer: void validatePositive(float,java.lang.String)>(f2, "lightZ");

        staticinvoke <android.graphics.HardwareRenderer: void validatePositive(float,java.lang.String)>(f3, "lightRadius");

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetLightGeometry(long,float,float,float,float)>($l0, f0, f1, f2, f3);

        return;
    }

    public void setName(java.lang.String)
    {
        android.graphics.HardwareRenderer r0;
        java.lang.String r1;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetName(long,java.lang.String)>($l0, r1);

        return;
    }

    public void setOpaque(boolean)
    {
        android.graphics.HardwareRenderer r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.graphics.HardwareRenderer: boolean mOpaque>;

        if $z1 == z0 goto label1;

        r0.<android.graphics.HardwareRenderer: boolean mOpaque> = z0;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetOpaque(long,boolean)>($l0, z0);

     label1:
        return;
    }

    public void setPictureCaptureCallback(android.graphics.HardwareRenderer$PictureCapturedCallback)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.HardwareRenderer$PictureCapturedCallback r1;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.HardwareRenderer$PictureCapturedCallback;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetPictureCaptureCallback(long,android.graphics.HardwareRenderer$PictureCapturedCallback)>($l0, r1);

        return;
    }

    public void setStopped(boolean)
    {
        android.graphics.HardwareRenderer r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetStopped(long,boolean)>($l0, z0);

        return;
    }

    public void setSurface(android.view.Surface)
    {
        android.graphics.HardwareRenderer r0;
        android.view.Surface r1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.view.Surface;

        virtualinvoke r0.<android.graphics.HardwareRenderer: void setSurface(android.view.Surface,boolean)>(r1, 0);

        return;
    }

    public void setSurface(android.view.Surface, boolean)
    {
        android.graphics.HardwareRenderer r0;
        android.view.Surface r1;
        boolean z0, $z1;
        long $l0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.view.Surface;

        z0 := @parameter1: boolean;

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is invalid. surface.isValid() == false.");

        throw $r2;

     label2:
        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetSurface(long,android.view.Surface,boolean)>($l0, r1, z0);

        return;
    }

    public void setWideGamut(boolean)
    {
        android.graphics.HardwareRenderer r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        z0 := @parameter0: boolean;

        r0.<android.graphics.HardwareRenderer: boolean mIsWideGamut> = z0;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetWideGamut(long,boolean)>($l0, z0);

        return;
    }

    public void start()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetStopped(long,boolean)>($l0, 0);

        return;
    }

    public void stop()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nSetStopped(long,boolean)>($l0, 1);

        return;
    }

    public void stopDrawing()
    {
        android.graphics.HardwareRenderer r0;
        long $l0;

        r0 := @this: android.graphics.HardwareRenderer;

        $l0 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        staticinvoke <android.graphics.HardwareRenderer: void nStopDrawing(long)>($l0);

        return;
    }

    public int syncAndDrawFrame(android.graphics.FrameInfo)
    {
        android.graphics.HardwareRenderer r0;
        android.graphics.FrameInfo r1;
        long[] $r2, $r3;
        int $i0, $i2;
        long $l1;

        r0 := @this: android.graphics.HardwareRenderer;

        r1 := @parameter0: android.graphics.FrameInfo;

        $l1 = r0.<android.graphics.HardwareRenderer: long mNativeProxy>;

        $r3 = r1.<android.graphics.FrameInfo: long[] frameInfo>;

        $r2 = r1.<android.graphics.FrameInfo: long[] frameInfo>;

        $i0 = lengthof $r2;

        $i2 = staticinvoke <android.graphics.HardwareRenderer: int nSyncAndDrawFrame(long,long[],int)>($l1, $r3, $i0);

        return $i2;
    }

    public static void <clinit>()
    {
        <android.graphics.HardwareRenderer: int SYNC_REDRAW_REQUESTED> = 1;

        <android.graphics.HardwareRenderer: int SYNC_OK> = 0;

        <android.graphics.HardwareRenderer: int SYNC_LOST_SURFACE_REWARD_IF_FOUND> = 2;

        <android.graphics.HardwareRenderer: int SYNC_FRAME_DROPPED> = 8;

        <android.graphics.HardwareRenderer: int SYNC_CONTEXT_IS_STOPPED> = 4;

        <android.graphics.HardwareRenderer: java.lang.String LOG_TAG> = "HardwareRenderer";

        <android.graphics.HardwareRenderer: int FLAG_DUMP_RESET> = 2;

        <android.graphics.HardwareRenderer: int FLAG_DUMP_FRAMESTATS> = 1;

        <android.graphics.HardwareRenderer: int FLAG_DUMP_ALL> = 1;

        <android.graphics.HardwareRenderer: java.lang.String CACHE_PATH_SKIASHADERS> = "com.android.skia.shaders_cache";

        <android.graphics.HardwareRenderer: java.lang.String CACHE_PATH_SHADERS> = "com.android.opengl.shaders_cache";

        return;
    }
}
