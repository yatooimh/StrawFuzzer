public final class android.graphics.ImageDecoder extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final int ALLOCATOR_DEFAULT;
    public static final int ALLOCATOR_HARDWARE;
    public static final int ALLOCATOR_SHARED_MEMORY;
    public static final int ALLOCATOR_SOFTWARE;
    public static final int ERROR_SOURCE_ERROR;
    public static final int ERROR_SOURCE_EXCEPTION;
    public static final int ERROR_SOURCE_INCOMPLETE;
    public static final int MEMORY_POLICY_DEFAULT;
    public static final int MEMORY_POLICY_LOW_RAM;
    public static int sApiLevel;
    private int mAllocator;
    private final boolean mAnimated;
    private android.content.res.AssetFileDescriptor mAssetFd;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.util.concurrent.atomic.AtomicBoolean mClosed;
    private boolean mConserveMemory;
    private android.graphics.Rect mCropRect;
    private boolean mDecodeAsAlphaMask;
    private android.graphics.ColorSpace mDesiredColorSpace;
    private int mDesiredHeight;
    private int mDesiredWidth;
    private final int mHeight;
    private java.io.InputStream mInputStream;
    private final boolean mIsNinePatch;
    private boolean mMutable;
    private long mNativePtr;
    private android.graphics.ImageDecoder$OnPartialImageListener mOnPartialImageListener;
    private android.graphics.Rect mOutPaddingRect;
    private boolean mOwnsInputStream;
    private android.graphics.PostProcessor mPostProcessor;
    private android.graphics.ImageDecoder$Source mSource;
    private byte[] mTempStorage;
    private boolean mUnpremultipliedRequired;
    private final int mWidth;

    private void <init>(long, int, int, boolean, boolean)
    {
        android.graphics.ImageDecoder r0;
        long l0;
        int i1, i2;
        boolean z0, z1;
        dalvik.system.CloseGuard r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: android.graphics.ImageDecoder;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.ImageDecoder: int mAllocator> = 0;

        r0.<android.graphics.ImageDecoder: boolean mUnpremultipliedRequired> = 0;

        r0.<android.graphics.ImageDecoder: boolean mMutable> = 0;

        r0.<android.graphics.ImageDecoder: boolean mConserveMemory> = 0;

        r0.<android.graphics.ImageDecoder: boolean mDecodeAsAlphaMask> = 0;

        r0.<android.graphics.ImageDecoder: android.graphics.ColorSpace mDesiredColorSpace> = null;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.graphics.ImageDecoder: java.util.concurrent.atomic.AtomicBoolean mClosed> = $r2;

        r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.graphics.ImageDecoder: dalvik.system.CloseGuard mCloseGuard> = r1;

        r0.<android.graphics.ImageDecoder: long mNativePtr> = l0;

        r0.<android.graphics.ImageDecoder: int mWidth> = i1;

        r0.<android.graphics.ImageDecoder: int mHeight> = i2;

        r0.<android.graphics.ImageDecoder: int mDesiredWidth> = i1;

        r0.<android.graphics.ImageDecoder: int mDesiredHeight> = i2;

        r0.<android.graphics.ImageDecoder: boolean mAnimated> = z0;

        r0.<android.graphics.ImageDecoder: boolean mIsNinePatch> = z1;

        virtualinvoke r1.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    static android.graphics.ImageDecoder access$100(byte[], int, int, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        byte[] r0;
        int i0, i1;
        boolean z0;
        android.graphics.ImageDecoder$Source r1;
        android.graphics.ImageDecoder $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: android.graphics.ImageDecoder$Source;

        $r2 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder nCreate(byte[],int,int,boolean,android.graphics.ImageDecoder$Source)>(r0, i0, i1, z0, r1);

        return $r2;
    }

    static boolean access$1000(android.graphics.ImageDecoder)
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @parameter0: android.graphics.ImageDecoder;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mAnimated>;

        return $z0;
    }

    static android.graphics.ColorSpace access$1100(android.graphics.ImageDecoder)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ColorSpace $r1;

        r0 := @parameter0: android.graphics.ImageDecoder;

        $r1 = specialinvoke r0.<android.graphics.ImageDecoder: android.graphics.ColorSpace getColorSpace()>();

        return $r1;
    }

    static android.graphics.ImageDecoder access$200(java.nio.ByteBuffer, int, int, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        java.nio.ByteBuffer r0;
        int i0, i1;
        boolean z0;
        android.graphics.ImageDecoder$Source r1;
        android.graphics.ImageDecoder $r2;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: android.graphics.ImageDecoder$Source;

        $r2 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder nCreate(java.nio.ByteBuffer,int,int,boolean,android.graphics.ImageDecoder$Source)>(r0, i0, i1, z0, r1);

        return $r2;
    }

    static android.graphics.ImageDecoder access$300(java.io.InputStream, boolean, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        java.io.InputStream r0;
        boolean z0, z1;
        android.graphics.ImageDecoder$Source r1;
        android.graphics.ImageDecoder $r2;

        r0 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: android.graphics.ImageDecoder$Source;

        $r2 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder createFromStream(java.io.InputStream,boolean,boolean,android.graphics.ImageDecoder$Source)>(r0, z0, z1, r1);

        return $r2;
    }

    static android.graphics.ImageDecoder access$400(android.content.res.AssetFileDescriptor, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        android.content.res.AssetFileDescriptor r0;
        boolean z0;
        android.graphics.ImageDecoder$Source r1;
        android.graphics.ImageDecoder $r2;

        r0 := @parameter0: android.content.res.AssetFileDescriptor;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.graphics.ImageDecoder$Source;

        $r2 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder createFromAssetFileDescriptor(android.content.res.AssetFileDescriptor,boolean,android.graphics.ImageDecoder$Source)>(r0, z0, r1);

        return $r2;
    }

    static android.graphics.ImageDecoder access$500(android.content.res.AssetManager$AssetInputStream, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        boolean z0;
        android.graphics.ImageDecoder$Source r1;
        android.graphics.ImageDecoder $r2;

        r0 := @parameter0: android.content.res.AssetManager$AssetInputStream;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.graphics.ImageDecoder$Source;

        $r2 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder createFromAsset(android.content.res.AssetManager$AssetInputStream,boolean,android.graphics.ImageDecoder$Source)>(r0, z0, r1);

        return $r2;
    }

    static android.graphics.ImageDecoder access$600(java.io.File, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        java.io.File r0;
        boolean z0;
        android.graphics.ImageDecoder$Source r1;
        android.graphics.ImageDecoder $r2;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.graphics.ImageDecoder$Source;

        $r2 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder createFromFile(java.io.File,boolean,android.graphics.ImageDecoder$Source)>(r0, z0, r1);

        return $r2;
    }

    static int access$700(android.graphics.ImageDecoder)
    {
        android.graphics.ImageDecoder r0;
        int $i0;

        r0 := @parameter0: android.graphics.ImageDecoder;

        $i0 = r0.<android.graphics.ImageDecoder: int mWidth>;

        return $i0;
    }

    static int access$800(android.graphics.ImageDecoder)
    {
        android.graphics.ImageDecoder r0;
        int $i0;

        r0 := @parameter0: android.graphics.ImageDecoder;

        $i0 = r0.<android.graphics.ImageDecoder: int mHeight>;

        return $i0;
    }

    static java.lang.String access$900(android.graphics.ImageDecoder)
    {
        android.graphics.ImageDecoder r0;
        java.lang.String $r1;

        r0 := @parameter0: android.graphics.ImageDecoder;

        $r1 = specialinvoke r0.<android.graphics.ImageDecoder: java.lang.String getMimeType()>();

        return $r1;
    }

    private void callHeaderDecoded(android.graphics.ImageDecoder$OnHeaderDecodedListener, android.graphics.ImageDecoder$Source)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$Source r1;
        android.graphics.ImageDecoder$ImageInfo $r3;
        java.lang.Throwable $r5;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r7;

        r0 := @this: android.graphics.ImageDecoder;

        r7 := @parameter0: android.graphics.ImageDecoder$OnHeaderDecodedListener;

        r1 := @parameter1: android.graphics.ImageDecoder$Source;

        if r7 == null goto label4;

        $r3 = new android.graphics.ImageDecoder$ImageInfo;

        specialinvoke $r3.<android.graphics.ImageDecoder$ImageInfo: void <init>(android.graphics.ImageDecoder,android.graphics.ImageDecoder$1)>(r0, null);

     label1:
        interfaceinvoke r7.<android.graphics.ImageDecoder$OnHeaderDecodedListener: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>(r0, $r3, r1);

     label2:
        staticinvoke <android.graphics.ImageDecoder$ImageInfo: android.graphics.ImageDecoder access$1302(android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder)>($r3, null);

        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.graphics.ImageDecoder$ImageInfo: android.graphics.ImageDecoder access$1302(android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder)>($r3, null);

        throw $r5;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean checkForExtended()
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ColorSpace r1, $r3, $r5, $r6;
        android.graphics.ColorSpace$Named $r2, $r4;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        r1 = r0.<android.graphics.ImageDecoder: android.graphics.ColorSpace mDesiredColorSpace>;

        z0 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named EXTENDED_SRGB>;

        $r3 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r2);

        if r1 == $r3 goto label2;

        $r5 = r0.<android.graphics.ImageDecoder: android.graphics.ColorSpace mDesiredColorSpace>;

        $r4 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named LINEAR_EXTENDED_SRGB>;

        $r6 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r4);

        if $r5 != $r6 goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private void checkState(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0, $z1, $z2, $z3;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1, $r3, $r4, $r5;
        android.graphics.Rect $r2;
        int $i2, $i3, $i4;
        android.graphics.PostProcessor $r6;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label6;

        $i3 = r0.<android.graphics.ImageDecoder: int mDesiredWidth>;

        $i2 = r0.<android.graphics.ImageDecoder: int mDesiredHeight>;

        $r2 = r0.<android.graphics.ImageDecoder: android.graphics.Rect mCropRect>;

        staticinvoke <android.graphics.ImageDecoder: void checkSubset(int,int,android.graphics.Rect)>($i3, $i2, $r2);

        if z0 != 0 goto label3;

        $i4 = r0.<android.graphics.ImageDecoder: int mAllocator>;

        if $i4 != 3 goto label3;

        $z2 = r0.<android.graphics.ImageDecoder: boolean mMutable>;

        if $z2 != 0 goto label2;

        $z3 = r0.<android.graphics.ImageDecoder: boolean mDecodeAsAlphaMask>;

        if $z3 != 0 goto label1;

        goto label3;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot make HARDWARE Alpha mask Bitmap!");

        throw $r5;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot make mutable HARDWARE Bitmap!");

        throw $r4;

     label3:
        $r6 = r0.<android.graphics.ImageDecoder: android.graphics.PostProcessor mPostProcessor>;

        if $r6 == null goto label5;

        $z1 = r0.<android.graphics.ImageDecoder: boolean mUnpremultipliedRequired>;

        if $z1 != 0 goto label4;

        goto label5;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot draw to unpremultiplied pixels!");

        throw $r3;

     label5:
        return;

     label6:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use closed ImageDecoder!");

        throw $r1;
    }

    private static void checkSubset(int, int, android.graphics.Rect)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Rect r0;
        java.lang.StringBuilder $r1, $r14;
        java.lang.IllegalStateException $r5, $r16;
        java.lang.String $r6, $r17;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Rect;

        if r0 != null goto label1;

        return;

     label1:
        $i2 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        if $i2 <= 0 goto label3;

        $i3 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        if $i3 <= 0 goto label3;

        $i4 = r0.<android.graphics.Rect: int left>;

        if $i4 < 0 goto label2;

        $i5 = r0.<android.graphics.Rect: int top>;

        if $i5 < 0 goto label2;

        $i6 = r0.<android.graphics.Rect: int right>;

        if $i6 > i0 goto label2;

        $i7 = r0.<android.graphics.Rect: int bottom>;

        if $i7 > i1 goto label2;

        return;

     label2:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subset ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not contained by scaled image bounds: (");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subset ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty/unsorted");

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private int computeDensity(android.graphics.ImageDecoder$Source)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$Source r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.content.res.Resources r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        boolean $z0, $z1;
        android.util.DisplayMetrics $r3;
        android.graphics.PostProcessor $r4;

        r0 := @this: android.graphics.ImageDecoder;

        r1 := @parameter0: android.graphics.ImageDecoder$Source;

        $z0 = specialinvoke r0.<android.graphics.ImageDecoder: boolean requestedResize()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r1.<android.graphics.ImageDecoder$Source: int getDensity()>();

        if i0 != 0 goto label2;

        return i0;

     label2:
        $z1 = r0.<android.graphics.ImageDecoder: boolean mIsNinePatch>;

        if $z1 == 0 goto label3;

        $r4 = r0.<android.graphics.ImageDecoder: android.graphics.PostProcessor mPostProcessor>;

        if $r4 != null goto label3;

        return i0;

     label3:
        r2 = virtualinvoke r1.<android.graphics.ImageDecoder$Source: android.content.res.Resources getResources()>();

        if r2 == null goto label4;

        $r3 = virtualinvoke r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i9 = $r3.<android.util.DisplayMetrics: int noncompatDensityDpi>;

        if $i9 != i0 goto label4;

        return i0;

     label4:
        i1 = virtualinvoke r1.<android.graphics.ImageDecoder$Source: int computeDstDensity()>();

        if i0 != i1 goto label5;

        return i0;

     label5:
        if i0 >= i1 goto label6;

        $i8 = <android.graphics.ImageDecoder: int sApiLevel>;

        if $i8 < 28 goto label6;

        return i0;

     label6:
        $f2 = (float) i1;

        $f1 = (float) i0;

        f0 = $f2 / $f1;

        $i2 = r0.<android.graphics.ImageDecoder: int mWidth>;

        $f3 = (float) $i2;

        $f4 = $f3 * f0;

        $f5 = $f4 + 0.5F;

        $i3 = (int) $f5;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 1);

        $i5 = r0.<android.graphics.ImageDecoder: int mHeight>;

        $f6 = (float) $i5;

        $f7 = $f6 * f0;

        $f8 = $f7 + 0.5F;

        $i6 = (int) $f8;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i6, 1);

        virtualinvoke r0.<android.graphics.ImageDecoder: void setTargetSize(int,int)>($i4, $i7);

        return i1;
    }

    private static android.graphics.ImageDecoder createFromAsset(android.content.res.AssetManager$AssetInputStream, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        android.content.res.AssetManager$AssetInputStream r0;
        boolean z0;
        long $l0;
        java.lang.Throwable $r1;
        android.graphics.ImageDecoder$Source r2;
        android.graphics.ImageDecoder r3;

        r0 := @parameter0: android.content.res.AssetManager$AssetInputStream;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.graphics.ImageDecoder$Source;

     label1:
        $l0 = virtualinvoke r0.<android.content.res.AssetManager$AssetInputStream: long getNativeAsset()>();

        r3 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder nCreate(long,boolean,android.graphics.ImageDecoder$Source)>($l0, z0, r2);

     label2:
        if r3 != null goto label3;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        goto label4;

     label3:
        r3.<android.graphics.ImageDecoder: java.io.InputStream mInputStream> = r0;

        r3.<android.graphics.ImageDecoder: boolean mOwnsInputStream> = 1;

     label4:
        return r3;

     label5:
        $r1 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        goto label6;

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    private static android.graphics.ImageDecoder createFromAssetFileDescriptor(android.content.res.AssetFileDescriptor, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        android.content.res.AssetFileDescriptor r0;
        boolean z0;
        java.io.FileDescriptor r1;
        long l0;
        java.io.FileNotFoundException $r2;
        int $i1;
        java.lang.Throwable $r3, $r4;
        android.graphics.ImageDecoder$Source r5;
        android.graphics.ImageDecoder r6, r7;
        java.io.FileInputStream r10;

        r0 := @parameter0: android.content.res.AssetFileDescriptor;

        z0 := @parameter1: boolean;

        r5 := @parameter2: android.graphics.ImageDecoder$Source;

        if r0 == null goto label11;

        r1 = virtualinvoke r0.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        l0 = virtualinvoke r0.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

     label01:
        $i1 = <android.system.OsConstants: int SEEK_SET>;

        staticinvoke <android.system.Os: long lseek(java.io.FileDescriptor,long,int)>(r1, l0, $i1);

        r6 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder nCreate(java.io.FileDescriptor,boolean,android.graphics.ImageDecoder$Source)>(r1, z0, r5);

     label02:
        r7 = r6;

        goto label06;

     label03:
        $r4 := @caughtexception;

        goto label09;

     label04:
        $r3 := @caughtexception;

     label05:
        r10 = new java.io.FileInputStream;

        specialinvoke r10.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>(r1);

        r7 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder createFromStream(java.io.InputStream,boolean,boolean,android.graphics.ImageDecoder$Source)>(r10, 1, z0, r5);

     label06:
        if r7 != null goto label07;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        goto label08;

     label07:
        r7.<android.graphics.ImageDecoder: android.content.res.AssetFileDescriptor mAssetFd> = r0;

     label08:
        return r7;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        goto label10;

     label10:
        throw $r4;

     label11:
        $r2 = new java.io.FileNotFoundException;

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>()>();

        throw $r2;

        catch android.system.ErrnoException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
    }

    private static android.graphics.ImageDecoder createFromFile(java.io.File, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        boolean z0;
        java.io.FileInputStream $r0;
        int $i0;
        java.lang.Throwable $r1, $r3;
        android.graphics.ImageDecoder $r2, r8;
        java.io.File r4;
        android.graphics.ImageDecoder$Source r5;
        java.io.FileDescriptor r7;

        r4 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        r5 := @parameter2: android.graphics.ImageDecoder$Source;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r4);

        r7 = virtualinvoke $r0.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

     label1:
        $i0 = <android.system.OsConstants: int SEEK_CUR>;

        staticinvoke <android.system.Os: long lseek(java.io.FileDescriptor,long,int)>(r7, 0L, $i0);

     label2:
        r8 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder nCreate(java.io.FileDescriptor,boolean,android.graphics.ImageDecoder$Source)>(r7, z0, r5);

     label3:
        if r8 != null goto label4;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r0);

        goto label5;

     label4:
        r8.<android.graphics.ImageDecoder: java.io.InputStream mInputStream> = $r0;

        r8.<android.graphics.ImageDecoder: boolean mOwnsInputStream> = 1;

     label5:
        return r8;

     label6:
        $r3 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r0);

        goto label7;

     label7:
        throw $r3;

     label8:
        $r1 := @caughtexception;

        $r2 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder createFromStream(java.io.InputStream,boolean,boolean,android.graphics.ImageDecoder$Source)>($r0, 1, z0, r5);

        return $r2;

        catch android.system.ErrnoException from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label6;
    }

    private static android.graphics.ImageDecoder createFromStream(java.io.InputStream, boolean, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        java.io.InputStream r0;
        boolean z0, z1;
        byte[] r1;
        java.lang.Throwable $r2;
        android.graphics.ImageDecoder$Source r3;
        android.graphics.ImageDecoder r4;

        r0 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r3 := @parameter3: android.graphics.ImageDecoder$Source;

        r1 = newarray (byte)[16384];

     label1:
        r4 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder nCreate(java.io.InputStream,byte[],boolean,android.graphics.ImageDecoder$Source)>(r0, r1, z1, r3);

     label2:
        if r4 != null goto label3;

        if z0 == 0 goto label4;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        goto label4;

     label3:
        r4.<android.graphics.ImageDecoder: java.io.InputStream mInputStream> = r0;

        r4.<android.graphics.ImageDecoder: boolean mOwnsInputStream> = z0;

        r4.<android.graphics.ImageDecoder: byte[] mTempStorage> = r1;

     label4:
        return r4;

     label5:
        $r2 := @caughtexception;

        if z0 == 0 goto label6;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        goto label6;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public static android.graphics.ImageDecoder$Source createSource(android.content.ContentResolver, android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.graphics.ImageDecoder$ContentResolverSource $r2;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        $r2 = new android.graphics.ImageDecoder$ContentResolverSource;

        specialinvoke $r2.<android.graphics.ImageDecoder$ContentResolverSource: void <init>(android.content.ContentResolver,android.net.Uri,android.content.res.Resources)>(r0, r1, null);

        return $r2;
    }

    public static android.graphics.ImageDecoder$Source createSource(android.content.ContentResolver, android.net.Uri, android.content.res.Resources)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.content.res.Resources r2;
        android.graphics.ImageDecoder$ContentResolverSource $r3;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.content.res.Resources;

        $r3 = new android.graphics.ImageDecoder$ContentResolverSource;

        specialinvoke $r3.<android.graphics.ImageDecoder$ContentResolverSource: void <init>(android.content.ContentResolver,android.net.Uri,android.content.res.Resources)>(r0, r1, r2);

        return $r3;
    }

    public static android.graphics.ImageDecoder$Source createSource(android.content.res.AssetManager, java.lang.String)
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        android.graphics.ImageDecoder$AssetSource $r2;

        r0 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.graphics.ImageDecoder$AssetSource;

        specialinvoke $r2.<android.graphics.ImageDecoder$AssetSource: void <init>(android.content.res.AssetManager,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static android.graphics.ImageDecoder$Source createSource(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0;
        android.graphics.ImageDecoder$ResourceSource $r1;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        $r1 = new android.graphics.ImageDecoder$ResourceSource;

        specialinvoke $r1.<android.graphics.ImageDecoder$ResourceSource: void <init>(android.content.res.Resources,int)>(r0, i0);

        return $r1;
    }

    public static android.graphics.ImageDecoder$Source createSource(android.content.res.Resources, java.io.InputStream)
    {
        android.content.res.Resources r0;
        java.io.InputStream r1;
        android.graphics.ImageDecoder$InputStreamSource $r2;
        int $i0;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: java.io.InputStream;

        $r2 = new android.graphics.ImageDecoder$InputStreamSource;

        $i0 = staticinvoke <android.graphics.Bitmap: int getDefaultDensity()>();

        specialinvoke $r2.<android.graphics.ImageDecoder$InputStreamSource: void <init>(android.content.res.Resources,java.io.InputStream,int)>(r0, r1, $i0);

        return $r2;
    }

    public static android.graphics.ImageDecoder$Source createSource(android.content.res.Resources, java.io.InputStream, int)
    {
        android.content.res.Resources r0;
        java.io.InputStream r1;
        int i0;
        android.graphics.ImageDecoder$InputStreamSource $r2;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: java.io.InputStream;

        i0 := @parameter2: int;

        $r2 = new android.graphics.ImageDecoder$InputStreamSource;

        specialinvoke $r2.<android.graphics.ImageDecoder$InputStreamSource: void <init>(android.content.res.Resources,java.io.InputStream,int)>(r0, r1, i0);

        return $r2;
    }

    public static android.graphics.ImageDecoder$Source createSource(java.io.File)
    {
        java.io.File r0;
        android.graphics.ImageDecoder$FileSource $r1;

        r0 := @parameter0: java.io.File;

        $r1 = new android.graphics.ImageDecoder$FileSource;

        specialinvoke $r1.<android.graphics.ImageDecoder$FileSource: void <init>(java.io.File)>(r0);

        return $r1;
    }

    public static android.graphics.ImageDecoder$Source createSource(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        android.graphics.ImageDecoder$ByteBufferSource $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = new android.graphics.ImageDecoder$ByteBufferSource;

        specialinvoke $r1.<android.graphics.ImageDecoder$ByteBufferSource: void <init>(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    public static android.graphics.ImageDecoder$Source createSource(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        android.graphics.ImageDecoder$CallableSource $r1;

        r0 := @parameter0: java.util.concurrent.Callable;

        $r1 = new android.graphics.ImageDecoder$CallableSource;

        specialinvoke $r1.<android.graphics.ImageDecoder$CallableSource: void <init>(java.util.concurrent.Callable)>(r0);

        return $r1;
    }

    public static android.graphics.ImageDecoder$Source createSource(byte[])
    {
        byte[] r0;
        int $i0;
        android.graphics.ImageDecoder$Source $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static android.graphics.ImageDecoder$Source createSource(byte[], int, int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        byte[] r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.NullPointerException $r1;
        android.graphics.ImageDecoder$ByteArraySource $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 == null goto label2;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = lengthof r0;

        if i0 >= $i2 goto label1;

        $i4 = i0 + i1;

        $i3 = lengthof r0;

        if $i4 > $i3 goto label1;

        $r2 = new android.graphics.ImageDecoder$ByteArraySource;

        specialinvoke $r2.<android.graphics.ImageDecoder$ByteArraySource: void <init>(byte[],int,int)>(r0, i0, i1);

        return $r2;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("invalid offset/length!");

        throw $r3;

     label2:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("null byte[] in createSource!");

        throw $r1;
    }

    public static android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        android.graphics.ImageDecoder$Source r0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: android.graphics.ImageDecoder$Source;

        $r1 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmapImpl(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r0, null);

        return $r1;
    }

    public static android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source, android.graphics.ImageDecoder$OnHeaderDecodedListener) throws java.io.IOException
    {
        android.graphics.ImageDecoder$Source r0;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r1;
        java.lang.IllegalArgumentException $r2;
        android.graphics.Bitmap $r3;

        r0 := @parameter0: android.graphics.ImageDecoder$Source;

        r1 := @parameter1: android.graphics.ImageDecoder$OnHeaderDecodedListener;

        if r1 == null goto label1;

        $r3 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmapImpl(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r0, r1);

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener cannot be null! Use decodeBitmap(Source) to not have a listener");

        throw $r2;
    }

    private static android.graphics.Bitmap decodeBitmapImpl(android.graphics.ImageDecoder$Source, android.graphics.ImageDecoder$OnHeaderDecodedListener) throws java.io.IOException
    {
        android.graphics.ImageDecoder r0;
        int i0;
        android.graphics.Rect r1;
        boolean $z0;
        long $l1;
        java.lang.Throwable $r2, $r3;
        android.graphics.ImageDecoder$Source r4;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r5;
        android.graphics.Bitmap r6;
        byte[] r7;

        r4 := @parameter0: android.graphics.ImageDecoder$Source;

        r5 := @parameter1: android.graphics.ImageDecoder$OnHeaderDecodedListener;

        r0 = virtualinvoke r4.<android.graphics.ImageDecoder$Source: android.graphics.ImageDecoder createImageDecoder(boolean)>(0);

     label01:
        r0.<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source mSource> = r4;

        specialinvoke r0.<android.graphics.ImageDecoder: void callHeaderDecoded(android.graphics.ImageDecoder$OnHeaderDecodedListener,android.graphics.ImageDecoder$Source)>(r5, r4);

        i0 = specialinvoke r0.<android.graphics.ImageDecoder: int computeDensity(android.graphics.ImageDecoder$Source)>(r4);

        r6 = specialinvoke r0.<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmapInternal()>();

        virtualinvoke r6.<android.graphics.Bitmap: void setDensity(int)>(i0);

        r1 = r0.<android.graphics.ImageDecoder: android.graphics.Rect mOutPaddingRect>;

     label02:
        if r1 == null goto label06;

     label03:
        r7 = virtualinvoke r6.<android.graphics.Bitmap: byte[] getNinePatchChunk()>();

     label04:
        if r7 == null goto label06;

     label05:
        $z0 = staticinvoke <android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>(r7);

        if $z0 == 0 goto label06;

        $l1 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        staticinvoke <android.graphics.ImageDecoder: void nGetPadding(long,android.graphics.Rect)>($l1, r1);

     label06:
        if r0 == null goto label07;

        virtualinvoke r0.<android.graphics.ImageDecoder: void close()>();

     label07:
        return r6;

     label08:
        $r3 := @caughtexception;

        if r0 == null goto label12;

     label09:
        virtualinvoke r0.<android.graphics.ImageDecoder: void close()>();

     label10:
        goto label12;

     label11:
        $r2 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    private android.graphics.Bitmap decodeBitmapInternal() throws java.io.IOException
    {
        android.graphics.ImageDecoder r0;
        long l0, $l4;
        android.graphics.PostProcessor $r1;
        int $i1, $i2, $i3;
        android.graphics.Rect $r2;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        android.graphics.Bitmap $r3;

        r0 := @this: android.graphics.ImageDecoder;

        z5 = 0;

        specialinvoke r0.<android.graphics.ImageDecoder: void checkState(boolean)>(0);

        l0 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        $r1 = r0.<android.graphics.ImageDecoder: android.graphics.PostProcessor mPostProcessor>;

        if $r1 == null goto label1;

        z5 = 1;

     label1:
        $i1 = r0.<android.graphics.ImageDecoder: int mDesiredWidth>;

        $i2 = r0.<android.graphics.ImageDecoder: int mDesiredHeight>;

        $r2 = r0.<android.graphics.ImageDecoder: android.graphics.Rect mCropRect>;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mMutable>;

        $i3 = r0.<android.graphics.ImageDecoder: int mAllocator>;

        $z1 = r0.<android.graphics.ImageDecoder: boolean mUnpremultipliedRequired>;

        $z2 = r0.<android.graphics.ImageDecoder: boolean mConserveMemory>;

        $z3 = r0.<android.graphics.ImageDecoder: boolean mDecodeAsAlphaMask>;

        $l4 = specialinvoke r0.<android.graphics.ImageDecoder: long getColorSpacePtr()>();

        $z4 = specialinvoke r0.<android.graphics.ImageDecoder: boolean checkForExtended()>();

        $r3 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap nDecodeBitmap(long,android.graphics.ImageDecoder,boolean,int,int,android.graphics.Rect,boolean,int,boolean,boolean,boolean,long,boolean)>(l0, r0, z5, $i1, $i2, $r2, $z0, $i3, $z1, $z2, $z3, $l4, $z4);

        return $r3;
    }

    public static android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source) throws java.io.IOException
    {
        android.graphics.ImageDecoder$Source r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @parameter0: android.graphics.ImageDecoder$Source;

        $r1 = staticinvoke <android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawableImpl(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r0, null);

        return $r1;
    }

    public static android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source, android.graphics.ImageDecoder$OnHeaderDecodedListener) throws java.io.IOException
    {
        android.graphics.ImageDecoder$Source r0;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r1;
        java.lang.IllegalArgumentException $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @parameter0: android.graphics.ImageDecoder$Source;

        r1 := @parameter1: android.graphics.ImageDecoder$OnHeaderDecodedListener;

        if r1 == null goto label1;

        $r3 = staticinvoke <android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawableImpl(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r0, r1);

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener cannot be null! Use decodeDrawable(Source) to not have a listener");

        throw $r2;
    }

    private static android.graphics.drawable.Drawable decodeDrawableImpl(android.graphics.ImageDecoder$Source, android.graphics.ImageDecoder$OnHeaderDecodedListener) throws java.io.IOException
    {
        android.graphics.ImageDecoder r0, r13;
        int i0, $i3, $i4, $i6;
        android.content.res.Resources r1;
        byte[] r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.graphics.drawable.BitmapDrawable $r3;
        long $l1, $l2, $l5;
        android.graphics.drawable.NinePatchDrawable $r4;
        android.graphics.PostProcessor $r5;
        android.content.res.AssetFileDescriptor $r6;
        java.io.InputStream $r7;
        android.graphics.Rect $r8, r16, r17;
        java.lang.Throwable $r9, $r10;
        android.graphics.ImageDecoder$Source r11;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r12;
        android.graphics.drawable.AnimatedImageDrawable r14;
        android.graphics.Bitmap r15;
        java.lang.IllegalStateException r20, r21;

        r11 := @parameter0: android.graphics.ImageDecoder$Source;

        r12 := @parameter1: android.graphics.ImageDecoder$OnHeaderDecodedListener;

        r0 = virtualinvoke r11.<android.graphics.ImageDecoder$Source: android.graphics.ImageDecoder createImageDecoder(boolean)>(1);

     label01:
        r0.<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source mSource> = r11;

        specialinvoke r0.<android.graphics.ImageDecoder: void callHeaderDecoded(android.graphics.ImageDecoder$OnHeaderDecodedListener,android.graphics.ImageDecoder$Source)>(r12, r11);

        $z0 = r0.<android.graphics.ImageDecoder: boolean mUnpremultipliedRequired>;

        if $z0 != 0 goto label20;

        $z1 = r0.<android.graphics.ImageDecoder: boolean mMutable>;

        if $z1 != 0 goto label19;

        i0 = specialinvoke r0.<android.graphics.ImageDecoder: int computeDensity(android.graphics.ImageDecoder$Source)>(r11);

        $z2 = r0.<android.graphics.ImageDecoder: boolean mAnimated>;

        if $z2 == 0 goto label07;

        $r5 = r0.<android.graphics.ImageDecoder: android.graphics.PostProcessor mPostProcessor>;

        if $r5 != null goto label03;

     label02:
        r13 = null;

        goto label04;

     label03:
        r13 = r0;

     label04:
        specialinvoke r0.<android.graphics.ImageDecoder: void checkState(boolean)>(1);

        r14 = new android.graphics.drawable.AnimatedImageDrawable;

        $l2 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        $i3 = r0.<android.graphics.ImageDecoder: int mDesiredWidth>;

        $i4 = r0.<android.graphics.ImageDecoder: int mDesiredHeight>;

        $l5 = specialinvoke r0.<android.graphics.ImageDecoder: long getColorSpacePtr()>();

        $z4 = specialinvoke r0.<android.graphics.ImageDecoder: boolean checkForExtended()>();

        $i6 = virtualinvoke r11.<android.graphics.ImageDecoder$Source: int computeDstDensity()>();

        $r8 = r0.<android.graphics.ImageDecoder: android.graphics.Rect mCropRect>;

        $r7 = r0.<android.graphics.ImageDecoder: java.io.InputStream mInputStream>;

        $r6 = r0.<android.graphics.ImageDecoder: android.content.res.AssetFileDescriptor mAssetFd>;

        specialinvoke r14.<android.graphics.drawable.AnimatedImageDrawable: void <init>(long,android.graphics.ImageDecoder,int,int,long,boolean,int,int,android.graphics.Rect,java.io.InputStream,android.content.res.AssetFileDescriptor)>($l2, r13, $i3, $i4, $l5, $z4, i0, $i6, $r8, $r7, $r6);

        r0.<android.graphics.ImageDecoder: java.io.InputStream mInputStream> = null;

        r0.<android.graphics.ImageDecoder: android.content.res.AssetFileDescriptor mAssetFd> = null;

     label05:
        if r0 == null goto label06;

        virtualinvoke r0.<android.graphics.ImageDecoder: void close()>();

     label06:
        return r14;

     label07:
        r15 = specialinvoke r0.<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmapInternal()>();

        virtualinvoke r15.<android.graphics.Bitmap: void setDensity(int)>(i0);

        r1 = virtualinvoke r11.<android.graphics.ImageDecoder$Source: android.content.res.Resources getResources()>();

        r2 = virtualinvoke r15.<android.graphics.Bitmap: byte[] getNinePatchChunk()>();

     label08:
        if r2 == null goto label16;

     label09:
        $z3 = staticinvoke <android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>(r2);

        if $z3 == 0 goto label16;

        r16 = new android.graphics.Rect;

        specialinvoke r16.<android.graphics.Rect: void <init>()>();

        virtualinvoke r15.<android.graphics.Bitmap: void getOpticalInsets(android.graphics.Rect)>(r16);

        r17 = r0.<android.graphics.ImageDecoder: android.graphics.Rect mOutPaddingRect>;

     label10:
        if r17 != null goto label13;

     label11:
        r17 = new android.graphics.Rect;

        specialinvoke r17.<android.graphics.Rect: void <init>()>();

     label12:
        goto label13;

     label13:
        $l1 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        staticinvoke <android.graphics.ImageDecoder: void nGetPadding(long,android.graphics.Rect)>($l1, r17);

        $r4 = new android.graphics.drawable.NinePatchDrawable;

        specialinvoke $r4.<android.graphics.drawable.NinePatchDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,android.graphics.Rect,java.lang.String)>(r1, r15, r2, r17, r16, null);

     label14:
        if r0 == null goto label15;

        virtualinvoke r0.<android.graphics.ImageDecoder: void close()>();

     label15:
        return $r4;

     label16:
        $r3 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r1, r15);

     label17:
        if r0 == null goto label18;

        virtualinvoke r0.<android.graphics.ImageDecoder: void close()>();

     label18:
        return $r3;

     label19:
        r20 = new java.lang.IllegalStateException;

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot decode a mutable Drawable!");

        throw r20;

     label20:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot decode a Drawable with unpremultiplied pixels!");

        throw r21;

     label21:
        $r10 := @caughtexception;

        if r0 == null goto label25;

     label22:
        virtualinvoke r0.<android.graphics.ImageDecoder: void close()>();

     label23:
        goto label25;

     label24:
        $r9 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label25:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label24;
    }

    private android.graphics.ColorSpace getColorSpace()
    {
        android.graphics.ImageDecoder r0;
        long $l0;
        android.graphics.ColorSpace $r1;

        r0 := @this: android.graphics.ImageDecoder;

        $l0 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        $r1 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ColorSpace nGetColorSpace(long)>($l0);

        return $r1;
    }

    private long getColorSpacePtr()
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ColorSpace r1;
        long $l0;

        r0 := @this: android.graphics.ImageDecoder;

        r1 = r0.<android.graphics.ImageDecoder: android.graphics.ColorSpace mDesiredColorSpace>;

        if r1 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke r1.<android.graphics.ColorSpace: long getNativeInstance()>();

        return $l0;
    }

    private java.lang.String getMimeType()
    {
        android.graphics.ImageDecoder r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: android.graphics.ImageDecoder;

        $l0 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        $r1 = staticinvoke <android.graphics.ImageDecoder: java.lang.String nGetMimeType(long)>($l0);

        return $r1;
    }

    private int getTargetDimension(int, int, int)
    {
        android.graphics.ImageDecoder r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 < i0 goto label1;

        return 1;

     label1:
        i3 = i0 / i1;

        if i2 != i3 goto label2;

        return i2;

     label2:
        $i4 = i2 * i1;

        $i5 = $i4 - i0;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        if $i6 >= i1 goto label3;

        return i2;

     label3:
        return i3;
    }

    public static boolean isMimeTypeSupported(java.lang.String)
    {
        java.util.Locale $r1;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.String r2, r3;
        byte b1;

        r2 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r1 = <java.util.Locale: java.util.Locale US>;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $i0 = virtualinvoke r3.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1875291391: goto label20;
            case -1635437028: goto label19;
            case -1594371159: goto label18;
            case -1487464693: goto label17;
            case -1487464690: goto label16;
            case -1487394660: goto label15;
            case -1487018032: goto label14;
            case -1423313290: goto label13;
            case -985160897: goto label12;
            case -879272239: goto label11;
            case -879267568: goto label10;
            case -879258763: goto label09;
            case -332763809: goto label08;
            case 741270252: goto label07;
            case 1146342924: goto label06;
            case 1378106698: goto label05;
            case 2099152104: goto label04;
            case 2099152524: goto label03;
            case 2111234748: goto label02;
            default: goto label01;
        };

     label01:
        goto label21;

     label02:
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-canon-cr2");

        if $z0 == 0 goto label01;

        b1 = 10;

        goto label22;

     label03:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-nikon-nrw");

        if $z1 == 0 goto label01;

        b1 = 13;

        goto label22;

     label04:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-nikon-nef");

        if $z2 == 0 goto label01;

        b1 = 12;

        goto label22;

     label05:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-olympus-orf");

        if $z3 == 0 goto label01;

        b1 = 14;

        goto label22;

     label06:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-ico");

        if $z4 == 0 goto label01;

        b1 = 7;

        goto label22;

     label07:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/vnd.wap.wbmp");

        if $z5 == 0 goto label01;

        b1 = 8;

        goto label22;

     label08:
        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-pentax-pef");

        if $z6 == 0 goto label01;

        b1 = 17;

        goto label22;

     label09:
        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/png");

        if $z7 == 0 goto label01;

        b1 = 0;

        goto label22;

     label10:
        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/gif");

        if $z8 == 0 goto label01;

        b1 = 3;

        goto label22;

     label11:
        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/bmp");

        if $z9 == 0 goto label01;

        b1 = 6;

        goto label22;

     label12:
        $z10 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-panasonic-rw2");

        if $z10 == 0 goto label01;

        b1 = 16;

        goto label22;

     label13:
        $z11 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-adobe-dng");

        if $z11 == 0 goto label01;

        b1 = 11;

        goto label22;

     label14:
        $z12 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/webp");

        if $z12 == 0 goto label01;

        b1 = 2;

        goto label22;

     label15:
        $z13 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/jpeg");

        if $z13 == 0 goto label01;

        b1 = 1;

        goto label22;

     label16:
        $z14 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/heif");

        if $z14 == 0 goto label01;

        b1 = 4;

        goto label22;

     label17:
        $z15 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/heic");

        if $z15 == 0 goto label01;

        b1 = 5;

        goto label22;

     label18:
        $z16 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-sony-arw");

        if $z16 == 0 goto label01;

        b1 = 9;

        goto label22;

     label19:
        $z17 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-samsung-srw");

        if $z17 == 0 goto label01;

        b1 = 18;

        goto label22;

     label20:
        $z18 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("image/x-fuji-raf");

        if $z18 == 0 goto label01;

        b1 = 15;

        goto label22;

     label21:
        b1 = -1;

     label22:
        tableswitch(b1)
        {
            case 0: goto label24;
            case 1: goto label24;
            case 2: goto label24;
            case 3: goto label24;
            case 4: goto label24;
            case 5: goto label24;
            case 6: goto label24;
            case 7: goto label24;
            case 8: goto label24;
            case 9: goto label24;
            case 10: goto label24;
            case 11: goto label24;
            case 12: goto label24;
            case 13: goto label24;
            case 14: goto label24;
            case 15: goto label24;
            case 16: goto label24;
            case 17: goto label24;
            case 18: goto label24;
            default: goto label23;
        };

     label23:
        return 0;

     label24:
        return 1;
    }

    private static native void nClose(long);

    private static native android.graphics.ImageDecoder nCreate(long, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException;

    private static native android.graphics.ImageDecoder nCreate(java.io.FileDescriptor, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException;

    private static native android.graphics.ImageDecoder nCreate(java.io.InputStream, byte[], boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException;

    private static native android.graphics.ImageDecoder nCreate(java.nio.ByteBuffer, int, int, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException;

    private static native android.graphics.ImageDecoder nCreate(byte[], int, int, boolean, android.graphics.ImageDecoder$Source) throws java.io.IOException;

    private static native android.graphics.Bitmap nDecodeBitmap(long, android.graphics.ImageDecoder, boolean, int, int, android.graphics.Rect, boolean, int, boolean, boolean, boolean, long, boolean) throws java.io.IOException;

    private static native android.graphics.ColorSpace nGetColorSpace(long);

    private static native java.lang.String nGetMimeType(long);

    private static native void nGetPadding(long, android.graphics.Rect);

    private static native android.util.Size nGetSampledSize(long, int);

    private void onPartialImage(int, java.lang.Throwable) throws android.graphics.ImageDecoder$DecodeException
    {
        android.graphics.ImageDecoder r0;
        int i0;
        android.graphics.ImageDecoder$DecodeException $r2;
        android.graphics.ImageDecoder$Source $r3;
        boolean $z0;
        java.lang.Throwable r4;
        android.graphics.ImageDecoder$OnPartialImageListener r5;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = new android.graphics.ImageDecoder$DecodeException;

        $r3 = r0.<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source mSource>;

        specialinvoke $r2.<android.graphics.ImageDecoder$DecodeException: void <init>(int,java.lang.Throwable,android.graphics.ImageDecoder$Source)>(i0, r4, $r3);

        r5 = r0.<android.graphics.ImageDecoder: android.graphics.ImageDecoder$OnPartialImageListener mOnPartialImageListener>;

        if r5 == null goto label1;

        $z0 = interfaceinvoke r5.<android.graphics.ImageDecoder$OnPartialImageListener: boolean onPartialImage(android.graphics.ImageDecoder$DecodeException)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        throw $r2;
    }

    private int postProcessAndRelease(android.graphics.Canvas)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.Canvas r1;
        int i0;
        android.graphics.PostProcessor $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.graphics.ImageDecoder;

        r1 := @parameter0: android.graphics.Canvas;

     label1:
        $r3 = r0.<android.graphics.ImageDecoder: android.graphics.PostProcessor mPostProcessor>;

        i0 = interfaceinvoke $r3.<android.graphics.PostProcessor: int onPostProcess(android.graphics.Canvas)>(r1);

     label2:
        virtualinvoke r1.<android.graphics.Canvas: void release()>();

        return i0;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.graphics.Canvas: void release()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean requestedResize()
    {
        android.graphics.ImageDecoder r0;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        $i1 = r0.<android.graphics.ImageDecoder: int mWidth>;

        $i0 = r0.<android.graphics.ImageDecoder: int mDesiredWidth>;

        if $i1 != $i0 goto label2;

        $i3 = r0.<android.graphics.ImageDecoder: int mHeight>;

        $i2 = r0.<android.graphics.ImageDecoder: int mDesiredHeight>;

        if $i3 == $i2 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public void close()
    {
        android.graphics.ImageDecoder r0;
        dalvik.system.CloseGuard $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0, $z1;
        long $l0;
        android.content.res.AssetFileDescriptor $r3;
        java.io.InputStream $r4;

        r0 := @this: android.graphics.ImageDecoder;

        $r1 = r0.<android.graphics.ImageDecoder: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $r2 = r0.<android.graphics.ImageDecoder: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $l0 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        staticinvoke <android.graphics.ImageDecoder: void nClose(long)>($l0);

        r0.<android.graphics.ImageDecoder: long mNativePtr> = 0L;

        $z1 = r0.<android.graphics.ImageDecoder: boolean mOwnsInputStream>;

        if $z1 == 0 goto label2;

        $r4 = r0.<android.graphics.ImageDecoder: java.io.InputStream mInputStream>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r4);

     label2:
        $r3 = r0.<android.graphics.ImageDecoder: android.content.res.AssetFileDescriptor mAssetFd>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        r0.<android.graphics.ImageDecoder: java.io.InputStream mInputStream> = null;

        r0.<android.graphics.ImageDecoder: android.content.res.AssetFileDescriptor mAssetFd> = null;

        r0.<android.graphics.ImageDecoder: byte[] mTempStorage> = null;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.ImageDecoder r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.graphics.ImageDecoder;

     label1:
        $r2 = r0.<android.graphics.ImageDecoder: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.graphics.ImageDecoder: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        r0.<android.graphics.ImageDecoder: java.io.InputStream mInputStream> = null;

        r0.<android.graphics.ImageDecoder: android.content.res.AssetFileDescriptor mAssetFd> = null;

        virtualinvoke r0.<android.graphics.ImageDecoder: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int getAllocator()
    {
        android.graphics.ImageDecoder r0;
        int $i0;

        r0 := @this: android.graphics.ImageDecoder;

        $i0 = r0.<android.graphics.ImageDecoder: int mAllocator>;

        return $i0;
    }

    public boolean getAsAlphaMask()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = virtualinvoke r0.<android.graphics.ImageDecoder: boolean getDecodeAsAlphaMask()>();

        return $z0;
    }

    public boolean getConserveMemory()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mConserveMemory>;

        return $z0;
    }

    public android.graphics.Rect getCrop()
    {
        android.graphics.ImageDecoder r0;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.ImageDecoder;

        $r1 = r0.<android.graphics.ImageDecoder: android.graphics.Rect mCropRect>;

        return $r1;
    }

    public boolean getDecodeAsAlphaMask()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mDecodeAsAlphaMask>;

        return $z0;
    }

    public int getMemorySizePolicy()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0, $z1;
        int i0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mConserveMemory>;

        $z1 = $z0 ^ 1;

        i0 = (int) $z1;

        return i0;
    }

    public boolean getMutable()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = virtualinvoke r0.<android.graphics.ImageDecoder: boolean isMutableRequired()>();

        return $z0;
    }

    public android.graphics.ImageDecoder$OnPartialImageListener getOnPartialImageListener()
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$OnPartialImageListener $r1;

        r0 := @this: android.graphics.ImageDecoder;

        $r1 = r0.<android.graphics.ImageDecoder: android.graphics.ImageDecoder$OnPartialImageListener mOnPartialImageListener>;

        return $r1;
    }

    public android.graphics.PostProcessor getPostProcessor()
    {
        android.graphics.ImageDecoder r0;
        android.graphics.PostProcessor $r1;

        r0 := @this: android.graphics.ImageDecoder;

        $r1 = r0.<android.graphics.ImageDecoder: android.graphics.PostProcessor mPostProcessor>;

        return $r1;
    }

    public boolean getRequireUnpremultiplied()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = virtualinvoke r0.<android.graphics.ImageDecoder: boolean isUnpremultipliedRequired()>();

        return $z0;
    }

    public android.util.Size getSampledSize(int)
    {
        android.graphics.ImageDecoder r0;
        int i0;
        long l1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        byte $b2;
        java.lang.IllegalStateException $r7;
        android.util.Size $r8;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        if i0 <= 0 goto label2;

        l1 = r0.<android.graphics.ImageDecoder: long mNativePtr>;

        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label1;

        $r8 = staticinvoke <android.graphics.ImageDecoder: android.util.Size nGetSampledSize(long,int)>(l1, i0);

        return $r8;

     label1:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ImageDecoder is closed!");

        throw $r7;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sampleSize must be positive! provided ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public boolean isDecodeAsAlphaMaskEnabled()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mDecodeAsAlphaMask>;

        return $z0;
    }

    public boolean isMutableRequired()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mMutable>;

        return $z0;
    }

    public boolean isUnpremultipliedRequired()
    {
        android.graphics.ImageDecoder r0;
        boolean $z0;

        r0 := @this: android.graphics.ImageDecoder;

        $z0 = r0.<android.graphics.ImageDecoder: boolean mUnpremultipliedRequired>;

        return $z0;
    }

    public void setAllocator(int)
    {
        android.graphics.ImageDecoder r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 3 goto label1;

        r0.<android.graphics.ImageDecoder: int mAllocator> = i0;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid allocator ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public android.graphics.ImageDecoder setAsAlphaMask(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.graphics.ImageDecoder: android.graphics.ImageDecoder setDecodeAsAlphaMask(boolean)>(z0);

        return r0;
    }

    public void setConserveMemory(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        r0.<android.graphics.ImageDecoder: boolean mConserveMemory> = z0;

        return;
    }

    public void setCrop(android.graphics.Rect)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.Rect r1;

        r0 := @this: android.graphics.ImageDecoder;

        r1 := @parameter0: android.graphics.Rect;

        r0.<android.graphics.ImageDecoder: android.graphics.Rect mCropRect> = r1;

        return;
    }

    public android.graphics.ImageDecoder setDecodeAsAlphaMask(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setDecodeAsAlphaMaskEnabled(boolean)>(z0);

        return r0;
    }

    public void setDecodeAsAlphaMaskEnabled(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        r0.<android.graphics.ImageDecoder: boolean mDecodeAsAlphaMask> = z0;

        return;
    }

    public void setMemorySizePolicy(int)
    {
        android.graphics.ImageDecoder r0;
        int i0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<android.graphics.ImageDecoder: boolean mConserveMemory> = z0;

        return;
    }

    public android.graphics.ImageDecoder setMutable(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setMutableRequired(boolean)>(z0);

        return r0;
    }

    public void setMutableRequired(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        r0.<android.graphics.ImageDecoder: boolean mMutable> = z0;

        return;
    }

    public void setOnPartialImageListener(android.graphics.ImageDecoder$OnPartialImageListener)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$OnPartialImageListener r1;

        r0 := @this: android.graphics.ImageDecoder;

        r1 := @parameter0: android.graphics.ImageDecoder$OnPartialImageListener;

        r0.<android.graphics.ImageDecoder: android.graphics.ImageDecoder$OnPartialImageListener mOnPartialImageListener> = r1;

        return;
    }

    public void setOutPaddingRect(android.graphics.Rect)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.Rect r1;

        r0 := @this: android.graphics.ImageDecoder;

        r1 := @parameter0: android.graphics.Rect;

        r0.<android.graphics.ImageDecoder: android.graphics.Rect mOutPaddingRect> = r1;

        return;
    }

    public void setPostProcessor(android.graphics.PostProcessor)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.PostProcessor r1;

        r0 := @this: android.graphics.ImageDecoder;

        r1 := @parameter0: android.graphics.PostProcessor;

        r0.<android.graphics.ImageDecoder: android.graphics.PostProcessor mPostProcessor> = r1;

        return;
    }

    public android.graphics.ImageDecoder setRequireUnpremultiplied(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setUnpremultipliedRequired(boolean)>(z0);

        return r0;
    }

    public android.graphics.ImageDecoder setResize(int)
    {
        android.graphics.ImageDecoder r0;
        int i0;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setTargetSampleSize(int)>(i0);

        return r0;
    }

    public android.graphics.ImageDecoder setResize(int, int)
    {
        android.graphics.ImageDecoder r0;
        int i0, i1;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setTargetSize(int,int)>(i0, i1);

        return r0;
    }

    public void setTargetColorSpace(android.graphics.ColorSpace)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ColorSpace r1;

        r0 := @this: android.graphics.ImageDecoder;

        r1 := @parameter0: android.graphics.ColorSpace;

        r0.<android.graphics.ImageDecoder: android.graphics.ColorSpace mDesiredColorSpace> = r1;

        return;
    }

    public void setTargetSampleSize(int)
    {
        android.graphics.ImageDecoder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.util.Size r1;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.graphics.ImageDecoder: android.util.Size getSampledSize(int)>(i0);

        $i1 = r0.<android.graphics.ImageDecoder: int mWidth>;

        $i2 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i3 = specialinvoke r0.<android.graphics.ImageDecoder: int getTargetDimension(int,int,int)>($i1, i0, $i2);

        $i4 = r0.<android.graphics.ImageDecoder: int mHeight>;

        $i5 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i6 = specialinvoke r0.<android.graphics.ImageDecoder: int getTargetDimension(int,int,int)>($i4, i0, $i5);

        virtualinvoke r0.<android.graphics.ImageDecoder: void setTargetSize(int,int)>($i3, $i6);

        return;
    }

    public void setTargetSize(int, int)
    {
        android.graphics.ImageDecoder r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;

        r0 := @this: android.graphics.ImageDecoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= 0 goto label1;

        if i1 <= 0 goto label1;

        r0.<android.graphics.ImageDecoder: int mDesiredWidth> = i0;

        r0.<android.graphics.ImageDecoder: int mDesiredHeight> = i1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dimensions must be positive! provided (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void setUnpremultipliedRequired(boolean)
    {
        android.graphics.ImageDecoder r0;
        boolean z0;

        r0 := @this: android.graphics.ImageDecoder;

        z0 := @parameter0: boolean;

        r0.<android.graphics.ImageDecoder: boolean mUnpremultipliedRequired> = z0;

        return;
    }

    public static void <clinit>()
    {
        <android.graphics.ImageDecoder: int MEMORY_POLICY_LOW_RAM> = 0;

        <android.graphics.ImageDecoder: int MEMORY_POLICY_DEFAULT> = 1;

        <android.graphics.ImageDecoder: int ERROR_SOURCE_INCOMPLETE> = 2;

        <android.graphics.ImageDecoder: int ERROR_SOURCE_EXCEPTION> = 1;

        <android.graphics.ImageDecoder: int ERROR_SOURCE_ERROR> = 3;

        <android.graphics.ImageDecoder: int ALLOCATOR_SOFTWARE> = 1;

        <android.graphics.ImageDecoder: int ALLOCATOR_SHARED_MEMORY> = 2;

        <android.graphics.ImageDecoder: int ALLOCATOR_HARDWARE> = 3;

        <android.graphics.ImageDecoder: int ALLOCATOR_DEFAULT> = 0;

        return;
    }
}
