public final class android.graphics.LargeBitmap extends java.lang.Object
{
    private long mNativeLargeBitmap;
    private boolean mRecycled;

    private void <init>(long)
    {
        android.graphics.LargeBitmap r0;
        long l0;

        r0 := @this: android.graphics.LargeBitmap;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.LargeBitmap: long mNativeLargeBitmap> = l0;

        r0.<android.graphics.LargeBitmap: boolean mRecycled> = 0;

        return;
    }

    private void checkRecycled(java.lang.String)
    {
        android.graphics.LargeBitmap r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.LargeBitmap;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<android.graphics.LargeBitmap: boolean mRecycled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    private static native void nativeClean(long);

    private static native android.graphics.Bitmap nativeDecodeRegion(long, int, int, int, int, android.graphics.BitmapFactory$Options);

    private static native int nativeGetHeight(long);

    private static native int nativeGetWidth(long);

    public android.graphics.Bitmap decodeRegion(android.graphics.Rect, android.graphics.BitmapFactory$Options)
    {
        android.graphics.LargeBitmap r0;
        android.graphics.Rect r1;
        android.graphics.BitmapFactory$Options r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        long $l14;
        android.graphics.Bitmap $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.graphics.LargeBitmap;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.BitmapFactory$Options;

        specialinvoke r0.<android.graphics.LargeBitmap: void checkRecycled(java.lang.String)>("decodeRegion called on recycled large bitmap");

        $i0 = r1.<android.graphics.Rect: int left>;

        if $i0 < 0 goto label1;

        $i1 = r1.<android.graphics.Rect: int top>;

        if $i1 < 0 goto label1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i3 = virtualinvoke r0.<android.graphics.LargeBitmap: int getWidth()>();

        if $i2 > $i3 goto label1;

        $i4 = r1.<android.graphics.Rect: int bottom>;

        $i5 = virtualinvoke r0.<android.graphics.LargeBitmap: int getHeight()>();

        if $i4 > $i5 goto label1;

        $l14 = r0.<android.graphics.LargeBitmap: long mNativeLargeBitmap>;

        $i13 = r1.<android.graphics.Rect: int left>;

        $i12 = r1.<android.graphics.Rect: int top>;

        $i7 = r1.<android.graphics.Rect: int right>;

        $i6 = r1.<android.graphics.Rect: int left>;

        $i11 = $i7 - $i6;

        $i9 = r1.<android.graphics.Rect: int bottom>;

        $i8 = r1.<android.graphics.Rect: int top>;

        $i10 = $i9 - $i8;

        $r3 = staticinvoke <android.graphics.LargeBitmap: android.graphics.Bitmap nativeDecodeRegion(long,int,int,int,int,android.graphics.BitmapFactory$Options)>($l14, $i13, $i12, $i11, $i10, r2);

        return $r3;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("rectangle is not inside the image");

        throw $r4;
    }

    protected void finalize()
    {
        android.graphics.LargeBitmap r0;

        r0 := @this: android.graphics.LargeBitmap;

        virtualinvoke r0.<android.graphics.LargeBitmap: void recycle()>();

        return;
    }

    public int getHeight()
    {
        android.graphics.LargeBitmap r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.LargeBitmap;

        specialinvoke r0.<android.graphics.LargeBitmap: void checkRecycled(java.lang.String)>("getHeight called on recycled large bitmap");

        $l0 = r0.<android.graphics.LargeBitmap: long mNativeLargeBitmap>;

        $i1 = staticinvoke <android.graphics.LargeBitmap: int nativeGetHeight(long)>($l0);

        return $i1;
    }

    public int getWidth()
    {
        android.graphics.LargeBitmap r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.LargeBitmap;

        specialinvoke r0.<android.graphics.LargeBitmap: void checkRecycled(java.lang.String)>("getWidth called on recycled large bitmap");

        $l0 = r0.<android.graphics.LargeBitmap: long mNativeLargeBitmap>;

        $i1 = staticinvoke <android.graphics.LargeBitmap: int nativeGetWidth(long)>($l0);

        return $i1;
    }

    public final boolean isRecycled()
    {
        android.graphics.LargeBitmap r0;
        boolean $z0;

        r0 := @this: android.graphics.LargeBitmap;

        $z0 = r0.<android.graphics.LargeBitmap: boolean mRecycled>;

        return $z0;
    }

    public void recycle()
    {
        android.graphics.LargeBitmap r0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.LargeBitmap;

        $z0 = r0.<android.graphics.LargeBitmap: boolean mRecycled>;

        if $z0 != 0 goto label1;

        $l0 = r0.<android.graphics.LargeBitmap: long mNativeLargeBitmap>;

        staticinvoke <android.graphics.LargeBitmap: void nativeClean(long)>($l0);

        r0.<android.graphics.LargeBitmap: boolean mRecycled> = 1;

     label1:
        return;
    }
}
