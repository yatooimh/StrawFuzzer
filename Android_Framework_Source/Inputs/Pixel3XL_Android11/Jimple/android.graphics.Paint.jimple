public class android.graphics.Paint extends java.lang.Object
{
    public static final int ANTI_ALIAS_FLAG;
    public static final int AUTO_HINTING_TEXT_FLAG;
    public static final int BIDI_DEFAULT_LTR;
    public static final int BIDI_DEFAULT_RTL;
    private static final int BIDI_FLAG_MASK;
    public static final int BIDI_FORCE_LTR;
    public static final int BIDI_FORCE_RTL;
    public static final int BIDI_LTR;
    private static final int BIDI_MAX_FLAG_VALUE;
    public static final int BIDI_RTL;
    public static final int CURSOR_AFTER;
    public static final int CURSOR_AT;
    public static final int CURSOR_AT_OR_AFTER;
    public static final int CURSOR_AT_OR_BEFORE;
    public static final int CURSOR_BEFORE;
    private static final int CURSOR_OPT_MAX_VALUE;
    public static final int DEV_KERN_TEXT_FLAG;
    public static final int DIRECTION_LTR;
    public static final int DIRECTION_RTL;
    public static final int DITHER_FLAG;
    public static final int EMBEDDED_BITMAP_TEXT_FLAG;
    public static final int END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN;
    public static final int END_HYPHEN_EDIT_INSERT_HYPHEN;
    public static final int END_HYPHEN_EDIT_INSERT_MAQAF;
    public static final int END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN;
    public static final int END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN;
    public static final int END_HYPHEN_EDIT_NO_EDIT;
    public static final int END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN;
    public static final int FAKE_BOLD_TEXT_FLAG;
    public static final int FILTER_BITMAP_FLAG;
    static final int HIDDEN_DEFAULT_PAINT_FLAGS;
    public static final int HINTING_OFF;
    public static final int HINTING_ON;
    public static final int LCD_RENDER_TEXT_FLAG;
    public static final int LINEAR_TEXT_FLAG;
    public static final int START_HYPHEN_EDIT_INSERT_HYPHEN;
    public static final int START_HYPHEN_EDIT_INSERT_ZWJ;
    public static final int START_HYPHEN_EDIT_NO_EDIT;
    public static final int STRIKE_THRU_TEXT_FLAG;
    public static final int SUBPIXEL_TEXT_FLAG;
    public static final int UNDERLINE_TEXT_FLAG;
    public static final int VERTICAL_TEXT_FLAG;
    static final android.graphics.Paint$Align[] sAlignArray;
    private static final java.lang.Object sCacheLock;
    static final android.graphics.Paint$Cap[] sCapArray;
    static final android.graphics.Paint$Join[] sJoinArray;
    private static final java.util.HashMap sMinikinLocaleListIdCache;
    static final android.graphics.Paint$Style[] sStyleArray;
    public int mBidiFlags;
    private long mColor;
    private android.graphics.ColorFilter mColorFilter;
    private float mCompatScaling;
    private java.lang.String mFontFeatureSettings;
    private java.lang.String mFontVariationSettings;
    private boolean mHasCompatScaling;
    private float mInvCompatScaling;
    private android.os.LocaleList mLocales;
    private android.graphics.MaskFilter mMaskFilter;
    private long mNativeColorFilter;
    private long mNativePaint;
    private long mNativeShader;
    private android.graphics.PathEffect mPathEffect;
    private android.graphics.Shader mShader;
    private long mShadowLayerColor;
    private float mShadowLayerDx;
    private float mShadowLayerDy;
    private float mShadowLayerRadius;
    private android.graphics.Typeface mTypeface;
    private android.graphics.Xfermode mXfermode;

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.util.HashMap $r1;
        android.graphics.Paint$Style[] $r2;
        android.graphics.Paint$Style $r3, $r4, $r5;
        android.graphics.Paint$Cap[] $r6;
        android.graphics.Paint$Cap $r7, $r8, $r9;
        android.graphics.Paint$Join[] $r10;
        android.graphics.Paint$Join $r11, $r12, $r13;
        android.graphics.Paint$Align[] $r14;
        android.graphics.Paint$Align $r15, $r16, $r17;

        <android.graphics.Paint: int VERTICAL_TEXT_FLAG> = 4096;

        <android.graphics.Paint: int UNDERLINE_TEXT_FLAG> = 8;

        <android.graphics.Paint: int SUBPIXEL_TEXT_FLAG> = 128;

        <android.graphics.Paint: int STRIKE_THRU_TEXT_FLAG> = 16;

        <android.graphics.Paint: int START_HYPHEN_EDIT_NO_EDIT> = 0;

        <android.graphics.Paint: int START_HYPHEN_EDIT_INSERT_ZWJ> = 2;

        <android.graphics.Paint: int START_HYPHEN_EDIT_INSERT_HYPHEN> = 1;

        <android.graphics.Paint: int LINEAR_TEXT_FLAG> = 64;

        <android.graphics.Paint: int LCD_RENDER_TEXT_FLAG> = 512;

        <android.graphics.Paint: int HINTING_ON> = 1;

        <android.graphics.Paint: int HINTING_OFF> = 0;

        <android.graphics.Paint: int HIDDEN_DEFAULT_PAINT_FLAGS> = 1282;

        <android.graphics.Paint: int FILTER_BITMAP_FLAG> = 2;

        <android.graphics.Paint: int FAKE_BOLD_TEXT_FLAG> = 32;

        <android.graphics.Paint: int END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN> = 1;

        <android.graphics.Paint: int END_HYPHEN_EDIT_NO_EDIT> = 0;

        <android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN> = 6;

        <android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN> = 5;

        <android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_MAQAF> = 4;

        <android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_HYPHEN> = 2;

        <android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN> = 3;

        <android.graphics.Paint: int EMBEDDED_BITMAP_TEXT_FLAG> = 1024;

        <android.graphics.Paint: int DITHER_FLAG> = 4;

        <android.graphics.Paint: int DIRECTION_RTL> = 1;

        <android.graphics.Paint: int DIRECTION_LTR> = 0;

        <android.graphics.Paint: int DEV_KERN_TEXT_FLAG> = 256;

        <android.graphics.Paint: int CURSOR_OPT_MAX_VALUE> = 4;

        <android.graphics.Paint: int CURSOR_BEFORE> = 2;

        <android.graphics.Paint: int CURSOR_AT_OR_BEFORE> = 3;

        <android.graphics.Paint: int CURSOR_AT_OR_AFTER> = 1;

        <android.graphics.Paint: int CURSOR_AT> = 4;

        <android.graphics.Paint: int CURSOR_AFTER> = 0;

        <android.graphics.Paint: int BIDI_RTL> = 1;

        <android.graphics.Paint: int BIDI_MAX_FLAG_VALUE> = 5;

        <android.graphics.Paint: int BIDI_LTR> = 0;

        <android.graphics.Paint: int BIDI_FORCE_RTL> = 5;

        <android.graphics.Paint: int BIDI_FORCE_LTR> = 4;

        <android.graphics.Paint: int BIDI_FLAG_MASK> = 7;

        <android.graphics.Paint: int BIDI_DEFAULT_RTL> = 3;

        <android.graphics.Paint: int BIDI_DEFAULT_LTR> = 2;

        <android.graphics.Paint: int AUTO_HINTING_TEXT_FLAG> = 2048;

        <android.graphics.Paint: int ANTI_ALIAS_FLAG> = 1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.graphics.Paint: java.lang.Object sCacheLock> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.graphics.Paint: java.util.HashMap sMinikinLocaleListIdCache> = $r1;

        $r2 = newarray (android.graphics.Paint$Style)[3];

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        $r2[0] = $r3;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        $r2[1] = $r4;

        $r5 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL_AND_STROKE>;

        $r2[2] = $r5;

        <android.graphics.Paint: android.graphics.Paint$Style[] sStyleArray> = $r2;

        $r6 = newarray (android.graphics.Paint$Cap)[3];

        $r7 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap BUTT>;

        $r6[0] = $r7;

        $r8 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        $r6[1] = $r8;

        $r9 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap SQUARE>;

        $r6[2] = $r9;

        <android.graphics.Paint: android.graphics.Paint$Cap[] sCapArray> = $r6;

        $r10 = newarray (android.graphics.Paint$Join)[3];

        $r11 = <android.graphics.Paint$Join: android.graphics.Paint$Join MITER>;

        $r10[0] = $r11;

        $r12 = <android.graphics.Paint$Join: android.graphics.Paint$Join ROUND>;

        $r10[1] = $r12;

        $r13 = <android.graphics.Paint$Join: android.graphics.Paint$Join BEVEL>;

        $r10[2] = $r13;

        <android.graphics.Paint: android.graphics.Paint$Join[] sJoinArray> = $r10;

        $r14 = newarray (android.graphics.Paint$Align)[3];

        $r15 = <android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>;

        $r14[0] = $r15;

        $r16 = <android.graphics.Paint$Align: android.graphics.Paint$Align CENTER>;

        $r14[1] = $r16;

        $r17 = <android.graphics.Paint$Align: android.graphics.Paint$Align RIGHT>;

        $r14[2] = $r17;

        <android.graphics.Paint: android.graphics.Paint$Align[] sAlignArray> = $r14;

        return;
    }

    public void <init>()
    {
        android.graphics.Paint r0;

        r0 := @this: android.graphics.Paint;

        specialinvoke r0.<android.graphics.Paint: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        android.graphics.Paint r0;
        int i0, $i3;
        long $l1, $l2, $l4;
        libcore.util.NativeAllocationRegistry $r1;
        android.os.LocaleList $r3;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Paint: int mBidiFlags> = 2;

        $l1 = staticinvoke <android.graphics.Paint: long nInit()>();

        r0.<android.graphics.Paint: long mNativePaint> = $l1;

        $r1 = <android.graphics.Paint$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l2 = r0.<android.graphics.Paint: long mNativePaint>;

        virtualinvoke $r1.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l2);

        $i3 = i0 | 1282;

        virtualinvoke r0.<android.graphics.Paint: void setFlags(int)>($i3);

        r0.<android.graphics.Paint: float mInvCompatScaling> = 1.0F;

        r0.<android.graphics.Paint: float mCompatScaling> = 1.0F;

        $r3 = staticinvoke <android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>();

        virtualinvoke r0.<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>($r3);

        $l4 = staticinvoke <android.graphics.Color: long pack(int)>(-16777216);

        r0.<android.graphics.Paint: long mColor> = $l4;

        return;
    }

    public void <init>(android.graphics.Paint)
    {
        android.graphics.Paint r0, r1;
        long $l0, $l1, $l2;
        libcore.util.NativeAllocationRegistry $r2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Paint: int mBidiFlags> = 2;

        $l0 = virtualinvoke r1.<android.graphics.Paint: long getNativeInstance()>();

        $l1 = staticinvoke <android.graphics.Paint: long nInitWithPaint(long)>($l0);

        r0.<android.graphics.Paint: long mNativePaint> = $l1;

        $r2 = <android.graphics.Paint$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l2 = r0.<android.graphics.Paint: long mNativePaint>;

        virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l2);

        specialinvoke r0.<android.graphics.Paint: void setClassVariablesFrom(android.graphics.Paint)>(r1);

        return;
    }

    static long access$000()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.Paint: long nGetNativeFinalizer()>();

        return $l0;
    }

    private android.graphics.Xfermode installXfermode(android.graphics.Xfermode)
    {
        android.graphics.Paint r0;
        android.graphics.Xfermode r1, r2;
        long $l0;
        int i1, i2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Xfermode;

        if r1 == null goto label1;

        i1 = r1.<android.graphics.Xfermode: int porterDuffMode>;

        goto label2;

     label1:
        i1 = <android.graphics.Xfermode: int DEFAULT>;

     label2:
        r2 = r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode>;

        if r2 == null goto label3;

        i2 = r2.<android.graphics.Xfermode: int porterDuffMode>;

        goto label4;

     label3:
        i2 = <android.graphics.Xfermode: int DEFAULT>;

     label4:
        if i1 == i2 goto label5;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetXfermode(long,int)>($l0, i1);

     label5:
        r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode> = r1;

        return r1;
    }

    private static native float nAscent(long);

    private static native int nBreakText(long, java.lang.String, boolean, float, int, float[]);

    private static native int nBreakText(long, char[], int, int, float, int, float[]);

    private static native float nDescent(long);

    private static native boolean nEqualsForTextMeasurement(long, long);

    private static native void nGetCharArrayBounds(long, char[], int, int, int, android.graphics.Rect);

    private static native int nGetEndHyphenEdit(long);

    private static native boolean nGetFillPath(long, long, long);

    private static native int nGetFlags(long);

    private static native float nGetFontMetrics(long, android.graphics.Paint$FontMetrics);

    private static native int nGetFontMetricsInt(long, android.graphics.Paint$FontMetricsInt);

    private static native int nGetHinting(long);

    private static native float nGetLetterSpacing(long);

    private static native long nGetNativeFinalizer();

    private static native int nGetOffsetForAdvance(long, char[], int, int, int, int, boolean, float);

    private static native float nGetRunAdvance(long, char[], int, int, int, int, boolean, int);

    private static native int nGetStartHyphenEdit(long);

    private static native float nGetStrikeThruPosition(long);

    private static native float nGetStrikeThruThickness(long);

    private static native void nGetStringBounds(long, java.lang.String, int, int, int, android.graphics.Rect);

    private static native int nGetStrokeCap(long);

    private static native int nGetStrokeJoin(long);

    private static native float nGetStrokeMiter(long);

    private static native float nGetStrokeWidth(long);

    private static native int nGetStyle(long);

    private static native float nGetTextAdvances(long, java.lang.String, int, int, int, int, int, float[], int);

    private static native float nGetTextAdvances(long, char[], int, int, int, int, int, float[], int);

    private static native int nGetTextAlign(long);

    private static native void nGetTextPath(long, int, java.lang.String, int, int, float, float, long);

    private static native void nGetTextPath(long, int, char[], int, int, float, float, long);

    private native int nGetTextRunCursor(long, java.lang.String, int, int, int, int, int);

    private native int nGetTextRunCursor(long, char[], int, int, int, int, int);

    private static native float nGetTextScaleX(long);

    private static native float nGetTextSize(long);

    private static native float nGetTextSkewX(long);

    private static native float nGetUnderlinePosition(long);

    private static native float nGetUnderlineThickness(long);

    private static native float nGetWordSpacing(long);

    private static native boolean nHasGlyph(long, int, java.lang.String);

    private static native boolean nHasShadowLayer(long);

    private static native long nInit();

    private static native long nInitWithPaint(long);

    private static native boolean nIsElegantTextHeight(long);

    private static native void nReset(long);

    private static native void nSet(long, long);

    private static native void nSetAlpha(long, int);

    private static native void nSetAntiAlias(long, boolean);

    private static native void nSetColor(long, int);

    private static native void nSetColor(long, long, long);

    private static native long nSetColorFilter(long, long);

    private static native void nSetDither(long, boolean);

    private static native void nSetElegantTextHeight(long, boolean);

    private static native void nSetEndHyphenEdit(long, int);

    private static native void nSetFakeBoldText(long, boolean);

    private static native void nSetFilterBitmap(long, boolean);

    private static native void nSetFlags(long, int);

    private static native void nSetFontFeatureSettings(long, java.lang.String);

    private static native void nSetHinting(long, int);

    private static native void nSetLetterSpacing(long, float);

    private static native void nSetLinearText(long, boolean);

    private static native long nSetMaskFilter(long, long);

    private static native long nSetPathEffect(long, long);

    private static native long nSetShader(long, long);

    private static native void nSetShadowLayer(long, float, float, float, long, long);

    private static native void nSetStartHyphenEdit(long, int);

    private static native void nSetStrikeThruText(long, boolean);

    private static native void nSetStrokeCap(long, int);

    private static native void nSetStrokeJoin(long, int);

    private static native void nSetStrokeMiter(long, float);

    private static native void nSetStrokeWidth(long, float);

    private static native void nSetStyle(long, int);

    private static native void nSetSubpixelText(long, boolean);

    private static native void nSetTextAlign(long, int);

    private static native int nSetTextLocales(long, java.lang.String);

    private static native void nSetTextLocalesByMinikinLocaleListId(long, int);

    private static native void nSetTextScaleX(long, float);

    private static native void nSetTextSize(long, float);

    private static native void nSetTextSkewX(long, float);

    private static native void nSetTypeface(long, long);

    private static native void nSetUnderlineText(long, boolean);

    private static native void nSetWordSpacing(long, float);

    private static native void nSetXfermode(long, int);

    private void setClassVariablesFrom(android.graphics.Paint)
    {
        android.graphics.Paint r0, r1;
        long $l0, $l1, $l3;
        android.graphics.ColorFilter $r2;
        android.graphics.MaskFilter $r3;
        android.graphics.PathEffect $r4;
        android.graphics.Shader $r5;
        android.graphics.Typeface $r6;
        android.graphics.Xfermode $r7;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4;
        int $i2;
        android.os.LocaleList $r8;
        java.lang.String $r9, $r10;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint;

        $l0 = r1.<android.graphics.Paint: long mColor>;

        r0.<android.graphics.Paint: long mColor> = $l0;

        $r2 = r1.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter>;

        r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter> = $r2;

        $r3 = r1.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter>;

        r0.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter> = $r3;

        $r4 = r1.<android.graphics.Paint: android.graphics.PathEffect mPathEffect>;

        r0.<android.graphics.Paint: android.graphics.PathEffect mPathEffect> = $r4;

        $r5 = r1.<android.graphics.Paint: android.graphics.Shader mShader>;

        r0.<android.graphics.Paint: android.graphics.Shader mShader> = $r5;

        $l1 = r1.<android.graphics.Paint: long mNativeShader>;

        r0.<android.graphics.Paint: long mNativeShader> = $l1;

        $r6 = r1.<android.graphics.Paint: android.graphics.Typeface mTypeface>;

        r0.<android.graphics.Paint: android.graphics.Typeface mTypeface> = $r6;

        $r7 = r1.<android.graphics.Paint: android.graphics.Xfermode mXfermode>;

        r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode> = $r7;

        $z0 = r1.<android.graphics.Paint: boolean mHasCompatScaling>;

        r0.<android.graphics.Paint: boolean mHasCompatScaling> = $z0;

        $f0 = r1.<android.graphics.Paint: float mCompatScaling>;

        r0.<android.graphics.Paint: float mCompatScaling> = $f0;

        $f1 = r1.<android.graphics.Paint: float mInvCompatScaling>;

        r0.<android.graphics.Paint: float mInvCompatScaling> = $f1;

        $i2 = r1.<android.graphics.Paint: int mBidiFlags>;

        r0.<android.graphics.Paint: int mBidiFlags> = $i2;

        $r8 = r1.<android.graphics.Paint: android.os.LocaleList mLocales>;

        r0.<android.graphics.Paint: android.os.LocaleList mLocales> = $r8;

        $r9 = r1.<android.graphics.Paint: java.lang.String mFontFeatureSettings>;

        r0.<android.graphics.Paint: java.lang.String mFontFeatureSettings> = $r9;

        $r10 = r1.<android.graphics.Paint: java.lang.String mFontVariationSettings>;

        r0.<android.graphics.Paint: java.lang.String mFontVariationSettings> = $r10;

        $f2 = r1.<android.graphics.Paint: float mShadowLayerRadius>;

        r0.<android.graphics.Paint: float mShadowLayerRadius> = $f2;

        $f3 = r1.<android.graphics.Paint: float mShadowLayerDx>;

        r0.<android.graphics.Paint: float mShadowLayerDx> = $f3;

        $f4 = r1.<android.graphics.Paint: float mShadowLayerDy>;

        r0.<android.graphics.Paint: float mShadowLayerDy> = $f4;

        $l3 = r1.<android.graphics.Paint: long mShadowLayerColor>;

        r0.<android.graphics.Paint: long mShadowLayerColor> = $l3;

        return;
    }

    private void syncTextLocalesWithMinikin()
    {
        android.graphics.Paint r0;
        java.lang.Object r1, $r5;
        java.lang.Integer r2, $r7;
        int i0, $i2;
        android.os.LocaleList $r3;
        java.util.HashMap $r4, $r6;
        long $l1, $l3;
        java.lang.Throwable $r9;
        java.lang.String r10;

        r0 := @this: android.graphics.Paint;

        $r3 = r0.<android.graphics.Paint: android.os.LocaleList mLocales>;

        r10 = virtualinvoke $r3.<android.os.LocaleList: java.lang.String toLanguageTags()>();

        r1 = <android.graphics.Paint: java.lang.Object sCacheLock>;

        entermonitor r1;

     label1:
        $r4 = <android.graphics.Paint: java.util.HashMap sMinikinLocaleListIdCache>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r10);

        r2 = (java.lang.Integer) $r5;

     label2:
        if r2 != null goto label5;

     label3:
        $l3 = r0.<android.graphics.Paint: long mNativePaint>;

        i0 = staticinvoke <android.graphics.Paint: int nSetTextLocales(long,java.lang.String)>($l3, r10);

        $r6 = <android.graphics.Paint: java.util.HashMap sMinikinLocaleListIdCache>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r7);

        exitmonitor r1;

     label4:
        return;

     label5:
        exitmonitor r1;

     label6:
        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        staticinvoke <android.graphics.Paint: void nSetTextLocalesByMinikinLocaleListId(long,int)>($l1, $i2);

        return;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public float ascent()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nAscent(long)>($l0);

        return $f0;
    }

    public int breakText(java.lang.CharSequence, int, int, boolean, float, float[])
    {
        android.graphics.Paint r0;
        java.lang.CharSequence r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, i15;
        boolean z0, $z1;
        float f0;
        float[] r2;
        char[] r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.String $r6;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.CharSequence;

        i13 := @parameter1: int;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        f0 := @parameter4: float;

        r2 := @parameter5: float[];

        if r1 == null goto label7;

        $i2 = i13 | i0;

        $i1 = i0 - i13;

        $i3 = $i2 | $i1;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i5 = $i4 - i0;

        $i6 = $i3 | $i5;

        if $i6 < 0 goto label6;

        $i7 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i7 == 0 goto label5;

        if i13 != i0 goto label1;

        goto label5;

     label1:
        if i13 != 0 goto label2;

        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $i11 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 != $i11 goto label2;

        $r6 = (java.lang.String) r1;

        $i12 = virtualinvoke r0.<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>($r6, z0, f0, r2);

        return $i12;

     label2:
        $i14 = i0 - i13;

        r3 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i14);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i13, i0, r3, 0);

        if z0 == 0 goto label3;

        $i10 = i0 - i13;

        i15 = virtualinvoke r0.<android.graphics.Paint: int breakText(char[],int,int,float,float[])>(r3, 0, $i10, f0, r2);

        goto label4;

     label3:
        $i8 = i0 - i13;

        $i9 = neg $i8;

        i15 = virtualinvoke r0.<android.graphics.Paint: int breakText(char[],int,int,float,float[])>(r3, 0, $i9, f0, r2);

     label4:
        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r3);

        return i15;

     label5:
        return 0;

     label6:
        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r4;
    }

    public int breakText(java.lang.String, boolean, float, float[])
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        boolean z0, $z1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        float[] r2;
        int i0, $i1, $i2, $i4, $i6;
        java.lang.IllegalArgumentException $r3;
        long $l3, $l5;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        f0 := @parameter2: float;

        r2 := @parameter3: float[];

        if r1 == null goto label4;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<android.graphics.Paint: boolean mHasCompatScaling>;

        if $z1 != 0 goto label2;

        $l5 = r0.<android.graphics.Paint: long mNativePaint>;

        $i4 = r0.<android.graphics.Paint: int mBidiFlags>;

        $i6 = staticinvoke <android.graphics.Paint: int nBreakText(long,java.lang.String,boolean,float,int,float[])>($l5, r1, z0, f0, $i4, r2);

        return $i6;

     label2:
        f1 = virtualinvoke r0.<android.graphics.Paint: float getTextSize()>();

        $f2 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f3 = $f2 * f1;

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>($f3);

        $l3 = r0.<android.graphics.Paint: long mNativePaint>;

        $f4 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f5 = f0 * $f4;

        $i2 = r0.<android.graphics.Paint: int mBidiFlags>;

        i0 = staticinvoke <android.graphics.Paint: int nBreakText(long,java.lang.String,boolean,float,int,float[])>($l3, r1, z0, $f5, $i2, r2);

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f1);

        if r2 == null goto label3;

        $f7 = r2[0];

        $f6 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f8 = $f7 * $f6;

        r2[0] = $f8;

     label3:
        return i0;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public int breakText(char[], int, int, float, float[])
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, i10, i11;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        float[] r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        boolean $z0;
        long $l6, $l8;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i10 := @parameter1: int;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        r2 := @parameter4: float[];

        if r1 == null goto label6;

        if i10 < 0 goto label5;

        $i1 = lengthof r1;

        $i2 = $i1 - i10;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        if $i2 < $i3 goto label5;

        $i4 = lengthof r1;

        if $i4 == 0 goto label4;

        if i0 != 0 goto label1;

        goto label4;

     label1:
        $z0 = r0.<android.graphics.Paint: boolean mHasCompatScaling>;

        if $z0 != 0 goto label2;

        $l8 = r0.<android.graphics.Paint: long mNativePaint>;

        $i7 = r0.<android.graphics.Paint: int mBidiFlags>;

        $i9 = staticinvoke <android.graphics.Paint: int nBreakText(long,char[],int,int,float,int,float[])>($l8, r1, i10, i0, f0, $i7, r2);

        return $i9;

     label2:
        f1 = virtualinvoke r0.<android.graphics.Paint: float getTextSize()>();

        $f2 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f3 = $f2 * f1;

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>($f3);

        $l6 = r0.<android.graphics.Paint: long mNativePaint>;

        $f4 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f5 = f0 * $f4;

        $i5 = r0.<android.graphics.Paint: int mBidiFlags>;

        i11 = staticinvoke <android.graphics.Paint: int nBreakText(long,char[],int,int,float,int,float[])>($l6, r1, i10, i0, $f5, $i5, r2);

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f1);

        if r2 == null goto label3;

        $f7 = r2[0];

        $f6 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f8 = $f7 * $f6;

        r2[0] = $f8;

     label3:
        return i11;

     label4:
        return 0;

     label5:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public void clearShadowLayer()
    {
        android.graphics.Paint r0;

        r0 := @this: android.graphics.Paint;

        virtualinvoke r0.<android.graphics.Paint: void setShadowLayer(float,float,float,int)>(0.0F, 0.0F, 0.0F, 0);

        return;
    }

    public float descent()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nDescent(long)>($l0);

        return $f0;
    }

    public boolean equalsForTextMeasurement(android.graphics.Paint)
    {
        android.graphics.Paint r0, r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $l0 = r1.<android.graphics.Paint: long mNativePaint>;

        $z0 = staticinvoke <android.graphics.Paint: boolean nEqualsForTextMeasurement(long,long)>($l1, $l0);

        return $z0;
    }

    public int getAlpha()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0, $f1;
        int $i1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mColor>;

        $f0 = staticinvoke <android.graphics.Color: float alpha(long)>($l0);

        $f1 = $f0 * 255.0F;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f1);

        return $i1;
    }

    public int getBidiFlags()
    {
        android.graphics.Paint r0;
        int $i0;

        r0 := @this: android.graphics.Paint;

        $i0 = r0.<android.graphics.Paint: int mBidiFlags>;

        return $i0;
    }

    public android.graphics.BlendMode getBlendMode()
    {
        android.graphics.Paint r0;
        android.graphics.Xfermode r1;
        int $i0;
        android.graphics.BlendMode $r2;

        r0 := @this: android.graphics.Paint;

        r1 = r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode>;

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = r1.<android.graphics.Xfermode: int porterDuffMode>;

        $r2 = staticinvoke <android.graphics.BlendMode: android.graphics.BlendMode fromValue(int)>($i0);

        return $r2;
    }

    public int getColor()
    {
        android.graphics.Paint r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mColor>;

        $i1 = staticinvoke <android.graphics.Color: int toArgb(long)>($l0);

        return $i1;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.Paint r0;
        android.graphics.ColorFilter $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter>;

        return $r1;
    }

    public long getColorLong()
    {
        android.graphics.Paint r0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mColor>;

        return $l0;
    }

    public int getEndHyphenEdit()
    {
        android.graphics.Paint r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetEndHyphenEdit(long)>($l0);

        return $i1;
    }

    public boolean getFillPath(android.graphics.Path, android.graphics.Path)
    {
        android.graphics.Paint r0;
        android.graphics.Path r1, r2;
        long $l0, $l1, $l2;
        boolean $z0;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Path;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $l1 = virtualinvoke r1.<android.graphics.Path: long readOnlyNI()>();

        $l2 = virtualinvoke r2.<android.graphics.Path: long mutateNI()>();

        $z0 = staticinvoke <android.graphics.Paint: boolean nGetFillPath(long,long,long)>($l0, $l1, $l2);

        return $z0;
    }

    public int getFlags()
    {
        android.graphics.Paint r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetFlags(long)>($l0);

        return $i1;
    }

    public java.lang.String getFontFeatureSettings()
    {
        android.graphics.Paint r0;
        java.lang.String $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: java.lang.String mFontFeatureSettings>;

        return $r1;
    }

    public float getFontMetrics(android.graphics.Paint$FontMetrics)
    {
        android.graphics.Paint r0;
        android.graphics.Paint$FontMetrics r1;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint$FontMetrics;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetFontMetrics(long,android.graphics.Paint$FontMetrics)>($l0, r1);

        return $f0;
    }

    public android.graphics.Paint$FontMetrics getFontMetrics()
    {
        android.graphics.Paint r0;
        android.graphics.Paint$FontMetrics $r2;

        r0 := @this: android.graphics.Paint;

        $r2 = new android.graphics.Paint$FontMetrics;

        specialinvoke $r2.<android.graphics.Paint$FontMetrics: void <init>()>();

        virtualinvoke r0.<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>($r2);

        return $r2;
    }

    public int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)
    {
        android.graphics.Paint r0;
        android.graphics.Paint$FontMetricsInt r1;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint$FontMetricsInt;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetFontMetricsInt(long,android.graphics.Paint$FontMetricsInt)>($l0, r1);

        return $i1;
    }

    public android.graphics.Paint$FontMetricsInt getFontMetricsInt()
    {
        android.graphics.Paint r0;
        android.graphics.Paint$FontMetricsInt $r2;

        r0 := @this: android.graphics.Paint;

        $r2 = new android.graphics.Paint$FontMetricsInt;

        specialinvoke $r2.<android.graphics.Paint$FontMetricsInt: void <init>()>();

        virtualinvoke r0.<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>($r2);

        return $r2;
    }

    public float getFontSpacing()
    {
        android.graphics.Paint r0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $f0 = virtualinvoke r0.<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>(null);

        return $f0;
    }

    public java.lang.String getFontVariationSettings()
    {
        android.graphics.Paint r0;
        java.lang.String $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: java.lang.String mFontVariationSettings>;

        return $r1;
    }

    public int getHinting()
    {
        android.graphics.Paint r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetHinting(long)>($l0);

        return $i1;
    }

    public float getLetterSpacing()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetLetterSpacing(long)>($l0);

        return $f0;
    }

    public android.graphics.MaskFilter getMaskFilter()
    {
        android.graphics.Paint r0;
        android.graphics.MaskFilter $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter>;

        return $r1;
    }

    public long getNativeInstance()
    {
        android.graphics.Paint r0;
        long $l1, $l3, $l5, $l6, $l8, l10, l11;
        byte $b2, $b4;
        android.graphics.Shader r1;
        android.graphics.ColorFilter r2;

        r0 := @this: android.graphics.Paint;

        r1 = r0.<android.graphics.Paint: android.graphics.Shader mShader>;

        if r1 != null goto label1;

        l10 = 0L;

        goto label2;

     label1:
        l10 = virtualinvoke r1.<android.graphics.Shader: long getNativeInstance()>();

     label2:
        $l1 = r0.<android.graphics.Paint: long mNativeShader>;

        $b2 = l10 cmp $l1;

        if $b2 == 0 goto label3;

        r0.<android.graphics.Paint: long mNativeShader> = l10;

        $l8 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: long nSetShader(long,long)>($l8, l10);

     label3:
        r2 = r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter>;

        if r2 != null goto label4;

        l11 = 0L;

        goto label5;

     label4:
        l11 = virtualinvoke r2.<android.graphics.ColorFilter: long getNativeInstance()>();

     label5:
        $l3 = r0.<android.graphics.Paint: long mNativeColorFilter>;

        $b4 = l11 cmp $l3;

        if $b4 == 0 goto label6;

        r0.<android.graphics.Paint: long mNativeColorFilter> = l11;

        $l6 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: long nSetColorFilter(long,long)>($l6, l11);

     label6:
        $l5 = r0.<android.graphics.Paint: long mNativePaint>;

        return $l5;
    }

    public int getOffsetForAdvance(java.lang.CharSequence, int, int, int, int, boolean, float)
    {
        android.graphics.Paint r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21;
        boolean z0;
        float f0;
        char[] r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.CharSequence;

        i20 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        f0 := @parameter6: float;

        if r1 == null goto label2;

        $i3 = i1 | i20;

        $i4 = $i3 | i0;

        $i6 = $i4 | i2;

        $i5 = i20 - i1;

        $i8 = $i6 | $i5;

        $i7 = i0 - i20;

        $i10 = $i8 | $i7;

        $i9 = i2 - i0;

        $i11 = $i10 | $i9;

        $i12 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i13 = $i12 - i2;

        $i14 = $i11 | $i13;

        if $i14 < 0 goto label1;

        $i15 = i2 - i1;

        r2 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i15);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i1, i2, r2, 0);

        $i18 = i20 - i1;

        $i17 = i0 - i1;

        $i16 = i2 - i1;

        i21 = virtualinvoke r0.<android.graphics.Paint: int getOffsetForAdvance(char[],int,int,int,int,boolean,float)>(r2, $i18, $i17, 0, $i16, z0, f0);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r2);

        $i19 = i21 + i1;

        return $i19;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public int getOffsetForAdvance(char[], int, int, int, int, boolean, float)
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17;
        boolean z0;
        float f0;
        java.lang.IllegalArgumentException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        long $l16;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        f0 := @parameter6: float;

        if r1 == null goto label2;

        $i4 = i2 | i0;

        $i5 = $i4 | i1;

        $i7 = $i5 | i3;

        $i6 = i0 - i2;

        $i9 = $i7 | $i6;

        $i8 = i1 - i0;

        $i11 = $i9 | $i8;

        $i10 = i3 - i1;

        $i14 = $i11 | $i10;

        $i12 = lengthof r1;

        $i13 = $i12 - i3;

        $i15 = $i14 | $i13;

        if $i15 < 0 goto label1;

        $l16 = r0.<android.graphics.Paint: long mNativePaint>;

        $i17 = staticinvoke <android.graphics.Paint: int nGetOffsetForAdvance(long,char[],int,int,int,int,boolean,float)>($l16, r1, i0, i1, i2, i3, z0, f0);

        return $i17;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r2;
    }

    public android.graphics.PathEffect getPathEffect()
    {
        android.graphics.Paint r0;
        android.graphics.PathEffect $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.graphics.PathEffect mPathEffect>;

        return $r1;
    }

    public android.graphics.Rasterizer getRasterizer()
    {
        android.graphics.Paint r0;

        r0 := @this: android.graphics.Paint;

        return null;
    }

    public float getRunAdvance(java.lang.CharSequence, int, int, int, int, boolean, int)
    {
        android.graphics.Paint r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        boolean z0;
        char[] r2;
        float f0;
        java.lang.IllegalArgumentException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        if r1 == null goto label3;

        $i5 = i2 | i0;

        $i6 = $i5 | i4;

        $i7 = $i6 | i1;

        $i9 = $i7 | i3;

        $i8 = i0 - i2;

        $i11 = $i9 | $i8;

        $i10 = i4 - i0;

        $i13 = $i11 | $i10;

        $i12 = i1 - i4;

        $i15 = $i13 | $i12;

        $i14 = i3 - i1;

        $i16 = $i15 | $i14;

        $i17 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i18 = $i17 - i3;

        $i19 = $i16 | $i18;

        if $i19 < 0 goto label2;

        if i1 != i0 goto label1;

        return 0.0F;

     label1:
        $i20 = i3 - i2;

        r2 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i20);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i2, i3, r2, 0);

        $i24 = i0 - i2;

        $i23 = i1 - i2;

        $i22 = i3 - i2;

        $i21 = i4 - i2;

        f0 = virtualinvoke r0.<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>(r2, $i24, $i23, 0, $i22, z0, $i21);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r2);

        return f0;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public float getRunAdvance(char[], int, int, int, int, boolean, int)
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        boolean z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        long $l20;
        float $f0;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        if r1 == null goto label3;

        $i5 = i2 | i0;

        $i6 = $i5 | i4;

        $i7 = $i6 | i1;

        $i9 = $i7 | i3;

        $i8 = i0 - i2;

        $i11 = $i9 | $i8;

        $i10 = i4 - i0;

        $i13 = $i11 | $i10;

        $i12 = i1 - i4;

        $i15 = $i13 | $i12;

        $i14 = i3 - i1;

        $i18 = $i15 | $i14;

        $i16 = lengthof r1;

        $i17 = $i16 - i3;

        $i19 = $i18 | $i17;

        if $i19 < 0 goto label2;

        if i1 != i0 goto label1;

        return 0.0F;

     label1:
        $l20 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetRunAdvance(long,char[],int,int,int,int,boolean,int)>($l20, r1, i0, i1, i2, i3, z0, i4);

        return $f0;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r2;
    }

    public android.graphics.Shader getShader()
    {
        android.graphics.Paint r0;
        android.graphics.Shader $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.graphics.Shader mShader>;

        return $r1;
    }

    public int getShadowLayerColor()
    {
        android.graphics.Paint r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mShadowLayerColor>;

        $i1 = staticinvoke <android.graphics.Color: int toArgb(long)>($l0);

        return $i1;
    }

    public long getShadowLayerColorLong()
    {
        android.graphics.Paint r0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mShadowLayerColor>;

        return $l0;
    }

    public float getShadowLayerDx()
    {
        android.graphics.Paint r0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $f0 = r0.<android.graphics.Paint: float mShadowLayerDx>;

        return $f0;
    }

    public float getShadowLayerDy()
    {
        android.graphics.Paint r0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $f0 = r0.<android.graphics.Paint: float mShadowLayerDy>;

        return $f0;
    }

    public float getShadowLayerRadius()
    {
        android.graphics.Paint r0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $f0 = r0.<android.graphics.Paint: float mShadowLayerRadius>;

        return $f0;
    }

    public int getStartHyphenEdit()
    {
        android.graphics.Paint r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetStartHyphenEdit(long)>($l0);

        return $i1;
    }

    public float getStrikeThruPosition()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetStrikeThruPosition(long)>($l0);

        return $f0;
    }

    public float getStrikeThruThickness()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetStrikeThruThickness(long)>($l0);

        return $f0;
    }

    public android.graphics.Paint$Cap getStrokeCap()
    {
        android.graphics.Paint r0;
        long $l0;
        android.graphics.Paint$Cap[] $r1;
        int $i1;
        android.graphics.Paint$Cap $r2;

        r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Cap[] sCapArray>;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetStrokeCap(long)>($l0);

        $r2 = $r1[$i1];

        return $r2;
    }

    public android.graphics.Paint$Join getStrokeJoin()
    {
        android.graphics.Paint r0;
        long $l0;
        android.graphics.Paint$Join[] $r1;
        int $i1;
        android.graphics.Paint$Join $r2;

        r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Join[] sJoinArray>;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetStrokeJoin(long)>($l0);

        $r2 = $r1[$i1];

        return $r2;
    }

    public float getStrokeMiter()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetStrokeMiter(long)>($l0);

        return $f0;
    }

    public float getStrokeWidth()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetStrokeWidth(long)>($l0);

        return $f0;
    }

    public android.graphics.Paint$Style getStyle()
    {
        android.graphics.Paint r0;
        long $l0;
        android.graphics.Paint$Style[] $r1;
        int $i1;
        android.graphics.Paint$Style $r2;

        r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Style[] sStyleArray>;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetStyle(long)>($l0);

        $r2 = $r1[$i1];

        return $r2;
    }

    public android.graphics.Paint$Align getTextAlign()
    {
        android.graphics.Paint r0;
        long $l0;
        android.graphics.Paint$Align[] $r1;
        int $i1;
        android.graphics.Paint$Align $r2;

        r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Align[] sAlignArray>;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $i1 = staticinvoke <android.graphics.Paint: int nGetTextAlign(long)>($l0);

        $r2 = $r1[$i1];

        return $r2;
    }

    public void getTextBounds(java.lang.CharSequence, int, int, android.graphics.Rect)
    {
        android.graphics.Paint r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.Rect r2;
        char[] r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Rect;

        $i3 = i0 | i1;

        $i2 = i1 - i0;

        $i4 = $i3 | $i2;

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i6 = $i5 - i1;

        $i7 = $i4 | $i6;

        if $i7 < 0 goto label2;

        if r2 == null goto label1;

        $i8 = i1 - i0;

        r3 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i8);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i0, i1, r3, 0);

        $i9 = i1 - i0;

        virtualinvoke r0.<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>(r3, 0, $i9, r2);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r3);

        return;

     label1:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("need bounds Rect");

        throw $r5;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;
    }

    public void getTextBounds(java.lang.String, int, int, android.graphics.Rect)
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.Rect r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.NullPointerException $r4;
        long $l9;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Rect;

        $i3 = i0 | i1;

        $i2 = i1 - i0;

        $i4 = $i3 | $i2;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 - i1;

        $i7 = $i4 | $i6;

        if $i7 < 0 goto label2;

        if r2 == null goto label1;

        $l9 = r0.<android.graphics.Paint: long mNativePaint>;

        $i8 = r0.<android.graphics.Paint: int mBidiFlags>;

        staticinvoke <android.graphics.Paint: void nGetStringBounds(long,java.lang.String,int,int,int,android.graphics.Rect)>($l9, r1, i0, i1, $i8, r2);

        return;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("need bounds Rect");

        throw $r4;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;
    }

    public void getTextBounds(char[], int, int, android.graphics.Rect)
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.graphics.Rect r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.NullPointerException $r4;
        long $l6;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Rect;

        $i2 = i0 | i1;

        if $i2 < 0 goto label2;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 > $i3 goto label2;

        if r2 == null goto label1;

        $l6 = r0.<android.graphics.Paint: long mNativePaint>;

        $i5 = r0.<android.graphics.Paint: int mBidiFlags>;

        staticinvoke <android.graphics.Paint: void nGetCharArrayBounds(long,char[],int,int,int,android.graphics.Rect)>($l6, r1, i0, i1, $i5, r2);

        return;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("need bounds Rect");

        throw $r4;

     label2:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;
    }

    public java.util.Locale getTextLocale()
    {
        android.graphics.Paint r0;
        android.os.LocaleList $r1;
        java.util.Locale $r2;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.os.LocaleList mLocales>;

        $r2 = virtualinvoke $r1.<android.os.LocaleList: java.util.Locale get(int)>(0);

        return $r2;
    }

    public android.os.LocaleList getTextLocales()
    {
        android.graphics.Paint r0;
        android.os.LocaleList $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.os.LocaleList mLocales>;

        return $r1;
    }

    public void getTextPath(java.lang.String, int, int, float, float, android.graphics.Path)
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        float f0, f1;
        android.graphics.Path r2;
        java.lang.IndexOutOfBoundsException $r3;
        long $l8, $l10;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Path;

        $i3 = i0 | i1;

        $i2 = i1 - i0;

        $i4 = $i3 | $i2;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 - i1;

        $i7 = $i4 | $i6;

        if $i7 < 0 goto label1;

        $l8 = r0.<android.graphics.Paint: long mNativePaint>;

        $i9 = r0.<android.graphics.Paint: int mBidiFlags>;

        $l10 = virtualinvoke r2.<android.graphics.Path: long mutateNI()>();

        staticinvoke <android.graphics.Paint: void nGetTextPath(long,int,java.lang.String,int,int,float,float,long)>($l8, $i9, r1, i0, i1, f0, f1, $l10);

        return;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;
    }

    public void getTextPath(char[], int, int, float, float, android.graphics.Path)
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i4, $i6;
        float f0, f1;
        android.graphics.Path r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        long $l5, $l7;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Path;

        $i2 = i0 | i1;

        if $i2 < 0 goto label1;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 > $i3 goto label1;

        $l5 = r0.<android.graphics.Paint: long mNativePaint>;

        $i6 = r0.<android.graphics.Paint: int mBidiFlags>;

        $l7 = virtualinvoke r2.<android.graphics.Path: long mutateNI()>();

        staticinvoke <android.graphics.Paint: void nGetTextPath(long,int,char[],int,int,float,float,long)>($l5, $i6, r1, i0, i1, f0, f1, $l7);

        return;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;
    }

    public float getTextRunAdvances(char[], int, int, int, int, boolean, float[], int)
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i31;
        boolean z0, $z1;
        float[] r2;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        java.lang.IllegalArgumentException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        long l27, l29;
        byte b28, b30;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i25 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        r2 := @parameter6: float[];

        i3 := @parameter7: int;

        if r1 == null goto label13;

        i4 = lengthof r1;

        if r2 != null goto label01;

        i26 = 0;

        goto label02;

     label01:
        $i6 = lengthof r2;

        $i5 = i3 + i0;

        i26 = $i6 - $i5;

     label02:
        $i7 = i25 | i0;

        $i8 = $i7 | i1;

        $i9 = $i8 | i2;

        $i11 = $i9 | i3;

        $i10 = i25 - i1;

        $i13 = $i11 | $i10;

        $i12 = i2 - i0;

        $i17 = $i13 | $i12;

        $i15 = i1 + i2;

        $i14 = i25 + i0;

        $i16 = $i15 - $i14;

        $i20 = $i17 | $i16;

        $i18 = i1 + i2;

        $i19 = i4 - $i18;

        $i21 = $i20 | $i19;

        $i22 = $i21 | i26;

        if $i22 < 0 goto label12;

        $i23 = lengthof r1;

        if $i23 == 0 goto label11;

        if i0 != 0 goto label03;

        goto label11;

     label03:
        $z1 = r0.<android.graphics.Paint: boolean mHasCompatScaling>;

        if $z1 != 0 goto label06;

        l27 = r0.<android.graphics.Paint: long mNativePaint>;

        if z0 == 0 goto label04;

        b28 = 5;

        goto label05;

     label04:
        b28 = 4;

     label05:
        $f9 = staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,char[],int,int,int,int,int,float[],int)>(l27, r1, i25, i0, i1, i2, b28, r2, i3);

        return $f9;

     label06:
        f0 = virtualinvoke r0.<android.graphics.Paint: float getTextSize()>();

        $f2 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f3 = $f2 * f0;

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>($f3);

        l29 = r0.<android.graphics.Paint: long mNativePaint>;

        if z0 == 0 goto label07;

        b30 = 5;

        goto label08;

     label07:
        b30 = 4;

     label08:
        f1 = staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,char[],int,int,int,int,int,float[],int)>(l29, r1, i25, i0, i1, i2, b30, r2, i3);

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f0);

        if r2 == null goto label10;

        i31 = i3;

     label09:
        $i24 = i3 + i0;

        if i31 >= $i24 goto label10;

        $f7 = r2[i31];

        $f6 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f8 = $f7 * $f6;

        r2[i31] = $f8;

        i31 = i31 + 1;

        goto label09;

     label10:
        $f4 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f5 = $f4 * f1;

        return $f5;

     label11:
        return 0.0F;

     label12:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label13:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public int getTextRunCursor(java.lang.CharSequence, int, int, boolean, int, int)
    {
        android.graphics.Paint r0;
        java.lang.CharSequence r1;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, i9, $i10;
        char[] r2;
        android.text.GraphicsOperations $r3;
        java.lang.String $r4;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.CharSequence;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        z0 := @parameter3: boolean;

        i6 := @parameter4: int;

        i0 := @parameter5: int;

        $z1 = r1 instanceof java.lang.String;

        if $z1 != 0 goto label5;

        $z2 = r1 instanceof android.text.SpannedString;

        if $z2 != 0 goto label5;

        $z3 = r1 instanceof android.text.SpannableString;

        if $z3 == 0 goto label1;

        goto label5;

     label1:
        $z4 = r1 instanceof android.text.GraphicsOperations;

        if $z4 == 0 goto label2;

        $r3 = (android.text.GraphicsOperations) r1;

        $i3 = interfaceinvoke $r3.<android.text.GraphicsOperations: int getTextRunCursor(int,int,boolean,int,int,android.graphics.Paint)>(i4, i5, z0, i6, i0, r0);

        return $i3;

     label2:
        i1 = i5 - i4;

        r2 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>(i1);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i4, i5, r2, 0);

        $i2 = i6 - i4;

        i7 = virtualinvoke r0.<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>(r2, 0, i1, z0, $i2, i0);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r2);

        if i7 != -1 goto label3;

        i9 = -1;

        goto label4;

     label3:
        i9 = i7 + i4;

     label4:
        return i9;

     label5:
        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $i10 = virtualinvoke r0.<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,boolean,int,int)>($r4, i4, i5, z0, i6, i0);

        return $i10;
    }

    public int getTextRunCursor(java.lang.String, int, int, boolean, int, int)
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        boolean z0;
        long l4;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $i5 = i0 | i1;

        $i7 = $i5 | i2;

        $i6 = i1 - i0;

        $i9 = $i7 | $i6;

        $i8 = i2 - i0;

        $i11 = $i9 | $i8;

        $i10 = i1 - i2;

        $i12 = $i11 | $i10;

        $i13 = virtualinvoke r1.<java.lang.String: int length()>();

        $i14 = $i13 - i1;

        $i15 = $i12 | $i14;

        $i16 = $i15 | i3;

        if $i16 < 0 goto label1;

        if i3 > 4 goto label1;

        l4 = r0.<android.graphics.Paint: long mNativePaint>;

        i18 = (int) z0;

        $i17 = specialinvoke r0.<android.graphics.Paint: int nGetTextRunCursor(long,java.lang.String,int,int,int,int,int)>(l4, r1, i0, i1, i18, i2, i3);

        return $i17;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;
    }

    public int getTextRunCursor(char[], int, int, boolean, int, int)
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        boolean z0;
        long l5;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 = i0 + i1;

        $i6 = i0 | i4;

        $i8 = $i6 | i2;

        $i7 = i4 - i0;

        $i10 = $i8 | $i7;

        $i9 = i2 - i0;

        $i12 = $i10 | $i9;

        $i11 = i4 - i2;

        $i15 = $i12 | $i11;

        $i13 = lengthof r1;

        $i14 = $i13 - i4;

        $i16 = $i15 | $i14;

        $i17 = $i16 | i3;

        if $i17 < 0 goto label1;

        if i3 > 4 goto label1;

        l5 = r0.<android.graphics.Paint: long mNativePaint>;

        i19 = (int) z0;

        $i18 = specialinvoke r0.<android.graphics.Paint: int nGetTextRunCursor(long,char[],int,int,int,int,int)>(l5, r1, i0, i1, i19, i2, i3);

        return $i18;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;
    }

    public float getTextScaleX()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetTextScaleX(long)>($l0);

        return $f0;
    }

    public float getTextSize()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetTextSize(long)>($l0);

        return $f0;
    }

    public float getTextSkewX()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetTextSkewX(long)>($l0);

        return $f0;
    }

    public int getTextWidths(java.lang.CharSequence, int, int, float[])
    {
        android.graphics.Paint r0;
        java.lang.CharSequence r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        float[] r2;
        char[] r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.ArrayIndexOutOfBoundsException $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r7, $r9;
        android.text.GraphicsOperations $r8;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.CharSequence;

        i15 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: float[];

        if r1 == null goto label9;

        $i2 = i15 | i0;

        $i1 = i0 - i15;

        $i3 = $i2 | $i1;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i5 = $i4 - i0;

        $i6 = $i3 | $i5;

        if $i6 < 0 goto label8;

        $i8 = i0 - i15;

        $i7 = lengthof r2;

        if $i8 > $i7 goto label7;

        $i9 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i9 == 0 goto label6;

        if i15 != i0 goto label1;

        goto label6;

     label1:
        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r9 = (java.lang.String) r1;

        $i14 = virtualinvoke r0.<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>($r9, i15, i0, r2);

        return $i14;

     label2:
        $z1 = r1 instanceof android.text.SpannedString;

        if $z1 != 0 goto label5;

        $z2 = r1 instanceof android.text.SpannableString;

        if $z2 == 0 goto label3;

        goto label5;

     label3:
        $z3 = r1 instanceof android.text.GraphicsOperations;

        if $z3 == 0 goto label4;

        $r8 = (android.text.GraphicsOperations) r1;

        $i13 = interfaceinvoke $r8.<android.text.GraphicsOperations: int getTextWidths(int,int,float[],android.graphics.Paint)>(i15, i0, r2, r0);

        return $i13;

     label4:
        $i11 = i0 - i15;

        r3 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i11);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i15, i0, r3, 0);

        $i12 = i0 - i15;

        i16 = virtualinvoke r0.<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>(r3, 0, $i12, r2);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r3);

        return i16;

     label5:
        $r7 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $i10 = virtualinvoke r0.<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>($r7, i15, i0, r2);

        return $i10;

     label6:
        return 0;

     label7:
        $r6 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label8:
        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label9:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r4;
    }

    public int getTextWidths(java.lang.String, int, int, float[])
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i17, i18;
        float[] r2;
        float f0, $f1, $f2, $f4, $f5, $f6;
        java.lang.IllegalArgumentException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        boolean $z0;
        long $l12, $l16;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: float[];

        if r1 == null goto label8;

        $i3 = i0 | i1;

        $i2 = i1 - i0;

        $i4 = $i3 | $i2;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 - i1;

        $i7 = $i4 | $i6;

        if $i7 < 0 goto label7;

        $i9 = i1 - i0;

        $i8 = lengthof r2;

        if $i9 > $i8 goto label6;

        $i10 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i10 == 0 goto label5;

        if i0 != i1 goto label1;

        goto label5;

     label1:
        $z0 = r0.<android.graphics.Paint: boolean mHasCompatScaling>;

        if $z0 != 0 goto label2;

        $l16 = r0.<android.graphics.Paint: long mNativePaint>;

        $i15 = r0.<android.graphics.Paint: int mBidiFlags>;

        staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,java.lang.String,int,int,int,int,int,float[],int)>($l16, r1, i0, i1, i0, i1, $i15, r2, 0);

        $i17 = i1 - i0;

        return $i17;

     label2:
        f0 = virtualinvoke r0.<android.graphics.Paint: float getTextSize()>();

        $f1 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f2 = $f1 * f0;

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>($f2);

        $l12 = r0.<android.graphics.Paint: long mNativePaint>;

        $i11 = r0.<android.graphics.Paint: int mBidiFlags>;

        staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,java.lang.String,int,int,int,int,int,float[],int)>($l12, r1, i0, i1, i0, i1, $i11, r2, 0);

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f0);

        i18 = 0;

     label3:
        $i13 = i1 - i0;

        if i18 >= $i13 goto label4;

        $f5 = r2[i18];

        $f4 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f6 = $f5 * $f4;

        r2[i18] = $f6;

        i18 = i18 + 1;

        goto label3;

     label4:
        $i14 = i1 - i0;

        return $i14;

     label5:
        return 0;

     label6:
        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label7:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public int getTextWidths(java.lang.String, float[])
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        float[] r2;
        int $i0, $i1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: float[];

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>(r1, 0, $i0, r2);

        return $i1;
    }

    public int getTextWidths(char[], int, int, float[])
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, i10, i11;
        float[] r2;
        float f0, $f1, $f2, $f4, $f5, $f6;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        long $l7, $l9;
        java.lang.ArrayIndexOutOfBoundsException $r4;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i10 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: float[];

        if r1 == null goto label7;

        $i1 = i10 | i0;

        if $i1 < 0 goto label6;

        $i3 = i10 + i0;

        $i2 = lengthof r1;

        if $i3 > $i2 goto label6;

        $i4 = lengthof r2;

        if i0 > $i4 goto label6;

        $i5 = lengthof r1;

        if $i5 == 0 goto label5;

        if i0 != 0 goto label1;

        goto label5;

     label1:
        $z0 = r0.<android.graphics.Paint: boolean mHasCompatScaling>;

        if $z0 != 0 goto label2;

        $l9 = r0.<android.graphics.Paint: long mNativePaint>;

        $i8 = r0.<android.graphics.Paint: int mBidiFlags>;

        staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,char[],int,int,int,int,int,float[],int)>($l9, r1, i10, i0, i10, i0, $i8, r2, 0);

        return i0;

     label2:
        f0 = virtualinvoke r0.<android.graphics.Paint: float getTextSize()>();

        $f1 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f2 = $f1 * f0;

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>($f2);

        $l7 = r0.<android.graphics.Paint: long mNativePaint>;

        $i6 = r0.<android.graphics.Paint: int mBidiFlags>;

        staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,char[],int,int,int,int,int,float[],int)>($l7, r1, i10, i0, i10, i0, $i6, r2, 0);

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f0);

        i11 = 0;

     label3:
        if i11 >= i0 goto label4;

        $f5 = r2[i11];

        $f4 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f6 = $f5 * $f4;

        r2[i11] = $f6;

        i11 = i11 + 1;

        goto label3;

     label4:
        return i0;

     label5:
        return 0;

     label6:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public android.graphics.Typeface getTypeface()
    {
        android.graphics.Paint r0;
        android.graphics.Typeface $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.graphics.Typeface mTypeface>;

        return $r1;
    }

    public float getUnderlinePosition()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetUnderlinePosition(long)>($l0);

        return $f0;
    }

    public float getUnderlineThickness()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetUnderlineThickness(long)>($l0);

        return $f0;
    }

    public float getWordSpacing()
    {
        android.graphics.Paint r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $f0 = staticinvoke <android.graphics.Paint: float nGetWordSpacing(long)>($l0);

        return $f0;
    }

    public android.graphics.Xfermode getXfermode()
    {
        android.graphics.Paint r0;
        android.graphics.Xfermode $r1;

        r0 := @this: android.graphics.Paint;

        $r1 = r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode>;

        return $r1;
    }

    public boolean hasGlyph(java.lang.String)
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        int $i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $i0 = r0.<android.graphics.Paint: int mBidiFlags>;

        $z0 = staticinvoke <android.graphics.Paint: boolean nHasGlyph(long,int,java.lang.String)>($l1, $i0, r1);

        return $z0;
    }

    public boolean hasShadowLayer()
    {
        android.graphics.Paint r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $z0 = staticinvoke <android.graphics.Paint: boolean nHasShadowLayer(long)>($l0);

        return $z0;
    }

    public final boolean isAntiAlias()
    {
        android.graphics.Paint r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isDither()
    {
        android.graphics.Paint r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isElegantTextHeight()
    {
        android.graphics.Paint r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        $z0 = staticinvoke <android.graphics.Paint: boolean nIsElegantTextHeight(long)>($l0);

        return $z0;
    }

    public final boolean isFakeBoldText()
    {
        android.graphics.Paint r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isFilterBitmap()
    {
        android.graphics.Paint r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isLinearText()
    {
        android.graphics.Paint r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isStrikeThruText()
    {
        android.graphics.Paint r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isSubpixelText()
    {
        android.graphics.Paint r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        $i1 = $i0 & 128;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isUnderlineText()
    {
        android.graphics.Paint r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke r0.<android.graphics.Paint: int getFlags()>();

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public float measureText(java.lang.CharSequence, int, int)
    {
        android.graphics.Paint r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        char[] r2;
        float f0, $f1, $f2, $f3;
        java.lang.IllegalArgumentException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r7;
        android.text.GraphicsOperations $r6;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label8;

        $i3 = i0 | i1;

        $i2 = i1 - i0;

        $i4 = $i3 | $i2;

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i6 = $i5 - i1;

        $i7 = $i4 | $i6;

        if $i7 < 0 goto label7;

        $i8 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i8 == 0 goto label6;

        if i0 != i1 goto label1;

        goto label6;

     label1:
        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r7 = (java.lang.String) r1;

        $f3 = virtualinvoke r0.<android.graphics.Paint: float measureText(java.lang.String,int,int)>($r7, i0, i1);

        return $f3;

     label2:
        $z1 = r1 instanceof android.text.SpannedString;

        if $z1 != 0 goto label5;

        $z2 = r1 instanceof android.text.SpannableString;

        if $z2 == 0 goto label3;

        goto label5;

     label3:
        $z3 = r1 instanceof android.text.GraphicsOperations;

        if $z3 == 0 goto label4;

        $r6 = (android.text.GraphicsOperations) r1;

        $f2 = interfaceinvoke $r6.<android.text.GraphicsOperations: float measureText(int,int,android.graphics.Paint)>(i0, i1, r0);

        return $f2;

     label4:
        $i9 = i1 - i0;

        r2 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i9);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i0, i1, r2, 0);

        $i10 = i1 - i0;

        f0 = virtualinvoke r0.<android.graphics.Paint: float measureText(char[],int,int)>(r2, 0, $i10);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r2);

        return f0;

     label5:
        $r5 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $f1 = virtualinvoke r0.<android.graphics.Paint: float measureText(java.lang.String,int,int)>($r5, i0, i1);

        return $f1;

     label6:
        return 0.0F;

     label7:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r3;
    }

    public float measureText(java.lang.String)
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        float $f0;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $f0 = virtualinvoke r0.<android.graphics.Paint: float measureText(java.lang.String,int,int)>(r1, 0, $i0);

        return $f0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r2;
    }

    public float measureText(java.lang.String, int, int)
    {
        android.graphics.Paint r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        java.lang.IllegalArgumentException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        boolean $z0;
        long $l10, $l12;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label5;

        $i3 = i0 | i1;

        $i2 = i1 - i0;

        $i4 = $i3 | $i2;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 - i1;

        $i7 = $i4 | $i6;

        if $i7 < 0 goto label4;

        $i8 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i8 == 0 goto label3;

        if i0 != i1 goto label1;

        goto label3;

     label1:
        $z0 = r0.<android.graphics.Paint: boolean mHasCompatScaling>;

        if $z0 != 0 goto label2;

        $l12 = r0.<android.graphics.Paint: long mNativePaint>;

        $i11 = r0.<android.graphics.Paint: int mBidiFlags>;

        $f7 = staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,java.lang.String,int,int,int,int,int,float[],int)>($l12, r1, i0, i1, i0, i1, $i11, null, 0);

        $d2 = (double) $f7;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $f8 = (float) $d3;

        return $f8;

     label2:
        f0 = virtualinvoke r0.<android.graphics.Paint: float getTextSize()>();

        $f2 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f3 = $f2 * f0;

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>($f3);

        $l10 = r0.<android.graphics.Paint: long mNativePaint>;

        $i9 = r0.<android.graphics.Paint: int mBidiFlags>;

        f1 = staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,java.lang.String,int,int,int,int,int,float[],int)>($l10, r1, i0, i1, i0, i1, $i9, null, 0);

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f0);

        $f4 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f5 = $f4 * f1;

        $d0 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $f6 = (float) $d1;

        return $f6;

     label3:
        return 0.0F;

     label4:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r2;
    }

    public float measureText(char[], int, int)
    {
        android.graphics.Paint r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        java.lang.IllegalArgumentException $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        boolean $z0;
        long $l7, $l9;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label5;

        $i2 = i0 | i1;

        if $i2 < 0 goto label4;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 > $i3 goto label4;

        $i5 = lengthof r1;

        if $i5 == 0 goto label3;

        if i1 != 0 goto label1;

        goto label3;

     label1:
        $z0 = r0.<android.graphics.Paint: boolean mHasCompatScaling>;

        if $z0 != 0 goto label2;

        $l9 = r0.<android.graphics.Paint: long mNativePaint>;

        $i8 = r0.<android.graphics.Paint: int mBidiFlags>;

        $f7 = staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,char[],int,int,int,int,int,float[],int)>($l9, r1, i0, i1, i0, i1, $i8, null, 0);

        $d2 = (double) $f7;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $f8 = (float) $d3;

        return $f8;

     label2:
        f0 = virtualinvoke r0.<android.graphics.Paint: float getTextSize()>();

        $f2 = r0.<android.graphics.Paint: float mCompatScaling>;

        $f3 = $f2 * f0;

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>($f3);

        $l7 = r0.<android.graphics.Paint: long mNativePaint>;

        $i6 = r0.<android.graphics.Paint: int mBidiFlags>;

        f1 = staticinvoke <android.graphics.Paint: float nGetTextAdvances(long,char[],int,int,int,int,int,float[],int)>($l7, r1, i0, i1, i0, i1, $i6, null, 0);

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f0);

        $f4 = r0.<android.graphics.Paint: float mInvCompatScaling>;

        $f5 = $f4 * f1;

        $d0 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $f6 = (float) $d1;

        return $f6;

     label3:
        return 0.0F;

     label4:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r2;
    }

    public void reset()
    {
        android.graphics.Paint r0;
        long $l0, $l1, $l2;
        android.os.LocaleList $r1;

        r0 := @this: android.graphics.Paint;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nReset(long)>($l0);

        virtualinvoke r0.<android.graphics.Paint: void setFlags(int)>(1282);

        $l1 = staticinvoke <android.graphics.Color: long pack(int)>(-16777216);

        r0.<android.graphics.Paint: long mColor> = $l1;

        r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter> = null;

        r0.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter> = null;

        r0.<android.graphics.Paint: android.graphics.PathEffect mPathEffect> = null;

        r0.<android.graphics.Paint: android.graphics.Shader mShader> = null;

        r0.<android.graphics.Paint: long mNativeShader> = 0L;

        r0.<android.graphics.Paint: android.graphics.Typeface mTypeface> = null;

        r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode> = null;

        r0.<android.graphics.Paint: boolean mHasCompatScaling> = 0;

        r0.<android.graphics.Paint: float mCompatScaling> = 1.0F;

        r0.<android.graphics.Paint: float mInvCompatScaling> = 1.0F;

        r0.<android.graphics.Paint: int mBidiFlags> = 2;

        $r1 = staticinvoke <android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>();

        virtualinvoke r0.<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>($r1);

        virtualinvoke r0.<android.graphics.Paint: void setElegantTextHeight(boolean)>(0);

        r0.<android.graphics.Paint: java.lang.String mFontFeatureSettings> = null;

        r0.<android.graphics.Paint: java.lang.String mFontVariationSettings> = null;

        r0.<android.graphics.Paint: float mShadowLayerRadius> = 0.0F;

        r0.<android.graphics.Paint: float mShadowLayerDx> = 0.0F;

        r0.<android.graphics.Paint: float mShadowLayerDy> = 0.0F;

        $l2 = staticinvoke <android.graphics.Color: long pack(int)>(0);

        r0.<android.graphics.Paint: long mShadowLayerColor> = $l2;

        return;
    }

    public void set(android.graphics.Paint)
    {
        android.graphics.Paint r0, r1;
        long $l0, $l1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint;

        if r0 == r1 goto label1;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $l0 = r1.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSet(long,long)>($l1, $l0);

        specialinvoke r0.<android.graphics.Paint: void setClassVariablesFrom(android.graphics.Paint)>(r1);

     label1:
        return;
    }

    public void setARGB(int, int, int, int)
    {
        android.graphics.Paint r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i5 = i0 << 24;

        $i4 = i1 << 16;

        $i7 = $i5 | $i4;

        $i6 = i2 << 8;

        $i8 = $i7 | $i6;

        $i9 = $i8 | i3;

        virtualinvoke r0.<android.graphics.Paint: void setColor(int)>($i9);

        return;
    }

    public void setAlpha(int)
    {
        android.graphics.Paint r0;
        int i0;
        android.graphics.ColorSpace r1;
        long $l1, $l2, $l3, $l4, $l5, $l6;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Paint: long mColor>;

        r1 = staticinvoke <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>($l1);

        $l2 = r0.<android.graphics.Paint: long mColor>;

        $f0 = staticinvoke <android.graphics.Color: float red(long)>($l2);

        $l3 = r0.<android.graphics.Paint: long mColor>;

        $f1 = staticinvoke <android.graphics.Color: float green(long)>($l3);

        $l4 = r0.<android.graphics.Paint: long mColor>;

        $f2 = staticinvoke <android.graphics.Color: float blue(long)>($l4);

        $f3 = (float) i0;

        $f4 = $f3 * 0.003921569F;

        $l5 = staticinvoke <android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)>($f0, $f1, $f2, $f4, r1);

        r0.<android.graphics.Paint: long mColor> = $l5;

        $l6 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetAlpha(long,int)>($l6, i0);

        return;
    }

    public void setAntiAlias(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetAntiAlias(long,boolean)>($l0, z0);

        return;
    }

    public void setBidiFlags(int)
    {
        android.graphics.Paint r0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        int i0, i1;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        i1 = i0 & 7;

        if i1 > 5 goto label1;

        r0.<android.graphics.Paint: int mBidiFlags> = i1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown bidi flag: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void setBlendMode(android.graphics.BlendMode)
    {
        android.graphics.Paint r0;
        android.graphics.BlendMode r2;
        android.graphics.Xfermode r3;

        r0 := @this: android.graphics.Paint;

        r2 := @parameter0: android.graphics.BlendMode;

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<android.graphics.BlendMode: android.graphics.Xfermode getXfermode()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        specialinvoke r0.<android.graphics.Paint: android.graphics.Xfermode installXfermode(android.graphics.Xfermode)>(r3);

        return;
    }

    public void setColor(int)
    {
        android.graphics.Paint r0;
        int i0;
        long $l1, $l2;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetColor(long,int)>($l1, i0);

        $l2 = staticinvoke <android.graphics.Color: long pack(int)>(i0);

        r0.<android.graphics.Paint: long mColor> = $l2;

        return;
    }

    public void setColor(long)
    {
        android.graphics.Paint r0;
        long l0, $l1, $l2;
        android.graphics.ColorSpace r1;

        r0 := @this: android.graphics.Paint;

        l0 := @parameter0: long;

        r1 = staticinvoke <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>(l0);

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $l2 = virtualinvoke r1.<android.graphics.ColorSpace: long getNativeInstance()>();

        staticinvoke <android.graphics.Paint: void nSetColor(long,long,long)>($l1, $l2, l0);

        r0.<android.graphics.Paint: long mColor> = l0;

        return;
    }

    public android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.Paint r0;
        android.graphics.ColorFilter r1, $r2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter>;

        if $r2 == r1 goto label1;

        r0.<android.graphics.Paint: long mNativeColorFilter> = -1L;

     label1:
        r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter> = r1;

        return r1;
    }

    public void setCompatibilityScaling(float)
    {
        android.graphics.Paint r0;
        float f0, $f1;
        double $d0;
        byte $b0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $b0 = $d0 cmpl 1.0;

        if $b0 != 0 goto label1;

        r0.<android.graphics.Paint: boolean mHasCompatScaling> = 0;

        r0.<android.graphics.Paint: float mInvCompatScaling> = 1.0F;

        r0.<android.graphics.Paint: float mCompatScaling> = 1.0F;

        goto label2;

     label1:
        r0.<android.graphics.Paint: boolean mHasCompatScaling> = 1;

        r0.<android.graphics.Paint: float mCompatScaling> = f0;

        $f1 = 1.0F / f0;

        r0.<android.graphics.Paint: float mInvCompatScaling> = $f1;

     label2:
        return;
    }

    public void setDither(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetDither(long,boolean)>($l0, z0);

        return;
    }

    public void setElegantTextHeight(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetElegantTextHeight(long,boolean)>($l0, z0);

        return;
    }

    public void setEndHyphenEdit(int)
    {
        android.graphics.Paint r0;
        int i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetEndHyphenEdit(long,int)>($l1, i0);

        return;
    }

    public void setFakeBoldText(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetFakeBoldText(long,boolean)>($l0, z0);

        return;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetFilterBitmap(long,boolean)>($l0, z0);

        return;
    }

    public void setFlags(int)
    {
        android.graphics.Paint r0;
        int i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetFlags(long,int)>($l1, i0);

        return;
    }

    public void setFontFeatureSettings(java.lang.String)
    {
        android.graphics.Paint r0;
        java.lang.String r1, $r2, $r3, r4;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.lang.String;

        r4 = r1;

        if r1 == null goto label1;

        r4 = r1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label1;

        r4 = null;

     label1:
        if r4 != null goto label2;

        $r3 = r0.<android.graphics.Paint: java.lang.String mFontFeatureSettings>;

        if $r3 == null goto label3;

     label2:
        if r4 == null goto label4;

        $r2 = r0.<android.graphics.Paint: java.lang.String mFontFeatureSettings>;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

     label3:
        return;

     label4:
        r0.<android.graphics.Paint: java.lang.String mFontFeatureSettings> = r4;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetFontFeatureSettings(long,java.lang.String)>($l0, r4);

        return;
    }

    public boolean setFontVariationSettings(java.lang.String)
    {
        android.graphics.Paint r0;
        java.lang.String r1, r11, r12;
        android.graphics.fonts.FontVariationAxis[] r2;
        int i0, $i1, $i2, i3;
        android.graphics.Typeface $r4, $r6, $r9, r13, r14;
        java.util.List $r5;
        java.util.ArrayList $r8;
        boolean $z0, $z1, $z3;
        android.graphics.fonts.FontVariationAxis r15;

        r0 := @this: android.graphics.Paint;

        r11 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.text.TextUtils: java.lang.String nullIfEmpty(java.lang.String)>(r11);

        r12 = r0.<android.graphics.Paint: java.lang.String mFontVariationSettings>;

        if r1 == r12 goto label9;

        if r1 == null goto label1;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z3 == 0 goto label1;

        goto label9;

     label1:
        if r1 == null goto label8;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        goto label8;

     label2:
        r13 = r0.<android.graphics.Paint: android.graphics.Typeface mTypeface>;

        r14 = r13;

        if r13 != null goto label3;

        r14 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

     label3:
        r2 = staticinvoke <android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>(r1);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r2;

        i3 = 0;

     label4:
        if i3 >= i0 goto label6;

        r15 = r2[i3];

        $i2 = virtualinvoke r15.<android.graphics.fonts.FontVariationAxis: int getOpenTypeTagValue()>();

        $z1 = virtualinvoke r14.<android.graphics.Typeface: boolean isSupportedAxes(int)>($i2);

        if $z1 == 0 goto label5;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r15);

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        $z0 = virtualinvoke $r8.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label7;

        return 0;

     label7:
        r0.<android.graphics.Paint: java.lang.String mFontVariationSettings> = r1;

        $r9 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromTypefaceWithVariation(android.graphics.Typeface,java.util.List)>(r14, $r8);

        virtualinvoke r0.<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>($r9);

        return 1;

     label8:
        r0.<android.graphics.Paint: java.lang.String mFontVariationSettings> = null;

        $r4 = r0.<android.graphics.Paint: android.graphics.Typeface mTypeface>;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromTypefaceWithVariation(android.graphics.Typeface,java.util.List)>($r4, $r5);

        virtualinvoke r0.<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>($r6);

        return 1;

     label9:
        return 1;
    }

    public void setHinting(int)
    {
        android.graphics.Paint r0;
        int i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetHinting(long,int)>($l1, i0);

        return;
    }

    public void setLetterSpacing(float)
    {
        android.graphics.Paint r0;
        float f0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetLetterSpacing(long,float)>($l0, f0);

        return;
    }

    public void setLinearText(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetLinearText(long,boolean)>($l0, z0);

        return;
    }

    public android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)
    {
        android.graphics.Paint r0;
        android.graphics.MaskFilter r1;
        long $l0, l2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.MaskFilter;

        l2 = 0L;

        if r1 == null goto label1;

        l2 = r1.<android.graphics.MaskFilter: long native_instance>;

     label1:
        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: long nSetMaskFilter(long,long)>($l0, l2);

        r0.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter> = r1;

        return r1;
    }

    public android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)
    {
        android.graphics.Paint r0;
        android.graphics.PathEffect r1;
        long $l0, l2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.PathEffect;

        l2 = 0L;

        if r1 == null goto label1;

        l2 = r1.<android.graphics.PathEffect: long native_instance>;

     label1:
        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: long nSetPathEffect(long,long)>($l0, l2);

        r0.<android.graphics.Paint: android.graphics.PathEffect mPathEffect> = r1;

        return r1;
    }

    public android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)
    {
        android.graphics.Paint r0;
        android.graphics.Rasterizer r1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Rasterizer;

        return r1;
    }

    public android.graphics.Shader setShader(android.graphics.Shader)
    {
        android.graphics.Paint r0;
        android.graphics.Shader r1, $r2;
        long $l0;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Shader;

        $r2 = r0.<android.graphics.Paint: android.graphics.Shader mShader>;

        if $r2 == r1 goto label1;

        r0.<android.graphics.Paint: long mNativeShader> = -1L;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: long nSetShader(long,long)>($l0, 0L);

     label1:
        r0.<android.graphics.Paint: android.graphics.Shader mShader> = r1;

        return r1;
    }

    public void setShadowLayer(float, float, float, int)
    {
        android.graphics.Paint r0;
        float f0, f1, f2;
        int i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        i0 := @parameter3: int;

        $l1 = staticinvoke <android.graphics.Color: long pack(int)>(i0);

        virtualinvoke r0.<android.graphics.Paint: void setShadowLayer(float,float,float,long)>(f0, f1, f2, $l1);

        return;
    }

    public void setShadowLayer(float, float, float, long)
    {
        android.graphics.Paint r0;
        float f0, f1, f2;
        long l0, $l1, $l2;
        android.graphics.ColorSpace r1;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        l0 := @parameter3: long;

        r1 = staticinvoke <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>(l0);

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $l2 = virtualinvoke r1.<android.graphics.ColorSpace: long getNativeInstance()>();

        staticinvoke <android.graphics.Paint: void nSetShadowLayer(long,float,float,float,long,long)>($l1, f0, f1, f2, $l2, l0);

        r0.<android.graphics.Paint: float mShadowLayerRadius> = f0;

        r0.<android.graphics.Paint: float mShadowLayerDx> = f1;

        r0.<android.graphics.Paint: float mShadowLayerDy> = f2;

        r0.<android.graphics.Paint: long mShadowLayerColor> = l0;

        return;
    }

    public void setStartHyphenEdit(int)
    {
        android.graphics.Paint r0;
        int i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetStartHyphenEdit(long,int)>($l1, i0);

        return;
    }

    public void setStrikeThruText(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetStrikeThruText(long,boolean)>($l0, z0);

        return;
    }

    public void setStrokeCap(android.graphics.Paint$Cap)
    {
        android.graphics.Paint r0;
        android.graphics.Paint$Cap r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint$Cap;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $i0 = r1.<android.graphics.Paint$Cap: int nativeInt>;

        staticinvoke <android.graphics.Paint: void nSetStrokeCap(long,int)>($l1, $i0);

        return;
    }

    public void setStrokeJoin(android.graphics.Paint$Join)
    {
        android.graphics.Paint r0;
        android.graphics.Paint$Join r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint$Join;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $i0 = r1.<android.graphics.Paint$Join: int nativeInt>;

        staticinvoke <android.graphics.Paint: void nSetStrokeJoin(long,int)>($l1, $i0);

        return;
    }

    public void setStrokeMiter(float)
    {
        android.graphics.Paint r0;
        float f0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetStrokeMiter(long,float)>($l0, f0);

        return;
    }

    public void setStrokeWidth(float)
    {
        android.graphics.Paint r0;
        float f0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetStrokeWidth(long,float)>($l0, f0);

        return;
    }

    public void setStyle(android.graphics.Paint$Style)
    {
        android.graphics.Paint r0;
        android.graphics.Paint$Style r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint$Style;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $i0 = r1.<android.graphics.Paint$Style: int nativeInt>;

        staticinvoke <android.graphics.Paint: void nSetStyle(long,int)>($l1, $i0);

        return;
    }

    public void setSubpixelText(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetSubpixelText(long,boolean)>($l0, z0);

        return;
    }

    public void setTextAlign(android.graphics.Paint$Align)
    {
        android.graphics.Paint r0;
        android.graphics.Paint$Align r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Paint$Align;

        $l1 = r0.<android.graphics.Paint: long mNativePaint>;

        $i0 = r1.<android.graphics.Paint$Align: int nativeInt>;

        staticinvoke <android.graphics.Paint: void nSetTextAlign(long,int)>($l1, $i0);

        return;
    }

    public void setTextLocale(java.util.Locale)
    {
        android.graphics.Paint r0;
        java.util.Locale r1, $r5;
        android.os.LocaleList r2, $r4, $r6;
        java.lang.IllegalArgumentException $r3;
        int $i0;
        boolean $z0;
        java.util.Locale[] $r7;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: java.util.Locale;

        if r1 == null goto label2;

        r2 = r0.<android.graphics.Paint: android.os.LocaleList mLocales>;

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<android.os.LocaleList: int size()>();

        if $i0 != 1 goto label1;

        $r4 = r0.<android.graphics.Paint: android.os.LocaleList mLocales>;

        $r5 = virtualinvoke $r4.<android.os.LocaleList: java.util.Locale get(int)>(0);

        $z0 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = new android.os.LocaleList;

        $r7 = newarray (java.util.Locale)[1];

        $r7[0] = r1;

        specialinvoke $r6.<android.os.LocaleList: void <init>(java.util.Locale[])>($r7);

        r0.<android.graphics.Paint: android.os.LocaleList mLocales> = $r6;

        specialinvoke r0.<android.graphics.Paint: void syncTextLocalesWithMinikin()>();

        return;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("locale cannot be null");

        throw $r3;
    }

    public void setTextLocales(android.os.LocaleList)
    {
        android.graphics.Paint r0;
        android.os.LocaleList r1, $r3;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.os.LocaleList;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.os.LocaleList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<android.graphics.Paint: android.os.LocaleList mLocales>;

        $z1 = virtualinvoke r1.<android.os.LocaleList: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return;

     label1:
        r0.<android.graphics.Paint: android.os.LocaleList mLocales> = r1;

        specialinvoke r0.<android.graphics.Paint: void syncTextLocalesWithMinikin()>();

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("locales cannot be null or empty");

        throw $r2;
    }

    public void setTextScaleX(float)
    {
        android.graphics.Paint r0;
        float f0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetTextScaleX(long,float)>($l0, f0);

        return;
    }

    public void setTextSize(float)
    {
        android.graphics.Paint r0;
        float f0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetTextSize(long,float)>($l0, f0);

        return;
    }

    public void setTextSkewX(float)
    {
        android.graphics.Paint r0;
        float f0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetTextSkewX(long,float)>($l0, f0);

        return;
    }

    public android.graphics.Typeface setTypeface(android.graphics.Typeface)
    {
        android.graphics.Paint r0;
        android.graphics.Typeface r1;
        long $l0, l1;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Typeface;

        if r1 != null goto label1;

        l1 = 0L;

        goto label2;

     label1:
        l1 = r1.<android.graphics.Typeface: long native_instance>;

     label2:
        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetTypeface(long,long)>($l0, l1);

        r0.<android.graphics.Paint: android.graphics.Typeface mTypeface> = r1;

        return r1;
    }

    public void setUnderlineText(boolean)
    {
        android.graphics.Paint r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetUnderlineText(long,boolean)>($l0, z0);

        return;
    }

    public void setWordSpacing(float)
    {
        android.graphics.Paint r0;
        float f0;
        long $l0;

        r0 := @this: android.graphics.Paint;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.graphics.Paint: void nSetWordSpacing(long,float)>($l0, f0);

        return;
    }

    public android.graphics.Xfermode setXfermode(android.graphics.Xfermode)
    {
        android.graphics.Paint r0;
        android.graphics.Xfermode r1, $r2;

        r0 := @this: android.graphics.Paint;

        r1 := @parameter0: android.graphics.Xfermode;

        $r2 = specialinvoke r0.<android.graphics.Paint: android.graphics.Xfermode installXfermode(android.graphics.Xfermode)>(r1);

        return $r2;
    }
}
