class android.graphics.ParcelableColorSpace$1 extends java.lang.Object implements android.os.Parcelable$Creator
{

    void <init>()
    {
        android.graphics.ParcelableColorSpace$1 r0;

        r0 := @this: android.graphics.ParcelableColorSpace$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.graphics.ParcelableColorSpace createFromParcel(android.os.Parcel)
    {
        android.graphics.ParcelableColorSpace$1 r0;
        android.os.Parcel r1;
        int i0;
        android.graphics.ParcelableColorSpace $r2, $r4;
        android.graphics.ColorSpace $r3;
        android.graphics.ColorSpace$Rgb $r5;
        java.lang.String $r6;
        float[] $r7, $r8;
        android.graphics.ColorSpace$Rgb$TransferParameters $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: android.graphics.ParcelableColorSpace$1;

        r1 := @parameter0: android.os.Parcel;

        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if i0 != -1 goto label1;

        $r4 = new android.graphics.ParcelableColorSpace;

        $r5 = new android.graphics.ColorSpace$Rgb;

        $r6 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r7 = virtualinvoke r1.<android.os.Parcel: float[] createFloatArray()>();

        $r8 = virtualinvoke r1.<android.os.Parcel: float[] createFloatArray()>();

        $r9 = new android.graphics.ColorSpace$Rgb$TransferParameters;

        $d0 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        $d1 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        $d2 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        $d3 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        $d4 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        $d5 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        $d6 = virtualinvoke r1.<android.os.Parcel: double readDouble()>();

        specialinvoke $r9.<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5, $d6);

        specialinvoke $r5.<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],android.graphics.ColorSpace$Rgb$TransferParameters)>($r6, $r7, $r8, $r9);

        specialinvoke $r4.<android.graphics.ParcelableColorSpace: void <init>(android.graphics.ColorSpace)>($r5);

        return $r4;

     label1:
        $r2 = new android.graphics.ParcelableColorSpace;

        $r3 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(int)>(i0);

        specialinvoke $r2.<android.graphics.ParcelableColorSpace: void <init>(android.graphics.ColorSpace)>($r3);

        return $r2;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        android.graphics.ParcelableColorSpace$1 r0;
        android.os.Parcel r1;
        android.graphics.ParcelableColorSpace $r2;

        r0 := @this: android.graphics.ParcelableColorSpace$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<android.graphics.ParcelableColorSpace$1: android.graphics.ParcelableColorSpace createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

    public android.graphics.ParcelableColorSpace[] newArray(int)
    {
        android.graphics.ParcelableColorSpace$1 r0;
        int i0;
        android.graphics.ParcelableColorSpace[] $r1;

        r0 := @this: android.graphics.ParcelableColorSpace$1;

        i0 := @parameter0: int;

        $r1 = newarray (android.graphics.ParcelableColorSpace)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        android.graphics.ParcelableColorSpace$1 r0;
        int i0;
        android.graphics.ParcelableColorSpace[] $r1;

        r0 := @this: android.graphics.ParcelableColorSpace$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.graphics.ParcelableColorSpace$1: android.graphics.ParcelableColorSpace[] newArray(int)>(i0);

        return $r1;
    }
}
