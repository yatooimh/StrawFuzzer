public class android.graphics.Path extends java.lang.Object
{
    static final android.graphics.Path$FillType[] sFillTypeArray;
    private static final libcore.util.NativeAllocationRegistry sRegistry;
    public boolean isSimplePath;
    private android.graphics.Path$Direction mLastDirection;
    public final long mNativePath;
    public android.graphics.Region rects;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        long $l0;
        libcore.util.NativeAllocationRegistry $r2;
        android.graphics.Path$FillType[] $r3;
        android.graphics.Path$FillType $r4, $r5, $r6, $r7;

        $r0 = class "Landroid/graphics/Path;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l0 = staticinvoke <android.graphics.Path: long nGetFinalizer()>();

        $r2 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long)>($r1, $l0);

        <android.graphics.Path: libcore.util.NativeAllocationRegistry sRegistry> = $r2;

        $r3 = newarray (android.graphics.Path$FillType)[4];

        $r4 = <android.graphics.Path$FillType: android.graphics.Path$FillType WINDING>;

        $r3[0] = $r4;

        $r5 = <android.graphics.Path$FillType: android.graphics.Path$FillType EVEN_ODD>;

        $r3[1] = $r5;

        $r6 = <android.graphics.Path$FillType: android.graphics.Path$FillType INVERSE_WINDING>;

        $r3[2] = $r6;

        $r7 = <android.graphics.Path$FillType: android.graphics.Path$FillType INVERSE_EVEN_ODD>;

        $r3[3] = $r7;

        <android.graphics.Path: android.graphics.Path$FillType[] sFillTypeArray> = $r3;

        return;
    }

    public void <init>()
    {
        android.graphics.Path r0;
        long l0;
        libcore.util.NativeAllocationRegistry $r1;

        r0 := @this: android.graphics.Path;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Path: boolean isSimplePath> = 1;

        r0.<android.graphics.Path: android.graphics.Path$Direction mLastDirection> = null;

        l0 = staticinvoke <android.graphics.Path: long nInit()>();

        r0.<android.graphics.Path: long mNativePath> = l0;

        $r1 = <android.graphics.Path: libcore.util.NativeAllocationRegistry sRegistry>;

        virtualinvoke $r1.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l0);

        return;
    }

    public void <init>(android.graphics.Path)
    {
        android.graphics.Path r0, r1;
        long l0, l1, l2;
        boolean $z0;
        android.graphics.Region $r3, $r4, $r5;
        libcore.util.NativeAllocationRegistry $r6;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Path: boolean isSimplePath> = 1;

        r0.<android.graphics.Path: android.graphics.Path$Direction mLastDirection> = null;

        l1 = 0L;

        if r1 == null goto label1;

        l0 = r1.<android.graphics.Path: long mNativePath>;

        $z0 = r1.<android.graphics.Path: boolean isSimplePath>;

        r0.<android.graphics.Path: boolean isSimplePath> = $z0;

        l1 = l0;

        $r3 = r1.<android.graphics.Path: android.graphics.Region rects>;

        if $r3 == null goto label1;

        $r4 = new android.graphics.Region;

        $r5 = r1.<android.graphics.Path: android.graphics.Region rects>;

        specialinvoke $r4.<android.graphics.Region: void <init>(android.graphics.Region)>($r5);

        r0.<android.graphics.Path: android.graphics.Region rects> = $r4;

        l1 = l0;

     label1:
        l2 = staticinvoke <android.graphics.Path: long nInit(long)>(l1);

        r0.<android.graphics.Path: long mNativePath> = l2;

        $r6 = <android.graphics.Path: libcore.util.NativeAllocationRegistry sRegistry>;

        virtualinvoke $r6.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l2);

        return;
    }

    private void detectSimplePath(float, float, float, float, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3;
        android.graphics.Path$Direction r1, $r2, $r3;
        android.graphics.Region $r4, $r6, $r7;
        android.graphics.Region$Op $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Path$Direction;

        $r2 = r0.<android.graphics.Path: android.graphics.Path$Direction mLastDirection>;

        if $r2 != null goto label1;

        r0.<android.graphics.Path: android.graphics.Path$Direction mLastDirection> = r1;

     label1:
        $r3 = r0.<android.graphics.Path: android.graphics.Path$Direction mLastDirection>;

        if $r3 == r1 goto label2;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        goto label4;

     label2:
        $r4 = r0.<android.graphics.Path: android.graphics.Region rects>;

        if $r4 != null goto label3;

        $r7 = new android.graphics.Region;

        specialinvoke $r7.<android.graphics.Region: void <init>()>();

        r0.<android.graphics.Path: android.graphics.Region rects> = $r7;

     label3:
        $r6 = r0.<android.graphics.Path: android.graphics.Region rects>;

        $i3 = (int) f0;

        $i2 = (int) f1;

        $i1 = (int) f2;

        $i0 = (int) f3;

        $r5 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r6.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i3, $i2, $i1, $i0, $r5);

     label4:
        return;
    }

    private static native void nAddArc(long, float, float, float, float, float, float);

    private static native void nAddCircle(long, float, float, float, int);

    private static native void nAddOval(long, float, float, float, float, int);

    private static native void nAddPath(long, long);

    private static native void nAddPath(long, long, float, float);

    private static native void nAddPath(long, long, long);

    private static native void nAddRect(long, float, float, float, float, int);

    private static native void nAddRoundRect(long, float, float, float, float, float, float, int);

    private static native void nAddRoundRect(long, float, float, float, float, float[], int);

    private static native float[] nApproximate(long, float);

    private static native void nArcTo(long, float, float, float, float, float, float, boolean);

    private static native void nClose(long);

    private static native void nComputeBounds(long, android.graphics.RectF);

    private static native void nCubicTo(long, float, float, float, float, float, float);

    private static native int nGetFillType(long);

    private static native long nGetFinalizer();

    private static native void nIncReserve(long, int);

    private static native long nInit();

    private static native long nInit(long);

    private static native boolean nIsConvex(long);

    private static native boolean nIsEmpty(long);

    private static native boolean nIsRect(long, android.graphics.RectF);

    private static native void nLineTo(long, float, float);

    private static native void nMoveTo(long, float, float);

    private static native void nOffset(long, float, float);

    private static native boolean nOp(long, long, int, long);

    private static native void nQuadTo(long, float, float, float, float);

    private static native void nRCubicTo(long, float, float, float, float, float, float);

    private static native void nRLineTo(long, float, float);

    private static native void nRMoveTo(long, float, float);

    private static native void nRQuadTo(long, float, float, float, float);

    private static native void nReset(long);

    private static native void nRewind(long);

    private static native void nSet(long, long);

    private static native void nSetFillType(long, int);

    private static native void nSetLastPoint(long, float, float);

    private static native void nTransform(long, long);

    private static native void nTransform(long, long, long);

    public void addArc(float, float, float, float, float, float)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3, f4, f5;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nAddArc(long,float,float,float,float,float,float)>($l0, f0, f1, f2, f3, f4, f5);

        return;
    }

    public void addArc(android.graphics.RectF, float, float)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        float f0, f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f5 = r1.<android.graphics.RectF: float left>;

        $f4 = r1.<android.graphics.RectF: float top>;

        $f3 = r1.<android.graphics.RectF: float right>;

        $f2 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.graphics.Path: void addArc(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, f0, f1);

        return;
    }

    public void addCircle(float, float, float, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        float f0, f1, f2;
        android.graphics.Path$Direction r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r1 := @parameter3: android.graphics.Path$Direction;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $i0 = r1.<android.graphics.Path$Direction: int nativeInt>;

        staticinvoke <android.graphics.Path: void nAddCircle(long,float,float,float,int)>($l1, f0, f1, f2, $i0);

        return;
    }

    public void addOval(float, float, float, float, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3;
        android.graphics.Path$Direction r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Path$Direction;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $i0 = r1.<android.graphics.Path$Direction: int nativeInt>;

        staticinvoke <android.graphics.Path: void nAddOval(long,float,float,float,float,int)>($l1, f0, f1, f2, f3, $i0);

        return;
    }

    public void addOval(android.graphics.RectF, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        android.graphics.Path$Direction r2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Path$Direction;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path$Direction)>($f3, $f2, $f1, $f0, r2);

        return;
    }

    public void addPath(android.graphics.Path)
    {
        android.graphics.Path r0, r1;
        long $l0, $l1;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $l0 = r1.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nAddPath(long,long)>($l1, $l0);

        return;
    }

    public void addPath(android.graphics.Path, float, float)
    {
        android.graphics.Path r0, r1;
        float f0, f1;
        long $l0, $l1;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $l0 = r1.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nAddPath(long,long,float,float)>($l1, $l0, f0, f1);

        return;
    }

    public void addPath(android.graphics.Path, android.graphics.Matrix)
    {
        android.graphics.Path r0, r1;
        android.graphics.Matrix r2;
        boolean $z0;
        long $l0, $l1, $l2;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Matrix;

        $z0 = r1.<android.graphics.Path: boolean isSimplePath>;

        if $z0 != 0 goto label1;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

     label1:
        $l2 = r0.<android.graphics.Path: long mNativePath>;

        $l1 = r1.<android.graphics.Path: long mNativePath>;

        $l0 = r2.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.graphics.Path: void nAddPath(long,long,long)>($l2, $l1, $l0);

        return;
    }

    public void addRect(float, float, float, float, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3;
        android.graphics.Path$Direction r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Path$Direction;

        specialinvoke r0.<android.graphics.Path: void detectSimplePath(float,float,float,float,android.graphics.Path$Direction)>(f0, f1, f2, f3, r1);

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $i0 = r1.<android.graphics.Path$Direction: int nativeInt>;

        staticinvoke <android.graphics.Path: void nAddRect(long,float,float,float,float,int)>($l1, f0, f1, f2, f3, $i0);

        return;
    }

    public void addRect(android.graphics.RectF, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        android.graphics.Path$Direction r2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Path$Direction;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>($f3, $f2, $f1, $f0, r2);

        return;
    }

    public void addRoundRect(float, float, float, float, float, float, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3, f4, f5;
        android.graphics.Path$Direction r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r1 := @parameter6: android.graphics.Path$Direction;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $i0 = r1.<android.graphics.Path$Direction: int nativeInt>;

        staticinvoke <android.graphics.Path: void nAddRoundRect(long,float,float,float,float,float,float,int)>($l1, f0, f1, f2, f3, f4, f5, $i0);

        return;
    }

    public void addRoundRect(float, float, float, float, float[], android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3;
        float[] r1;
        android.graphics.Path$Direction r2;
        int $i0, $i1;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        long $l2;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: float[];

        r2 := @parameter5: android.graphics.Path$Direction;

        $i0 = lengthof r1;

        if $i0 < 8 goto label1;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l2 = r0.<android.graphics.Path: long mNativePath>;

        $i1 = r2.<android.graphics.Path$Direction: int nativeInt>;

        staticinvoke <android.graphics.Path: void nAddRoundRect(long,float,float,float,float,float[],int)>($l2, f0, f1, f2, f3, r1, $i1);

        return;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("radii[] needs 8 values");

        throw $r3;
    }

    public void addRoundRect(android.graphics.RectF, float, float, android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.graphics.Path$Direction r2;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Path$Direction;

        $f5 = r1.<android.graphics.RectF: float left>;

        $f4 = r1.<android.graphics.RectF: float top>;

        $f3 = r1.<android.graphics.RectF: float right>;

        $f2 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.graphics.Path: void addRoundRect(float,float,float,float,float,float,android.graphics.Path$Direction)>($f5, $f4, $f3, $f2, f0, f1, r2);

        return;
    }

    public void addRoundRect(android.graphics.RectF, float[], android.graphics.Path$Direction)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        float[] r2;
        android.graphics.Path$Direction r3;
        java.lang.NullPointerException $r4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: float[];

        r3 := @parameter2: android.graphics.Path$Direction;

        if r1 == null goto label1;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>($f3, $f2, $f1, $f0, r2, r3);

        return;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("need rect parameter");

        throw $r4;
    }

    public float[] approximate(float)
    {
        android.graphics.Path r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;
        long $l1;
        float[] $r2;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $r2 = staticinvoke <android.graphics.Path: float[] nApproximate(long,float)>($l1, f0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AcceptableError must be greater than or equal to 0");

        throw $r1;
    }

    public void arcTo(float, float, float, float, float, float, boolean)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3, f4, f5;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        z0 := @parameter6: boolean;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nArcTo(long,float,float,float,float,float,float,boolean)>($l0, f0, f1, f2, f3, f4, f5, z0);

        return;
    }

    public void arcTo(android.graphics.RectF, float, float)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        float f0, f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f5 = r1.<android.graphics.RectF: float left>;

        $f4 = r1.<android.graphics.RectF: float top>;

        $f3 = r1.<android.graphics.RectF: float right>;

        $f2 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>($f5, $f4, $f3, $f2, f0, f1, 0);

        return;
    }

    public void arcTo(android.graphics.RectF, float, float, boolean)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        float f0, f1, $f2, $f3, $f4, $f5;
        boolean z0;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        $f5 = r1.<android.graphics.RectF: float left>;

        $f4 = r1.<android.graphics.RectF: float top>;

        $f3 = r1.<android.graphics.RectF: float right>;

        $f2 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>($f5, $f4, $f3, $f2, f0, f1, z0);

        return;
    }

    public void close()
    {
        android.graphics.Path r0;
        long $l0;

        r0 := @this: android.graphics.Path;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nClose(long)>($l0);

        return;
    }

    public void computeBounds(android.graphics.RectF, boolean)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        z0 := @parameter1: boolean;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nComputeBounds(long,android.graphics.RectF)>($l0, r1);

        return;
    }

    public void cubicTo(float, float, float, float, float, float)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3, f4, f5;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nCubicTo(long,float,float,float,float,float,float)>($l0, f0, f1, f2, f3, f4, f5);

        return;
    }

    public android.graphics.Path$FillType getFillType()
    {
        android.graphics.Path r0;
        long $l0;
        android.graphics.Path$FillType[] $r1;
        int $i1;
        android.graphics.Path$FillType $r2;

        r0 := @this: android.graphics.Path;

        $r1 = <android.graphics.Path: android.graphics.Path$FillType[] sFillTypeArray>;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        $i1 = staticinvoke <android.graphics.Path: int nGetFillType(long)>($l0);

        $r2 = $r1[$i1];

        return $r2;
    }

    public void incReserve(int)
    {
        android.graphics.Path r0;
        int i0;
        long $l1;

        r0 := @this: android.graphics.Path;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nIncReserve(long,int)>($l1, i0);

        return;
    }

    public boolean isConvex()
    {
        android.graphics.Path r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Path;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        $z0 = staticinvoke <android.graphics.Path: boolean nIsConvex(long)>($l0);

        return $z0;
    }

    public boolean isEmpty()
    {
        android.graphics.Path r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Path;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        $z0 = staticinvoke <android.graphics.Path: boolean nIsEmpty(long)>($l0);

        return $z0;
    }

    public boolean isInverseFillType()
    {
        android.graphics.Path r0;
        int i0, $i2, $i3;
        long $l1;
        android.graphics.Path$FillType $r1;
        boolean z0;

        r0 := @this: android.graphics.Path;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        i0 = staticinvoke <android.graphics.Path: int nGetFillType(long)>($l1);

        $r1 = <android.graphics.Path$FillType: android.graphics.Path$FillType INVERSE_WINDING>;

        $i2 = $r1.<android.graphics.Path$FillType: int nativeInt>;

        $i3 = $i2 & i0;

        if $i3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isRect(android.graphics.RectF)
    {
        android.graphics.Path r0;
        android.graphics.RectF r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.RectF;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        $z0 = staticinvoke <android.graphics.Path: boolean nIsRect(long,android.graphics.RectF)>($l0, r1);

        return $z0;
    }

    public void lineTo(float, float)
    {
        android.graphics.Path r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nLineTo(long,float,float)>($l0, f0, f1);

        return;
    }

    public void moveTo(float, float)
    {
        android.graphics.Path r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nMoveTo(long,float,float)>($l0, f0, f1);

        return;
    }

    final long mutateNI()
    {
        android.graphics.Path r0;
        long $l0;

        r0 := @this: android.graphics.Path;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        return $l0;
    }

    public void offset(float, float)
    {
        android.graphics.Path r0;
        float f0, f1;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0, $b1;
        int $i2, $i3;
        android.graphics.Region $r1, $r2;
        long $l4;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = r0.<android.graphics.Path: boolean isSimplePath>;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.graphics.Path: android.graphics.Region rects>;

        if $r2 != null goto label1;

        return;

     label1:
        $z1 = r0.<android.graphics.Path: boolean isSimplePath>;

        if $z1 == 0 goto label2;

        $d1 = (double) f0;

        $d0 = (double) f0;

        $d2 = staticinvoke <java.lang.Math: double rint(double)>($d0);

        $b0 = $d1 cmpl $d2;

        if $b0 != 0 goto label2;

        $d4 = (double) f1;

        $d3 = (double) f1;

        $d5 = staticinvoke <java.lang.Math: double rint(double)>($d3);

        $b1 = $d4 cmpl $d5;

        if $b1 != 0 goto label2;

        $r1 = r0.<android.graphics.Path: android.graphics.Region rects>;

        $i3 = (int) f0;

        $i2 = (int) f1;

        virtualinvoke $r1.<android.graphics.Region: void translate(int,int)>($i3, $i2);

        goto label3;

     label2:
        r0.<android.graphics.Path: boolean isSimplePath> = 0;

     label3:
        $l4 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nOffset(long,float,float)>($l4, f0, f1);

        return;
    }

    public void offset(float, float, android.graphics.Path)
    {
        android.graphics.Path r0, r1;
        float f0, f1;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.graphics.Path;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.Path: void set(android.graphics.Path)>(r0);

        goto label2;

     label1:
        r1 = r0;

     label2:
        virtualinvoke r1.<android.graphics.Path: void offset(float,float)>(f0, f1);

        return;
    }

    public boolean op(android.graphics.Path, android.graphics.Path$Op)
    {
        android.graphics.Path r0, r1;
        android.graphics.Path$Op r2;
        boolean $z0;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Path$Op;

        $z0 = virtualinvoke r0.<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)>(r0, r1, r2);

        return $z0;
    }

    public boolean op(android.graphics.Path, android.graphics.Path, android.graphics.Path$Op)
    {
        android.graphics.Path r0, r1, r2;
        android.graphics.Path$Op r3;
        long $l0, $l1, $l3;
        int $i2;
        boolean $z0;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Path;

        r3 := @parameter2: android.graphics.Path$Op;

        $l0 = r1.<android.graphics.Path: long mNativePath>;

        $l1 = r2.<android.graphics.Path: long mNativePath>;

        $i2 = virtualinvoke r3.<android.graphics.Path$Op: int ordinal()>();

        $l3 = r0.<android.graphics.Path: long mNativePath>;

        $z0 = staticinvoke <android.graphics.Path: boolean nOp(long,long,int,long)>($l0, $l1, $i2, $l3);

        if $z0 == 0 goto label1;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        r0.<android.graphics.Path: android.graphics.Region rects> = null;

        return 1;

     label1:
        return 0;
    }

    public void quadTo(float, float, float, float)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nQuadTo(long,float,float,float,float)>($l0, f0, f1, f2, f3);

        return;
    }

    public void rCubicTo(float, float, float, float, float, float)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3, f4, f5;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nRCubicTo(long,float,float,float,float,float,float)>($l0, f0, f1, f2, f3, f4, f5);

        return;
    }

    public void rLineTo(float, float)
    {
        android.graphics.Path r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nRLineTo(long,float,float)>($l0, f0, f1);

        return;
    }

    public void rMoveTo(float, float)
    {
        android.graphics.Path r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nRMoveTo(long,float,float)>($l0, f0, f1);

        return;
    }

    public void rQuadTo(float, float, float, float)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nRQuadTo(long,float,float,float,float)>($l0, f0, f1, f2, f3);

        return;
    }

    public final long readOnlyNI()
    {
        android.graphics.Path r0;
        long $l0;

        r0 := @this: android.graphics.Path;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        return $l0;
    }

    public void reset()
    {
        android.graphics.Path r0;
        long $l0;
        android.graphics.Region r1;
        android.graphics.Path$FillType r2;

        r0 := @this: android.graphics.Path;

        r0.<android.graphics.Path: boolean isSimplePath> = 1;

        r0.<android.graphics.Path: android.graphics.Path$Direction mLastDirection> = null;

        r1 = r0.<android.graphics.Path: android.graphics.Region rects>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.Region: void setEmpty()>();

     label1:
        r2 = virtualinvoke r0.<android.graphics.Path: android.graphics.Path$FillType getFillType()>();

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nReset(long)>($l0);

        virtualinvoke r0.<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>(r2);

        return;
    }

    public void rewind()
    {
        android.graphics.Path r0;
        android.graphics.Region r1;
        long $l0;

        r0 := @this: android.graphics.Path;

        r0.<android.graphics.Path: boolean isSimplePath> = 1;

        r0.<android.graphics.Path: android.graphics.Path$Direction mLastDirection> = null;

        r1 = r0.<android.graphics.Path: android.graphics.Region rects>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.Region: void setEmpty()>();

     label1:
        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nRewind(long)>($l0);

        return;
    }

    public void set(android.graphics.Path)
    {
        android.graphics.Path r0, r1;
        android.graphics.Region r2, $r3, $r4, $r5, $r6, r7, r8;
        boolean $z0, $z1;
        long $l0, $l1;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path;

        if r0 != r1 goto label1;

        return;

     label1:
        $z0 = r1.<android.graphics.Path: boolean isSimplePath>;

        r0.<android.graphics.Path: boolean isSimplePath> = $z0;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $l0 = r1.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nSet(long,long)>($l1, $l0);

        $z1 = r0.<android.graphics.Path: boolean isSimplePath>;

        if $z1 != 0 goto label2;

        return;

     label2:
        r7 = r0.<android.graphics.Path: android.graphics.Region rects>;

        if r7 == null goto label3;

        r2 = r1.<android.graphics.Path: android.graphics.Region rects>;

        if r2 == null goto label3;

        virtualinvoke r7.<android.graphics.Region: boolean set(android.graphics.Region)>(r2);

        goto label5;

     label3:
        r8 = r0.<android.graphics.Path: android.graphics.Region rects>;

        if r8 == null goto label4;

        $r6 = r1.<android.graphics.Path: android.graphics.Region rects>;

        if $r6 != null goto label4;

        virtualinvoke r8.<android.graphics.Region: void setEmpty()>();

        goto label5;

     label4:
        $r3 = r1.<android.graphics.Path: android.graphics.Region rects>;

        if $r3 == null goto label5;

        $r4 = new android.graphics.Region;

        $r5 = r1.<android.graphics.Path: android.graphics.Region rects>;

        specialinvoke $r4.<android.graphics.Region: void <init>(android.graphics.Region)>($r5);

        r0.<android.graphics.Path: android.graphics.Region rects> = $r4;

     label5:
        return;
    }

    public void setFillType(android.graphics.Path$FillType)
    {
        android.graphics.Path r0;
        android.graphics.Path$FillType r1;
        int $i0;
        long $l1;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Path$FillType;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $i0 = r1.<android.graphics.Path$FillType: int nativeInt>;

        staticinvoke <android.graphics.Path: void nSetFillType(long,int)>($l1, $i0);

        return;
    }

    public void setLastPoint(float, float)
    {
        android.graphics.Path r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.graphics.Path;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l0 = r0.<android.graphics.Path: long mNativePath>;

        staticinvoke <android.graphics.Path: void nSetLastPoint(long,float,float)>($l0, f0, f1);

        return;
    }

    public void toggleInverseFillType()
    {
        android.graphics.Path r0;
        int i0, i1, $i3;
        long $l2, $l4;
        android.graphics.Path$FillType $r1;

        r0 := @this: android.graphics.Path;

        $l2 = r0.<android.graphics.Path: long mNativePath>;

        i0 = staticinvoke <android.graphics.Path: int nGetFillType(long)>($l2);

        $r1 = <android.graphics.Path$FillType: android.graphics.Path$FillType INVERSE_WINDING>;

        i1 = $r1.<android.graphics.Path$FillType: int nativeInt>;

        $l4 = r0.<android.graphics.Path: long mNativePath>;

        $i3 = i0 ^ i1;

        staticinvoke <android.graphics.Path: void nSetFillType(long,int)>($l4, $i3);

        return;
    }

    public void transform(android.graphics.Matrix)
    {
        android.graphics.Path r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Matrix;

        r0.<android.graphics.Path: boolean isSimplePath> = 0;

        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.graphics.Path: void nTransform(long,long)>($l1, $l0);

        return;
    }

    public void transform(android.graphics.Matrix, android.graphics.Path)
    {
        android.graphics.Path r0, r2;
        android.graphics.Matrix r1;
        long $l0, $l1, l2;

        r0 := @this: android.graphics.Path;

        r1 := @parameter0: android.graphics.Matrix;

        r2 := @parameter1: android.graphics.Path;

        l2 = 0L;

        if r2 == null goto label1;

        r2.<android.graphics.Path: boolean isSimplePath> = 0;

        l2 = r2.<android.graphics.Path: long mNativePath>;

     label1:
        $l1 = r0.<android.graphics.Path: long mNativePath>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.graphics.Path: void nTransform(long,long,long)>($l1, $l0, l2);

        return;
    }
}
