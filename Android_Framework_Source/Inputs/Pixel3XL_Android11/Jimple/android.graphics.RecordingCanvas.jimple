public final class android.graphics.RecordingCanvas extends android.view.DisplayListCanvas
{
    public static final int MAX_BITMAP_SIZE;
    private static final int POOL_LIMIT;
    private static final android.util.Pools$SynchronizedPool sPool;
    private int mHeight;
    public android.graphics.RenderNode mNode;
    private int mWidth;

    static void <clinit>()
    {
        android.util.Pools$SynchronizedPool $r0;

        <android.graphics.RecordingCanvas: int POOL_LIMIT> = 25;

        <android.graphics.RecordingCanvas: int MAX_BITMAP_SIZE> = 104857600;

        $r0 = new android.util.Pools$SynchronizedPool;

        specialinvoke $r0.<android.util.Pools$SynchronizedPool: void <init>(int)>(25);

        <android.graphics.RecordingCanvas: android.util.Pools$SynchronizedPool sPool> = $r0;

        return;
    }

    protected void <init>(android.graphics.RenderNode, int, int)
    {
        android.graphics.RecordingCanvas r0;
        android.graphics.RenderNode r1;
        int i0, i1;
        long $l2, $l3;

        r0 := @this: android.graphics.RecordingCanvas;

        r1 := @parameter0: android.graphics.RenderNode;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l3 = staticinvoke <android.graphics.RecordingCanvas: long nCreateDisplayListCanvas(long,int,int)>($l2, i0, i1);

        specialinvoke r0.<android.view.DisplayListCanvas: void <init>(long)>($l3);

        r0.<android.graphics.RecordingCanvas: int mDensity> = 0;

        return;
    }

    private static native void nCallDrawGLFunction(long, long, java.lang.Runnable);

    private static native long nCreateDisplayListCanvas(long, int, int);

    private static native void nDrawCircle(long, long, long, long, long);

    private static native void nDrawRenderNode(long, long);

    private static native void nDrawRoundRect(long, long, long, long, long, long, long, long);

    private static native void nDrawTextureLayer(long, long);

    private static native void nDrawWebViewFunctor(long, int);

    private static native long nFinishRecording(long);

    private static native int nGetMaximumTextureHeight();

    private static native int nGetMaximumTextureWidth();

    private static native void nInsertReorderBarrier(long, boolean);

    private static native void nResetDisplayListCanvas(long, long, int, int);

    static android.graphics.RecordingCanvas obtain(android.graphics.RenderNode, int, int)
    {
        android.graphics.RenderNode r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;
        android.util.Pools$SynchronizedPool $r2;
        java.lang.Object $r3;
        long $l2, $l3;
        android.graphics.RecordingCanvas $r4, r5;

        r0 := @parameter0: android.graphics.RenderNode;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 == null goto label3;

        $r2 = <android.graphics.RecordingCanvas: android.util.Pools$SynchronizedPool sPool>;

        $r3 = virtualinvoke $r2.<android.util.Pools$SynchronizedPool: java.lang.Object acquire()>();

        r5 = (android.graphics.RecordingCanvas) $r3;

        if r5 != null goto label1;

        $r4 = new android.graphics.RecordingCanvas;

        specialinvoke $r4.<android.graphics.RecordingCanvas: void <init>(android.graphics.RenderNode,int,int)>(r0, i0, i1);

        r5 = $r4;

        goto label2;

     label1:
        $l3 = r5.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        $l2 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RecordingCanvas: void nResetDisplayListCanvas(long,long,int,int)>($l3, $l2, i0, i1);

     label2:
        r5.<android.graphics.RecordingCanvas: android.graphics.RenderNode mNode> = r0;

        r5.<android.graphics.RecordingCanvas: int mWidth> = i0;

        r5.<android.graphics.RecordingCanvas: int mHeight> = i1;

        return r5;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("node cannot be null");

        throw $r1;
    }

    public void callDrawGLFunction2(long)
    {
        android.graphics.RecordingCanvas r0;
        long l0, $l1;

        r0 := @this: android.graphics.RecordingCanvas;

        l0 := @parameter0: long;

        $l1 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.RecordingCanvas: void nCallDrawGLFunction(long,long,java.lang.Runnable)>($l1, l0, null);

        return;
    }

    public void disableZ()
    {
        android.graphics.RecordingCanvas r0;
        long $l0;

        r0 := @this: android.graphics.RecordingCanvas;

        $l0 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.RecordingCanvas: void nInsertReorderBarrier(long,boolean)>($l0, 0);

        return;
    }

    public void drawCircle(android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty)
    {
        android.graphics.RecordingCanvas r0;
        android.graphics.CanvasProperty r1, r2, r3, r4;
        long $l0, $l1, $l2, $l3, $l4;

        r0 := @this: android.graphics.RecordingCanvas;

        r1 := @parameter0: android.graphics.CanvasProperty;

        r2 := @parameter1: android.graphics.CanvasProperty;

        r3 := @parameter2: android.graphics.CanvasProperty;

        r4 := @parameter3: android.graphics.CanvasProperty;

        $l0 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        $l1 = virtualinvoke r1.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l2 = virtualinvoke r2.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l3 = virtualinvoke r3.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l4 = virtualinvoke r4.<android.graphics.CanvasProperty: long getNativeContainer()>();

        staticinvoke <android.graphics.RecordingCanvas: void nDrawCircle(long,long,long,long,long)>($l0, $l1, $l2, $l3, $l4);

        return;
    }

    public void drawGLFunctor2(long, java.lang.Runnable)
    {
        android.graphics.RecordingCanvas r0;
        long l0, $l1;
        java.lang.Runnable r1;

        r0 := @this: android.graphics.RecordingCanvas;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Runnable;

        $l1 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.RecordingCanvas: void nCallDrawGLFunction(long,long,java.lang.Runnable)>($l1, l0, r1);

        return;
    }

    public void drawRenderNode(android.graphics.RenderNode)
    {
        android.graphics.RecordingCanvas r0;
        android.graphics.RenderNode r1;
        long $l0, $l1;

        r0 := @this: android.graphics.RecordingCanvas;

        r1 := @parameter0: android.graphics.RenderNode;

        $l1 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        $l0 = r1.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RecordingCanvas: void nDrawRenderNode(long,long)>($l1, $l0);

        return;
    }

    public void drawRoundRect(android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty)
    {
        android.graphics.RecordingCanvas r0;
        android.graphics.CanvasProperty r1, r2, r3, r4, r5, r6, r7;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;

        r0 := @this: android.graphics.RecordingCanvas;

        r1 := @parameter0: android.graphics.CanvasProperty;

        r2 := @parameter1: android.graphics.CanvasProperty;

        r3 := @parameter2: android.graphics.CanvasProperty;

        r4 := @parameter3: android.graphics.CanvasProperty;

        r5 := @parameter4: android.graphics.CanvasProperty;

        r6 := @parameter5: android.graphics.CanvasProperty;

        r7 := @parameter6: android.graphics.CanvasProperty;

        $l0 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        $l1 = virtualinvoke r1.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l2 = virtualinvoke r2.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l3 = virtualinvoke r3.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l4 = virtualinvoke r4.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l5 = virtualinvoke r5.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l6 = virtualinvoke r6.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l7 = virtualinvoke r7.<android.graphics.CanvasProperty: long getNativeContainer()>();

        staticinvoke <android.graphics.RecordingCanvas: void nDrawRoundRect(long,long,long,long,long,long,long,long)>($l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7);

        return;
    }

    public void drawTextureLayer(android.view.TextureLayer)
    {
        android.graphics.RecordingCanvas r0;
        android.view.TextureLayer r1;
        long $l0, $l1;

        r0 := @this: android.graphics.RecordingCanvas;

        r1 := @parameter0: android.view.TextureLayer;

        $l0 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        $l1 = virtualinvoke r1.<android.view.TextureLayer: long getLayerHandle()>();

        staticinvoke <android.graphics.RecordingCanvas: void nDrawTextureLayer(long,long)>($l0, $l1);

        return;
    }

    public void drawWebViewFunctor(int)
    {
        android.graphics.RecordingCanvas r0;
        int i0;
        long $l1;

        r0 := @this: android.graphics.RecordingCanvas;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.RecordingCanvas: void nDrawWebViewFunctor(long,int)>($l1, i0);

        return;
    }

    public void enableZ()
    {
        android.graphics.RecordingCanvas r0;
        long $l0;

        r0 := @this: android.graphics.RecordingCanvas;

        $l0 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        staticinvoke <android.graphics.RecordingCanvas: void nInsertReorderBarrier(long,boolean)>($l0, 1);

        return;
    }

    long finishRecording()
    {
        android.graphics.RecordingCanvas r0;
        long $l0, $l1;

        r0 := @this: android.graphics.RecordingCanvas;

        $l0 = r0.<android.graphics.RecordingCanvas: long mNativeCanvasWrapper>;

        $l1 = staticinvoke <android.graphics.RecordingCanvas: long nFinishRecording(long)>($l0);

        return $l1;
    }

    public int getHeight()
    {
        android.graphics.RecordingCanvas r0;
        int $i0;

        r0 := @this: android.graphics.RecordingCanvas;

        $i0 = r0.<android.graphics.RecordingCanvas: int mHeight>;

        return $i0;
    }

    public int getMaximumBitmapHeight()
    {
        android.graphics.RecordingCanvas r0;
        int $i0;

        r0 := @this: android.graphics.RecordingCanvas;

        $i0 = staticinvoke <android.graphics.RecordingCanvas: int nGetMaximumTextureHeight()>();

        return $i0;
    }

    public int getMaximumBitmapWidth()
    {
        android.graphics.RecordingCanvas r0;
        int $i0;

        r0 := @this: android.graphics.RecordingCanvas;

        $i0 = staticinvoke <android.graphics.RecordingCanvas: int nGetMaximumTextureWidth()>();

        return $i0;
    }

    public int getWidth()
    {
        android.graphics.RecordingCanvas r0;
        int $i0;

        r0 := @this: android.graphics.RecordingCanvas;

        $i0 = r0.<android.graphics.RecordingCanvas: int mWidth>;

        return $i0;
    }

    public boolean isHardwareAccelerated()
    {
        android.graphics.RecordingCanvas r0;

        r0 := @this: android.graphics.RecordingCanvas;

        return 1;
    }

    public boolean isOpaque()
    {
        android.graphics.RecordingCanvas r0;

        r0 := @this: android.graphics.RecordingCanvas;

        return 0;
    }

    public boolean isRecordingFor(java.lang.Object)
    {
        android.graphics.RecordingCanvas r0;
        java.lang.Object r1;
        android.graphics.RenderNode $r2;
        boolean z0;

        r0 := @this: android.graphics.RecordingCanvas;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.graphics.RecordingCanvas: android.graphics.RenderNode mNode>;

        if r1 != $r2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void recycle()
    {
        android.graphics.RecordingCanvas r0;
        android.util.Pools$SynchronizedPool $r1;

        r0 := @this: android.graphics.RecordingCanvas;

        r0.<android.graphics.RecordingCanvas: android.graphics.RenderNode mNode> = null;

        $r1 = <android.graphics.RecordingCanvas: android.util.Pools$SynchronizedPool sPool>;

        virtualinvoke $r1.<android.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0);

        return;
    }

    public void setBitmap(android.graphics.Bitmap)
    {
        android.graphics.RecordingCanvas r0;
        android.graphics.Bitmap r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.graphics.RecordingCanvas;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setDensity(int)
    {
        android.graphics.RecordingCanvas r0;
        int i0;

        r0 := @this: android.graphics.RecordingCanvas;

        i0 := @parameter0: int;

        return;
    }

    protected void throwIfCannotDraw(android.graphics.Bitmap)
    {
        android.graphics.RecordingCanvas r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;
        android.graphics.Bitmap r7;

        r0 := @this: android.graphics.RecordingCanvas;

        r7 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<android.view.DisplayListCanvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r7);

        i0 = virtualinvoke r7.<android.graphics.Bitmap: int getByteCount()>();

        if i0 > 104857600 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Canvas: trying to draw too large(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes) bitmap.");

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }
}
