public final class android.graphics.RenderNode extends java.lang.Object
{
    public static final int USAGE_BACKGROUND;
    public static final int USAGE_UNKNOWN;
    private final android.graphics.RenderNode$AnimationHost mAnimationHost;
    private android.graphics.RenderNode$CompositePositionUpdateListener mCompositePositionUpdateListener;
    private android.graphics.RecordingCanvas mCurrentRecordingCanvas;
    public final long mNativeRenderNode;

    private void <init>(long)
    {
        android.graphics.RenderNode r0;
        long l0, $l1;
        libcore.util.NativeAllocationRegistry $r1;

        r0 := @this: android.graphics.RenderNode;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.RenderNode: long mNativeRenderNode> = l0;

        $r1 = <android.graphics.RenderNode$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        virtualinvoke $r1.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l1);

        r0.<android.graphics.RenderNode: android.graphics.RenderNode$AnimationHost mAnimationHost> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        android.graphics.RenderNode r0;
        java.lang.String r1;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.graphics.RenderNode: void <init>(java.lang.String,android.graphics.RenderNode$AnimationHost)>(r1, null);

        return;
    }

    private void <init>(java.lang.String, android.graphics.RenderNode$AnimationHost)
    {
        android.graphics.RenderNode r0;
        java.lang.String r1;
        android.graphics.RenderNode$AnimationHost r2;
        long $l0, $l1;
        libcore.util.NativeAllocationRegistry $r3;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.RenderNode$AnimationHost;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <android.graphics.RenderNode: long nCreate(java.lang.String)>(r1);

        r0.<android.graphics.RenderNode: long mNativeRenderNode> = $l0;

        $r3 = <android.graphics.RenderNode$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        virtualinvoke $r3.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l1);

        r0.<android.graphics.RenderNode: android.graphics.RenderNode$AnimationHost mAnimationHost> = r2;

        return;
    }

    static long access$000()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.RenderNode: long nGetNativeFinalizer()>();

        return $l0;
    }

    public static android.graphics.RenderNode adopt(long)
    {
        long l0;
        android.graphics.RenderNode $r0;

        l0 := @parameter0: long;

        $r0 = new android.graphics.RenderNode;

        specialinvoke $r0.<android.graphics.RenderNode: void <init>(long)>(l0);

        return $r0;
    }

    public static android.graphics.RenderNode create(java.lang.String, android.graphics.RenderNode$AnimationHost)
    {
        java.lang.String r0;
        android.graphics.RenderNode$AnimationHost r1;
        android.graphics.RenderNode $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.graphics.RenderNode$AnimationHost;

        $r2 = new android.graphics.RenderNode;

        specialinvoke $r2.<android.graphics.RenderNode: void <init>(java.lang.String,android.graphics.RenderNode$AnimationHost)>(r0, r1);

        return $r2;
    }

    private static native void nAddAnimator(long, long);

    private static native long nCreate(java.lang.String);

    private static native void nEndAllAnimators(long);

    private static native int nGetAllocatedSize(long);

    private static native boolean nGetAllowForceDark(long);

    private static native float nGetAlpha(long);

    private static native int nGetAmbientShadowColor(long);

    private static native boolean nGetAnimationMatrix(long, long);

    private static native int nGetBottom(long);

    private static native float nGetCameraDistance(long);

    private static native boolean nGetClipToBounds(long);

    private static native boolean nGetClipToOutline(long);

    private static native float nGetElevation(long);

    private static native int nGetHeight(long);

    private static native void nGetInverseTransformMatrix(long, long);

    private static native int nGetLayerType(long);

    private static native int nGetLeft(long);

    private static native long nGetNativeFinalizer();

    private static native float nGetPivotX(long);

    private static native float nGetPivotY(long);

    private static native int nGetRight(long);

    private static native float nGetRotation(long);

    private static native float nGetRotationX(long);

    private static native float nGetRotationY(long);

    private static native float nGetScaleX(long);

    private static native float nGetScaleY(long);

    private static native int nGetSpotShadowColor(long);

    private static native int nGetTop(long);

    private static native void nGetTransformMatrix(long, long);

    private static native float nGetTranslationX(long);

    private static native float nGetTranslationY(long);

    private static native float nGetTranslationZ(long);

    private static native long nGetUniqueId(long);

    private static native int nGetUsageSize(long);

    private static native int nGetWidth(long);

    private static native boolean nHasIdentityMatrix(long);

    private static native boolean nHasOverlappingRendering(long);

    private static native boolean nHasShadow(long);

    private static native boolean nIsPivotExplicitlySet(long);

    private static native boolean nIsValid(long);

    private static native boolean nOffsetLeftAndRight(long, int);

    private static native boolean nOffsetTopAndBottom(long, int);

    private static native void nOutput(long);

    private static native void nRequestPositionUpdates(long, android.graphics.RenderNode$PositionUpdateListener);

    private static native boolean nResetPivot(long);

    private static native boolean nSetAllowForceDark(long, boolean);

    private static native boolean nSetAlpha(long, float);

    private static native boolean nSetAmbientShadowColor(long, int);

    private static native boolean nSetAnimationMatrix(long, long);

    private static native boolean nSetBottom(long, int);

    private static native boolean nSetCameraDistance(long, float);

    private static native boolean nSetClipBounds(long, int, int, int, int);

    private static native boolean nSetClipBoundsEmpty(long);

    private static native boolean nSetClipToBounds(long, boolean);

    private static native boolean nSetClipToOutline(long, boolean);

    private static native void nSetDisplayList(long, long);

    private static native boolean nSetElevation(long, float);

    private static native boolean nSetHasOverlappingRendering(long, boolean);

    private static native boolean nSetLayerPaint(long, long);

    private static native boolean nSetLayerType(long, int);

    private static native boolean nSetLeft(long, int);

    private static native boolean nSetLeftTopRightBottom(long, int, int, int, int);

    private static native boolean nSetOutlineEmpty(long);

    private static native boolean nSetOutlineNone(long);

    private static native boolean nSetOutlinePath(long, long, float);

    private static native boolean nSetOutlineRoundRect(long, int, int, int, int, float, float);

    private static native boolean nSetPivotX(long, float);

    private static native boolean nSetPivotY(long, float);

    private static native boolean nSetProjectBackwards(long, boolean);

    private static native boolean nSetProjectionReceiver(long, boolean);

    private static native boolean nSetRevealClip(long, boolean, float, float, float);

    private static native boolean nSetRight(long, int);

    private static native boolean nSetRotation(long, float);

    private static native boolean nSetRotationX(long, float);

    private static native boolean nSetRotationY(long, float);

    private static native boolean nSetScaleX(long, float);

    private static native boolean nSetScaleY(long, float);

    private static native boolean nSetSpotShadowColor(long, int);

    private static native boolean nSetStaticMatrix(long, long);

    private static native boolean nSetTop(long, int);

    private static native boolean nSetTranslationX(long, float);

    private static native boolean nSetTranslationY(long, float);

    private static native boolean nSetTranslationZ(long, float);

    private static native void nSetUsageHint(long, int);

    public void addAnimator(android.graphics.animation.RenderNodeAnimator)
    {
        android.graphics.RenderNode r0;
        android.graphics.animation.RenderNodeAnimator r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        long $l0, $l1;
        android.graphics.RenderNode$AnimationHost $r3;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.animation.RenderNodeAnimator;

        $z0 = virtualinvoke r0.<android.graphics.RenderNode: boolean isAttached()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l1 = virtualinvoke r1.<android.graphics.animation.RenderNodeAnimator: long getNativeAnimator()>();

        staticinvoke <android.graphics.RenderNode: void nAddAnimator(long,long)>($l0, $l1);

        $r3 = r0.<android.graphics.RenderNode: android.graphics.RenderNode$AnimationHost mAnimationHost>;

        interfaceinvoke $r3.<android.graphics.RenderNode$AnimationHost: void registerAnimatingRenderNode(android.graphics.RenderNode)>(r0);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot start this animator on a detached view!");

        throw $r2;
    }

    public void addPositionUpdateListener(android.graphics.RenderNode$PositionUpdateListener)
    {
        android.graphics.RenderNode r0;
        android.graphics.RenderNode$CompositePositionUpdateListener r1, $r2, r5;
        long $l0;
        android.graphics.RenderNode$PositionUpdateListener[] $r3;
        android.graphics.RenderNode$PositionUpdateListener r4;

        r0 := @this: android.graphics.RenderNode;

        r4 := @parameter0: android.graphics.RenderNode$PositionUpdateListener;

        r1 = r0.<android.graphics.RenderNode: android.graphics.RenderNode$CompositePositionUpdateListener mCompositePositionUpdateListener>;

        if r1 != null goto label1;

        $r2 = new android.graphics.RenderNode$CompositePositionUpdateListener;

        $r3 = newarray (android.graphics.RenderNode$PositionUpdateListener)[1];

        $r3[0] = r4;

        specialinvoke $r2.<android.graphics.RenderNode$CompositePositionUpdateListener: void <init>(android.graphics.RenderNode$PositionUpdateListener[])>($r3);

        r5 = $r2;

        goto label2;

     label1:
        r5 = virtualinvoke r1.<android.graphics.RenderNode$CompositePositionUpdateListener: android.graphics.RenderNode$CompositePositionUpdateListener 'with'(android.graphics.RenderNode$PositionUpdateListener)>(r4);

     label2:
        r0.<android.graphics.RenderNode: android.graphics.RenderNode$CompositePositionUpdateListener mCompositePositionUpdateListener> = r5;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RenderNode: void nRequestPositionUpdates(long,android.graphics.RenderNode$PositionUpdateListener)>($l0, r5);

        return;
    }

    public android.graphics.RecordingCanvas beginRecording()
    {
        android.graphics.RenderNode r0;
        long $l0, $l2;
        int $i1, $i3;
        android.graphics.RecordingCanvas $r1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetWidth(long)>($l0);

        $l2 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i3 = staticinvoke <android.graphics.RenderNode: int nGetHeight(long)>($l2);

        $r1 = virtualinvoke r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>($i1, $i3);

        return $r1;
    }

    public android.graphics.RecordingCanvas beginRecording(int, int)
    {
        android.graphics.RenderNode r0;
        int i0, i1;
        android.graphics.RecordingCanvas r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas mCurrentRecordingCanvas>;

        if $r2 != null goto label1;

        r1 = staticinvoke <android.graphics.RecordingCanvas: android.graphics.RecordingCanvas obtain(android.graphics.RenderNode,int,int)>(r0, i0, i1);

        r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas mCurrentRecordingCanvas> = r1;

        return r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recording currently in progress - missing #endRecording() call?");

        throw $r3;
    }

    public long computeApproximateMemoryAllocated()
    {
        android.graphics.RenderNode r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetAllocatedSize(long)>($l0);

        $l2 = (long) $i1;

        return $l2;
    }

    public long computeApproximateMemoryUsage()
    {
        android.graphics.RenderNode r0;
        long $l0, $l2;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetUsageSize(long)>($l0);

        $l2 = (long) $i1;

        return $l2;
    }

    public void discardDisplayList()
    {
        android.graphics.RenderNode r0;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RenderNode: void nSetDisplayList(long,long)>($l0, 0L);

        return;
    }

    public void end(android.graphics.RecordingCanvas)
    {
        android.graphics.RenderNode r0;
        android.graphics.RecordingCanvas r1, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.RecordingCanvas;

        $r2 = r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas mCurrentRecordingCanvas>;

        if r1 != $r2 goto label1;

        virtualinvoke r0.<android.graphics.RenderNode: void endRecording()>();

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong canvas");

        throw $r3;
    }

    public void endAllAnimators()
    {
        android.graphics.RenderNode r0;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RenderNode: void nEndAllAnimators(long)>($l0);

        return;
    }

    public void endRecording()
    {
        android.graphics.RenderNode r0;
        android.graphics.RecordingCanvas r1, $r2;
        long l0, $l1;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.graphics.RenderNode;

        $r2 = r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas mCurrentRecordingCanvas>;

        if $r2 == null goto label1;

        r1 = r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas mCurrentRecordingCanvas>;

        r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas mCurrentRecordingCanvas> = null;

        l0 = virtualinvoke r1.<android.graphics.RecordingCanvas: long finishRecording()>();

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RenderNode: void nSetDisplayList(long,long)>($l1, l0);

        virtualinvoke r1.<android.graphics.RecordingCanvas: void recycle()>();

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No recording in progress, forgot to call #beginRecording()?");

        throw $r3;
    }

    public float getAlpha()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetAlpha(long)>($l0);

        return $f0;
    }

    public int getAmbientShadowColor()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetAmbientShadowColor(long)>($l0);

        return $i1;
    }

    public android.graphics.Matrix getAnimationMatrix()
    {
        android.graphics.RenderNode r0;
        android.graphics.Matrix $r2;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l0 = $r2.<android.graphics.Matrix: long native_instance>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nGetAnimationMatrix(long,long)>($l1, $l0);

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        return null;
    }

    public int getBottom()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetBottom(long)>($l0);

        return $i1;
    }

    public float getCameraDistance()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0, $f1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetCameraDistance(long)>($l0);

        $f1 = neg $f0;

        return $f1;
    }

    public boolean getClipToBounds()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nGetClipToBounds(long)>($l0);

        return $z0;
    }

    public boolean getClipToOutline()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nGetClipToOutline(long)>($l0);

        return $z0;
    }

    public float getElevation()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetElevation(long)>($l0);

        return $f0;
    }

    public int getHeight()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetHeight(long)>($l0);

        return $i1;
    }

    public void getInverseMatrix(android.graphics.Matrix)
    {
        android.graphics.RenderNode r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.graphics.RenderNode: void nGetInverseTransformMatrix(long,long)>($l1, $l0);

        return;
    }

    public int getLeft()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetLeft(long)>($l0);

        return $i1;
    }

    public void getMatrix(android.graphics.Matrix)
    {
        android.graphics.RenderNode r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.graphics.RenderNode: void nGetTransformMatrix(long,long)>($l1, $l0);

        return;
    }

    public float getPivotX()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetPivotX(long)>($l0);

        return $f0;
    }

    public float getPivotY()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetPivotY(long)>($l0);

        return $f0;
    }

    public int getRight()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetRight(long)>($l0);

        return $i1;
    }

    public float getRotationX()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetRotationX(long)>($l0);

        return $f0;
    }

    public float getRotationY()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetRotationY(long)>($l0);

        return $f0;
    }

    public float getRotationZ()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetRotation(long)>($l0);

        return $f0;
    }

    public float getScaleX()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetScaleX(long)>($l0);

        return $f0;
    }

    public float getScaleY()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetScaleY(long)>($l0);

        return $f0;
    }

    public int getSpotShadowColor()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetSpotShadowColor(long)>($l0);

        return $i1;
    }

    public int getTop()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetTop(long)>($l0);

        return $i1;
    }

    public float getTranslationX()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetTranslationX(long)>($l0);

        return $f0;
    }

    public float getTranslationY()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetTranslationY(long)>($l0);

        return $f0;
    }

    public float getTranslationZ()
    {
        android.graphics.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.graphics.RenderNode: float nGetTranslationZ(long)>($l0);

        return $f0;
    }

    public long getUniqueId()
    {
        android.graphics.RenderNode r0;
        long $l0, $l1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l1 = staticinvoke <android.graphics.RenderNode: long nGetUniqueId(long)>($l0);

        return $l1;
    }

    public boolean getUseCompositingLayer()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;
        boolean z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetLayerType(long)>($l0);

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int getWidth()
    {
        android.graphics.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.graphics.RenderNode: int nGetWidth(long)>($l0);

        return $i1;
    }

    public boolean hasDisplayList()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nIsValid(long)>($l0);

        return $z0;
    }

    public boolean hasIdentityMatrix()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nHasIdentityMatrix(long)>($l0);

        return $z0;
    }

    public boolean hasOverlappingRendering()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nHasOverlappingRendering(long)>($l0);

        return $z0;
    }

    public boolean hasShadow()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nHasShadow(long)>($l0);

        return $z0;
    }

    public boolean isAttached()
    {
        android.graphics.RenderNode r0;
        android.graphics.RenderNode$AnimationHost r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.RenderNode;

        r1 = r0.<android.graphics.RenderNode: android.graphics.RenderNode$AnimationHost mAnimationHost>;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<android.graphics.RenderNode$AnimationHost: boolean isAttached()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isForceDarkAllowed()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nGetAllowForceDark(long)>($l0);

        return $z0;
    }

    public boolean isPivotExplicitlySet()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nIsPivotExplicitlySet(long)>($l0);

        return $z0;
    }

    public boolean offsetLeftAndRight(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nOffsetLeftAndRight(long,int)>($l1, i0);

        return $z0;
    }

    public boolean offsetTopAndBottom(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nOffsetTopAndBottom(long,int)>($l1, i0);

        return $z0;
    }

    public void output()
    {
        android.graphics.RenderNode r0;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RenderNode: void nOutput(long)>($l0);

        return;
    }

    public void registerVectorDrawableAnimator(android.view.NativeVectorDrawableAnimator)
    {
        android.graphics.RenderNode r0;
        android.view.NativeVectorDrawableAnimator r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        android.graphics.RenderNode$AnimationHost $r3;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.view.NativeVectorDrawableAnimator;

        $z0 = virtualinvoke r0.<android.graphics.RenderNode: boolean isAttached()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.graphics.RenderNode: android.graphics.RenderNode$AnimationHost mAnimationHost>;

        interfaceinvoke $r3.<android.graphics.RenderNode$AnimationHost: void registerVectorDrawableAnimator(android.view.NativeVectorDrawableAnimator)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot start this animator on a detached view!");

        throw $r2;
    }

    public void removePositionUpdateListener(android.graphics.RenderNode$PositionUpdateListener)
    {
        android.graphics.RenderNode r0;
        android.graphics.RenderNode$CompositePositionUpdateListener r1, r3;
        long $l0;
        android.graphics.RenderNode$PositionUpdateListener r2;

        r0 := @this: android.graphics.RenderNode;

        r2 := @parameter0: android.graphics.RenderNode$PositionUpdateListener;

        r1 = r0.<android.graphics.RenderNode: android.graphics.RenderNode$CompositePositionUpdateListener mCompositePositionUpdateListener>;

        if r1 == null goto label1;

        r3 = virtualinvoke r1.<android.graphics.RenderNode$CompositePositionUpdateListener: android.graphics.RenderNode$CompositePositionUpdateListener without(android.graphics.RenderNode$PositionUpdateListener)>(r2);

        r0.<android.graphics.RenderNode: android.graphics.RenderNode$CompositePositionUpdateListener mCompositePositionUpdateListener> = r3;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RenderNode: void nRequestPositionUpdates(long,android.graphics.RenderNode$PositionUpdateListener)>($l0, r3);

     label1:
        return;
    }

    public boolean resetPivot()
    {
        android.graphics.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nResetPivot(long)>($l0);

        return $z0;
    }

    public boolean setAlpha(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetAlpha(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setAmbientShadowColor(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetAmbientShadowColor(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setAnimationMatrix(android.graphics.Matrix)
    {
        android.graphics.RenderNode r0;
        android.graphics.Matrix r1;
        long l0, l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        if r1 == null goto label1;

        l1 = r1.<android.graphics.Matrix: long native_instance>;

        goto label2;

     label1:
        l1 = 0L;

     label2:
        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetAnimationMatrix(long,long)>(l0, l1);

        return $z0;
    }

    public boolean setBottom(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetBottom(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setCameraDistance(float)
    {
        android.graphics.RenderNode r0;
        float f0, $f1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        byte $b0;
        long $l1;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isFinite(float)>(f0);

        if $z0 == 0 goto label1;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $f1 = neg f0;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetCameraDistance(long,float)>($l1, $f1);

        return $z1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("distance must be finite & positive, given=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public boolean setClipRect(android.graphics.Rect)
    {
        android.graphics.RenderNode r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;
        long $l4, $l5;
        boolean $z0, $z1;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Rect;

        if r1 != null goto label1;

        $l5 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetClipBoundsEmpty(long)>($l5);

        return $z1;

     label1:
        $l4 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetClipBounds(long,int,int,int,int)>($l4, $i3, $i2, $i1, $i0);

        return $z0;
    }

    public boolean setClipToBounds(boolean)
    {
        android.graphics.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetClipToBounds(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setClipToOutline(boolean)
    {
        android.graphics.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetClipToOutline(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setElevation(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetElevation(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setForceDarkAllowed(boolean)
    {
        android.graphics.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetAllowForceDark(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setHasOverlappingRendering(boolean)
    {
        android.graphics.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetHasOverlappingRendering(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setLayerPaint(android.graphics.Paint)
    {
        android.graphics.RenderNode r0;
        android.graphics.Paint r1;
        long l0, l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Paint;

        l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        if r1 == null goto label1;

        l1 = virtualinvoke r1.<android.graphics.Paint: long getNativeInstance()>();

        goto label2;

     label1:
        l1 = 0L;

     label2:
        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetLayerPaint(long,long)>(l0, l1);

        return $z0;
    }

    public boolean setLayerType(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetLayerType(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setLeft(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetLeft(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setLeftTopRightBottom(int, int, int, int)
    {
        android.graphics.RenderNode r0;
        int i0, i1, i2, i3;
        long $l4;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetLeftTopRightBottom(long,int,int,int,int)>($l4, i0, i1, i2, i3);

        return $z0;
    }

    public boolean setOutline(android.graphics.Outline)
    {
        android.graphics.RenderNode r0;
        android.graphics.Outline r1;
        int i0, $i2, $i3, $i4, $i5;
        long $l1, $l6, $l7, $l8, $l9;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Rect $r2, $r3, $r4, $r5;
        float $f0, $f1, $f2;
        java.lang.IllegalArgumentException $r6;
        android.graphics.Path $r7;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Outline;

        if r1 != null goto label1;

        $l9 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z3 = staticinvoke <android.graphics.RenderNode: boolean nSetOutlineNone(long)>($l9);

        return $z3;

     label1:
        i0 = r1.<android.graphics.Outline: int mMode>;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 != 2 goto label2;

        $l8 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $r7 = r1.<android.graphics.Outline: android.graphics.Path mPath>;

        $l7 = $r7.<android.graphics.Path: long mNativePath>;

        $f2 = r1.<android.graphics.Outline: float mAlpha>;

        $z2 = staticinvoke <android.graphics.RenderNode: boolean nSetOutlinePath(long,long,float)>($l8, $l7, $f2);

        return $z2;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized outline?");

        throw $r6;

     label3:
        $l6 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $r2 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i5 = $r2.<android.graphics.Rect: int left>;

        $r3 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i4 = $r3.<android.graphics.Rect: int top>;

        $r4 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i3 = $r4.<android.graphics.Rect: int right>;

        $r5 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i2 = $r5.<android.graphics.Rect: int bottom>;

        $f1 = r1.<android.graphics.Outline: float mRadius>;

        $f0 = r1.<android.graphics.Outline: float mAlpha>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetOutlineRoundRect(long,int,int,int,int,float,float)>($l6, $i5, $i4, $i3, $i2, $f1, $f0);

        return $z1;

     label4:
        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetOutlineEmpty(long)>($l1);

        return $z0;
    }

    public boolean setPivotX(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetPivotX(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setPivotY(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetPivotY(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setPosition(int, int, int, int)
    {
        android.graphics.RenderNode r0;
        int i0, i1, i2, i3;
        long $l4;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetLeftTopRightBottom(long,int,int,int,int)>($l4, i0, i1, i2, i3);

        return $z0;
    }

    public boolean setPosition(android.graphics.Rect)
    {
        android.graphics.RenderNode r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;
        long $l4;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Rect;

        $l4 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetLeftTopRightBottom(long,int,int,int,int)>($l4, $i3, $i2, $i1, $i0);

        return $z0;
    }

    public boolean setProjectBackwards(boolean)
    {
        android.graphics.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetProjectBackwards(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setProjectionReceiver(boolean)
    {
        android.graphics.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetProjectionReceiver(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setRevealClip(boolean, float, float, float)
    {
        android.graphics.RenderNode r0;
        boolean z0, $z1;
        float f0, f1, f2;
        long $l0;

        r0 := @this: android.graphics.RenderNode;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.graphics.RenderNode: boolean nSetRevealClip(long,boolean,float,float,float)>($l0, z0, f0, f1, f2);

        return $z1;
    }

    public boolean setRight(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetRight(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setRotationX(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetRotationX(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setRotationY(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetRotationY(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setRotationZ(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetRotation(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setScaleX(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetScaleX(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setScaleY(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetScaleY(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setSpotShadowColor(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetSpotShadowColor(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setStaticMatrix(android.graphics.Matrix)
    {
        android.graphics.RenderNode r0;
        android.graphics.Matrix r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetStaticMatrix(long,long)>($l1, $l0);

        return $z0;
    }

    public boolean setTop(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetTop(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setTranslationX(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetTranslationX(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setTranslationY(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetTranslationY(long,float)>($l0, f0);

        return $z0;
    }

    public boolean setTranslationZ(float)
    {
        android.graphics.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetTranslationZ(long,float)>($l0, f0);

        return $z0;
    }

    public void setUsageHint(int)
    {
        android.graphics.RenderNode r0;
        int i0;
        long $l1;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.graphics.RenderNode: void nSetUsageHint(long,int)>($l1, i0);

        return;
    }

    public boolean setUseCompositingLayer(boolean, android.graphics.Paint)
    {
        android.graphics.RenderNode r0;
        android.graphics.Paint r1;
        long l0, l1, l3;
        boolean $z0, $z1, z2, z3;
        byte b2;

        r0 := @this: android.graphics.RenderNode;

        z2 := @parameter0: boolean;

        r1 := @parameter1: android.graphics.Paint;

        l1 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        if z2 == 0 goto label1;

        b2 = 2;

        goto label2;

     label1:
        b2 = 0;

     label2:
        z3 = staticinvoke <android.graphics.RenderNode: boolean nSetLayerType(long,int)>(l1, b2);

        l0 = r0.<android.graphics.RenderNode: long mNativeRenderNode>;

        if r1 == null goto label3;

        l3 = virtualinvoke r1.<android.graphics.Paint: long getNativeInstance()>();

        goto label4;

     label3:
        l3 = 0L;

     label4:
        $z0 = staticinvoke <android.graphics.RenderNode: boolean nSetLayerPaint(long,long)>(l0, l3);

        $z1 = z3 | $z0;

        return $z1;
    }

    public android.graphics.RecordingCanvas start(int, int)
    {
        android.graphics.RenderNode r0;
        int i0, i1;
        android.graphics.RecordingCanvas $r1;

        r0 := @this: android.graphics.RenderNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>(i0, i1);

        return $r1;
    }

    public static void <clinit>()
    {
        <android.graphics.RenderNode: int USAGE_UNKNOWN> = 0;

        <android.graphics.RenderNode: int USAGE_BACKGROUND> = 1;

        return;
    }
}
