public class android.graphics.RuntimeShader extends android.graphics.Shader
{
    private boolean mIsOpaque;
    private long mNativeInstanceRuntimeShaderFactory;
    private byte[] mUniforms;

    public void <init>(java.lang.String, byte[], boolean)
    {
        android.graphics.RuntimeShader r0;
        java.lang.String r1;
        byte[] r2;
        boolean z0;
        android.graphics.ColorSpace$Named $r3;
        android.graphics.ColorSpace $r4;

        r0 := @this: android.graphics.RuntimeShader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        $r3 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        $r4 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r3);

        specialinvoke r0.<android.graphics.RuntimeShader: void <init>(java.lang.String,byte[],boolean,android.graphics.ColorSpace)>(r1, r2, z0, $r4);

        return;
    }

    private void <init>(java.lang.String, byte[], boolean, android.graphics.ColorSpace)
    {
        android.graphics.RuntimeShader r0;
        java.lang.String r1;
        byte[] r2;
        boolean z0;
        android.graphics.ColorSpace r3;
        long $l0, $l1;
        libcore.util.NativeAllocationRegistry $r4;

        r0 := @this: android.graphics.RuntimeShader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        r3 := @parameter3: android.graphics.ColorSpace;

        specialinvoke r0.<android.graphics.Shader: void <init>(android.graphics.ColorSpace)>(r3);

        r0.<android.graphics.RuntimeShader: byte[] mUniforms> = r2;

        r0.<android.graphics.RuntimeShader: boolean mIsOpaque> = z0;

        $l0 = staticinvoke <android.graphics.RuntimeShader: long nativeCreateShaderFactory(java.lang.String)>(r1);

        r0.<android.graphics.RuntimeShader: long mNativeInstanceRuntimeShaderFactory> = $l0;

        $r4 = <android.graphics.RuntimeShader$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l1 = r0.<android.graphics.RuntimeShader: long mNativeInstanceRuntimeShaderFactory>;

        virtualinvoke $r4.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l1);

        return;
    }

    static long access$000()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.RuntimeShader: long nativeGetFinalizer()>();

        return $l0;
    }

    private static native long nativeCreate(long, long, byte[], long, boolean);

    private static native long nativeCreateShaderFactory(java.lang.String);

    private static native long nativeGetFinalizer();

    long createNativeInstance(long)
    {
        android.graphics.RuntimeShader r0;
        long l0, $l1, $l2, $l3;
        byte[] $r1;
        android.graphics.ColorSpace $r2;
        boolean $z0;

        r0 := @this: android.graphics.RuntimeShader;

        l0 := @parameter0: long;

        $l1 = r0.<android.graphics.RuntimeShader: long mNativeInstanceRuntimeShaderFactory>;

        $r1 = r0.<android.graphics.RuntimeShader: byte[] mUniforms>;

        $r2 = virtualinvoke r0.<android.graphics.RuntimeShader: android.graphics.ColorSpace colorSpace()>();

        $l2 = virtualinvoke $r2.<android.graphics.ColorSpace: long getNativeInstance()>();

        $z0 = r0.<android.graphics.RuntimeShader: boolean mIsOpaque>;

        $l3 = staticinvoke <android.graphics.RuntimeShader: long nativeCreate(long,long,byte[],long,boolean)>($l1, l0, $r1, $l2, $z0);

        return $l3;
    }

    public void updateUniforms(byte[])
    {
        android.graphics.RuntimeShader r0;
        byte[] r1;

        r0 := @this: android.graphics.RuntimeShader;

        r1 := @parameter0: byte[];

        r0.<android.graphics.RuntimeShader: byte[] mUniforms> = r1;

        virtualinvoke r0.<android.graphics.RuntimeShader: void discardNativeInstance()>();

        return;
    }
}
