public class android.graphics.Shader extends java.lang.Object
{
    private java.lang.Runnable mCleaner;
    private final android.graphics.ColorSpace mColorSpace;
    private android.graphics.Matrix mLocalMatrix;
    private long mNativeInstance;

    public void <init>()
    {
        android.graphics.Shader r0;

        r0 := @this: android.graphics.Shader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Shader: android.graphics.ColorSpace mColorSpace> = null;

        return;
    }

    public void <init>(android.graphics.ColorSpace)
    {
        android.graphics.Shader r0;
        android.graphics.ColorSpace r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.graphics.Shader;

        r1 := @parameter0: android.graphics.ColorSpace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Shader: android.graphics.ColorSpace mColorSpace> = r1;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.ColorSpace: long getNativeInstance()>();

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Use Shader() to create a Shader with no ColorSpace");

        throw $r2;
    }

    static long access$000()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.Shader: long nativeGetFinalizer()>();

        return $l0;
    }

    public static long[] convertColors(int[])
    {
        int[] r0;
        long[] r1;
        int $i0, $i1, $i2, $i3, i5;
        java.lang.IllegalArgumentException $r2;
        long $l4;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 < 2 goto label3;

        $i1 = lengthof r0;

        r1 = newarray (long)[$i1];

        i5 = 0;

     label1:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label2;

        $i3 = r0[i5];

        $l4 = staticinvoke <android.graphics.Color: long pack(int)>($i3);

        r1[i5] = $l4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return r1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("needs >= 2 number of colors");

        throw $r2;
    }

    public static android.graphics.ColorSpace detectColorSpace(long[])
    {
        long[] r0;
        android.graphics.ColorSpace r1, $r3;
        int $i0, $i2, i4;
        java.lang.IllegalArgumentException $r2, $r4;
        long $l1, $l3;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        if $i0 < 2 goto label4;

        $l1 = r0[0];

        r1 = staticinvoke <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>($l1);

        i4 = 1;

     label1:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label3;

        $l3 = r0[i4];

        $r3 = staticinvoke <android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>($l3);

        if $r3 != r1 goto label2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All colors must be in the same ColorSpace!");

        throw $r4;

     label3:
        return r1;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("needs >= 2 number of colors");

        throw $r2;
    }

    private static native long nativeGetFinalizer();

    protected android.graphics.ColorSpace colorSpace()
    {
        android.graphics.Shader r0;
        android.graphics.ColorSpace $r1;

        r0 := @this: android.graphics.Shader;

        $r1 = r0.<android.graphics.Shader: android.graphics.ColorSpace mColorSpace>;

        return $r1;
    }

    long createNativeInstance(long)
    {
        android.graphics.Shader r0;
        long l0;

        r0 := @this: android.graphics.Shader;

        l0 := @parameter0: long;

        return 0L;
    }

    protected final void discardNativeInstance()
    {
        android.graphics.Shader r0;
        long $l0;
        byte $b1;
        java.lang.Runnable $r1;

        r0 := @this: android.graphics.Shader;

        $l0 = r0.<android.graphics.Shader: long mNativeInstance>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r1 = r0.<android.graphics.Shader: java.lang.Runnable mCleaner>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        r0.<android.graphics.Shader: java.lang.Runnable mCleaner> = null;

        r0.<android.graphics.Shader: long mNativeInstance> = 0L;

     label1:
        return;
    }

    public boolean getLocalMatrix(android.graphics.Matrix)
    {
        android.graphics.Shader r0;
        android.graphics.Matrix r1, r2;

        r0 := @this: android.graphics.Shader;

        r1 := @parameter0: android.graphics.Matrix;

        r2 = r0.<android.graphics.Shader: android.graphics.Matrix mLocalMatrix>;

        if r2 == null goto label1;

        virtualinvoke r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>(r2);

        return 1;

     label1:
        return 0;
    }

    public final long getNativeInstance()
    {
        android.graphics.Shader r0;
        android.graphics.Matrix r1;
        long $l0, $l3, l4, l5, $l6;
        byte $b1, $b2;
        libcore.util.NativeAllocationRegistry $r2;
        java.lang.Runnable $r3;

        r0 := @this: android.graphics.Shader;

        virtualinvoke r0.<android.graphics.Shader: void verifyNativeInstance()>();

        $l0 = r0.<android.graphics.Shader: long mNativeInstance>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        r1 = r0.<android.graphics.Shader: android.graphics.Matrix mLocalMatrix>;

        if r1 != null goto label1;

        l4 = 0L;

        goto label2;

     label1:
        l4 = r1.<android.graphics.Matrix: long native_instance>;

     label2:
        l5 = virtualinvoke r0.<android.graphics.Shader: long createNativeInstance(long)>(l4);

        r0.<android.graphics.Shader: long mNativeInstance> = l5;

        $b2 = l5 cmp 0L;

        if $b2 == 0 goto label3;

        $r2 = <android.graphics.Shader$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l3 = r0.<android.graphics.Shader: long mNativeInstance>;

        $r3 = virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l3);

        r0.<android.graphics.Shader: java.lang.Runnable mCleaner> = $r3;

     label3:
        $l6 = r0.<android.graphics.Shader: long mNativeInstance>;

        return $l6;
    }

    public void setLocalMatrix(android.graphics.Matrix)
    {
        android.graphics.Shader r0;
        android.graphics.Matrix r1, r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: android.graphics.Shader;

        r1 := @parameter0: android.graphics.Matrix;

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<android.graphics.Matrix: boolean isIdentity()>();

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        r2 = r0.<android.graphics.Shader: android.graphics.Matrix mLocalMatrix>;

        if r2 != null goto label2;

        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>(android.graphics.Matrix)>(r1);

        r0.<android.graphics.Shader: android.graphics.Matrix mLocalMatrix> = $r5;

        virtualinvoke r0.<android.graphics.Shader: void discardNativeInstance()>();

        goto label4;

     label2:
        $z1 = virtualinvoke r2.<android.graphics.Matrix: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label4;

        $r4 = r0.<android.graphics.Shader: android.graphics.Matrix mLocalMatrix>;

        virtualinvoke $r4.<android.graphics.Matrix: void set(android.graphics.Matrix)>(r1);

        virtualinvoke r0.<android.graphics.Shader: void discardNativeInstance()>();

        goto label4;

     label3:
        $r3 = r0.<android.graphics.Shader: android.graphics.Matrix mLocalMatrix>;

        if $r3 == null goto label4;

        r0.<android.graphics.Shader: android.graphics.Matrix mLocalMatrix> = null;

        virtualinvoke r0.<android.graphics.Shader: void discardNativeInstance()>();

     label4:
        return;
    }

    protected void verifyNativeInstance()
    {
        android.graphics.Shader r0;

        r0 := @this: android.graphics.Shader;

        return;
    }
}
