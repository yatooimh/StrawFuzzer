public class android.graphics.Typeface extends java.lang.Object
{
    public static final int BOLD;
    public static final int BOLD_ITALIC;
    public static final android.graphics.Typeface DEFAULT;
    public static final android.graphics.Typeface DEFAULT_BOLD;
    private static final java.lang.String DEFAULT_FAMILY;
    private static final int[] EMPTY_AXES;
    public static final int ITALIC;
    public static final android.graphics.Typeface MONOSPACE;
    public static final int NORMAL;
    public static final int RESOLVE_BY_FONT_TABLE;
    public static final android.graphics.Typeface SANS_SERIF;
    public static final android.graphics.Typeface SERIF;
    private static final int STYLE_ITALIC;
    public static final int STYLE_MASK;
    private static final int STYLE_NORMAL;
    private static java.lang.String TAG;
    static android.graphics.Typeface sDefaultTypeface;
    static android.graphics.Typeface[] sDefaults;
    private static final java.lang.Object sDynamicCacheLock;
    private static final android.util.LruCache sDynamicTypefaceCache;
    private static final libcore.util.NativeAllocationRegistry sRegistry;
    private static final java.lang.Object sStyledCacheLock;
    private static final android.util.LongSparseArray sStyledTypefaceCache;
    static final java.util.Map sSystemFallbackMap;
    static final java.util.Map sSystemFontMap;
    private static final java.lang.Object sWeightCacheLock;
    private static final android.util.LongSparseArray sWeightTypefaceCache;
    private int mStyle;
    private int[] mSupportedAxes;
    private int mWeight;
    public long native_instance;

    static void <clinit>()
    {
        int i0, i2;
        java.lang.String r1, r32;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        long $l1;
        libcore.util.NativeAllocationRegistry $r4;
        android.util.LongSparseArray $r5, $r7;
        java.lang.Object $r6, $r8, $r10, $r26, $r29;
        android.util.LruCache $r9;
        java.util.Map $r11, $r14, $r28, r31;
        int[] $r12;
        java.util.HashMap $r13;
        android.text.FontConfig$Alias[] $r15;
        boolean $z0;
        android.graphics.Typeface $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r27, $r30;
        android.graphics.Typeface[] $r21;
        java.lang.String[] r33;

        <android.graphics.Typeface: int STYLE_NORMAL> = 0;

        <android.graphics.Typeface: int STYLE_MASK> = 3;

        <android.graphics.Typeface: int STYLE_ITALIC> = 1;

        <android.graphics.Typeface: int RESOLVE_BY_FONT_TABLE> = -1;

        <android.graphics.Typeface: int NORMAL> = 0;

        <android.graphics.Typeface: int ITALIC> = 2;

        <android.graphics.Typeface: java.lang.String DEFAULT_FAMILY> = "sans-serif";

        <android.graphics.Typeface: int BOLD_ITALIC> = 3;

        <android.graphics.Typeface: int BOLD> = 1;

        <android.graphics.Typeface: java.lang.String TAG> = "Typeface";

        $r2 = class "Landroid/graphics/Typeface;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l1 = staticinvoke <android.graphics.Typeface: long nativeGetReleaseFunc()>();

        $r4 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long)>($r3, $l1);

        <android.graphics.Typeface: libcore.util.NativeAllocationRegistry sRegistry> = $r4;

        $r5 = new android.util.LongSparseArray;

        specialinvoke $r5.<android.util.LongSparseArray: void <init>(int)>(3);

        <android.graphics.Typeface: android.util.LongSparseArray sStyledTypefaceCache> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        <android.graphics.Typeface: java.lang.Object sStyledCacheLock> = $r6;

        $r7 = new android.util.LongSparseArray;

        specialinvoke $r7.<android.util.LongSparseArray: void <init>(int)>(3);

        <android.graphics.Typeface: android.util.LongSparseArray sWeightTypefaceCache> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        <android.graphics.Typeface: java.lang.Object sWeightCacheLock> = $r8;

        $r9 = new android.util.LruCache;

        specialinvoke $r9.<android.util.LruCache: void <init>(int)>(16);

        <android.graphics.Typeface: android.util.LruCache sDynamicTypefaceCache> = $r9;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        <android.graphics.Typeface: java.lang.Object sDynamicCacheLock> = $r10;

        $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        <android.graphics.Typeface: java.util.Map sSystemFallbackMap> = $r11;

        i2 = 0;

        $r12 = newarray (int)[0];

        <android.graphics.Typeface: int[] EMPTY_AXES> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        $r14 = staticinvoke <android.graphics.fonts.SystemFonts: java.util.Map getRawSystemFallbackMap()>();

        $r15 = staticinvoke <android.graphics.fonts.SystemFonts: android.text.FontConfig$Alias[] getAliases()>();

        staticinvoke <android.graphics.Typeface: void initSystemDefaultTypefaces(java.util.Map,java.util.Map,android.text.FontConfig$Alias[])>($r13, $r14, $r15);

        r31 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r13);

        <android.graphics.Typeface: java.util.Map sSystemFontMap> = r31;

        $z0 = interfaceinvoke r31.<java.util.Map: boolean containsKey(java.lang.Object)>("sans-serif");

        if $z0 == 0 goto label1;

        $r28 = <android.graphics.Typeface: java.util.Map sSystemFontMap>;

        $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>("sans-serif");

        $r30 = (android.graphics.Typeface) $r29;

        staticinvoke <android.graphics.Typeface: void setDefault(android.graphics.Typeface)>($r30);

     label1:
        r32 = (java.lang.String) null;

        $r16 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>(r32, 0);

        <android.graphics.Typeface: android.graphics.Typeface DEFAULT> = $r16;

        $r17 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>(r32, 1);

        <android.graphics.Typeface: android.graphics.Typeface DEFAULT_BOLD> = $r17;

        $r18 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>("sans-serif", 0);

        <android.graphics.Typeface: android.graphics.Typeface SANS_SERIF> = $r18;

        $r19 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>("serif", 0);

        <android.graphics.Typeface: android.graphics.Typeface SERIF> = $r19;

        $r20 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>("monospace", 0);

        <android.graphics.Typeface: android.graphics.Typeface MONOSPACE> = $r20;

        $r21 = newarray (android.graphics.Typeface)[4];

        $r22 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        $r21[0] = $r22;

        $r23 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT_BOLD>;

        $r21[1] = $r23;

        $r24 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>(r32, 2);

        $r21[2] = $r24;

        $r25 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>(r32, 3);

        $r21[3] = $r25;

        <android.graphics.Typeface: android.graphics.Typeface[] sDefaults> = $r21;

        r33 = newarray (java.lang.String)[6];

        r33[0] = "serif";

        r33[1] = "sans-serif";

        r33[2] = "cursive";

        r33[3] = "fantasy";

        r33[4] = "monospace";

        r33[5] = "system-ui";

        i0 = lengthof r33;

     label2:
        if i2 >= i0 goto label3;

        r1 = r33[i2];

        $r26 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r27 = (android.graphics.Typeface) $r26;

        staticinvoke <android.graphics.Typeface: void registerGenericFamilyNative(java.lang.String,android.graphics.Typeface)>(r1, $r27);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    private void <init>(long)
    {
        android.graphics.Typeface r0;
        long l0;
        byte $b1;
        java.lang.RuntimeException $r1;
        libcore.util.NativeAllocationRegistry $r2;
        int $i2, $i3;

        r0 := @this: android.graphics.Typeface;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Typeface: int mStyle> = 0;

        r0.<android.graphics.Typeface: int mWeight> = 0;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        r0.<android.graphics.Typeface: long native_instance> = l0;

        $r2 = <android.graphics.Typeface: libcore.util.NativeAllocationRegistry sRegistry>;

        virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l0);

        $i2 = staticinvoke <android.graphics.Typeface: int nativeGetStyle(long)>(l0);

        r0.<android.graphics.Typeface: int mStyle> = $i2;

        $i3 = staticinvoke <android.graphics.Typeface: int nativeGetWeight(long)>(l0);

        r0.<android.graphics.Typeface: int mWeight> = $i3;

        return;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("native typeface cannot be made");

        throw $r1;
    }

    void <init>(long, android.graphics.Typeface$1)
    {
        android.graphics.Typeface r0;
        long l0;
        android.graphics.Typeface$1 r1;

        r0 := @this: android.graphics.Typeface;

        l0 := @parameter0: long;

        r1 := @parameter1: android.graphics.Typeface$1;

        specialinvoke r0.<android.graphics.Typeface: void <init>(long)>(l0);

        return;
    }

    static android.graphics.Typeface access$100(java.lang.String)
    {
        java.lang.String r0;
        android.graphics.Typeface $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface getSystemDefaultTypeface(java.lang.String)>(r0);

        return $r1;
    }

    static int access$200(android.graphics.Typeface)
    {
        android.graphics.Typeface r0;
        int $i0;

        r0 := @parameter0: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mWeight>;

        return $i0;
    }

    static int access$300(android.graphics.Typeface)
    {
        android.graphics.Typeface r0;
        int $i0;

        r0 := @parameter0: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mStyle>;

        return $i0;
    }

    static android.graphics.Typeface access$400(android.graphics.Typeface, int, boolean)
    {
        android.graphics.Typeface r0, $r1;
        int i0;
        boolean z0;

        r0 := @parameter0: android.graphics.Typeface;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createWeightStyle(android.graphics.Typeface,int,boolean)>(r0, i0, z0);

        return $r1;
    }

    static java.lang.Object access$500()
    {
        java.lang.Object $r0;

        $r0 = <android.graphics.Typeface: java.lang.Object sDynamicCacheLock>;

        return $r0;
    }

    static android.util.LruCache access$600()
    {
        android.util.LruCache $r0;

        $r0 = <android.graphics.Typeface: android.util.LruCache sDynamicTypefaceCache>;

        return $r0;
    }

    static long access$700(long[], int, int)
    {
        long[] r0;
        int i0, i1;
        long $l2;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = staticinvoke <android.graphics.Typeface: long nativeCreateFromArray(long[],int,int)>(r0, i0, i1);

        return $l2;
    }

    public static android.graphics.Typeface create(android.graphics.Typeface, int)
    {
        int i0, $i2, $i3, i5;
        long l1, $l4;
        android.util.LongSparseArray $r0, $r3;
        java.lang.Object $r1, $r2, r7;
        java.lang.Throwable $r4;
        android.graphics.Typeface r5, r6, r9, r10;
        android.util.SparseArray r8;

        r5 := @parameter0: android.graphics.Typeface;

        i0 := @parameter1: int;

        i5 = i0;

        $i2 = i0 & -4;

        if $i2 == 0 goto label01;

        i5 = 0;

     label01:
        r6 = r5;

        if r5 != null goto label02;

        r6 = <android.graphics.Typeface: android.graphics.Typeface sDefaultTypeface>;

     label02:
        $i3 = r6.<android.graphics.Typeface: int mStyle>;

        if $i3 != i5 goto label03;

        return r6;

     label03:
        l1 = r6.<android.graphics.Typeface: long native_instance>;

        r7 = <android.graphics.Typeface: java.lang.Object sStyledCacheLock>;

        entermonitor r7;

     label04:
        $r0 = <android.graphics.Typeface: android.util.LongSparseArray sStyledTypefaceCache>;

        $r1 = virtualinvoke $r0.<android.util.LongSparseArray: java.lang.Object get(long)>(l1);

        r8 = (android.util.SparseArray) $r1;

     label05:
        if r8 != null goto label09;

     label06:
        r8 = new android.util.SparseArray;

        specialinvoke r8.<android.util.SparseArray: void <init>(int)>(4);

     label07:
        $r3 = <android.graphics.Typeface: android.util.LongSparseArray sStyledTypefaceCache>;

        virtualinvoke $r3.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l1, r8);

     label08:
        goto label13;

     label09:
        $r2 = virtualinvoke r8.<android.util.SparseArray: java.lang.Object get(int)>(i5);

        r9 = (android.graphics.Typeface) $r2;

     label10:
        if r9 == null goto label13;

     label11:
        exitmonitor r7;

     label12:
        return r9;

     label13:
        r10 = new android.graphics.Typeface;

        $l4 = staticinvoke <android.graphics.Typeface: long nativeCreateFromTypeface(long,int)>(l1, i5);

        specialinvoke r10.<android.graphics.Typeface: void <init>(long)>($l4);

        virtualinvoke r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i5, r10);

        exitmonitor r7;

     label14:
        return r10;

     label15:
        $r4 := @caughtexception;

     label16:
        exitmonitor r7;

     label17:
        throw $r4;

        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public static android.graphics.Typeface create(android.graphics.Typeface, int, boolean)
    {
        android.graphics.Typeface r0, $r1, r2;
        int i0;
        boolean z0;

        r0 := @parameter0: android.graphics.Typeface;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 1000, "weight");

        r2 = r0;

        if r0 != null goto label1;

        r2 = <android.graphics.Typeface: android.graphics.Typeface sDefaultTypeface>;

     label1:
        $r1 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createWeightStyle(android.graphics.Typeface,int,boolean)>(r2, i0, z0);

        return $r1;
    }

    public static android.graphics.Typeface create(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        android.graphics.Typeface $r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface getSystemDefaultTypeface(java.lang.String)>(r0);

        $r2 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>($r1, i0);

        return $r2;
    }

    public static android.graphics.Typeface createFromAsset(android.content.res.AssetManager, java.lang.String)
    {
        java.lang.String r0, $r11;
        android.graphics.Typeface r1, $r5;
        android.graphics.Typeface$Builder $r4;
        java.lang.Throwable $r6;
        java.lang.StringBuilder $r7;
        java.lang.RuntimeException $r10;
        android.content.res.AssetManager r12;
        java.io.InputStream r13;

        r12 := @parameter0: android.content.res.AssetManager;

        r0 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r12);

        $r4 = new android.graphics.Typeface$Builder;

        specialinvoke $r4.<android.graphics.Typeface$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>(r12, r0);

        r1 = virtualinvoke $r4.<android.graphics.Typeface$Builder: android.graphics.Typeface build()>();

        if r1 == null goto label1;

        return r1;

     label1:
        r13 = virtualinvoke r12.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>(r0);

     label2:
        if r13 == null goto label4;

     label3:
        virtualinvoke r13.<java.io.InputStream: void close()>();

     label4:
        $r5 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        return $r5;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font asset not found ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private static android.graphics.Typeface createFromFamilies(android.graphics.FontFamily[])
    {
        android.graphics.FontFamily[] r0;
        long[] r1;
        int $i0, $i1, i4;
        android.graphics.Typeface $r2;
        long $l2, $l3;
        android.graphics.FontFamily $r3;

        r0 := @parameter0: android.graphics.FontFamily[];

        $i0 = lengthof r0;

        r1 = newarray (long)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $r3 = r0[i4];

        $l3 = $r3.<android.graphics.FontFamily: long mNativePtr>;

        r1[i4] = $l3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new android.graphics.Typeface;

        $l2 = staticinvoke <android.graphics.Typeface: long nativeCreateFromArray(long[],int,int)>(r1, -1, -1);

        specialinvoke $r2.<android.graphics.Typeface: void <init>(long)>($l2);

        return $r2;
    }

    private static android.graphics.Typeface createFromFamilies(android.graphics.fonts.FontFamily[])
    {
        android.graphics.fonts.FontFamily[] r0;
        long[] r1;
        int $i0, $i1, i4;
        android.graphics.Typeface $r2;
        long $l2, $l3;
        android.graphics.fonts.FontFamily $r3;

        r0 := @parameter0: android.graphics.fonts.FontFamily[];

        $i0 = lengthof r0;

        r1 = newarray (long)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $r3 = r0[i4];

        $l3 = virtualinvoke $r3.<android.graphics.fonts.FontFamily: long getNativePtr()>();

        r1[i4] = $l3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new android.graphics.Typeface;

        $l2 = staticinvoke <android.graphics.Typeface: long nativeCreateFromArray(long[],int,int)>(r1, -1, -1);

        specialinvoke $r2.<android.graphics.Typeface: void <init>(long)>($l2);

        return $r2;
    }

    private static android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[], int, int)
    {
        android.graphics.FontFamily[] r0;
        int i0, i1;
        android.graphics.Typeface $r1;

        r0 := @parameter0: android.graphics.FontFamily[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[],java.lang.String,int,int)>(r0, "sans-serif", i0, i1);

        return $r1;
    }

    private static android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[], java.lang.String, int, int)
    {
        android.graphics.FontFamily[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, i12, i13;
        long[] r1;
        android.graphics.Typeface $r2;
        long $l7, $l10, $l11;
        android.graphics.fonts.FontFamily $r3;
        android.graphics.FontFamily $r4;
        java.lang.String r5;
        android.graphics.fonts.FontFamily[] r6;

        r0 := @parameter0: android.graphics.FontFamily[];

        r5 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r6 = staticinvoke <android.graphics.fonts.SystemFonts: android.graphics.fonts.FontFamily[] getSystemFallback(java.lang.String)>(r5);

        $i3 = lengthof r0;

        $i2 = lengthof r6;

        $i4 = $i3 + $i2;

        r1 = newarray (long)[$i4];

        i12 = 0;

     label1:
        $i5 = lengthof r0;

        if i12 >= $i5 goto label2;

        $r4 = r0[i12];

        $l11 = $r4.<android.graphics.FontFamily: long mNativePtr>;

        r1[i12] = $l11;

        i12 = i12 + 1;

        goto label1;

     label2:
        i13 = 0;

     label3:
        $i6 = lengthof r6;

        if i13 >= $i6 goto label4;

        $i8 = lengthof r0;

        $i9 = $i8 + i13;

        $r3 = r6[i13];

        $l10 = virtualinvoke $r3.<android.graphics.fonts.FontFamily: long getNativePtr()>();

        r1[$i9] = $l10;

        i13 = i13 + 1;

        goto label3;

     label4:
        $r2 = new android.graphics.Typeface;

        $l7 = staticinvoke <android.graphics.Typeface: long nativeCreateFromArray(long[],int,int)>(r1, i0, i1);

        specialinvoke $r2.<android.graphics.Typeface: void <init>(long)>($l7);

        return $r2;
    }

    public static android.graphics.Typeface createFromFile(java.io.File)
    {
        java.io.File r0;
        android.graphics.Typeface$Builder $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7;
        java.lang.RuntimeException $r6;
        android.graphics.Typeface $r8, r9;

        r0 := @parameter0: java.io.File;

        $r1 = new android.graphics.Typeface$Builder;

        specialinvoke $r1.<android.graphics.Typeface$Builder: void <init>(java.io.File)>(r0);

        r9 = virtualinvoke $r1.<android.graphics.Typeface$Builder: android.graphics.Typeface build()>();

        if r9 == null goto label1;

        return r9;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r8 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        return $r8;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font asset not found ");

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static android.graphics.Typeface createFromFile(java.lang.String)
    {
        java.lang.String r0;
        java.io.File $r2;
        android.graphics.Typeface $r3;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        $r3 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>($r2);

        return $r3;
    }

    public static android.graphics.Typeface createFromResources(android.content.res.FontResourcesParser$FamilyResourceEntry, android.content.res.AssetManager, java.lang.String)
    {
        boolean $z0;
        android.graphics.fonts.FontStyle $r0, $r1, $r5, r46;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i13, i14, i15, i16;
        android.graphics.Typeface$CustomFallbackBuilder $r2, r49;
        android.util.LruCache $r3;
        android.graphics.Typeface $r6, r37, r38, r50;
        java.lang.String $r7, $r9, $r18, $r19, $r20, $r24, r31, r53;
        android.graphics.fonts.Font$Builder $r8, r43, r44;
        android.graphics.fonts.Font $r10, $r13, r47, r48;
        android.graphics.fonts.FontFamily$Builder $r12, r40;
        java.util.ArrayList $r16, $r22;
        android.provider.FontRequest $r17;
        java.lang.Object $r21, $r23, r52;
        byte[] $r25;
        java.lang.Throwable $r26, $r27, $r28;
        android.content.res.FontResourcesParser$FamilyResourceEntry r29;
        android.content.res.AssetManager r30;
        android.content.res.FontResourcesParser$ProviderResourceEntry r32;
        java.util.List r33, r35;
        android.content.res.FontResourcesParser$FontFamilyFilesResourceEntry r39;
        android.content.res.FontResourcesParser$FontFileResourceEntry[] r41;
        android.content.res.FontResourcesParser$FontFileResourceEntry r42;
        byte b12;
        android.graphics.fonts.FontFamily r45;

        r29 := @parameter0: android.content.res.FontResourcesParser$FamilyResourceEntry;

        r30 := @parameter1: android.content.res.AssetManager;

        r31 := @parameter2: java.lang.String;

        $z0 = r29 instanceof android.content.res.FontResourcesParser$ProviderResourceEntry;

        if $z0 == 0 goto label06;

        r32 = (android.content.res.FontResourcesParser$ProviderResourceEntry) r29;

        r33 = virtualinvoke r32.<android.content.res.FontResourcesParser$ProviderResourceEntry: java.util.List getCerts()>();

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        if r33 == null goto label04;

        i7 = 0;

     label01:
        $i5 = interfaceinvoke r33.<java.util.List: int size()>();

        if i7 >= $i5 goto label04;

        $r21 = interfaceinvoke r33.<java.util.List: java.lang.Object get(int)>(i7);

        r35 = (java.util.List) $r21;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        i8 = 0;

     label02:
        $i6 = interfaceinvoke r35.<java.util.List: int size()>();

        if i8 >= $i6 goto label03;

        $r23 = interfaceinvoke r35.<java.util.List: java.lang.Object get(int)>(i8);

        $r24 = (java.lang.String) $r23;

        $r25 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r24, 0);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r25);

        i8 = i8 + 1;

        goto label02;

     label03:
        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r22);

        i7 = i7 + 1;

        goto label01;

     label04:
        $r17 = new android.provider.FontRequest;

        $r18 = virtualinvoke r32.<android.content.res.FontResourcesParser$ProviderResourceEntry: java.lang.String getAuthority()>();

        $r19 = virtualinvoke r32.<android.content.res.FontResourcesParser$ProviderResourceEntry: java.lang.String getPackage()>();

        $r20 = virtualinvoke r32.<android.content.res.FontResourcesParser$ProviderResourceEntry: java.lang.String getQuery()>();

        specialinvoke $r17.<android.provider.FontRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r18, $r19, $r20, $r16);

        r37 = staticinvoke <android.provider.FontsContract: android.graphics.Typeface getFontSync(android.provider.FontRequest)>($r17);

        if r37 != null goto label05;

        r37 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        goto label05;

     label05:
        return r37;

     label06:
        r38 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface findFromCache(android.content.res.AssetManager,java.lang.String)>(r30, r31);

        if r38 == null goto label07;

        return r38;

     label07:
        r39 = (android.content.res.FontResourcesParser$FontFamilyFilesResourceEntry) r29;

        r40 = null;

     label08:
        r41 = virtualinvoke r39.<android.content.res.FontResourcesParser$FontFamilyFilesResourceEntry: android.content.res.FontResourcesParser$FontFileResourceEntry[] getEntries()>();

        i9 = lengthof r41;

     label09:
        i10 = 0;

     label10:
        if i10 >= i9 goto label21;

        r42 = r41[i10];

     label11:
        r43 = new android.graphics.fonts.Font$Builder;

        $r7 = virtualinvoke r42.<android.content.res.FontResourcesParser$FontFileResourceEntry: java.lang.String getFileName()>();

        specialinvoke r43.<android.graphics.fonts.Font$Builder: void <init>(android.content.res.AssetManager,java.lang.String,boolean,int)>(r30, $r7, 0, 0);

        $i1 = virtualinvoke r42.<android.content.res.FontResourcesParser$FontFileResourceEntry: int getTtcIndex()>();

        $r8 = virtualinvoke r43.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>($i1);

        $r9 = virtualinvoke r42.<android.content.res.FontResourcesParser$FontFileResourceEntry: java.lang.String getVariationSettings()>();

        r44 = virtualinvoke $r8.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(java.lang.String)>($r9);

        $i2 = virtualinvoke r42.<android.content.res.FontResourcesParser$FontFileResourceEntry: int getWeight()>();

        if $i2 == -1 goto label12;

        $i4 = virtualinvoke r42.<android.content.res.FontResourcesParser$FontFileResourceEntry: int getWeight()>();

        virtualinvoke r44.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>($i4);

     label12:
        $i3 = virtualinvoke r42.<android.content.res.FontResourcesParser$FontFileResourceEntry: int getItalic()>();

        if $i3 == -1 goto label16;

        i11 = virtualinvoke r42.<android.content.res.FontResourcesParser$FontFileResourceEntry: int getItalic()>();

     label13:
        b12 = 1;

        if i11 != 1 goto label14;

        goto label15;

     label14:
        b12 = 0;

     label15:
        virtualinvoke r44.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>(b12);

     label16:
        if r40 != null goto label19;

     label17:
        $r12 = new android.graphics.fonts.FontFamily$Builder;

        $r13 = virtualinvoke r44.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>();

        specialinvoke $r12.<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>($r13);

        r40 = $r12;

     label18:
        goto label20;

     label19:
        $r10 = virtualinvoke r44.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>();

        virtualinvoke r40.<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>($r10);

     label20:
        i10 = i10 + 1;

        goto label10;

     label21:
        if r40 != null goto label23;

     label22:
        $r6 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        return $r6;

     label23:
        r45 = virtualinvoke r40.<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build()>();

        r46 = new android.graphics.fonts.FontStyle;

        specialinvoke r46.<android.graphics.fonts.FontStyle: void <init>(int,int)>(400, 0);

        r47 = virtualinvoke r45.<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>(0);

        $r0 = virtualinvoke r47.<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>();

        i13 = virtualinvoke r46.<android.graphics.fonts.FontStyle: int getMatchScore(android.graphics.fonts.FontStyle)>($r0);

     label24:
        i14 = 1;

     label25:
        $i0 = virtualinvoke r45.<android.graphics.fonts.FontFamily: int getSize()>();

        if i14 >= $i0 goto label28;

        r48 = virtualinvoke r45.<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>(i14);

        $r5 = virtualinvoke r48.<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>();

        i15 = virtualinvoke r46.<android.graphics.fonts.FontStyle: int getMatchScore(android.graphics.fonts.FontStyle)>($r5);

     label26:
        i16 = i13;

        if i15 >= i13 goto label27;

        r47 = r48;

        i16 = i15;

     label27:
        i14 = i14 + 1;

        i13 = i16;

        goto label25;

     label28:
        r49 = new android.graphics.Typeface$CustomFallbackBuilder;

        specialinvoke r49.<android.graphics.Typeface$CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>(r45);

        $r1 = virtualinvoke r47.<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>();

        $r2 = virtualinvoke r49.<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>($r1);

        r50 = virtualinvoke $r2.<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface build()>();

     label29:
        goto label31;

     label30:
        $r27 := @caughtexception;

        r50 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

     label31:
        r52 = <android.graphics.Typeface: java.lang.Object sDynamicCacheLock>;

        entermonitor r52;

     label32:
        r53 = staticinvoke <android.graphics.Typeface$Builder: java.lang.String access$000(android.content.res.AssetManager,java.lang.String,int,android.graphics.fonts.FontVariationAxis[],int,int,java.lang.String)>(r30, r31, 0, null, -1, -1, "sans-serif");

        $r3 = <android.graphics.Typeface: android.util.LruCache sDynamicTypefaceCache>;

        virtualinvoke $r3.<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r53, r50);

     label33:
        exitmonitor r52;

     label34:
        return r50;

     label35:
        $r26 := @caughtexception;

     label36:
        exitmonitor r52;

     label37:
        throw $r26;

     label38:
        $r28 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label08 to label09 with label38;
        catch java.io.IOException from label08 to label09 with label30;
        catch java.lang.IllegalArgumentException from label11 to label12 with label38;
        catch java.io.IOException from label11 to label12 with label30;
        catch java.lang.IllegalArgumentException from label12 to label13 with label38;
        catch java.io.IOException from label12 to label13 with label30;
        catch java.lang.IllegalArgumentException from label15 to label16 with label38;
        catch java.io.IOException from label15 to label16 with label30;
        catch java.lang.IllegalArgumentException from label17 to label18 with label38;
        catch java.io.IOException from label17 to label18 with label30;
        catch java.lang.IllegalArgumentException from label19 to label20 with label38;
        catch java.io.IOException from label19 to label20 with label30;
        catch java.lang.IllegalArgumentException from label22 to label23 with label38;
        catch java.io.IOException from label22 to label23 with label30;
        catch java.lang.IllegalArgumentException from label23 to label24 with label38;
        catch java.io.IOException from label23 to label24 with label30;
        catch java.lang.IllegalArgumentException from label25 to label26 with label38;
        catch java.io.IOException from label25 to label26 with label30;
        catch java.lang.IllegalArgumentException from label28 to label29 with label38;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.lang.Throwable from label32 to label33 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label35;
    }

    public static android.graphics.Typeface createFromTypefaceWithVariation(android.graphics.Typeface, java.util.List)
    {
        java.util.List r0;
        android.graphics.Typeface $r1, r2;
        long $l0, $l1;

        r2 := @parameter0: android.graphics.Typeface;

        r0 := @parameter1: java.util.List;

        if r2 != null goto label1;

        r2 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        goto label1;

     label1:
        $r1 = new android.graphics.Typeface;

        $l0 = r2.<android.graphics.Typeface: long native_instance>;

        $l1 = staticinvoke <android.graphics.Typeface: long nativeCreateFromTypefaceWithVariation(long,java.util.List)>($l0, r0);

        specialinvoke $r1.<android.graphics.Typeface: void <init>(long)>($l1);

        return $r1;
    }

    private static java.lang.String createProviderUid(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r8;
        java.lang.StringBuilder $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static android.graphics.Typeface createWeightStyle(android.graphics.Typeface, int, boolean)
    {
        int i0, i1, $i2, i7;
        boolean z0;
        java.lang.Object r0, $r2, $r3;
        long $l3, $l4, $l5, $l6;
        android.util.LongSparseArray $r1, $r4;
        java.lang.Throwable $r5;
        android.graphics.Typeface r6, r8, r9;
        android.util.SparseArray r7;

        r6 := @parameter0: android.graphics.Typeface;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i2 = i0 << 1;

        i7 = (int) z0;

        i1 = $i2 | i7;

        r0 = <android.graphics.Typeface: java.lang.Object sWeightCacheLock>;

        entermonitor r0;

     label01:
        $r1 = <android.graphics.Typeface: android.util.LongSparseArray sWeightTypefaceCache>;

        $l3 = r6.<android.graphics.Typeface: long native_instance>;

        $r2 = virtualinvoke $r1.<android.util.LongSparseArray: java.lang.Object get(long)>($l3);

        r7 = (android.util.SparseArray) $r2;

     label02:
        if r7 != null goto label06;

     label03:
        r7 = new android.util.SparseArray;

        specialinvoke r7.<android.util.SparseArray: void <init>(int)>(4);

     label04:
        $r4 = <android.graphics.Typeface: android.util.LongSparseArray sWeightTypefaceCache>;

        $l6 = r6.<android.graphics.Typeface: long native_instance>;

        virtualinvoke $r4.<android.util.LongSparseArray: void put(long,java.lang.Object)>($l6, r7);

     label05:
        goto label10;

     label06:
        $r3 = virtualinvoke r7.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r8 = (android.graphics.Typeface) $r3;

     label07:
        if r8 == null goto label10;

     label08:
        exitmonitor r0;

     label09:
        return r8;

     label10:
        r9 = new android.graphics.Typeface;

        $l4 = r6.<android.graphics.Typeface: long native_instance>;

        $l5 = staticinvoke <android.graphics.Typeface: long nativeCreateFromTypefaceWithExactStyle(long,int,boolean)>($l4, i0, z0);

        specialinvoke r9.<android.graphics.Typeface: void <init>(long)>($l5);

        virtualinvoke r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r9);

        exitmonitor r0;

     label11:
        return r9;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r0;

     label14:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public static android.graphics.Typeface defaultFromStyle(int)
    {
        int i0;
        android.graphics.Typeface[] $r0;
        android.graphics.Typeface $r1;

        i0 := @parameter0: int;

        $r0 = <android.graphics.Typeface: android.graphics.Typeface[] sDefaults>;

        $r1 = $r0[i0];

        return $r1;
    }

    public static android.graphics.Typeface findFromCache(android.content.res.AssetManager, java.lang.String)
    {
        java.lang.String r0, r6;
        java.lang.Object r1, $r3;
        android.util.LruCache $r2;
        java.lang.Throwable $r4;
        android.content.res.AssetManager r5;
        android.graphics.Typeface r7;

        r5 := @parameter0: android.content.res.AssetManager;

        r0 := @parameter1: java.lang.String;

        r1 = <android.graphics.Typeface: java.lang.Object sDynamicCacheLock>;

        entermonitor r1;

     label1:
        r6 = staticinvoke <android.graphics.Typeface$Builder: java.lang.String access$000(android.content.res.AssetManager,java.lang.String,int,android.graphics.fonts.FontVariationAxis[],int,int,java.lang.String)>(r5, r0, 0, null, -1, -1, "sans-serif");

        $r2 = <android.graphics.Typeface: android.util.LruCache sDynamicTypefaceCache>;

        $r3 = virtualinvoke $r2.<android.util.LruCache: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (android.graphics.Typeface) $r3;

     label2:
        if r7 == null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return r7;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static android.graphics.Typeface getSystemDefaultTypeface(java.lang.String)
    {
        java.util.Map $r0;
        java.lang.Object $r1;
        java.lang.String r2;
        android.graphics.Typeface r3;

        r2 := @parameter0: java.lang.String;

        $r0 = <android.graphics.Typeface: java.util.Map sSystemFontMap>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (android.graphics.Typeface) $r1;

        if r3 != null goto label1;

        r3 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        goto label1;

     label1:
        return r3;
    }

    public static void initSystemDefaultTypefaces(java.util.Map, java.util.Map, android.text.FontConfig$Alias[])
    {
        java.util.Map r0, r16;
        android.text.FontConfig$Alias[] r1;
        int i0, i1, i4;
        java.util.Set $r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r4, $r7, $r11;
        java.lang.Object $r5, $r9, $r10, $r12;
        android.graphics.Typeface $r6, $r14, r20;
        long $l2, $l3;
        android.graphics.fonts.FontFamily[] $r13;
        java.util.Iterator r17;
        java.util.Map$Entry r18;
        android.text.FontConfig$Alias r19;

        r0 := @parameter0: java.util.Map;

        r16 := @parameter1: java.util.Map;

        r1 := @parameter2: android.text.FontConfig$Alias[];

        $r2 = interfaceinvoke r16.<java.util.Map: java.util.Set entrySet()>();

        r17 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (android.graphics.fonts.FontFamily[]) $r12;

        $r14 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFamilies(android.graphics.fonts.FontFamily[])>($r13);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r14);

        goto label1;

     label2:
        i0 = lengthof r1;

        i4 = 0;

     label3:
        if i4 >= i0 goto label9;

        r19 = r1[i4];

        $r3 = virtualinvoke r19.<android.text.FontConfig$Alias: java.lang.String getName()>();

        $z1 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        goto label8;

     label4:
        $r4 = virtualinvoke r19.<android.text.FontConfig$Alias: java.lang.String getToName()>();

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r20 = (android.graphics.Typeface) $r5;

        if r20 != null goto label5;

        goto label8;

     label5:
        i1 = virtualinvoke r19.<android.text.FontConfig$Alias: int getWeight()>();

        if i1 != 400 goto label6;

        goto label7;

     label6:
        $r6 = new android.graphics.Typeface;

        $l2 = r20.<android.graphics.Typeface: long native_instance>;

        $l3 = staticinvoke <android.graphics.Typeface: long nativeCreateWeightAlias(long,int)>($l2, i1);

        specialinvoke $r6.<android.graphics.Typeface: void <init>(long)>($l3);

        r20 = $r6;

     label7:
        $r7 = virtualinvoke r19.<android.text.FontConfig$Alias: java.lang.String getName()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r20);

     label8:
        i4 = i4 + 1;

        goto label3;

     label9:
        return;
    }

    private static native long nativeCreateFromArray(long[], int, int);

    private static native long nativeCreateFromTypeface(long, int);

    private static native long nativeCreateFromTypefaceWithExactStyle(long, int, boolean);

    private static native long nativeCreateFromTypefaceWithVariation(long, java.util.List);

    private static native long nativeCreateWeightAlias(long, int);

    private static native long nativeGetReleaseFunc();

    private static native int nativeGetStyle(long);

    private static native int[] nativeGetSupportedAxes(long);

    private static native int nativeGetWeight(long);

    private static native void nativeRegisterGenericFamily(java.lang.String, long);

    private static native void nativeSetDefault(long);

    private static void registerGenericFamilyNative(java.lang.String, android.graphics.Typeface)
    {
        java.lang.String r0;
        android.graphics.Typeface r1;
        long $l0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.graphics.Typeface;

        if r1 == null goto label1;

        $l0 = r1.<android.graphics.Typeface: long native_instance>;

        staticinvoke <android.graphics.Typeface: void nativeRegisterGenericFamily(java.lang.String,long)>(r0, $l0);

     label1:
        return;
    }

    private static void setDefault(android.graphics.Typeface)
    {
        android.graphics.Typeface r0;
        long $l0;

        r0 := @parameter0: android.graphics.Typeface;

        <android.graphics.Typeface: android.graphics.Typeface sDefaultTypeface> = r0;

        $l0 = r0.<android.graphics.Typeface: long native_instance>;

        staticinvoke <android.graphics.Typeface: void nativeSetDefault(long)>($l0);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.graphics.Typeface r0, r4;
        java.lang.Class $r1, $r2;
        int $i0, $i1;
        long $l2, $l3;
        byte $b4;
        java.lang.Object r3;
        boolean z0;

        r0 := @this: android.graphics.Typeface;

        r3 := @parameter0: java.lang.Object;

        z0 = 1;

        if r0 != r3 goto label1;

        return 1;

     label1:
        if r3 == null goto label5;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label2;

        goto label5;

     label2:
        r4 = (android.graphics.Typeface) r3;

        $i1 = r0.<android.graphics.Typeface: int mStyle>;

        $i0 = r4.<android.graphics.Typeface: int mStyle>;

        if $i1 != $i0 goto label3;

        $l3 = r0.<android.graphics.Typeface: long native_instance>;

        $l2 = r4.<android.graphics.Typeface: long native_instance>;

        $b4 = $l3 cmp $l2;

        if $b4 != 0 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        return 0;
    }

    public int getStyle()
    {
        android.graphics.Typeface r0;
        int $i0;

        r0 := @this: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mStyle>;

        return $i0;
    }

    public int getWeight()
    {
        android.graphics.Typeface r0;
        int $i0;

        r0 := @this: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mWeight>;

        return $i0;
    }

    public int hashCode()
    {
        android.graphics.Typeface r0;
        long l0, $l1, $l2;
        int $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.graphics.Typeface;

        l0 = r0.<android.graphics.Typeface: long native_instance>;

        $i4 = 17 * 31;

        $l1 = l0 >>> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        $i5 = $i4 + $i3;

        $i7 = $i5 * 31;

        $i6 = r0.<android.graphics.Typeface: int mStyle>;

        $i8 = $i7 + $i6;

        return $i8;
    }

    public final boolean isBold()
    {
        android.graphics.Typeface r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Typeface;

        i0 = r0.<android.graphics.Typeface: int mStyle>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isItalic()
    {
        android.graphics.Typeface r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mStyle>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSupportedAxes(int)
    {
        android.graphics.Typeface r0;
        int i0, $i1;
        int[] $r1, $r2, $r3, $r4, r6;
        long $l2;
        java.lang.Throwable $r5;
        boolean z0;

        r0 := @this: android.graphics.Typeface;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.Typeface: int[] mSupportedAxes>;

        if $r1 != null goto label09;

        entermonitor r0;

     label01:
        $r3 = r0.<android.graphics.Typeface: int[] mSupportedAxes>;

        if $r3 != null goto label04;

        $l2 = r0.<android.graphics.Typeface: long native_instance>;

        r6 = staticinvoke <android.graphics.Typeface: int[] nativeGetSupportedAxes(long)>($l2);

        r0.<android.graphics.Typeface: int[] mSupportedAxes> = r6;

     label02:
        if r6 != null goto label04;

     label03:
        $r4 = <android.graphics.Typeface: int[] EMPTY_AXES>;

        r0.<android.graphics.Typeface: int[] mSupportedAxes> = $r4;

     label04:
        exitmonitor r0;

     label05:
        goto label09;

     label06:
        $r5 := @caughtexception;

     label07:
        exitmonitor r0;

     label08:
        throw $r5;

     label09:
        $r2 = r0.<android.graphics.Typeface: int[] mSupportedAxes>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, i0);

        if $i1 < 0 goto label10;

        z0 = 1;

        goto label11;

     label10:
        z0 = 0;

     label11:
        return z0;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }
}
