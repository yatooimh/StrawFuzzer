public class android.graphics.animation.RenderNodeAnimator extends android.animation.Animator
{
    public static final int ALPHA;
    public static final int LAST_VALUE;
    public static final int PAINT_ALPHA;
    public static final int PAINT_STROKE_WIDTH;
    public static final int ROTATION;
    public static final int ROTATION_X;
    public static final int ROTATION_Y;
    public static final int SCALE_X;
    public static final int SCALE_Y;
    private static final int STATE_DELAYED;
    private static final int STATE_FINISHED;
    private static final int STATE_PREPARE;
    private static final int STATE_RUNNING;
    public static final int TRANSLATION_X;
    public static final int TRANSLATION_Y;
    public static final int TRANSLATION_Z;
    public static final int X;
    public static final int Y;
    public static final int Z;
    private static java.lang.ThreadLocal sAnimationHelper;
    private float mFinalValue;
    private android.os.Handler mHandler;
    private android.animation.TimeInterpolator mInterpolator;
    private com.android.internal.util.VirtualRefBasePtr mNativePtr;
    private int mRenderProperty;
    private long mStartDelay;
    private long mStartTime;
    private int mState;
    private android.graphics.RenderNode mTarget;
    private final boolean mUiThreadHandlesDelay;
    private long mUnscaledDuration;
    private long mUnscaledStartDelay;
    private android.graphics.animation.RenderNodeAnimator$ViewListener mViewListener;

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        <android.graphics.animation.RenderNodeAnimator: int Z> = 10;

        <android.graphics.animation.RenderNodeAnimator: int Y> = 9;

        <android.graphics.animation.RenderNodeAnimator: int X> = 8;

        <android.graphics.animation.RenderNodeAnimator: int TRANSLATION_Z> = 2;

        <android.graphics.animation.RenderNodeAnimator: int TRANSLATION_Y> = 1;

        <android.graphics.animation.RenderNodeAnimator: int TRANSLATION_X> = 0;

        <android.graphics.animation.RenderNodeAnimator: int STATE_RUNNING> = 2;

        <android.graphics.animation.RenderNodeAnimator: int STATE_PREPARE> = 0;

        <android.graphics.animation.RenderNodeAnimator: int STATE_FINISHED> = 3;

        <android.graphics.animation.RenderNodeAnimator: int STATE_DELAYED> = 1;

        <android.graphics.animation.RenderNodeAnimator: int SCALE_Y> = 4;

        <android.graphics.animation.RenderNodeAnimator: int SCALE_X> = 3;

        <android.graphics.animation.RenderNodeAnimator: int ROTATION_Y> = 7;

        <android.graphics.animation.RenderNodeAnimator: int ROTATION_X> = 6;

        <android.graphics.animation.RenderNodeAnimator: int ROTATION> = 5;

        <android.graphics.animation.RenderNodeAnimator: int PAINT_STROKE_WIDTH> = 0;

        <android.graphics.animation.RenderNodeAnimator: int PAINT_ALPHA> = 1;

        <android.graphics.animation.RenderNodeAnimator: int LAST_VALUE> = 11;

        <android.graphics.animation.RenderNodeAnimator: int ALPHA> = 11;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <android.graphics.animation.RenderNodeAnimator: java.lang.ThreadLocal sAnimationHelper> = $r0;

        return;
    }

    public void <init>(int, float)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        int i0;
        float f0;
        long $l1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<android.animation.Animator: void <init>()>();

        r0.<android.graphics.animation.RenderNodeAnimator: int mRenderProperty> = -1;

        r0.<android.graphics.animation.RenderNodeAnimator: int mState> = 0;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledDuration> = 300L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledStartDelay> = 0L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay> = 0L;

        r0.<android.graphics.animation.RenderNodeAnimator: int mRenderProperty> = i0;

        r0.<android.graphics.animation.RenderNodeAnimator: float mFinalValue> = f0;

        r0.<android.graphics.animation.RenderNodeAnimator: boolean mUiThreadHandlesDelay> = 1;

        $l1 = staticinvoke <android.graphics.animation.RenderNodeAnimator: long nCreateAnimator(int,float)>(i0, f0);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void init(long)>($l1);

        return;
    }

    public void <init>(int, int, float, float)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        int i0, i1;
        float f0, f1;
        long $l2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        specialinvoke r0.<android.animation.Animator: void <init>()>();

        r0.<android.graphics.animation.RenderNodeAnimator: int mRenderProperty> = -1;

        r0.<android.graphics.animation.RenderNodeAnimator: int mState> = 0;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledDuration> = 300L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledStartDelay> = 0L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay> = 0L;

        $l2 = staticinvoke <android.graphics.animation.RenderNodeAnimator: long nCreateRevealAnimator(int,int,float,float)>(i0, i1, f0, f1);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void init(long)>($l2);

        r0.<android.graphics.animation.RenderNodeAnimator: boolean mUiThreadHandlesDelay> = 1;

        return;
    }

    public void <init>(android.graphics.CanvasProperty, float)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.graphics.CanvasProperty r1;
        float f0;
        long $l0, $l1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 := @parameter0: android.graphics.CanvasProperty;

        f0 := @parameter1: float;

        specialinvoke r0.<android.animation.Animator: void <init>()>();

        r0.<android.graphics.animation.RenderNodeAnimator: int mRenderProperty> = -1;

        r0.<android.graphics.animation.RenderNodeAnimator: int mState> = 0;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledDuration> = 300L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledStartDelay> = 0L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay> = 0L;

        $l0 = virtualinvoke r1.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l1 = staticinvoke <android.graphics.animation.RenderNodeAnimator: long nCreateCanvasPropertyFloatAnimator(long,float)>($l0, f0);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void init(long)>($l1);

        r0.<android.graphics.animation.RenderNodeAnimator: boolean mUiThreadHandlesDelay> = 0;

        return;
    }

    public void <init>(android.graphics.CanvasProperty, int, float)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.graphics.CanvasProperty r1;
        int i0;
        float f0;
        long $l1, $l2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 := @parameter0: android.graphics.CanvasProperty;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<android.animation.Animator: void <init>()>();

        r0.<android.graphics.animation.RenderNodeAnimator: int mRenderProperty> = -1;

        r0.<android.graphics.animation.RenderNodeAnimator: int mState> = 0;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledDuration> = 300L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledStartDelay> = 0L;

        r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay> = 0L;

        $l1 = virtualinvoke r1.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l2 = staticinvoke <android.graphics.animation.RenderNodeAnimator: long nCreateCanvasPropertyPaintAnimator(long,int,float)>($l1, i0, f0);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void init(long)>($l2);

        r0.<android.graphics.animation.RenderNodeAnimator: boolean mUiThreadHandlesDelay> = 0;

        return;
    }

    static boolean access$000(android.graphics.animation.RenderNodeAnimator, long)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long l0;
        boolean $z0;

        r0 := @parameter0: android.graphics.animation.RenderNodeAnimator;

        l0 := @parameter1: long;

        $z0 = specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: boolean processDelayed(long)>(l0);

        return $z0;
    }

    private void applyInterpolator()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.animation.TimeInterpolator r1, $r4, $r6;
        com.android.internal.util.VirtualRefBasePtr $r2, $r3, $r5;
        boolean $z0;
        long $l0, $l1, l2, l3;
        android.graphics.animation.NativeInterpolator $r7;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 = r0.<android.graphics.animation.RenderNodeAnimator: android.animation.TimeInterpolator mInterpolator>;

        if r1 == null goto label4;

        $r2 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        if $r2 != null goto label1;

        goto label4;

     label1:
        $z0 = staticinvoke <android.graphics.animation.RenderNodeAnimator: boolean isNativeInterpolator(android.animation.TimeInterpolator)>(r1);

        if $z0 == 0 goto label2;

        $r6 = r0.<android.graphics.animation.RenderNodeAnimator: android.animation.TimeInterpolator mInterpolator>;

        $r7 = (android.graphics.animation.NativeInterpolator) $r6;

        l2 = interfaceinvoke $r7.<android.graphics.animation.NativeInterpolator: long createNativeInterpolator()>();

        goto label3;

     label2:
        $r3 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l0 = virtualinvoke $r3.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        l3 = staticinvoke <android.graphics.animation.RenderNodeAnimator: long nGetDuration(long)>($l0);

        $r4 = r0.<android.graphics.animation.RenderNodeAnimator: android.animation.TimeInterpolator mInterpolator>;

        l2 = staticinvoke <android.graphics.animation.FallbackLUTInterpolator: long createNativeInterpolator(android.animation.TimeInterpolator,long)>($r4, l3);

     label3:
        $r5 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l1 = virtualinvoke $r5.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nSetInterpolator(long,long)>($l1, l2);

        return;

     label4:
        return;
    }

    private static void callOnFinished(android.graphics.animation.RenderNodeAnimator)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.os.Handler $r1, r7;
        android.os.Looper $r2;
        android.graphics.animation._$$Lambda$awqPSgriNRe12PWP0zkpAtPsfV4 $r4, $r6;

        r0 := @parameter0: android.graphics.animation.RenderNodeAnimator;

        r7 = r0.<android.graphics.animation.RenderNodeAnimator: android.os.Handler mHandler>;

        if r7 == null goto label1;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r6 = new android.graphics.animation._$$Lambda$awqPSgriNRe12PWP0zkpAtPsfV4;

        specialinvoke $r6.<android.graphics.animation._$$Lambda$awqPSgriNRe12PWP0zkpAtPsfV4: void <init>(android.graphics.animation.RenderNodeAnimator)>(r0);

        virtualinvoke r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        goto label2;

     label1:
        $r1 = new android.os.Handler;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback,boolean)>($r2, null, 1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r4 = new android.graphics.animation._$$Lambda$awqPSgriNRe12PWP0zkpAtPsfV4;

        specialinvoke $r4.<android.graphics.animation._$$Lambda$awqPSgriNRe12PWP0zkpAtPsfV4: void <init>(android.graphics.animation.RenderNodeAnimator)>(r0);

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

     label2:
        return;
    }

    private void checkMutable()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        int $i0;
        java.lang.IllegalStateException $r1, $r3;
        com.android.internal.util.VirtualRefBasePtr $r2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mState>;

        if $i0 != 0 goto label2;

        $r2 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        if $r2 == null goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Animator\'s target has been destroyed (trying to modify an animation after activity destroy?)");

        throw $r3;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Animator has already started, cannot change it now!");

        throw $r1;
    }

    private java.util.ArrayList cloneListeners()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        java.util.ArrayList r1, r3;
        java.lang.Object $r2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 = virtualinvoke r0.<android.graphics.animation.RenderNodeAnimator: java.util.ArrayList getListeners()>();

        r3 = r1;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object clone()>();

        r3 = (java.util.ArrayList) $r2;

     label1:
        return r3;
    }

    private void doStart()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        int $i0;
        float $f0;
        android.graphics.animation.RenderNodeAnimator$ViewListener r1, r2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mRenderProperty>;

        if $i0 != 11 goto label1;

        r1 = r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$ViewListener mViewListener>;

        if r1 == null goto label1;

        $f0 = r0.<android.graphics.animation.RenderNodeAnimator: float mFinalValue>;

        interfaceinvoke r1.<android.graphics.animation.RenderNodeAnimator$ViewListener: void onAlphaAnimationStart(float)>($f0);

     label1:
        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void moveToRunningState()>();

        r2 = r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$ViewListener mViewListener>;

        if r2 == null goto label2;

        interfaceinvoke r2.<android.graphics.animation.RenderNodeAnimator$ViewListener: void invalidateParent(boolean)>(0);

     label2:
        return;
    }

    private static android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper getHelper()
    {
        android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper r0, $r3, r5;
        java.lang.ThreadLocal $r1, $r4;
        java.lang.Object $r2;

        $r1 = <android.graphics.animation.RenderNodeAnimator: java.lang.ThreadLocal sAnimationHelper>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper) $r2;

        r5 = r0;

        if r0 != null goto label1;

        $r3 = new android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper;

        specialinvoke $r3.<android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper: void <init>()>();

        r5 = $r3;

        $r4 = <android.graphics.animation.RenderNodeAnimator: java.lang.ThreadLocal sAnimationHelper>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>($r3);

     label1:
        return r5;
    }

    private void init(long)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long l0;
        com.android.internal.util.VirtualRefBasePtr $r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        l0 := @parameter0: long;

        $r1 = new com.android.internal.util.VirtualRefBasePtr;

        specialinvoke $r1.<com.android.internal.util.VirtualRefBasePtr: void <init>(long)>(l0);

        r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr> = $r1;

        return;
    }

    static boolean isNativeInterpolator(android.animation.TimeInterpolator)
    {
        android.animation.TimeInterpolator r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @parameter0: android.animation.TimeInterpolator;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Landroid/graphics/animation/HasNativeInterpolator;");

        return $z0;
    }

    private void moveToRunningState()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        com.android.internal.util.VirtualRefBasePtr r1;
        long $l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r0.<android.graphics.animation.RenderNodeAnimator: int mState> = 2;

        r1 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        if r1 == null goto label1;

        $l0 = virtualinvoke r1.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nStart(long)>($l0);

     label1:
        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void notifyStartListeners()>();

        return;
    }

    private static native long nCreateAnimator(int, float);

    private static native long nCreateCanvasPropertyFloatAnimator(long, float);

    private static native long nCreateCanvasPropertyPaintAnimator(long, int, float);

    private static native long nCreateRevealAnimator(int, int, float, float);

    private static native void nEnd(long);

    private static native long nGetDuration(long);

    private static native void nSetAllowRunningAsync(long, boolean);

    private static native void nSetDuration(long, long);

    private static native void nSetInterpolator(long, long);

    private static native void nSetListener(long, android.graphics.animation.RenderNodeAnimator);

    private static native void nSetStartDelay(long, long);

    private static native void nSetStartValue(long, float);

    private static native void nStart(long);

    private void notifyStartListeners()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        java.util.ArrayList r1;
        java.lang.Object $r2;
        android.animation.Animator$AnimatorListener $r3;
        int i0, i1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 = specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: java.util.ArrayList cloneListeners()>();

        if r1 != null goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r3 = (android.animation.Animator$AnimatorListener) $r2;

        interfaceinvoke $r3.<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator)>(r0);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    private boolean processDelayed(long)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long l0, l1, $l3, $l4;
        byte $b2, $b5;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        l0 := @parameter0: long;

        l1 = r0.<android.graphics.animation.RenderNodeAnimator: long mStartTime>;

        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label1;

        r0.<android.graphics.animation.RenderNodeAnimator: long mStartTime> = l0;

        goto label2;

     label1:
        $l4 = l0 - l1;

        $l3 = r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay>;

        $b5 = $l4 cmp $l3;

        if $b5 < 0 goto label2;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void doStart()>();

        return 1;

     label2:
        return 0;
    }

    private void releaseNativePtr()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        com.android.internal.util.VirtualRefBasePtr r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.util.VirtualRefBasePtr: void release()>();

        r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr> = null;

     label1:
        return;
    }

    public void cancel()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        java.util.ArrayList r1;
        java.lang.Object $r2;
        android.animation.Animator$AnimatorListener $r3;
        android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper $r4;
        int i0, i1, i2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mState>;

        if i0 == 0 goto label6;

        if i0 == 3 goto label6;

        if i0 != 1 goto label1;

        $r4 = staticinvoke <android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper getHelper()>();

        virtualinvoke $r4.<android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper: void removeDelayedAnimation(android.graphics.animation.RenderNodeAnimator)>(r0);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void moveToRunningState()>();

     label1:
        r1 = specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: java.util.ArrayList cloneListeners()>();

        if r1 != null goto label2;

        i1 = 0;

        goto label3;

     label2:
        i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label3:
        i2 = 0;

     label4:
        if i2 >= i1 goto label5;

        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r3 = (android.animation.Animator$AnimatorListener) $r2;

        interfaceinvoke $r3.<android.animation.Animator$AnimatorListener: void onAnimationCancel(android.animation.Animator)>(r0);

        i2 = i2 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<android.graphics.animation.RenderNodeAnimator: void end()>();

     label6:
        return;
    }

    public android.animation.Animator clone()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot clone this animator");

        throw $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.animation.Animator $r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $r1 = virtualinvoke r0.<android.graphics.animation.RenderNodeAnimator: android.animation.Animator clone()>();

        return $r1;
    }

    public void end()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        int i0;
        long $l1;
        android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper $r1;
        com.android.internal.util.VirtualRefBasePtr r2;
        android.graphics.animation.RenderNodeAnimator$ViewListener r3;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mState>;

        if i0 == 3 goto label3;

        if i0 >= 2 goto label1;

        $r1 = staticinvoke <android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper getHelper()>();

        virtualinvoke $r1.<android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper: void removeDelayedAnimation(android.graphics.animation.RenderNodeAnimator)>(r0);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void doStart()>();

     label1:
        r2 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        if r2 == null goto label2;

        $l1 = virtualinvoke r2.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nEnd(long)>($l1);

        r3 = r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$ViewListener mViewListener>;

        if r3 == null goto label3;

        interfaceinvoke r3.<android.graphics.animation.RenderNodeAnimator$ViewListener: void invalidateParent(boolean)>(0);

        goto label3;

     label2:
        virtualinvoke r0.<android.graphics.animation.RenderNodeAnimator: void onFinished()>();

     label3:
        return;
    }

    public long getDuration()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long $l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $l0 = r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledDuration>;

        return $l0;
    }

    public android.animation.TimeInterpolator getInterpolator()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.animation.TimeInterpolator $r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $r1 = r0.<android.graphics.animation.RenderNodeAnimator: android.animation.TimeInterpolator mInterpolator>;

        return $r1;
    }

    public long getNativeAnimator()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        com.android.internal.util.VirtualRefBasePtr $r1;
        long $l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $r1 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l0 = virtualinvoke $r1.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        return $l0;
    }

    public long getStartDelay()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long $l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $l0 = r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledStartDelay>;

        return $l0;
    }

    public long getTotalDuration()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long $l0, $l1, $l2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $l1 = r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledDuration>;

        $l0 = r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledStartDelay>;

        $l2 = $l1 + $l0;

        return $l2;
    }

    public boolean isRunning()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        int i0;
        boolean z1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mState>;

        z1 = 1;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isStarted()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        int $i0;
        boolean z0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mState>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected void onFinished()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        java.util.ArrayList r1;
        java.lang.Object $r2;
        android.animation.Animator$AnimatorListener $r3;
        android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper $r4;
        int i0, i1, i2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mState>;

        if i0 != 0 goto label1;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void releaseNativePtr()>();

        return;

     label1:
        if i0 != 1 goto label2;

        $r4 = staticinvoke <android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper getHelper()>();

        virtualinvoke $r4.<android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper: void removeDelayedAnimation(android.graphics.animation.RenderNodeAnimator)>(r0);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void notifyStartListeners()>();

     label2:
        r0.<android.graphics.animation.RenderNodeAnimator: int mState> = 3;

        r1 = specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: java.util.ArrayList cloneListeners()>();

        if r1 != null goto label3;

        i1 = 0;

        goto label4;

     label3:
        i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label4:
        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r3 = (android.animation.Animator$AnimatorListener) $r2;

        interfaceinvoke $r3.<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator)>(r0);

        i2 = i2 + 1;

        goto label5;

     label6:
        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void releaseNativePtr()>();

        return;
    }

    public void pause()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void resume()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setAllowRunningAsynchronously(boolean)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        boolean z0;
        com.android.internal.util.VirtualRefBasePtr $r1;
        long $l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void checkMutable()>();

        $r1 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l0 = virtualinvoke $r1.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nSetAllowRunningAsync(long,boolean)>($l0, z0);

        return;
    }

    public volatile android.animation.Animator setDuration(long)
    {
        android.graphics.animation.RenderNodeAnimator r0, $r1;
        long l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator setDuration(long)>(l0);

        return $r1;
    }

    public android.graphics.animation.RenderNodeAnimator setDuration(long)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long l0, $l2, $l3;
        byte $b1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        com.android.internal.util.VirtualRefBasePtr $r7;
        float $f0, $f1, $f2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        l0 := @parameter0: long;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void checkMutable()>();

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledDuration> = l0;

        $r7 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l2 = virtualinvoke $r7.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        $f0 = (float) l0;

        $f1 = staticinvoke <android.animation.ValueAnimator: float getDurationScale()>();

        $f2 = $f0 * $f1;

        $l3 = (long) $f2;

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nSetDuration(long,long)>($l2, $l3);

        return r0;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duration must be positive; ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void setInterpolator(android.animation.TimeInterpolator)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.animation.TimeInterpolator r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 := @parameter0: android.animation.TimeInterpolator;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void checkMutable()>();

        r0.<android.graphics.animation.RenderNodeAnimator: android.animation.TimeInterpolator mInterpolator> = r1;

        return;
    }

    public void setStartDelay(long)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        long l0, $l2;
        byte $b1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        float $f0, $f1, $f2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        l0 := @parameter0: long;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void checkMutable()>();

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<android.graphics.animation.RenderNodeAnimator: long mUnscaledStartDelay> = l0;

        $f0 = staticinvoke <android.animation.ValueAnimator: float getDurationScale()>();

        $f1 = (float) l0;

        $f2 = $f0 * $f1;

        $l2 = (long) $f2;

        r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay> = $l2;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startDelay must be positive; ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void setStartValue(float)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        float f0;
        com.android.internal.util.VirtualRefBasePtr $r1;
        long $l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        f0 := @parameter0: float;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void checkMutable()>();

        $r1 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l0 = virtualinvoke $r1.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nSetStartValue(long,float)>($l0, f0);

        return;
    }

    public final void setTarget(android.graphics.RecordingCanvas)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.graphics.RecordingCanvas r1;
        android.graphics.RenderNode $r2;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 := @parameter0: android.graphics.RecordingCanvas;

        $r2 = r1.<android.graphics.RecordingCanvas: android.graphics.RenderNode mNode>;

        virtualinvoke r0.<android.graphics.animation.RenderNodeAnimator: void setTarget(android.graphics.RenderNode)>($r2);

        return;
    }

    protected void setTarget(android.graphics.RenderNode)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.graphics.RenderNode r1, $r2;
        java.lang.IllegalStateException $r3;
        com.android.internal.util.VirtualRefBasePtr $r4;
        long $l0;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 := @parameter0: android.graphics.RenderNode;

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void checkMutable()>();

        $r2 = r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.RenderNode mTarget>;

        if $r2 != null goto label1;

        $r4 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l0 = virtualinvoke $r4.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nSetListener(long,android.graphics.animation.RenderNodeAnimator)>($l0, r0);

        r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.RenderNode mTarget> = r1;

        virtualinvoke r1.<android.graphics.RenderNode: void addAnimator(android.graphics.animation.RenderNodeAnimator)>(r0);

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target already set!");

        throw $r3;
    }

    public void setViewListener(android.graphics.animation.RenderNodeAnimator$ViewListener)
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.graphics.animation.RenderNodeAnimator$ViewListener r1;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        r1 := @parameter0: android.graphics.animation.RenderNodeAnimator$ViewListener;

        r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$ViewListener mViewListener> = r1;

        return;
    }

    public void start()
    {
        android.graphics.animation.RenderNodeAnimator r0;
        android.graphics.RenderNode $r1;
        java.lang.IllegalStateException $r2, $r3;
        int $i0;
        android.os.Handler $r4, $r8;
        com.android.internal.util.VirtualRefBasePtr $r5, $r6;
        long $l1, $l3, $l4;
        byte $b2;
        boolean $z0;
        android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper $r7;

        r0 := @this: android.graphics.animation.RenderNodeAnimator;

        $r1 = r0.<android.graphics.animation.RenderNodeAnimator: android.graphics.RenderNode mTarget>;

        if $r1 == null goto label7;

        $i0 = r0.<android.graphics.animation.RenderNodeAnimator: int mState>;

        if $i0 != 0 goto label6;

        r0.<android.graphics.animation.RenderNodeAnimator: int mState> = 1;

        $r4 = r0.<android.graphics.animation.RenderNodeAnimator: android.os.Handler mHandler>;

        if $r4 != null goto label1;

        $r8 = new android.os.Handler;

        specialinvoke $r8.<android.os.Handler: void <init>(boolean)>(1);

        r0.<android.graphics.animation.RenderNodeAnimator: android.os.Handler mHandler> = $r8;

     label1:
        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void applyInterpolator()>();

        $r5 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        if $r5 != null goto label2;

        virtualinvoke r0.<android.graphics.animation.RenderNodeAnimator: void cancel()>();

        goto label5;

     label2:
        $l1 = r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label4;

        $z0 = r0.<android.graphics.animation.RenderNodeAnimator: boolean mUiThreadHandlesDelay>;

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r7 = staticinvoke <android.graphics.animation.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper getHelper()>();

        virtualinvoke $r7.<android.graphics.animation.RenderNodeAnimator$DelayedAnimationHelper: void addDelayedAnimation(android.graphics.animation.RenderNodeAnimator)>(r0);

        goto label5;

     label4:
        $r6 = r0.<android.graphics.animation.RenderNodeAnimator: com.android.internal.util.VirtualRefBasePtr mNativePtr>;

        $l3 = virtualinvoke $r6.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        $l4 = r0.<android.graphics.animation.RenderNodeAnimator: long mStartDelay>;

        staticinvoke <android.graphics.animation.RenderNodeAnimator: void nSetStartDelay(long,long)>($l3, $l4);

        specialinvoke r0.<android.graphics.animation.RenderNodeAnimator: void doStart()>();

     label5:
        return;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already started!");

        throw $r3;

     label7:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing target!");

        throw $r2;
    }
}
