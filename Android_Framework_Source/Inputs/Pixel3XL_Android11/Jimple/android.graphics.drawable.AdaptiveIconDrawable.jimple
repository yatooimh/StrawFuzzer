public class android.graphics.drawable.AdaptiveIconDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback
{
    private static final int BACKGROUND_ID;
    private static final float DEFAULT_VIEW_PORT_SCALE;
    private static final float EXTRA_INSET_PERCENTAGE;
    private static final int FOREGROUND_ID;
    public static final float MASK_SIZE;
    private static final float SAFEZONE_SCALE;
    private static android.graphics.Path sMask;
    private final android.graphics.Canvas mCanvas;
    private boolean mChildRequestedInvalidation;
    private android.graphics.Rect mHotspotBounds;
    android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState;
    private android.graphics.Bitmap mLayersBitmap;
    private android.graphics.Shader mLayersShader;
    private final android.graphics.Path mMask;
    private final android.graphics.Matrix mMaskMatrix;
    private final android.graphics.Path mMaskScaleOnly;
    private boolean mMutated;
    private android.graphics.Paint mPaint;
    private boolean mSuspendChildInvalidation;
    private final android.graphics.Rect mTmpOutRect;
    private final android.graphics.Region mTransparentRegion;

    void <init>()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = (android.graphics.drawable.AdaptiveIconDrawable$LayerState) null;

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void <init>(android.graphics.drawable.AdaptiveIconDrawable$LayerState,android.content.res.Resources)>($r1, null);

        return;
    }

    void <init>(android.graphics.drawable.AdaptiveIconDrawable$LayerState, android.content.res.Resources)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.content.res.Resources r1, r18;
        android.graphics.Rect $r2;
        android.graphics.Paint $r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r4, r17;
        android.app.ActivityThread $r5, $r6;
        android.app.Application $r7;
        java.lang.String $r8;
        android.graphics.Path $r9, $r10, $r11, $r12, $r13;
        android.graphics.Matrix $r14;
        android.graphics.Canvas $r15;
        android.graphics.Region $r16;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r17 := @parameter0: android.graphics.drawable.AdaptiveIconDrawable$LayerState;

        r1 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect mTmpOutRect> = $r2;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(7);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Paint mPaint> = $r3;

        $r4 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState createConstantState(android.graphics.drawable.AdaptiveIconDrawable$LayerState,android.content.res.Resources)>(r17, r1);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState> = $r4;

        $r5 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        if $r5 != null goto label1;

        r18 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        goto label2;

     label1:
        $r6 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.Application getApplication()>();

        r18 = virtualinvoke $r7.<android.app.Application: android.content.res.Resources getResources()>();

     label2:
        $r8 = virtualinvoke r18.<android.content.res.Resources: java.lang.String getString(int)>(17039904);

        $r9 = staticinvoke <android.util.PathParser: android.graphics.Path createPathFromPathData(java.lang.String)>($r8);

        <android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path sMask> = $r9;

        $r10 = new android.graphics.Path;

        $r11 = <android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path sMask>;

        specialinvoke $r10.<android.graphics.Path: void <init>(android.graphics.Path)>($r11);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask> = $r10;

        $r12 = new android.graphics.Path;

        $r13 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        specialinvoke $r12.<android.graphics.Path: void <init>(android.graphics.Path)>($r13);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMaskScaleOnly> = $r12;

        $r14 = new android.graphics.Matrix;

        specialinvoke $r14.<android.graphics.Matrix: void <init>()>();

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix> = $r14;

        $r15 = new android.graphics.Canvas;

        specialinvoke $r15.<android.graphics.Canvas: void <init>()>();

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Canvas mCanvas> = $r15;

        $r16 = new android.graphics.Region;

        specialinvoke $r16.<android.graphics.Region: void <init>()>();

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region mTransparentRegion> = $r16;

        return;
    }

    public void <init>(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.Drawable r1, r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r4, $r5;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        $r3 = (android.graphics.drawable.AdaptiveIconDrawable$LayerState) null;

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void <init>(android.graphics.drawable.AdaptiveIconDrawable$LayerState,android.content.res.Resources)>($r3, null);

        if r1 == null goto label1;

        $r5 = specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable createChildDrawable(android.graphics.drawable.Drawable)>(r1);

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void addLayer(int,android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable)>(0, $r5);

     label1:
        if r2 == null goto label2;

        $r4 = specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable createChildDrawable(android.graphics.drawable.Drawable)>(r2);

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void addLayer(int,android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable)>(1, $r4);

     label2:
        return;
    }

    private void addLayer(int, android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int i0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable r1;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r2, $r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r3;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable;

        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $r3 = $r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        $r3[i0] = r1;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        virtualinvoke $r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: void invalidateCache()>();

        return;
    }

    private android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable createChildDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3, r7;
        int $i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable $r4, $r5, r6;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r6 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = new android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $i0 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mDensity>;

        specialinvoke $r2.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: void <init>(int)>($i0);

        $r2.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable> = r6;

        $r4 = $r2.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        r7 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $i1 = r7.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations>;

        $r5 = $r2.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        $i2 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $i3 = $i1 | $i2;

        r7.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations> = $i3;

        return $r2;
    }

    public static float getExtraInsetFraction()
    {
        return 0.25F;
    }

    public static float getExtraInsetPercentage()
    {
        return 0.25F;
    }

    private int getMaxIntrinsicHeight()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int i0, i1, i2, i3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r1;
        android.graphics.drawable.Drawable $r2, $r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable r5;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        i1 = -1;

        i2 = 0;

     label1:
        r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if i2 >= 2 goto label4;

        $r1 = r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        r5 = $r1[i2];

        $r2 = r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if $r2 != null goto label2;

        i3 = i1;

        goto label3;

     label2:
        $r3 = r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        i0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        i3 = i1;

        if i0 <= i1 goto label3;

        i3 = i0;

     label3:
        i2 = i2 + 1;

        i1 = i3;

        goto label1;

     label4:
        return i1;
    }

    private int getMaxIntrinsicWidth()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int i0, i1, i2, i3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r1;
        android.graphics.drawable.Drawable $r2, $r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable r5;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        i1 = -1;

        i2 = 0;

     label1:
        r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if i2 >= 2 goto label4;

        $r1 = r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        r5 = $r1[i2];

        $r2 = r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if $r2 != null goto label2;

        i3 = i1;

        goto label3;

     label2:
        $r3 = r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        i0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i3 = i1;

        if i0 <= i1 goto label3;

        i3 = i0;

     label3:
        i2 = i2 + 1;

        i1 = i3;

        goto label1;

     label4:
        return i1;
    }

    private void inflateLayers(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r4, $r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i10;
        boolean $z0, $z1;
        int[] $r7, $r9;
        android.graphics.drawable.Drawable $r8, $r17, $r18, $r19;
        java.lang.String $r11, $r15, r21;
        android.content.res.Resources r20;
        byte b9;
        android.content.res.TypedArray r22;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable r24;
        java.lang.StringBuilder r25;
        org.xmlpull.v1.XmlPullParserException r26;
        java.lang.Throwable r27;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r20 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.Resources$Theme;

        r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        i0 = $i1 + 1;

     label01:
        i7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i7 == 1 goto label13;

        i8 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if i8 >= i0 goto label03;

        if i7 == 3 goto label02;

        goto label03;

     label02:
        goto label13;

     label03:
        if i7 == 2 goto label04;

        goto label01;

     label04:
        if i8 <= i0 goto label05;

        goto label01;

     label05:
        r21 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("background");

        if $z0 == 0 goto label06;

        b9 = 0;

        goto label07;

     label06:
        $z1 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("foreground");

        if $z1 == 0 goto label12;

        b9 = 1;

     label07:
        r24 = new android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable;

        $i2 = r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mDensity>;

        specialinvoke r24.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: void <init>(int)>($i2);

        $r7 = <com.android.internal.R$styleable: int[] AdaptiveIconDrawableLayer>;

        r22 = staticinvoke <android.graphics.drawable.AdaptiveIconDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r20, r3, r2, $r7);

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void updateLayerFromTypedArray(android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable,android.content.res.TypedArray)>(r24, r22);

        virtualinvoke r22.<android.content.res.TypedArray: void recycle()>();

        $r8 = r24.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if $r8 != null goto label11;

        $r9 = r24.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: int[] mThemeAttrs>;

        if $r9 != null goto label11;

     label08:
        i10 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i10 != 4 goto label09;

        goto label08;

     label09:
        if i10 != 2 goto label10;

        $r16 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $i3 = $r16.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mSrcDensityOverride>;

        $r17 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInnerForDensity(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,android.content.res.Resources$Theme)>(r20, r1, r2, $i3, r3);

        r24.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable> = $r17;

        $r18 = r24.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r18.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $i4 = r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations>;

        $r19 = r24.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        $i5 = virtualinvoke $r19.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $i6 = $i4 | $i5;

        r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations> = $i6;

        goto label11;

     label10:
        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        $r11 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <foreground> or <background> tag requires a \'drawable\'attribute or child tag defining a drawable");

        r26 = new org.xmlpull.v1.XmlPullParserException;

        $r15 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r15);

        r27 = (java.lang.Throwable) r26;

        throw r27;

     label11:
        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void addLayer(int,android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable)>(b9, r24);

        goto label01;

     label12:
        goto label01;

     label13:
        return;
    }

    private void resumeChildInvalidation()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mSuspendChildInvalidation> = 0;

        $z0 = r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mChildRequestedInvalidation>;

        if $z0 == 0 goto label1;

        r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mChildRequestedInvalidation> = 0;

        virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    private void suspendChildInvalidation()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mSuspendChildInvalidation> = 1;

        return;
    }

    private void updateLayerBounds(android.graphics.Rect)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        boolean $z0;
        java.lang.Throwable $r1;
        android.graphics.Rect r2;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r2 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void suspendChildInvalidation()>();

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void updateLayerBoundsInternal(android.graphics.Rect)>(r2);

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void updateMaskBoundsInternal(android.graphics.Rect)>(r2);

     label2:
        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void resumeChildInvalidation()>();

        return;

     label3:
        $r1 := @caughtexception;

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void resumeChildInvalidation()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateLayerBoundsInternal(android.graphics.Rect)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Rect r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r4;
        float $f0, $f1, $f2, $f3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable r5;
        android.graphics.drawable.Drawable r6;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $i4 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        i0 = $i4 / 2;

        $i5 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        i1 = $i5 / 2;

        i12 = 0;

     label1:
        if i12 >= 2 goto label5;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $r4 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        r5 = $r4[i12];

        if r5 != null goto label2;

        goto label4;

     label2:
        r6 = r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r6 != null goto label3;

        goto label4;

     label3:
        $i6 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f0 = (float) $i6;

        $f1 = $f0 / 1.3333334F;

        i2 = (int) $f1;

        $i7 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f2 = (float) $i7;

        $f3 = $f2 / 1.3333334F;

        i3 = (int) $f3;

        r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect mTmpOutRect>;

        $i11 = i0 - i2;

        $i10 = i1 - i3;

        $i9 = i0 + i2;

        $i8 = i1 + i3;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i11, $i10, $i9, $i8);

        virtualinvoke r6.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r2);

     label4:
        i12 = i12 + 1;

        goto label1;

     label5:
        return;
    }

    private void updateLayerFromTypedArray(android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable, android.content.res.TypedArray)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable r1;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r3;
        android.graphics.drawable.Drawable $r4, $r5, $r6, $r7, r9;
        android.content.res.TypedArray r8;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable;

        r8 := @parameter1: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $i0 = r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations>;

        $i1 = virtualinvoke r8.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations> = $i2;

        $r3 = virtualinvoke r8.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r1.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: int[] mThemeAttrs> = $r3;

        $i3 = r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mSrcDensityOverride>;

        r9 = virtualinvoke r8.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>(0, $i3);

        if r9 == null goto label2;

        $r4 = r1.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if $r4 == null goto label1;

        $r7 = r1.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r7.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label1:
        r1.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable> = r9;

        $r5 = r1.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $i4 = r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations>;

        $r6 = r1.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        $i5 = virtualinvoke $r6.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $i6 = $i4 | $i5;

        r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations> = $i6;

     label2:
        return;
    }

    private void updateMaskBoundsInternal(android.graphics.Rect)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap r2, $r12, $r14;
        android.graphics.Matrix $r3, $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.Path $r4, $r6, $r8, $r10;
        android.graphics.Bitmap$Config $r13;
        android.graphics.Paint $r15;
        android.graphics.Region $r16;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix>;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f0 = (float) $i0;

        $f1 = $f0 / 100.0F;

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f2 = (float) $i1;

        $f3 = $f2 / 100.0F;

        virtualinvoke $r3.<android.graphics.Matrix: void setScale(float,float)>($f1, $f3);

        $r6 = <android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path sMask>;

        $r5 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix>;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMaskScaleOnly>;

        virtualinvoke $r6.<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>($r5, $r4);

        $r7 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix>;

        $i2 = r1.<android.graphics.Rect: int left>;

        $f5 = (float) $i2;

        $i3 = r1.<android.graphics.Rect: int top>;

        $f4 = (float) $i3;

        virtualinvoke $r7.<android.graphics.Matrix: boolean postTranslate(float,float)>($f5, $f4);

        $r10 = <android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path sMask>;

        $r9 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix>;

        $r8 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        virtualinvoke $r10.<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>($r9, $r8);

        r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Bitmap mLayersBitmap>;

        if r2 == null goto label1;

        $i4 = virtualinvoke r2.<android.graphics.Bitmap: int getWidth()>();

        $i5 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        if $i4 != $i5 goto label1;

        $r12 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Bitmap mLayersBitmap>;

        $i6 = virtualinvoke $r12.<android.graphics.Bitmap: int getHeight()>();

        $i7 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if $i6 == $i7 goto label2;

     label1:
        $i8 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i9 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $r13 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r14 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i8, $i9, $r13);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Bitmap mLayersBitmap> = $r14;

     label2:
        $r15 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r15.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(null);

        $r16 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region mTransparentRegion>;

        virtualinvoke $r16.<android.graphics.Region: void setEmpty()>();

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Shader mLayersShader> = null;

        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r2;
        int i0, $i1, $i2, $i3, i4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r3;
        android.content.res.TypedArray r4;
        android.content.res.Resources $r5;
        int[] $r6, $r7, $r8;
        boolean $z0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable r9;
        android.graphics.drawable.Drawable r10;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r1);

        r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if r2 != null goto label1;

        return;

     label1:
        $r5 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.Resources getResources()>();

        i0 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>($r5, 0);

        virtualinvoke r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: void setDensity(int)>(i0);

        r3 = r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i4 = 0;

     label2:
        if i4 >= 2 goto label5;

        r9 = r3[i4];

        virtualinvoke r9.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: void setDensity(int)>(i0);

        $r6 = r9.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: int[] mThemeAttrs>;

        if $r6 == null goto label3;

        $r8 = r9.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: int[] mThemeAttrs>;

        $r7 = <com.android.internal.R$styleable: int[] AdaptiveIconDrawableLayer>;

        r4 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r8, $r7);

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void updateLayerFromTypedArray(android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable,android.content.res.TypedArray)>(r9, r4);

        virtualinvoke r4.<android.content.res.TypedArray: void recycle()>();

     label3:
        r10 = r9.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r10 == null goto label4;

        $z0 = virtualinvoke r10.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label4;

        virtualinvoke r10.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r1);

        $i1 = r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations>;

        $i2 = virtualinvoke r10.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $i3 = $i1 | $i2;

        r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChildrenChangingConfigurations> = $i3;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: boolean canApplyTheme()>();

        if $z1 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public void clearMutated()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r4;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void clearMutated()>();

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r4 = r1[i0];

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void clearMutated()>();

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mMutated> = 0;

        return;
    }

    android.graphics.drawable.AdaptiveIconDrawable$LayerState createConstantState(android.graphics.drawable.AdaptiveIconDrawable$LayerState, android.content.res.Resources)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r1, $r3;
        android.content.res.Resources r2;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.drawable.AdaptiveIconDrawable$LayerState;

        r2 := @parameter1: android.content.res.Resources;

        $r3 = new android.graphics.drawable.AdaptiveIconDrawable$LayerState;

        specialinvoke $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: void <init>(android.graphics.drawable.AdaptiveIconDrawable$LayerState,android.graphics.drawable.AdaptiveIconDrawable,android.content.res.Resources)>(r1, r0, r2);

        return $r3;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Canvas r1, $r6, $r7, $r19;
        android.graphics.Shader $r2;
        android.graphics.Path $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r4, $r12;
        android.graphics.BitmapShader $r8;
        android.graphics.Shader$TileMode $r9, $r10;
        android.graphics.Bitmap $r11, r20;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r14, $r17;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r15, $r18;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r16, r21;
        android.graphics.drawable.Drawable r22;
        android.graphics.Rect r24;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r20 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Bitmap mLayersBitmap>;

        if r20 != null goto label1;

        return;

     label1:
        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Shader mLayersShader>;

        if $r2 != null goto label6;

        $r6 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Canvas mCanvas>;

        virtualinvoke $r6.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(r20);

        $r7 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Canvas mCanvas>;

        virtualinvoke $r7.<android.graphics.Canvas: void drawColor(int)>(-16777216);

        i6 = 0;

     label2:
        r21 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if i6 >= 2 goto label5;

        $r14 = r21.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        $r15 = $r14[i6];

        if $r15 != null goto label3;

        goto label4;

     label3:
        $r16 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $r17 = $r16.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        $r18 = $r17[i6];

        r22 = $r18.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r22 == null goto label4;

        $r19 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Canvas mCanvas>;

        virtualinvoke r22.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r19);

     label4:
        i6 = i6 + 1;

        goto label2;

     label5:
        $r8 = new android.graphics.BitmapShader;

        $r11 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Bitmap mLayersBitmap>;

        $r10 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        $r9 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r8.<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>($r11, $r10, $r9);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Shader mLayersShader> = $r8;

        $r12 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r12.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r8);

     label6:
        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMaskScaleOnly>;

        if $r3 == null goto label7;

        r24 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect getBounds()>();

        $i0 = r24.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        $i1 = r24.<android.graphics.Rect: int top>;

        $f0 = (float) $i1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        $r5 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMaskScaleOnly>;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r5, $r4);

        $i2 = r24.<android.graphics.Rect: int left>;

        $i3 = neg $i2;

        $f3 = (float) $i3;

        $i4 = r24.<android.graphics.Rect: int top>;

        $i5 = neg $i4;

        $f2 = (float) $i5;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f3, $f2);

     label7:
        return;
    }

    public int getAlpha()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Paint $r1;
        int $i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Paint mPaint>;

        $i0 = virtualinvoke $r1.<android.graphics.Paint: int getAlpha()>();

        return $i0;
    }

    public android.graphics.drawable.Drawable getBackground()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r2;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $r2 = $r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        $r3 = $r2[0];

        $r4 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        return $r4;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int $i0, $i1, $i2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $i1 = virtualinvoke $r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        return $i2;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1, $r2, $r3;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: boolean canConstantState()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $i0 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: int getChangingConfigurations()>();

        $r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mChangingConfigurations> = $i0;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        return $r3;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getForeground()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r2;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $r2 = $r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        $r3 = $r2[1];

        $r4 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        return $r4;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Rect r1, r2;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect mHotspotBounds>;

        if r2 == null goto label1;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>(r1);

     label2:
        return;
    }

    public android.graphics.Path getIconMask()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Path $r1;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        return $r1;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: int getMaxIntrinsicHeight()>();

        $f0 = (float) $i0;

        $f1 = $f0 * 0.6666667F;

        $i1 = (int) $f1;

        return $i1;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: int getMaxIntrinsicWidth()>();

        $f0 = (float) $i0;

        $f1 = $f0 * 0.6666667F;

        $i1 = (int) $f1;

        return $i1;
    }

    public int getOpacity()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        return -3;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Outline r1;
        android.graphics.Path $r2;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.Outline;

        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        virtualinvoke r1.<android.graphics.Outline: void setPath(android.graphics.Path)>($r2);

        return;
    }

    public android.graphics.Region getSafeZone()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Matrix $r3, $r4, $r8;
        android.graphics.Rect $r5, $r6, $r11;
        int $i0, $i1;
        float $f0, $f1;
        android.graphics.Path $r7, $r9;
        android.graphics.Region $r10;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix>;

        virtualinvoke $r3.<android.graphics.Matrix: void reset()>();

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix>;

        $r5 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect getBounds()>();

        $i0 = virtualinvoke $r5.<android.graphics.Rect: int centerX()>();

        $f0 = (float) $i0;

        $r6 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect getBounds()>();

        $i1 = virtualinvoke $r6.<android.graphics.Rect: int centerY()>();

        $f1 = (float) $i1;

        virtualinvoke $r4.<android.graphics.Matrix: void setScale(float,float,float,float)>(0.9166667F, 0.9166667F, $f0, $f1);

        $r7 = new android.graphics.Path;

        specialinvoke $r7.<android.graphics.Path: void <init>()>();

        $r9 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        $r8 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Matrix mMaskMatrix>;

        virtualinvoke $r9.<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>($r8, $r7);

        $r10 = new android.graphics.Region;

        $r11 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect getBounds()>();

        specialinvoke $r10.<android.graphics.Region: void <init>(android.graphics.Rect)>($r11);

        virtualinvoke $r10.<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>($r7, $r10);

        return $r10;
    }

    public int getSourceDrawableResId()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r1;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if r1 != null goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mSourceDrawableId>;

     label2:
        return i0;
    }

    public android.graphics.Region getTransparentRegion()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Region r1, $r2, $r3, $r5;
        boolean $z0;
        android.graphics.Path $r4, $r7, $r8;
        android.graphics.Rect $r6;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region mTransparentRegion>;

        $z0 = virtualinvoke $r2.<android.graphics.Region: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        virtualinvoke $r4.<android.graphics.Path: void toggleInverseFillType()>();

        $r5 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region mTransparentRegion>;

        $r6 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect getBounds()>();

        virtualinvoke $r5.<android.graphics.Region: boolean set(android.graphics.Rect)>($r6);

        r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region mTransparentRegion>;

        $r7 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        virtualinvoke r1.<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>($r7, r1);

        $r8 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path mMask>;

        virtualinvoke $r8.<android.graphics.Path: void toggleInverseFillType()>();

     label1:
        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region mTransparentRegion>;

        return $r3;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: boolean hasFocusStateSpecified()>();

        return $z0;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState r5;
        int i0, $i1, $i2, $i3, i4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r6, $r7;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r8;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        r5 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if r5 != null goto label1;

        return;

     label1:
        i0 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>(r1, 0);

        virtualinvoke r5.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: void setDensity(int)>(i0);

        $i1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: int mSrcDensityOverride>;

        r5.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mSrcDensityOverride> = $i1;

        $i2 = staticinvoke <android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>(r3);

        r5.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mSourceDrawableId> = $i2;

        r6 = r5.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i4 = 0;

     label2:
        $r7 = r5.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        $i3 = lengthof $r7;

        if i4 >= $i3 goto label3;

        $r8 = r6[i4];

        virtualinvoke $r8.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: void setDensity(int)>(i0);

        i4 = i4 + 1;

        goto label2;

     label3:
        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void inflateLayers(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.Drawable r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mSuspendChildInvalidation>;

        if $z0 == 0 goto label1;

        r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mChildRequestedInvalidation> = 1;

        goto label2;

     label1:
        virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void invalidateSelf()>();

     label2:
        return;
    }

    public void invalidateSelf()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Shader mLayersShader> = null;

        specialinvoke r0.<android.graphics.drawable.Drawable: void invalidateSelf()>();

        return;
    }

    public boolean isAutoMirrored()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $z0 = staticinvoke <android.graphics.drawable.AdaptiveIconDrawable$LayerState: boolean access$000(android.graphics.drawable.AdaptiveIconDrawable$LayerState)>($r1);

        return $z0;
    }

    public boolean isProjected()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        boolean $z0, $z1;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r2;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r3, $r5;
        android.graphics.drawable.Drawable $r4, $r6;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean isProjected()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label2:
        if i0 >= 2 goto label4;

        $r3 = r1[i0];

        $r4 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if $r4 == null goto label3;

        $r5 = r1[i0];

        $r6 = $r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        $z1 = virtualinvoke $r6.<android.graphics.drawable.Drawable: boolean isProjected()>();

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return 0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: boolean isStateful()>();

        return $z0;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r4;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r4 = r1[i0];

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1, r8;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r2, $r3, r7;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] $r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r5;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        $z0 = r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mMutated>;

        if $z0 != 0 goto label4;

        $r1 = specialinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if $r1 != r0 goto label4;

        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $r3 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState createConstantState(android.graphics.drawable.AdaptiveIconDrawable$LayerState,android.content.res.Resources)>($r2, null);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState> = $r3;

        i0 = 0;

     label1:
        r7 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        if i0 >= 2 goto label3;

        $r4 = r7.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        $r5 = $r4[i0];

        r8 = $r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r8 == null goto label2;

        virtualinvoke r8.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        r0.<android.graphics.drawable.AdaptiveIconDrawable: boolean mMutated> = 1;

     label4:
        return r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void updateLayerBounds(android.graphics.Rect)>(r1);

        return;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int i0, i1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.Rect $r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r5;
        boolean $z0, z1, z2;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        i0 := @parameter0: int;

        z1 = 0;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= 2 goto label3;

        $r5 = r1[i1];

        r2 = $r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        z2 = z1;

        if r2 == null goto label2;

        z2 = z1;

        $z0 = virtualinvoke r2.<android.graphics.drawable.Drawable: boolean setLevel(int)>(i0);

        if $z0 == 0 goto label2;

        z2 = 1;

     label2:
        i1 = i1 + 1;

        z1 = z2;

        goto label1;

     label3:
        if z1 == 0 goto label4;

        $r4 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect getBounds()>();

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void updateLayerBounds(android.graphics.Rect)>($r4);

     label4:
        return z1;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int[] r1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r2;
        android.graphics.drawable.Drawable r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r4;
        android.graphics.Rect $r5;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r6;
        boolean $z0, $z1, z2, z3;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: int[];

        z2 = 0;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r6 = r2[i0];

        r3 = $r6.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        z3 = z2;

        if r3 == null goto label2;

        z3 = z2;

        $z0 = virtualinvoke r3.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label2;

        z3 = z2;

        $z1 = virtualinvoke r3.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        if $z1 == 0 goto label2;

        z3 = 1;

     label2:
        i0 = i0 + 1;

        z2 = z3;

        goto label1;

     label3:
        if z2 == 0 goto label4;

        $r5 = virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect getBounds()>();

        specialinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void updateLayerBounds(android.graphics.Rect)>($r5);

     label4:
        return z2;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        long l0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        l0 := @parameter2: long;

        virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void scheduleSelf(java.lang.Runnable,long)>(r2, l0);

        return;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int i0;
        android.graphics.Paint $r1;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>(i0);

        return;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        boolean z0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3, $r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r5;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        z0 := @parameter0: boolean;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        staticinvoke <android.graphics.drawable.AdaptiveIconDrawable$LayerState: boolean access$002(android.graphics.drawable.AdaptiveIconDrawable$LayerState,boolean)>($r3, z0);

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r5 = r1[i0];

        r2 = $r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>(z0);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r2;
        android.graphics.drawable.Drawable r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r5;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r5 = r2[i0];

        r3 = $r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r3 == null goto label2;

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public void setDither(boolean)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        boolean z0;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r4;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        z0 := @parameter0: boolean;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r4 = r1[i0];

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(z0);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public void setHotspot(float, float)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        float f0, f1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r4;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r4 = r1[i0];

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int i0, i1, i2, i3, i4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r2;
        android.graphics.Rect $r3, r6;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r4;
        android.graphics.drawable.Drawable r5;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r2.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i4 = 0;

     label1:
        if i4 >= 2 goto label3;

        $r4 = r1[i4];

        r5 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r5 == null goto label2;

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>(i0, i1, i2, i3);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        r6 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect mHotspotBounds>;

        if r6 != null goto label4;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Rect mHotspotBounds> = $r3;

        goto label5;

     label4:
        virtualinvoke r6.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

     label5:
        return;
    }

    public void setOpacity(int)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        int i0;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r1;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        $r1.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: int mOpacityOverride> = i0;

        return;
    }

    public void setTintBlendMode(android.graphics.BlendMode)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.BlendMode r1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r2;
        android.graphics.drawable.Drawable r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r5;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.BlendMode;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r5 = r2[i0];

        r3 = $r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r3 == null goto label2;

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>(r1);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r2;
        android.graphics.drawable.Drawable r3;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r4;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r5;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r4 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r5 = r2[i0];

        r3 = $r5.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r3 == null goto label2;

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>(r1);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        boolean z0, z1, z2;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.AdaptiveIconDrawable$LayerState $r3;
        android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable $r4;
        int i0;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        $r3 = r0.<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.AdaptiveIconDrawable$LayerState mLayerState>;

        r1 = $r3.<android.graphics.drawable.AdaptiveIconDrawable$LayerState: android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable[] mChildren>;

        i0 = 0;

     label1:
        if i0 >= 2 goto label3;

        $r4 = r1[i0];

        r2 = $r4.<android.graphics.drawable.AdaptiveIconDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return z2;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.graphics.drawable.AdaptiveIconDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;

        r0 := @this: android.graphics.drawable.AdaptiveIconDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        virtualinvoke r0.<android.graphics.drawable.AdaptiveIconDrawable: void unscheduleSelf(java.lang.Runnable)>(r2);

        return;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.AdaptiveIconDrawable: float SAFEZONE_SCALE> = 0.9166667F;

        <android.graphics.drawable.AdaptiveIconDrawable: float MASK_SIZE> = 100.0F;

        <android.graphics.drawable.AdaptiveIconDrawable: int FOREGROUND_ID> = 1;

        <android.graphics.drawable.AdaptiveIconDrawable: float EXTRA_INSET_PERCENTAGE> = 0.25F;

        <android.graphics.drawable.AdaptiveIconDrawable: float DEFAULT_VIEW_PORT_SCALE> = 0.6666667F;

        <android.graphics.drawable.AdaptiveIconDrawable: int BACKGROUND_ID> = 0;

        return;
    }
}
