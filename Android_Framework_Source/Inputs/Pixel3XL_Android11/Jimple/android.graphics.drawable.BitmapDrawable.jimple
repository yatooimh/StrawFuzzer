public class android.graphics.drawable.BitmapDrawable extends android.graphics.drawable.Drawable
{
    private static final int DEFAULT_PAINT_FLAGS;
    private static final int TILE_MODE_CLAMP;
    private static final int TILE_MODE_DISABLED;
    private static final int TILE_MODE_MIRROR;
    private static final int TILE_MODE_REPEAT;
    private static final int TILE_MODE_UNDEFINED;
    private int mBitmapHeight;
    private android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState;
    private int mBitmapWidth;
    private android.graphics.BlendModeColorFilter mBlendModeFilter;
    private final android.graphics.Rect mDstRect;
    private boolean mDstRectAndInsetsDirty;
    private android.graphics.Matrix mMirrorMatrix;
    private boolean mMutated;
    private android.graphics.Insets mOpticalInsets;
    private int mTargetDensity;

    public void <init>()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Rect $r1;
        android.graphics.Insets $r2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3;
        android.graphics.Bitmap $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r1;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r2 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r2;

        $r3 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r4 = (android.graphics.Bitmap) null;

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r4);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>($r3, null);

        return;
    }

    public void <init>(android.content.res.Resources)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        android.graphics.Rect $r2;
        android.graphics.Insets $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r4;
        android.graphics.Bitmap $r5;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r2;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r3;

        $r4 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r5 = (android.graphics.Bitmap) null;

        specialinvoke $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r5);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>($r4, r1);

        return;
    }

    public void <init>(android.content.res.Resources, android.graphics.Bitmap)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        android.graphics.Bitmap r2;
        android.graphics.Rect $r3;
        android.graphics.Insets $r4;
        android.graphics.drawable.BitmapDrawable$BitmapState $r5;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r3;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r4 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r4;

        $r5 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r2);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>($r5, r1);

        return;
    }

    public void <init>(android.content.res.Resources, java.io.InputStream)
    {
        android.graphics.drawable.BitmapDrawable r0;
        java.io.InputStream r1;
        android.graphics.Insets $r3;
        android.graphics.ImageDecoder$Source $r4;
        android.graphics.drawable.'-$$Lambda$BitmapDrawable$T1BUUqQwU4Z6Ve8DJHFuQvYohkY' $r5;
        android.graphics.drawable.BitmapDrawable$BitmapState $r7, $r15, $r20, r33, r35, r37;
        android.graphics.Bitmap $r8, $r16, $r21, r27;
        java.lang.String $r12, $r25;
        java.lang.Exception $r13;
        java.lang.Throwable $r18;
        android.content.res.Resources r26;
        java.lang.StringBuilder r28, r34, r36, r38;
        android.graphics.Rect r32;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r39;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r26 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: java.io.InputStream;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r32 = new android.graphics.Rect;

        specialinvoke r32.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = r32;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r3;

     label1:
        $r4 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,java.io.InputStream)>(r26, r1);

        $r5 = <android.graphics.drawable._$$Lambda$BitmapDrawable$T1BUUqQwU4Z6Ve8DJHFuQvYohkY: android.graphics.drawable.'-$$Lambda$BitmapDrawable$T1BUUqQwU4Z6Ve8DJHFuQvYohkY' INSTANCE>;

        r39 = (android.graphics.ImageDecoder$OnHeaderDecodedListener) $r5;

        r27 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>($r4, r39);

     label2:
        r33 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke r33.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r27);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r33, r26);

        $r7 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r8 = $r7.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r8 != null goto label7;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        r28 = r34;

     label3:
        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r12);

        goto label7;

     label4:
        $r18 := @caughtexception;

        r35 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke r35.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(null);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r35, r26);

        $r20 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r21 = $r20.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r21 != null goto label5;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r25);

     label5:
        throw $r18;

     label6:
        $r13 := @caughtexception;

        r37 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke r37.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(null);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r37, r26);

        $r15 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r16 = $r15.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r16 != null goto label7;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        r28 = r38;

        goto label3;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void <init>(android.content.res.Resources, java.lang.String)
    {
        android.graphics.drawable.BitmapDrawable r0;
        java.lang.String r1, $r11, $r18;
        android.graphics.Insets $r4;
        android.graphics.ImageDecoder$Source $r5;
        android.graphics.drawable.'-$$Lambda$BitmapDrawable$23eAuhdkgEf5MIRJC-rMNbn4Pyg' $r6;
        android.graphics.drawable.BitmapDrawable$BitmapState $r8, $r15, $r21, r37, r39, r41;
        android.graphics.Bitmap $r9, $r16, $r22, r26, r27, r29;
        java.lang.Throwable $r12, $r13, $r24;
        java.lang.Exception $r19;
        android.content.res.Resources r25;
        java.lang.StringBuilder r31, r38, r40, r42;
        android.graphics.Rect r35;
        java.io.FileInputStream r36;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r43;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r25 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r35 = new android.graphics.Rect;

        specialinvoke r35.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = r35;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r4 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r4;

        r26 = null;

        r27 = null;

     label01:
        r36 = new java.io.FileInputStream;

     label02:
        r26 = null;

        r27 = null;

     label03:
        specialinvoke r36.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

     label04:
        $r5 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,java.io.InputStream)>(r25, r36);

        $r6 = <android.graphics.drawable._$$Lambda$BitmapDrawable$23eAuhdkgEf5MIRJC_rMNbn4Pyg: android.graphics.drawable.'-$$Lambda$BitmapDrawable$23eAuhdkgEf5MIRJC-rMNbn4Pyg' INSTANCE>;

        r43 = (android.graphics.ImageDecoder$OnHeaderDecodedListener) $r6;

        r29 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>($r5, r43);

     label05:
        r26 = r29;

        r27 = r29;

     label06:
        virtualinvoke r36.<java.io.FileInputStream: void close()>();

     label07:
        r37 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke r37.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r29);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r37, r25);

        $r8 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r9 = $r8.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r9 != null goto label19;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        r31 = r38;

     label08:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r11);

        goto label19;

     label09:
        $r24 := @caughtexception;

     label10:
        virtualinvoke r36.<java.io.FileInputStream: void close()>();

     label11:
        goto label14;

     label12:
        $r12 := @caughtexception;

        r26 = null;

        r27 = null;

     label13:
        virtualinvoke $r24.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label14:
        r26 = null;

        r27 = null;

     label15:
        throw $r24;

     label16:
        $r13 := @caughtexception;

        r39 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke r39.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r26);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r39, r25);

        $r15 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r16 = $r15.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r16 != null goto label17;

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r18);

     label17:
        throw $r13;

     label18:
        $r19 := @caughtexception;

        r41 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke r41.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r27);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r41, r25);

        $r21 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r22 = $r21.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r22 != null goto label19;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        r31 = r42;

        goto label08;

     label19:
        return;

        catch java.lang.Exception from label01 to label02 with label18;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Exception from label03 to label04 with label18;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Exception from label06 to label07 with label18;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label18;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Exception from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    public void <init>(android.graphics.Bitmap)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect $r2;
        android.graphics.Insets $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r2;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r3;

        $r4 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r1);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>($r4, null);

        return;
    }

    private void <init>(android.graphics.drawable.BitmapDrawable$BitmapState, android.content.res.Resources)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1;
        android.content.res.Resources r2;
        android.graphics.Rect $r3;
        android.graphics.Insets $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.BitmapDrawable$BitmapState;

        r2 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r3;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r4 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r4;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void init(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r1, r2);

        return;
    }

    void <init>(android.graphics.drawable.BitmapDrawable$BitmapState, android.content.res.Resources, android.graphics.drawable.BitmapDrawable$1)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.BitmapDrawable$1 r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.BitmapDrawable$BitmapState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.graphics.drawable.BitmapDrawable$1;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r1, r2);

        return;
    }

    public void <init>(java.io.InputStream)
    {
        android.graphics.drawable.BitmapDrawable r0;
        java.io.InputStream r1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)>(null, r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        android.graphics.drawable.BitmapDrawable r0;
        java.lang.String r1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.lang.String)>(null, r1);

        return;
    }

    private void computeBitmapSize()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r1 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if r1 == null goto label1;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getScaledWidth(int)>($i0);

        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth> = $i1;

        $i2 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getScaledHeight(int)>($i2);

        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight> = $i3;

        goto label2;

     label1:
        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight> = -1;

        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth> = -1;

     label2:
        return;
    }

    private android.graphics.Matrix getOrCreateMirrorMatrix()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Matrix $r1, $r2, $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Matrix;

        specialinvoke $r3.<android.graphics.Matrix: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix> = $r3;

     label1:
        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        return $r2;
    }

    private void init(android.graphics.drawable.BitmapDrawable$BitmapState, android.content.res.Resources)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        int $i0;
        android.graphics.drawable.BitmapDrawable$BitmapState r2, r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r2 := @parameter0: android.graphics.drawable.BitmapDrawable$BitmapState;

        r1 := @parameter1: android.content.res.Resources;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState> = r2;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateLocalState(android.content.res.Resources)>(r1);

        r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        if r3 == null goto label1;

        if r1 == null goto label1;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity> = $i0;

     label1:
        return;
    }

    static void lambda$new$0(android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo, android.graphics.ImageDecoder$Source)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$ImageInfo r1;
        android.graphics.ImageDecoder$Source r2;

        r0 := @parameter0: android.graphics.ImageDecoder;

        r1 := @parameter1: android.graphics.ImageDecoder$ImageInfo;

        r2 := @parameter2: android.graphics.ImageDecoder$Source;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setAllocator(int)>(1);

        return;
    }

    static void lambda$new$1(android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo, android.graphics.ImageDecoder$Source)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$ImageInfo r1;
        android.graphics.ImageDecoder$Source r2;

        r0 := @parameter0: android.graphics.ImageDecoder;

        r1 := @parameter1: android.graphics.ImageDecoder$ImageInfo;

        r2 := @parameter2: android.graphics.ImageDecoder$Source;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setAllocator(int)>(1);

        return;
    }

    static void lambda$updateStateFromTypedArray$2(android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo, android.graphics.ImageDecoder$Source)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$ImageInfo r1;
        android.graphics.ImageDecoder$Source r2;

        r0 := @parameter0: android.graphics.ImageDecoder;

        r1 := @parameter1: android.graphics.ImageDecoder$ImageInfo;

        r2 := @parameter2: android.graphics.ImageDecoder$Source;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setAllocator(int)>(1);

        return;
    }

    private boolean needMirroring()
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0, z1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: boolean isAutoMirrored()>();

        z1 = 1;

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getLayoutDirection()>();

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static android.graphics.Shader$TileMode parseTileMode(int)
    {
        int i0;
        android.graphics.Shader$TileMode $r0, $r1, $r2;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return null;

     label1:
        $r2 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode MIRROR>;

        return $r2;

     label2:
        $r1 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode REPEAT>;

        return $r1;

     label3:
        $r0 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        return $r0;
    }

    private void updateDstRectAndInsetsIfDirty()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Rect r1, $r4, $r9, $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r6, $r8;
        android.graphics.Shader$TileMode $r3, $r7;
        android.graphics.Insets $r5, $r14;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $z0 = r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty>;

        if $z0 == 0 goto label2;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        if $r3 != null goto label1;

        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r7 = $r6.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        if $r7 != null goto label1;

        r1 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect getBounds()>();

        i0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getLayoutDirection()>();

        $r8 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i3 = $r8.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        $i2 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth>;

        $i1 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight>;

        $r9 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        staticinvoke <android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>($i3, $i2, $i1, r1, $r9, i0);

        $r10 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i5 = $r10.<android.graphics.Rect: int left>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i15 = $i5 - $i4;

        $r11 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i7 = $r11.<android.graphics.Rect: int top>;

        $i6 = r1.<android.graphics.Rect: int top>;

        $i14 = $i7 - $i6;

        $i9 = r1.<android.graphics.Rect: int right>;

        $r12 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i8 = $r12.<android.graphics.Rect: int right>;

        $i13 = $i9 - $i8;

        $i11 = r1.<android.graphics.Rect: int bottom>;

        $r13 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i10 = $r13.<android.graphics.Rect: int bottom>;

        $i12 = $i11 - $i10;

        $r14 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>($i15, $i14, $i13, $i12);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r14;

        goto label2;

     label1:
        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void copyBounds(android.graphics.Rect)>($r4);

        $r5 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r5;

     label2:
        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 0;

        return;
    }

    private void updateLocalState(android.content.res.Resources)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3, $r4;
        int $i0, $i1;
        android.graphics.BlendMode $r5;
        android.content.res.ColorStateList $r6;
        android.graphics.BlendModeColorFilter $r7, $r8;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity>;

        $i1 = staticinvoke <android.graphics.drawable.BitmapDrawable: int resolveDensity(android.content.res.Resources,int)>(r1, $i0);

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = $i1;

        $r7 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter>;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r6 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r5 = $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode>;

        $r8 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter updateBlendModeFilter(android.graphics.BlendModeColorFilter,android.content.res.ColorStateList,android.graphics.BlendMode)>($r7, $r6, $r5);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter> = $r8;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void computeBitmapSize()>();

        return;
    }

    private void updateShaderMatrix(android.graphics.Bitmap, android.graphics.Paint, android.graphics.Shader, boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Paint r1;
        android.graphics.Shader r2;
        boolean z0, z2;
        int i0, i1, $i2, $i3, $i4;
        float f0, $f1, $f2, $f3;
        android.graphics.Rect $r4, $r5;
        android.graphics.Matrix $r6, r8;
        android.graphics.Bitmap r7;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r7 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: android.graphics.Paint;

        r2 := @parameter2: android.graphics.Shader;

        z0 := @parameter3: boolean;

        i0 = virtualinvoke r7.<android.graphics.Bitmap: int getDensity()>();

        i1 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        if i0 == 0 goto label1;

        if i0 == i1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 != 0 goto label4;

        if z0 == 0 goto label3;

        goto label4;

     label3:
        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix> = null;

        $r6 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

        virtualinvoke r2.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r6);

        goto label7;

     label4:
        r8 = specialinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix getOrCreateMirrorMatrix()>();

        virtualinvoke r8.<android.graphics.Matrix: void reset()>();

        if z0 == 0 goto label5;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i3 = $r4.<android.graphics.Rect: int right>;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i2 = $r5.<android.graphics.Rect: int left>;

        $i4 = $i3 - $i2;

        $f3 = (float) $i4;

        virtualinvoke r8.<android.graphics.Matrix: void setTranslate(float,float)>($f3, 0.0F);

        virtualinvoke r8.<android.graphics.Matrix: void setScale(float,float)>(-1.0F, 1.0F);

     label5:
        if z2 == 0 goto label6;

        $f2 = (float) i1;

        $f1 = (float) i0;

        f0 = $f2 / $f1;

        virtualinvoke r8.<android.graphics.Matrix: boolean postScale(float,float)>(f0, f0);

     label6:
        virtualinvoke r2.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r8);

     label7:
        virtualinvoke r1.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r2);

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray, int) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.BitmapDrawable$BitmapState r2, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, $i18, i19, i20, i21, i22;
        int[] $r3;
        android.graphics.Bitmap $r4, $r10, r23, r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        float $f0, $f1;
        android.graphics.Shader$TileMode $r6, $r7, r34;
        android.graphics.BlendMode $r8, $r9;
        java.lang.String $r13, $r15;
        android.util.DisplayMetrics $r16, $r17;
        java.lang.Throwable $r18, $r19, r39;
        java.lang.Exception $r20;
        android.content.res.Resources r21;
        java.io.InputStream r24;
        android.graphics.ImageDecoder$Source $r25;
        android.graphics.drawable.'-$$Lambda$BitmapDrawable$LMqt8JvxZ4giSOIRAtlCKDg39Jw' $r26;
        android.content.res.ColorStateList r32;
        android.graphics.Paint r33;
        android.util.TypedValue r35;
        java.lang.StringBuilder r36;
        org.xmlpull.v1.XmlPullParserException r37;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r38;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        i16 := @parameter1: int;

        r21 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.Resources getResources()>();

        r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i1 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations>;

        $i2 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i3 = $i1 | $i2;

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations> = $i3;

        $r3 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs> = $r3;

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mSrcDensityOverride> = i16;

        $i4 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>(r21, 0);

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity> = $i4;

        i0 = virtualinvoke r1.<android.content.res.TypedArray: int getResourceId(int,int)>(1, 0);

        if i0 == 0 goto label20;

        r35 = new android.util.TypedValue;

        specialinvoke r35.<android.util.TypedValue: void <init>()>();

        virtualinvoke r21.<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>(i0, i16, r35, 1);

        if i16 <= 0 goto label02;

        $i8 = r35.<android.util.TypedValue: int density>;

        if $i8 <= 0 goto label02;

        $i9 = r35.<android.util.TypedValue: int density>;

        if $i9 == 65535 goto label02;

        $i10 = r35.<android.util.TypedValue: int density>;

        if $i10 != i16 goto label01;

        $r17 = virtualinvoke r21.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i15 = $r17.<android.util.DisplayMetrics: int densityDpi>;

        r35.<android.util.TypedValue: int density> = $i15;

        goto label02;

     label01:
        $i11 = r35.<android.util.TypedValue: int density>;

        $r16 = virtualinvoke r21.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i12 = $r16.<android.util.DisplayMetrics: int densityDpi>;

        $i13 = $i11 * $i12;

        $i14 = $i13 / i16;

        r35.<android.util.TypedValue: int density> = $i14;

     label02:
        i17 = 0;

        $i18 = r35.<android.util.TypedValue: int density>;

        if $i18 != 0 goto label03;

        i17 = 160;

        goto label04;

     label03:
        $i7 = r35.<android.util.TypedValue: int density>;

        if $i7 == 65535 goto label04;

        i17 = r35.<android.util.TypedValue: int density>;

     label04:
        r23 = null;

     label05:
        r24 = virtualinvoke r21.<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>(i0, r35);

     label06:
        $r25 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,java.io.InputStream,int)>(r21, r24, i17);

        $r26 = <android.graphics.drawable._$$Lambda$BitmapDrawable$LMqt8JvxZ4giSOIRAtlCKDg39Jw: android.graphics.drawable.'-$$Lambda$BitmapDrawable$LMqt8JvxZ4giSOIRAtlCKDg39Jw' INSTANCE>;

        r38 = (android.graphics.ImageDecoder$OnHeaderDecodedListener) $r26;

        r27 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>($r25, r38);

     label07:
        if r24 == null goto label09;

        r23 = r27;

     label08:
        virtualinvoke r24.<java.io.InputStream: void close()>();

     label09:
        r23 = r27;

        goto label18;

     label10:
        $r19 := @caughtexception;

        if r24 == null goto label15;

     label11:
        virtualinvoke r24.<java.io.InputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r18 := @caughtexception;

        r23 = null;

     label14:
        virtualinvoke $r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

     label15:
        r23 = null;

     label16:
        throw $r19;

     label17:
        $r20 := @caughtexception;

     label18:
        if r23 == null goto label19;

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap> = r23;

        goto label20;

     label19:
        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <bitmap> requires a valid \'src\' attribute");

        r37 = new org.xmlpull.v1.XmlPullParserException;

        $r15 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r37.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r15);

        r39 = (java.lang.Throwable) r37;

        throw r39;

     label20:
        $r4 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r4 == null goto label21;

        $r10 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        z9 = virtualinvoke $r10.<android.graphics.Bitmap: boolean hasMipMap()>();

        goto label22;

     label21:
        z9 = 0;

     label22:
        $z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(8, z9);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setMipMap(boolean)>($z0);

        $z1 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored>;

        $z2 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, $z1);

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored> = $z2;

        $f0 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha>;

        $f1 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(7, $f0);

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha> = $f1;

        i19 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(10, -1);

        if i19 == -1 goto label23;

        $r8 = <android.graphics.BlendMode: android.graphics.BlendMode SRC_IN>;

        $r9 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.BlendMode parseBlendMode(int,android.graphics.BlendMode)>(i19, $r8);

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode> = $r9;

     label23:
        r32 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(5);

        if r32 == null goto label24;

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint> = r32;

     label24:
        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r33 = $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z3 = virtualinvoke r33.<android.graphics.Paint: boolean isAntiAlias()>();

        $z4 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, $z3);

        virtualinvoke r33.<android.graphics.Paint: void setAntiAlias(boolean)>($z4);

        $z5 = virtualinvoke r33.<android.graphics.Paint: boolean isFilterBitmap()>();

        $z6 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, $z5);

        virtualinvoke r33.<android.graphics.Paint: void setFilterBitmap(boolean)>($z6);

        $z7 = virtualinvoke r33.<android.graphics.Paint: boolean isDither()>();

        $z8 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, $z7);

        virtualinvoke r33.<android.graphics.Paint: void setDither(boolean)>($z8);

        $i5 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        $i6 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(0, $i5);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setGravity(int)>($i6);

        i20 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(6, -2);

        if i20 == -2 goto label25;

        r34 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode parseTileMode(int)>(i20);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r34, r34);

     label25:
        i21 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(11, -2);

        if i21 == -2 goto label26;

        $r7 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode parseTileMode(int)>(i21);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)>($r7);

     label26:
        i22 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(12, -2);

        if i22 == -2 goto label27;

        $r6 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode parseTileMode(int)>(i22);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)>($r6);

     label27:
        return;

        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Exception from label14 to label15 with label17;
        catch java.lang.Exception from label16 to label17 with label17;
    }

    private void verifyRequiredAttributes(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.Bitmap $r2;
        int[] $r3, $r10;
        java.lang.String $r5, $r9;
        int $i0;
        android.graphics.drawable.BitmapDrawable$BitmapState r11;
        java.lang.StringBuilder r13;
        org.xmlpull.v1.XmlPullParserException r14;
        java.lang.Throwable r15;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r11 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = r11.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r2 != null goto label2;

        $r3 = r11.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs>;

        if $r3 == null goto label1;

        $r10 = r11.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs>;

        $i0 = $r10[1];

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <bitmap> requires a valid \'src\' attribute");

        r14 = new org.xmlpull.v1.XmlPullParserException;

        $r9 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        r15 = (java.lang.Throwable) r14;

        throw r15;

     label2:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1;
        android.content.res.TypedArray r2;
        int[] $r4, $r9, $r10;
        android.content.res.ColorStateList $r5, $r6, $r7, $r8;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r11, $r12;
        android.content.res.Resources$Theme r13;
        android.content.res.Resources $r15;
        java.lang.Exception r16;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r13 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r13);

        r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        if r1 != null goto label01;

        return;

     label01:
        $r4 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs>;

        if $r4 == null goto label09;

        $r10 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs>;

        $r9 = <com.android.internal.R$styleable: int[] BitmapDrawable>;

        r2 = virtualinvoke r13.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r10, $r9);

     label02:
        $i0 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mSrcDensityOverride>;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateStateFromTypedArray(android.content.res.TypedArray,int)>(r2, $i0);

     label03:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        goto label09;

     label04:
        $r11 := @caughtexception;

        goto label08;

     label05:
        $r12 := @caughtexception;

     label06:
        r16 = (java.lang.Exception) $r12;

        staticinvoke <android.graphics.drawable.BitmapDrawable: void rethrowAsRuntimeException(java.lang.Exception)>(r16);

     label07:
        goto label03;

     label08:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        throw $r11;

     label09:
        $r5 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        if $r5 == null goto label10;

        $r6 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $z0 = virtualinvoke $r6.<android.content.res.ColorStateList: boolean canApplyTheme()>();

        if $z0 == 0 goto label10;

        $r7 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $r8 = virtualinvoke $r7.<android.content.res.ColorStateList: android.content.res.ColorStateList obtainForTheme(android.content.res.Resources$Theme)>(r13);

        r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint> = $r8;

     label10:
        $r15 = virtualinvoke r13.<android.content.res.Resources$Theme: android.content.res.Resources getResources()>();

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateLocalState(android.content.res.Resources)>($r15);

        return;

        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean canApplyTheme()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void clearMutated()
    {
        android.graphics.drawable.BitmapDrawable r0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void clearMutated()>();

        r0.<android.graphics.drawable.BitmapDrawable: boolean mMutated> = 0;

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Bitmap r2;
        android.graphics.drawable.BitmapDrawable$BitmapState r3, $r5;
        android.graphics.Paint r4, r20;
        boolean z0, $z1, z2;
        android.graphics.BlendModeColorFilter $r6, $r13;
        android.graphics.Rect $r7, $r9, $r10, $r11;
        int $i1, $i2, $i3, $i4, i6;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.ColorFilter $r12;
        android.graphics.BitmapShader $r15;
        android.graphics.Shader$TileMode r18, r19;
        byte $b5;
        android.graphics.Shader r21;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r2 = $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if r2 != null goto label01;

        return;

     label01:
        r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r4 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z1 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mRebuildShader>;

        if $z1 == 0 goto label06;

        r18 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        r19 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        if r18 != null goto label02;

        if r19 != null goto label02;

        virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(null);

        goto label05;

     label02:
        if r18 != null goto label03;

        r18 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        goto label03;

     label03:
        if r19 != null goto label04;

        r19 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        goto label04;

     label04:
        $r15 = new android.graphics.BitmapShader;

        specialinvoke $r15.<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r2, r18, r19);

        virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r15);

     label05:
        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mRebuildShader> = 0;

     label06:
        $f5 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha>;

        $b5 = $f5 cmpl 1.0F;

        if $b5 == 0 goto label07;

        r20 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>();

        i6 = virtualinvoke r20.<android.graphics.Paint: int getAlpha()>();

        $f2 = (float) i6;

        $f1 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha>;

        $f3 = $f2 * $f1;

        $f4 = $f3 + 0.5F;

        $i4 = (int) $f4;

        virtualinvoke r20.<android.graphics.Paint: void setAlpha(int)>($i4);

        goto label08;

     label07:
        i6 = -1;

     label08:
        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter>;

        if $r6 == null goto label09;

        $r12 = virtualinvoke r4.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        if $r12 != null goto label09;

        $r13 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter>;

        virtualinvoke r4.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r13);

        z2 = 1;

        goto label10;

     label09:
        z2 = 0;

     label10:
        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateDstRectAndInsetsIfDirty()>();

        r21 = virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader getShader()>();

        z0 = specialinvoke r0.<android.graphics.drawable.BitmapDrawable: boolean needMirroring()>();

        if r21 != null goto label12;

        if z0 == 0 goto label11;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r10 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i2 = $r10.<android.graphics.Rect: int right>;

        $r11 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i1 = $r11.<android.graphics.Rect: int left>;

        $i3 = $i2 - $i1;

        $f0 = (float) $i3;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f0, 0.0F);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(-1.0F, 1.0F);

     label11:
        $r9 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>(r2, null, $r9, r4);

        if z0 == 0 goto label13;

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        goto label13;

     label12:
        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateShaderMatrix(android.graphics.Bitmap,android.graphics.Paint,android.graphics.Shader,boolean)>(r2, r4, r21, z0);

        $r7 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>($r7, r4);

     label13:
        if z2 == 0 goto label14;

        virtualinvoke r4.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(null);

     label14:
        if i6 < 0 goto label15;

        virtualinvoke r4.<android.graphics.Paint: void setAlpha(int)>(i6);

     label15:
        return;
    }

    public int getAlpha()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $i0 = virtualinvoke $r2.<android.graphics.Paint: int getAlpha()>();

        return $i0;
    }

    public final android.graphics.Bitmap getBitmap()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        return $r2;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.BitmapDrawable r0;
        int $i0, $i1, $i2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i1 = virtualinvoke $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        return $i2;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;
        android.graphics.ColorFilter $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $r3 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        return $r3;
    }

    public final android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations>;

        $i1 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations> = $i2;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        return $r2;
    }

    public int getGravity()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.BitmapDrawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight>;

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.BitmapDrawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth>;

        return $i0;
    }

    public int getOpacity()
    {
        android.graphics.drawable.BitmapDrawable r0;
        int i0, $i1;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3, $r4;
        boolean $z0;
        android.graphics.Paint $r5;
        byte b2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        i0 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        b2 = -3;

        if i0 == 119 goto label1;

        return -3;

     label1:
        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r1 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r5 = $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $i1 = virtualinvoke $r5.<android.graphics.Paint: int getAlpha()>();

        if $i1 >= 255 goto label2;

        goto label3;

     label2:
        b2 = -1;

        goto label3;

     label3:
        return b2;
    }

    public android.graphics.Insets getOpticalInsets()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Insets $r1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateDstRectAndInsetsIfDirty()>();

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets>;

        return $r1;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Outline r1;
        android.graphics.Rect $r2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3, $r5;
        android.graphics.Bitmap $r4, $r6;
        int $i0;
        float $f0, f1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Outline;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateDstRectAndInsetsIfDirty()>();

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r1.<android.graphics.Outline: void setRect(android.graphics.Rect)>($r2);

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r4 == null goto label1;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r6 = $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        $z0 = virtualinvoke $r6.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == 0 goto label3;

        $i0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getAlpha()>();

        $f0 = (float) $i0;

        f1 = $f0 / 255.0F;

        goto label4;

     label3:
        f1 = 0.0F;

     label4:
        virtualinvoke r1.<android.graphics.Outline: void setAlpha(float)>(f1);

        return;
    }

    public final android.graphics.Paint getPaint()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        return $r2;
    }

    public android.graphics.Shader$TileMode getTileModeX()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Shader$TileMode $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        return $r2;
    }

    public android.graphics.Shader$TileMode getTileModeY()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Shader$TileMode $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        return $r2;
    }

    public android.content.res.ColorStateList getTint()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.content.res.ColorStateList $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        return $r2;
    }

    public android.graphics.PorterDuff$Mode getTintMode()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.BlendMode $r2;
        android.graphics.PorterDuff$Mode $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode>;

        $r3 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>($r2);

        return $r3;
    }

    public boolean hasAntiAlias()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;
        boolean $z0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z0 = virtualinvoke $r2.<android.graphics.Paint: boolean isAntiAlias()>();

        return $z0;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.content.res.ColorStateList $r2, $r4;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $z0 = virtualinvoke $r4.<android.content.res.ColorStateList: boolean hasFocusStateSpecified()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean hasMipMap()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.graphics.Bitmap $r2, $r4;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        $z0 = virtualinvoke $r4.<android.graphics.Bitmap: boolean hasMipMap()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        int[] $r4;
        int $i0;
        org.xmlpull.v1.XmlPullParser r5;
        android.content.res.TypedArray r6;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r5 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r5, r2, r3);

        $r4 = <com.android.internal.R$styleable: int[] BitmapDrawable>;

        r6 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r3, r2, $r4);

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mSrcDensityOverride>;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateStateFromTypedArray(android.content.res.TypedArray,int)>(r6, $i0);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r6);

        virtualinvoke r6.<android.content.res.TypedArray: void recycle()>();

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateLocalState(android.content.res.Resources)>(r1);

        return;
    }

    public final boolean isAutoMirrored()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $z0 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored>;

        return $z0;
    }

    public boolean isFilterBitmap()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;
        boolean $z0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z0 = virtualinvoke $r2.<android.graphics.Paint: boolean isFilterBitmap()>();

        return $z0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.content.res.ColorStateList $r2, $r4;
        boolean $z0, $z1, z2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $z1 = virtualinvoke $r4.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z1 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $z0 = r0.<android.graphics.drawable.BitmapDrawable: boolean mMutated>;

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if $r1 != r0 goto label1;

        $r2 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        specialinvoke $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState)>($r3);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState> = $r2;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mMutated> = 1;

     label1:
        return r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3, $r5;
        android.graphics.Paint $r4, $r6;
        boolean $z0;
        android.graphics.Rect r7;
        android.graphics.Shader r8;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r7 := @parameter0: android.graphics.Rect;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r1 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        r8 = virtualinvoke $r4.<android.graphics.Paint: android.graphics.Shader getShader()>();

        if r1 == null goto label1;

        if r8 == null goto label1;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r6 = $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z0 = specialinvoke r0.<android.graphics.drawable.BitmapDrawable: boolean needMirroring()>();

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateShaderMatrix(android.graphics.Bitmap,android.graphics.Paint,android.graphics.Shader,boolean)>(r1, $r6, r8, $z0);

     label1:
        return;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.ColorStateList $r1, $r4;
        android.graphics.BlendMode $r2, $r3;
        android.graphics.BlendModeColorFilter $r5, $r6;
        int[] r7;
        android.graphics.drawable.BitmapDrawable$BitmapState r8;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r7 := @parameter0: int[];

        r8 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r1 = r8.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        if $r1 == null goto label1;

        $r2 = r8.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode>;

        if $r2 == null goto label1;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter>;

        $r4 = r8.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $r3 = r8.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode>;

        $r6 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter updateBlendModeFilter(android.graphics.BlendModeColorFilter,android.content.res.ColorStateList,android.graphics.BlendMode)>($r5, $r4, $r3);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter> = $r6;

        return 1;

     label1:
        return 0;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.BitmapDrawable r0;
        int i0, $i1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.graphics.Paint $r2, $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $i1 = virtualinvoke $r2.<android.graphics.Paint: int getAlpha()>();

        if i0 == $i1 goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r4.<android.graphics.Paint: void setAlpha(int)>(i0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setAntiAlias(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setAntiAlias(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0, $z1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $z1 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored>;

        if $z1 == z0 goto label1;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored> = z0;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setBitmap(android.graphics.Bitmap)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r3 == r1 goto label1;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap> = r1;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void computeBitmapSize()>();

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;
        android.graphics.Paint $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r3.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(r1);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setDither(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setDither(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setFilterBitmap(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setGravity(int)
    {
        android.graphics.drawable.BitmapDrawable r0;
        int i0, $i1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i1 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        if $i1 == i0 goto label1;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity> = i0;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setMipMap(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.graphics.Bitmap $r2, $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        virtualinvoke $r4.<android.graphics.Bitmap: void setHasMipMap(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setTargetDensity(int)
    {
        android.graphics.drawable.BitmapDrawable r0;
        int $i0, i1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        i1 := @parameter0: int;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        if $i0 == i1 goto label3;

        if i1 != 0 goto label1;

        i1 = 160;

        goto label1;

     label1:
        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = i1;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label2;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void computeBitmapSize()>();

     label2:
        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label3:
        return;
    }

    public void setTargetDensity(android.graphics.Canvas)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Canvas r1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r1.<android.graphics.Canvas: int getDensity()>();

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    public void setTargetDensity(android.util.DisplayMetrics)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.util.DisplayMetrics r1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = r1.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    public void setTileModeX(android.graphics.Shader$TileMode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Shader$TileMode r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Shader$TileMode;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r1, $r3);

        return;
    }

    public void setTileModeXY(android.graphics.Shader$TileMode, android.graphics.Shader$TileMode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Shader$TileMode r1, r2, $r4, $r5;
        android.graphics.drawable.BitmapDrawable$BitmapState r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Shader$TileMode;

        r2 := @parameter1: android.graphics.Shader$TileMode;

        r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        if $r4 != r1 goto label1;

        $r5 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        if $r5 == r2 goto label2;

     label1:
        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX> = r1;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY> = r2;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mRebuildShader> = 1;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label2:
        return;
    }

    public final void setTileModeY(android.graphics.Shader$TileMode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Shader$TileMode r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Shader$TileMode;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>($r3, r1);

        return;
    }

    public void setTintBlendMode(android.graphics.BlendMode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.BlendMode r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState r2, $r4;
        android.content.res.ColorStateList $r5;
        android.graphics.BlendModeColorFilter $r6, $r7;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.BlendMode;

        r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode>;

        if $r3 == r1 goto label1;

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode> = r1;

        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter>;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r5 = $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $r7 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter updateBlendModeFilter(android.graphics.BlendModeColorFilter,android.content.res.ColorStateList,android.graphics.BlendMode)>($r6, $r5, r1);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter> = $r7;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.ColorStateList r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState r2, $r4;
        android.graphics.BlendMode $r5;
        android.graphics.BlendModeColorFilter $r6, $r7;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        if $r3 == r1 goto label1;

        r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint> = r1;

        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter>;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r5 = $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.BlendMode mBlendMode>;

        $r7 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter updateBlendModeFilter(android.graphics.BlendModeColorFilter,android.content.res.ColorStateList,android.graphics.BlendMode)>($r6, r1, $r5);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.BlendModeColorFilter mBlendModeFilter> = $r7;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setXfermode(android.graphics.Xfermode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Xfermode r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;
        android.graphics.Paint $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Xfermode;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r3.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>(r1);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_UNDEFINED> = -2;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_REPEAT> = 1;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_MIRROR> = 2;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_DISABLED> = -1;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_CLAMP> = 0;

        <android.graphics.drawable.BitmapDrawable: int DEFAULT_PAINT_FLAGS> = 6;

        return;
    }
}
