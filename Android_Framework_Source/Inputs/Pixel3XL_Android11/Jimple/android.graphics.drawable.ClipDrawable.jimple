public class android.graphics.drawable.ClipDrawable extends android.graphics.drawable.DrawableWrapper
{
    public static final int HORIZONTAL;
    private static final int MAX_LEVEL;
    public static final int VERTICAL;
    private android.graphics.drawable.ClipDrawable$ClipState mState;
    private final android.graphics.Rect mTmpRect;

    void <init>()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r1 = new android.graphics.drawable.ClipDrawable$ClipState;

        specialinvoke $r1.<android.graphics.drawable.ClipDrawable$ClipState: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>(null, null);

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>($r1, null);

        return;
    }

    private void <init>(android.graphics.drawable.ClipDrawable$ClipState, android.content.res.Resources)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState r1;
        android.content.res.Resources r2;
        android.graphics.Rect $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.ClipDrawable$ClipState;

        r2 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void <init>(android.graphics.drawable.DrawableWrapper$DrawableWrapperState,android.content.res.Resources)>(r1, r2);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.ClipDrawable: android.graphics.Rect mTmpRect> = $r3;

        r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState> = r1;

        return;
    }

    void <init>(android.graphics.drawable.ClipDrawable$ClipState, android.content.res.Resources, android.graphics.drawable.ClipDrawable$1)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.ClipDrawable$1 r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.ClipDrawable$ClipState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.graphics.drawable.ClipDrawable$1;

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>(r1, r2);

        return;
    }

    public void <init>(android.graphics.drawable.Drawable, int, int)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.Drawable r1;
        int i0, i1;
        android.graphics.drawable.ClipDrawable$ClipState $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.graphics.drawable.ClipDrawable$ClipState;

        specialinvoke $r2.<android.graphics.drawable.ClipDrawable$ClipState: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>(null, null);

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>($r2, null);

        $r3 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        $r3.<android.graphics.drawable.ClipDrawable$ClipState: int mGravity> = i0;

        $r4 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        $r4.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation> = i1;

        virtualinvoke r0.<android.graphics.drawable.ClipDrawable: void setDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.ClipDrawable$ClipState r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        if r2 != null goto label1;

        return;

     label1:
        $i0 = r2.<android.graphics.drawable.ClipDrawable$ClipState: int mChangingConfigurations>;

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r2.<android.graphics.drawable.ClipDrawable$ClipState: int mChangingConfigurations> = $i2;

        $r3 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        staticinvoke <android.graphics.drawable.ClipDrawable$ClipState: int[] access$002(android.graphics.drawable.ClipDrawable$ClipState,int[])>(r2, $r3);

        $i3 = r2.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation>;

        $i4 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(2, $i3);

        r2.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation> = $i4;

        $i5 = r2.<android.graphics.drawable.ClipDrawable$ClipState: int mGravity>;

        $i6 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(0, $i5);

        r2.<android.graphics.drawable.ClipDrawable$ClipState: int mGravity> = $i6;

        return;
    }

    private void verifyRequiredAttributes(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.ClipDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.Drawable $r3;
        android.graphics.drawable.ClipDrawable$ClipState $r4, $r12;
        int[] $r5, $r13;
        java.lang.String $r7, $r11;
        int $i0;
        java.lang.StringBuilder r14;
        org.xmlpull.v1.XmlPullParserException r15;
        java.lang.Throwable r16;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        $r3 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable getDrawable()>();

        if $r3 != null goto label2;

        $r4 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        $r5 = staticinvoke <android.graphics.drawable.ClipDrawable$ClipState: int[] access$000(android.graphics.drawable.ClipDrawable$ClipState)>($r4);

        if $r5 == null goto label1;

        $r12 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        $r13 = staticinvoke <android.graphics.drawable.ClipDrawable$ClipState: int[] access$000(android.graphics.drawable.ClipDrawable$ClipState)>($r12);

        $i0 = $r13[1];

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <clip> tag requires a \'drawable\' attribute or child tag defining a drawable");

        r15 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r11);

        r16 = (java.lang.Throwable) r15;

        throw r16;

     label2:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.ClipDrawable r0;
        int[] $r1, $r2, $r3;
        java.lang.Throwable $r4, $r5;
        android.content.res.Resources$Theme r6;
        android.graphics.drawable.ClipDrawable$ClipState r7;
        android.content.res.TypedArray r8;
        java.lang.Exception r11;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r6 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void applyTheme(android.content.res.Resources$Theme)>(r6);

        r7 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        if r7 != null goto label1;

        return;

     label1:
        $r1 = staticinvoke <android.graphics.drawable.ClipDrawable$ClipState: int[] access$000(android.graphics.drawable.ClipDrawable$ClipState)>(r7);

        if $r1 == null goto label9;

        $r2 = staticinvoke <android.graphics.drawable.ClipDrawable$ClipState: int[] access$000(android.graphics.drawable.ClipDrawable$ClipState)>(r7);

        $r3 = <com.android.internal.R$styleable: int[] ClipDrawable>;

        r8 = virtualinvoke r6.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r2, $r3);

     label2:
        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r8);

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r8);

     label3:
        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        goto label9;

     label4:
        $r5 := @caughtexception;

        goto label8;

     label5:
        $r4 := @caughtexception;

     label6:
        r11 = (java.lang.Exception) $r4;

        staticinvoke <android.graphics.drawable.ClipDrawable: void rethrowAsRuntimeException(java.lang.Exception)>(r11);

     label7:
        goto label3;

     label8:
        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        throw $r5;

     label9:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.Rect r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18;
        android.graphics.drawable.ClipDrawable$ClipState $r5, $r6, $r7;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable getDrawable()>();

        $i0 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getLevel()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        r3 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.Rect mTmpRect>;

        r4 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.Rect getBounds()>();

        i15 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: int getLevel()>();

        i16 = virtualinvoke r4.<android.graphics.Rect: int width()>();

        $r5 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        $i1 = $r5.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label2;

        $i12 = i16 + 0;

        $i11 = 10000 - i15;

        $i13 = $i12 * $i11;

        $i14 = $i13 / 10000;

        i16 = i16 - $i14;

        goto label2;

     label2:
        i17 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        $r6 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        $i3 = $r6.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation>;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label3;

        $i8 = i17 + 0;

        $i7 = 10000 - i15;

        $i9 = $i8 * $i7;

        $i10 = $i9 / 10000;

        i17 = i17 - $i10;

        goto label3;

     label3:
        i18 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: int getLayoutDirection()>();

        $r7 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        $i5 = $r7.<android.graphics.drawable.ClipDrawable$ClipState: int mGravity>;

        staticinvoke <android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>($i5, i16, i17, r4, r3, i18);

        if i16 <= 0 goto label4;

        if i17 <= 0 goto label4;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>(r3);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label4:
        return;
    }

    public int getOpacity()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.Drawable r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable getDrawable()>();

        $i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i0 == -2 goto label3;

        $i1 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getLevel()>();

        if $i1 != 0 goto label1;

        goto label3;

     label1:
        $i2 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: int getLevel()>();

        if $i2 < 10000 goto label2;

        $i3 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        return $i3;

     label2:
        return -3;

     label3:
        return -2;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.ClipDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r6;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        $r6 = <com.android.internal.R$styleable: int[] ClipDrawable>;

        r5 = staticinvoke <android.graphics.drawable.ClipDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r6);

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    android.graphics.drawable.DrawableWrapper$DrawableWrapperState mutateConstantState()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r2, $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r2 = new android.graphics.drawable.ClipDrawable$ClipState;

        $r3 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState>;

        specialinvoke $r2.<android.graphics.drawable.ClipDrawable$ClipState: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>($r3, null);

        r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mState> = $r2;

        return $r2;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.ClipDrawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: boolean onLevelChange(int)>(i0);

        virtualinvoke r0.<android.graphics.drawable.ClipDrawable: void invalidateSelf()>();

        return 1;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.ClipDrawable: int VERTICAL> = 2;

        <android.graphics.drawable.ClipDrawable: int MAX_LEVEL> = 10000;

        <android.graphics.drawable.ClipDrawable: int HORIZONTAL> = 1;

        return;
    }
}
