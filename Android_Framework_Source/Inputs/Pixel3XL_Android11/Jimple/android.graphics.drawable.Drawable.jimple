public abstract class android.graphics.drawable.Drawable extends java.lang.Object
{
    static final android.graphics.BlendMode DEFAULT_BLEND_MODE;
    static final android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;
    private static final android.graphics.Rect ZERO_BOUNDS_RECT;
    private android.graphics.Rect mBounds;
    private java.lang.ref.WeakReference mCallback;
    private int mChangingConfigurations;
    private int mLayoutDirection;
    private int mLevel;
    private boolean mSetBlendModeInvoked;
    private boolean mSetTintModeInvoked;
    protected int mSrcDensityOverride;
    private int[] mStateSet;
    private boolean mVisible;

    static void <clinit>()
    {
        android.graphics.Rect $r0;
        android.graphics.PorterDuff$Mode $r1;
        android.graphics.BlendMode $r2;

        $r0 = new android.graphics.Rect;

        specialinvoke $r0.<android.graphics.Rect: void <init>()>();

        <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT> = $r0;

        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE> = $r1;

        $r2 = <android.graphics.BlendMode: android.graphics.BlendMode SRC_IN>;

        <android.graphics.drawable.Drawable: android.graphics.BlendMode DEFAULT_BLEND_MODE> = $r2;

        return;
    }

    public void <init>()
    {
        android.graphics.drawable.Drawable r0;
        int[] $r1;
        android.graphics.Rect $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <android.util.StateSet: int[] WILD_CARD>;

        r0.<android.graphics.drawable.Drawable: int[] mStateSet> = $r1;

        r0.<android.graphics.drawable.Drawable: int mLevel> = 0;

        r0.<android.graphics.drawable.Drawable: int mChangingConfigurations> = 0;

        $r2 = <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT>;

        r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds> = $r2;

        r0.<android.graphics.drawable.Drawable: java.lang.ref.WeakReference mCallback> = null;

        r0.<android.graphics.drawable.Drawable: boolean mVisible> = 1;

        r0.<android.graphics.drawable.Drawable: int mSrcDensityOverride> = 0;

        r0.<android.graphics.drawable.Drawable: boolean mSetBlendModeInvoked> = 0;

        r0.<android.graphics.drawable.Drawable: boolean mSetTintModeInvoked> = 0;

        return;
    }

    public static android.graphics.drawable.Drawable createFromPath(java.lang.String)
    {
        java.lang.Throwable $r0, $r1, $r2, $r3;
        java.lang.String r4;
        java.io.FileInputStream r5;
        android.graphics.drawable.Drawable r6;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label01;

        return null;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, r4);

     label02:
        r5 = new java.io.FileInputStream;

        specialinvoke r5.<java.io.FileInputStream: void <init>(java.lang.String)>(r4);

     label03:
        r6 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getBitmapDrawable(android.content.res.Resources,android.util.TypedValue,java.io.InputStream)>(null, null, r5);

     label04:
        virtualinvoke r5.<java.io.FileInputStream: void close()>();

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r6;

     label06:
        $r3 := @caughtexception;

     label07:
        virtualinvoke r5.<java.io.FileInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r2 := @caughtexception;

     label10:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label11:
        throw $r3;

     label12:
        $r0 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw $r0;

     label13:
        $r1 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return null;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String)
    {
        android.util.TypedValue r0;
        java.io.InputStream r1;
        java.lang.String r2, r5;
        java.lang.Throwable $r3;
        android.content.res.Resources r4;
        android.graphics.drawable.Drawable r6;

        r4 := @parameter0: android.content.res.Resources;

        r0 := @parameter1: android.util.TypedValue;

        r1 := @parameter2: java.io.InputStream;

        r2 := @parameter3: java.lang.String;

        if r2 == null goto label1;

        r5 = r2;

        goto label2;

     label1:
        r5 = "Unknown drawable";

     label2:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, r5);

     label3:
        r6 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>(r4, r0, r1, r2, null);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r6;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw $r3;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String, android.graphics.BitmapFactory$Options)
    {
        android.content.res.Resources r0;
        java.lang.String r1;
        android.graphics.Bitmap r3;
        android.graphics.Rect $r4, r11, $r12;
        int $i0;
        boolean $z0;
        android.graphics.drawable.Drawable $r5, $r14;
        android.util.TypedValue r6;
        java.io.InputStream r7;
        android.graphics.BitmapFactory$Options r8;
        byte[] r9, r10;

        r0 := @parameter0: android.content.res.Resources;

        r6 := @parameter1: android.util.TypedValue;

        r7 := @parameter2: java.io.InputStream;

        r1 := @parameter3: java.lang.String;

        r8 := @parameter4: android.graphics.BitmapFactory$Options;

        if r7 != null goto label1;

        return null;

     label1:
        if r8 != null goto label2;

        $r5 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getBitmapDrawable(android.content.res.Resources,android.util.TypedValue,java.io.InputStream)>(r0, r6, r7);

        return $r5;

     label2:
        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        $i0 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>(r0, 0);

        r8.<android.graphics.BitmapFactory$Options: int inScreenDensity> = $i0;

        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r0, r6, r7, $r4, r8);

        if r3 == null goto label5;

        r9 = virtualinvoke r3.<android.graphics.Bitmap: byte[] getNinePatchChunk()>();

        if r9 == null goto label3;

        r10 = r9;

        r11 = $r4;

        $z0 = staticinvoke <android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>(r9);

        if $z0 != 0 goto label4;

     label3:
        r10 = null;

        r11 = null;

     label4:
        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        virtualinvoke r3.<android.graphics.Bitmap: void getOpticalInsets(android.graphics.Rect)>($r12);

        $r14 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,android.graphics.Rect,java.lang.String)>(r0, r3, r10, r11, $r12, r1);

        return $r14;

     label5:
        return null;
    }

    public static android.graphics.drawable.Drawable createFromStream(java.io.InputStream, java.lang.String)
    {
        java.lang.String r0, r3;
        java.lang.Throwable $r1;
        java.io.InputStream r2;
        android.graphics.drawable.Drawable r4;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        r3 = r0;

        goto label2;

     label1:
        r3 = "Unknown drawable";

     label2:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, r3);

     label3:
        r4 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>(null, null, r2, r0);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r4;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw $r1;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r2 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>(r0, r1, null);

        return $r2;
    }

    public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.content.res.Resources$Theme r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.content.res.Resources$Theme;

        $r3 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlForDensity(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,int,android.content.res.Resources$Theme)>(r0, r1, 0, r2);

        return $r3;
    }

    public static android.graphics.drawable.Drawable createFromXmlForDensity(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, int, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.xmlpull.v1.XmlPullParser r0;
        int i0, i1;
        android.content.res.Resources$Theme r1;
        android.util.AttributeSet r2;
        java.lang.String $r6, $r9;
        android.content.res.Resources r10;
        android.graphics.drawable.Drawable r11;
        java.lang.StringBuilder r13;
        java.lang.RuntimeException r14;
        org.xmlpull.v1.XmlPullParserException r15;
        java.lang.Throwable r16;

        r10 := @parameter0: android.content.res.Resources;

        r0 := @parameter1: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter2: int;

        r1 := @parameter3: android.content.res.Resources$Theme;

        r2 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r0);

     label1:
        i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 2 goto label2;

        if i1 == 1 goto label2;

        goto label1;

     label2:
        if i1 != 2 goto label4;

        r11 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInnerForDensity(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,android.content.res.Resources$Theme)>(r10, r0, r2, i0, r1);

        if r11 == null goto label3;

        return r11;

     label3:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown initial tag: ");

        $r6 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r14 = new java.lang.RuntimeException;

        $r9 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw r14;

     label4:
        r15 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r15.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        r16 = (java.lang.Throwable) r15;

        throw r16;
    }

    public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        $r3 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r0, r1, r2, null);

        return $r3;
    }

    public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.Resources$Theme;

        $r4 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInnerForDensity(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,android.content.res.Resources$Theme)>(r0, r1, r2, 0, r3);

        return $r4;
    }

    static android.graphics.drawable.Drawable createFromXmlInnerForDensity(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, int, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        int i0;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.DrawableInflater $r4;
        java.lang.String $r5;
        android.graphics.drawable.Drawable $r6;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        i0 := @parameter3: int;

        r3 := @parameter4: android.content.res.Resources$Theme;

        $r4 = virtualinvoke r0.<android.content.res.Resources: android.graphics.drawable.DrawableInflater getDrawableInflater()>();

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<android.graphics.drawable.DrawableInflater: android.graphics.drawable.Drawable inflateFromXmlForDensity(java.lang.String,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,android.content.res.Resources$Theme)>($r5, r1, r2, i0, r3);

        return $r6;
    }

    private static android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources, android.graphics.Bitmap, byte[], android.graphics.Rect, android.graphics.Rect, java.lang.String)
    {
        android.content.res.Resources r0;
        android.graphics.Bitmap r1;
        byte[] r2;
        android.graphics.Rect r3, r4;
        java.lang.String r5;
        android.graphics.drawable.BitmapDrawable $r6;
        android.graphics.drawable.NinePatchDrawable $r7;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: byte[];

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Rect;

        r5 := @parameter5: java.lang.String;

        if r2 == null goto label1;

        $r7 = new android.graphics.drawable.NinePatchDrawable;

        specialinvoke $r7.<android.graphics.drawable.NinePatchDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,android.graphics.Rect,java.lang.String)>(r0, r1, r2, r3, r4, r5);

        return $r7;

     label1:
        $r6 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r6.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r0, r1);

        return $r6;
    }

    private static android.graphics.drawable.Drawable getBitmapDrawable(android.content.res.Resources, android.util.TypedValue, java.io.InputStream)
    {
        java.io.InputStream r0;
        android.graphics.drawable.'-$$Lambda$Drawable$bbJz2VgQAwkXlE27mR8nPMYacEw' $r1;
        int $i0, $i1, i3;
        java.lang.Throwable $r2;
        java.lang.String $r6;
        android.content.res.Resources r7;
        android.util.TypedValue r8;
        android.graphics.ImageDecoder$Source r9;
        android.graphics.drawable.Drawable r10;
        java.lang.StringBuilder r13;
        android.graphics.ImageDecoder$OnHeaderDecodedListener r14;

        r7 := @parameter0: android.content.res.Resources;

        r8 := @parameter1: android.util.TypedValue;

        r0 := @parameter2: java.io.InputStream;

        if r8 == null goto label6;

        i3 = 0;

     label1:
        $i0 = r8.<android.util.TypedValue: int density>;

        if $i0 != 0 goto label3;

     label2:
        i3 = 160;

        goto label4;

     label3:
        $i1 = r8.<android.util.TypedValue: int density>;

        if $i1 == 65535 goto label4;

        i3 = r8.<android.util.TypedValue: int density>;

     label4:
        r9 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,java.io.InputStream,int)>(r7, r0, i3);

     label5:
        goto label7;

     label6:
        r9 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,java.io.InputStream)>(r7, r0);

     label7:
        $r1 = <android.graphics.drawable._$$Lambda$Drawable$bbJz2VgQAwkXlE27mR8nPMYacEw: android.graphics.drawable.'-$$Lambda$Drawable$bbJz2VgQAwkXlE27mR8nPMYacEw' INSTANCE>;

        r14 = (android.graphics.ImageDecoder$OnHeaderDecodedListener) $r1;

        r10 = staticinvoke <android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r9, r14);

     label8:
        return r10;

     label9:
        $r2 := @caughtexception;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to decode stream: ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Drawable", $r6);

        return null;

        catch java.io.IOException from label1 to label2 with label9;
        catch java.io.IOException from label3 to label4 with label9;
        catch java.io.IOException from label4 to label5 with label9;
        catch java.io.IOException from label6 to label7 with label9;
        catch java.io.IOException from label7 to label8 with label9;
    }

    static boolean lambda$getBitmapDrawable$0(android.graphics.ImageDecoder$DecodeException)
    {
        android.graphics.ImageDecoder$DecodeException r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.graphics.ImageDecoder$DecodeException;

        $i0 = virtualinvoke r0.<android.graphics.ImageDecoder$DecodeException: int getError()>();

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$getBitmapDrawable$1(android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo, android.graphics.ImageDecoder$Source)
    {
        android.graphics.ImageDecoder r0;
        android.graphics.ImageDecoder$ImageInfo r1;
        android.graphics.ImageDecoder$Source r2;
        android.graphics.drawable.'-$$Lambda$Drawable$KZt6g0-IxKV2yrq1V3HrWrb1kXg' $r3;
        android.graphics.ImageDecoder$OnPartialImageListener r4;

        r0 := @parameter0: android.graphics.ImageDecoder;

        r1 := @parameter1: android.graphics.ImageDecoder$ImageInfo;

        r2 := @parameter2: android.graphics.ImageDecoder$Source;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setAllocator(int)>(1);

        $r3 = <android.graphics.drawable._$$Lambda$Drawable$KZt6g0_IxKV2yrq1V3HrWrb1kXg: android.graphics.drawable.'-$$Lambda$Drawable$KZt6g0-IxKV2yrq1V3HrWrb1kXg' INSTANCE>;

        r4 = (android.graphics.ImageDecoder$OnPartialImageListener) $r3;

        virtualinvoke r0.<android.graphics.ImageDecoder: void setOnPartialImageListener(android.graphics.ImageDecoder$OnPartialImageListener)>(r4);

        return;
    }

    protected static android.content.res.TypedArray obtainAttributes(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int[])
    {
        android.content.res.Resources r0;
        android.content.res.Resources$Theme r1;
        android.util.AttributeSet r2;
        int[] r3;
        android.content.res.TypedArray $r4, $r5;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.content.res.Resources$Theme;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: int[];

        if r1 != null goto label1;

        $r5 = virtualinvoke r0.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r2, r3);

        return $r5;

     label1:
        $r4 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, r3, 0, 0);

        return $r4;
    }

    public static android.graphics.BlendMode parseBlendMode(int, android.graphics.BlendMode)
    {
        int i0;
        android.graphics.BlendMode r0, $r1, $r2, $r3, $r4, $r5, $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: android.graphics.BlendMode;

        if i0 == 3 goto label7;

        if i0 == 5 goto label6;

        if i0 == 9 goto label5;

        tableswitch(i0)
        {
            case 14: goto label4;
            case 15: goto label3;
            case 16: goto label2;
            default: goto label1;
        };

     label1:
        return r0;

     label2:
        $r4 = <android.graphics.BlendMode: android.graphics.BlendMode PLUS>;

        return $r4;

     label3:
        $r5 = <android.graphics.BlendMode: android.graphics.BlendMode SCREEN>;

        return $r5;

     label4:
        $r6 = <android.graphics.BlendMode: android.graphics.BlendMode MODULATE>;

        return $r6;

     label5:
        $r3 = <android.graphics.BlendMode: android.graphics.BlendMode SRC_ATOP>;

        return $r3;

     label6:
        $r2 = <android.graphics.BlendMode: android.graphics.BlendMode SRC_IN>;

        return $r2;

     label7:
        $r1 = <android.graphics.BlendMode: android.graphics.BlendMode SRC_OVER>;

        return $r1;
    }

    public static android.graphics.PorterDuff$Mode parseTintMode(int, android.graphics.PorterDuff$Mode)
    {
        int i0;
        android.graphics.PorterDuff$Mode r0, $r1, $r2, $r3, $r4, $r5, $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: android.graphics.PorterDuff$Mode;

        if i0 == 3 goto label7;

        if i0 == 5 goto label6;

        if i0 == 9 goto label5;

        tableswitch(i0)
        {
            case 14: goto label4;
            case 15: goto label3;
            case 16: goto label2;
            default: goto label1;
        };

     label1:
        return r0;

     label2:
        $r4 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode ADD>;

        return $r4;

     label3:
        $r5 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SCREEN>;

        return $r5;

     label4:
        $r6 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode MULTIPLY>;

        return $r6;

     label5:
        $r3 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_ATOP>;

        return $r3;

     label6:
        $r2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        return $r2;

     label7:
        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        return $r1;
    }

    static int resolveDensity(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        android.util.DisplayMetrics $r1;
        int i0;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = $r1.<android.util.DisplayMetrics: int densityDpi>;

     label2:
        if i0 != 0 goto label3;

        i0 = 160;

        goto label3;

     label3:
        return i0;
    }

    public static int resolveOpacity(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        return i0;

     label1:
        if i0 == 0 goto label7;

        if i1 != 0 goto label2;

        goto label7;

     label2:
        if i0 == -3 goto label6;

        if i1 != -3 goto label3;

        goto label6;

     label3:
        if i0 == -2 goto label5;

        if i1 != -2 goto label4;

        goto label5;

     label4:
        return -1;

     label5:
        return -2;

     label6:
        return -3;

     label7:
        return 0;
    }

    static void rethrowAsRuntimeException(java.lang.Exception) throws java.lang.RuntimeException
    {
        java.lang.RuntimeException $r0;
        java.lang.StackTraceElement[] $r1;
        java.lang.Exception r2;

        r2 := @parameter0: java.lang.Exception;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        $r1 = newarray (java.lang.StackTraceElement)[0];

        virtualinvoke $r0.<java.lang.RuntimeException: void setStackTrace(java.lang.StackTraceElement[])>($r1);

        throw $r0;
    }

    static float scaleFromDensity(float, int, int)
    {
        float f0, $f1, $f2, $f3, $f4;
        int i0, i1;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $f1 = (float) i1;

        $f3 = $f1 * f0;

        $f2 = (float) i0;

        $f4 = $f3 / $f2;

        return $f4;
    }

    static int scaleFromDensity(int, int, int, boolean)
    {
        int i0, i1, $i2, $i3, i4, i5;
        boolean z0;
        float f0, $f1, $f2;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        if i0 == 0 goto label5;

        if i4 != i1 goto label1;

        goto label5;

     label1:
        $i2 = i0 * i1;

        $f2 = (float) $i2;

        $f1 = (float) i4;

        f0 = $f2 / $f1;

        if z0 != 0 goto label2;

        $i3 = (int) f0;

        return $i3;

     label2:
        i5 = staticinvoke <java.lang.Math: int round(float)>(f0);

        if i5 == 0 goto label3;

        return i5;

     label3:
        if i0 <= 0 goto label4;

        return 1;

     label4:
        return -1;

     label5:
        return i0;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.Resources$Theme r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.Resources$Theme;

        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public void clearColorFilter()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(null);

        return;
    }

    public void clearMutated()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return;
    }

    public final android.graphics.Rect copyBounds()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect $r1, $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = new android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        specialinvoke $r1.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r2);

        return $r1;
    }

    public final void copyBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    public abstract void draw(android.graphics.Canvas);

    public int getAlpha()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 255;
    }

    public final android.graphics.Rect getBounds()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect $r1, $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.Drawable;

        $r2 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        $r1 = <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT>;

        if $r2 != $r1 goto label1;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds> = $r4;

     label1:
        $r3 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        return $r3;
    }

    public android.graphics.drawable.Drawable$Callback getCallback()
    {
        android.graphics.drawable.Drawable r0;
        java.lang.Object $r1;
        java.lang.ref.WeakReference r2;
        android.graphics.drawable.Drawable$Callback r3;

        r0 := @this: android.graphics.drawable.Drawable;

        r2 = r0.<android.graphics.drawable.Drawable: java.lang.ref.WeakReference mCallback>;

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r3 = (android.graphics.drawable.Drawable$Callback) $r1;

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.Drawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.Drawable;

        $i0 = r0.<android.graphics.drawable.Drawable: int mChangingConfigurations>;

        return $i0;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return r0;
    }

    public android.graphics.Rect getDirtyBounds()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        return $r1;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return -1;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return -1;
    }

    public int getLayoutDirection()
    {
        android.graphics.drawable.Drawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.Drawable;

        $i0 = r0.<android.graphics.drawable.Drawable: int mLayoutDirection>;

        return $i0;
    }

    public final int getLevel()
    {
        android.graphics.drawable.Drawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.Drawable;

        $i0 = r0.<android.graphics.drawable.Drawable: int mLevel>;

        return $i0;
    }

    public int getMinimumHeight()
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if i0 <= 0 goto label1;

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    public int getMinimumWidth()
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        if i0 <= 0 goto label1;

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    public abstract int getOpacity();

    public android.graphics.Insets getOpticalInsets()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Insets $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = <android.graphics.Insets: android.graphics.Insets NONE>;

        return $r1;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Outline r1;
        android.graphics.Rect $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Outline;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Outline: void setRect(android.graphics.Rect)>($r2);

        virtualinvoke r1.<android.graphics.Outline: void setAlpha(float)>(0.0F);

        return;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        return 0;
    }

    public int[] getState()
    {
        android.graphics.drawable.Drawable r0;
        int[] $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = r0.<android.graphics.drawable.Drawable: int[] mStateSet>;

        return $r1;
    }

    public android.graphics.Region getTransparentRegion()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, null);

        return;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        int[] $r4;
        boolean $z0, $z1;
        android.content.res.Resources r5;
        android.content.res.TypedArray r6;

        r0 := @this: android.graphics.drawable.Drawable;

        r5 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.Resources$Theme;

        $r4 = <com.android.internal.R$styleable: int[] Drawable>;

        r6 = staticinvoke <android.graphics.drawable.Drawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r5, r3, r2, $r4);

        $z0 = r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        $z1 = virtualinvoke r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(0, $z0);

        r0.<android.graphics.drawable.Drawable: boolean mVisible> = $z1;

        virtualinvoke r6.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    void inflateWithAttributes(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.TypedArray, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.content.res.TypedArray r3;
        int i0;
        boolean $z0, $z1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.content.res.TypedArray;

        i0 := @parameter3: int;

        $z0 = r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i0, $z0);

        r0.<android.graphics.drawable.Drawable: boolean mVisible> = $z1;

        return;
    }

    public void invalidateSelf()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.drawable.Drawable$Callback r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>(r0);

     label1:
        return;
    }

    public boolean isAutoMirrored()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public boolean isFilterBitmap()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public boolean isProjected()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public final boolean isVisible()
    {
        android.graphics.drawable.Drawable r0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        $z0 = r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        return $z0;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        return;
    }

    public boolean onLayoutDirectionChanged(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        return 0;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        return 0;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.Drawable r0;
        int[] r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: int[];

        return 0;
    }

    public void scheduleSelf(java.lang.Runnable, long)
    {
        android.graphics.drawable.Drawable r0;
        java.lang.Runnable r1;
        long l0;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>(r0, r1, l0);

     label1:
        return;
    }

    public abstract void setAlpha(int);

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        return;
    }

    public void setBounds(int, int, int, int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.graphics.Rect r1, $r2, $r3, $r4, $r5, r6;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        r6 = r1;

        $r2 = <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT>;

        if r1 != $r2 goto label1;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r6 = $r5;

        r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds> = $r5;

     label1:
        $i4 = r6.<android.graphics.Rect: int left>;

        if $i4 != i0 goto label2;

        $i5 = r6.<android.graphics.Rect: int top>;

        if $i5 != i1 goto label2;

        $i6 = r6.<android.graphics.Rect: int right>;

        if $i6 != i2 goto label2;

        $i7 = r6.<android.graphics.Rect: int bottom>;

        if $i7 == i3 goto label4;

     label2:
        $z0 = virtualinvoke r6.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void invalidateSelf()>();

     label3:
        $r3 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke $r3.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        $r4 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>($r4);

     label4:
        return;
    }

    public void setBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public final void setCallback(android.graphics.drawable.Drawable$Callback)
    {
        android.graphics.drawable.Drawable r0;
        java.lang.ref.WeakReference $r1, r3;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r2 := @parameter0: android.graphics.drawable.Drawable$Callback;

        if r2 == null goto label1;

        $r1 = new java.lang.ref.WeakReference;

        specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        r3 = $r1;

        goto label2;

     label1:
        r3 = null;

     label2:
        r0.<android.graphics.drawable.Drawable: java.lang.ref.WeakReference mCallback> = r3;

        return;
    }

    public void setChangingConfigurations(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        r0.<android.graphics.drawable.Drawable: int mChangingConfigurations> = i0;

        return;
    }

    public void setColorFilter(int, android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;
        android.graphics.PorterDuff$Mode r1, $r5;
        android.graphics.PorterDuffColorFilter r2, $r6;
        android.graphics.ColorFilter $r3, $r4;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.PorterDuff$Mode;

        $r3 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>();

        $z0 = $r3 instanceof android.graphics.PorterDuffColorFilter;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>();

        r2 = (android.graphics.PorterDuffColorFilter) $r4;

        $i1 = virtualinvoke r2.<android.graphics.PorterDuffColorFilter: int getColor()>();

        if $i1 != i0 goto label1;

        $r5 = virtualinvoke r2.<android.graphics.PorterDuffColorFilter: android.graphics.PorterDuff$Mode getMode()>();

        if $r5 != r1 goto label1;

        return;

     label1:
        $r6 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r6.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>(i0, r1);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>($r6);

        return;
    }

    public abstract void setColorFilter(android.graphics.ColorFilter);

    public void setDither(boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        return;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        return;
    }

    public void setHotspot(float, float)
    {
        android.graphics.drawable.Drawable r0;
        float f0, f1;

        r0 := @this: android.graphics.drawable.Drawable;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, i1, i2, i3;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        return;
    }

    public final boolean setLayoutDirection(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        $i1 = r0.<android.graphics.drawable.Drawable: int mLayoutDirection>;

        if $i1 == i0 goto label1;

        r0.<android.graphics.drawable.Drawable: int mLayoutDirection> = i0;

        $z0 = virtualinvoke r0.<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>(i0);

        return $z0;

     label1:
        return 0;
    }

    public final boolean setLevel(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        $i1 = r0.<android.graphics.drawable.Drawable: int mLevel>;

        if $i1 == i0 goto label1;

        r0.<android.graphics.drawable.Drawable: int mLevel> = i0;

        $z0 = virtualinvoke r0.<android.graphics.drawable.Drawable: boolean onLevelChange(int)>(i0);

        return $z0;

     label1:
        return 0;
    }

    final void setSrcDensityOverride(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        r0.<android.graphics.drawable.Drawable: int mSrcDensityOverride> = i0;

        return;
    }

    public boolean setState(int[])
    {
        android.graphics.drawable.Drawable r0;
        int[] r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: int[];

        $r2 = r0.<android.graphics.drawable.Drawable: int[] mStateSet>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r2, r1);

        if $z0 != 0 goto label1;

        r0.<android.graphics.drawable.Drawable: int[] mStateSet> = r1;

        $z1 = virtualinvoke r0.<android.graphics.drawable.Drawable: boolean onStateChange(int[])>(r1);

        return $z1;

     label1:
        return 0;
    }

    public void setTint(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>(i0);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r1);

        return;
    }

    public void setTintBlendMode(android.graphics.BlendMode)
    {
        android.graphics.drawable.Drawable r0;
        boolean $z0;
        android.graphics.BlendMode r1;
        android.graphics.PorterDuff$Mode r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.BlendMode;

        $z0 = r0.<android.graphics.drawable.Drawable: boolean mSetBlendModeInvoked>;

        if $z0 != 0 goto label3;

        r0.<android.graphics.drawable.Drawable: boolean mSetBlendModeInvoked> = 1;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>(r1);

        if r2 == null goto label1;

        goto label2;

     label1:
        r2 = <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE>;

     label2:
        virtualinvoke r0.<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>(r2);

        r0.<android.graphics.drawable.Drawable: boolean mSetBlendModeInvoked> = 0;

     label3:
        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.ColorStateList r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable r0;
        boolean $z0;
        int $i0;
        android.graphics.PorterDuff$Mode r1;
        android.graphics.BlendMode r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $z0 = r0.<android.graphics.drawable.Drawable: boolean mSetTintModeInvoked>;

        if $z0 != 0 goto label5;

        r0.<android.graphics.drawable.Drawable: boolean mSetTintModeInvoked> = 1;

        if r1 == null goto label1;

        $i0 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.BlendMode fromValue(int)>($i0);

        goto label2;

     label1:
        r2 = null;

     label2:
        if r2 == null goto label3;

        goto label4;

     label3:
        r2 = <android.graphics.drawable.Drawable: android.graphics.BlendMode DEFAULT_BLEND_MODE>;

     label4:
        virtualinvoke r0.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>(r2);

        r0.<android.graphics.drawable.Drawable: boolean mSetTintModeInvoked> = 0;

     label5:
        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0, $z1, z2, z3;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        z2 := @parameter1: boolean;

        $z1 = r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        if $z1 == z0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z3 == 0 goto label3;

        r0.<android.graphics.drawable.Drawable: boolean mVisible> = z0;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void invalidateSelf()>();

     label3:
        return z3;
    }

    public void setXfermode(android.graphics.Xfermode)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Xfermode r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Xfermode;

        return;
    }

    public void unscheduleSelf(java.lang.Runnable)
    {
        android.graphics.drawable.Drawable r0;
        java.lang.Runnable r1;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: java.lang.Runnable;

        r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>(r0, r1);

     label1:
        return;
    }

    android.graphics.BlendModeColorFilter updateBlendModeFilter(android.graphics.BlendModeColorFilter, android.content.res.ColorStateList, android.graphics.BlendMode)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.BlendModeColorFilter r1, $r6;
        android.content.res.ColorStateList r2;
        android.graphics.BlendMode r3, $r5;
        int i0, $i1;
        int[] $r4;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.BlendModeColorFilter;

        r2 := @parameter1: android.content.res.ColorStateList;

        r3 := @parameter2: android.graphics.BlendMode;

        if r2 == null goto label4;

        if r3 != null goto label1;

        goto label4;

     label1:
        $r4 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        i0 = virtualinvoke r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r4, 0);

        if r1 == null goto label3;

        $i1 = virtualinvoke r1.<android.graphics.BlendModeColorFilter: int getColor()>();

        if $i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<android.graphics.BlendModeColorFilter: android.graphics.BlendMode getMode()>();

        if $r5 == r3 goto label2;

        goto label3;

     label2:
        return r1;

     label3:
        $r6 = new android.graphics.BlendModeColorFilter;

        specialinvoke $r6.<android.graphics.BlendModeColorFilter: void <init>(int,android.graphics.BlendMode)>(i0, r3);

        return $r6;

     label4:
        return null;
    }

    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter, android.content.res.ColorStateList, android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.PorterDuffColorFilter r1, $r6;
        android.content.res.ColorStateList r2;
        android.graphics.PorterDuff$Mode r3, $r5;
        int i0, $i1;
        int[] $r4;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.PorterDuffColorFilter;

        r2 := @parameter1: android.content.res.ColorStateList;

        r3 := @parameter2: android.graphics.PorterDuff$Mode;

        if r2 == null goto label4;

        if r3 != null goto label1;

        goto label4;

     label1:
        $r4 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        i0 = virtualinvoke r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r4, 0);

        if r1 == null goto label3;

        $i1 = virtualinvoke r1.<android.graphics.PorterDuffColorFilter: int getColor()>();

        if $i1 != i0 goto label3;

        $r5 = virtualinvoke r1.<android.graphics.PorterDuffColorFilter: android.graphics.PorterDuff$Mode getMode()>();

        if $r5 == r3 goto label2;

        goto label3;

     label2:
        return r1;

     label3:
        $r6 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r6.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>(i0, r3);

        return $r6;

     label4:
        return null;
    }
}
