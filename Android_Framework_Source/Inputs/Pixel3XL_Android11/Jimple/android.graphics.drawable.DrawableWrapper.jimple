public abstract class android.graphics.drawable.DrawableWrapper extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback
{
    private android.graphics.drawable.Drawable mDrawable;
    private boolean mMutated;
    private android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState;

    public void <init>(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState> = null;

        virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: void setDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    void <init>(android.graphics.drawable.DrawableWrapper$DrawableWrapperState, android.content.res.Resources)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r1;
        android.content.res.Resources r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.drawable.DrawableWrapper$DrawableWrapperState;

        r2 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState> = r1;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void updateLocalState(android.content.res.Resources)>(r2);

        return;
    }

    private void inflateChildDrawable(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        int i0, i1, $i2, $i3;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState $r5;
        android.graphics.drawable.Drawable r6;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        r6 = null;

        i0 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        i1 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label3;

        if i1 != 3 goto label2;

        $i3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i3 <= i0 goto label3;

     label2:
        if i1 != 2 goto label1;

        $r5 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        $i2 = $r5.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int mSrcDensityOverride>;

        r6 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInnerForDensity(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,android.content.res.Resources$Theme)>(r1, r2, r3, $i2, r4);

        goto label1;

     label3:
        if r6 == null goto label4;

        virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: void setDrawable(android.graphics.drawable.Drawable)>(r6);

     label4:
        return;
    }

    private void updateLocalState(android.content.res.Resources)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.content.res.Resources r1;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r2, $r4;
        android.graphics.drawable.Drawable$ConstantState $r3, $r5;
        android.graphics.drawable.Drawable $r6;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.content.res.Resources;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r2 == null goto label1;

        $r3 = r2.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: android.graphics.drawable.Drawable$ConstantState mDrawableState>;

        if $r3 == null goto label1;

        $r4 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        $r5 = $r4.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: android.graphics.drawable.Drawable$ConstantState mDrawableState>;

        $r6 = virtualinvoke $r5.<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>(r1);

        virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: void setDrawable(android.graphics.drawable.Drawable)>($r6);

     label1:
        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r2;
        int $i0, $i1, $i2;
        int[] $r3;
        boolean $z0;
        android.graphics.drawable.Drawable $r5;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r2 != null goto label1;

        return;

     label1:
        $i0 = r2.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int mChangingConfigurations>;

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r2.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int mChangingConfigurations> = $i2;

        $r3 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        staticinvoke <android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int[] access$002(android.graphics.drawable.DrawableWrapper$DrawableWrapperState,int[])>(r2, $r3);

        $z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>(0);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(0);

        virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: void setDrawable(android.graphics.drawable.Drawable)>($r5);

     label2:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int[] $r3, $r4, $r5;
        boolean $z0;
        android.graphics.drawable.Drawable $r6, r8;
        android.content.res.Resources$Theme r7;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r9;
        int i0;
        android.content.res.TypedArray r10;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r7 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r7);

        r8 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r8 == null goto label1;

        $z0 = virtualinvoke r8.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r6.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r7);

     label1:
        r9 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r9 != null goto label2;

        return;

     label2:
        $r1 = virtualinvoke r7.<android.content.res.Resources$Theme: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        if i0 != 0 goto label3;

        i0 = 160;

        goto label3;

     label3:
        virtualinvoke r9.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: void setDensity(int)>(i0);

        $r3 = staticinvoke <android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int[] access$000(android.graphics.drawable.DrawableWrapper$DrawableWrapperState)>(r9);

        if $r3 == null goto label4;

        $r4 = staticinvoke <android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int[] access$000(android.graphics.drawable.DrawableWrapper$DrawableWrapperState)>(r9);

        $r5 = <com.android.internal.R$styleable: int[] DrawableWrapper>;

        r10 = virtualinvoke r7.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r4, $r5);

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void updateStateFromTypedArray(android.content.res.TypedArray)>(r10);

        virtualinvoke r10.<android.content.res.TypedArray: void recycle()>();

     label4:
        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: boolean canApplyTheme()>();

        if $z1 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public void clearMutated()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        specialinvoke r0.<android.graphics.drawable.Drawable: void clearMutated()>();

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void clearMutated()>();

     label1:
        r0.<android.graphics.drawable.DrawableWrapper: boolean mMutated> = 0;

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label1:
        return;
    }

    public int getAlpha()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        int i0;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getAlpha()>();

        goto label2;

     label1:
        i0 = 255;

     label2:
        return i0;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.DrawableWrapper r0;
        int i0, $i1, $i2, $i3, i4;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        i0 = specialinvoke r0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r1 == null goto label1;

        i4 = virtualinvoke r1.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int getChangingConfigurations()>();

        goto label2;

     label1:
        i4 = 0;

     label2:
        $i1 = i0 | i4;

        $r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $i2 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $i3 = $i1 | $i2;

        return $i3;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.ColorFilter $r2, $r3;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable getDrawable()>();

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>();

        return $r3;

     label1:
        $r2 = specialinvoke r0.<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>();

        return $r2;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r1, $r2, $r3;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: boolean canConstantState()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        $i0 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: int getChangingConfigurations()>();

        $r2.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int mChangingConfigurations> = $i0;

        $r3 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        return $r3;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getDrawable()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        $r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        return $r1;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.Rect r1, $r3;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>(r1);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

     label2:
        return;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        int i0;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        int i0;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    public int getOpacity()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        int i0;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        goto label2;

     label1:
        i0 = -2;

     label2:
        return i0;
    }

    public android.graphics.Insets getOpticalInsets()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.Insets r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>();

        goto label2;

     label1:
        r2 = <android.graphics.Insets: android.graphics.Insets NONE>;

     label2:
        return r2;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.Outline r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.Outline;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>(r1);

     label2:
        return;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.Rect r1;
        android.graphics.drawable.Drawable r2;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.util.DisplayMetrics $r5;
        int $i0, i1;
        int[] $r6;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r7;
        android.content.res.TypedArray r8;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        r7 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r7 != null goto label1;

        return;

     label1:
        $r5 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i1 = $r5.<android.util.DisplayMetrics: int densityDpi>;

        if i1 != 0 goto label2;

        i1 = 160;

        goto label2;

     label2:
        virtualinvoke r7.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: void setDensity(int)>(i1);

        $i0 = r0.<android.graphics.drawable.DrawableWrapper: int mSrcDensityOverride>;

        r7.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: int mSrcDensityOverride> = $i0;

        $r6 = <com.android.internal.R$styleable: int[] DrawableWrapper>;

        r8 = staticinvoke <android.graphics.drawable.DrawableWrapper: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r6);

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void updateStateFromTypedArray(android.content.res.TypedArray)>(r8);

        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void inflateChildDrawable(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>(r0);

     label1:
        return;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label1:
        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r1, $r3;
        boolean $z0;
        android.graphics.drawable.Drawable $r2, r5, r6;
        android.graphics.drawable.Drawable$ConstantState r7;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        $z0 = r0.<android.graphics.drawable.DrawableWrapper: boolean mMutated>;

        if $z0 != 0 goto label5;

        $r2 = specialinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if $r2 != r0 goto label5;

        $r3 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mutateConstantState()>();

        r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState> = $r3;

        r5 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r5 == null goto label1;

        virtualinvoke r5.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

     label1:
        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r1 == null goto label4;

        r6 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r6 == null goto label2;

        r7 = virtualinvoke r6.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        goto label3;

     label2:
        r7 = null;

     label3:
        r1.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: android.graphics.drawable.Drawable$ConstantState mDrawableState> = r7;

     label4:
        r0.<android.graphics.drawable.DrawableWrapper: boolean mMutated> = 1;

     label5:
        return r0;
    }

    android.graphics.drawable.DrawableWrapper$DrawableWrapperState mutateConstantState()
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState $r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        $r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        return $r1;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.Rect r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r1);

     label1:
        return;
    }

    public boolean onLayoutDirectionChanged(int)
    {
        android.graphics.drawable.DrawableWrapper r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        i0 := @parameter0: int;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i0);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.DrawableWrapper r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        i0 := @parameter0: int;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>(i0);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.DrawableWrapper r0;
        int[] r1;
        android.graphics.drawable.Drawable r2, $r3;
        boolean z0, $z1;
        android.graphics.Rect $r4;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: int[];

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        if z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.Rect getBounds()>();

        virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: void onBoundsChange(android.graphics.Rect)>($r4);

     label1:
        return z0;

     label2:
        return 0;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        android.graphics.drawable.DrawableWrapper r0;
        java.lang.Runnable r1;
        long l0;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.Drawable$Callback r3;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r2 := @parameter0: android.graphics.drawable.Drawable;

        r1 := @parameter1: java.lang.Runnable;

        l0 := @parameter2: long;

        r3 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>(r0, r1, l0);

     label1:
        return;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.DrawableWrapper r0;
        int i0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        i0 := @parameter0: int;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0);

     label1:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.ColorFilter r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.ColorFilter;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1);

     label1:
        return;
    }

    public void setDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.drawable.Drawable r1, r5;
        boolean $z0;
        int[] $r2;
        int $i0, $i1;
        android.graphics.Rect $r3;
        android.graphics.drawable.Drawable$ConstantState $r4;
        android.graphics.drawable.DrawableWrapper$DrawableWrapperState r6;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r5 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r5 == null goto label1;

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label1:
        r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable> = r1;

        if r1 == null goto label2;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $z0 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: boolean isVisible()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z0, 1);

        $r2 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: int[] getState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r2);

        $i0 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: int getLevel()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>($i0);

        $r3 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r3);

        $i1 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: int getLayoutDirection()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>($i1);

        r6 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.DrawableWrapper$DrawableWrapperState mState>;

        if r6 == null goto label2;

        $r4 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        r6.<android.graphics.drawable.DrawableWrapper$DrawableWrapperState: android.graphics.drawable.Drawable$ConstantState mDrawableState> = $r4;

     label2:
        virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: void invalidateSelf()>();

        return;
    }

    public void setHotspot(float, float)
    {
        android.graphics.drawable.DrawableWrapper r0;
        float f0, f1;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        android.graphics.drawable.DrawableWrapper r0;
        int i0, i1, i2, i3;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>(i0, i1, i2, i3);

     label1:
        return;
    }

    public void setTintBlendMode(android.graphics.BlendMode)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.BlendMode r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.BlendMode;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>(r1);

     label1:
        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.content.res.ColorStateList;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>(r1);

     label1:
        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.DrawableWrapper r0;
        boolean z0, z1, z2, $z3, z4, $z5;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        r1 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r1 == null goto label1;

        $z3 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        if $z3 == 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        $z5 = z2 | z4;

        return $z5;
    }

    public void setXfermode(android.graphics.Xfermode)
    {
        android.graphics.drawable.DrawableWrapper r0;
        android.graphics.Xfermode r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r1 := @parameter0: android.graphics.Xfermode;

        r2 = r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setXfermode(android.graphics.Xfermode)>(r1);

     label1:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.graphics.drawable.DrawableWrapper r0;
        java.lang.Runnable r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.drawable.Drawable$Callback r3;

        r0 := @this: android.graphics.drawable.DrawableWrapper;

        r2 := @parameter0: android.graphics.drawable.Drawable;

        r1 := @parameter1: java.lang.Runnable;

        r3 = virtualinvoke r0.<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>(r0, r1);

     label1:
        return;
    }
}
