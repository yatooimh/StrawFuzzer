abstract class android.graphics.drawable.RippleComponent extends java.lang.Object
{
    protected final android.graphics.Rect mBounds;
    protected float mDensityScale;
    private boolean mHasMaxRadius;
    protected final android.graphics.drawable.RippleDrawable mOwner;
    protected float mTargetRadius;

    public void <init>(android.graphics.drawable.RippleDrawable, android.graphics.Rect)
    {
        android.graphics.drawable.RippleComponent r0;
        android.graphics.drawable.RippleDrawable r1;
        android.graphics.Rect r2;

        r0 := @this: android.graphics.drawable.RippleComponent;

        r1 := @parameter0: android.graphics.drawable.RippleDrawable;

        r2 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.drawable.RippleComponent: android.graphics.drawable.RippleDrawable mOwner> = r1;

        r0.<android.graphics.drawable.RippleComponent: android.graphics.Rect mBounds> = r2;

        return;
    }

    private static float getTargetRadius(android.graphics.Rect)
    {
        android.graphics.Rect r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i0, $i1;
        double $d0, $d1;

        r0 := @parameter0: android.graphics.Rect;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        f0 = $f2 / 2.0F;

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f3 = (float) $i1;

        f1 = $f3 / 2.0F;

        $f5 = f0 * f0;

        $f4 = f1 * f1;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f7 = (float) $d1;

        return $f7;
    }

    public void getBounds(android.graphics.Rect)
    {
        android.graphics.drawable.RippleComponent r0;
        android.graphics.Rect r1;
        int i0, $i1, $i2;
        float $f0;
        double $d0, $d1;

        r0 := @this: android.graphics.drawable.RippleComponent;

        r1 := @parameter0: android.graphics.Rect;

        $f0 = r0.<android.graphics.drawable.RippleComponent: float mTargetRadius>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d1;

        $i2 = neg i0;

        $i1 = neg i0;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i2, $i1, i0, i0);

        return;
    }

    protected final void invalidateSelf()
    {
        android.graphics.drawable.RippleComponent r0;
        android.graphics.drawable.RippleDrawable $r1;

        r0 := @this: android.graphics.drawable.RippleComponent;

        $r1 = r0.<android.graphics.drawable.RippleComponent: android.graphics.drawable.RippleDrawable mOwner>;

        virtualinvoke $r1.<android.graphics.drawable.RippleDrawable: void invalidateSelf(boolean)>(0);

        return;
    }

    public void onBoundsChange()
    {
        android.graphics.drawable.RippleComponent r0;
        float f0;
        boolean $z0;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.RippleComponent;

        $z0 = r0.<android.graphics.drawable.RippleComponent: boolean mHasMaxRadius>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.RippleComponent: android.graphics.Rect mBounds>;

        f0 = staticinvoke <android.graphics.drawable.RippleComponent: float getTargetRadius(android.graphics.Rect)>($r1);

        r0.<android.graphics.drawable.RippleComponent: float mTargetRadius> = f0;

        virtualinvoke r0.<android.graphics.drawable.RippleComponent: void onTargetRadiusChanged(float)>(f0);

     label1:
        return;
    }

    protected final void onHotspotBoundsChanged()
    {
        android.graphics.drawable.RippleComponent r0;
        float f0;
        boolean $z0;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.RippleComponent;

        $z0 = r0.<android.graphics.drawable.RippleComponent: boolean mHasMaxRadius>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.RippleComponent: android.graphics.Rect mBounds>;

        f0 = staticinvoke <android.graphics.drawable.RippleComponent: float getTargetRadius(android.graphics.Rect)>($r1);

        r0.<android.graphics.drawable.RippleComponent: float mTargetRadius> = f0;

        virtualinvoke r0.<android.graphics.drawable.RippleComponent: void onTargetRadiusChanged(float)>(f0);

     label1:
        return;
    }

    protected void onTargetRadiusChanged(float)
    {
        android.graphics.drawable.RippleComponent r0;
        float f0;

        r0 := @this: android.graphics.drawable.RippleComponent;

        f0 := @parameter0: float;

        return;
    }

    public final void setup(float, int)
    {
        android.graphics.drawable.RippleComponent r0;
        float f0, $f1, $f2, $f3, $f4;
        int i0;
        byte $b1;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.RippleComponent;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $b1 = f0 cmpl 0.0F;

        if $b1 < 0 goto label1;

        r0.<android.graphics.drawable.RippleComponent: boolean mHasMaxRadius> = 1;

        r0.<android.graphics.drawable.RippleComponent: float mTargetRadius> = f0;

        goto label2;

     label1:
        $r1 = r0.<android.graphics.drawable.RippleComponent: android.graphics.Rect mBounds>;

        $f1 = staticinvoke <android.graphics.drawable.RippleComponent: float getTargetRadius(android.graphics.Rect)>($r1);

        r0.<android.graphics.drawable.RippleComponent: float mTargetRadius> = $f1;

     label2:
        $f2 = (float) i0;

        $f3 = $f2 * 0.00625F;

        r0.<android.graphics.drawable.RippleComponent: float mDensityScale> = $f3;

        $f4 = r0.<android.graphics.drawable.RippleComponent: float mTargetRadius>;

        virtualinvoke r0.<android.graphics.drawable.RippleComponent: void onTargetRadiusChanged(float)>($f4);

        return;
    }
}
