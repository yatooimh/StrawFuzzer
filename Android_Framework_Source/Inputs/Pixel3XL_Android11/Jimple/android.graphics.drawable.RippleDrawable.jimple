public class android.graphics.drawable.RippleDrawable extends android.graphics.drawable.LayerDrawable
{
    private static final int MASK_CONTENT;
    private static final int MASK_EXPLICIT;
    private static final int MASK_NONE;
    private static final int MASK_UNKNOWN;
    private static final int MAX_RIPPLES;
    public static final int RADIUS_AUTO;
    private android.graphics.drawable.RippleBackground mBackground;
    private int mDensity;
    private final android.graphics.Rect mDirtyBounds;
    private final android.graphics.Rect mDrawingBounds;
    private android.graphics.drawable.RippleForeground[] mExitingRipples;
    private int mExitingRipplesCount;
    private boolean mForceSoftware;
    private boolean mHasPending;
    private boolean mHasValidMask;
    private final android.graphics.Rect mHotspotBounds;
    private android.graphics.drawable.Drawable mMask;
    private android.graphics.Bitmap mMaskBuffer;
    private android.graphics.Canvas mMaskCanvas;
    private android.graphics.PorterDuffColorFilter mMaskColorFilter;
    private android.graphics.Matrix mMaskMatrix;
    private android.graphics.BitmapShader mMaskShader;
    private boolean mOverrideBounds;
    private float mPendingX;
    private float mPendingY;
    private android.graphics.drawable.RippleForeground mRipple;
    private boolean mRippleActive;
    private android.graphics.Paint mRipplePaint;
    private android.graphics.drawable.RippleDrawable$RippleState mState;
    private final android.graphics.Rect mTempRect;

    void <init>()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r1.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(null, null, null);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void <init>(android.graphics.drawable.RippleDrawable$RippleState,android.content.res.Resources)>($r1, null);

        return;
    }

    public void <init>(android.content.res.ColorStateList, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.Drawable r2, r3;
        android.graphics.drawable.RippleDrawable$RippleState $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        r3 := @parameter2: android.graphics.drawable.Drawable;

        $r4 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r4.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(null, null, null);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void <init>(android.graphics.drawable.RippleDrawable$RippleState,android.content.res.Resources)>($r4, null);

        if r1 == null goto label3;

        if r2 == null goto label1;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$ChildDrawable addLayer(android.graphics.drawable.Drawable,int[],int,int,int,int,int)>(r2, null, 0, 0, 0, 0, 0);

     label1:
        if r3 == null goto label2;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$ChildDrawable addLayer(android.graphics.drawable.Drawable,int[],int,int,int,int,int)>(r3, null, 16908334, 0, 0, 0, 0);

     label2:
        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void setColor(android.content.res.ColorStateList)>(r1);

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void ensurePadding()>();

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void refreshPadding()>();

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateLocalState()>();

        return;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RippleDrawable requires a non-null color");

        throw $r5;
    }

    private void <init>(android.graphics.drawable.RippleDrawable$RippleState, android.content.res.Resources)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.Resources r1;
        android.graphics.Rect $r2, $r3, $r4, $r5;
        android.graphics.drawable.RippleDrawable$RippleState $r6, $r7, $r8, r9;
        int $i0, $i1, $i2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r9 := @parameter0: android.graphics.drawable.RippleDrawable$RippleState;

        r1 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void <init>()>();

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mTempRect> = $r2;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds> = $r3;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDrawingBounds> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDirtyBounds> = $r5;

        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = 0;

        $r6 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r6.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(r9, r0, r1);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState> = $r6;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState> = $r6;

        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i0 = $r7.<android.graphics.drawable.RippleDrawable$RippleState: int mDensity>;

        $i1 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>(r1, $i0);

        r0.<android.graphics.drawable.RippleDrawable: int mDensity> = $i1;

        $r8 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i2 = $r8.<android.graphics.drawable.RippleDrawable$RippleState: int mNumChildren>;

        if $i2 <= 0 goto label1;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void ensurePadding()>();

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void refreshPadding()>();

     label1:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateLocalState()>();

        return;
    }

    void <init>(android.graphics.drawable.RippleDrawable$RippleState, android.content.res.Resources, android.graphics.drawable.RippleDrawable$1)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.RippleDrawable$1 r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.RippleDrawable$RippleState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.graphics.drawable.RippleDrawable$1;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void <init>(android.graphics.drawable.RippleDrawable$RippleState,android.content.res.Resources)>(r1, r2);

        return;
    }

    private void cancelExitingRipples()
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, i1;
        android.graphics.drawable.RippleForeground[] r1;
        android.graphics.drawable.RippleForeground $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.graphics.drawable.RippleForeground: void end()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        if r1 == null goto label3;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>(r1, 0, i0, null);

     label3:
        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = 0;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf(boolean)>(0);

        return;
    }

    private void clearHotspots()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleForeground r1;
        android.graphics.drawable.RippleBackground r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.RippleForeground: void end()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple> = null;

        r0.<android.graphics.drawable.RippleDrawable: boolean mRippleActive> = 0;

     label1:
        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.RippleBackground: void setState(boolean,boolean,boolean)>(0, 0, 0);

     label2:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void cancelExitingRipples()>();

        return;
    }

    private void drawBackgroundAndRipples(android.graphics.Canvas)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.RippleForeground r2, $r4;
        int i0, i1;
        float f0, f1, $f2, $f3;
        android.graphics.Paint r3;
        boolean $z0, $z1;
        android.graphics.drawable.RippleBackground r5;
        android.graphics.Rect $r6, $r7;
        android.graphics.drawable.RippleForeground[] r8;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        if r2 != null goto label2;

        if i0 > 0 goto label2;

        if r5 == null goto label1;

        $z1 = virtualinvoke r5.<android.graphics.drawable.RippleBackground: boolean isVisible()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f0 = virtualinvoke $r6.<android.graphics.Rect: float exactCenterX()>();

        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f1 = virtualinvoke $r7.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(f0, f1);

        r3 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint getRipplePaint()>();

        if r5 == null goto label3;

        $z0 = virtualinvoke r5.<android.graphics.drawable.RippleBackground: boolean isVisible()>();

        if $z0 == 0 goto label3;

        virtualinvoke r5.<android.graphics.drawable.RippleBackground: void draw(android.graphics.Canvas,android.graphics.Paint)>(r1, r3);

     label3:
        if i0 <= 0 goto label5;

        r8 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r4 = r8[i1];

        virtualinvoke $r4.<android.graphics.drawable.RippleForeground: void draw(android.graphics.Canvas,android.graphics.Paint)>(r1, r3);

        i1 = i1 + 1;

        goto label4;

     label5:
        if r2 == null goto label6;

        virtualinvoke r2.<android.graphics.drawable.RippleForeground: void draw(android.graphics.Canvas,android.graphics.Paint)>(r1, r3);

     label6:
        $f3 = neg f0;

        $f2 = neg f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f3, $f2);

        return;
    }

    private void drawContent(android.graphics.Canvas)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.LayerDrawable$ChildDrawable[] r2;
        int i0, $i1, i2;
        android.graphics.drawable.LayerDrawable$LayerState $r3, $r4;
        android.graphics.drawable.LayerDrawable$ChildDrawable $r5, $r6;
        android.graphics.drawable.Drawable $r7;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        r2 = $r3.<android.graphics.drawable.LayerDrawable$LayerState: android.graphics.drawable.LayerDrawable$ChildDrawable[] mChildren>;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        i0 = $r4.<android.graphics.drawable.LayerDrawable$LayerState: int mNumChildren>;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r5 = r2[i2];

        $i1 = $r5.<android.graphics.drawable.LayerDrawable$ChildDrawable: int mId>;

        if $i1 == 16908334 goto label2;

        $r6 = r2[i2];

        $r7 = $r6.<android.graphics.drawable.LayerDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r7.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void drawMask(android.graphics.Canvas)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    private int getMaskType()
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, $i1, $i2, $i3, i4;
        android.graphics.drawable.RippleForeground $r1;
        android.graphics.drawable.LayerDrawable$LayerState $r2, $r3;
        android.graphics.drawable.LayerDrawable$ChildDrawable $r4;
        android.graphics.drawable.Drawable $r5, r7;
        boolean $z0;
        android.graphics.drawable.RippleBackground r6;
        android.graphics.drawable.LayerDrawable$ChildDrawable[] r8;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if $r1 != null goto label2;

        $i3 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        if $i3 > 0 goto label2;

        r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<android.graphics.drawable.RippleBackground: boolean isVisible()>();

        if $z0 != 0 goto label2;

     label1:
        return -1;

     label2:
        r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask>;

        if r7 == null goto label4;

        $i2 = virtualinvoke r7.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i2 != -1 goto label3;

        return 0;

     label3:
        return 2;

     label4:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        r8 = $r2.<android.graphics.drawable.LayerDrawable$LayerState: android.graphics.drawable.LayerDrawable$ChildDrawable[] mChildren>;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        i0 = $r3.<android.graphics.drawable.LayerDrawable$LayerState: int mNumChildren>;

        i4 = 0;

     label5:
        if i4 >= i0 goto label7;

        $r4 = r8[i4];

        $r5 = $r4.<android.graphics.drawable.LayerDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        $i1 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i1 == -1 goto label6;

        return 1;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        return 0;
    }

    private boolean isBounded()
    {
        android.graphics.drawable.RippleDrawable r0;
        int $i0;
        boolean z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $i0 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: int getNumberOfLayers()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void onHotspotBoundsChanged()
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, i1;
        android.graphics.drawable.RippleForeground $r1, r3;
        android.graphics.drawable.RippleForeground[] r2;
        android.graphics.drawable.RippleBackground r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r2[i1];

        virtualinvoke $r1.<android.graphics.drawable.RippleForeground: void onHotspotBoundsChanged()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if r3 == null goto label3;

        virtualinvoke r3.<android.graphics.drawable.RippleForeground: void onHotspotBoundsChanged()>();

     label3:
        r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r4 == null goto label4;

        virtualinvoke r4.<android.graphics.drawable.RippleBackground: void onHotspotBoundsChanged()>();

     label4:
        return;
    }

    private void pruneRipples()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleForeground[] r1;
        int i0, i1, i2, i3, i4;
        android.graphics.drawable.RippleForeground $r2, $r3;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i1 = 0;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i3 = i1;

        $r2 = r1[i2];

        $z0 = virtualinvoke $r2.<android.graphics.drawable.RippleForeground: boolean hasFinishedExit()>();

        if $z0 != 0 goto label2;

        $r3 = r1[i2];

        r1[i1] = $r3;

        i3 = i1 + 1;

     label2:
        i2 = i2 + 1;

        i1 = i3;

        goto label1;

     label3:
        i4 = i1;

     label4:
        if i4 >= i0 goto label5;

        r1[i4] = null;

        i4 = i4 + 1;

        goto label4;

     label5:
        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = i1;

        return;
    }

    private void setBackgroundActive(boolean, boolean, boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, z1, z2, $z3;
        android.graphics.drawable.RippleBackground $r1, $r2, r6;
        android.graphics.Rect $r3;
        android.graphics.drawable.RippleDrawable$RippleState $r4;
        int $i0, $i1;
        float $f0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r1 != null goto label2;

        if z0 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $r2 = new android.graphics.drawable.RippleBackground;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $z3 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: boolean isBounded()>();

        specialinvoke $r2.<android.graphics.drawable.RippleBackground: void <init>(android.graphics.drawable.RippleDrawable,android.graphics.Rect,boolean)>(r0, $r3, $z3);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground> = $r2;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i0 = $r4.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        $f0 = (float) $i0;

        $i1 = r0.<android.graphics.drawable.RippleDrawable: int mDensity>;

        virtualinvoke $r2.<android.graphics.drawable.RippleBackground: void setup(float,int)>($f0, $i1);

     label2:
        r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r6 == null goto label3;

        virtualinvoke r6.<android.graphics.drawable.RippleBackground: void setState(boolean,boolean,boolean)>(z1, z0, z2);

     label3:
        return;
    }

    private void setRippleActive(boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, $z1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.graphics.drawable.RippleDrawable: boolean mRippleActive>;

        if $z1 == z0 goto label2;

        r0.<android.graphics.drawable.RippleDrawable: boolean mRippleActive> = z0;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryRippleEnter()>();

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryRippleExit()>();

     label2:
        return;
    }

    private void tryRippleEnter()
    {
        android.graphics.drawable.RippleDrawable r0;
        int $i0, $i1, $i2;
        android.graphics.drawable.RippleForeground $r1, $r4, $r6, $r8;
        boolean $z0, $z1;
        android.graphics.Rect $r2, $r3, $r5;
        float f0, f1, $f2;
        android.graphics.drawable.RippleDrawable$RippleState $r7;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        if $i0 < 10 goto label1;

        return;

     label1:
        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if $r1 != null goto label4;

        $z0 = r0.<android.graphics.drawable.RippleDrawable: boolean mHasPending>;

        if $z0 == 0 goto label2;

        r0.<android.graphics.drawable.RippleDrawable: boolean mHasPending> = 0;

        f0 = r0.<android.graphics.drawable.RippleDrawable: float mPendingX>;

        f1 = r0.<android.graphics.drawable.RippleDrawable: float mPendingY>;

        goto label3;

     label2:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f0 = virtualinvoke $r2.<android.graphics.Rect: float exactCenterX()>();

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f1 = virtualinvoke $r3.<android.graphics.Rect: float exactCenterY()>();

     label3:
        $r4 = new android.graphics.drawable.RippleForeground;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $z1 = r0.<android.graphics.drawable.RippleDrawable: boolean mForceSoftware>;

        specialinvoke $r4.<android.graphics.drawable.RippleForeground: void <init>(android.graphics.drawable.RippleDrawable,android.graphics.Rect,float,float,boolean)>(r0, $r5, f0, f1, $z1);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple> = $r4;

     label4:
        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i1 = $r7.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        $f2 = (float) $i1;

        $i2 = r0.<android.graphics.drawable.RippleDrawable: int mDensity>;

        virtualinvoke $r6.<android.graphics.drawable.RippleForeground: void setup(float,int)>($f2, $i2);

        $r8 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        virtualinvoke $r8.<android.graphics.drawable.RippleForeground: void enter()>();

        return;
    }

    private void tryRippleExit()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleForeground[] r1, $r4, $r5;
        int i0, $i1;
        android.graphics.drawable.RippleForeground r2, $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if $r3 == null goto label2;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        if $r4 != null goto label1;

        $r5 = newarray (android.graphics.drawable.RippleForeground)[10];

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples> = $r5;

     label1:
        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        $i1 = i0 + 1;

        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = $i1;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        r1[i0] = r2;

        virtualinvoke r2.<android.graphics.drawable.RippleForeground: void exit()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple> = null;

     label2:
        return;
    }

    private void updateLocalState()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>(16908334);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask> = $r1;

        return;
    }

    private void updateMaskShaderIfNeeded()
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1;
        android.graphics.Bitmap$Config $r1;
        android.graphics.BitmapShader $r2;
        android.graphics.Shader$TileMode $r3, $r4;
        android.graphics.Canvas $r5, $r8, $r9, $r10, $r21;
        android.graphics.Bitmap $r6, $r14, $r15, r17, r18, r19, r22;
        android.graphics.PorterDuffColorFilter $r7, $r11;
        float $f0, $f1, $f2, $f3;
        android.graphics.PorterDuff$Mode $r12;
        android.graphics.Matrix $r13, r20;
        android.graphics.Rect r16;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $z0 = r0.<android.graphics.drawable.RippleDrawable: boolean mHasValidMask>;

        if $z0 == 0 goto label01;

        return;

     label01:
        i0 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: int getMaskType()>();

        if i0 != -1 goto label02;

        return;

     label02:
        r0.<android.graphics.drawable.RippleDrawable: boolean mHasValidMask> = 1;

        r16 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect getBounds()>();

        if i0 == 0 goto label13;

        $z1 = virtualinvoke r16.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        goto label13;

     label03:
        r17 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer>;

        if r17 == null goto label05;

        $i7 = virtualinvoke r17.<android.graphics.Bitmap: int getWidth()>();

        $i8 = virtualinvoke r16.<android.graphics.Rect: int width()>();

        if $i7 != $i8 goto label05;

        $r14 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer>;

        $i9 = virtualinvoke $r14.<android.graphics.Bitmap: int getHeight()>();

        $i10 = virtualinvoke r16.<android.graphics.Rect: int height()>();

        if $i9 == $i10 goto label04;

        goto label05;

     label04:
        $r15 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer>;

        virtualinvoke $r15.<android.graphics.Bitmap: void eraseColor(int)>(0);

        goto label07;

     label05:
        r18 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer>;

        if r18 == null goto label06;

        virtualinvoke r18.<android.graphics.Bitmap: void recycle()>();

     label06:
        $i3 = virtualinvoke r16.<android.graphics.Rect: int width()>();

        $i4 = virtualinvoke r16.<android.graphics.Rect: int height()>();

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        r19 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i3, $i4, $r1);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer> = r19;

        $r2 = new android.graphics.BitmapShader;

        $r4 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        $r3 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r2.<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r19, $r4, $r3);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.BitmapShader mMaskShader> = $r2;

        $r5 = new android.graphics.Canvas;

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer>;

        specialinvoke $r5.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r6);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Canvas mMaskCanvas> = $r5;

     label07:
        r20 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Matrix mMaskMatrix>;

        if r20 != null goto label08;

        $r13 = new android.graphics.Matrix;

        specialinvoke $r13.<android.graphics.Matrix: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Matrix mMaskMatrix> = $r13;

        goto label09;

     label08:
        virtualinvoke r20.<android.graphics.Matrix: void reset()>();

     label09:
        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffColorFilter mMaskColorFilter>;

        if $r7 != null goto label10;

        $r11 = new android.graphics.PorterDuffColorFilter;

        $r12 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        specialinvoke $r11.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>(0, $r12);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffColorFilter mMaskColorFilter> = $r11;

     label10:
        i1 = r16.<android.graphics.Rect: int left>;

        i2 = r16.<android.graphics.Rect: int top>;

        $r8 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Canvas mMaskCanvas>;

        $i5 = neg i1;

        $f1 = (float) $i5;

        $i6 = neg i2;

        $f0 = (float) $i6;

        virtualinvoke $r8.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        if i0 != 2 goto label11;

        $r10 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Canvas mMaskCanvas>;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void drawMask(android.graphics.Canvas)>($r10);

        goto label12;

     label11:
        if i0 != 1 goto label12;

        $r9 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Canvas mMaskCanvas>;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void drawContent(android.graphics.Canvas)>($r9);

     label12:
        $r21 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Canvas mMaskCanvas>;

        $f2 = (float) i1;

        $f3 = (float) i2;

        virtualinvoke $r21.<android.graphics.Canvas: void translate(float,float)>($f2, $f3);

        return;

     label13:
        r22 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer>;

        if r22 == null goto label14;

        virtualinvoke r22.<android.graphics.Bitmap: void recycle()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Bitmap mMaskBuffer> = null;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.BitmapShader mMaskShader> = null;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Canvas mMaskCanvas> = null;

     label14:
        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Matrix mMaskMatrix> = null;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffColorFilter mMaskColorFilter> = null;

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.TypedArray r1;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r2;
        android.graphics.drawable.RippleDrawable$RippleState $r3, r4, r6;
        android.content.res.ColorStateList r5;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i0 = r4.<android.graphics.drawable.RippleDrawable$RippleState: int mChangingConfigurations>;

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r4.<android.graphics.drawable.RippleDrawable$RippleState: int mChangingConfigurations> = $i2;

        $r2 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r4.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs> = $r2;

        r5 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(0);

        if r5 == null goto label1;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r3.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor> = r5;

     label1:
        r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i3 = r6.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        $i4 = virtualinvoke r1.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(1, $i3);

        r6.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius> = $i4;

        return;
    }

    private void verifyRequiredAttributes(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.RippleDrawable$RippleState $r3, $r5, $r13;
        android.content.res.ColorStateList $r4;
        int[] $r6, $r14;
        java.lang.String $r8, $r12;
        int $i0;
        java.lang.StringBuilder r15;
        org.xmlpull.v1.XmlPullParserException r16;
        java.lang.Throwable r17;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r4 = $r3.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        if $r4 != null goto label2;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r6 = $r5.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        if $r6 == null goto label1;

        $r13 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r14 = $r13.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        $i0 = $r14[0];

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <ripple> requires a valid color attribute");

        r16 = new org.xmlpull.v1.XmlPullParserException;

        $r12 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r12);

        r17 = (java.lang.Throwable) r16;

        throw r17;

     label2:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState r1;
        android.content.res.TypedArray r2;
        int[] $r4, $r9, $r10;
        android.content.res.ColorStateList $r5, $r6, $r7, $r8;
        boolean $z0;
        java.lang.Throwable $r11, $r12;
        android.content.res.Resources$Theme r13;
        java.lang.Exception r15;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r13 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void applyTheme(android.content.res.Resources$Theme)>(r13);

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        if r1 != null goto label01;

        return;

     label01:
        $r4 = r1.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        if $r4 == null goto label09;

        $r10 = r1.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        $r9 = <com.android.internal.R$styleable: int[] RippleDrawable>;

        r2 = virtualinvoke r13.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r10, $r9);

     label02:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r2);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r2);

     label03:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        goto label09;

     label04:
        $r11 := @caughtexception;

        goto label08;

     label05:
        $r12 := @caughtexception;

     label06:
        r15 = (java.lang.Exception) $r12;

        staticinvoke <android.graphics.drawable.RippleDrawable: void rethrowAsRuntimeException(java.lang.Exception)>(r15);

     label07:
        goto label03;

     label08:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        throw $r11;

     label09:
        $r5 = r1.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        if $r5 == null goto label10;

        $r6 = r1.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        $z0 = virtualinvoke $r6.<android.content.res.ColorStateList: boolean canApplyTheme()>();

        if $z0 == 0 goto label10;

        $r7 = r1.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        $r8 = virtualinvoke $r7.<android.content.res.ColorStateList: android.content.res.ColorStateList obtainForTheme(android.content.res.Resources$Theme)>(r13);

        r1.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor> = $r8;

     label10:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateLocalState()>();

        return;

        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.drawable.RippleDrawable$RippleState: boolean canApplyTheme()>();

        if $z1 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    volatile android.graphics.drawable.LayerDrawable$LayerState createConstantState(android.graphics.drawable.LayerDrawable$LayerState, android.content.res.Resources)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.LayerDrawable$LayerState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.RippleDrawable$RippleState $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.LayerDrawable$LayerState;

        r2 := @parameter1: android.content.res.Resources;

        $r3 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState createConstantState(android.graphics.drawable.LayerDrawable$LayerState,android.content.res.Resources)>(r1, r2);

        return $r3;
    }

    android.graphics.drawable.RippleDrawable$RippleState createConstantState(android.graphics.drawable.LayerDrawable$LayerState, android.content.res.Resources)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.LayerDrawable$LayerState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.RippleDrawable$RippleState $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.LayerDrawable$LayerState;

        r2 := @parameter1: android.content.res.Resources;

        $r3 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r3.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(r1, r0, r2);

        return $r3;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        int i0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void pruneRipples()>();

        r2 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect getDirtyBounds()>();

        i0 = virtualinvoke r1.<android.graphics.Canvas: int save(int)>(2);

        $z0 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: boolean isBounded()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>(r2);

     label1:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void drawContent(android.graphics.Canvas)>(r1);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void drawBackgroundAndRipples(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        return;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        return $r1;
    }

    public android.graphics.Rect getDirtyBounds()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Rect r1, r2, r3, $r4, $r5, $r6, $r7;
        int i0, i1, i2, i3;
        boolean $z0;
        float $f0, $f1;
        android.graphics.drawable.RippleForeground $r8;
        android.graphics.drawable.RippleForeground[] r9;
        android.graphics.drawable.RippleBackground r10;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: boolean isBounded()>();

        if $z0 != 0 goto label4;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDrawingBounds>;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDirtyBounds>;

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $f0 = virtualinvoke $r5.<android.graphics.Rect: float exactCenterX()>();

        i0 = (int) $f0;

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $f1 = virtualinvoke $r6.<android.graphics.Rect: float exactCenterY()>();

        i1 = (int) $f1;

        r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mTempRect>;

        r9 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        i2 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r8 = r9[i3];

        virtualinvoke $r8.<android.graphics.drawable.RippleForeground: void getBounds(android.graphics.Rect)>(r3);

        virtualinvoke r3.<android.graphics.Rect: void offset(int,int)>(i0, i1);

        virtualinvoke r1.<android.graphics.Rect: void union(android.graphics.Rect)>(r3);

        i3 = i3 + 1;

        goto label1;

     label2:
        r10 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r10 == null goto label3;

        virtualinvoke r10.<android.graphics.drawable.RippleBackground: void getBounds(android.graphics.Rect)>(r3);

        virtualinvoke r3.<android.graphics.Rect: void offset(int,int)>(i0, i1);

        virtualinvoke r1.<android.graphics.Rect: void union(android.graphics.Rect)>(r3);

     label3:
        virtualinvoke r2.<android.graphics.Rect: void union(android.graphics.Rect)>(r1);

        $r7 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: android.graphics.Rect getDirtyBounds()>();

        virtualinvoke r2.<android.graphics.Rect: void union(android.graphics.Rect)>($r7);

        return r2;

     label4:
        $r4 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect getBounds()>();

        return $r4;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    public int getOpacity()
    {
        android.graphics.drawable.RippleDrawable r0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        return -3;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Outline r1;
        android.graphics.drawable.LayerDrawable$LayerState r2;
        android.graphics.drawable.LayerDrawable$ChildDrawable[] r3;
        int i0, $i1, i2;
        android.graphics.drawable.LayerDrawable$ChildDrawable $r4, $r5;
        android.graphics.drawable.Drawable $r6;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Outline;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        r3 = r2.<android.graphics.drawable.LayerDrawable$LayerState: android.graphics.drawable.LayerDrawable$ChildDrawable[] mChildren>;

        i0 = r2.<android.graphics.drawable.LayerDrawable$LayerState: int mNumChildren>;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r4 = r3[i2];

        $i1 = $r4.<android.graphics.drawable.LayerDrawable$ChildDrawable: int mId>;

        if $i1 == 16908334 goto label2;

        $r5 = r3[i2];

        $r6 = $r5.<android.graphics.drawable.LayerDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r6.<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>(r1);

        $z0 = virtualinvoke r1.<android.graphics.Outline: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public int getRadius()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;
        int $i0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i0 = $r1.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        return $i0;
    }

    android.graphics.Paint getRipplePaint()
    {
        android.graphics.drawable.RippleDrawable r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.graphics.PorterDuffColorFilter r1, $r11, $r15, $r16;
        android.graphics.Paint $r2, $r21, $r23, r26;
        android.graphics.Rect $r3, $r4, r25;
        android.graphics.BitmapShader $r5, $r13, $r20;
        android.graphics.drawable.RippleDrawable$RippleState $r6;
        android.content.res.ColorStateList $r7;
        int[] $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        android.graphics.PorterDuff$Mode $r17;
        android.graphics.Matrix $r18, $r19;
        android.graphics.Paint$Style $r22;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint>;

        if $r2 != null goto label1;

        $r21 = new android.graphics.Paint;

        specialinvoke $r21.<android.graphics.Paint: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint> = $r21;

        virtualinvoke $r21.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r23 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint>;

        $r22 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r23.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r22);

     label1:
        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f0 = virtualinvoke $r3.<android.graphics.Rect: float exactCenterX()>();

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f1 = virtualinvoke $r4.<android.graphics.Rect: float exactCenterY()>();

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateMaskShaderIfNeeded()>();

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.BitmapShader mMaskShader>;

        if $r5 == null goto label2;

        r25 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect getBounds()>();

        $r18 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Matrix mMaskMatrix>;

        $i4 = r25.<android.graphics.Rect: int left>;

        $f2 = (float) $i4;

        $f5 = $f2 - f0;

        $i5 = r25.<android.graphics.Rect: int top>;

        $f3 = (float) $i5;

        $f4 = $f3 - f1;

        virtualinvoke $r18.<android.graphics.Matrix: void setTranslate(float,float)>($f5, $f4);

        $r20 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.BitmapShader mMaskShader>;

        $r19 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Matrix mMaskMatrix>;

        virtualinvoke $r20.<android.graphics.BitmapShader: void setLocalMatrix(android.graphics.Matrix)>($r19);

     label2:
        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r7 = $r6.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        $r8 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: int[] getState()>();

        i6 = virtualinvoke $r7.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r8, -16777216);

        i7 = i6;

        $i0 = staticinvoke <android.graphics.Color: int alpha(int)>(i6);

        if $i0 <= 128 goto label3;

        $i3 = 16777215 & i6;

        i7 = $i3 | -2147483648;

     label3:
        r26 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint>;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffColorFilter mMaskColorFilter>;

        if r1 == null goto label5;

        i8 = i7 | -16777216;

        $i1 = virtualinvoke r1.<android.graphics.PorterDuffColorFilter: int getColor()>();

        if $i1 == i8 goto label4;

        $r15 = new android.graphics.PorterDuffColorFilter;

        $r16 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffColorFilter mMaskColorFilter>;

        $r17 = virtualinvoke $r16.<android.graphics.PorterDuffColorFilter: android.graphics.PorterDuff$Mode getMode()>();

        specialinvoke $r15.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>(i8, $r17);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffColorFilter mMaskColorFilter> = $r15;

     label4:
        $i2 = -16777216 & i7;

        virtualinvoke r26.<android.graphics.Paint: void setColor(int)>($i2);

        $r11 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffColorFilter mMaskColorFilter>;

        virtualinvoke r26.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r11);

        $r13 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.BitmapShader mMaskShader>;

        virtualinvoke r26.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r13);

        goto label6;

     label5:
        virtualinvoke r26.<android.graphics.Paint: void setColor(int)>(i7);

        virtualinvoke r26.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(null);

        virtualinvoke r26.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(null);

     label6:
        return r26;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.RippleDrawable r0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        return 1;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r6;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        $r6 = <com.android.internal.R$styleable: int[] RippleDrawable>;

        r5 = staticinvoke <android.graphics.drawable.RippleDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r6);

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void setPaddingMode(int)>(1);

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateLocalState()>();

        return;
    }

    public void invalidateSelf()
    {
        android.graphics.drawable.RippleDrawable r0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf(boolean)>(1);

        return;
    }

    void invalidateSelf(boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void invalidateSelf()>();

        if z0 == 0 goto label1;

        r0.<android.graphics.drawable.RippleDrawable: boolean mHasValidMask> = 0;

     label1:
        return;
    }

    public boolean isProjected()
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, $i1, $i2, $i3, $i4;
        android.graphics.Rect r1, r2;
        boolean $z0, $z1, $z2;
        android.graphics.drawable.RippleDrawable$RippleState $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: boolean isBounded()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        i0 = $r3.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        r1 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect getBounds()>();

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        if i0 == -1 goto label3;

        $i1 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i2 = $i1 / 2;

        if i0 > $i2 goto label3;

        $i3 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $i4 = $i3 / 2;

        if i0 > $i4 goto label3;

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<android.graphics.Rect: boolean contains(android.graphics.Rect)>(r2);

        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.RippleDrawable r0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        return 1;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleForeground r1;
        android.graphics.drawable.RippleBackground r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void jumpToCurrentState()>();

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.RippleForeground: void end()>();

     label1:
        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.RippleBackground: void jumpToFinal()>();

     label2:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void cancelExitingRipples()>();

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.LayerDrawable$LayerState $r2;
        android.graphics.drawable.RippleDrawable$RippleState $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>();

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        $r3 = (android.graphics.drawable.RippleDrawable$RippleState) $r2;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState> = $r3;

        $r4 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>(16908334);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask> = $r4;

        return r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, i1;
        boolean $z0;
        android.graphics.drawable.RippleForeground $r1, r6;
        android.graphics.Rect $r2, r3;
        android.graphics.drawable.RippleForeground[] r4;
        android.graphics.drawable.RippleBackground r5;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r3 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void onBoundsChange(android.graphics.Rect)>(r3);

        $z0 = r0.<android.graphics.drawable.RippleDrawable: boolean mOverrideBounds>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r3);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void onHotspotBoundsChanged()>();

     label1:
        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground[] mExitingRipples>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r1 = r4[i1];

        virtualinvoke $r1.<android.graphics.drawable.RippleForeground: void onBoundsChange()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r5 == null goto label4;

        virtualinvoke r5.<android.graphics.drawable.RippleBackground: void onBoundsChange()>();

     label4:
        r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if r6 == null goto label5;

        virtualinvoke r6.<android.graphics.drawable.RippleForeground: void onBoundsChange()>();

     label5:
        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

        return;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.RippleDrawable r0;
        int[] r1;
        boolean z0, z2, z3, z4, z5, z6, z7, z8, z9;
        int i0, i1, i2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: int[];

        z0 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean onStateChange(int[])>(r1);

        z2 = 0;

        z3 = 0;

        z4 = 0;

        z5 = 0;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        i1 = r1[i2];

        if i1 != 16842910 goto label2;

        z6 = 1;

        z7 = z3;

        z8 = z4;

        goto label5;

     label2:
        if i1 != 16842908 goto label3;

        z8 = 1;

        z6 = z2;

        z7 = z3;

        goto label5;

     label3:
        if i1 != 16842919 goto label4;

        z7 = 1;

        z6 = z2;

        z8 = z4;

        goto label5;

     label4:
        z6 = z2;

        z7 = z3;

        z8 = z4;

        if i1 != 16843623 goto label5;

        z5 = 1;

        z8 = z4;

        z7 = z3;

        z6 = z2;

     label5:
        i2 = i2 + 1;

        z2 = z6;

        z3 = z7;

        z4 = z8;

        goto label1;

     label6:
        z9 = 0;

        if z2 == 0 goto label7;

        z9 = 0;

        if z3 == 0 goto label7;

        z9 = 1;

     label7:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void setRippleActive(boolean)>(z9);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void setBackgroundActive(boolean,boolean,boolean)>(z5, z4, z3);

        return z0;
    }

    public void setColor(android.content.res.ColorStateList)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.RippleDrawable$RippleState $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r2.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor> = r1;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf(boolean)>(0);

        return;
    }

    public boolean setDrawableByLayerId(int, android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)>(i0, r1);

        if $z0 == 0 goto label2;

        if i0 != 16908334 goto label1;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask> = r1;

        r0.<android.graphics.drawable.RippleDrawable: boolean mHasValidMask> = 0;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void setForceSoftware(boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        r0.<android.graphics.drawable.RippleDrawable: boolean mForceSoftware> = z0;

        return;
    }

    public void setHotspot(float, float)
    {
        android.graphics.drawable.RippleDrawable r0;
        float f0, f1;
        android.graphics.drawable.RippleForeground r1, $r2;
        android.graphics.drawable.RippleBackground $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r3 != null goto label2;

     label1:
        r0.<android.graphics.drawable.RippleDrawable: float mPendingX> = f0;

        r0.<android.graphics.drawable.RippleDrawable: float mPendingY> = f1;

        r0.<android.graphics.drawable.RippleDrawable: boolean mHasPending> = 1;

     label2:
        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleForeground mRipple>;

        if r1 == null goto label3;

        virtualinvoke r1.<android.graphics.drawable.RippleForeground: void move(float,float)>(f0, f1);

     label3:
        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, i1, i2, i3;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0.<android.graphics.drawable.RippleDrawable: boolean mOverrideBounds> = 1;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void onHotspotBoundsChanged()>();

        return;
    }

    public void setPaddingMode(int)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void setPaddingMode(int)>(i0);

        return;
    }

    public void setRadius(int)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r1.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius> = i0;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf(boolean)>(0);

        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, $z1, z2, z3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        z2 := @parameter1: boolean;

        z3 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>(z0, z2);

        if z0 != 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void clearHotspots()>();

        goto label3;

     label1:
        if z3 == 0 goto label3;

        $z1 = r0.<android.graphics.drawable.RippleDrawable: boolean mRippleActive>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryRippleEnter()>();

     label2:
        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void jumpToCurrentState()>();

     label3:
        return z3;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.RippleDrawable: int RADIUS_AUTO> = -1;

        <android.graphics.drawable.RippleDrawable: int MAX_RIPPLES> = 10;

        <android.graphics.drawable.RippleDrawable: int MASK_UNKNOWN> = -1;

        <android.graphics.drawable.RippleDrawable: int MASK_NONE> = 0;

        <android.graphics.drawable.RippleDrawable: int MASK_EXPLICIT> = 2;

        <android.graphics.drawable.RippleDrawable: int MASK_CONTENT> = 1;

        return;
    }
}
