public class android.graphics.drawable.RotateDrawable extends android.graphics.drawable.DrawableWrapper
{
    private static final int MAX_LEVEL;
    private android.graphics.drawable.RotateDrawable$RotateState mState;

    public void <init>()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r1;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r1 = new android.graphics.drawable.RotateDrawable$RotateState;

        specialinvoke $r1.<android.graphics.drawable.RotateDrawable$RotateState: void <init>(android.graphics.drawable.RotateDrawable$RotateState,android.content.res.Resources)>(null, null);

        specialinvoke r0.<android.graphics.drawable.RotateDrawable: void <init>(android.graphics.drawable.RotateDrawable$RotateState,android.content.res.Resources)>($r1, null);

        return;
    }

    private void <init>(android.graphics.drawable.RotateDrawable$RotateState, android.content.res.Resources)
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState r1;
        android.content.res.Resources r2;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        r1 := @parameter0: android.graphics.drawable.RotateDrawable$RotateState;

        r2 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void <init>(android.graphics.drawable.DrawableWrapper$DrawableWrapperState,android.content.res.Resources)>(r1, r2);

        r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState> = r1;

        return;
    }

    void <init>(android.graphics.drawable.RotateDrawable$RotateState, android.content.res.Resources, android.graphics.drawable.RotateDrawable$1)
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.RotateDrawable$1 r3;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        r1 := @parameter0: android.graphics.drawable.RotateDrawable$RotateState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.graphics.drawable.RotateDrawable$1;

        specialinvoke r0.<android.graphics.drawable.RotateDrawable: void <init>(android.graphics.drawable.RotateDrawable$RotateState,android.content.res.Resources)>(r1, r2);

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.RotateDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.RotateDrawable$RotateState r2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r3;
        boolean $z1, $z2, z3, z4, $z5, z6;
        android.util.TypedValue r5, r6;
        float f0, f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        if r2 != null goto label01;

        return;

     label01:
        $i0 = r2.<android.graphics.drawable.RotateDrawable$RotateState: int mChangingConfigurations>;

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r2.<android.graphics.drawable.RotateDrawable$RotateState: int mChangingConfigurations> = $i2;

        $r3 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        staticinvoke <android.graphics.drawable.RotateDrawable$RotateState: int[] access$002(android.graphics.drawable.RotateDrawable$RotateState,int[])>(r2, $r3);

        z3 = virtualinvoke r1.<android.content.res.TypedArray: boolean hasValue(int)>(4);

        if z3 == 0 goto label06;

        r5 = virtualinvoke r1.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(4);

        $i4 = r5.<android.util.TypedValue: int type>;

        if $i4 != 6 goto label02;

        z4 = 1;

        goto label03;

     label02:
        z4 = 0;

     label03:
        r2.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotXRel> = z4;

        $z2 = r2.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotXRel>;

        if $z2 == 0 goto label04;

        f0 = virtualinvoke r5.<android.util.TypedValue: float getFraction(float,float)>(1.0F, 1.0F);

        goto label05;

     label04:
        f0 = virtualinvoke r5.<android.util.TypedValue: float getFloat()>();

     label05:
        r2.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotX> = f0;

     label06:
        $z5 = virtualinvoke r1.<android.content.res.TypedArray: boolean hasValue(int)>(5);

        if $z5 == 0 goto label11;

        r6 = virtualinvoke r1.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(5);

        $i3 = r6.<android.util.TypedValue: int type>;

        if $i3 != 6 goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        r2.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotYRel> = z6;

        $z1 = r2.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotYRel>;

        if $z1 == 0 goto label09;

        f1 = virtualinvoke r6.<android.util.TypedValue: float getFraction(float,float)>(1.0F, 1.0F);

        goto label10;

     label09:
        f1 = virtualinvoke r6.<android.util.TypedValue: float getFloat()>();

     label10:
        r2.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotY> = f1;

     label11:
        $f2 = r2.<android.graphics.drawable.RotateDrawable$RotateState: float mFromDegrees>;

        $f3 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(2, $f2);

        r2.<android.graphics.drawable.RotateDrawable$RotateState: float mFromDegrees> = $f3;

        $f4 = r2.<android.graphics.drawable.RotateDrawable$RotateState: float mToDegrees>;

        $f5 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(3, $f4);

        r2.<android.graphics.drawable.RotateDrawable$RotateState: float mToDegrees> = $f5;

        $f6 = r2.<android.graphics.drawable.RotateDrawable$RotateState: float mFromDegrees>;

        r2.<android.graphics.drawable.RotateDrawable$RotateState: float mCurrentDegrees> = $f6;

        return;
    }

    private void verifyRequiredAttributes(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.RotateDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.Drawable $r3;
        android.graphics.drawable.RotateDrawable$RotateState $r4, $r12;
        int[] $r5, $r13;
        java.lang.String $r7, $r11;
        int $i0;
        java.lang.StringBuilder r14;
        org.xmlpull.v1.XmlPullParserException r15;
        java.lang.Throwable r16;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        $r3 = virtualinvoke r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable getDrawable()>();

        if $r3 != null goto label2;

        $r4 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r5 = staticinvoke <android.graphics.drawable.RotateDrawable$RotateState: int[] access$000(android.graphics.drawable.RotateDrawable$RotateState)>($r4);

        if $r5 == null goto label1;

        $r12 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r13 = staticinvoke <android.graphics.drawable.RotateDrawable$RotateState: int[] access$000(android.graphics.drawable.RotateDrawable$RotateState)>($r12);

        $i0 = $r13[1];

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <rotate> tag requires a \'drawable\' attribute or child tag defining a drawable");

        r15 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r11);

        r16 = (java.lang.Throwable) r15;

        throw r16;

     label2:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.RotateDrawable r0;
        int[] $r1, $r2, $r3;
        java.lang.Throwable $r4, $r5;
        android.content.res.Resources$Theme r6;
        android.graphics.drawable.RotateDrawable$RotateState r7;
        android.content.res.TypedArray r8;
        java.lang.Exception r11;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        r6 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void applyTheme(android.content.res.Resources$Theme)>(r6);

        r7 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        if r7 != null goto label1;

        return;

     label1:
        $r1 = staticinvoke <android.graphics.drawable.RotateDrawable$RotateState: int[] access$000(android.graphics.drawable.RotateDrawable$RotateState)>(r7);

        if $r1 == null goto label9;

        $r2 = staticinvoke <android.graphics.drawable.RotateDrawable$RotateState: int[] access$000(android.graphics.drawable.RotateDrawable$RotateState)>(r7);

        $r3 = <com.android.internal.R$styleable: int[] RotateDrawable>;

        r8 = virtualinvoke r6.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r2, $r3);

     label2:
        specialinvoke r0.<android.graphics.drawable.RotateDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r8);

        specialinvoke r0.<android.graphics.drawable.RotateDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r8);

     label3:
        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        goto label9;

     label4:
        $r4 := @caughtexception;

        goto label8;

     label5:
        $r5 := @caughtexception;

     label6:
        r11 = (java.lang.Exception) $r5;

        staticinvoke <android.graphics.drawable.RotateDrawable: void rethrowAsRuntimeException(java.lang.Exception)>(r11);

     label7:
        goto label3;

     label8:
        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        throw $r4;

     label9:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.Rect r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        android.graphics.drawable.RotateDrawable$RotateState r4;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = virtualinvoke r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable getDrawable()>();

        r3 = virtualinvoke r2.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        i7 = r3.<android.graphics.Rect: int right>;

        i0 = r3.<android.graphics.Rect: int left>;

        i1 = r3.<android.graphics.Rect: int bottom>;

        i2 = r3.<android.graphics.Rect: int top>;

        r4 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $z0 = r4.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotXRel>;

        if $z0 == 0 goto label1;

        $i6 = i7 - i0;

        $f8 = (float) $i6;

        $f7 = r4.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotX>;

        f9 = $f8 * $f7;

        goto label2;

     label1:
        f9 = r4.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotX>;

     label2:
        $z1 = r4.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotYRel>;

        if $z1 == 0 goto label3;

        $i5 = i1 - i2;

        $f6 = (float) $i5;

        $f5 = r4.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotY>;

        f10 = $f6 * $f5;

        goto label4;

     label3:
        f10 = r4.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotY>;

     label4:
        i8 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $f4 = r4.<android.graphics.drawable.RotateDrawable$RotateState: float mCurrentDegrees>;

        $i3 = r3.<android.graphics.Rect: int left>;

        $f0 = (float) $i3;

        $f3 = $f0 + f9;

        $i4 = r3.<android.graphics.Rect: int top>;

        $f1 = (float) $i4;

        $f2 = $f1 + f10;

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float,float,float)>($f4, $f3, $f2);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i8);

        return;
    }

    public float getFromDegrees()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r1;
        float $f0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f0 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mFromDegrees>;

        return $f0;
    }

    public float getPivotX()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r1;
        float $f0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f0 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotX>;

        return $f0;
    }

    public float getPivotY()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r1;
        float $f0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f0 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotY>;

        return $f0;
    }

    public float getToDegrees()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r1;
        float $f0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f0 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mToDegrees>;

        return $f0;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.RotateDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r6;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        $r6 = <com.android.internal.R$styleable: int[] RotateDrawable>;

        r5 = staticinvoke <android.graphics.drawable.RotateDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r6);

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        specialinvoke r0.<android.graphics.drawable.RotateDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        specialinvoke r0.<android.graphics.drawable.RotateDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public boolean isPivotXRelative()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $z0 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotXRel>;

        return $z0;
    }

    public boolean isPivotYRelative()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $z0 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotYRel>;

        return $z0;
    }

    android.graphics.drawable.DrawableWrapper$DrawableWrapperState mutateConstantState()
    {
        android.graphics.drawable.RotateDrawable r0;
        android.graphics.drawable.RotateDrawable$RotateState $r2, $r3;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        $r2 = new android.graphics.drawable.RotateDrawable$RotateState;

        $r3 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        specialinvoke $r2.<android.graphics.drawable.RotateDrawable$RotateState: void <init>(android.graphics.drawable.RotateDrawable$RotateState,android.content.res.Resources)>($r3, null);

        r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState> = $r2;

        return $r2;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.RotateDrawable r0;
        int i0;
        float $f0, $f1, $f2, f3, f4;
        android.graphics.drawable.RotateDrawable$RotateState $r1, $r2, $r3;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: boolean onLevelChange(int)>(i0);

        $f0 = (float) i0;

        f3 = $f0 / 10000.0F;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f2 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mFromDegrees>;

        $r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f1 = $r2.<android.graphics.drawable.RotateDrawable$RotateState: float mToDegrees>;

        f4 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>($f2, $f1, f3);

        $r3 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r3.<android.graphics.drawable.RotateDrawable$RotateState: float mCurrentDegrees> = f4;

        virtualinvoke r0.<android.graphics.drawable.RotateDrawable: void invalidateSelf()>();

        return 1;
    }

    public void setFromDegrees(float)
    {
        android.graphics.drawable.RotateDrawable r0;
        float f0, $f1;
        android.graphics.drawable.RotateDrawable$RotateState $r1, $r2;
        byte $b0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        f0 := @parameter0: float;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f1 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mFromDegrees>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        $r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r2.<android.graphics.drawable.RotateDrawable$RotateState: float mFromDegrees> = f0;

        virtualinvoke r0.<android.graphics.drawable.RotateDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setPivotX(float)
    {
        android.graphics.drawable.RotateDrawable r0;
        float f0, $f1;
        android.graphics.drawable.RotateDrawable$RotateState $r1, $r2;
        byte $b0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        f0 := @parameter0: float;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f1 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotX>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        $r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r2.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotX> = f0;

        virtualinvoke r0.<android.graphics.drawable.RotateDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setPivotXRelative(boolean)
    {
        android.graphics.drawable.RotateDrawable r0;
        boolean z0, $z1;
        android.graphics.drawable.RotateDrawable$RotateState $r1, $r2;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $z1 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotXRel>;

        if $z1 == z0 goto label1;

        $r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r2.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotXRel> = z0;

        virtualinvoke r0.<android.graphics.drawable.RotateDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setPivotY(float)
    {
        android.graphics.drawable.RotateDrawable r0;
        float f0, $f1;
        android.graphics.drawable.RotateDrawable$RotateState $r1, $r2;
        byte $b0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        f0 := @parameter0: float;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f1 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotY>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        $r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r2.<android.graphics.drawable.RotateDrawable$RotateState: float mPivotY> = f0;

        virtualinvoke r0.<android.graphics.drawable.RotateDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setPivotYRelative(boolean)
    {
        android.graphics.drawable.RotateDrawable r0;
        boolean z0, $z1;
        android.graphics.drawable.RotateDrawable$RotateState $r1, $r2;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $z1 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotYRel>;

        if $z1 == z0 goto label1;

        $r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r2.<android.graphics.drawable.RotateDrawable$RotateState: boolean mPivotYRel> = z0;

        virtualinvoke r0.<android.graphics.drawable.RotateDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setToDegrees(float)
    {
        android.graphics.drawable.RotateDrawable r0;
        float f0, $f1;
        android.graphics.drawable.RotateDrawable$RotateState $r1, $r2;
        byte $b0;

        r0 := @this: android.graphics.drawable.RotateDrawable;

        f0 := @parameter0: float;

        $r1 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $f1 = $r1.<android.graphics.drawable.RotateDrawable$RotateState: float mToDegrees>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        $r2 = r0.<android.graphics.drawable.RotateDrawable: android.graphics.drawable.RotateDrawable$RotateState mState>;

        $r2.<android.graphics.drawable.RotateDrawable$RotateState: float mToDegrees> = f0;

        virtualinvoke r0.<android.graphics.drawable.RotateDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.RotateDrawable: int MAX_LEVEL> = 10000;

        return;
    }
}
