public class android.graphics.drawable.ScaleDrawable extends android.graphics.drawable.DrawableWrapper
{
    private static final int MAX_LEVEL;
    private android.graphics.drawable.ScaleDrawable$ScaleState mState;
    private final android.graphics.Rect mTmpRect;

    void <init>()
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.drawable.ScaleDrawable$ScaleState $r1;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        $r1 = new android.graphics.drawable.ScaleDrawable$ScaleState;

        specialinvoke $r1.<android.graphics.drawable.ScaleDrawable$ScaleState: void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources)>(null, null);

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources)>($r1, null);

        return;
    }

    public void <init>(android.graphics.drawable.Drawable, int, float, float)
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.drawable.Drawable r1;
        int i0;
        float f0, f1;
        android.graphics.drawable.ScaleDrawable$ScaleState $r2, $r3, $r4, $r5;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $r2 = new android.graphics.drawable.ScaleDrawable$ScaleState;

        specialinvoke $r2.<android.graphics.drawable.ScaleDrawable$ScaleState: void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources)>(null, null);

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources)>($r2, null);

        $r3 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $r3.<android.graphics.drawable.ScaleDrawable$ScaleState: int mGravity> = i0;

        $r4 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $r4.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleWidth> = f0;

        $r5 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $r5.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleHeight> = f1;

        virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: void setDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    private void <init>(android.graphics.drawable.ScaleDrawable$ScaleState, android.content.res.Resources)
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.drawable.ScaleDrawable$ScaleState r1;
        android.content.res.Resources r2;
        android.graphics.Rect $r3;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.graphics.drawable.ScaleDrawable$ScaleState;

        r2 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void <init>(android.graphics.drawable.DrawableWrapper$DrawableWrapperState,android.content.res.Resources)>(r1, r2);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.ScaleDrawable: android.graphics.Rect mTmpRect> = $r3;

        r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState> = r1;

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void updateLocalState()>();

        return;
    }

    void <init>(android.graphics.drawable.ScaleDrawable$ScaleState, android.content.res.Resources, android.graphics.drawable.ScaleDrawable$1)
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.drawable.ScaleDrawable$ScaleState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.ScaleDrawable$1 r3;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.graphics.drawable.ScaleDrawable$ScaleState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.graphics.drawable.ScaleDrawable$1;

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources)>(r1, r2);

        return;
    }

    private static float getPercent(android.content.res.TypedArray, int, float)
    {
        int i0, i1, $i2, $i3;
        float f0, $f1, $f2, $f3;
        boolean $z0;
        java.lang.String $r0, r2;
        android.content.res.TypedArray r1;

        r1 := @parameter0: android.content.res.TypedArray;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        i1 = virtualinvoke r1.<android.content.res.TypedArray: int getType(int)>(i0);

        if i1 == 6 goto label3;

        if i1 != 0 goto label1;

        goto label3;

     label1:
        r2 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(i0);

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("%");

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r0 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r0);

        $f3 = $f2 / 100.0F;

        return $f3;

     label2:
        return f0;

     label3:
        $f1 = virtualinvoke r1.<android.content.res.TypedArray: float getFraction(int,int,int,float)>(i0, 1, 1, f0);

        return $f1;
    }

    private void updateLocalState()
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.drawable.ScaleDrawable$ScaleState $r1;
        int $i0;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        $r1 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $i0 = $r1.<android.graphics.drawable.ScaleDrawable$ScaleState: int mInitialLevel>;

        virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: boolean setLevel(int)>($i0);

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.ScaleDrawable$ScaleState r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r3;
        float $f0, $f1, $f2, $f3;
        boolean $z0, $z1;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        if r2 != null goto label1;

        return;

     label1:
        $i0 = r2.<android.graphics.drawable.ScaleDrawable$ScaleState: int mChangingConfigurations>;

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r2.<android.graphics.drawable.ScaleDrawable$ScaleState: int mChangingConfigurations> = $i2;

        $r3 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        staticinvoke <android.graphics.drawable.ScaleDrawable$ScaleState: int[] access$002(android.graphics.drawable.ScaleDrawable$ScaleState,int[])>(r2, $r3);

        $f0 = r2.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleWidth>;

        $f1 = staticinvoke <android.graphics.drawable.ScaleDrawable: float getPercent(android.content.res.TypedArray,int,float)>(r1, 1, $f0);

        r2.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleWidth> = $f1;

        $f2 = r2.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleHeight>;

        $f3 = staticinvoke <android.graphics.drawable.ScaleDrawable: float getPercent(android.content.res.TypedArray,int,float)>(r1, 2, $f2);

        r2.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleHeight> = $f3;

        $i3 = r2.<android.graphics.drawable.ScaleDrawable$ScaleState: int mGravity>;

        $i4 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(3, $i3);

        r2.<android.graphics.drawable.ScaleDrawable$ScaleState: int mGravity> = $i4;

        $z0 = r2.<android.graphics.drawable.ScaleDrawable$ScaleState: boolean mUseIntrinsicSizeAsMin>;

        $z1 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, $z0);

        r2.<android.graphics.drawable.ScaleDrawable$ScaleState: boolean mUseIntrinsicSizeAsMin> = $z1;

        $i5 = r2.<android.graphics.drawable.ScaleDrawable$ScaleState: int mInitialLevel>;

        $i6 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(5, $i5);

        r2.<android.graphics.drawable.ScaleDrawable$ScaleState: int mInitialLevel> = $i6;

        return;
    }

    private void verifyRequiredAttributes(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.Drawable $r3;
        android.graphics.drawable.ScaleDrawable$ScaleState $r4, $r12;
        int[] $r5, $r13;
        java.lang.String $r7, $r11;
        int $i0;
        java.lang.StringBuilder r14;
        org.xmlpull.v1.XmlPullParserException r15;
        java.lang.Throwable r16;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        $r3 = virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()>();

        if $r3 != null goto label2;

        $r4 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $r5 = staticinvoke <android.graphics.drawable.ScaleDrawable$ScaleState: int[] access$000(android.graphics.drawable.ScaleDrawable$ScaleState)>($r4);

        if $r5 == null goto label1;

        $r12 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $r13 = staticinvoke <android.graphics.drawable.ScaleDrawable$ScaleState: int[] access$000(android.graphics.drawable.ScaleDrawable$ScaleState)>($r12);

        $i0 = $r13[0];

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <scale> tag requires a \'drawable\' attribute or child tag defining a drawable");

        r15 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r11);

        r16 = (java.lang.Throwable) r15;

        throw r16;

     label2:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.ScaleDrawable r0;
        int[] $r1, $r2, $r3;
        java.lang.Throwable $r4, $r5;
        android.content.res.Resources$Theme r6;
        android.graphics.drawable.ScaleDrawable$ScaleState r7;
        android.content.res.TypedArray r8;
        java.lang.Exception r11;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r6 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void applyTheme(android.content.res.Resources$Theme)>(r6);

        r7 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        if r7 != null goto label1;

        return;

     label1:
        $r1 = staticinvoke <android.graphics.drawable.ScaleDrawable$ScaleState: int[] access$000(android.graphics.drawable.ScaleDrawable$ScaleState)>(r7);

        if $r1 == null goto label9;

        $r2 = staticinvoke <android.graphics.drawable.ScaleDrawable$ScaleState: int[] access$000(android.graphics.drawable.ScaleDrawable$ScaleState)>(r7);

        $r3 = <com.android.internal.R$styleable: int[] ScaleDrawable>;

        r8 = virtualinvoke r6.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r2, $r3);

     label2:
        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r8);

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r8);

     label3:
        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        goto label9;

     label4:
        $r4 := @caughtexception;

        goto label8;

     label5:
        $r5 := @caughtexception;

     label6:
        r11 = (java.lang.Exception) $r5;

        staticinvoke <android.graphics.drawable.ScaleDrawable: void rethrowAsRuntimeException(java.lang.Exception)>(r11);

     label7:
        goto label3;

     label8:
        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        throw $r4;

     label9:
        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void updateLocalState()>();

        return;

        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int $i0;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()>();

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getLevel()>();

        if $i0 == 0 goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label1:
        return;
    }

    public int getOpacity()
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.drawable.Drawable r1;
        int i0, $i1, $i2;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 = virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()>();

        $i1 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getLevel()>();

        if $i1 != 0 goto label1;

        return -2;

     label1:
        i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        if i0 != -1 goto label2;

        $i2 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getLevel()>();

        if $i2 >= 10000 goto label2;

        return -3;

     label2:
        return i0;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r6;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        $r6 = <com.android.internal.R$styleable: int[] ScaleDrawable>;

        r5 = staticinvoke <android.graphics.drawable.ScaleDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r6);

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        specialinvoke r0.<android.graphics.drawable.ScaleDrawable: void updateLocalState()>();

        return;
    }

    android.graphics.drawable.DrawableWrapper$DrawableWrapperState mutateConstantState()
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.drawable.ScaleDrawable$ScaleState $r2, $r3;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        $r2 = new android.graphics.drawable.ScaleDrawable$ScaleState;

        $r3 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        specialinvoke $r2.<android.graphics.drawable.ScaleDrawable$ScaleState: void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources)>($r3, null);

        r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState> = $r2;

        return $r2;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.ScaleDrawable r0;
        android.graphics.Rect r1, r3;
        android.graphics.drawable.Drawable r2;
        boolean z0;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.graphics.drawable.ScaleDrawable$ScaleState $r4, $r5, $r6, $r7, $r8, $r9;
        byte $b1, $b2;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 = virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()>();

        r3 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.Rect mTmpRect>;

        $r4 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        z0 = $r4.<android.graphics.drawable.ScaleDrawable$ScaleState: boolean mUseIntrinsicSizeAsMin>;

        i0 = virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: int getLevel()>();

        i16 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $r5 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        f0 = $r5.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleWidth>;

        i17 = 0;

        $b1 = f0 cmpl 0.0F;

        if $b1 <= 0 goto label3;

        if z0 == 0 goto label1;

        i18 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        goto label2;

     label1:
        i18 = 0;

     label2:
        $i13 = i16 - i18;

        $i12 = 10000 - i0;

        $i14 = $i13 * $i12;

        $f7 = (float) $i14;

        $r9 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $f6 = $r9.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleWidth>;

        $f8 = $f7 * $f6;

        $f9 = $f8 / 10000.0F;

        $i15 = (int) $f9;

        i19 = i16 - $i15;

        goto label4;

     label3:
        i19 = i16;

     label4:
        i20 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $r6 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $f1 = $r6.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleHeight>;

        $b2 = $f1 cmpl 0.0F;

        if $b2 <= 0 goto label6;

        if z0 == 0 goto label5;

        i17 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

     label5:
        $i9 = i20 - i17;

        $i8 = 10000 - i0;

        $i10 = $i9 * $i8;

        $f3 = (float) $i10;

        $r8 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $f2 = $r8.<android.graphics.drawable.ScaleDrawable$ScaleState: float mScaleHeight>;

        $f4 = $f3 * $f2;

        $f5 = $f4 / 10000.0F;

        $i11 = (int) $f5;

        i21 = i20 - $i11;

        goto label7;

     label6:
        i21 = i20;

     label7:
        i22 = virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: int getLayoutDirection()>();

        $r7 = r0.<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.ScaleDrawable$ScaleState mState>;

        $i3 = $r7.<android.graphics.drawable.ScaleDrawable$ScaleState: int mGravity>;

        staticinvoke <android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>($i3, i19, i21, r1, r3, i22);

        if i19 <= 0 goto label8;

        if i21 <= 0 goto label8;

        $i7 = r3.<android.graphics.Rect: int left>;

        $i6 = r3.<android.graphics.Rect: int top>;

        $i5 = r3.<android.graphics.Rect: int right>;

        $i4 = r3.<android.graphics.Rect: int bottom>;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i7, $i6, $i5, $i4);

     label8:
        return;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.ScaleDrawable r0;
        int i0;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.ScaleDrawable;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.drawable.DrawableWrapper: boolean onLevelChange(int)>(i0);

        $r1 = virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: android.graphics.Rect getBounds()>();

        virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: void onBoundsChange(android.graphics.Rect)>($r1);

        virtualinvoke r0.<android.graphics.drawable.ScaleDrawable: void invalidateSelf()>();

        return 1;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.ScaleDrawable: int MAX_LEVEL> = 10000;

        return;
    }
}
