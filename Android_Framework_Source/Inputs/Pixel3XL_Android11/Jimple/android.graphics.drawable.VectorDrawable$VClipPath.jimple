class android.graphics.drawable.VectorDrawable$VClipPath extends android.graphics.drawable.VectorDrawable$VPath
{
    private static final int NATIVE_ALLOCATION_SIZE;
    private final long mNativePtr;

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VPath: void <init>()>();

        $l0 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$3700()>();

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: long mNativePtr> = $l0;

        return;
    }

    public void <init>(android.graphics.drawable.VectorDrawable$VClipPath)
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0, r1;
        long $l0, $l1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VClipPath;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VPath: void <init>(android.graphics.drawable.VectorDrawable$VPath)>(r1);

        $l0 = r1.<android.graphics.drawable.VectorDrawable$VClipPath: long mNativePtr>;

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$3800(long)>($l0);

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: long mNativePtr> = $l1;

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        java.lang.String r1, $r3, r5;
        int $i0, $i1, $i2, $i4;
        android.util.PathParser$PathData $r2;
        long $l3, $l5;
        android.content.res.TypedArray r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r4 := @parameter0: android.content.res.TypedArray;

        $i0 = r0.<android.graphics.drawable.VectorDrawable$VClipPath: int mChangingConfigurations>;

        $i1 = virtualinvoke r4.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: int mChangingConfigurations> = $i2;

        r1 = virtualinvoke r4.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r1 == null goto label1;

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: java.lang.String mPathName> = r1;

        $l5 = r0.<android.graphics.drawable.VectorDrawable$VClipPath: long mNativePtr>;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VClipPath: java.lang.String mPathName>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2000(long,java.lang.String)>($l5, $r3);

     label1:
        r5 = virtualinvoke r4.<android.content.res.TypedArray: java.lang.String getString(int)>(1);

        if r5 == null goto label2;

        $r2 = new android.util.PathParser$PathData;

        specialinvoke $r2.<android.util.PathParser$PathData: void <init>(java.lang.String)>(r5);

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: android.util.PathParser$PathData mPathData> = $r2;

        $l3 = r0.<android.graphics.drawable.VectorDrawable$VClipPath: long mNativePtr>;

        $i4 = virtualinvoke r5.<java.lang.String: int length()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$3900(long,java.lang.String,int)>($l3, r5, $i4);

     label2:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        android.content.res.Resources$Theme r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r1 := @parameter0: android.content.res.Resources$Theme;

        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        return 0;
    }

    public long getNativePtr()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VClipPath: long mNativePtr>;

        return $l0;
    }

    int getNativeSize()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        return 120;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        return 0;
    }

    public void inflate(android.content.res.Resources, android.util.AttributeSet, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        android.util.AttributeSet r1;
        android.content.res.Resources$Theme r2;
        int[] $r3;
        android.content.res.Resources r4;
        android.content.res.TypedArray r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r4 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.AttributeSet;

        r2 := @parameter2: android.content.res.Resources$Theme;

        $r3 = <com.android.internal.R$styleable: int[] VectorDrawableClipPath>;

        r5 = staticinvoke <android.graphics.drawable.Drawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r4, r2, r1, $r3);

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VClipPath: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        return 0;
    }

    public boolean onStateChange(int[])
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        int[] r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r1 := @parameter0: int[];

        return 0;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.VectorDrawable$VClipPath: int NATIVE_ALLOCATION_SIZE> = 120;

        return;
    }
}
