class android.graphics.drawable.VectorDrawable$VFullPath extends android.graphics.drawable.VectorDrawable$VPath
{
    private static final android.util.Property FILL_ALPHA;
    private static final int FILL_ALPHA_INDEX;
    private static final android.util.Property FILL_COLOR;
    private static final int FILL_COLOR_INDEX;
    private static final int FILL_TYPE_INDEX;
    private static final int NATIVE_ALLOCATION_SIZE;
    private static final android.util.Property STROKE_ALPHA;
    private static final int STROKE_ALPHA_INDEX;
    private static final android.util.Property STROKE_COLOR;
    private static final int STROKE_COLOR_INDEX;
    private static final int STROKE_LINE_CAP_INDEX;
    private static final int STROKE_LINE_JOIN_INDEX;
    private static final int STROKE_MITER_LIMIT_INDEX;
    private static final android.util.Property STROKE_WIDTH;
    private static final int STROKE_WIDTH_INDEX;
    private static final int TOTAL_PROPERTY_COUNT;
    private static final android.util.Property TRIM_PATH_END;
    private static final int TRIM_PATH_END_INDEX;
    private static final android.util.Property TRIM_PATH_OFFSET;
    private static final int TRIM_PATH_OFFSET_INDEX;
    private static final android.util.Property TRIM_PATH_START;
    private static final int TRIM_PATH_START_INDEX;
    private static final java.util.HashMap sPropertyIndexMap;
    private static final java.util.HashMap sPropertyMap;
    android.content.res.ComplexColor mFillColors;
    private final long mNativePtr;
    private byte[] mPropertyData;
    android.content.res.ComplexColor mStrokeColors;
    private int[] mThemeAttrs;

    static void <clinit>()
    {
        android.graphics.drawable.VectorDrawable$VFullPath$1 $r0;
        android.graphics.drawable.VectorDrawable$VFullPath$2 $r1;
        android.graphics.drawable.VectorDrawable$VFullPath$3 $r2;
        android.graphics.drawable.VectorDrawable$VFullPath$4 $r3;
        android.graphics.drawable.VectorDrawable$VFullPath$5 $r4;
        android.graphics.drawable.VectorDrawable$VFullPath$6 $r5;
        android.graphics.drawable.VectorDrawable$VFullPath$7 $r6;
        android.graphics.drawable.VectorDrawable$VFullPath$8 $r7;
        android.graphics.drawable.VectorDrawable$VFullPath$9 $r8;
        android.graphics.drawable.VectorDrawable$VFullPath$10 $r9;

        <android.graphics.drawable.VectorDrawable$VFullPath: int TRIM_PATH_START_INDEX> = 5;

        <android.graphics.drawable.VectorDrawable$VFullPath: int TRIM_PATH_OFFSET_INDEX> = 7;

        <android.graphics.drawable.VectorDrawable$VFullPath: int TRIM_PATH_END_INDEX> = 6;

        <android.graphics.drawable.VectorDrawable$VFullPath: int TOTAL_PROPERTY_COUNT> = 12;

        <android.graphics.drawable.VectorDrawable$VFullPath: int STROKE_WIDTH_INDEX> = 0;

        <android.graphics.drawable.VectorDrawable$VFullPath: int STROKE_MITER_LIMIT_INDEX> = 10;

        <android.graphics.drawable.VectorDrawable$VFullPath: int STROKE_LINE_JOIN_INDEX> = 9;

        <android.graphics.drawable.VectorDrawable$VFullPath: int STROKE_LINE_CAP_INDEX> = 8;

        <android.graphics.drawable.VectorDrawable$VFullPath: int STROKE_COLOR_INDEX> = 1;

        <android.graphics.drawable.VectorDrawable$VFullPath: int STROKE_ALPHA_INDEX> = 2;

        <android.graphics.drawable.VectorDrawable$VFullPath: int NATIVE_ALLOCATION_SIZE> = 264;

        <android.graphics.drawable.VectorDrawable$VFullPath: int FILL_TYPE_INDEX> = 11;

        <android.graphics.drawable.VectorDrawable$VFullPath: int FILL_COLOR_INDEX> = 3;

        <android.graphics.drawable.VectorDrawable$VFullPath: int FILL_ALPHA_INDEX> = 4;

        $r0 = new android.graphics.drawable.VectorDrawable$VFullPath$1;

        specialinvoke $r0.<android.graphics.drawable.VectorDrawable$VFullPath$1: void <init>()>();

        <android.graphics.drawable.VectorDrawable$VFullPath: java.util.HashMap sPropertyIndexMap> = $r0;

        $r1 = new android.graphics.drawable.VectorDrawable$VFullPath$2;

        specialinvoke $r1.<android.graphics.drawable.VectorDrawable$VFullPath$2: void <init>(java.lang.String)>("strokeWidth");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property STROKE_WIDTH> = $r1;

        $r2 = new android.graphics.drawable.VectorDrawable$VFullPath$3;

        specialinvoke $r2.<android.graphics.drawable.VectorDrawable$VFullPath$3: void <init>(java.lang.String)>("strokeColor");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property STROKE_COLOR> = $r2;

        $r3 = new android.graphics.drawable.VectorDrawable$VFullPath$4;

        specialinvoke $r3.<android.graphics.drawable.VectorDrawable$VFullPath$4: void <init>(java.lang.String)>("strokeAlpha");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property STROKE_ALPHA> = $r3;

        $r4 = new android.graphics.drawable.VectorDrawable$VFullPath$5;

        specialinvoke $r4.<android.graphics.drawable.VectorDrawable$VFullPath$5: void <init>(java.lang.String)>("fillColor");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property FILL_COLOR> = $r4;

        $r5 = new android.graphics.drawable.VectorDrawable$VFullPath$6;

        specialinvoke $r5.<android.graphics.drawable.VectorDrawable$VFullPath$6: void <init>(java.lang.String)>("fillAlpha");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property FILL_ALPHA> = $r5;

        $r6 = new android.graphics.drawable.VectorDrawable$VFullPath$7;

        specialinvoke $r6.<android.graphics.drawable.VectorDrawable$VFullPath$7: void <init>(java.lang.String)>("trimPathStart");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property TRIM_PATH_START> = $r6;

        $r7 = new android.graphics.drawable.VectorDrawable$VFullPath$8;

        specialinvoke $r7.<android.graphics.drawable.VectorDrawable$VFullPath$8: void <init>(java.lang.String)>("trimPathEnd");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property TRIM_PATH_END> = $r7;

        $r8 = new android.graphics.drawable.VectorDrawable$VFullPath$9;

        specialinvoke $r8.<android.graphics.drawable.VectorDrawable$VFullPath$9: void <init>(java.lang.String)>("trimPathOffset");

        <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property TRIM_PATH_OFFSET> = $r8;

        $r9 = new android.graphics.drawable.VectorDrawable$VFullPath$10;

        specialinvoke $r9.<android.graphics.drawable.VectorDrawable$VFullPath$10: void <init>()>();

        <android.graphics.drawable.VectorDrawable$VFullPath: java.util.HashMap sPropertyMap> = $r9;

        return;
    }

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VPath: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = null;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = null;

        $l0 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$4800()>();

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr> = $l0;

        return;
    }

    public void <init>(android.graphics.drawable.VectorDrawable$VFullPath)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0, r1;
        long $l0, $l1;
        int[] $r2;
        android.content.res.ComplexColor $r3, $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VFullPath;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VPath: void <init>(android.graphics.drawable.VectorDrawable$VPath)>(r1);

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = null;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = null;

        $l0 = r1.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$4900(long)>($l0);

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr> = $l1;

        $r2 = r1.<android.graphics.drawable.VectorDrawable$VFullPath: int[] mThemeAttrs>;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: int[] mThemeAttrs> = $r2;

        $r3 = r1.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = $r3;

        $r4 = r1.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = $r4;

        return;
    }

    static android.util.Property access$4000()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property STROKE_WIDTH>;

        return $r0;
    }

    static android.util.Property access$4100()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property STROKE_COLOR>;

        return $r0;
    }

    static android.util.Property access$4200()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property STROKE_ALPHA>;

        return $r0;
    }

    static android.util.Property access$4300()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property FILL_COLOR>;

        return $r0;
    }

    static android.util.Property access$4400()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property FILL_ALPHA>;

        return $r0;
    }

    static android.util.Property access$4500()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property TRIM_PATH_START>;

        return $r0;
    }

    static android.util.Property access$4600()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property TRIM_PATH_END>;

        return $r0;
    }

    static android.util.Property access$4700()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VFullPath: android.util.Property TRIM_PATH_OFFSET>;

        return $r0;
    }

    private boolean canComplexColorApplyTheme(android.content.res.ComplexColor)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        android.content.res.ComplexColor r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r1 := @parameter0: android.content.res.ComplexColor;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.content.res.ComplexColor: boolean canApplyTheme()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        android.content.res.TypedArray r1;
        byte[] $r2, $r3, $r5, $r12;
        long $l0, $l4, $l5, $l7, l13, l14, l15, l16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.RuntimeException $r4;
        java.nio.ByteOrder $r6;
        int $i1, $i2, $i3, $i6, i8, i9, i10, i11, i12, i17, i18, i19;
        int[] $r7;
        android.content.res.GradientColor $r8, $r9;
        android.util.PathParser$PathData $r10;
        java.lang.String $r11, r16, r17;
        java.nio.ByteBuffer r13;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13;
        android.graphics.Shader r14, r15, r20;
        android.content.res.ComplexColor r18, r19;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r1 := @parameter0: android.content.res.TypedArray;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: byte[] mPropertyData>;

        if $r2 != null goto label01;

        $r12 = newarray (byte)[48];

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: byte[] mPropertyData> = $r12;

     label01:
        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: byte[] mPropertyData>;

        $z0 = staticinvoke <android.graphics.drawable.VectorDrawable: boolean access$5200(long,byte[],int)>($l0, $r3, 48);

        if $z0 == 0 goto label18;

        $r5 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: byte[] mPropertyData>;

        r13 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r5);

        $r6 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r6);

        f0 = virtualinvoke r13.<java.nio.ByteBuffer: float getFloat(int)>(0);

        i8 = virtualinvoke r13.<java.nio.ByteBuffer: int getInt(int)>(4);

        f1 = virtualinvoke r13.<java.nio.ByteBuffer: float getFloat(int)>(8);

        i9 = virtualinvoke r13.<java.nio.ByteBuffer: int getInt(int)>(12);

        f2 = virtualinvoke r13.<java.nio.ByteBuffer: float getFloat(int)>(16);

        f3 = virtualinvoke r13.<java.nio.ByteBuffer: float getFloat(int)>(20);

        f4 = virtualinvoke r13.<java.nio.ByteBuffer: float getFloat(int)>(24);

        f5 = virtualinvoke r13.<java.nio.ByteBuffer: float getFloat(int)>(28);

        i10 = virtualinvoke r13.<java.nio.ByteBuffer: int getInt(int)>(32);

        i11 = virtualinvoke r13.<java.nio.ByteBuffer: int getInt(int)>(36);

        f6 = virtualinvoke r13.<java.nio.ByteBuffer: float getFloat(int)>(40);

        i12 = virtualinvoke r13.<java.nio.ByteBuffer: int getInt(int)>(44);

        r14 = null;

        r15 = null;

        $i1 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: int mChangingConfigurations>;

        $i2 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i3 = $i1 | $i2;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: int mChangingConfigurations> = $i3;

        $r7 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: int[] mThemeAttrs> = $r7;

        r16 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r16 == null goto label02;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: java.lang.String mPathName> = r16;

        $l7 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $r11 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: java.lang.String mPathName>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2000(long,java.lang.String)>($l7, $r11);

        goto label02;

     label02:
        r17 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(2);

        if r17 == null goto label03;

        $r10 = new android.util.PathParser$PathData;

        specialinvoke $r10.<android.util.PathParser$PathData: void <init>(java.lang.String)>(r17);

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.util.PathParser$PathData mPathData> = $r10;

        $l5 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $i6 = virtualinvoke r17.<java.lang.String: int length()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$3900(long,java.lang.String,int)>($l5, r17, $i6);

        goto label03;

     label03:
        r18 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.ComplexColor getComplexColor(int)>(1);

        if r18 == null goto label08;

        $z4 = r18 instanceof android.content.res.GradientColor;

        if $z4 == 0 goto label04;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = r18;

        $r9 = (android.content.res.GradientColor) r18;

        r15 = virtualinvoke $r9.<android.content.res.GradientColor: android.graphics.Shader getShader()>();

        goto label07;

     label04:
        $z5 = virtualinvoke r18.<android.content.res.ComplexColor: boolean isStateful()>();

        if $z5 != 0 goto label06;

        $z6 = virtualinvoke r18.<android.content.res.ComplexColor: boolean canApplyTheme()>();

        if $z6 == 0 goto label05;

        goto label06;

     label05:
        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = null;

        goto label07;

     label06:
        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = r18;

     label07:
        i9 = virtualinvoke r18.<android.content.res.ComplexColor: int getDefaultColor()>();

        r14 = r15;

        goto label08;

     label08:
        r19 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.ComplexColor getComplexColor(int)>(3);

        if r19 == null goto label13;

        $z1 = r19 instanceof android.content.res.GradientColor;

        if $z1 == 0 goto label09;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = r19;

        $r8 = (android.content.res.GradientColor) r19;

        r20 = virtualinvoke $r8.<android.content.res.GradientColor: android.graphics.Shader getShader()>();

        goto label12;

     label09:
        $z2 = virtualinvoke r19.<android.content.res.ComplexColor: boolean isStateful()>();

        if $z2 != 0 goto label11;

        $z3 = virtualinvoke r19.<android.content.res.ComplexColor: boolean canApplyTheme()>();

        if $z3 == 0 goto label10;

        goto label11;

     label10:
        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = null;

        r20 = null;

        goto label12;

     label11:
        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = r19;

        r20 = null;

     label12:
        i8 = virtualinvoke r19.<android.content.res.ComplexColor: int getDefaultColor()>();

        goto label14;

     label13:
        r20 = null;

     label14:
        l13 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        if r14 == null goto label15;

        l14 = virtualinvoke r14.<android.graphics.Shader: long getNativeInstance()>();

        goto label16;

     label15:
        l14 = 0L;

     label16:
        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5300(long,long)>(l13, l14);

        l15 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        l16 = 0L;

        if r20 == null goto label17;

        l16 = virtualinvoke r20.<android.graphics.Shader: long getNativeInstance()>();

     label17:
        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5400(long,long)>(l15, l16);

        f7 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(12, f2);

        i17 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(8, i10);

        i18 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(9, i11);

        f8 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(10, f6);

        f9 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(11, f1);

        f10 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(4, f0);

        f11 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(6, f4);

        f12 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(7, f5);

        f13 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(5, f3);

        i19 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(13, i12);

        $l4 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5500(long,float,int,float,int,float,float,float,float,float,int,int,int)>($l4, f10, i8, f9, i9, f7, f13, f11, f12, f8, i17, i18, i19);

        return;

     label18:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error: inconsistent property count");

        throw $r4;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        android.content.res.ComplexColor $r1, $r2, $r3, $r6, r13, r14;
        long $l0, $l2, $l3, $l4, $l6, $l7;
        int $i1, $i5;
        android.content.res.GradientColor $r4, $r7;
        android.graphics.Shader $r5, $r8;
        int[] $r9, r11;
        android.content.res.Resources$Theme r10;
        android.content.res.TypedArray r12;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r10 := @parameter0: android.content.res.Resources$Theme;

        r11 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: int[] mThemeAttrs>;

        if r11 == null goto label1;

        $r9 = <com.android.internal.R$styleable: int[] VectorDrawablePath>;

        r12 = virtualinvoke r10.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>(r11, $r9);

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: void updateStateFromTypedArray(android.content.res.TypedArray)>(r12);

        virtualinvoke r12.<android.content.res.TypedArray: void recycle()>();

     label1:
        $r1 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        z0 = specialinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean canComplexColorApplyTheme(android.content.res.ComplexColor)>($r1);

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        z1 = specialinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean canComplexColorApplyTheme(android.content.res.ComplexColor)>($r2);

        if z0 == 0 goto label3;

        $r6 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        r13 = virtualinvoke $r6.<android.content.res.ComplexColor: android.content.res.ComplexColor obtainForTheme(android.content.res.Resources$Theme)>(r10);

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = r13;

        $z4 = r13 instanceof android.content.res.GradientColor;

        if $z4 == 0 goto label2;

        $l6 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $r7 = (android.content.res.GradientColor) r13;

        $r8 = virtualinvoke $r7.<android.content.res.GradientColor: android.graphics.Shader getShader()>();

        $l7 = virtualinvoke $r8.<android.graphics.Shader: long getNativeInstance()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5300(long,long)>($l6, $l7);

        goto label3;

     label2:
        $z5 = r13 instanceof android.content.res.ColorStateList;

        if $z5 == 0 goto label3;

        $l4 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $i5 = virtualinvoke r13.<android.content.res.ComplexColor: int getDefaultColor()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5100(long,int)>($l4, $i5);

     label3:
        if z1 == 0 goto label5;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        r14 = virtualinvoke $r3.<android.content.res.ComplexColor: android.content.res.ComplexColor obtainForTheme(android.content.res.Resources$Theme)>(r10);

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = r14;

        $z2 = r14 instanceof android.content.res.GradientColor;

        if $z2 == 0 goto label4;

        $l2 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $r4 = (android.content.res.GradientColor) r14;

        $r5 = virtualinvoke $r4.<android.content.res.GradientColor: android.graphics.Shader getShader()>();

        $l3 = virtualinvoke $r5.<android.graphics.Shader: long getNativeInstance()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5400(long,long)>($l2, $l3);

        goto label5;

     label4:
        $z3 = r14 instanceof android.content.res.ColorStateList;

        if $z3 == 0 goto label5;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        $i1 = virtualinvoke r14.<android.content.res.ComplexColor: int getDefaultColor()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5000(long,int)>($l0, $i1);

     label5:
        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean z0, z1;
        int[] $r1;
        android.content.res.ComplexColor $r2, $r3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: int[] mThemeAttrs>;

        if $r1 == null goto label1;

        return 1;

     label1:
        $r2 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        z0 = specialinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean canComplexColorApplyTheme(android.content.res.ComplexColor)>($r2);

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        z1 = specialinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean canComplexColorApplyTheme(android.content.res.ComplexColor)>($r3);

        if z0 != 0 goto label3;

        if z1 == 0 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    float getFillAlpha()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$6200(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    int getFillColor()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        int i1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        i1 = staticinvoke <android.graphics.drawable.VectorDrawable: int access$6100(long)>($l0);

        goto label2;

     label1:
        i1 = 0;

     label2:
        return i1;
    }

    public long getNativePtr()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        return $l0;
    }

    int getNativeSize()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        return 264;
    }

    android.util.Property getProperty(java.lang.String)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        java.lang.String r1;
        android.util.Property r2, $r6;
        java.util.HashMap $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.Property getProperty(java.lang.String)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r3 = <android.graphics.drawable.VectorDrawable$VFullPath: java.util.HashMap sPropertyMap>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r4 = <android.graphics.drawable.VectorDrawable$VFullPath: java.util.HashMap sPropertyMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (android.util.Property) $r5;

        return $r6;

     label2:
        return null;
    }

    int getPropertyIndex(java.lang.String)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        java.lang.String r1;
        java.util.HashMap $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.graphics.drawable.VectorDrawable$VFullPath: java.util.HashMap sPropertyIndexMap>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r3 = <android.graphics.drawable.VectorDrawable$VFullPath: java.util.HashMap sPropertyIndexMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    float getStrokeAlpha()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$5900(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    int getStrokeColor()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        int i1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        i1 = staticinvoke <android.graphics.drawable.VectorDrawable: int access$5600(long)>($l0);

        goto label2;

     label1:
        i1 = 0;

     label2:
        return i1;
    }

    float getStrokeWidth()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$5700(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    float getTrimPathEnd()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$6600(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    float getTrimPathOffset()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$6800(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    float getTrimPathStart()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$6400(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        boolean $z0, $z1, $z2, $z3, z4;
        android.content.res.ColorStateList $r1, $r2;
        android.content.res.ComplexColor r3, r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r3 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        if r3 == null goto label1;

        $z0 = r3 instanceof android.content.res.ColorStateList;

        if $z0 == 0 goto label1;

        $r1 = (android.content.res.ColorStateList) r3;

        $z1 = virtualinvoke $r1.<android.content.res.ColorStateList: boolean hasFocusStateSpecified()>();

        if $z1 == 0 goto label1;

        r4 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        if r4 == null goto label1;

        $z2 = r4 instanceof android.content.res.ColorStateList;

        if $z2 == 0 goto label1;

        $r2 = (android.content.res.ColorStateList) r4;

        $z3 = virtualinvoke $r2.<android.content.res.ColorStateList: boolean hasFocusStateSpecified()>();

        if $z3 == 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        return z4;
    }

    public void inflate(android.content.res.Resources, android.util.AttributeSet, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        android.util.AttributeSet r1;
        android.content.res.Resources$Theme r2;
        int[] $r3;
        android.content.res.Resources r4;
        android.content.res.TypedArray r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r4 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.AttributeSet;

        r2 := @parameter2: android.content.res.Resources$Theme;

        $r3 = <com.android.internal.R$styleable: int[] VectorDrawablePath>;

        r5 = staticinvoke <android.graphics.drawable.Drawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r4, r2, r1, $r3);

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        android.content.res.ComplexColor $r1, $r2;
        boolean z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        if $r1 != null goto label2;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        if $r2 == null goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public boolean onStateChange(int[])
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        int[] r1;
        boolean $z1, $z2, z4, z5, z6, z7, z8, z9;
        android.content.res.ComplexColor $r2, $r4, r6, r7;
        android.content.res.ColorStateList $r3, $r5;
        long $l0, $l1;
        int i2, i3, i4, i5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        r1 := @parameter0: int[];

        r6 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        z4 = 0;

        if r6 == null goto label3;

        z4 = 0;

        $z2 = r6 instanceof android.content.res.ColorStateList;

        if $z2 == 0 goto label3;

        i2 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: int getStrokeColor()>();

        $r4 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors>;

        $r5 = (android.content.res.ColorStateList) $r4;

        i3 = virtualinvoke $r5.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, i2);

        if i2 == i3 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        z6 = 0 | z5;

        z4 = z6;

        if i2 == i3 goto label3;

        $l1 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5000(long,int)>($l1, i3);

        z4 = z6;

     label3:
        r7 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        z7 = z4;

        if r7 == null goto label6;

        z7 = z4;

        $z1 = r7 instanceof android.content.res.ColorStateList;

        if $z1 == 0 goto label6;

        i4 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: int getFillColor()>();

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors>;

        $r3 = (android.content.res.ColorStateList) $r2;

        i5 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, i4);

        if i4 == i5 goto label4;

        z8 = 1;

        goto label5;

     label4:
        z8 = 0;

     label5:
        z9 = z4 | z8;

        z7 = z9;

        if i4 == i5 goto label6;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5100(long,int)>($l0, i5);

        z7 = z9;

     label6:
        return z7;
    }

    void setFillAlpha(float)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$6300(long,float)>($l0, f0);

     label1:
        return;
    }

    void setFillColor(int)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        int i0;
        boolean $z0;
        long $l1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        i0 := @parameter0: int;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mFillColors> = null;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l1 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5100(long,int)>($l1, i0);

     label1:
        return;
    }

    void setStrokeAlpha(float)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$6000(long,float)>($l0, f0);

     label1:
        return;
    }

    void setStrokeColor(int)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        int i0;
        boolean $z0;
        long $l1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        i0 := @parameter0: int;

        r0.<android.graphics.drawable.VectorDrawable$VFullPath: android.content.res.ComplexColor mStrokeColors> = null;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l1 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5000(long,int)>($l1, i0);

     label1:
        return;
    }

    void setStrokeWidth(float)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$5800(long,float)>($l0, f0);

     label1:
        return;
    }

    void setTrimPathEnd(float)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$6700(long,float)>($l0, f0);

     label1:
        return;
    }

    void setTrimPathOffset(float)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$6900(long,float)>($l0, f0);

     label1:
        return;
    }

    void setTrimPathStart(float)
    {
        android.graphics.drawable.VectorDrawable$VFullPath r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VFullPath;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VFullPath: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VFullPath: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$6500(long,float)>($l0, f0);

     label1:
        return;
    }
}
