class android.graphics.drawable.VectorDrawable$VGroup extends android.graphics.drawable.VectorDrawable$VObject
{
    private static final int NATIVE_ALLOCATION_SIZE;
    private static final android.util.Property PIVOT_X;
    private static final int PIVOT_X_INDEX;
    private static final android.util.Property PIVOT_Y;
    private static final int PIVOT_Y_INDEX;
    private static final android.util.Property ROTATION;
    private static final int ROTATION_INDEX;
    private static final android.util.Property SCALE_X;
    private static final int SCALE_X_INDEX;
    private static final android.util.Property SCALE_Y;
    private static final int SCALE_Y_INDEX;
    private static final int TRANSFORM_PROPERTY_COUNT;
    private static final android.util.Property TRANSLATE_X;
    private static final int TRANSLATE_X_INDEX;
    private static final android.util.Property TRANSLATE_Y;
    private static final int TRANSLATE_Y_INDEX;
    private static final java.util.HashMap sPropertyIndexMap;
    private static final java.util.HashMap sPropertyMap;
    private int mChangingConfigurations;
    private final java.util.ArrayList mChildren;
    private java.lang.String mGroupName;
    private boolean mIsStateful;
    private final long mNativePtr;
    private int[] mThemeAttrs;
    private float[] mTransform;

    static void <clinit>()
    {
        android.graphics.drawable.VectorDrawable$VGroup$1 $r0;
        android.graphics.drawable.VectorDrawable$VGroup$2 $r1;
        android.graphics.drawable.VectorDrawable$VGroup$3 $r2;
        android.graphics.drawable.VectorDrawable$VGroup$4 $r3;
        android.graphics.drawable.VectorDrawable$VGroup$5 $r4;
        android.graphics.drawable.VectorDrawable$VGroup$6 $r5;
        android.graphics.drawable.VectorDrawable$VGroup$7 $r6;
        android.graphics.drawable.VectorDrawable$VGroup$8 $r7;
        android.graphics.drawable.VectorDrawable$VGroup$9 $r8;

        <android.graphics.drawable.VectorDrawable$VGroup: int TRANSLATE_Y_INDEX> = 6;

        <android.graphics.drawable.VectorDrawable$VGroup: int TRANSLATE_X_INDEX> = 5;

        <android.graphics.drawable.VectorDrawable$VGroup: int TRANSFORM_PROPERTY_COUNT> = 7;

        <android.graphics.drawable.VectorDrawable$VGroup: int SCALE_Y_INDEX> = 4;

        <android.graphics.drawable.VectorDrawable$VGroup: int SCALE_X_INDEX> = 3;

        <android.graphics.drawable.VectorDrawable$VGroup: int ROTATION_INDEX> = 0;

        <android.graphics.drawable.VectorDrawable$VGroup: int PIVOT_Y_INDEX> = 2;

        <android.graphics.drawable.VectorDrawable$VGroup: int PIVOT_X_INDEX> = 1;

        <android.graphics.drawable.VectorDrawable$VGroup: int NATIVE_ALLOCATION_SIZE> = 100;

        $r0 = new android.graphics.drawable.VectorDrawable$VGroup$1;

        specialinvoke $r0.<android.graphics.drawable.VectorDrawable$VGroup$1: void <init>()>();

        <android.graphics.drawable.VectorDrawable$VGroup: java.util.HashMap sPropertyIndexMap> = $r0;

        $r1 = new android.graphics.drawable.VectorDrawable$VGroup$2;

        specialinvoke $r1.<android.graphics.drawable.VectorDrawable$VGroup$2: void <init>(java.lang.String)>("translateX");

        <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property TRANSLATE_X> = $r1;

        $r2 = new android.graphics.drawable.VectorDrawable$VGroup$3;

        specialinvoke $r2.<android.graphics.drawable.VectorDrawable$VGroup$3: void <init>(java.lang.String)>("translateY");

        <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property TRANSLATE_Y> = $r2;

        $r3 = new android.graphics.drawable.VectorDrawable$VGroup$4;

        specialinvoke $r3.<android.graphics.drawable.VectorDrawable$VGroup$4: void <init>(java.lang.String)>("scaleX");

        <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property SCALE_X> = $r3;

        $r4 = new android.graphics.drawable.VectorDrawable$VGroup$5;

        specialinvoke $r4.<android.graphics.drawable.VectorDrawable$VGroup$5: void <init>(java.lang.String)>("scaleY");

        <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property SCALE_Y> = $r4;

        $r5 = new android.graphics.drawable.VectorDrawable$VGroup$6;

        specialinvoke $r5.<android.graphics.drawable.VectorDrawable$VGroup$6: void <init>(java.lang.String)>("pivotX");

        <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property PIVOT_X> = $r5;

        $r6 = new android.graphics.drawable.VectorDrawable$VGroup$7;

        specialinvoke $r6.<android.graphics.drawable.VectorDrawable$VGroup$7: void <init>(java.lang.String)>("pivotY");

        <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property PIVOT_Y> = $r6;

        $r7 = new android.graphics.drawable.VectorDrawable$VGroup$8;

        specialinvoke $r7.<android.graphics.drawable.VectorDrawable$VGroup$8: void <init>(java.lang.String)>("rotation");

        <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property ROTATION> = $r7;

        $r8 = new android.graphics.drawable.VectorDrawable$VGroup$9;

        specialinvoke $r8.<android.graphics.drawable.VectorDrawable$VGroup$9: void <init>()>();

        <android.graphics.drawable.VectorDrawable$VGroup: java.util.HashMap sPropertyMap> = $r8;

        return;
    }

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        java.util.ArrayList $r1;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VObject: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren> = $r1;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String mGroupName> = null;

        $l0 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$1700()>();

        r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr> = $l0;

        return;
    }

    public void <init>(android.graphics.drawable.VectorDrawable$VGroup, android.util.ArrayMap)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0, $r13, $r14, r16;
        android.util.ArrayMap r1;
        java.util.ArrayList $r2, r18;
        boolean $z0, $z1, $z2, $z3;
        int[] $r3;
        int $i0, i3, $i4;
        long $l1, $l2;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r5;
        android.graphics.drawable.VectorDrawable$VClipPath $r6, $r7;
        java.lang.String $r8, $r9, r17;
        android.graphics.drawable.VectorDrawable$VFullPath $r11, $r12;
        android.graphics.drawable.VectorDrawable$VObject r19;
        android.graphics.drawable.VectorDrawable$VPath r20;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r16 := @parameter0: android.graphics.drawable.VectorDrawable$VGroup;

        r1 := @parameter1: android.util.ArrayMap;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VObject: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren> = $r2;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String mGroupName> = null;

        $z0 = r16.<android.graphics.drawable.VectorDrawable$VGroup: boolean mIsStateful>;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean mIsStateful> = $z0;

        $r3 = r16.<android.graphics.drawable.VectorDrawable$VGroup: int[] mThemeAttrs>;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: int[] mThemeAttrs> = $r3;

        r17 = r16.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String mGroupName>;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String mGroupName> = r17;

        $i0 = r16.<android.graphics.drawable.VectorDrawable$VGroup: int mChangingConfigurations>;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: int mChangingConfigurations> = $i0;

        if r17 == null goto label1;

        virtualinvoke r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r0);

     label1:
        $l1 = r16.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        $l2 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$1600(long)>($l1);

        r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr> = $l2;

        r18 = r16.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        i3 = 0;

     label2:
        $i4 = virtualinvoke r18.<java.util.ArrayList: int size()>();

        if i3 >= $i4 goto label8;

        $r4 = virtualinvoke r18.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r19 = (android.graphics.drawable.VectorDrawable$VObject) $r4;

        $z1 = r19 instanceof android.graphics.drawable.VectorDrawable$VGroup;

        if $z1 == 0 goto label3;

        $r13 = new android.graphics.drawable.VectorDrawable$VGroup;

        $r14 = (android.graphics.drawable.VectorDrawable$VGroup) r19;

        specialinvoke $r13.<android.graphics.drawable.VectorDrawable$VGroup: void <init>(android.graphics.drawable.VectorDrawable$VGroup,android.util.ArrayMap)>($r14, r1);

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: void addChild(android.graphics.drawable.VectorDrawable$VObject)>($r13);

        goto label6;

     label3:
        $z2 = r19 instanceof android.graphics.drawable.VectorDrawable$VFullPath;

        if $z2 == 0 goto label4;

        $r11 = new android.graphics.drawable.VectorDrawable$VFullPath;

        $r12 = (android.graphics.drawable.VectorDrawable$VFullPath) r19;

        specialinvoke $r11.<android.graphics.drawable.VectorDrawable$VFullPath: void <init>(android.graphics.drawable.VectorDrawable$VFullPath)>($r12);

        r20 = $r11;

        goto label5;

     label4:
        $z3 = r19 instanceof android.graphics.drawable.VectorDrawable$VClipPath;

        if $z3 == 0 goto label7;

        $r6 = new android.graphics.drawable.VectorDrawable$VClipPath;

        $r7 = (android.graphics.drawable.VectorDrawable$VClipPath) r19;

        specialinvoke $r6.<android.graphics.drawable.VectorDrawable$VClipPath: void <init>(android.graphics.drawable.VectorDrawable$VClipPath)>($r7);

        r20 = $r6;

     label5:
        virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: void addChild(android.graphics.drawable.VectorDrawable$VObject)>(r20);

        $r8 = r20.<android.graphics.drawable.VectorDrawable$VPath: java.lang.String mPathName>;

        if $r8 == null goto label6;

        $r9 = r20.<android.graphics.drawable.VectorDrawable$VPath: java.lang.String mPathName>;

        virtualinvoke r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r20);

     label6:
        i3 = i3 + 1;

        goto label2;

     label7:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unknown object in the tree!");

        throw $r5;

     label8:
        return;
    }

    static int access$100(android.graphics.drawable.VectorDrawable$VGroup)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        int $i0;

        r0 := @parameter0: android.graphics.drawable.VectorDrawable$VGroup;

        $i0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: int mChangingConfigurations>;

        return $i0;
    }

    static android.util.Property access$1000()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property TRANSLATE_Y>;

        return $r0;
    }

    static android.util.Property access$1100()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property SCALE_X>;

        return $r0;
    }

    static android.util.Property access$1200()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property SCALE_Y>;

        return $r0;
    }

    static android.util.Property access$1300()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property PIVOT_X>;

        return $r0;
    }

    static android.util.Property access$1400()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property PIVOT_Y>;

        return $r0;
    }

    static android.util.Property access$1500()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property ROTATION>;

        return $r0;
    }

    static long access$200(android.graphics.drawable.VectorDrawable$VGroup)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        long $l0;

        r0 := @parameter0: android.graphics.drawable.VectorDrawable$VGroup;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        return $l0;
    }

    static android.util.Property access$900()
    {
        android.util.Property $r0;

        $r0 = <android.graphics.drawable.VectorDrawable$VGroup: android.util.Property TRANSLATE_X>;

        return $r0;
    }

    static int getPropertyIndex(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashMap $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.graphics.drawable.VectorDrawable$VGroup: java.util.HashMap sPropertyIndexMap>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = <android.graphics.drawable.VectorDrawable$VGroup: java.util.HashMap sPropertyIndexMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        return -1;
    }

    public void addChild(android.graphics.drawable.VectorDrawable$VObject)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        android.graphics.drawable.VectorDrawable$VObject r1;
        long $l0, $l1;
        java.util.ArrayList $r2;
        boolean $z1, $z2, $z3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VObject;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        $l1 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VObject: long getNativePtr()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$1800(long,long)>($l0, $l1);

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $z1 = r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean mIsStateful>;

        $z2 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VObject: boolean isStateful()>();

        $z3 = $z1 | $z2;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean mIsStateful> = $z3;

        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        android.content.res.Resources$Theme r1;
        int i0, i1;
        android.graphics.drawable.VectorDrawable$VObject r2;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;
        int[] $r4, r5;
        android.content.res.TypedArray r6;
        java.util.ArrayList r7;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r1 := @parameter0: android.content.res.Resources$Theme;

        r5 = r0.<android.graphics.drawable.VectorDrawable$VGroup: int[] mThemeAttrs>;

        if r5 == null goto label1;

        $r4 = <com.android.internal.R$styleable: int[] VectorDrawableGroup>;

        r6 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>(r5, $r4);

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: void updateStateFromTypedArray(android.content.res.TypedArray)>(r6);

        virtualinvoke r6.<android.content.res.TypedArray: void recycle()>();

     label1:
        r7 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        i1 = 0;

        i0 = virtualinvoke r7.<java.util.ArrayList: int size()>();

     label2:
        if i1 >= i0 goto label4;

        $r3 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.graphics.drawable.VectorDrawable$VObject) $r3;

        $z0 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VObject: boolean canApplyTheme()>();

        if $z0 == 0 goto label3;

        virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VObject: void applyTheme(android.content.res.Resources$Theme)>(r1);

        $z1 = r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean mIsStateful>;

        $z2 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VObject: boolean isStateful()>();

        $z3 = $z1 | $z2;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean mIsStateful> = $z3;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        java.util.ArrayList r1;
        int i0, i1;
        int[] $r2;
        java.lang.Object $r3;
        android.graphics.drawable.VectorDrawable$VObject $r4;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VGroup: int[] mThemeAttrs>;

        if $r2 == null goto label1;

        return 1;

     label1:
        r1 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        i1 = 0;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label2:
        if i1 >= i0 goto label4;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r4 = (android.graphics.drawable.VectorDrawable$VObject) $r3;

        $z0 = virtualinvoke $r4.<android.graphics.drawable.VectorDrawable$VObject: boolean canApplyTheme()>();

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public java.lang.String getGroupName()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        java.lang.String $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String mGroupName>;

        return $r1;
    }

    public long getNativePtr()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        return $l0;
    }

    int getNativeSize()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1, i2, i3;
        java.lang.Object $r3;
        android.graphics.drawable.VectorDrawable$VObject $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        i2 = 100;

        i3 = 0;

     label1:
        $r1 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i3 >= $i0 goto label2;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r4 = (android.graphics.drawable.VectorDrawable$VObject) $r3;

        $i1 = virtualinvoke $r4.<android.graphics.drawable.VectorDrawable$VObject: int getNativeSize()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public float getPivotX()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$2400(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public float getPivotY()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$2600(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    android.util.Property getProperty(java.lang.String)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        java.lang.String r1;
        java.util.HashMap $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.util.Property $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.graphics.drawable.VectorDrawable$VGroup: java.util.HashMap sPropertyMap>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = <android.graphics.drawable.VectorDrawable$VGroup: java.util.HashMap sPropertyMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (android.util.Property) $r4;

        return $r5;

     label1:
        return null;
    }

    public float getRotation()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$2200(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public float getScaleX()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$2800(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public float getScaleY()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$3000(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public float getTranslateX()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$3200(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public float getTranslateY()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;
        long $l0;
        float f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$3400(long)>($l0);

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        java.util.ArrayList r1;
        int i0, i1;
        android.graphics.drawable.VectorDrawable$VObject r2;
        java.lang.Object $r3;
        boolean $z0, $z1, z2, z3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        z2 = 0;

        r1 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        i1 = 0;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label1:
        if i1 >= i0 goto label3;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.graphics.drawable.VectorDrawable$VObject) $r3;

        z3 = z2;

        $z0 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VObject: boolean isStateful()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VObject: boolean hasFocusStateSpecified()>();

        z3 = z2 | $z1;

     label2:
        i1 = i1 + 1;

        z2 = z3;

        goto label1;

     label3:
        return z2;
    }

    public void inflate(android.content.res.Resources, android.util.AttributeSet, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        android.util.AttributeSet r1;
        android.content.res.Resources$Theme r2;
        int[] $r3;
        android.content.res.Resources r4;
        android.content.res.TypedArray r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r4 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.AttributeSet;

        r2 := @parameter2: android.content.res.Resources$Theme;

        $r3 = <com.android.internal.R$styleable: int[] VectorDrawableGroup>;

        r5 = staticinvoke <android.graphics.drawable.Drawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r4, r2, r1, $r3);

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        $z0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean mIsStateful>;

        return $z0;
    }

    public boolean onStateChange(int[])
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        int[] r1;
        java.util.ArrayList r2;
        int i0, i1;
        android.graphics.drawable.VectorDrawable$VObject r3;
        java.lang.Object $r4;
        boolean $z0, $z1, z2, z3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r1 := @parameter0: int[];

        z2 = 0;

        r2 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        i1 = 0;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label1:
        if i1 >= i0 goto label3;

        $r4 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (android.graphics.drawable.VectorDrawable$VObject) $r4;

        z3 = z2;

        $z0 = virtualinvoke r3.<android.graphics.drawable.VectorDrawable$VObject: boolean isStateful()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r3.<android.graphics.drawable.VectorDrawable$VObject: boolean onStateChange(int[])>(r1);

        z3 = z2 | $z1;

     label2:
        i1 = i1 + 1;

        z2 = z3;

        goto label1;

     label3:
        return z2;
    }

    public void setPivotX(float)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2500(long,float)>($l0, f0);

     label1:
        return;
    }

    public void setPivotY(float)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2700(long,float)>($l0, f0);

     label1:
        return;
    }

    public void setRotation(float)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2300(long,float)>($l0, f0);

     label1:
        return;
    }

    public void setScaleX(float)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2900(long,float)>($l0, f0);

     label1:
        return;
    }

    public void setScaleY(float)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$3100(long,float)>($l0, f0);

     label1:
        return;
    }

    public void setTranslateX(float)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$3300(long,float)>($l0, f0);

     label1:
        return;
    }

    public void setTranslateY(float)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0;
        boolean $z0;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        f0 := @parameter0: float;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VGroup: boolean isTreeValid()>();

        if $z0 == 0 goto label1;

        $l0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$3500(long,float)>($l0, f0);

     label1:
        return;
    }

    public void setTree(com.android.internal.util.VirtualRefBasePtr)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        com.android.internal.util.VirtualRefBasePtr r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        android.graphics.drawable.VectorDrawable$VObject $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r1 := @parameter0: com.android.internal.util.VirtualRefBasePtr;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VObject: void setTree(com.android.internal.util.VirtualRefBasePtr)>(r1);

        i1 = 0;

     label1:
        $r2 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.graphics.drawable.VectorDrawable$VObject) $r4;

        virtualinvoke $r5.<android.graphics.drawable.VectorDrawable$VObject: void setTree(com.android.internal.util.VirtualRefBasePtr)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.VectorDrawable$VGroup r0;
        float f0, f1, f2, f3, f4, f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        int $i0, $i1, $i2;
        int[] $r1;
        float[] $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        long $l3, $l4, $l5;
        boolean $z0;
        java.lang.RuntimeException $r4;
        android.content.res.TypedArray r13;
        java.lang.String r14;

        r0 := @this: android.graphics.drawable.VectorDrawable$VGroup;

        r13 := @parameter0: android.content.res.TypedArray;

        $i0 = r0.<android.graphics.drawable.VectorDrawable$VGroup: int mChangingConfigurations>;

        $i1 = virtualinvoke r13.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: int mChangingConfigurations> = $i2;

        $r1 = virtualinvoke r13.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r0.<android.graphics.drawable.VectorDrawable$VGroup: int[] mThemeAttrs> = $r1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        if $r2 != null goto label1;

        $r12 = newarray (float)[7];

        r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform> = $r12;

     label1:
        $l3 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $z0 = staticinvoke <android.graphics.drawable.VectorDrawable: boolean access$1900(long,float[],int)>($l3, $r3, 7);

        if $z0 == 0 goto label3;

        $r5 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $f7 = $r5[0];

        f0 = virtualinvoke r13.<android.content.res.TypedArray: float getFloat(int,float)>(5, $f7);

        $r6 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $f8 = $r6[1];

        f1 = virtualinvoke r13.<android.content.res.TypedArray: float getFloat(int,float)>(1, $f8);

        $r7 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $f9 = $r7[2];

        f2 = virtualinvoke r13.<android.content.res.TypedArray: float getFloat(int,float)>(2, $f9);

        $r8 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $f10 = $r8[3];

        f3 = virtualinvoke r13.<android.content.res.TypedArray: float getFloat(int,float)>(3, $f10);

        $r9 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $f11 = $r9[4];

        f4 = virtualinvoke r13.<android.content.res.TypedArray: float getFloat(int,float)>(4, $f11);

        $r10 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $f12 = $r10[5];

        f5 = virtualinvoke r13.<android.content.res.TypedArray: float getFloat(int,float)>(6, $f12);

        $r11 = r0.<android.graphics.drawable.VectorDrawable$VGroup: float[] mTransform>;

        $f13 = $r11[6];

        f6 = virtualinvoke r13.<android.content.res.TypedArray: float getFloat(int,float)>(7, $f13);

        r14 = virtualinvoke r13.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r14 == null goto label2;

        r0.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String mGroupName> = r14;

        $l5 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2000(long,java.lang.String)>($l5, r14);

     label2:
        $l4 = r0.<android.graphics.drawable.VectorDrawable$VGroup: long mNativePtr>;

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$2100(long,float,float,float,float,float,float,float)>($l4, f0, f1, f2, f3, f4, f5, f6);

        return;

     label3:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error: inconsistent property count");

        throw $r4;
    }
}
