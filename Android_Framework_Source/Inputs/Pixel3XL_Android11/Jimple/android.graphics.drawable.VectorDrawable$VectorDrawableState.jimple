class android.graphics.drawable.VectorDrawable$VectorDrawableState extends android.graphics.drawable.Drawable$ConstantState
{
    static final android.util.Property ALPHA;
    private static final int NATIVE_ALLOCATION_SIZE;
    private int mAllocationOfAllNodes;
    boolean mAutoMirrored;
    int mBaseHeight;
    int mBaseWidth;
    android.graphics.BlendMode mBlendMode;
    boolean mCacheDirty;
    boolean mCachedAutoMirrored;
    android.graphics.BlendMode mCachedBlendMode;
    int[] mCachedThemeAttrs;
    android.content.res.ColorStateList mCachedTint;
    int mChangingConfigurations;
    int mDensity;
    int mLastHWCachePixelCount;
    int mLastSWCachePixelCount;
    com.android.internal.util.VirtualRefBasePtr mNativeTree;
    android.graphics.Insets mOpticalInsets;
    android.graphics.drawable.VectorDrawable$VGroup mRootGroup;
    java.lang.String mRootName;
    int[] mThemeAttrs;
    android.content.res.ColorStateList mTint;
    final android.util.ArrayMap mVGTargetsMap;
    float mViewportHeight;
    float mViewportWidth;

    static void <clinit>()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState$1 $r0;

        <android.graphics.drawable.VectorDrawable$VectorDrawableState: int NATIVE_ALLOCATION_SIZE> = 316;

        $r0 = new android.graphics.drawable.VectorDrawable$VectorDrawableState$1;

        specialinvoke $r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState$1: void <init>(java.lang.String)>("alpha");

        <android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.Property ALPHA> = $r0;

        return;
    }

    public void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0, r16;
        android.graphics.BlendMode $r2, $r8;
        android.graphics.Insets $r3, $r12;
        android.util.ArrayMap $r4, $r10, $r14;
        android.graphics.drawable.VectorDrawable$VGroup $r5, $r9, $r11;
        int[] $r6;
        int $i0, $i1, $i2, $i3;
        android.content.res.ColorStateList $r7;
        boolean $z0;
        float $f0, $f1;
        java.lang.String $r13, r17;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r16 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = null;

        $r2 = <android.graphics.drawable.Drawable: android.graphics.BlendMode DEFAULT_BLEND_MODE>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode> = $r2;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth> = 0;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight> = 0;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportWidth> = 0.0F;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportHeight> = 0.0F;

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets> = $r3;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: java.lang.String mRootName> = null;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree> = null;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity> = 160;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap> = $r4;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastSWCachePixelCount> = 0;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastHWCachePixelCount> = 0;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mAllocationOfAllNodes> = 0;

        if r16 == null goto label1;

        $r6 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs> = $r6;

        $i0 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i0;

        $r7 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = $r7;

        $r8 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode> = $r8;

        $z0 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored> = $z0;

        $r9 = new android.graphics.drawable.VectorDrawable$VGroup;

        $r11 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        $r10 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap>;

        specialinvoke $r9.<android.graphics.drawable.VectorDrawable$VGroup: void <init>(android.graphics.drawable.VectorDrawable$VGroup,android.util.ArrayMap)>($r11, $r10);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup> = $r9;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void createNativeTreeFromCopy(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.graphics.drawable.VectorDrawable$VGroup)>(r16, $r9);

        $i1 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth> = $i1;

        $i2 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight> = $i2;

        $f1 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportWidth>;

        $f0 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportHeight>;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void setViewportSize(float,float)>($f1, $f0);

        $r12 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets> = $r12;

        $r13 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: java.lang.String mRootName>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: java.lang.String mRootName> = $r13;

        $i3 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity> = $i3;

        r17 = r16.<android.graphics.drawable.VectorDrawable$VectorDrawableState: java.lang.String mRootName>;

        if r17 == null goto label2;

        $r14 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap>;

        virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r0);

        goto label2;

     label1:
        $r5 = new android.graphics.drawable.VectorDrawable$VGroup;

        specialinvoke $r5.<android.graphics.drawable.VectorDrawable$VGroup: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup> = $r5;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void createNativeTree(android.graphics.drawable.VectorDrawable$VGroup)>($r5);

     label2:
        virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void onTreeConstructionFinished()>();

        return;
    }

    static void access$000(android.graphics.drawable.VectorDrawable$VectorDrawableState, android.graphics.drawable.VectorDrawable$VGroup)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.drawable.VectorDrawable$VGroup r1;

        r0 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter1: android.graphics.drawable.VectorDrawable$VGroup;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void createNativeTree(android.graphics.drawable.VectorDrawable$VGroup)>(r1);

        return;
    }

    private void applyDensityScaling(int, int)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.graphics.Insets $r1, $r2, $r3, $r4, $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        $i3 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i2, i0, i1, 1);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth> = $i3;

        $i4 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        $i5 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i4, i0, i1, 1);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight> = $i5;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i6 = $r1.<android.graphics.Insets: int left>;

        $i7 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i6, i0, i1, 0);

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i8 = $r2.<android.graphics.Insets: int top>;

        $i9 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i8, i0, i1, 0);

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i10 = $r3.<android.graphics.Insets: int right>;

        $i11 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i10, i0, i1, 0);

        $r4 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i12 = $r4.<android.graphics.Insets: int bottom>;

        $i13 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i12, i0, i1, 0);

        $r5 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>($i7, $i9, $i11, $i13);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets> = $r5;

        return;
    }

    private void createNativeTree(android.graphics.drawable.VectorDrawable$VGroup)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.drawable.VectorDrawable$VGroup r1;
        com.android.internal.util.VirtualRefBasePtr $r2;
        long $l0, $l1;
        dalvik.system.VMRuntime $r3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VGroup;

        $r2 = new com.android.internal.util.VirtualRefBasePtr;

        $l0 = staticinvoke <android.graphics.drawable.VectorDrawable$VGroup: long access$200(android.graphics.drawable.VectorDrawable$VGroup)>(r1);

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$300(long)>($l0);

        specialinvoke $r2.<com.android.internal.util.VirtualRefBasePtr: void <init>(long)>($l1);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree> = $r2;

        $r3 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r3.<dalvik.system.VMRuntime: void registerNativeAllocation(int)>(316);

        return;
    }

    private void createNativeTreeFromCopy(android.graphics.drawable.VectorDrawable$VectorDrawableState, android.graphics.drawable.VectorDrawable$VGroup)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0, r1;
        android.graphics.drawable.VectorDrawable$VGroup r2;
        com.android.internal.util.VirtualRefBasePtr $r3, $r4;
        long $l0, $l1, $l2;
        dalvik.system.VMRuntime $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r2 := @parameter1: android.graphics.drawable.VectorDrawable$VGroup;

        $r3 = new com.android.internal.util.VirtualRefBasePtr;

        $r4 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        $l0 = virtualinvoke $r4.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable$VGroup: long access$200(android.graphics.drawable.VectorDrawable$VGroup)>(r2);

        $l2 = staticinvoke <android.graphics.drawable.VectorDrawable: long access$400(long,long)>($l0, $l1);

        specialinvoke $r3.<com.android.internal.util.VirtualRefBasePtr: void <init>(long)>($l2);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree> = $r3;

        $r5 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r5.<dalvik.system.VMRuntime: void registerNativeAllocation(int)>(316);

        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.VectorDrawable$VGroup $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.content.res.Resources$Theme;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        virtualinvoke $r2.<android.graphics.drawable.VectorDrawable$VGroup: void applyTheme(android.content.res.Resources$Theme)>(r1);

        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int[] $r1;
        boolean $z0, $z1, $z2, z3;
        android.graphics.drawable.VectorDrawable$VGroup r2;
        android.content.res.ColorStateList r3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        if $r1 != null goto label4;

        r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        if r2 == null goto label1;

        $z2 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VGroup: boolean canApplyTheme()>();

        if $z2 != 0 goto label4;

     label1:
        r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if r3 == null goto label2;

        $z1 = virtualinvoke r3.<android.content.res.ColorStateList: boolean canApplyTheme()>();

        if $z1 != 0 goto label4;

     label2:
        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: boolean canApplyTheme()>();

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        z3 = 0;

        goto label5;

     label4:
        z3 = 1;

     label5:
        return z3;
    }

    public boolean canReuseCache()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        boolean $z0, $z1, $z2;
        int[] $r1, $r2;
        android.content.res.ColorStateList $r3, $r4;
        android.graphics.BlendMode $r5, $r6;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $z0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mCachedThemeAttrs>;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        if $r2 != $r1 goto label1;

        $r4 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mCachedTint>;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mCachedBlendMode>;

        $r5 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        if $r6 != $r5 goto label1;

        $z2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCachedAutoMirrored>;

        $z1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        if $z2 != $z1 goto label1;

        return 1;

     label1:
        virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void updateCacheStates()>();

        return 0;
    }

    public void finalize() throws java.lang.Throwable
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        dalvik.system.VMRuntime $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        i0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastHWCachePixelCount>;

        i1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastSWCachePixelCount>;

        $r1 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $i2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mAllocationOfAllNodes>;

        $i6 = $i2 + 316;

        $i4 = i0 * 4;

        $i3 = i1 * 4;

        $i5 = $i4 + $i3;

        $i7 = $i6 + $i5;

        virtualinvoke $r1.<dalvik.system.VMRuntime: void registerNativeFree(int)>($i7);

        return;
    }

    public float getAlpha()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        com.android.internal.util.VirtualRefBasePtr $r1;
        long $l0;
        float $f0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        $l0 = virtualinvoke $r1.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float access$800(long)>($l0);

        return $f0;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int i0, $i1, i2;
        android.content.res.ColorStateList r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        i0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if r1 == null goto label1;

        i2 = virtualinvoke r1.<android.content.res.ColorStateList: int getChangingConfigurations()>();

        goto label2;

     label1:
        i2 = 0;

     label2:
        $i1 = i0 | i2;

        return $i1;
    }

    long getNativeRenderer()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        com.android.internal.util.VirtualRefBasePtr r1;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        if r1 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke r1.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        return $l0;
    }

    android.util.Property getProperty(java.lang.String)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        java.lang.String r1, $r3;
        android.util.Property $r2, $r4;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.Property ALPHA>;

        $r3 = virtualinvoke $r2.<android.util.Property: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = <android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.Property ALPHA>;

        return $r4;

     label1:
        return null;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        boolean $z0, $z1, z2;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.VectorDrawable$VGroup r2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.content.res.ColorStateList: boolean hasFocusStateSpecified()>();

        if $z1 != 0 goto label2;

     label1:
        r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VGroup: boolean hasFocusStateSpecified()>();

        if $z0 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        boolean $z0, $z1, z2;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.VectorDrawable$VGroup r2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z1 != 0 goto label2;

     label1:
        r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VGroup: boolean isStateful()>();

        if $z0 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public android.graphics.drawable.Drawable newDrawable()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.drawable.VectorDrawable $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r1 = new android.graphics.drawable.VectorDrawable;

        specialinvoke $r1.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources,android.graphics.drawable.VectorDrawable$1)>(r0, null, null);

        return $r1;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.content.res.Resources r1;
        android.graphics.drawable.VectorDrawable $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.content.res.Resources;

        $r2 = new android.graphics.drawable.VectorDrawable;

        specialinvoke $r2.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources,android.graphics.drawable.VectorDrawable$1)>(r0, r1, null);

        return $r2;
    }

    public boolean onStateChange(int[])
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int[] r1;
        android.graphics.drawable.VectorDrawable$VGroup $r2;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: int[];

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        $z0 = virtualinvoke $r2.<android.graphics.drawable.VectorDrawable$VGroup: boolean onStateChange(int[])>(r1);

        return $z0;
    }

    void onTreeConstructionFinished()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        com.android.internal.util.VirtualRefBasePtr $r1;
        android.graphics.drawable.VectorDrawable$VGroup $r2, $r3;
        int $i0, $i1;
        dalvik.system.VMRuntime $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        virtualinvoke $r2.<android.graphics.drawable.VectorDrawable$VGroup: void setTree(com.android.internal.util.VirtualRefBasePtr)>($r1);

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        $i0 = virtualinvoke $r3.<android.graphics.drawable.VectorDrawable$VGroup: int getNativeSize()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mAllocationOfAllNodes> = $i0;

        $r4 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $i1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mAllocationOfAllNodes>;

        virtualinvoke $r4.<dalvik.system.VMRuntime: void registerNativeAllocation(int)>($i1);

        return;
    }

    public boolean setAlpha(float)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        float f0;
        com.android.internal.util.VirtualRefBasePtr $r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        f0 := @parameter0: float;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        $l0 = virtualinvoke $r1.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        $z0 = staticinvoke <android.graphics.drawable.VectorDrawable: boolean access$700(long,float)>($l0, f0);

        return $z0;
    }

    public final boolean setDensity(int)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int i0, i1, $i2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        i0 := @parameter0: int;

        $i2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity>;

        if $i2 == i0 goto label1;

        i1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity> = i0;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void applyDensityScaling(int,int)>(i1, i0);

        return 1;

     label1:
        return 0;
    }

    void setViewportSize(float, float)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportWidth> = f0;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportHeight> = f1;

        $l0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: long getNativeRenderer()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void access$600(long,float,float)>($l0, f0, f1);

        return;
    }

    public void updateCacheStates()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int[] $r1;
        android.content.res.ColorStateList $r2;
        android.graphics.BlendMode $r3;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mCachedThemeAttrs> = $r1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mCachedTint> = $r2;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mCachedBlendMode> = $r3;

        $z0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCachedAutoMirrored> = $z0;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 0;

        return;
    }
}
