public class android.graphics.drawable.VectorDrawable extends android.graphics.drawable.Drawable
{
    private static final java.lang.String LOGTAG;
    private static final java.lang.String SHAPE_CLIP_PATH;
    private static final java.lang.String SHAPE_GROUP;
    private static final java.lang.String SHAPE_PATH;
    private static final java.lang.String SHAPE_VECTOR;
    private android.graphics.BlendModeColorFilter mBlendModeColorFilter;
    private android.graphics.ColorFilter mColorFilter;
    private boolean mDpiScaledDirty;
    private int mDpiScaledHeight;
    private android.graphics.Insets mDpiScaledInsets;
    private int mDpiScaledWidth;
    private boolean mMutated;
    private int mTargetDensity;
    private android.graphics.PorterDuffColorFilter mTintFilter;
    private final android.graphics.Rect mTmpBounds;
    private android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_VECTOR> = "vector";

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_PATH> = "path";

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_GROUP> = "group";

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_CLIP_PATH> = "clip-path";

        $r0 = class "Landroid/graphics/drawable/VectorDrawable;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG> = $r1;

        return;
    }

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = new android.graphics.drawable.VectorDrawable$VectorDrawableState;

        specialinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState)>(null);

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources)>($r1, null);

        return;
    }

    private void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState, android.content.res.Resources)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1;
        android.content.res.Resources r2;
        android.graphics.Insets $r3;
        android.graphics.Rect $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r2 := @parameter1: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledWidth> = 0;

        r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledHeight> = 0;

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.Insets mDpiScaledInsets> = $r3;

        r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty> = 1;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.Rect mTmpBounds> = $r4;

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState> = r1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateLocalState(android.content.res.Resources)>(r2);

        return;
    }

    void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState, android.content.res.Resources, android.graphics.drawable.VectorDrawable$1)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.VectorDrawable$1 r3;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.graphics.drawable.VectorDrawable$1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources)>(r1, r2);

        return;
    }

    static long access$1600(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateGroup(long)>(l0);

        return $l1;
    }

    static long access$1700()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateGroup()>();

        return $l0;
    }

    static void access$1800(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nAddChild(long,long)>(l0, l1);

        return;
    }

    static boolean access$1900(long, float[], int)
    {
        long l0;
        float[] r0;
        int i1;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: float[];

        i1 := @parameter2: int;

        $z0 = staticinvoke <android.graphics.drawable.VectorDrawable: boolean nGetGroupProperties(long,float[],int)>(l0, r0, i1);

        return $z0;
    }

    static void access$2000(long, java.lang.String)
    {
        long l0;
        java.lang.String r0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetName(long,java.lang.String)>(l0, r0);

        return;
    }

    static void access$2100(long, float, float, float, float, float, float, float)
    {
        long l0;
        float f0, f1, f2, f3, f4, f5, f6;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        f4 := @parameter5: float;

        f5 := @parameter6: float;

        f6 := @parameter7: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nUpdateGroupProperties(long,float,float,float,float,float,float,float)>(l0, f0, f1, f2, f3, f4, f5, f6);

        return;
    }

    static float access$2200(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetRotation(long)>(l0);

        return $f0;
    }

    static void access$2300(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetRotation(long,float)>(l0, f0);

        return;
    }

    static float access$2400(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetPivotX(long)>(l0);

        return $f0;
    }

    static void access$2500(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetPivotX(long,float)>(l0, f0);

        return;
    }

    static float access$2600(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetPivotY(long)>(l0);

        return $f0;
    }

    static void access$2700(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetPivotY(long,float)>(l0, f0);

        return;
    }

    static float access$2800(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetScaleX(long)>(l0);

        return $f0;
    }

    static void access$2900(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetScaleX(long,float)>(l0, f0);

        return;
    }

    static long access$300(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateTree(long)>(l0);

        return $l1;
    }

    static float access$3000(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetScaleY(long)>(l0);

        return $f0;
    }

    static void access$3100(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetScaleY(long,float)>(l0, f0);

        return;
    }

    static float access$3200(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetTranslateX(long)>(l0);

        return $f0;
    }

    static void access$3300(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetTranslateX(long,float)>(l0, f0);

        return;
    }

    static float access$3400(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetTranslateY(long)>(l0);

        return $f0;
    }

    static void access$3500(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetTranslateY(long,float)>(l0, f0);

        return;
    }

    static void access$3600(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetPathData(long,long)>(l0, l1);

        return;
    }

    static long access$3700()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateClipPath()>();

        return $l0;
    }

    static long access$3800(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateClipPath(long)>(l0);

        return $l1;
    }

    static void access$3900(long, java.lang.String, int)
    {
        long l0;
        java.lang.String r0;
        int i1;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetPathString(long,java.lang.String,int)>(l0, r0, i1);

        return;
    }

    static long access$400(long, long)
    {
        long l0, l1, $l2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateTreeFromCopy(long,long)>(l0, l1);

        return $l2;
    }

    static long access$4800()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateFullPath()>();

        return $l0;
    }

    static long access$4900(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.graphics.drawable.VectorDrawable: long nCreateFullPath(long)>(l0);

        return $l1;
    }

    static void access$5000(long, int)
    {
        long l0;
        int i1;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetStrokeColor(long,int)>(l0, i1);

        return;
    }

    static void access$5100(long, int)
    {
        long l0;
        int i1;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetFillColor(long,int)>(l0, i1);

        return;
    }

    static boolean access$5200(long, byte[], int)
    {
        long l0;
        byte[] r0;
        int i1;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $z0 = staticinvoke <android.graphics.drawable.VectorDrawable: boolean nGetFullPathProperties(long,byte[],int)>(l0, r0, i1);

        return $z0;
    }

    static void access$5300(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nUpdateFullPathFillGradient(long,long)>(l0, l1);

        return;
    }

    static void access$5400(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nUpdateFullPathStrokeGradient(long,long)>(l0, l1);

        return;
    }

    static void access$5500(long, float, int, float, int, float, float, float, float, float, int, int, int)
    {
        long l0;
        float f0, f1, f2, f3, f4, f5, f6;
        int i1, i2, i3, i4, i5;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        f1 := @parameter3: float;

        i2 := @parameter4: int;

        f2 := @parameter5: float;

        f3 := @parameter6: float;

        f4 := @parameter7: float;

        f5 := @parameter8: float;

        f6 := @parameter9: float;

        i3 := @parameter10: int;

        i4 := @parameter11: int;

        i5 := @parameter12: int;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nUpdateFullPathProperties(long,float,int,float,int,float,float,float,float,float,int,int,int)>(l0, f0, i1, f1, i2, f2, f3, f4, f5, f6, i3, i4, i5);

        return;
    }

    static int access$5600(long)
    {
        long l0;
        int $i1;

        l0 := @parameter0: long;

        $i1 = staticinvoke <android.graphics.drawable.VectorDrawable: int nGetStrokeColor(long)>(l0);

        return $i1;
    }

    static float access$5700(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetStrokeWidth(long)>(l0);

        return $f0;
    }

    static void access$5800(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetStrokeWidth(long,float)>(l0, f0);

        return;
    }

    static float access$5900(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetStrokeAlpha(long)>(l0);

        return $f0;
    }

    static void access$600(long, float, float)
    {
        long l0;
        float f0, f1;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetRendererViewportSize(long,float,float)>(l0, f0, f1);

        return;
    }

    static void access$6000(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetStrokeAlpha(long,float)>(l0, f0);

        return;
    }

    static int access$6100(long)
    {
        long l0;
        int $i1;

        l0 := @parameter0: long;

        $i1 = staticinvoke <android.graphics.drawable.VectorDrawable: int nGetFillColor(long)>(l0);

        return $i1;
    }

    static float access$6200(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetFillAlpha(long)>(l0);

        return $f0;
    }

    static void access$6300(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetFillAlpha(long,float)>(l0, f0);

        return;
    }

    static float access$6400(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetTrimPathStart(long)>(l0);

        return $f0;
    }

    static void access$6500(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetTrimPathStart(long,float)>(l0, f0);

        return;
    }

    static float access$6600(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetTrimPathEnd(long)>(l0);

        return $f0;
    }

    static void access$6700(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetTrimPathEnd(long,float)>(l0, f0);

        return;
    }

    static float access$6800(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetTrimPathOffset(long)>(l0);

        return $f0;
    }

    static void access$6900(long, float)
    {
        long l0;
        float f0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetTrimPathOffset(long,float)>(l0, f0);

        return;
    }

    static boolean access$700(long, float)
    {
        long l0;
        float f0;
        boolean $z0;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        $z0 = staticinvoke <android.graphics.drawable.VectorDrawable: boolean nSetRootAlpha(long,float)>(l0, f0);

        return $z0;
    }

    static float access$800(long)
    {
        long l0;
        float $f0;

        l0 := @parameter0: long;

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable: float nGetRootAlpha(long)>(l0);

        return $f0;
    }

    public static android.graphics.drawable.VectorDrawable create(android.content.res.Resources, int)
    {
        android.content.res.XmlResourceParser r0;
        android.util.AttributeSet r1;
        java.lang.Throwable $r3, $r5, r13;
        java.lang.String $r4, $r6;
        android.content.res.Resources r7;
        int i2, i3;
        android.graphics.drawable.VectorDrawable r11;
        org.xmlpull.v1.XmlPullParserException r12;

        r7 := @parameter0: android.content.res.Resources;

        i2 := @parameter1: int;

     label01:
        r0 = virtualinvoke r7.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i2);

        r1 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r0);

     label02:
        i3 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

     label03:
        if i3 == 2 goto label04;

        if i3 == 1 goto label04;

        goto label02;

     label04:
        if i3 != 2 goto label07;

     label05:
        r11 = new android.graphics.drawable.VectorDrawable;

        specialinvoke r11.<android.graphics.drawable.VectorDrawable: void <init>()>();

        virtualinvoke r11.<android.graphics.drawable.VectorDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>(r7, r0, r1);

     label06:
        return r11;

     label07:
        r12 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r12.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        r13 = (java.lang.Throwable) r12;

        throw r13;

     label08:
        $r5 := @caughtexception;

        $r6 = <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "parser error", $r5);

        goto label10;

     label09:
        $r3 := @caughtexception;

        $r4 = <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "parser error", $r3);

     label10:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label09;
        catch java.io.IOException from label01 to label02 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label09;
        catch java.io.IOException from label02 to label03 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label09;
        catch java.io.IOException from label05 to label06 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label09;
        catch java.io.IOException from label07 to label08 with label08;
    }

    private void inflateChildElements(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.VectorDrawable r0;
        android.util.AttributeSet r1;
        android.content.res.Resources$Theme r2;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        android.graphics.drawable.VectorDrawable$VGroup r5, $r7, r52;
        java.lang.String $r16, $r18, $r19, $r22, $r23, $r24, $r27, $r29, $r32, $r34, $r37, $r39, r43;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.lang.Object $r21;
        android.util.ArrayMap $r28, $r33, $r38;
        android.content.res.Resources r41;
        org.xmlpull.v1.XmlPullParser r42;
        java.util.Stack r49;
        android.graphics.drawable.VectorDrawable$VFullPath r50;
        android.graphics.drawable.VectorDrawable$VClipPath r51;
        java.lang.StringBuffer r53;
        java.lang.StringBuilder r54;
        org.xmlpull.v1.XmlPullParserException r55;
        java.lang.Throwable r56;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r41 := @parameter0: android.content.res.Resources;

        r42 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter2: android.util.AttributeSet;

        r2 := @parameter3: android.content.res.Resources$Theme;

        r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        z4 = 1;

        r49 = new java.util.Stack;

        specialinvoke r49.<java.util.Stack: void <init>()>();

        $r7 = r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        virtualinvoke r49.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r7);

        i13 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        i0 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label01:
        if i13 == 1 goto label12;

        $i2 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i3 = i0 + 1;

        if $i2 >= $i3 goto label02;

        if i13 == 3 goto label12;

     label02:
        if i13 != 2 goto label10;

        r43 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r21 = virtualinvoke r49.<java.util.Stack: java.lang.Object peek()>();

        r5 = (android.graphics.drawable.VectorDrawable$VGroup) $r21;

        $r22 = "path";

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z1 == 0 goto label04;

        r50 = new android.graphics.drawable.VectorDrawable$VFullPath;

        specialinvoke r50.<android.graphics.drawable.VectorDrawable$VFullPath: void <init>()>();

        virtualinvoke r50.<android.graphics.drawable.VectorDrawable$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>(r41, r1, r2);

        virtualinvoke r5.<android.graphics.drawable.VectorDrawable$VGroup: void addChild(android.graphics.drawable.VectorDrawable$VObject)>(r50);

        $r37 = virtualinvoke r50.<android.graphics.drawable.VectorDrawable$VFullPath: java.lang.String getPathName()>();

        if $r37 == null goto label03;

        $r38 = r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap>;

        $r39 = virtualinvoke r50.<android.graphics.drawable.VectorDrawable$VFullPath: java.lang.String getPathName()>();

        virtualinvoke $r38.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, r50);

     label03:
        z5 = 0;

        $i11 = r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i10 = r50.<android.graphics.drawable.VectorDrawable$VFullPath: int mChangingConfigurations>;

        $i12 = $i11 | $i10;

        r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i12;

        goto label09;

     label04:
        $r23 = "clip-path";

        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z2 == 0 goto label06;

        r51 = new android.graphics.drawable.VectorDrawable$VClipPath;

        specialinvoke r51.<android.graphics.drawable.VectorDrawable$VClipPath: void <init>()>();

        virtualinvoke r51.<android.graphics.drawable.VectorDrawable$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>(r41, r1, r2);

        virtualinvoke r5.<android.graphics.drawable.VectorDrawable$VGroup: void addChild(android.graphics.drawable.VectorDrawable$VObject)>(r51);

        $r32 = virtualinvoke r51.<android.graphics.drawable.VectorDrawable$VClipPath: java.lang.String getPathName()>();

        if $r32 == null goto label05;

        $r33 = r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap>;

        $r34 = virtualinvoke r51.<android.graphics.drawable.VectorDrawable$VClipPath: java.lang.String getPathName()>();

        virtualinvoke $r33.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r51);

     label05:
        $i8 = r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i7 = r51.<android.graphics.drawable.VectorDrawable$VClipPath: int mChangingConfigurations>;

        $i9 = $i8 | $i7;

        r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i9;

        goto label08;

     label06:
        $r24 = "group";

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z3 == 0 goto label08;

        r52 = new android.graphics.drawable.VectorDrawable$VGroup;

        specialinvoke r52.<android.graphics.drawable.VectorDrawable$VGroup: void <init>()>();

        virtualinvoke r52.<android.graphics.drawable.VectorDrawable$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>(r41, r1, r2);

        virtualinvoke r5.<android.graphics.drawable.VectorDrawable$VGroup: void addChild(android.graphics.drawable.VectorDrawable$VObject)>(r52);

        virtualinvoke r49.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r52);

        $r27 = virtualinvoke r52.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String getGroupName()>();

        if $r27 == null goto label07;

        $r28 = r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap>;

        $r29 = virtualinvoke r52.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String getGroupName()>();

        virtualinvoke $r28.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, r52);

     label07:
        $i4 = r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i5 = staticinvoke <android.graphics.drawable.VectorDrawable$VGroup: int access$100(android.graphics.drawable.VectorDrawable$VGroup)>(r52);

        $i6 = $i4 | $i5;

        r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i6;

        z5 = z4;

        goto label09;

     label08:
        z5 = z4;

     label09:
        goto label11;

     label10:
        z5 = z4;

        if i13 != 3 goto label09;

        z5 = z4;

        $r18 = "group";

        $r19 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z0 == 0 goto label11;

        virtualinvoke r49.<java.util.Stack: java.lang.Object pop()>();

        z5 = z4;

     label11:
        i13 = interfaceinvoke r42.<org.xmlpull.v1.XmlPullParser: int next()>();

        z4 = z5;

        goto label01;

     label12:
        if z4 == 0 goto label14;

        r53 = new java.lang.StringBuffer;

        specialinvoke r53.<java.lang.StringBuffer: void <init>()>();

        $i1 = virtualinvoke r53.<java.lang.StringBuffer: int length()>();

        if $i1 <= 0 goto label13;

        virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" or ");

     label13:
        virtualinvoke r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("path");

        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no ");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r53);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" defined");

        r55 = new org.xmlpull.v1.XmlPullParserException;

        $r16 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r55.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r16);

        r56 = (java.lang.Throwable) r55;

        throw r56;

     label14:
        return;
    }

    private static native void nAddChild(long, long);

    private static native long nCreateClipPath();

    private static native long nCreateClipPath(long);

    private static native long nCreateFullPath();

    private static native long nCreateFullPath(long);

    private static native long nCreateGroup();

    private static native long nCreateGroup(long);

    private static native long nCreateTree(long);

    private static native long nCreateTreeFromCopy(long, long);

    private static native int nDraw(long, long, long, android.graphics.Rect, boolean, boolean);

    private static native float nGetFillAlpha(long);

    private static native int nGetFillColor(long);

    private static native boolean nGetFullPathProperties(long, byte[], int);

    private static native boolean nGetGroupProperties(long, float[], int);

    private static native float nGetPivotX(long);

    private static native float nGetPivotY(long);

    private static native float nGetRootAlpha(long);

    private static native float nGetRotation(long);

    private static native float nGetScaleX(long);

    private static native float nGetScaleY(long);

    private static native float nGetStrokeAlpha(long);

    private static native int nGetStrokeColor(long);

    private static native float nGetStrokeWidth(long);

    private static native float nGetTranslateX(long);

    private static native float nGetTranslateY(long);

    private static native float nGetTrimPathEnd(long);

    private static native float nGetTrimPathOffset(long);

    private static native float nGetTrimPathStart(long);

    private static native void nSetAllowCaching(long, boolean);

    private static native void nSetAntiAlias(long, boolean);

    private static native void nSetFillAlpha(long, float);

    private static native void nSetFillColor(long, int);

    private static native void nSetName(long, java.lang.String);

    private static native void nSetPathData(long, long);

    private static native void nSetPathString(long, java.lang.String, int);

    private static native void nSetPivotX(long, float);

    private static native void nSetPivotY(long, float);

    private static native void nSetRendererViewportSize(long, float, float);

    private static native boolean nSetRootAlpha(long, float);

    private static native void nSetRotation(long, float);

    private static native void nSetScaleX(long, float);

    private static native void nSetScaleY(long, float);

    private static native void nSetStrokeAlpha(long, float);

    private static native void nSetStrokeColor(long, int);

    private static native void nSetStrokeWidth(long, float);

    private static native void nSetTranslateX(long, float);

    private static native void nSetTranslateY(long, float);

    private static native void nSetTrimPathEnd(long, float);

    private static native void nSetTrimPathOffset(long, float);

    private static native void nSetTrimPathStart(long, float);

    private static native void nUpdateFullPathFillGradient(long, long);

    private static native void nUpdateFullPathProperties(long, float, int, float, int, float, float, float, float, float, int, int, int);

    private static native void nUpdateFullPathStrokeGradient(long, long);

    private static native void nUpdateGroupProperties(long, float, float, float, float, float, float, float);

    private boolean needMirroring()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean z0, z1;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: boolean isAutoMirrored()>();

        z1 = 1;

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: int getLayoutDirection()>();

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void updateColorFilters(android.graphics.BlendMode, android.content.res.ColorStateList)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.BlendMode r1;
        android.content.res.ColorStateList r2;
        android.graphics.PorterDuff$Mode r3;
        android.graphics.PorterDuffColorFilter $r4, $r5;
        android.graphics.BlendModeColorFilter $r6, $r7;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.BlendMode;

        r2 := @parameter1: android.content.res.ColorStateList;

        r3 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>(r1);

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r5 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r4, r2, r3);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r5;

        $r6 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.BlendModeColorFilter mBlendModeColorFilter>;

        $r7 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.BlendModeColorFilter updateBlendModeFilter(android.graphics.BlendModeColorFilter,android.content.res.ColorStateList,android.graphics.BlendMode)>($r6, r2, r1);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.BlendModeColorFilter mBlendModeColorFilter> = $r7;

        return;
    }

    private void updateLocalState(android.content.res.Resources)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.content.res.Resources r1;
        int i0, $i1, $i2;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r2, $r3, $r4;
        android.content.res.ColorStateList $r5;
        android.graphics.BlendMode $r6;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.content.res.Resources;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i1 = $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity>;

        i0 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>(r1, $i1);

        $i2 = r0.<android.graphics.drawable.VectorDrawable: int mTargetDensity>;

        if $i2 == i0 goto label1;

        r0.<android.graphics.drawable.VectorDrawable: int mTargetDensity> = i0;

        r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty> = 1;

     label1:
        $r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r6 = $r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r5 = $r4.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateColorFilters(android.graphics.BlendMode,android.content.res.ColorStateList)>($r6, $r5);

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.VectorDrawable r0;
        int i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        android.content.res.ColorStateList r1;
        int[] $r2;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b4, $b5;
        java.lang.String $r4, $r8, $r10, $r14, $r16, $r20, $r22, $r26, r38;
        android.graphics.Insets $r27, $r28, $r29, $r30, $r31;
        android.util.ArrayMap $r32;
        android.graphics.BlendMode $r34, $r35;
        android.content.res.TypedArray r36;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r37;
        java.lang.StringBuilder r43, r45, r47, r49;
        org.xmlpull.v1.XmlPullParserException r44, r46, r48, r50;
        java.lang.Throwable r51, r52, r53, r54;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r36 := @parameter0: android.content.res.TypedArray;

        r37 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i1 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i2 = virtualinvoke r36.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i3 = $i1 | $i2;

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i3;

        $r2 = virtualinvoke r36.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs> = $r2;

        i0 = virtualinvoke r36.<android.content.res.TypedArray: int getInt(int,int)>(6, -1);

        if i0 == -1 goto label1;

        $r34 = <android.graphics.BlendMode: android.graphics.BlendMode SRC_IN>;

        $r35 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.BlendMode parseBlendMode(int,android.graphics.BlendMode)>(i0, $r34);

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode> = $r35;

     label1:
        r1 = virtualinvoke r36.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(1);

        if r1 == null goto label2;

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = r1;

     label2:
        $z0 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        $z1 = virtualinvoke r36.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, $z0);

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored> = $z1;

        $f0 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportWidth>;

        $f1 = virtualinvoke r36.<android.content.res.TypedArray: float getFloat(int,float)>(7, $f0);

        $f2 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportHeight>;

        $f3 = virtualinvoke r36.<android.content.res.TypedArray: float getFloat(int,float)>(8, $f2);

        virtualinvoke r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void setViewportSize(float,float)>($f1, $f3);

        $f4 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportWidth>;

        $b4 = $f4 cmpg 0.0F;

        if $b4 <= 0 goto label7;

        $f5 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportHeight>;

        $b5 = $f5 cmpg 0.0F;

        if $b5 <= 0 goto label6;

        $i6 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        $i7 = virtualinvoke r36.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(3, $i6);

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth> = $i7;

        $i8 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        $i9 = virtualinvoke r36.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(2, $i8);

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight> = $i9;

        $i10 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        if $i10 <= 0 goto label5;

        $i11 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        if $i11 <= 0 goto label4;

        $r27 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i12 = $r27.<android.graphics.Insets: int left>;

        $i13 = virtualinvoke r36.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(9, $i12);

        $r28 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i14 = $r28.<android.graphics.Insets: int top>;

        $i15 = virtualinvoke r36.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(10, $i14);

        $r29 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i16 = $r29.<android.graphics.Insets: int right>;

        $i17 = virtualinvoke r36.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(11, $i16);

        $r30 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $i18 = $r30.<android.graphics.Insets: int bottom>;

        $i19 = virtualinvoke r36.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(12, $i18);

        $r31 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>($i13, $i15, $i17, $i19);

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets> = $r31;

        $f6 = virtualinvoke r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float getAlpha()>();

        $f7 = virtualinvoke r36.<android.content.res.TypedArray: float getFloat(int,float)>(4, $f6);

        virtualinvoke r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean setAlpha(float)>($f7);

        r38 = virtualinvoke r36.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r38 == null goto label3;

        r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: java.lang.String mRootName> = r38;

        $r32 = r37.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap>;

        virtualinvoke $r32.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r38, r37);

     label3:
        return;

     label4:
        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r36.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires height > 0");

        r44 = new org.xmlpull.v1.XmlPullParserException;

        $r26 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r44.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r26);

        r51 = (java.lang.Throwable) r44;

        throw r51;

     label5:
        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r36.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires width > 0");

        r46 = new org.xmlpull.v1.XmlPullParserException;

        $r20 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r46.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r20);

        r52 = (java.lang.Throwable) r46;

        throw r52;

     label6:
        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r36.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportHeight > 0");

        r48 = new org.xmlpull.v1.XmlPullParserException;

        $r14 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r48.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r14);

        r53 = (java.lang.Throwable) r48;

        throw r53;

     label7:
        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r36.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportWidth > 0");

        r50 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r50.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r8);

        r54 = (java.lang.Throwable) r50;

        throw r54;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean z0, $z1, $z2, $z3, $z4;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r5, r14, r19;
        android.content.res.Resources $r2, $r20;
        int $i0;
        int[] $r3, $r9, $r10;
        android.content.res.ColorStateList $r4, $r6, $r7, $r8;
        java.lang.Throwable $r11, $r12;
        android.content.res.Resources$Theme r13;
        android.content.res.TypedArray r15;
        java.lang.RuntimeException r18;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r13 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r13);

        r14 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if r14 != null goto label01;

        return;

     label01:
        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2 = virtualinvoke r13.<android.content.res.Resources$Theme: android.content.res.Resources getResources()>();

        $i0 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>($r2, 0);

        z0 = virtualinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean setDensity(int)>($i0);

        $z1 = r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty>;

        $z2 = $z1 | z0;

        r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty> = $z2;

        $r3 = r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        if $r3 == null goto label08;

        $r10 = r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        $r9 = <com.android.internal.R$styleable: int[] VectorDrawable>;

        r15 = virtualinvoke r13.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r10, $r9);

     label02:
        r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r15);

     label03:
        virtualinvoke r15.<android.content.res.TypedArray: void recycle()>();

        r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty> = 1;

        goto label08;

     label04:
        $r12 := @caughtexception;

        goto label07;

     label05:
        $r11 := @caughtexception;

     label06:
        r18 = new java.lang.RuntimeException;

        specialinvoke r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw r18;

     label07:
        virtualinvoke r15.<android.content.res.TypedArray: void recycle()>();

        throw $r12;

     label08:
        $r4 = r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r4 == null goto label09;

        $r6 = r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $z4 = virtualinvoke $r6.<android.content.res.ColorStateList: boolean canApplyTheme()>();

        if $z4 == 0 goto label09;

        $r7 = r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $r8 = virtualinvoke $r7.<android.content.res.ColorStateList: android.content.res.ColorStateList obtainForTheme(android.content.res.Resources$Theme)>(r13);

        r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = $r8;

     label09:
        r19 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if r19 == null goto label10;

        $z3 = virtualinvoke r19.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canApplyTheme()>();

        if $z3 == 0 goto label10;

        $r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void applyTheme(android.content.res.Resources$Theme)>(r13);

     label10:
        $r20 = virtualinvoke r13.<android.content.res.Resources$Theme: android.content.res.Resources getResources()>();

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateLocalState(android.content.res.Resources)>($r20);

        return;

        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canApplyTheme()>();

        if $z1 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 == 0 goto label3;

     label2:
        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public void clearMutated()
    {
        android.graphics.drawable.VectorDrawable r0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void clearMutated()>();

        r0.<android.graphics.drawable.VectorDrawable: boolean mMutated> = 0;

        return;
    }

    void computeVectorSize()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.Insets r1, $r8;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        r1 = $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Insets mOpticalInsets>;

        $r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        i0 = $r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mDensity>;

        i1 = r0.<android.graphics.drawable.VectorDrawable: int mTargetDensity>;

        if i1 == i0 goto label1;

        $r6 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i6 = $r6.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        $i7 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i6, i0, i1, 1);

        r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledWidth> = $i7;

        $r7 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i8 = $r7.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        $i9 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i8, i0, i1, 1);

        r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledHeight> = $i9;

        $i10 = r1.<android.graphics.Insets: int left>;

        i2 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i10, i0, i1, 0);

        $i11 = r1.<android.graphics.Insets: int right>;

        i3 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i11, i0, i1, 0);

        $i12 = r1.<android.graphics.Insets: int top>;

        $i13 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i12, i0, i1, 0);

        $i14 = r1.<android.graphics.Insets: int bottom>;

        $i15 = staticinvoke <android.graphics.drawable.Drawable: int scaleFromDensity(int,int,int,boolean)>($i14, i0, i1, 0);

        $r8 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>(i2, $i13, i3, $i15);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.Insets mDpiScaledInsets> = $r8;

        goto label2;

     label1:
        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i4 = $r4.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledWidth> = $i4;

        $r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i5 = $r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledHeight> = $i5;

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.Insets mDpiScaledInsets> = r1;

     label2:
        r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty> = 0;

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.Canvas r1;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8, $i9, i11;
        android.graphics.Rect $r2, $r3, $r4, $r7;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r5, $r6, $r8, $r9, $r12, $r13;
        long $l3, $l4, l10;
        dalvik.system.VMRuntime $r10, $r11;
        android.graphics.ColorFilter r14;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.Rect mTmpBounds>;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void copyBounds(android.graphics.Rect)>($r2);

        $r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.Rect mTmpBounds>;

        $i1 = virtualinvoke $r3.<android.graphics.Rect: int width()>();

        if $i1 <= 0 goto label10;

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.Rect mTmpBounds>;

        $i2 = virtualinvoke $r4.<android.graphics.Rect: int height()>();

        if $i2 > 0 goto label01;

        goto label10;

     label01:
        r14 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.ColorFilter mColorFilter>;

        if r14 != null goto label02;

        r14 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.BlendModeColorFilter mBlendModeColorFilter>;

        goto label02;

     label02:
        if r14 != null goto label03;

        l10 = 0L;

        goto label04;

     label03:
        l10 = virtualinvoke r14.<android.graphics.ColorFilter: long getNativeInstance()>();

     label04:
        $r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        z0 = virtualinvoke $r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canReuseCache()>();

        $r6 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $l3 = virtualinvoke $r6.<android.graphics.drawable.VectorDrawable$VectorDrawableState: long getNativeRenderer()>();

        $l4 = virtualinvoke r1.<android.graphics.Canvas: long getNativeCanvasWrapper()>();

        $r7 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.Rect mTmpBounds>;

        $z1 = specialinvoke r0.<android.graphics.drawable.VectorDrawable: boolean needMirroring()>();

        i0 = staticinvoke <android.graphics.drawable.VectorDrawable: int nDraw(long,long,long,android.graphics.Rect,boolean,boolean)>($l3, $l4, l10, $r7, $z1, z0);

        if i0 != 0 goto label05;

        return;

     label05:
        $z2 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label06;

        $r12 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i8 = $r12.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastHWCachePixelCount>;

        $i9 = i0 - $i8;

        i11 = $i9 * 4;

        $r13 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r13.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastHWCachePixelCount> = i0;

        goto label07;

     label06:
        $r8 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i5 = $r8.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastSWCachePixelCount>;

        $i6 = i0 - $i5;

        i11 = $i6 * 4;

        $r9 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r9.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mLastSWCachePixelCount> = i0;

     label07:
        if i11 <= 0 goto label08;

        $r11 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r11.<dalvik.system.VMRuntime: void registerNativeAllocation(int)>(i11);

        goto label09;

     label08:
        if i11 >= 0 goto label09;

        $r10 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $i7 = neg i11;

        virtualinvoke $r10.<dalvik.system.VMRuntime: void registerNativeFree(int)>($i7);

     label09:
        return;

     label10:
        return;
    }

    public int getAlpha()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        float $f0, $f1;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $f0 = virtualinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float getAlpha()>();

        $f1 = $f0 * 255.0F;

        $i0 = (int) $f1;

        return $i0;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.VectorDrawable r0;
        int $i0, $i1, $i2;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i1 = virtualinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        return $i2;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.ColorFilter $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.ColorFilter mColorFilter>;

        return $r1;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: int getChangingConfigurations()>();

        $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i0;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        return $r2;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void computeVectorSize()>();

     label1:
        $i0 = r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledHeight>;

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void computeVectorSize()>();

     label1:
        $i0 = r0.<android.graphics.drawable.VectorDrawable: int mDpiScaledWidth>;

        return $i0;
    }

    public long getNativeTree()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $l0 = virtualinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: long getNativeRenderer()>();

        return $l0;
    }

    public int getOpacity()
    {
        android.graphics.drawable.VectorDrawable r0;
        int $i0;
        byte b1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $i0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: int getAlpha()>();

        if $i0 != 0 goto label1;

        b1 = -2;

        goto label2;

     label1:
        b1 = -3;

     label2:
        return b1;
    }

    public android.graphics.Insets getOpticalInsets()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0;
        android.graphics.Insets $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void computeVectorSize()>();

     label1:
        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.Insets mDpiScaledInsets>;

        return $r1;
    }

    public float getPixelSize()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8;
        int $i0, $i1, $i4, $i5;
        byte $b2, $b3;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if r1 == null goto label2;

        $i0 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        if $i0 == 0 goto label2;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i1 = $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        if $i1 == 0 goto label2;

        $r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $f4 = $r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportHeight>;

        $b2 = $f4 cmpl 0.0F;

        if $b2 == 0 goto label2;

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $f5 = $r4.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportWidth>;

        $b3 = $f5 cmpl 0.0F;

        if $b3 != 0 goto label1;

        goto label2;

     label1:
        $r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i4 = $r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseWidth>;

        f0 = (float) $i4;

        $r6 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i5 = $r6.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mBaseHeight>;

        f1 = (float) $i5;

        $r7 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        f2 = $r7.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportWidth>;

        $r8 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        f3 = $r8.<android.graphics.drawable.VectorDrawable$VectorDrawableState: float mViewportHeight>;

        $f7 = f2 / f0;

        $f6 = f3 / f1;

        $f8 = staticinvoke <java.lang.Math: float min(float,float)>($f7, $f6);

        return $f8;

     label2:
        return 1.0F;
    }

    java.lang.Object getTargetByName(java.lang.String)
    {
        android.graphics.drawable.VectorDrawable r0;
        java.lang.String r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.util.ArrayMap mVGTargetsMap>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r4;
    }

    public boolean hasFocusStateSpecified()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1;
        boolean $z0, z1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean hasFocusStateSpecified()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.VectorDrawable r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r4, $r6, $r8, $r10, $r12, $r14, $r17, $r19, $r21, r25, r27;
        android.graphics.drawable.VectorDrawable$VGroup $r5, $r7, $r11, $r18, $r20, r26;
        com.android.internal.util.VirtualRefBasePtr $r9, $r15, $r22;
        dalvik.system.VMRuntime $r13, $r16;
        int $i0, $i1;
        java.lang.Throwable $r23;
        android.content.res.Resources r24;
        int[] $r28;
        android.content.res.TypedArray r29;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r24 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.Resources$Theme;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, "VectorDrawable#inflate");

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r5 = $r4.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        if $r5 != null goto label2;

        $r21 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r22 = $r21.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        if $r22 == null goto label5;

     label2:
        $r6 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r7 = $r6.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        if $r7 == null goto label3;

        $r16 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r17 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r18 = $r17.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        $i0 = virtualinvoke $r18.<android.graphics.drawable.VectorDrawable$VGroup: int getNativeSize()>();

        virtualinvoke $r16.<dalvik.system.VMRuntime: void registerNativeFree(int)>($i0);

        $r19 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r20 = $r19.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        virtualinvoke $r20.<android.graphics.drawable.VectorDrawable$VGroup: void setTree(com.android.internal.util.VirtualRefBasePtr)>(null);

     label3:
        r25 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        r26 = new android.graphics.drawable.VectorDrawable$VGroup;

        specialinvoke r26.<android.graphics.drawable.VectorDrawable$VGroup: void <init>()>();

        r25.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup> = r26;

        $r8 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r9 = $r8.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        if $r9 == null goto label4;

        $r13 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r13.<dalvik.system.VMRuntime: void registerNativeFree(int)>(316);

        $r14 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r15 = $r14.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        virtualinvoke $r15.<com.android.internal.util.VirtualRefBasePtr: void release()>();

     label4:
        $r12 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r10 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r11 = $r10.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VGroup mRootGroup>;

        staticinvoke <android.graphics.drawable.VectorDrawable$VectorDrawableState: void access$000(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.graphics.drawable.VectorDrawable$VGroup)>($r12, $r11);

     label5:
        r27 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i1 = staticinvoke <android.graphics.drawable.Drawable: int resolveDensity(android.content.res.Resources,int)>(r24, 0);

        virtualinvoke r27.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean setDensity(int)>($i1);

        $r28 = <com.android.internal.R$styleable: int[] VectorDrawable>;

        r29 = staticinvoke <android.graphics.drawable.VectorDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r24, r3, r2, $r28);

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r29);

        virtualinvoke r29.<android.content.res.TypedArray: void recycle()>();

        r0.<android.graphics.drawable.VectorDrawable: boolean mDpiScaledDirty> = 1;

        r27.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void inflateChildElements(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r24, r1, r2, r3);

        virtualinvoke r27.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void onTreeConstructionFinished()>();

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateLocalState(android.content.res.Resources)>(r24);

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return;

     label7:
        $r23 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw $r23;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean isAutoMirrored()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z0 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        return $z0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 != 0 goto label2;

        r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean isStateful()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r2, $r3;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = r0.<android.graphics.drawable.VectorDrawable: boolean mMutated>;

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if $r1 != r0 goto label1;

        $r2 = new android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        specialinvoke $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState)>($r3);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState> = $r2;

        r0.<android.graphics.drawable.VectorDrawable: boolean mMutated> = 1;

     label1:
        return r0;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.VectorDrawable r0;
        int[] r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2;
        boolean $z0, $z1, z2, z3;
        android.content.res.ColorStateList $r3, $r5;
        android.graphics.BlendMode $r4, $r6;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: int[];

        z2 = 0;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.Drawable mutate()>();

     label1:
        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z1 = virtualinvoke r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean onStateChange(int[])>(r1);

        if $z1 == 0 goto label2;

        z2 = 1;

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 1;

     label2:
        z3 = z2;

        $r3 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r3 == null goto label3;

        z3 = z2;

        $r4 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        if $r4 == null goto label3;

        $r6 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        $r5 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateColorFilters(android.graphics.BlendMode,android.content.res.ColorStateList)>($r6, $r5);

        z3 = 1;

     label3:
        return z3;
    }

    void setAllowCaching(boolean)
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean z0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $l0 = virtualinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: long getNativeRenderer()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetAllowCaching(long,boolean)>($l0, z0);

        return;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.VectorDrawable r0;
        int i0;
        float $f0, $f1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $f0 = (float) i0;

        $f1 = $f0 / 255.0F;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean setAlpha(float)>($f1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setAntiAlias(boolean)
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean z0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        com.android.internal.util.VirtualRefBasePtr $r2;
        long $l0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: com.android.internal.util.VirtualRefBasePtr mNativeTree>;

        $l0 = virtualinvoke $r2.<com.android.internal.util.VirtualRefBasePtr: long get()>();

        staticinvoke <android.graphics.drawable.VectorDrawable: void nSetAntiAlias(long,boolean)>($l0, z0);

        return;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean z0, $z1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z1 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        if $z1 == z0 goto label1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored> = z0;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.ColorFilter r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.ColorFilter mColorFilter> = r1;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

        return;
    }

    public void setTintBlendMode(android.graphics.BlendMode)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.BlendMode r1, $r3, $r5;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2;
        android.content.res.ColorStateList $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.BlendMode;

        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        if $r3 == r1 goto label1;

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode> = r1;

        $r5 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        $r4 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateColorFilters(android.graphics.BlendMode,android.content.res.ColorStateList)>($r5, $r4);

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.content.res.ColorStateList r1, $r3;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2, $r4;
        android.graphics.BlendMode $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r3 == r1 goto label1;

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = r1;

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r5 = $r4.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.BlendMode mBlendMode>;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateColorFilters(android.graphics.BlendMode,android.content.res.ColorStateList)>($r5, r1);

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }
}
