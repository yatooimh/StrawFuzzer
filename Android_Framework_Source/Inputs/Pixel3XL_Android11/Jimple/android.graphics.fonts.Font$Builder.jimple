public final class android.graphics.fonts.Font$Builder extends java.lang.Object
{
    private static final libcore.util.NativeAllocationRegistry sFontRegistry;
    private android.graphics.fonts.FontVariationAxis[] mAxes;
    private java.nio.ByteBuffer mBuffer;
    private java.io.IOException mException;
    private java.io.File mFile;
    private int mItalic;
    private java.lang.String mLocaleList;
    private int mTtcIndex;
    private int mWeight;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        long $l0;
        libcore.util.NativeAllocationRegistry $r2;

        $r0 = class "Landroid/graphics/fonts/Font;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l0 = staticinvoke <android.graphics.fonts.Font$Builder: long nGetReleaseNativeFont()>();

        $r2 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long)>($r1, $l0);

        <android.graphics.fonts.Font$Builder: libcore.util.NativeAllocationRegistry sFontRegistry> = $r2;

        return;
    }

    public void <init>(android.content.res.AssetManager, java.lang.String)
    {
        android.graphics.fonts.Font$Builder r0;
        java.lang.String r1;
        java.nio.ByteBuffer $r2;
        java.lang.Throwable $r3;
        android.content.res.AssetManager r4;
        java.io.IOException r6;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r4 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList> = "";

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mTtcIndex> = 0;

        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = null;

     label1:
        $r2 = staticinvoke <android.graphics.fonts.Font$Builder: java.nio.ByteBuffer createBuffer(android.content.res.AssetManager,java.lang.String,boolean,int)>(r4, r1, 1, 0);

        r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r6 = (java.io.IOException) $r3;

        r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException> = r6;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(android.content.res.AssetManager, java.lang.String, boolean, int)
    {
        android.graphics.fonts.Font$Builder r0;
        java.lang.String r1;
        boolean z0;
        int i0;
        java.nio.ByteBuffer $r2;
        java.lang.Throwable $r3;
        android.content.res.AssetManager r4;
        java.io.IOException r6;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r4 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList> = "";

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mTtcIndex> = 0;

        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = null;

     label1:
        $r2 = staticinvoke <android.graphics.fonts.Font$Builder: java.nio.ByteBuffer createBuffer(android.content.res.AssetManager,java.lang.String,boolean,int)>(r4, r1, z0, i0);

        r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r6 = (java.io.IOException) $r3;

        r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException> = r6;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(android.content.res.Resources, int)
    {
        android.graphics.fonts.Font$Builder r0;
        int i0, $i1;
        java.lang.String r2, $r6, $r13, $r18;
        java.lang.CharSequence $r4, $r5;
        boolean $z0;
        android.content.res.AssetManager $r7;
        java.nio.ByteBuffer $r8;
        java.lang.Throwable $r19;
        android.content.res.Resources r20;
        android.util.TypedValue r24;
        java.lang.StringBuilder r25, r27;
        java.io.FileNotFoundException r26, r28;
        java.io.IOException r29;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r20 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList> = "";

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mTtcIndex> = 0;

        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = null;

        r24 = new android.util.TypedValue;

        specialinvoke r24.<android.util.TypedValue: void <init>()>();

        virtualinvoke r20.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(i0, r24, 1);

        $r4 = r24.<android.util.TypedValue: java.lang.CharSequence string>;

        if $r4 != null goto label1;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        r26 = new java.io.FileNotFoundException;

        $r18 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r18);

        r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException> = r26;

        return;

     label1:
        $r5 = r24.<android.util.TypedValue: java.lang.CharSequence string>;

        r2 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.String toString()>();

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label2;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be font file.");

        r28 = new java.io.FileNotFoundException;

        $r13 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r13);

        r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException> = r28;

        return;

     label2:
        $r7 = virtualinvoke r20.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        $i1 = r24.<android.util.TypedValue: int assetCookie>;

        $r8 = staticinvoke <android.graphics.fonts.Font$Builder: java.nio.ByteBuffer createBuffer(android.content.res.AssetManager,java.lang.String,boolean,int)>($r7, r2, 0, $i1);

        r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer> = $r8;

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        r29 = (java.io.IOException) $r19;

        r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException> = r29;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void <init>(android.os.ParcelFileDescriptor)
    {
        android.graphics.fonts.Font$Builder r0;
        android.os.ParcelFileDescriptor r1;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor,long,long)>(r1, 0L, -1L);

        return;
    }

    public void <init>(android.os.ParcelFileDescriptor, long, long)
    {
        android.graphics.fonts.Font$Builder r0;
        long l0, l2, l5;
        java.io.FileDescriptor $r1;
        byte $b1;
        java.nio.channels.FileChannel$MapMode $r2;
        java.nio.MappedByteBuffer $r3;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8, r12, r13;
        android.os.ParcelFileDescriptor r9;
        java.nio.channels.FileChannel r11;
        java.io.FileInputStream r15;
        java.io.IOException r16;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r9 := @parameter0: android.os.ParcelFileDescriptor;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList> = "";

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mTtcIndex> = 0;

        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = null;

     label01:
        r15 = new java.io.FileInputStream;

     label02:
        $r1 = virtualinvoke r9.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r15.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r1);

     label03:
        r11 = virtualinvoke r15.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

     label04:
        $b1 = l2 cmp -1L;

        if $b1 != 0 goto label07;

     label05:
        l5 = virtualinvoke r11.<java.nio.channels.FileChannel: long size()>();

     label06:
        l2 = l5 - l0;

        goto label07;

     label07:
        $r2 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r3 = virtualinvoke r11.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r2, l0, l2);

        r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer> = $r3;

     label08:
        virtualinvoke r15.<java.io.FileInputStream: void close()>();

     label09:
        goto label20;

     label10:
        $r6 := @caughtexception;

        r12 = $r6;

        goto label19;

     label11:
        $r7 := @caughtexception;

        r13 = $r7;

        goto label13;

     label12:
        $r8 := @caughtexception;

        r13 = $r8;

     label13:
        virtualinvoke r15.<java.io.FileInputStream: void close()>();

     label14:
        goto label17;

     label15:
        $r5 := @caughtexception;

     label16:
        virtualinvoke r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label17:
        throw r13;

     label18:
        $r4 := @caughtexception;

        r12 = $r4;

     label19:
        r16 = (java.io.IOException) r12;

        r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException> = r16;

     label20:
        return;

        catch java.io.IOException from label01 to label02 with label18;
        catch java.io.IOException from label02 to label03 with label18;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label17 to label18 with label18;
    }

    public void <init>(java.io.File)
    {
        android.graphics.fonts.Font$Builder r0;
        java.io.File r1;
        java.nio.channels.FileChannel$MapMode $r3;
        long $l0;
        java.nio.MappedByteBuffer $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.nio.channels.FileChannel r9;
        java.io.FileInputStream r13;
        java.io.IOException r14;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList> = "";

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mTtcIndex> = 0;

        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = null;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "path can not be null");

     label01:
        r13 = new java.io.FileInputStream;

        specialinvoke r13.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label02:
        r9 = virtualinvoke r13.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $r3 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $l0 = virtualinvoke r9.<java.nio.channels.FileChannel: long size()>();

        $r4 = virtualinvoke r9.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r3, 0L, $l0);

        r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer> = $r4;

     label03:
        virtualinvoke r13.<java.io.FileInputStream: void close()>();

     label04:
        goto label12;

     label05:
        $r6 := @caughtexception;

     label06:
        virtualinvoke r13.<java.io.FileInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

     label09:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label10:
        throw $r6;

     label11:
        $r7 := @caughtexception;

        r14 = (java.io.IOException) $r7;

        r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException> = r14;

     label12:
        r0.<android.graphics.fonts.Font$Builder: java.io.File mFile> = r1;

        return;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label10 to label11 with label11;
    }

    public void <init>(java.nio.ByteBuffer)
    {
        android.graphics.fonts.Font$Builder r0;
        java.nio.ByteBuffer r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList> = "";

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = -1;

        r0.<android.graphics.fonts.Font$Builder: int mTtcIndex> = 0;

        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = null;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "buffer can not be null");

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label1;

        r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer> = r1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only direct buffer can be used as the source of font data.");

        throw $r3;
    }

    public void <init>(java.nio.ByteBuffer, java.io.File, java.lang.String)
    {
        android.graphics.fonts.Font$Builder r0;
        java.nio.ByteBuffer r1;
        java.io.File r2;
        java.lang.String r3;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer)>(r1);

        r0.<android.graphics.fonts.Font$Builder: java.io.File mFile> = r2;

        r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList> = r3;

        return;
    }

    public static java.nio.ByteBuffer createBuffer(android.content.res.AssetManager, java.lang.String, boolean, int) throws java.io.IOException
    {
        boolean z0;
        java.nio.channels.FileChannel r0;
        long l0, l1;
        java.lang.Throwable $r3, $r4, $r5, $r6, $r7;
        int $i2, $i3, $i4, i6, i7;
        java.nio.ByteOrder $r8;
        byte[] $r10;
        java.lang.String $r13, r15;
        android.content.res.AssetManager r14;
        android.content.res.AssetFileDescriptor r16;
        java.io.FileInputStream r18;
        java.nio.channels.FileChannel$MapMode $r19;
        java.nio.MappedByteBuffer r20;
        java.io.InputStream r23;
        java.nio.ByteBuffer r24;
        java.io.IOException r25;
        java.lang.StringBuilder r26;

        r14 := @parameter0: android.content.res.AssetManager;

        r15 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i6 := @parameter3: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r14, "assetManager can not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r15, "path can not be null");

        if z0 == 0 goto label04;

     label01:
        r16 = virtualinvoke r14.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>(r15);

     label02:
        goto label08;

     label03:
        $r7 := @caughtexception;

        goto label19;

     label04:
        if i6 <= 0 goto label07;

     label05:
        r16 = virtualinvoke r14.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>(i6, r15);

     label06:
        goto label08;

     label07:
        r16 = virtualinvoke r14.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>(r15);

     label08:
        r18 = virtualinvoke r16.<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>();

     label09:
        r0 = virtualinvoke r18.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        l0 = virtualinvoke r16.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        l1 = virtualinvoke r16.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        $r19 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r20 = virtualinvoke r0.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r19, l0, l1);

     label10:
        if r18 == null goto label12;

     label11:
        virtualinvoke r18.<java.io.FileInputStream: void close()>();

     label12:
        return r20;

     label13:
        $r3 := @caughtexception;

        if r18 == null goto label18;

     label14:
        virtualinvoke r18.<java.io.FileInputStream: void close()>();

     label15:
        goto label18;

     label16:
        $r5 := @caughtexception;

     label17:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label18:
        throw $r3;

     label19:
        if z0 == 0 goto label20;

        r23 = virtualinvoke r14.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>(r15, 3);

        goto label21;

     label20:
        r23 = virtualinvoke r14.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(i6, r15, 3);

     label21:
        $i2 = virtualinvoke r23.<java.io.InputStream: int available()>();

        r24 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i2);

        $r8 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r24.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r8);

        $r10 = virtualinvoke r24.<java.nio.ByteBuffer: byte[] array()>();

        $i3 = virtualinvoke r24.<java.nio.ByteBuffer: int arrayOffset()>();

        $i4 = virtualinvoke r23.<java.io.InputStream: int available()>();

        virtualinvoke r23.<java.io.InputStream: int read(byte[],int,int)>($r10, $i3, $i4);

        i7 = virtualinvoke r23.<java.io.InputStream: int read()>();

     label22:
        if i7 != -1 goto label24;

        if r23 == null goto label23;

        virtualinvoke r23.<java.io.InputStream: void close()>();

     label23:
        return r24;

     label24:
        r25 = new java.io.IOException;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access full contents of ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r13 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw r25;

     label25:
        $r4 := @caughtexception;

        if r23 == null goto label29;

     label26:
        virtualinvoke r23.<java.io.InputStream: void close()>();

     label27:
        goto label29;

     label28:
        $r6 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label29:
        throw $r4;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label03;
        catch java.io.IOException from label07 to label08 with label03;
        catch java.io.IOException from label08 to label09 with label03;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label03;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label03;
        catch java.io.IOException from label18 to label19 with label03;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    private static native void nAddAxis(long, int, float);

    private static native long nBuild(long, java.nio.ByteBuffer, java.lang.String, int, boolean, int);

    private static native long nGetReleaseNativeFont();

    private static native long nInitBuilder();

    public android.graphics.fonts.Font build() throws java.io.IOException
    {
        android.graphics.fonts.Font$Builder r0;
        java.io.IOException $r1, $r2, $r3;
        android.graphics.fonts.FontVariationAxis[] $r4, $r11, r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i14, i15, i16, $i17, $i18, i20, i22;
        java.nio.ByteBuffer $r5, $r6, r16;
        boolean $z0, $z1, z2;
        android.graphics.fonts.Font $r7;
        android.graphics.fonts.FontStyle $r8;
        java.io.File $r9, r17;
        java.lang.String $r10, r18;
        libcore.util.NativeAllocationRegistry $r12;
        float $f0;
        long l19, l21;
        android.graphics.fonts.FontVariationAxis r15;

        r0 := @this: android.graphics.fonts.Font$Builder;

        $r1 = r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException>;

        if $r1 != null goto label13;

        i11 = r0.<android.graphics.fonts.Font$Builder: int mWeight>;

        i12 = 0;

        if i11 == -1 goto label01;

        $i10 = r0.<android.graphics.fonts.Font$Builder: int mItalic>;

        if $i10 != -1 goto label04;

     label01:
        $r5 = r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer>;

        $i0 = r0.<android.graphics.fonts.Font$Builder: int mTtcIndex>;

        $r4 = r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes>;

        i13 = staticinvoke <android.graphics.fonts.FontFileUtil: int analyzeStyle(java.nio.ByteBuffer,int,android.graphics.fonts.FontVariationAxis[])>($r5, $i0, $r4);

        $z0 = staticinvoke <android.graphics.fonts.FontFileUtil: boolean isSuccess(int)>(i13);

        if $z0 == 0 goto label03;

        $i7 = r0.<android.graphics.fonts.Font$Builder: int mWeight>;

        if $i7 != -1 goto label02;

        $i9 = staticinvoke <android.graphics.fonts.FontFileUtil: int unpackWeight(int)>(i13);

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = $i9;

     label02:
        $i8 = r0.<android.graphics.fonts.Font$Builder: int mItalic>;

        if $i8 != -1 goto label04;

        $z1 = staticinvoke <android.graphics.fonts.FontFileUtil: boolean unpackItalic(int)>(i13);

        i22 = (int) $z1;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = i22;

        goto label04;

     label03:
        r0.<android.graphics.fonts.Font$Builder: int mWeight> = 400;

        r0.<android.graphics.fonts.Font$Builder: int mItalic> = 0;

     label04:
        $i14 = r0.<android.graphics.fonts.Font$Builder: int mWeight>;

        i15 = staticinvoke <java.lang.Math: int min(int,int)>(1000, $i14);

        i16 = 1;

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>(1, i15);

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = $i17;

        $i18 = r0.<android.graphics.fonts.Font$Builder: int mItalic>;

        if $i18 != 1 goto label05;

        z2 = 1;

        goto label06;

     label05:
        z2 = 0;

     label06:
        $i1 = r0.<android.graphics.fonts.Font$Builder: int mItalic>;

        if $i1 != 1 goto label07;

        goto label08;

     label07:
        i16 = 0;

     label08:
        l19 = staticinvoke <android.graphics.fonts.Font$Builder: long nInitBuilder()>();

        r14 = r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes>;

        if r14 == null goto label10;

        i20 = lengthof r14;

     label09:
        if i12 >= i20 goto label10;

        r15 = r14[i12];

        $i6 = virtualinvoke r15.<android.graphics.fonts.FontVariationAxis: int getOpenTypeTagValue()>();

        $f0 = virtualinvoke r15.<android.graphics.fonts.FontVariationAxis: float getStyleValue()>();

        staticinvoke <android.graphics.fonts.Font$Builder: void nAddAxis(long,int,float)>(l19, $i6, $f0);

        i12 = i12 + 1;

        goto label09;

     label10:
        $r6 = r0.<android.graphics.fonts.Font$Builder: java.nio.ByteBuffer mBuffer>;

        r16 = virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        r17 = r0.<android.graphics.fonts.Font$Builder: java.io.File mFile>;

        if r17 != null goto label11;

        r18 = "";

        goto label12;

     label11:
        r18 = virtualinvoke r17.<java.io.File: java.lang.String getAbsolutePath()>();

     label12:
        $i3 = r0.<android.graphics.fonts.Font$Builder: int mWeight>;

        $i2 = r0.<android.graphics.fonts.Font$Builder: int mTtcIndex>;

        l21 = staticinvoke <android.graphics.fonts.Font$Builder: long nBuild(long,java.nio.ByteBuffer,java.lang.String,int,boolean,int)>(l19, r16, r18, $i3, z2, $i2);

        $r7 = new android.graphics.fonts.Font;

        $r9 = r0.<android.graphics.fonts.Font$Builder: java.io.File mFile>;

        $r8 = new android.graphics.fonts.FontStyle;

        $i4 = r0.<android.graphics.fonts.Font$Builder: int mWeight>;

        specialinvoke $r8.<android.graphics.fonts.FontStyle: void <init>(int,int)>($i4, i16);

        $i5 = r0.<android.graphics.fonts.Font$Builder: int mTtcIndex>;

        $r11 = r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes>;

        $r10 = r0.<android.graphics.fonts.Font$Builder: java.lang.String mLocaleList>;

        specialinvoke $r7.<android.graphics.fonts.Font: void <init>(long,java.nio.ByteBuffer,java.io.File,android.graphics.fonts.FontStyle,int,android.graphics.fonts.FontVariationAxis[],java.lang.String,android.graphics.fonts.Font$1)>(l21, r16, $r9, $r8, $i5, $r11, $r10, null);

        $r12 = <android.graphics.fonts.Font$Builder: libcore.util.NativeAllocationRegistry sFontRegistry>;

        virtualinvoke $r12.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>($r7, l21);

        return $r7;

     label13:
        $r2 = new java.io.IOException;

        $r3 = r0.<android.graphics.fonts.Font$Builder: java.io.IOException mException>;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to read font contents", $r3);

        throw $r2;
    }

    public android.graphics.fonts.Font$Builder setFontVariationSettings(java.lang.String)
    {
        android.graphics.fonts.Font$Builder r0;
        java.lang.String r1;
        android.graphics.fonts.FontVariationAxis[] $r2;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>(r1);

        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = $r2;

        return r0;
    }

    public android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])
    {
        android.graphics.fonts.Font$Builder r0;
        java.lang.Object $r1;
        android.graphics.fonts.FontVariationAxis[] r2, r3;

        r0 := @this: android.graphics.fonts.Font$Builder;

        r2 := @parameter0: android.graphics.fonts.FontVariationAxis[];

        if r2 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        r3 = (android.graphics.fonts.FontVariationAxis[]) $r1;

     label2:
        r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.FontVariationAxis[] mAxes> = r3;

        return r0;
    }

    public android.graphics.fonts.Font$Builder setSlant(int)
    {
        android.graphics.fonts.Font$Builder r0;
        int i0;
        byte b1;

        r0 := @this: android.graphics.fonts.Font$Builder;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        b1 = 0;

        goto label2;

     label1:
        b1 = 1;

     label2:
        r0.<android.graphics.fonts.Font$Builder: int mItalic> = b1;

        return r0;
    }

    public android.graphics.fonts.Font$Builder setTtcIndex(int)
    {
        android.graphics.fonts.Font$Builder r0;
        int i0;

        r0 := @this: android.graphics.fonts.Font$Builder;

        i0 := @parameter0: int;

        r0.<android.graphics.fonts.Font$Builder: int mTtcIndex> = i0;

        return r0;
    }

    public android.graphics.fonts.Font$Builder setWeight(int)
    {
        android.graphics.fonts.Font$Builder r0;
        int i0;
        boolean z0;

        r0 := @this: android.graphics.fonts.Font$Builder;

        i0 := @parameter0: int;

        z0 = 1;

        if 1 > i0 goto label1;

        if i0 > 1000 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z0);

        r0.<android.graphics.fonts.Font$Builder: int mWeight> = i0;

        return r0;
    }
}
