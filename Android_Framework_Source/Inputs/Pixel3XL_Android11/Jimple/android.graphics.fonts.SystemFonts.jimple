public final class android.graphics.fonts.SystemFonts extends java.lang.Object
{
    private static final java.lang.String DEFAULT_FAMILY;
    private static final java.lang.String TAG;
    private static final android.text.FontConfig$Alias[] sAliases;
    private static final java.util.List sAvailableFonts;
    private static final java.util.Map sSystemFallbackMap;

    static void <clinit>()
    {
        android.util.ArrayMap $r2;
        java.util.ArrayList $r3;
        android.graphics.fonts.FontCustomizationParser$Result $r4;
        android.text.FontConfig$Alias[] $r5;
        java.util.Map $r6;
        java.util.List $r7;

        <android.graphics.fonts.SystemFonts: java.lang.String TAG> = "SystemFonts";

        <android.graphics.fonts.SystemFonts: java.lang.String DEFAULT_FAMILY> = "sans-serif";

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <android.graphics.fonts.SystemFonts: android.graphics.fonts.FontCustomizationParser$Result readFontCustomization(java.lang.String,java.lang.String)>("/product/etc/fonts_customization.xml", "/product/fonts/");

        $r5 = staticinvoke <android.graphics.fonts.SystemFonts: android.text.FontConfig$Alias[] buildSystemFallback(java.lang.String,java.lang.String,android.graphics.fonts.FontCustomizationParser$Result,android.util.ArrayMap,java.util.ArrayList)>("/system/etc/fonts.xml", "/system/fonts/", $r4, $r2, $r3);

        <android.graphics.fonts.SystemFonts: android.text.FontConfig$Alias[] sAliases> = $r5;

        $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        <android.graphics.fonts.SystemFonts: java.util.Map sSystemFallbackMap> = $r6;

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        <android.graphics.fonts.SystemFonts: java.util.List sAvailableFonts> = $r7;

        return;
    }

    private void <init>()
    {
        android.graphics.fonts.SystemFonts r0;

        r0 := @this: android.graphics.fonts.SystemFonts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void appendNamedFamily(android.text.FontConfig$Family, java.util.HashMap, android.util.ArrayMap, java.util.ArrayList)
    {
        android.util.ArrayMap r0;
        java.util.ArrayList r1, $r6;
        java.lang.String r2, $r5;
        android.text.FontConfig$Font[] $r3;
        java.util.List $r4;
        int $i0;
        android.text.FontConfig$Family r8;
        java.util.HashMap r9;
        android.graphics.fonts.FontFamily r10;

        r8 := @parameter0: android.text.FontConfig$Family;

        r9 := @parameter1: java.util.HashMap;

        r0 := @parameter2: android.util.ArrayMap;

        r1 := @parameter3: java.util.ArrayList;

        r2 = virtualinvoke r8.<android.text.FontConfig$Family: java.lang.String getName()>();

        $r3 = virtualinvoke r8.<android.text.FontConfig$Family: android.text.FontConfig$Font[] getFonts()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r5 = virtualinvoke r8.<android.text.FontConfig$Family: java.lang.String getLanguages()>();

        $i0 = virtualinvoke r8.<android.text.FontConfig$Family: int getVariant()>();

        r10 = staticinvoke <android.graphics.fonts.SystemFonts: android.graphics.fonts.FontFamily createFontFamily(java.lang.String,java.util.List,java.lang.String,int,java.util.Map,java.util.ArrayList)>(r2, $r4, $r5, $i0, r9, r1);

        if r10 != null goto label1;

        return;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

        virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

        return;
    }

    public static android.text.FontConfig$Alias[] buildSystemFallback(java.lang.String, java.lang.String, android.graphics.fonts.FontCustomizationParser$Result, android.util.ArrayMap, java.util.ArrayList)
    {
        android.graphics.fonts.FontCustomizationParser$Result r0;
        android.util.ArrayMap r1, r29;
        java.util.HashMap r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i7, i8, i9, i10;
        java.util.ArrayList $r3, $r6, $r16, r25, r34;
        android.text.FontConfig$Alias[] $r4, $r7, $r22, r35;
        java.util.List $r5, r33;
        java.lang.Object[] $r8, $r12, $r21;
        java.lang.Object $r9, $r10, $r17;
        android.graphics.fonts.FontFamily[] $r11, $r13;
        java.lang.String $r15, $r19, r23, r24, r32;
        android.text.FontConfig$Family $r18, r30, r31;
        java.lang.Throwable $r20;
        java.io.FileInputStream r26;
        android.text.FontConfig r27;
        android.text.FontConfig$Family[] r28;

        r23 := @parameter0: java.lang.String;

        r24 := @parameter1: java.lang.String;

        r0 := @parameter2: android.graphics.fonts.FontCustomizationParser$Result;

        r1 := @parameter3: android.util.ArrayMap;

        r25 := @parameter4: java.util.ArrayList;

     label01:
        r26 = new java.io.FileInputStream;

        specialinvoke r26.<java.io.FileInputStream: void <init>(java.lang.String)>(r23);

        r27 = staticinvoke <android.graphics.FontListParser: android.text.FontConfig parse(java.io.InputStream,java.lang.String)>(r26, r24);

        r2 = new java.util.HashMap;

        specialinvoke r2.<java.util.HashMap: void <init>()>();

        r28 = virtualinvoke r27.<android.text.FontConfig: android.text.FontConfig$Family[] getFamilies()>();

        r29 = new android.util.ArrayMap;

        specialinvoke r29.<android.util.ArrayMap: void <init>()>();

        i0 = lengthof r28;

     label02:
        i7 = 0;

     label03:
        if i7 >= i0 goto label08;

        r30 = r28[i7];

     label04:
        $r19 = virtualinvoke r30.<android.text.FontConfig$Family: java.lang.String getName()>();

        if $r19 != null goto label06;

     label05:
        goto label07;

     label06:
        staticinvoke <android.graphics.fonts.SystemFonts: void appendNamedFamily(android.text.FontConfig$Family,java.util.HashMap,android.util.ArrayMap,java.util.ArrayList)>(r30, r2, r29, r25);

     label07:
        i7 = i7 + 1;

        goto label03;

     label08:
        i8 = 0;

     label09:
        $r3 = r0.<android.graphics.fonts.FontCustomizationParser$Result: java.util.ArrayList mAdditionalNamedFamilies>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i8 >= $i1 goto label11;

        $r16 = r0.<android.graphics.fonts.FontCustomizationParser$Result: java.util.ArrayList mAdditionalNamedFamilies>;

        $r17 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r18 = (android.text.FontConfig$Family) $r17;

        staticinvoke <android.graphics.fonts.SystemFonts: void appendNamedFamily(android.text.FontConfig$Family,java.util.HashMap,android.util.ArrayMap,java.util.ArrayList)>($r18, r2, r29, r25);

     label10:
        i8 = i8 + 1;

        goto label09;

     label11:
        i9 = 0;

     label12:
        $i2 = lengthof r28;

        if i9 >= $i2 goto label17;

     label13:
        r31 = r28[i9];

        if i9 == 0 goto label15;

     label14:
        $r15 = virtualinvoke r31.<android.text.FontConfig$Family: java.lang.String getName()>();

        if $r15 != null goto label16;

     label15:
        staticinvoke <android.graphics.fonts.SystemFonts: void pushFamilyToFallback(android.text.FontConfig$Family,android.util.ArrayMap,java.util.Map,java.util.ArrayList)>(r31, r29, r2, r25);

     label16:
        i9 = i9 + 1;

        goto label12;

     label17:
        i10 = 0;

     label18:
        $i3 = virtualinvoke r29.<android.util.ArrayMap: int size()>();

        if i10 >= $i3 goto label20;

        $r9 = virtualinvoke r29.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i10);

        r32 = (java.lang.String) $r9;

        $r10 = virtualinvoke r29.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i10);

        r33 = (java.util.List) $r10;

        $i5 = interfaceinvoke r33.<java.util.List: int size()>();

        $r11 = newarray (android.graphics.fonts.FontFamily)[$i5];

        $r12 = interfaceinvoke r33.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (android.graphics.fonts.FontFamily[]) $r12;

        virtualinvoke r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, $r13);

     label19:
        i10 = i10 + 1;

        goto label18;

     label20:
        r34 = new java.util.ArrayList;

        specialinvoke r34.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r27.<android.text.FontConfig: android.text.FontConfig$Alias[] getAliases()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        virtualinvoke r34.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r5);

        $r6 = r0.<android.graphics.fonts.FontCustomizationParser$Result: java.util.ArrayList mAdditionalAliases>;

        virtualinvoke r34.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        $i4 = virtualinvoke r34.<java.util.ArrayList: int size()>();

        $r7 = newarray (android.text.FontConfig$Alias)[$i4];

        $r8 = virtualinvoke r34.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r35 = (android.text.FontConfig$Alias[]) $r8;

     label21:
        return r35;

     label22:
        $r20 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemFonts", "Failed initialize system fallbacks.", $r20);

        $r21 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "Landroid/text/FontConfig$Alias;");

        $r22 = (android.text.FontConfig$Alias[]) $r21;

        return $r22;

        catch java.io.IOException from label01 to label02 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label22;
        catch java.io.IOException from label04 to label05 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label22;
        catch java.io.IOException from label06 to label07 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label22;
        catch java.io.IOException from label09 to label10 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label22;
        catch java.io.IOException from label12 to label13 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label22;
        catch java.io.IOException from label14 to label15 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label22;
        catch java.io.IOException from label15 to label16 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label22;
        catch java.io.IOException from label18 to label19 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label22;
        catch java.io.IOException from label20 to label21 with label22;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label22;
    }

    private static android.graphics.fonts.FontFamily createFontFamily(java.lang.String, java.util.List, java.lang.String, int, java.util.Map, java.util.ArrayList)
    {
        java.util.List r0;
        java.lang.String r1, r5, r16;
        int i0, i1, $i2, $i3, i4, i5;
        java.util.Map r2;
        java.util.ArrayList r3;
        android.text.FontConfig$Font r4;
        java.io.File r6;
        java.lang.Object $r7, $r8;
        boolean $z0, $z1;
        android.graphics.fonts.Font$Builder $r9, $r10, $r12, r21, r22;
        android.graphics.fonts.FontVariationAxis[] $r11;
        android.graphics.fonts.FontFamily$Builder $r13, r17;
        java.lang.Throwable $r14;
        java.lang.RuntimeException $r15;
        byte b6;
        java.nio.ByteBuffer r18, r19, r20;
        android.graphics.fonts.Font r23;
        android.graphics.fonts.FontFamily r25;

        r16 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r2 := @parameter4: java.util.Map;

        r3 := @parameter5: java.util.ArrayList;

        i4 = interfaceinvoke r0.<java.util.List: int size()>();

        if i4 != 0 goto label01;

        return null;

     label01:
        r17 = null;

        i5 = 0;

     label02:
        i1 = interfaceinvoke r0.<java.util.List: int size()>();

        b6 = 0;

        if i5 >= i1 goto label11;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        r4 = (android.text.FontConfig$Font) $r7;

        r5 = virtualinvoke r4.<android.text.FontConfig$Font: java.lang.String getFontName()>();

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r18 = (java.nio.ByteBuffer) $r8;

        r19 = r18;

        if r18 != null goto label04;

        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 == 0 goto label03;

        goto label09;

     label03:
        r20 = staticinvoke <android.graphics.fonts.SystemFonts: java.nio.ByteBuffer mmap(java.lang.String)>(r5);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r20);

        r19 = r20;

        if r20 != null goto label04;

        goto label09;

     label04:
        r21 = new android.graphics.fonts.Font$Builder;

        r6 = new java.io.File;

        specialinvoke r6.<java.io.File: void <init>(java.lang.String)>(r5);

        specialinvoke r21.<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer,java.io.File,java.lang.String)>(r19, r6, r1);

        $i2 = virtualinvoke r4.<android.text.FontConfig$Font: int getWeight()>();

        r22 = virtualinvoke r21.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>($i2);

        $z0 = virtualinvoke r4.<android.text.FontConfig$Font: boolean isItalic()>();

        if $z0 == 0 goto label06;

     label05:
        b6 = 1;

        goto label06;

     label06:
        $r9 = virtualinvoke r22.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>(b6);

        $i3 = virtualinvoke r4.<android.text.FontConfig$Font: int getTtcIndex()>();

        $r10 = virtualinvoke $r9.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>($i3);

        $r11 = virtualinvoke r4.<android.text.FontConfig$Font: android.graphics.fonts.FontVariationAxis[] getAxes()>();

        $r12 = virtualinvoke $r10.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>($r11);

        r23 = virtualinvoke $r12.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>();

     label07:
        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r23);

        if r17 != null goto label08;

        $r13 = new android.graphics.fonts.FontFamily$Builder;

        specialinvoke $r13.<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>(r23);

        r17 = $r13;

        goto label09;

     label08:
        virtualinvoke r17.<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>(r23);

     label09:
        i5 = i5 + 1;

        goto label02;

     label10:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

     label11:
        if r17 != null goto label12;

        r25 = null;

        goto label13;

     label12:
        r25 = virtualinvoke r17.<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build(java.lang.String,int,boolean)>(r1, i0, 0);

     label13:
        return r25;

        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.IOException from label06 to label07 with label10;
    }

    public static android.text.FontConfig$Alias[] getAliases()
    {
        android.text.FontConfig$Alias[] $r0;

        $r0 = <android.graphics.fonts.SystemFonts: android.text.FontConfig$Alias[] sAliases>;

        return $r0;
    }

    public static java.util.Set getAvailableFonts()
    {
        java.util.HashSet $r1;
        java.util.List $r2;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = <android.graphics.fonts.SystemFonts: java.util.List sAvailableFonts>;

        virtualinvoke $r1.<java.util.HashSet: boolean addAll(java.util.Collection)>($r2);

        return $r1;
    }

    public static java.util.Map getRawSystemFallbackMap()
    {
        java.util.Map $r0;

        $r0 = <android.graphics.fonts.SystemFonts: java.util.Map sSystemFallbackMap>;

        return $r0;
    }

    public static android.graphics.fonts.FontFamily[] getSystemFallback(java.lang.String)
    {
        java.util.Map $r0, $r2;
        java.lang.Object $r1, $r3;
        java.lang.String r4;
        android.graphics.fonts.FontFamily[] r5;

        r4 := @parameter0: java.lang.String;

        $r0 = <android.graphics.fonts.SystemFonts: java.util.Map sSystemFallbackMap>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (android.graphics.fonts.FontFamily[]) $r1;

        if r5 != null goto label1;

        $r2 = <android.graphics.fonts.SystemFonts: java.util.Map sSystemFallbackMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("sans-serif");

        r5 = (android.graphics.fonts.FontFamily[]) $r3;

        goto label1;

     label1:
        return r5;
    }

    private static java.nio.ByteBuffer mmap(java.lang.String)
    {
        long l0;
        java.nio.channels.FileChannel$MapMode $r0;
        java.lang.Throwable $r1, $r2, $r3;
        java.lang.String r4;
        java.io.FileInputStream r5;
        java.nio.channels.FileChannel r6;
        java.nio.MappedByteBuffer r7;

        r4 := @parameter0: java.lang.String;

     label01:
        r5 = new java.io.FileInputStream;

        specialinvoke r5.<java.io.FileInputStream: void <init>(java.lang.String)>(r4);

     label02:
        r6 = virtualinvoke r5.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        l0 = virtualinvoke r6.<java.nio.channels.FileChannel: long size()>();

        $r0 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r7 = virtualinvoke r6.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r0, 0L, l0);

     label03:
        virtualinvoke r5.<java.io.FileInputStream: void close()>();

     label04:
        return r7;

     label05:
        $r3 := @caughtexception;

     label06:
        virtualinvoke r5.<java.io.FileInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r1 := @caughtexception;

     label09:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label10:
        throw $r3;

     label11:
        $r2 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label10 to label11 with label11;
    }

    private static void pushFamilyToFallback(android.text.FontConfig$Family, android.util.ArrayMap, java.util.Map, java.util.ArrayList)
    {
        android.text.FontConfig$Family r0;
        android.util.ArrayMap r1, $r11;
        java.util.Map r2;
        java.util.ArrayList r3, $r10, $r17, $r19, $r21, $r23, r25, r26, r28;
        java.lang.String r4, r9, $r12, $r15;
        int i0, i1, i2, i3, $i4;
        android.text.FontConfig$Font[] r7;
        android.text.FontConfig$Font r8;
        boolean $z0;
        java.lang.Object $r13, $r14, $r16, $r18, $r20, $r22;
        android.graphics.fonts.FontFamily r27, r29;

        r0 := @parameter0: android.text.FontConfig$Family;

        r1 := @parameter1: android.util.ArrayMap;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.ArrayList;

        r4 = virtualinvoke r0.<android.text.FontConfig$Family: java.lang.String getLanguages()>();

        i0 = virtualinvoke r0.<android.text.FontConfig$Family: int getVariant()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new android.util.ArrayMap;

        specialinvoke $r11.<android.util.ArrayMap: void <init>()>();

        r7 = virtualinvoke r0.<android.text.FontConfig$Family: android.text.FontConfig$Font[] getFonts()>();

        i1 = lengthof r7;

        i2 = 0;

     label01:
        if i2 >= i1 goto label05;

        r8 = r7[i2];

        r9 = virtualinvoke r8.<android.text.FontConfig$Font: java.lang.String getFallbackFor()>();

        if r9 != null goto label02;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        goto label04;

     label02:
        $r22 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        r25 = (java.util.ArrayList) $r22;

        r26 = r25;

        if r25 != null goto label03;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        r26 = $r23;

        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r23);

     label03:
        virtualinvoke r26.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label04:
        i2 = i2 + 1;

        goto label01;

     label05:
        $z0 = virtualinvoke $r10.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label06;

        r27 = null;

        goto label07;

     label06:
        $r12 = virtualinvoke r0.<android.text.FontConfig$Family: java.lang.String getName()>();

        r27 = staticinvoke <android.graphics.fonts.SystemFonts: android.graphics.fonts.FontFamily createFontFamily(java.lang.String,java.util.List,java.lang.String,int,java.util.Map,java.util.ArrayList)>($r12, $r10, r4, i0, r2, r3);

     label07:
        i3 = 0;

     label08:
        $i4 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        if i3 >= $i4 goto label12;

        $r13 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        $r14 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r13);

        r28 = (java.util.ArrayList) $r14;

        if r28 != null goto label09;

        if r27 == null goto label11;

        $r20 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r21 = (java.util.ArrayList) $r20;

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r27);

        goto label11;

     label09:
        $r15 = virtualinvoke r0.<android.text.FontConfig$Family: java.lang.String getName()>();

        r29 = staticinvoke <android.graphics.fonts.SystemFonts: android.graphics.fonts.FontFamily createFontFamily(java.lang.String,java.util.List,java.lang.String,int,java.util.Map,java.util.ArrayList)>($r15, r28, r4, i0, r2, r3);

        if r29 == null goto label10;

        $r18 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r19 = (java.util.ArrayList) $r18;

        virtualinvoke $r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r29);

        goto label11;

     label10:
        if r27 == null goto label11;

        $r16 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r17 = (java.util.ArrayList) $r16;

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>(r27);

     label11:
        i3 = i3 + 1;

        goto label08;

     label12:
        return;
    }

    private static android.graphics.fonts.FontCustomizationParser$Result readFontCustomization(java.lang.String, java.lang.String)
    {
        java.io.FileInputStream r0;
        java.lang.Throwable $r1, $r3, $r4, $r6;
        android.graphics.fonts.FontCustomizationParser$Result $r2, $r5, r9;
        java.lang.String r7, r8;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

     label01:
        r0 = new java.io.FileInputStream;

        specialinvoke r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r7);

     label02:
        r9 = staticinvoke <android.graphics.fonts.FontCustomizationParser: android.graphics.fonts.FontCustomizationParser$Result parse(java.io.InputStream,java.lang.String)>(r0, r8);

     label03:
        virtualinvoke r0.<java.io.FileInputStream: void close()>();

     label04:
        return r9;

     label05:
        $r6 := @caughtexception;

     label06:
        virtualinvoke r0.<java.io.FileInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r3 := @caughtexception;

     label09:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label10:
        throw $r6;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemFonts", "Failed to parse font customization XML", $r4);

        $r5 = new android.graphics.fonts.FontCustomizationParser$Result;

        specialinvoke $r5.<android.graphics.fonts.FontCustomizationParser$Result: void <init>()>();

        return $r5;

     label12:
        $r1 := @caughtexception;

        $r2 = new android.graphics.fonts.FontCustomizationParser$Result;

        specialinvoke $r2.<android.graphics.fonts.FontCustomizationParser$Result: void <init>()>();

        return $r2;

        catch java.io.IOException from label01 to label02 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label11;
        catch java.io.IOException from label10 to label11 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label11;
    }
}
