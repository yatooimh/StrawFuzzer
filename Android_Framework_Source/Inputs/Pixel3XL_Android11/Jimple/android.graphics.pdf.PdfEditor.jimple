public final class android.graphics.pdf.PdfEditor extends java.lang.Object
{
    private final dalvik.system.CloseGuard mCloseGuard;
    private android.os.ParcelFileDescriptor mInput;
    private long mNativeDocument;
    private int mPageCount;

    public void <init>(android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.graphics.pdf.PdfEditor r0;
        dalvik.system.CloseGuard $r1, $r7;
        java.lang.NullPointerException $r2;
        java.io.FileDescriptor $r3, $r4;
        int $i0, $i2, $i3;
        android.system.StructStat $r5;
        android.os.ParcelFileDescriptor $r6, r12;
        java.lang.Throwable $r8, $r9, $r10;
        long $l4, l5, l6;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object r13;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r12 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard> = $r1;

        if r12 == null goto label14;

     label01:
        $r3 = virtualinvoke r12.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = <android.system.OsConstants: int SEEK_SET>;

        staticinvoke <android.system.Os: long lseek(java.io.FileDescriptor,long,int)>($r3, 0L, $i0);

        $r4 = virtualinvoke r12.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r5 = staticinvoke <android.system.Os: android.system.StructStat fstat(java.io.FileDescriptor)>($r4);

        l5 = $r5.<android.system.StructStat: long st_size>;

     label02:
        r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput> = r12;

        r13 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r13;

     label03:
        $r6 = r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput>;

        $i2 = virtualinvoke $r6.<android.os.ParcelFileDescriptor: int getFd()>();

        l6 = staticinvoke <android.graphics.pdf.PdfEditor: long nativeOpen(int,long)>($i2, l5);

        r0.<android.graphics.pdf.PdfEditor: long mNativeDocument> = l6;

     label04:
        $i3 = staticinvoke <android.graphics.pdf.PdfEditor: int nativeGetPageCount(long)>(l6);

        r0.<android.graphics.pdf.PdfEditor: int mPageCount> = $i3;

     label05:
        exitmonitor r13;

     label06:
        $r7 = r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r7.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

     label07:
        $r8 := @caughtexception;

     label08:
        $l4 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeClose(long)>($l4);

        r0.<android.graphics.pdf.PdfEditor: long mNativeDocument> = 0L;

     label09:
        throw $r8;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r13;

     label12:
        throw $r9;

     label13:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file descriptor not seekable");

        throw $r11;

     label14:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("input cannot be null");

        throw $r2;

        catch android.system.ErrnoException from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void doClose()
    {
        android.graphics.pdf.PdfEditor r0;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r2;
        java.lang.Throwable $r3;
        java.lang.Object r4;
        android.os.ParcelFileDescriptor r5;

        r0 := @this: android.graphics.pdf.PdfEditor;

        $l0 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label6;

        r4 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r4;

     label1:
        $l2 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeClose(long)>($l2);

        exitmonitor r4;

     label2:
        r0.<android.graphics.pdf.PdfEditor: long mNativeDocument> = 0L;

        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r4;

     label5:
        throw $r3;

     label6:
        r5 = r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput>;

        if r5 == null goto label7;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput> = null;

     label7:
        $r2 = r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static native void nativeClose(long);

    private static native int nativeGetPageCount(long);

    private static native boolean nativeGetPageCropBox(long, int, android.graphics.Rect);

    private static native boolean nativeGetPageMediaBox(long, int, android.graphics.Rect);

    private static native void nativeGetPageSize(long, int, android.graphics.Point);

    private static native long nativeOpen(int, long);

    private static native int nativeRemovePage(long, int);

    private static native boolean nativeScaleForPrinting(long);

    private static native void nativeSetPageCropBox(long, int, android.graphics.Rect);

    private static native void nativeSetPageMediaBox(long, int, android.graphics.Rect);

    private static native void nativeSetTransformAndClip(long, int, long, int, int, int, int);

    private static native void nativeWrite(long, int);

    private void throwIfClosed()
    {
        android.graphics.pdf.PdfEditor r0;
        android.os.ParcelFileDescriptor $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        $r1 = r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already closed");

        throw $r2;
    }

    private void throwIfCropBoxNull(android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        android.graphics.Rect r1;
        java.lang.NullPointerException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("cropBox cannot be null");

        throw $r2;
    }

    private void throwIfMediaBoxNull(android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        android.graphics.Rect r1;
        java.lang.NullPointerException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("mediaBox cannot be null");

        throw $r2;
    }

    private void throwIfNotNullAndNotAfine(android.graphics.Matrix)
    {
        android.graphics.pdf.PdfEditor r0;
        android.graphics.Matrix r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.graphics.Matrix;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.graphics.Matrix: boolean isAffine()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Matrix must be afine");

        throw $r2;

     label2:
        return;
    }

    private void throwIfOutCropBoxNull(android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        android.graphics.Rect r1;
        java.lang.NullPointerException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("outCropBox cannot be null");

        throw $r2;
    }

    private void throwIfOutMediaBoxNull(android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        android.graphics.Rect r1;
        java.lang.NullPointerException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("outMediaBox cannot be null");

        throw $r2;
    }

    private void throwIfOutSizeNull(android.graphics.Point)
    {
        android.graphics.pdf.PdfEditor r0;
        android.graphics.Point r1;
        java.lang.NullPointerException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.graphics.Point;

        if r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("outSize cannot be null");

        throw $r2;
    }

    private void throwIfPageNotInDocument(int)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.graphics.pdf.PdfEditor: int mPageCount>;

        if i0 >= $i1 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid page index");

        throw $r1;
    }

    public void close()
    {
        android.graphics.pdf.PdfEditor r0;

        r0 := @this: android.graphics.pdf.PdfEditor;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void doClose()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.pdf.PdfEditor r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.graphics.pdf.PdfEditor;

     label1:
        $r2 = r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        specialinvoke r0.<android.graphics.pdf.PdfEditor: void doClose()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int getPageCount()
    {
        android.graphics.pdf.PdfEditor r0;
        int $i0;

        r0 := @this: android.graphics.pdf.PdfEditor;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        $i0 = r0.<android.graphics.pdf.PdfEditor: int mPageCount>;

        return $i0;
    }

    public boolean getPageCropBox(int, android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        long $l1;
        java.lang.Throwable $r2;
        android.graphics.Rect r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfOutCropBoxNull(android.graphics.Rect)>(r3);

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        z0 = staticinvoke <android.graphics.pdf.PdfEditor: boolean nativeGetPageCropBox(long,int,android.graphics.Rect)>($l1, i0, r3);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean getPageMediaBox(int, android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        long $l1;
        java.lang.Throwable $r2;
        android.graphics.Rect r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfOutMediaBoxNull(android.graphics.Rect)>(r3);

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        z0 = staticinvoke <android.graphics.pdf.PdfEditor: boolean nativeGetPageMediaBox(long,int,android.graphics.Rect)>($l1, i0, r3);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getPageSize(int, android.graphics.Point)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0;
        java.lang.Object r1;
        long $l1;
        java.lang.Throwable $r2;
        android.graphics.Point r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Point;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfOutSizeNull(android.graphics.Point)>(r3);

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeGetPageSize(long,int,android.graphics.Point)>($l1, i0, r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removePage(int)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0, $i2;
        java.lang.Object r1;
        long $l1;
        java.lang.Throwable $r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $i2 = staticinvoke <android.graphics.pdf.PdfEditor: int nativeRemovePage(long,int)>($l1, i0);

        r0.<android.graphics.pdf.PdfEditor: int mPageCount> = $i2;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPageCropBox(int, android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0;
        java.lang.Object r1;
        long $l1;
        java.lang.Throwable $r2;
        android.graphics.Rect r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfCropBoxNull(android.graphics.Rect)>(r3);

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeSetPageCropBox(long,int,android.graphics.Rect)>($l1, i0, r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPageMediaBox(int, android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0;
        java.lang.Object r1;
        long $l1;
        java.lang.Throwable $r2;
        android.graphics.Rect r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfMediaBoxNull(android.graphics.Rect)>(r3);

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeSetPageMediaBox(long,int,android.graphics.Rect)>($l1, i0, r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setTransformAndClip(int, android.graphics.Matrix, android.graphics.Rect)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8;
        long $l5, $l6, $l9, $l10;
        android.graphics.Point $r1;
        java.lang.Throwable $r2, $r3;
        android.graphics.Matrix r4, r6;
        android.graphics.Rect r5;
        java.lang.Object r8, r10;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        r4 := @parameter1: android.graphics.Matrix;

        r5 := @parameter2: android.graphics.Rect;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfNotNullAndNotAfine(android.graphics.Matrix)>(r4);

        r6 = r4;

        if r4 != null goto label01;

        r6 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

     label01:
        if r5 != null goto label07;

        $r1 = new android.graphics.Point;

        specialinvoke $r1.<android.graphics.Point: void <init>()>();

        virtualinvoke r0.<android.graphics.pdf.PdfEditor: void getPageSize(int,android.graphics.Point)>(i0, $r1);

        r8 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r8;

     label02:
        $l10 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $l9 = r6.<android.graphics.Matrix: long native_instance>;

        $i8 = $r1.<android.graphics.Point: int x>;

        $i7 = $r1.<android.graphics.Point: int y>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeSetTransformAndClip(long,int,long,int,int,int,int)>($l10, i0, $l9, 0, 0, $i8, $i7);

        exitmonitor r8;

     label03:
        goto label09;

     label04:
        $r3 := @caughtexception;

     label05:
        exitmonitor r8;

     label06:
        throw $r3;

     label07:
        r10 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r10;

     label08:
        $l6 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $l5 = r6.<android.graphics.Matrix: long native_instance>;

        $i4 = r5.<android.graphics.Rect: int left>;

        $i3 = r5.<android.graphics.Rect: int top>;

        $i2 = r5.<android.graphics.Rect: int right>;

        $i1 = r5.<android.graphics.Rect: int bottom>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeSetTransformAndClip(long,int,long,int,int,int,int)>($l6, i0, $l5, $i4, $i3, $i2, $i1);

        exitmonitor r10;

     label09:
        return;

     label10:
        $r2 := @caughtexception;

     label11:
        exitmonitor r10;

     label12:
        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean shouldScaleForPrinting()
    {
        android.graphics.pdf.PdfEditor r0;
        java.lang.Object r1;
        boolean z0;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l0 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        z0 = staticinvoke <android.graphics.pdf.PdfEditor: boolean nativeScaleForPrinting(long)>($l0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void write(android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.graphics.pdf.PdfEditor r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.Object r2;
        long $l0;
        int $i1;
        java.lang.Throwable $r3, $r4;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

     label1:
        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        r2 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r2;

     label2:
        $l0 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $i1 = virtualinvoke r1.<android.os.ParcelFileDescriptor: int getFd()>();

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeWrite(long,int)>($l0, $i1);

        exitmonitor r2;

     label3:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r4;

     label7:
        $r3 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }
}
