public final class android.graphics.pdf.PdfRenderer extends java.lang.Object implements java.lang.AutoCloseable
{
    static final java.lang.Object sPdfiumLock;
    private final dalvik.system.CloseGuard mCloseGuard;
    private android.graphics.pdf.PdfRenderer$Page mCurrentPage;
    private android.os.ParcelFileDescriptor mInput;
    private long mNativeDocument;
    private final int mPageCount;
    private final android.graphics.Point mTempPoint;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock> = $r0;

        return;
    }

    public void <init>(android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.graphics.pdf.PdfRenderer r0;
        dalvik.system.CloseGuard $r1, $r8;
        android.graphics.Point $r2;
        java.lang.NullPointerException $r3;
        java.io.FileDescriptor $r4, $r5;
        int $i0, $i2, $i3;
        android.system.StructStat $r6;
        android.os.ParcelFileDescriptor $r7, r13;
        java.lang.Throwable $r9, $r10, $r12;
        long $l4, l5, l6;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object r14;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        r13 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard> = $r1;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        r0.<android.graphics.pdf.PdfRenderer: android.graphics.Point mTempPoint> = $r2;

        if r13 == null goto label14;

     label01:
        $r4 = virtualinvoke r13.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = <android.system.OsConstants: int SEEK_SET>;

        staticinvoke <android.system.Os: long lseek(java.io.FileDescriptor,long,int)>($r4, 0L, $i0);

        $r5 = virtualinvoke r13.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r6 = staticinvoke <android.system.Os: android.system.StructStat fstat(java.io.FileDescriptor)>($r5);

        l5 = $r6.<android.system.StructStat: long st_size>;

     label02:
        r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput> = r13;

        r14 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r14;

     label03:
        $r7 = r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput>;

        $i2 = virtualinvoke $r7.<android.os.ParcelFileDescriptor: int getFd()>();

        l6 = staticinvoke <android.graphics.pdf.PdfRenderer: long nativeCreate(int,long)>($i2, l5);

        r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument> = l6;

     label04:
        $i3 = staticinvoke <android.graphics.pdf.PdfRenderer: int nativeGetPageCount(long)>(l6);

        r0.<android.graphics.pdf.PdfRenderer: int mPageCount> = $i3;

     label05:
        exitmonitor r14;

     label06:
        $r8 = r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

     label07:
        $r9 := @caughtexception;

     label08:
        $l4 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfRenderer: void nativeClose(long)>($l4);

        r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument> = 0L;

     label09:
        throw $r9;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r14;

     label12:
        throw $r12;

     label13:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file descriptor not seekable");

        throw $r11;

     label14:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("input cannot be null");

        throw $r3;

        catch android.system.ErrnoException from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    static android.graphics.Point access$100(android.graphics.pdf.PdfRenderer)
    {
        android.graphics.pdf.PdfRenderer r0;
        android.graphics.Point $r1;

        r0 := @parameter0: android.graphics.pdf.PdfRenderer;

        $r1 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.Point mTempPoint>;

        return $r1;
    }

    static long access$200(android.graphics.pdf.PdfRenderer)
    {
        android.graphics.pdf.PdfRenderer r0;
        long $l0;

        r0 := @parameter0: android.graphics.pdf.PdfRenderer;

        $l0 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        return $l0;
    }

    static long access$300(long, int, android.graphics.Point)
    {
        long l0, $l2;
        int i1;
        android.graphics.Point r0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Point;

        $l2 = staticinvoke <android.graphics.pdf.PdfRenderer: long nativeOpenPageAndGetSize(long,int,android.graphics.Point)>(l0, i1, r0);

        return $l2;
    }

    static void access$400(long, long, long, int, int, int, int, long, int)
    {
        long l0, l1, l2, l7;
        int i3, i4, i5, i6, i8;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        l7 := @parameter7: long;

        i8 := @parameter8: int;

        staticinvoke <android.graphics.pdf.PdfRenderer: void nativeRenderPage(long,long,long,int,int,int,int,long,int)>(l0, l1, l2, i3, i4, i5, i6, l7, i8);

        return;
    }

    static void access$500(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.graphics.pdf.PdfRenderer: void nativeClosePage(long)>(l0);

        return;
    }

    static android.graphics.pdf.PdfRenderer$Page access$602(android.graphics.pdf.PdfRenderer, android.graphics.pdf.PdfRenderer$Page)
    {
        android.graphics.pdf.PdfRenderer r0;
        android.graphics.pdf.PdfRenderer$Page r1;

        r0 := @parameter0: android.graphics.pdf.PdfRenderer;

        r1 := @parameter1: android.graphics.pdf.PdfRenderer$Page;

        r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage> = r1;

        return r1;
    }

    private void doClose()
    {
        android.graphics.pdf.PdfRenderer r0;
        java.lang.Object r1;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r2;
        java.lang.Throwable $r3;
        android.graphics.pdf.PdfRenderer$Page r4;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        r4 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage>;

        if r4 == null goto label1;

        virtualinvoke r4.<android.graphics.pdf.PdfRenderer$Page: void close()>();

        r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage> = null;

     label1:
        $l0 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label7;

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label2:
        $l2 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfRenderer: void nativeClose(long)>($l2);

        exitmonitor r1;

     label3:
        r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument> = 0L;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

     label7:
        r6 = r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput>;

        if r6 == null goto label8;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r6);

        r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput> = null;

     label8:
        $r2 = r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static native void nativeClose(long);

    private static native void nativeClosePage(long);

    private static native long nativeCreate(int, long);

    private static native int nativeGetPageCount(long);

    private static native long nativeOpenPageAndGetSize(long, int, android.graphics.Point);

    private static native void nativeRenderPage(long, long, long, int, int, int, int, long, int);

    private static native boolean nativeScaleForPrinting(long);

    private void throwIfClosed()
    {
        android.graphics.pdf.PdfRenderer r0;
        android.os.ParcelFileDescriptor $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        $r1 = r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already closed");

        throw $r2;
    }

    private void throwIfPageNotInDocument(int)
    {
        android.graphics.pdf.PdfRenderer r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.graphics.pdf.PdfRenderer: int mPageCount>;

        if i0 >= $i1 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid page index");

        throw $r1;
    }

    private void throwIfPageOpened()
    {
        android.graphics.pdf.PdfRenderer r0;
        android.graphics.pdf.PdfRenderer$Page $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        $r1 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Current page not closed");

        throw $r2;
    }

    public void close()
    {
        android.graphics.pdf.PdfRenderer r0;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfPageOpened()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void doClose()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.pdf.PdfRenderer r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.graphics.pdf.PdfRenderer;

     label1:
        $r2 = r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void doClose()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int getPageCount()
    {
        android.graphics.pdf.PdfRenderer r0;
        int $i0;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        $i0 = r0.<android.graphics.pdf.PdfRenderer: int mPageCount>;

        return $i0;
    }

    public android.graphics.pdf.PdfRenderer$Page openPage(int)
    {
        android.graphics.pdf.PdfRenderer r0;
        int i0;
        android.graphics.pdf.PdfRenderer$Page $r2;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfPageOpened()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfPageNotInDocument(int)>(i0);

        $r2 = new android.graphics.pdf.PdfRenderer$Page;

        specialinvoke $r2.<android.graphics.pdf.PdfRenderer$Page: void <init>(android.graphics.pdf.PdfRenderer,int,android.graphics.pdf.PdfRenderer$1)>(r0, i0, null);

        r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage> = $r2;

        return $r2;
    }

    public boolean shouldScaleForPrinting()
    {
        android.graphics.pdf.PdfRenderer r0;
        java.lang.Object r1;
        boolean z0;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        r1 = <android.graphics.pdf.PdfRenderer: java.lang.Object sPdfiumLock>;

        entermonitor r1;

     label1:
        $l0 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        z0 = staticinvoke <android.graphics.pdf.PdfRenderer: boolean nativeScaleForPrinting(long)>($l0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
