public class android.graphics.text.LineBreaker extends java.lang.Object
{
    public static final int BREAK_STRATEGY_BALANCED;
    public static final int BREAK_STRATEGY_HIGH_QUALITY;
    public static final int BREAK_STRATEGY_SIMPLE;
    public static final int HYPHENATION_FREQUENCY_FULL;
    public static final int HYPHENATION_FREQUENCY_NONE;
    public static final int HYPHENATION_FREQUENCY_NORMAL;
    public static final int JUSTIFICATION_MODE_INTER_WORD;
    public static final int JUSTIFICATION_MODE_NONE;
    private static final libcore.util.NativeAllocationRegistry sRegistry;
    private final long mNativePtr;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        long $l0;
        libcore.util.NativeAllocationRegistry $r2;

        <android.graphics.text.LineBreaker: int JUSTIFICATION_MODE_NONE> = 0;

        <android.graphics.text.LineBreaker: int JUSTIFICATION_MODE_INTER_WORD> = 1;

        <android.graphics.text.LineBreaker: int HYPHENATION_FREQUENCY_NORMAL> = 1;

        <android.graphics.text.LineBreaker: int HYPHENATION_FREQUENCY_NONE> = 0;

        <android.graphics.text.LineBreaker: int HYPHENATION_FREQUENCY_FULL> = 2;

        <android.graphics.text.LineBreaker: int BREAK_STRATEGY_SIMPLE> = 0;

        <android.graphics.text.LineBreaker: int BREAK_STRATEGY_HIGH_QUALITY> = 1;

        <android.graphics.text.LineBreaker: int BREAK_STRATEGY_BALANCED> = 2;

        $r0 = class "Landroid/graphics/text/LineBreaker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l0 = staticinvoke <android.graphics.text.LineBreaker: long nGetReleaseFunc()>();

        $r2 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long)>($r1, $l0);

        <android.graphics.text.LineBreaker: libcore.util.NativeAllocationRegistry sRegistry> = $r2;

        return;
    }

    private void <init>(int, int, int, int[])
    {
        android.graphics.text.LineBreaker r0;
        int i0, i1, i2;
        int[] r1;
        long l3;
        libcore.util.NativeAllocationRegistry $r2;
        boolean z0;

        r0 := @this: android.graphics.text.LineBreaker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        z0 = 1;

        if i2 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        l3 = staticinvoke <android.graphics.text.LineBreaker: long nInit(int,int,boolean,int[])>(i0, i1, z0, r1);

        r0.<android.graphics.text.LineBreaker: long mNativePtr> = l3;

        $r2 = <android.graphics.text.LineBreaker: libcore.util.NativeAllocationRegistry sRegistry>;

        virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, l3);

        return;
    }

    void <init>(int, int, int, int[], android.graphics.text.LineBreaker$1)
    {
        android.graphics.text.LineBreaker r0;
        int i0, i1, i2;
        int[] r1;
        android.graphics.text.LineBreaker$1 r2;

        r0 := @this: android.graphics.text.LineBreaker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: int[];

        r2 := @parameter4: android.graphics.text.LineBreaker$1;

        specialinvoke r0.<android.graphics.text.LineBreaker: void <init>(int,int,int,int[])>(i0, i1, i2, r1);

        return;
    }

    static long access$100()
    {
        long $l0;

        $l0 = staticinvoke <android.graphics.text.LineBreaker: long nGetReleaseResultFunc()>();

        return $l0;
    }

    static int access$200(long)
    {
        long l0;
        int $i1;

        l0 := @parameter0: long;

        $i1 = staticinvoke <android.graphics.text.LineBreaker: int nGetLineCount(long)>(l0);

        return $i1;
    }

    static int access$300(long, int)
    {
        long l0;
        int i1, $i2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.graphics.text.LineBreaker: int nGetLineBreakOffset(long,int)>(l0, i1);

        return $i2;
    }

    static float access$400(long, int)
    {
        long l0;
        int i1;
        float $f0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $f0 = staticinvoke <android.graphics.text.LineBreaker: float nGetLineWidth(long,int)>(l0, i1);

        return $f0;
    }

    static float access$500(long, int)
    {
        long l0;
        int i1;
        float $f0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $f0 = staticinvoke <android.graphics.text.LineBreaker: float nGetLineAscent(long,int)>(l0, i1);

        return $f0;
    }

    static float access$600(long, int)
    {
        long l0;
        int i1;
        float $f0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $f0 = staticinvoke <android.graphics.text.LineBreaker: float nGetLineDescent(long,int)>(l0, i1);

        return $f0;
    }

    static int access$700(long, int)
    {
        long l0;
        int i1, $i2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.graphics.text.LineBreaker: int nGetLineFlag(long,int)>(l0, i1);

        return $i2;
    }

    private static native long nComputeLineBreaks(long, char[], long, int, float, int, float, float[], float, int);

    private static native float nGetLineAscent(long, int);

    private static native int nGetLineBreakOffset(long, int);

    private static native int nGetLineCount(long);

    private static native float nGetLineDescent(long, int);

    private static native int nGetLineFlag(long, int);

    private static native float nGetLineWidth(long, int);

    private static native long nGetReleaseFunc();

    private static native long nGetReleaseResultFunc();

    private static native long nInit(int, int, boolean, int[]);

    public android.graphics.text.LineBreaker$Result computeLineBreaks(android.graphics.text.MeasuredText, android.graphics.text.LineBreaker$ParagraphConstraints, int)
    {
        android.graphics.text.LineBreaker r0;
        android.graphics.text.MeasuredText r1;
        android.graphics.text.LineBreaker$ParagraphConstraints r2;
        int i0, $i3, $i4;
        android.graphics.text.LineBreaker$Result $r3;
        long $l1, $l2, $l5;
        char[] $r4, $r5;
        float $f0, $f1, $f2;
        float[] $r6;

        r0 := @this: android.graphics.text.LineBreaker;

        r1 := @parameter0: android.graphics.text.MeasuredText;

        r2 := @parameter1: android.graphics.text.LineBreaker$ParagraphConstraints;

        i0 := @parameter2: int;

        $r3 = new android.graphics.text.LineBreaker$Result;

        $l1 = r0.<android.graphics.text.LineBreaker: long mNativePtr>;

        $r4 = virtualinvoke r1.<android.graphics.text.MeasuredText: char[] getChars()>();

        $l2 = virtualinvoke r1.<android.graphics.text.MeasuredText: long getNativePtr()>();

        $r5 = virtualinvoke r1.<android.graphics.text.MeasuredText: char[] getChars()>();

        $i3 = lengthof $r5;

        $f0 = staticinvoke <android.graphics.text.LineBreaker$ParagraphConstraints: float access$800(android.graphics.text.LineBreaker$ParagraphConstraints)>(r2);

        $i4 = staticinvoke <android.graphics.text.LineBreaker$ParagraphConstraints: int access$900(android.graphics.text.LineBreaker$ParagraphConstraints)>(r2);

        $f1 = staticinvoke <android.graphics.text.LineBreaker$ParagraphConstraints: float access$1000(android.graphics.text.LineBreaker$ParagraphConstraints)>(r2);

        $r6 = staticinvoke <android.graphics.text.LineBreaker$ParagraphConstraints: float[] access$1100(android.graphics.text.LineBreaker$ParagraphConstraints)>(r2);

        $f2 = staticinvoke <android.graphics.text.LineBreaker$ParagraphConstraints: float access$1200(android.graphics.text.LineBreaker$ParagraphConstraints)>(r2);

        $l5 = staticinvoke <android.graphics.text.LineBreaker: long nComputeLineBreaks(long,char[],long,int,float,int,float,float[],float,int)>($l1, $r4, $l2, $i3, $f0, $i4, $f1, $r6, $f2, i0);

        specialinvoke $r3.<android.graphics.text.LineBreaker$Result: void <init>(long,android.graphics.text.LineBreaker$1)>($l5, null);

        return $r3;
    }
}
