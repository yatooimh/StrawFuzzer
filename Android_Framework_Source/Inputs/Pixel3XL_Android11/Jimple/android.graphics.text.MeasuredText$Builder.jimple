public final class android.graphics.text.MeasuredText$Builder extends java.lang.Object
{
    private static final libcore.util.NativeAllocationRegistry sRegistry;
    private boolean mComputeHyphenation;
    private boolean mComputeLayout;
    private int mCurrentOffset;
    private android.graphics.text.MeasuredText mHintMt;
    private long mNativePtr;
    private final char[] mText;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        long $l0;
        libcore.util.NativeAllocationRegistry $r2;

        $r0 = class "Landroid/graphics/text/MeasuredText;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l0 = staticinvoke <android.graphics.text.MeasuredText: long access$000()>();

        $r2 = staticinvoke <libcore.util.NativeAllocationRegistry: libcore.util.NativeAllocationRegistry createMalloced(java.lang.ClassLoader,long)>($r1, $l0);

        <android.graphics.text.MeasuredText$Builder: libcore.util.NativeAllocationRegistry sRegistry> = $r2;

        return;
    }

    public void <init>(android.graphics.text.MeasuredText)
    {
        android.graphics.text.MeasuredText$Builder r0;
        android.graphics.text.MeasuredText r1;
        char[] $r3;
        long $l0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        r1 := @parameter0: android.graphics.text.MeasuredText;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeHyphenation> = 0;

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeLayout> = 1;

        r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset> = 0;

        r0.<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText mHintMt> = null;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = staticinvoke <android.graphics.text.MeasuredText: char[] access$100(android.graphics.text.MeasuredText)>(r1);

        r0.<android.graphics.text.MeasuredText$Builder: char[] mText> = $r3;

        $l0 = staticinvoke <android.graphics.text.MeasuredText$Builder: long nInitBuilder()>();

        r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr> = $l0;

        $z0 = staticinvoke <android.graphics.text.MeasuredText: boolean access$200(android.graphics.text.MeasuredText)>(r1);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.graphics.text.MeasuredText: boolean access$300(android.graphics.text.MeasuredText)>(r1);

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeHyphenation> = $z1;

        $z2 = staticinvoke <android.graphics.text.MeasuredText: boolean access$200(android.graphics.text.MeasuredText)>(r1);

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeLayout> = $z2;

        r0.<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText mHintMt> = r1;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The input MeasuredText must not be created with setComputeLayout(false).");

        throw $r4;
    }

    public void <init>(char[])
    {
        android.graphics.text.MeasuredText$Builder r0;
        char[] r1;
        long $l0;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        r1 := @parameter0: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeHyphenation> = 0;

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeLayout> = 1;

        r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset> = 0;

        r0.<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText mHintMt> = null;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<android.graphics.text.MeasuredText$Builder: char[] mText> = r1;

        $l0 = staticinvoke <android.graphics.text.MeasuredText$Builder: long nInitBuilder()>();

        r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr> = $l0;

        return;
    }

    private void ensureNativePtrNoReuse()
    {
        android.graphics.text.MeasuredText$Builder r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        $l0 = r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Builder can not be reused.");

        throw $r1;
    }

    private static native void nAddReplacementRun(long, long, int, int, float);

    private static native void nAddStyleRun(long, long, int, int, boolean);

    private static native long nBuildMeasuredText(long, long, char[], boolean, boolean);

    private static native void nFreeBuilder(long);

    private static native long nInitBuilder();

    public android.graphics.text.MeasuredText$Builder appendReplacementRun(android.graphics.Paint, int, float)
    {
        android.graphics.text.MeasuredText$Builder r0;
        android.graphics.Paint r1;
        float f0;
        int $i0, $i1, $i4, i5, i6;
        char[] $r2;
        long $l2, $l3;
        boolean z1, z2;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        r1 := @parameter0: android.graphics.Paint;

        i5 := @parameter1: int;

        f0 := @parameter2: float;

        if i5 <= 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "length can not be negative");

        $i0 = r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset>;

        i6 = $i0 + i5;

        $r2 = r0.<android.graphics.text.MeasuredText$Builder: char[] mText>;

        $i1 = lengthof $r2;

        if i6 > $i1 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "Replacement exceeds the text length");

        $l2 = r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr>;

        $l3 = virtualinvoke r1.<android.graphics.Paint: long getNativeInstance()>();

        $i4 = r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset>;

        staticinvoke <android.graphics.text.MeasuredText$Builder: void nAddReplacementRun(long,long,int,int,float)>($l2, $l3, $i4, i6, f0);

        r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset> = i6;

        return r0;
    }

    public android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint, int, boolean)
    {
        android.graphics.text.MeasuredText$Builder r0;
        android.graphics.Paint r1;
        boolean z0, z2, z3;
        int $i0, $i1, $i4, i5, i6;
        char[] $r3;
        long $l2, $l3;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        r1 := @parameter0: android.graphics.Paint;

        i5 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if i5 <= 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "length can not be negative");

        $i0 = r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset>;

        i6 = $i0 + i5;

        $r3 = r0.<android.graphics.text.MeasuredText$Builder: char[] mText>;

        $i1 = lengthof $r3;

        if i6 > $i1 goto label3;

        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "Style exceeds the text length");

        $l2 = r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr>;

        $l3 = virtualinvoke r1.<android.graphics.Paint: long getNativeInstance()>();

        $i4 = r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset>;

        staticinvoke <android.graphics.text.MeasuredText$Builder: void nAddStyleRun(long,long,int,int,boolean)>($l2, $l3, $i4, i6, z0);

        r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset> = i6;

        return r0;
    }

    public android.graphics.text.MeasuredText build()
    {
        android.graphics.text.MeasuredText$Builder r0;
        char[] $r1, $r5, $r6;
        int $i0, $i1;
        java.lang.IllegalStateException $r2;
        android.graphics.text.MeasuredText $r3, $r4, r11, r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        long $l2, $l3, $l4, l5, l6;
        libcore.util.NativeAllocationRegistry $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        specialinvoke r0.<android.graphics.text.MeasuredText$Builder: void ensureNativePtrNoReuse()>();

        $i1 = r0.<android.graphics.text.MeasuredText$Builder: int mCurrentOffset>;

        $r1 = r0.<android.graphics.text.MeasuredText$Builder: char[] mText>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label8;

        r11 = r0.<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText mHintMt>;

        if r11 == null goto label2;

        $z4 = staticinvoke <android.graphics.text.MeasuredText: boolean access$300(android.graphics.text.MeasuredText)>(r11);

        $z5 = r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeHyphenation>;

        if $z4 != $z5 goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The hyphenation configuration is different from given hint MeasuredText");

        throw $r9;

     label2:
        $r3 = r0.<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText mHintMt>;

        if $r3 != null goto label4;

     label3:
        l5 = 0L;

        goto label5;

     label4:
        $r4 = r0.<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText mHintMt>;

        l5 = virtualinvoke $r4.<android.graphics.text.MeasuredText: long getNativePtr()>();

     label5:
        $l2 = r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr>;

        $r5 = r0.<android.graphics.text.MeasuredText$Builder: char[] mText>;

        $z1 = r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeHyphenation>;

        $z0 = r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeLayout>;

        l6 = staticinvoke <android.graphics.text.MeasuredText$Builder: long nBuildMeasuredText(long,long,char[],boolean,boolean)>($l2, l5, $r5, $z1, $z0);

        r12 = new android.graphics.text.MeasuredText;

        $r6 = r0.<android.graphics.text.MeasuredText$Builder: char[] mText>;

        $z3 = r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeHyphenation>;

        $z2 = r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeLayout>;

        specialinvoke r12.<android.graphics.text.MeasuredText: void <init>(long,char[],boolean,boolean,android.graphics.text.MeasuredText$1)>(l6, $r6, $z3, $z2, null);

        $r7 = <android.graphics.text.MeasuredText$Builder: libcore.util.NativeAllocationRegistry sRegistry>;

        virtualinvoke $r7.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r12, l6);

     label6:
        $l3 = r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr>;

        staticinvoke <android.graphics.text.MeasuredText$Builder: void nFreeBuilder(long)>($l3);

        r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr> = 0L;

        return r12;

     label7:
        $r10 := @caughtexception;

        $l4 = r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr>;

        staticinvoke <android.graphics.text.MeasuredText$Builder: void nFreeBuilder(long)>($l4);

        r0.<android.graphics.text.MeasuredText$Builder: long mNativePtr> = 0L;

        throw $r10;

     label8:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Style info has not been provided for all text.");

        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public android.graphics.text.MeasuredText$Builder setComputeHyphenation(boolean)
    {
        android.graphics.text.MeasuredText$Builder r0;
        boolean z0;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        z0 := @parameter0: boolean;

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeHyphenation> = z0;

        return r0;
    }

    public android.graphics.text.MeasuredText$Builder setComputeLayout(boolean)
    {
        android.graphics.text.MeasuredText$Builder r0;
        boolean z0;

        r0 := @this: android.graphics.text.MeasuredText$Builder;

        z0 := @parameter0: boolean;

        r0.<android.graphics.text.MeasuredText$Builder: boolean mComputeLayout> = z0;

        return r0;
    }
}
