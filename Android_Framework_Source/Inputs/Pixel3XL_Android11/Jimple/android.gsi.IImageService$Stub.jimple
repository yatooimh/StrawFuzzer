public abstract class android.gsi.IImageService$Stub extends android.os.Binder implements android.gsi.IImageService
{
    private static final java.lang.String DESCRIPTOR;
    static final int TRANSACTION_backingImageExists;
    static final int TRANSACTION_createBackingImage;
    static final int TRANSACTION_deleteBackingImage;
    static final int TRANSACTION_getAllBackingImages;
    static final int TRANSACTION_getAvbPublicKey;
    static final int TRANSACTION_getMappedImageDevice;
    static final int TRANSACTION_isImageMapped;
    static final int TRANSACTION_mapImageDevice;
    static final int TRANSACTION_removeAllImages;
    static final int TRANSACTION_removeDisabledImages;
    static final int TRANSACTION_unmapImageDevice;
    static final int TRANSACTION_zeroFillNewImage;

    public void <init>()
    {
        android.gsi.IImageService$Stub r0;

        r0 := @this: android.gsi.IImageService$Stub;

        specialinvoke r0.<android.os.Binder: void <init>()>();

        virtualinvoke r0.<android.gsi.IImageService$Stub: void attachInterface(android.os.IInterface,java.lang.String)>(r0, "android.gsi.IImageService");

        return;
    }

    public static android.gsi.IImageService asInterface(android.os.IBinder)
    {
        android.os.IBinder r0;
        android.os.IInterface r1;
        android.gsi.IImageService$Stub$Proxy $r2;
        boolean $z0;
        android.gsi.IImageService $r3;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = interfaceinvoke r0.<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>("android.gsi.IImageService");

        if r1 == null goto label2;

        $z0 = r1 instanceof android.gsi.IImageService;

        if $z0 == 0 goto label2;

        $r3 = (android.gsi.IImageService) r1;

        return $r3;

     label2:
        $r2 = new android.gsi.IImageService$Stub$Proxy;

        specialinvoke $r2.<android.gsi.IImageService$Stub$Proxy: void <init>(android.os.IBinder)>(r0);

        return $r2;
    }

    public static android.gsi.IImageService getDefaultImpl()
    {
        android.gsi.IImageService $r0;

        $r0 = <android.gsi.IImageService$Stub$Proxy: android.gsi.IImageService sDefaultImpl>;

        return $r0;
    }

    public static boolean setDefaultImpl(android.gsi.IImageService)
    {
        android.gsi.IImageService r0, $r1;
        java.lang.IllegalStateException $r2;

        r0 := @parameter0: android.gsi.IImageService;

        $r1 = <android.gsi.IImageService$Stub$Proxy: android.gsi.IImageService sDefaultImpl>;

        if $r1 != null goto label2;

        if r0 == null goto label1;

        <android.gsi.IImageService$Stub$Proxy: android.gsi.IImageService sDefaultImpl> = r0;

        return 1;

     label1:
        return 0;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setDefaultImpl() called twice");

        throw $r2;
    }

    public android.os.IBinder asBinder()
    {
        android.gsi.IImageService$Stub r0;

        r0 := @this: android.gsi.IImageService$Stub;

        return r0;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.gsi.IImageService$Stub r0;
        android.os.Parcel r1, r13;
        int i0, $i3, i4, i5, i6, i7, i8;
        java.lang.String $r2, $r3, $r5, $r6, $r7, $r9, $r10, r14, r16, r18;
        long $l1, $l2;
        android.gsi.AvbPublicKey $r4;
        android.gsi.MappedImage $r8;
        android.os.IBinder $r11;
        android.gsi.IProgressCallback $r12;
        boolean $z0, z1, z2;
        java.util.List r15;

        r0 := @this: android.gsi.IImageService$Stub;

        i4 := @parameter0: int;

        r13 := @parameter1: android.os.Parcel;

        r1 := @parameter2: android.os.Parcel;

        i0 := @parameter3: int;

        if i4 == 1598968902 goto label14;

        tableswitch(i4)
        {
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label11;
            case 4: goto label10;
            case 5: goto label09;
            case 6: goto label08;
            case 7: goto label07;
            case 8: goto label06;
            case 9: goto label05;
            case 10: goto label04;
            case 11: goto label03;
            case 12: goto label02;
            default: goto label01;
        };

     label01:
        $z0 = specialinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i4, r13, r1, i0);

        return $z0;

     label02:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        $r2 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        r14 = virtualinvoke r0.<android.gsi.IImageService$Stub: java.lang.String getMappedImageDevice(java.lang.String)>($r2);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r14);

        return 1;

     label03:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        virtualinvoke r0.<android.gsi.IImageService$Stub: void removeDisabledImages()>();

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label04:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        virtualinvoke r0.<android.gsi.IImageService$Stub: void removeAllImages()>();

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label05:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        $r3 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        $l1 = virtualinvoke r13.<android.os.Parcel: long readLong()>();

        virtualinvoke r0.<android.gsi.IImageService$Stub: void zeroFillNewImage(java.lang.String,long)>($r3, $l1);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label06:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        r15 = virtualinvoke r0.<android.gsi.IImageService$Stub: java.util.List getAllBackingImages()>();

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>(r15);

        return 1;

     label07:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        r16 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        $r4 = new android.gsi.AvbPublicKey;

        specialinvoke $r4.<android.gsi.AvbPublicKey: void <init>()>();

        i5 = virtualinvoke r0.<android.gsi.IImageService$Stub: int getAvbPublicKey(java.lang.String,android.gsi.AvbPublicKey)>(r16, $r4);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i5);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke $r4.<android.gsi.AvbPublicKey: void writeToParcel(android.os.Parcel,int)>(r1, 1);

        return 1;

     label08:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        $r5 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        z1 = virtualinvoke r0.<android.gsi.IImageService$Stub: boolean isImageMapped(java.lang.String)>($r5);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        i7 = (int) z1;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i7);

        return 1;

     label09:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        $r6 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        z2 = virtualinvoke r0.<android.gsi.IImageService$Stub: boolean backingImageExists(java.lang.String)>($r6);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        i8 = (int) z2;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i8);

        return 1;

     label10:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        $r7 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        virtualinvoke r0.<android.gsi.IImageService$Stub: void unmapImageDevice(java.lang.String)>($r7);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label11:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        r18 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        i6 = virtualinvoke r13.<android.os.Parcel: int readInt()>();

        $r8 = new android.gsi.MappedImage;

        specialinvoke $r8.<android.gsi.MappedImage: void <init>()>();

        virtualinvoke r0.<android.gsi.IImageService$Stub: void mapImageDevice(java.lang.String,int,android.gsi.MappedImage)>(r18, i6, $r8);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke $r8.<android.gsi.MappedImage: void writeToParcel(android.os.Parcel,int)>(r1, 1);

        return 1;

     label12:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        $r9 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        virtualinvoke r0.<android.gsi.IImageService$Stub: void deleteBackingImage(java.lang.String)>($r9);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label13:
        virtualinvoke r13.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.gsi.IImageService");

        $r10 = virtualinvoke r13.<android.os.Parcel: java.lang.String readString()>();

        $l2 = virtualinvoke r13.<android.os.Parcel: long readLong()>();

        $i3 = virtualinvoke r13.<android.os.Parcel: int readInt()>();

        $r11 = virtualinvoke r13.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r12 = staticinvoke <android.gsi.IProgressCallback$Stub: android.gsi.IProgressCallback asInterface(android.os.IBinder)>($r11);

        virtualinvoke r0.<android.gsi.IImageService$Stub: void createBackingImage(java.lang.String,long,int,android.gsi.IProgressCallback)>($r10, $l2, $i3, $r12);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label14:
        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>("android.gsi.IImageService");

        return 1;
    }

    public static void <clinit>()
    {
        <android.gsi.IImageService$Stub: int TRANSACTION_zeroFillNewImage> = 9;

        <android.gsi.IImageService$Stub: int TRANSACTION_unmapImageDevice> = 4;

        <android.gsi.IImageService$Stub: int TRANSACTION_removeDisabledImages> = 11;

        <android.gsi.IImageService$Stub: int TRANSACTION_removeAllImages> = 10;

        <android.gsi.IImageService$Stub: int TRANSACTION_mapImageDevice> = 3;

        <android.gsi.IImageService$Stub: int TRANSACTION_isImageMapped> = 6;

        <android.gsi.IImageService$Stub: int TRANSACTION_getMappedImageDevice> = 12;

        <android.gsi.IImageService$Stub: int TRANSACTION_getAvbPublicKey> = 7;

        <android.gsi.IImageService$Stub: int TRANSACTION_getAllBackingImages> = 8;

        <android.gsi.IImageService$Stub: int TRANSACTION_deleteBackingImage> = 2;

        <android.gsi.IImageService$Stub: int TRANSACTION_createBackingImage> = 1;

        <android.gsi.IImageService$Stub: int TRANSACTION_backingImageExists> = 5;

        <android.gsi.IImageService$Stub: java.lang.String DESCRIPTOR> = "android.gsi.IImageService";

        return;
    }
}
