public class android.hardware.Camera extends java.lang.Object
{
    public static final java.lang.String ACTION_NEW_PICTURE;
    public static final java.lang.String ACTION_NEW_VIDEO;
    public static final int CAMERA_ERROR_DISABLED;
    public static final int CAMERA_ERROR_EVICTED;
    public static final int CAMERA_ERROR_SERVER_DIED;
    public static final int CAMERA_ERROR_UNKNOWN;
    private static final int CAMERA_FACE_DETECTION_HW;
    private static final int CAMERA_FACE_DETECTION_SW;
    public static final int CAMERA_HAL_API_VERSION_1_0;
    private static final int CAMERA_HAL_API_VERSION_NORMAL_CONNECT;
    private static final int CAMERA_HAL_API_VERSION_UNSPECIFIED;
    private static final int CAMERA_MSG_COMPRESSED_IMAGE;
    private static final int CAMERA_MSG_ERROR;
    private static final int CAMERA_MSG_FOCUS;
    private static final int CAMERA_MSG_FOCUS_MOVE;
    private static final int CAMERA_MSG_POSTVIEW_FRAME;
    private static final int CAMERA_MSG_PREVIEW_FRAME;
    private static final int CAMERA_MSG_PREVIEW_METADATA;
    private static final int CAMERA_MSG_RAW_IMAGE;
    private static final int CAMERA_MSG_RAW_IMAGE_NOTIFY;
    private static final int CAMERA_MSG_SHUTTER;
    private static final int CAMERA_MSG_VIDEO_FRAME;
    private static final int CAMERA_MSG_ZOOM;
    private static final int NO_ERROR;
    private static final java.lang.String TAG;
    private com.android.internal.app.IAppOpsService mAppOps;
    private com.android.internal.app.IAppOpsCallback mAppOpsCallback;
    private android.hardware.Camera$AutoFocusCallback mAutoFocusCallback;
    private final java.lang.Object mAutoFocusCallbackLock;
    private android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback;
    private android.hardware.Camera$ErrorCallback mDetailedErrorCallback;
    private android.hardware.Camera$ErrorCallback mErrorCallback;
    private android.hardware.Camera$EventHandler mEventHandler;
    private boolean mFaceDetectionRunning;
    private android.hardware.Camera$FaceDetectionListener mFaceListener;
    private boolean mHasAppOpsPlayAudio;
    private android.hardware.Camera$PictureCallback mJpegCallback;
    private long mNativeContext;
    private boolean mOneShot;
    private android.hardware.Camera$PictureCallback mPostviewCallback;
    private android.hardware.Camera$PreviewCallback mPreviewCallback;
    private android.hardware.Camera$PictureCallback mRawImageCallback;
    private android.hardware.Camera$ShutterCallback mShutterCallback;
    private boolean mShutterSoundEnabledFromApp;
    private final java.lang.Object mShutterSoundLock;
    private boolean mUsingPreviewAllocation;
    private boolean mWithBuffer;
    private android.hardware.Camera$OnZoomChangeListener mZoomListener;

    void <init>()
    {
        android.hardware.Camera r0;
        java.lang.Object $r1, $r2;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mShutterSoundLock> = $r2;

        r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio> = 1;

        r0.<android.hardware.Camera: boolean mShutterSoundEnabledFromApp> = 1;

        return;
    }

    void <init>(int)
    {
        android.hardware.Camera r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.RuntimeException $r3, $r4, $r5;

        r0 := @this: android.hardware.Camera;

        i4 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mShutterSoundLock> = $r2;

        r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio> = 1;

        r0.<android.hardware.Camera: boolean mShutterSoundEnabledFromApp> = 1;

        i5 = specialinvoke r0.<android.hardware.Camera: int cameraInitNormal(int)>(i4);

        $z0 = staticinvoke <android.hardware.Camera: boolean checkInitErrors(int)>(i5);

        if $z0 == 0 goto label3;

        $i0 = <android.system.OsConstants: int EACCES>;

        $i1 = neg $i0;

        if i5 == $i1 goto label2;

        $i2 = <android.system.OsConstants: int ENODEV>;

        $i3 = neg $i2;

        if i5 != $i3 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Camera initialization failed");

        throw $r5;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown camera error");

        throw $r4;

     label2:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Fail to connect to camera service");

        throw $r3;

     label3:
        specialinvoke r0.<android.hardware.Camera: void initAppOps()>();

        return;
    }

    private void <init>(int, int)
    {
        android.hardware.Camera r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.RuntimeException $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: android.hardware.Camera;

        i15 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.Camera: java.lang.Object mShutterSoundLock> = $r2;

        r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio> = 1;

        r0.<android.hardware.Camera: boolean mShutterSoundEnabledFromApp> = 1;

        i16 = specialinvoke r0.<android.hardware.Camera: int cameraInitVersion(int,int)>(i15, i0);

        $z0 = staticinvoke <android.hardware.Camera: boolean checkInitErrors(int)>(i16);

        if $z0 == 0 goto label8;

        $i1 = <android.system.OsConstants: int EACCES>;

        $i2 = neg $i1;

        if i16 == $i2 goto label7;

        $i3 = <android.system.OsConstants: int ENODEV>;

        $i4 = neg $i3;

        if i16 == $i4 goto label6;

        $i5 = <android.system.OsConstants: int ENOSYS>;

        $i6 = neg $i5;

        if i16 == $i6 goto label5;

        $i7 = <android.system.OsConstants: int EOPNOTSUPP>;

        $i8 = neg $i7;

        if i16 == $i8 goto label4;

        $i9 = <android.system.OsConstants: int EINVAL>;

        $i10 = neg $i9;

        if i16 == $i10 goto label3;

        $i11 = <android.system.OsConstants: int EBUSY>;

        $i12 = neg $i11;

        if i16 == $i12 goto label2;

        $i13 = <android.system.OsConstants: int EUSERS>;

        $i14 = neg $i13;

        if i16 != $i14 goto label1;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Camera initialization failed because the max number of camera devices were already opened");

        throw $r10;

     label1:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown camera error");

        throw $r9;

     label2:
        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Camera initialization failed because the camera device was already opened");

        throw $r8;

     label3:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Camera initialization failed because the input arugments are invalid");

        throw $r7;

     label4:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Camera initialization failed because the hal version is not supported by this device");

        throw $r6;

     label5:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Camera initialization failed because some methods are not implemented");

        throw $r5;

     label6:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Camera initialization failed");

        throw $r4;

     label7:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Fail to connect to camera service");

        throw $r3;

     label8:
        return;
    }

    private final native void _addCallbackBuffer(byte[], int);

    private final native boolean _enableShutterSound(boolean);

    private static native void _getCameraInfo(int, android.hardware.Camera$CameraInfo);

    private final native void _startFaceDetection(int);

    private final native void _stopFaceDetection();

    private final native void _stopPreview();

    static android.hardware.Camera$ShutterCallback access$000(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ShutterCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback>;

        return $r1;
    }

    static android.hardware.Camera$PictureCallback access$100(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PictureCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback>;

        return $r1;
    }

    static android.hardware.Camera$OnZoomChangeListener access$1000(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$OnZoomChangeListener $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$OnZoomChangeListener mZoomListener>;

        return $r1;
    }

    static android.hardware.Camera$FaceDetectionListener access$1100(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$FaceDetectionListener $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$FaceDetectionListener mFaceListener>;

        return $r1;
    }

    static android.hardware.Camera$ErrorCallback access$1200(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ErrorCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$ErrorCallback mDetailedErrorCallback>;

        return $r1;
    }

    static android.hardware.Camera$ErrorCallback access$1300(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ErrorCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$ErrorCallback mErrorCallback>;

        return $r1;
    }

    static android.hardware.Camera$AutoFocusMoveCallback access$1400(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$AutoFocusMoveCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback>;

        return $r1;
    }

    static void access$1500(android.hardware.Camera)
    {
        android.hardware.Camera r0;

        r0 := @parameter0: android.hardware.Camera;

        specialinvoke r0.<android.hardware.Camera: void updateAppOpsPlayAudio()>();

        return;
    }

    static android.hardware.Camera$PictureCallback access$200(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PictureCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback>;

        return $r1;
    }

    static android.hardware.Camera$PreviewCallback access$300(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback>;

        return $r1;
    }

    static android.hardware.Camera$PreviewCallback access$302(android.hardware.Camera, android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;

        r0 := @parameter0: android.hardware.Camera;

        r1 := @parameter1: android.hardware.Camera$PreviewCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        return r1;
    }

    static boolean access$400(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.Camera;

        $z0 = r0.<android.hardware.Camera: boolean mOneShot>;

        return $z0;
    }

    static boolean access$500(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.Camera;

        $z0 = r0.<android.hardware.Camera: boolean mWithBuffer>;

        return $z0;
    }

    static void access$600(android.hardware.Camera, boolean, boolean)
    {
        android.hardware.Camera r0;
        boolean z0, z1;

        r0 := @parameter0: android.hardware.Camera;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, z1);

        return;
    }

    static android.hardware.Camera$PictureCallback access$700(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PictureCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback>;

        return $r1;
    }

    static java.lang.Object access$800(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        return $r1;
    }

    static android.hardware.Camera$AutoFocusCallback access$900(android.hardware.Camera)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$AutoFocusCallback $r1;

        r0 := @parameter0: android.hardware.Camera;

        $r1 = r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback>;

        return $r1;
    }

    private final void addCallbackBuffer(byte[], int)
    {
        android.hardware.Camera r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        byte[] r6;

        r0 := @this: android.hardware.Camera;

        r6 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 == 16 goto label2;

        if i0 != 128 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported message type: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        specialinvoke r0.<android.hardware.Camera: void _addCallbackBuffer(byte[],int)>(r6, i0);

        return;
    }

    private int cameraInitNormal(int)
    {
        android.hardware.Camera r0;
        int i0, $i1;

        r0 := @this: android.hardware.Camera;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.hardware.Camera: int cameraInitVersion(int,int)>(i0, -2);

        return $i1;
    }

    private int cameraInitVersion(int, int)
    {
        android.hardware.Camera r0;
        int i0, i1, $i2;
        android.hardware.Camera$EventHandler $r1, $r2;
        android.os.Looper r3, r4;
        java.lang.ref.WeakReference $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.Camera;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback> = null;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

        r0.<android.hardware.Camera: android.hardware.Camera$OnZoomChangeListener mZoomListener> = null;

        r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r3 == null goto label1;

        $r2 = new android.hardware.Camera$EventHandler;

        specialinvoke $r2.<android.hardware.Camera$EventHandler: void <init>(android.hardware.Camera,android.hardware.Camera,android.os.Looper)>(r0, r0, r3);

        r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler> = $r2;

        goto label3;

     label1:
        r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r4 == null goto label2;

        $r1 = new android.hardware.Camera$EventHandler;

        specialinvoke $r1.<android.hardware.Camera$EventHandler: void <init>(android.hardware.Camera,android.hardware.Camera,android.os.Looper)>(r0, r0, r4);

        r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler> = $r1;

        goto label3;

     label2:
        r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler> = null;

     label3:
        $r5 = new java.lang.ref.WeakReference;

        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r6 = staticinvoke <android.app.ActivityThread: java.lang.String currentOpPackageName()>();

        $i2 = specialinvoke r0.<android.hardware.Camera: int native_setup(java.lang.Object,int,int,java.lang.String)>($r5, i0, i1, $r6);

        return $i2;
    }

    public static boolean checkInitErrors(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private native void enableFocusMoveCallback(int);

    public static void getCameraInfo(int, android.hardware.Camera$CameraInfo)
    {
        int i0;
        android.media.IAudioService r0;
        android.os.IBinder $r1;
        boolean $z0;
        android.os.RemoteException $r2;
        android.hardware.Camera$CameraInfo r3;

        i0 := @parameter0: int;

        r3 := @parameter1: android.hardware.Camera$CameraInfo;

        staticinvoke <android.hardware.Camera: void _getCameraInfo(int,android.hardware.Camera$CameraInfo)>(i0, r3);

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r0 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

     label1:
        $z0 = interfaceinvoke r0.<android.media.IAudioService: boolean isCameraSoundForced()>();

        if $z0 == 0 goto label2;

        r3.<android.hardware.Camera$CameraInfo: boolean canDisableShutterSound> = 0;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", "Audio service is unavailable for queries");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static android.hardware.Camera$Parameters getEmptyParameters()
    {
        android.hardware.Camera $r1;
        android.hardware.Camera$Parameters $r3;

        $r1 = new android.hardware.Camera;

        specialinvoke $r1.<android.hardware.Camera: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1);

        $r3 = new android.hardware.Camera$Parameters;

        specialinvoke $r3.<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera,android.hardware.Camera$1)>($r1, null);

        return $r3;
    }

    public static native int getNumberOfCameras();

    public static android.hardware.Camera$Parameters getParametersCopy(android.hardware.Camera$Parameters)
    {
        android.hardware.Camera$Parameters r0, $r3;
        java.lang.NullPointerException $r1;
        android.hardware.Camera r4;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        if r0 == null goto label1;

        r4 = staticinvoke <android.hardware.Camera$Parameters: android.hardware.Camera access$1700(android.hardware.Camera$Parameters)>(r0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r3 = new android.hardware.Camera$Parameters;

        specialinvoke $r3.<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera,android.hardware.Camera$1)>(r4, null);

        virtualinvoke $r3.<android.hardware.Camera$Parameters: void copyFrom(android.hardware.Camera$Parameters)>(r0);

        return $r3;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("parameters must not be null");

        throw $r1;
    }

    private void initAppOps()
    {
        android.hardware.Camera r0;
        android.os.IBinder $r2;
        com.android.internal.app.IAppOpsService $r3, $r5;
        android.hardware.Camera$IAppOpsCallbackWrapper $r4;
        java.lang.String $r6;
        com.android.internal.app.IAppOpsCallback $r7;
        android.os.RemoteException $r8;

        r0 := @this: android.hardware.Camera;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("appops");

        $r3 = staticinvoke <com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService asInterface(android.os.IBinder)>($r2);

        r0.<android.hardware.Camera: com.android.internal.app.IAppOpsService mAppOps> = $r3;

        specialinvoke r0.<android.hardware.Camera: void updateAppOpsPlayAudio()>();

        $r4 = new android.hardware.Camera$IAppOpsCallbackWrapper;

        specialinvoke $r4.<android.hardware.Camera$IAppOpsCallbackWrapper: void <init>(android.hardware.Camera)>(r0);

        r0.<android.hardware.Camera: com.android.internal.app.IAppOpsCallback mAppOpsCallback> = $r4;

     label1:
        $r5 = r0.<android.hardware.Camera: com.android.internal.app.IAppOpsService mAppOps>;

        $r6 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        $r7 = r0.<android.hardware.Camera: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        interfaceinvoke $r5.<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>(28, $r6, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Camera", "Error registering appOps callback", $r8);

        r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio> = 0;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private final native void native_autoFocus();

    private final native void native_cancelAutoFocus();

    private final native java.lang.String native_getParameters();

    private final native void native_release();

    private final native void native_setParameters(java.lang.String);

    private final native int native_setup(java.lang.Object, int, int, java.lang.String);

    private final native void native_takePicture(int);

    public static android.hardware.Camera open()
    {
        int i0, $i1, i2;
        android.hardware.Camera$CameraInfo $r1;
        android.hardware.Camera $r2;

        i0 = staticinvoke <android.hardware.Camera: int getNumberOfCameras()>();

        $r1 = new android.hardware.Camera$CameraInfo;

        specialinvoke $r1.<android.hardware.Camera$CameraInfo: void <init>()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        staticinvoke <android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>(i2, $r1);

        $i1 = $r1.<android.hardware.Camera$CameraInfo: int facing>;

        if $i1 != 0 goto label2;

        $r2 = new android.hardware.Camera;

        specialinvoke $r2.<android.hardware.Camera: void <init>(int)>(i2);

        return $r2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }

    public static android.hardware.Camera open(int)
    {
        int i0;
        android.hardware.Camera $r0;

        i0 := @parameter0: int;

        $r0 = new android.hardware.Camera;

        specialinvoke $r0.<android.hardware.Camera: void <init>(int)>(i0);

        return $r0;
    }

    public static android.hardware.Camera openLegacy(int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.hardware.Camera $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 256 goto label1;

        $r6 = new android.hardware.Camera;

        specialinvoke $r6.<android.hardware.Camera: void <init>(int,int)>(i0, i1);

        return $r6;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid HAL version ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static android.hardware.Camera openUninitialized()
    {
        android.hardware.Camera $r0;

        $r0 = new android.hardware.Camera;

        specialinvoke $r0.<android.hardware.Camera: void <init>()>();

        return $r0;
    }

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int i0, i1, i2;
        android.hardware.Camera$EventHandler r0, $r3;
        java.lang.ref.WeakReference $r1;
        java.lang.Object $r2, r4, r5;
        android.hardware.Camera r6;
        android.os.Message r7;

        r4 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r5 := @parameter4: java.lang.Object;

        $r1 = (java.lang.ref.WeakReference) r4;

        $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (android.hardware.Camera) $r2;

        if r6 != null goto label1;

        return;

     label1:
        r0 = r6.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler>;

        if r0 == null goto label2;

        r7 = virtualinvoke r0.<android.hardware.Camera$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r5);

        $r3 = r6.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler>;

        virtualinvoke $r3.<android.hardware.Camera$EventHandler: boolean sendMessage(android.os.Message)>(r7);

     label2:
        return;
    }

    private void releaseAppOps()
    {
        android.hardware.Camera r0;
        com.android.internal.app.IAppOpsService $r2, $r4;
        com.android.internal.app.IAppOpsCallback $r3;
        java.lang.Exception $r5;

        r0 := @this: android.hardware.Camera;

     label1:
        $r2 = r0.<android.hardware.Camera: com.android.internal.app.IAppOpsService mAppOps>;

        if $r2 == null goto label2;

        $r4 = r0.<android.hardware.Camera: com.android.internal.app.IAppOpsService mAppOps>;

        $r3 = r0.<android.hardware.Camera: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private final native void setHasPreviewCallback(boolean, boolean);

    private final native void setPreviewCallbackSurface(android.view.Surface);

    private void updateAppOpsPlayAudio()
    {
        android.hardware.Camera r0;
        java.lang.Object r1;
        boolean z0, $z1, $z2, $z3, z6, z7;
        com.android.internal.app.IAppOpsService $r2, $r4;
        android.os.IBinder $r3;
        int $i0, i3;
        java.lang.String $r5;
        android.os.RemoteException $r6, $r7;
        java.lang.Throwable $r8;
        android.media.IAudioService r10;

        r0 := @this: android.hardware.Camera;

        r1 = r0.<android.hardware.Camera: java.lang.Object mShutterSoundLock>;

        entermonitor r1;

     label01:
        z0 = r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio>;

     label02:
        i3 = 1;

     label03:
        $r2 = r0.<android.hardware.Camera: com.android.internal.app.IAppOpsService mAppOps>;

        if $r2 == null goto label04;

        $r4 = r0.<android.hardware.Camera: com.android.internal.app.IAppOpsService mAppOps>;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        $r5 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        i3 = interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>(28, 13, $i0, $r5);

     label04:
        if i3 != 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio> = z6;

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", "AppOpsService check audio operation failed");

        r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio> = 0;

     label10:
        $z1 = r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio>;

        if z0 == $z1 goto label21;

        $z2 = r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio>;

        if $z2 != 0 goto label20;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r10 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r3);

     label11:
        z7 = interfaceinvoke r10.<android.media.IAudioService: boolean isCameraSoundForced()>();

     label12:
        if z7 == 0 goto label15;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        goto label18;

     label16:
        $r6 := @caughtexception;

     label17:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", "Audio service is unavailable for queries");

     label18:
        specialinvoke r0.<android.hardware.Camera: boolean _enableShutterSound(boolean)>(0);

     label19:
        goto label21;

     label20:
        $z3 = r0.<android.hardware.Camera: boolean mShutterSoundEnabledFromApp>;

        virtualinvoke r0.<android.hardware.Camera: boolean enableShutterSound(boolean)>($z3);

     label21:
        exitmonitor r1;

     label22:
        return;

     label23:
        $r8 := @caughtexception;

     label24:
        exitmonitor r1;

     label25:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label10 to label11 with label23;
        catch android.os.RemoteException from label11 to label12 with label16;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    public final void addCallbackBuffer(byte[])
    {
        android.hardware.Camera r0;
        byte[] r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.hardware.Camera: void _addCallbackBuffer(byte[],int)>(r1, 16);

        return;
    }

    public final void addRawImageCallbackBuffer(byte[])
    {
        android.hardware.Camera r0;
        byte[] r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.hardware.Camera: void addCallbackBuffer(byte[],int)>(r1, 128);

        return;
    }

    public final void autoFocus(android.hardware.Camera$AutoFocusCallback)
    {
        android.hardware.Camera r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.hardware.Camera$AutoFocusCallback r3;

        r0 := @this: android.hardware.Camera;

        r3 := @parameter0: android.hardware.Camera$AutoFocusCallback;

        r1 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback> = r3;

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.hardware.Camera: void native_autoFocus()>();

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int cameraInitUnspecified(int)
    {
        android.hardware.Camera r0;
        int i0, $i1;

        r0 := @this: android.hardware.Camera;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.hardware.Camera: int cameraInitVersion(int,int)>(i0, -1);

        return $i1;
    }

    public final void cancelAutoFocus()
    {
        android.hardware.Camera r0;
        java.lang.Object r1;
        android.hardware.Camera$EventHandler $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.Camera;

        r1 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback> = null;

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.hardware.Camera: void native_cancelAutoFocus()>();

        $r3 = r0.<android.hardware.Camera: android.hardware.Camera$EventHandler mEventHandler>;

        virtualinvoke $r3.<android.hardware.Camera$EventHandler: void removeMessages(int)>(4);

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final android.renderscript.Allocation createPreviewAllocation(android.renderscript.RenderScript, int) throws android.renderscript.RSIllegalArgumentException
    {
        android.hardware.Camera r0;
        android.renderscript.RenderScript r1;
        int i0, $i1, $i2, $i3;
        android.hardware.Camera$Size r2;
        android.hardware.Camera$Parameters $r4;
        android.renderscript.Type$Builder $r5;
        android.renderscript.Element$DataKind $r6;
        android.renderscript.Element$DataType $r7;
        android.renderscript.Element $r8;
        android.renderscript.Type $r12;
        android.renderscript.Allocation $r13;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.renderscript.RenderScript;

        i0 := @parameter1: int;

        $r4 = virtualinvoke r0.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r2 = virtualinvoke $r4.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $r5 = new android.renderscript.Type$Builder;

        $r7 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_8>;

        $r6 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_YUV>;

        $r8 = staticinvoke <android.renderscript.Element: android.renderscript.Element createPixel(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind)>(r1, $r7, $r6);

        specialinvoke $r5.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r1, $r8);

        virtualinvoke $r5.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setYuvFormat(int)>(842094169);

        $i1 = r2.<android.hardware.Camera$Size: int width>;

        virtualinvoke $r5.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>($i1);

        $i2 = r2.<android.hardware.Camera$Size: int height>;

        virtualinvoke $r5.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>($i2);

        $r12 = virtualinvoke $r5.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        $i3 = i0 | 32;

        $r13 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>(r1, $r12, $i3);

        return $r13;
    }

    public final boolean disableShutterSound()
    {
        android.hardware.Camera r0;
        boolean $z0;

        r0 := @this: android.hardware.Camera;

        $z0 = specialinvoke r0.<android.hardware.Camera: boolean _enableShutterSound(boolean)>(0);

        return $z0;
    }

    public final boolean enableShutterSound(boolean)
    {
        android.hardware.Camera r0;
        boolean z0, $z2, z4, z5, z6;
        android.os.IBinder $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.media.IAudioService r5;
        java.lang.Object r7;

        r0 := @this: android.hardware.Camera;

        z0 := @parameter0: boolean;

        z4 = 1;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r5 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r2);

     label01:
        z5 = interfaceinvoke r5.<android.media.IAudioService: boolean isCameraSoundForced()>();

     label02:
        if z5 == 0 goto label03;

        z4 = 0;

     label03:
        goto label05;

     label04:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Camera", "Audio service is unavailable for queries");

        z4 = 1;

     label05:
        if z0 != 0 goto label06;

        if z4 != 0 goto label06;

        return 0;

     label06:
        r7 = r0.<android.hardware.Camera: java.lang.Object mShutterSoundLock>;

        entermonitor r7;

     label07:
        r0.<android.hardware.Camera: boolean mShutterSoundEnabledFromApp> = z0;

        z6 = specialinvoke r0.<android.hardware.Camera: boolean _enableShutterSound(boolean)>(z0);

     label08:
        if z0 == 0 goto label12;

     label09:
        $z2 = r0.<android.hardware.Camera: boolean mHasAppOpsPlayAudio>;

        if $z2 != 0 goto label12;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Camera", "Shutter sound is not allowed by AppOpsManager");

     label10:
        if z4 == 0 goto label12;

     label11:
        specialinvoke r0.<android.hardware.Camera: boolean _enableShutterSound(boolean)>(0);

     label12:
        exitmonitor r7;

     label13:
        return z6;

     label14:
        $r3 := @caughtexception;

     label15:
        exitmonitor r7;

     label16:
        throw $r3;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected void finalize()
    {
        android.hardware.Camera r0;

        r0 := @this: android.hardware.Camera;

        virtualinvoke r0.<android.hardware.Camera: void release()>();

        return;
    }

    public final native int getAudioRestriction();

    public android.hardware.Camera$Parameters getParameters()
    {
        android.hardware.Camera r0;
        android.hardware.Camera$Parameters $r2;
        java.lang.String $r3;

        r0 := @this: android.hardware.Camera;

        $r2 = new android.hardware.Camera$Parameters;

        specialinvoke $r2.<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera,android.hardware.Camera$1)>(r0, null);

        $r3 = specialinvoke r0.<android.hardware.Camera: java.lang.String native_getParameters()>();

        virtualinvoke $r2.<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>($r3);

        return $r2;
    }

    public final native void lock();

    public final native boolean previewEnabled();

    public final native void reconnect() throws java.io.IOException;

    public final void release()
    {
        android.hardware.Camera r0;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<android.hardware.Camera: void native_release()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        specialinvoke r0.<android.hardware.Camera: void releaseAppOps()>();

        return;
    }

    public final native void setAudioRestriction(int);

    public void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$AutoFocusMoveCallback r1;
        byte b0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$AutoFocusMoveCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback> = r1;

        if r1 == null goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        specialinvoke r0.<android.hardware.Camera: void enableFocusMoveCallback(int)>(b0);

        return;
    }

    public final void setDetailedErrorCallback(android.hardware.Camera$ErrorCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ErrorCallback r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$ErrorCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$ErrorCallback mDetailedErrorCallback> = r1;

        return;
    }

    public final native void setDisplayOrientation(int);

    public final void setErrorCallback(android.hardware.Camera$ErrorCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ErrorCallback r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$ErrorCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$ErrorCallback mErrorCallback> = r1;

        return;
    }

    public final void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$FaceDetectionListener r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$FaceDetectionListener;

        r0.<android.hardware.Camera: android.hardware.Camera$FaceDetectionListener mFaceListener> = r1;

        return;
    }

    public final void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;
        boolean z0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$PreviewCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        z0 = 1;

        r0.<android.hardware.Camera: boolean mOneShot> = 1;

        r0.<android.hardware.Camera: boolean mWithBuffer> = 0;

        if r1 == null goto label1;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

     label1:
        if r1 == null goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, 0);

        return;
    }

    public void setParameters(android.hardware.Camera$Parameters)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$Parameters r1, $r5;
        android.hardware.Camera$Size r2, r3;
        boolean $z0;
        java.lang.String $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$Parameters;

        $z0 = r0.<android.hardware.Camera: boolean mUsingPreviewAllocation>;

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $r5 = virtualinvoke r0.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r3 = virtualinvoke $r5.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $i1 = r2.<android.hardware.Camera$Size: int width>;

        $i0 = r3.<android.hardware.Camera$Size: int width>;

        if $i1 != $i0 goto label1;

        $i3 = r2.<android.hardware.Camera$Size: int height>;

        $i2 = r3.<android.hardware.Camera$Size: int height>;

        if $i3 != $i2 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot change preview size while a preview allocation is configured.");

        throw $r6;

     label2:
        $r4 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String flatten()>();

        specialinvoke r0.<android.hardware.Camera: void native_setParameters(java.lang.String)>($r4);

        return;
    }

    public final void setPreviewCallback(android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;
        boolean z0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$PreviewCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        r0.<android.hardware.Camera: boolean mOneShot> = 0;

        r0.<android.hardware.Camera: boolean mWithBuffer> = 0;

        if r1 == null goto label1;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

     label1:
        if r1 == null goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, 0);

        return;
    }

    public final void setPreviewCallbackAllocation(android.renderscript.Allocation) throws java.io.IOException
    {
        android.hardware.Camera r0;
        android.hardware.Camera$Parameters $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.renderscript.Type $r3, $r5, $r6, $r9, $r11;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7, $r10, $r15;
        java.lang.String $r8;
        android.renderscript.Element $r12;
        android.renderscript.Element$DataKind $r13, $r14;
        android.renderscript.Allocation r16;
        android.hardware.Camera$Size r17;
        android.view.Surface r18;

        r0 := @this: android.hardware.Camera;

        r16 := @parameter0: android.renderscript.Allocation;

        if r16 == null goto label4;

        $r2 = virtualinvoke r0.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r17 = virtualinvoke $r2.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>();

        $i0 = r17.<android.hardware.Camera$Size: int width>;

        $r3 = virtualinvoke r16.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r3.<android.renderscript.Type: int getX()>();

        if $i0 != $i1 goto label3;

        $i6 = r17.<android.hardware.Camera$Size: int height>;

        $r9 = virtualinvoke r16.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i7 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        if $i6 != $i7 goto label3;

        $i8 = virtualinvoke r16.<android.renderscript.Allocation: int getUsage()>();

        $i9 = $i8 & 32;

        if $i9 == 0 goto label2;

        $r11 = virtualinvoke r16.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r12 = virtualinvoke $r11.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r13 = virtualinvoke $r12.<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()>();

        $r14 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_YUV>;

        if $r13 != $r14 goto label1;

        r18 = virtualinvoke r16.<android.renderscript.Allocation: android.view.Surface getSurface()>();

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 1;

        goto label5;

     label1:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Allocation is not of a YUV type");

        throw $r15;

     label2:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Allocation usage does not include USAGE_IO_INPUT");

        throw $r10;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation dimensions don\'t match preview dimensions: Allocation is ");

        $r5 = virtualinvoke r16.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke r16.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Preview is ");

        $i4 = r17.<android.hardware.Camera$Size: int width>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i5 = r17.<android.hardware.Camera$Size: int height>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

        r18 = null;

     label5:
        specialinvoke r0.<android.hardware.Camera: void setPreviewCallbackSurface(android.view.Surface)>(r18);

        return;
    }

    public final void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$PreviewCallback r1;
        boolean z0;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$PreviewCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$PreviewCallback mPreviewCallback> = r1;

        z0 = 0;

        r0.<android.hardware.Camera: boolean mOneShot> = 0;

        r0.<android.hardware.Camera: boolean mWithBuffer> = 1;

        if r1 == null goto label1;

        r0.<android.hardware.Camera: boolean mUsingPreviewAllocation> = 0;

     label1:
        if r1 == null goto label2;

        z0 = 1;

     label2:
        specialinvoke r0.<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>(z0, 1);

        return;
    }

    public final void setPreviewDisplay(android.view.SurfaceHolder) throws java.io.IOException
    {
        android.hardware.Camera r0;
        android.view.SurfaceHolder r1;
        android.view.Surface $r2, $r3;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.view.SurfaceHolder;

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        virtualinvoke r0.<android.hardware.Camera: void setPreviewSurface(android.view.Surface)>($r3);

        goto label2;

     label1:
        $r2 = (android.view.Surface) null;

        virtualinvoke r0.<android.hardware.Camera: void setPreviewSurface(android.view.Surface)>($r2);

     label2:
        return;
    }

    public final native void setPreviewSurface(android.view.Surface) throws java.io.IOException;

    public final native void setPreviewTexture(android.graphics.SurfaceTexture) throws java.io.IOException;

    public final void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$OnZoomChangeListener r1;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$OnZoomChangeListener;

        r0.<android.hardware.Camera: android.hardware.Camera$OnZoomChangeListener mZoomListener> = r1;

        return;
    }

    public final void startFaceDetection()
    {
        android.hardware.Camera r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.hardware.Camera;

        $z0 = r0.<android.hardware.Camera: boolean mFaceDetectionRunning>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.hardware.Camera: void _startFaceDetection(int)>(0);

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 1;

        return;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Face detection is already running");

        throw $r1;
    }

    public final native void startPreview();

    public final native void startSmoothZoom(int);

    public final void stopFaceDetection()
    {
        android.hardware.Camera r0;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<android.hardware.Camera: void _stopFaceDetection()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        return;
    }

    public final void stopPreview()
    {
        android.hardware.Camera r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.Camera;

        specialinvoke r0.<android.hardware.Camera: void _stopPreview()>();

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback> = null;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback> = null;

        r1 = r0.<android.hardware.Camera: java.lang.Object mAutoFocusCallbackLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback mAutoFocusCallback> = null;

        exitmonitor r1;

     label2:
        r0.<android.hardware.Camera: android.hardware.Camera$AutoFocusMoveCallback mAutoFocusMoveCallback> = null;

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final native void stopSmoothZoom();

    public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ShutterCallback r1;
        android.hardware.Camera$PictureCallback r2, r3;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$ShutterCallback;

        r2 := @parameter1: android.hardware.Camera$PictureCallback;

        r3 := @parameter2: android.hardware.Camera$PictureCallback;

        virtualinvoke r0.<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>(r1, r2, null, r3);

        return;
    }

    public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback)
    {
        android.hardware.Camera r0;
        android.hardware.Camera$ShutterCallback r1;
        android.hardware.Camera$PictureCallback r2, r3, r4, $r5, $r6, $r7;
        short s0, s1, s2, s3;

        r0 := @this: android.hardware.Camera;

        r1 := @parameter0: android.hardware.Camera$ShutterCallback;

        r2 := @parameter1: android.hardware.Camera$PictureCallback;

        r3 := @parameter2: android.hardware.Camera$PictureCallback;

        r4 := @parameter3: android.hardware.Camera$PictureCallback;

        r0.<android.hardware.Camera: android.hardware.Camera$ShutterCallback mShutterCallback> = r1;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback> = r2;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback> = r3;

        r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback> = r4;

        s0 = 0;

        if r1 == null goto label1;

        s0 = 0 | 2;

     label1:
        s1 = s0;

        $r5 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mRawImageCallback>;

        if $r5 == null goto label2;

        s1 = s0 | 128;

     label2:
        s2 = s1;

        $r6 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mPostviewCallback>;

        if $r6 == null goto label3;

        s2 = s1 | 64;

     label3:
        s3 = s2;

        $r7 = r0.<android.hardware.Camera: android.hardware.Camera$PictureCallback mJpegCallback>;

        if $r7 == null goto label4;

        s3 = s2 | 256;

     label4:
        specialinvoke r0.<android.hardware.Camera: void native_takePicture(int)>(s3);

        r0.<android.hardware.Camera: boolean mFaceDetectionRunning> = 0;

        return;
    }

    public final native void unlock();

    public static void <clinit>()
    {
        <android.hardware.Camera: java.lang.String TAG> = "Camera";

        <android.hardware.Camera: int NO_ERROR> = 0;

        <android.hardware.Camera: int CAMERA_MSG_ZOOM> = 8;

        <android.hardware.Camera: int CAMERA_MSG_VIDEO_FRAME> = 32;

        <android.hardware.Camera: int CAMERA_MSG_SHUTTER> = 2;

        <android.hardware.Camera: int CAMERA_MSG_RAW_IMAGE_NOTIFY> = 512;

        <android.hardware.Camera: int CAMERA_MSG_RAW_IMAGE> = 128;

        <android.hardware.Camera: int CAMERA_MSG_PREVIEW_METADATA> = 1024;

        <android.hardware.Camera: int CAMERA_MSG_PREVIEW_FRAME> = 16;

        <android.hardware.Camera: int CAMERA_MSG_POSTVIEW_FRAME> = 64;

        <android.hardware.Camera: int CAMERA_MSG_FOCUS_MOVE> = 2048;

        <android.hardware.Camera: int CAMERA_MSG_FOCUS> = 4;

        <android.hardware.Camera: int CAMERA_MSG_ERROR> = 1;

        <android.hardware.Camera: int CAMERA_MSG_COMPRESSED_IMAGE> = 256;

        <android.hardware.Camera: int CAMERA_HAL_API_VERSION_UNSPECIFIED> = -1;

        <android.hardware.Camera: int CAMERA_HAL_API_VERSION_NORMAL_CONNECT> = -2;

        <android.hardware.Camera: int CAMERA_HAL_API_VERSION_1_0> = 256;

        <android.hardware.Camera: int CAMERA_FACE_DETECTION_SW> = 1;

        <android.hardware.Camera: int CAMERA_FACE_DETECTION_HW> = 0;

        <android.hardware.Camera: int CAMERA_ERROR_UNKNOWN> = 1;

        <android.hardware.Camera: int CAMERA_ERROR_SERVER_DIED> = 100;

        <android.hardware.Camera: int CAMERA_ERROR_EVICTED> = 2;

        <android.hardware.Camera: int CAMERA_ERROR_DISABLED> = 3;

        <android.hardware.Camera: java.lang.String ACTION_NEW_VIDEO> = "android.hardware.action.NEW_VIDEO";

        <android.hardware.Camera: java.lang.String ACTION_NEW_PICTURE> = "android.hardware.action.NEW_PICTURE";

        return;
    }
}
