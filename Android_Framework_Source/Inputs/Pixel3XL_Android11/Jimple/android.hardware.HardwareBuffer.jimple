public final class android.hardware.HardwareBuffer extends java.lang.Object implements android.os.Parcelable, java.lang.AutoCloseable
{
    public static final int BLOB;
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int DS_24UI8;
    public static final int DS_FP32UI8;
    public static final int D_16;
    public static final int D_24;
    public static final int D_FP32;
    private static final long NATIVE_HARDWARE_BUFFER_SIZE;
    public static final int RGBA_1010102;
    public static final int RGBA_8888;
    public static final int RGBA_FP16;
    public static final int RGBX_8888;
    public static final int RGB_565;
    public static final int RGB_888;
    public static final int S_UI8;
    public static final long USAGE_CPU_READ_OFTEN;
    public static final long USAGE_CPU_READ_RARELY;
    public static final long USAGE_CPU_WRITE_OFTEN;
    public static final long USAGE_CPU_WRITE_RARELY;
    public static final long USAGE_GPU_COLOR_OUTPUT;
    public static final long USAGE_GPU_CUBE_MAP;
    public static final long USAGE_GPU_DATA_BUFFER;
    public static final long USAGE_GPU_MIPMAP_COMPLETE;
    public static final long USAGE_GPU_SAMPLED_IMAGE;
    public static final long USAGE_PROTECTED_CONTENT;
    public static final long USAGE_SENSOR_DIRECT_DATA;
    public static final long USAGE_VIDEO_ENCODE;
    public static final int YCBCR_420_888;
    private java.lang.Runnable mCleaner;
    private final dalvik.system.CloseGuard mCloseGuard;
    private long mNativeObject;

    static void <clinit>()
    {
        android.hardware.HardwareBuffer$1 $r0;

        <android.hardware.HardwareBuffer: int YCBCR_420_888> = 35;

        <android.hardware.HardwareBuffer: long USAGE_VIDEO_ENCODE> = 65536L;

        <android.hardware.HardwareBuffer: long USAGE_SENSOR_DIRECT_DATA> = 8388608L;

        <android.hardware.HardwareBuffer: long USAGE_PROTECTED_CONTENT> = 16384L;

        <android.hardware.HardwareBuffer: long USAGE_GPU_SAMPLED_IMAGE> = 256L;

        <android.hardware.HardwareBuffer: long USAGE_GPU_MIPMAP_COMPLETE> = 67108864L;

        <android.hardware.HardwareBuffer: long USAGE_GPU_DATA_BUFFER> = 16777216L;

        <android.hardware.HardwareBuffer: long USAGE_GPU_CUBE_MAP> = 33554432L;

        <android.hardware.HardwareBuffer: long USAGE_GPU_COLOR_OUTPUT> = 512L;

        <android.hardware.HardwareBuffer: long USAGE_CPU_WRITE_RARELY> = 32L;

        <android.hardware.HardwareBuffer: long USAGE_CPU_WRITE_OFTEN> = 48L;

        <android.hardware.HardwareBuffer: long USAGE_CPU_READ_RARELY> = 2L;

        <android.hardware.HardwareBuffer: long USAGE_CPU_READ_OFTEN> = 3L;

        <android.hardware.HardwareBuffer: int S_UI8> = 53;

        <android.hardware.HardwareBuffer: int RGB_888> = 3;

        <android.hardware.HardwareBuffer: int RGB_565> = 4;

        <android.hardware.HardwareBuffer: int RGBX_8888> = 2;

        <android.hardware.HardwareBuffer: int RGBA_FP16> = 22;

        <android.hardware.HardwareBuffer: int RGBA_8888> = 1;

        <android.hardware.HardwareBuffer: int RGBA_1010102> = 43;

        <android.hardware.HardwareBuffer: long NATIVE_HARDWARE_BUFFER_SIZE> = 232L;

        <android.hardware.HardwareBuffer: int D_FP32> = 51;

        <android.hardware.HardwareBuffer: int D_24> = 49;

        <android.hardware.HardwareBuffer: int D_16> = 48;

        <android.hardware.HardwareBuffer: int DS_FP32UI8> = 52;

        <android.hardware.HardwareBuffer: int DS_24UI8> = 50;

        <android.hardware.HardwareBuffer: int BLOB> = 33;

        $r0 = new android.hardware.HardwareBuffer$1;

        specialinvoke $r0.<android.hardware.HardwareBuffer$1: void <init>()>();

        <android.hardware.HardwareBuffer: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    private void <init>(long)
    {
        android.hardware.HardwareBuffer r0;
        long l0, $l1, $l2;
        dalvik.system.CloseGuard $r1, $r6;
        libcore.util.NativeAllocationRegistry $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.lang.Runnable $r5;

        r0 := @this: android.hardware.HardwareBuffer;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.hardware.HardwareBuffer: dalvik.system.CloseGuard mCloseGuard> = $r1;

        r0.<android.hardware.HardwareBuffer: long mNativeObject> = l0;

        $r2 = new libcore.util.NativeAllocationRegistry;

        $r3 = class "Landroid/hardware/HardwareBuffer;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $l1 = staticinvoke <android.hardware.HardwareBuffer: long nGetNativeFinalizer()>();

        specialinvoke $r2.<libcore.util.NativeAllocationRegistry: void <init>(java.lang.ClassLoader,long,long)>($r4, $l1, 232L);

        $l2 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        $r5 = virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l2);

        r0.<android.hardware.HardwareBuffer: java.lang.Runnable mCleaner> = $r5;

        $r6 = r0.<android.hardware.HardwareBuffer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r6.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    void <init>(long, android.hardware.HardwareBuffer$1)
    {
        android.hardware.HardwareBuffer r0;
        long l0;
        android.hardware.HardwareBuffer$1 r1;

        r0 := @this: android.hardware.HardwareBuffer;

        l0 := @parameter0: long;

        r1 := @parameter1: android.hardware.HardwareBuffer$1;

        specialinvoke r0.<android.hardware.HardwareBuffer: void <init>(long)>(l0);

        return;
    }

    static long access$000(android.os.Parcel)
    {
        android.os.Parcel r0;
        long $l0;

        r0 := @parameter0: android.os.Parcel;

        $l0 = staticinvoke <android.hardware.HardwareBuffer: long nReadHardwareBufferFromParcel(android.os.Parcel)>(r0);

        return $l0;
    }

    public static android.hardware.HardwareBuffer create(int, int, int, int, long)
    {
        int i0, i1, i2, i3;
        boolean $z0;
        java.lang.StringBuilder $r0, $r5, $r10, $r15;
        java.lang.IllegalArgumentException $r3, $r8, $r13, $r18, $r20, $r22;
        java.lang.String $r4, $r9, $r14, $r19;
        byte $b4;
        android.hardware.HardwareBuffer $r21;
        long l5, l6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l5 := @parameter4: long;

        $z0 = staticinvoke <android.hardware.HardwareBuffer: boolean isSupportedFormat(int)>(i2);

        if $z0 == 0 goto label7;

        if i0 <= 0 goto label6;

        if i1 <= 0 goto label5;

        if i3 <= 0 goto label4;

        if i2 != 33 goto label2;

        if i1 != 1 goto label1;

        goto label2;

     label1:
        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Height must be 1 when using the BLOB format");

        throw $r22;

     label2:
        l6 = staticinvoke <android.hardware.HardwareBuffer: long nCreateHardwareBuffer(int,int,int,int,long)>(i0, i1, i2, i3, l5);

        $b4 = l6 cmp 0L;

        if $b4 == 0 goto label3;

        $r21 = new android.hardware.HardwareBuffer;

        specialinvoke $r21.<android.hardware.HardwareBuffer: void <init>(long)>(l6);

        return $r21;

     label3:
        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to create a HardwareBuffer, either the dimensions passed were too large, too many image layers were requested, or an invalid set of usage flags or invalid format was passed");

        throw $r20;

     label4:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid layer count ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid height ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid width ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label7:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid pixel format ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public static android.hardware.HardwareBuffer createFromGraphicBuffer(android.graphics.GraphicBuffer)
    {
        android.graphics.GraphicBuffer r0;
        android.hardware.HardwareBuffer $r1;
        long $l0;

        r0 := @parameter0: android.graphics.GraphicBuffer;

        $r1 = new android.hardware.HardwareBuffer;

        $l0 = staticinvoke <android.hardware.HardwareBuffer: long nCreateFromGraphicBuffer(android.graphics.GraphicBuffer)>(r0);

        specialinvoke $r1.<android.hardware.HardwareBuffer: void <init>(long)>($l0);

        return $r1;
    }

    public static boolean isSupported(int, int, int, int, long)
    {
        int i0, i1, i2, i3;
        long l4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r5, $r10, $r15;
        java.lang.IllegalArgumentException $r3, $r8, $r13, $r18, $r20;
        java.lang.String $r4, $r9, $r14, $r19;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l4 := @parameter4: long;

        $z0 = staticinvoke <android.hardware.HardwareBuffer: boolean isSupportedFormat(int)>(i2);

        if $z0 == 0 goto label6;

        if i0 <= 0 goto label5;

        if i1 <= 0 goto label4;

        if i3 <= 0 goto label3;

        if i2 != 33 goto label2;

        if i1 != 1 goto label1;

        goto label2;

     label1:
        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Height must be 1 when using the BLOB format");

        throw $r20;

     label2:
        $z1 = staticinvoke <android.hardware.HardwareBuffer: boolean nIsSupported(int,int,int,int,long)>(i0, i1, i2, i3, l4);

        return $z1;

     label3:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid layer count ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid height ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid width ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label6:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid pixel format ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    private static boolean isSupportedFormat(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        if i0 == 3 goto label2;

        if i0 == 4 goto label2;

        if i0 == 22 goto label2;

        if i0 == 33 goto label2;

        if i0 == 35 goto label2;

        if i0 == 43 goto label2;

        tableswitch(i0)
        {
            case 48: goto label2;
            case 49: goto label2;
            case 50: goto label2;
            case 51: goto label2;
            case 52: goto label2;
            case 53: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    private static native long nCreateFromGraphicBuffer(android.graphics.GraphicBuffer);

    private static native long nCreateHardwareBuffer(int, int, int, int, long);

    private static native int nGetFormat(long);

    private static native int nGetHeight(long);

    private static native int nGetLayers(long);

    private static native long nGetNativeFinalizer();

    private static native long nGetUsage(long);

    private static native int nGetWidth(long);

    private static native boolean nIsSupported(int, int, int, int, long);

    private static native long nReadHardwareBufferFromParcel(android.os.Parcel);

    private static native void nWriteHardwareBufferToParcel(long, android.os.Parcel);

    public void close()
    {
        android.hardware.HardwareBuffer r0;
        boolean $z0;
        dalvik.system.CloseGuard $r1;
        java.lang.Runnable $r2;

        r0 := @this: android.hardware.HardwareBuffer;

        $z0 = virtualinvoke r0.<android.hardware.HardwareBuffer: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<android.hardware.HardwareBuffer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        r0.<android.hardware.HardwareBuffer: long mNativeObject> = 0L;

        $r2 = r0.<android.hardware.HardwareBuffer: java.lang.Runnable mCleaner>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

        r0.<android.hardware.HardwareBuffer: java.lang.Runnable mCleaner> = null;

     label1:
        return;
    }

    public int describeContents()
    {
        android.hardware.HardwareBuffer r0;

        r0 := @this: android.hardware.HardwareBuffer;

        return 1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.HardwareBuffer r0;
        dalvik.system.CloseGuard $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.HardwareBuffer;

     label1:
        $r2 = r0.<android.hardware.HardwareBuffer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void warnIfOpen()>();

        virtualinvoke r0.<android.hardware.HardwareBuffer: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getFormat()
    {
        android.hardware.HardwareBuffer r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long $l0;
        int $i1;

        r0 := @this: android.hardware.HardwareBuffer;

        $z0 = virtualinvoke r0.<android.hardware.HardwareBuffer: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $l0 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        $i1 = staticinvoke <android.hardware.HardwareBuffer: int nGetFormat(long)>($l0);

        return $i1;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This HardwareBuffer has been closed and its format cannot be obtained.");

        throw $r1;
    }

    public int getHeight()
    {
        android.hardware.HardwareBuffer r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long $l0;
        int $i1;

        r0 := @this: android.hardware.HardwareBuffer;

        $z0 = virtualinvoke r0.<android.hardware.HardwareBuffer: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $l0 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        $i1 = staticinvoke <android.hardware.HardwareBuffer: int nGetHeight(long)>($l0);

        return $i1;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This HardwareBuffer has been closed and its height cannot be obtained.");

        throw $r1;
    }

    public int getLayers()
    {
        android.hardware.HardwareBuffer r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long $l0;
        int $i1;

        r0 := @this: android.hardware.HardwareBuffer;

        $z0 = virtualinvoke r0.<android.hardware.HardwareBuffer: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $l0 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        $i1 = staticinvoke <android.hardware.HardwareBuffer: int nGetLayers(long)>($l0);

        return $i1;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This HardwareBuffer has been closed and its layer count cannot be obtained.");

        throw $r1;
    }

    public long getUsage()
    {
        android.hardware.HardwareBuffer r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long $l0, $l1;

        r0 := @this: android.hardware.HardwareBuffer;

        $z0 = virtualinvoke r0.<android.hardware.HardwareBuffer: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $l0 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        $l1 = staticinvoke <android.hardware.HardwareBuffer: long nGetUsage(long)>($l0);

        return $l1;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This HardwareBuffer has been closed and its usage cannot be obtained.");

        throw $r1;
    }

    public int getWidth()
    {
        android.hardware.HardwareBuffer r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        long $l0;
        int $i1;

        r0 := @this: android.hardware.HardwareBuffer;

        $z0 = virtualinvoke r0.<android.hardware.HardwareBuffer: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $l0 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        $i1 = staticinvoke <android.hardware.HardwareBuffer: int nGetWidth(long)>($l0);

        return $i1;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This HardwareBuffer has been closed and its width cannot be obtained.");

        throw $r1;
    }

    public boolean isClosed()
    {
        android.hardware.HardwareBuffer r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: android.hardware.HardwareBuffer;

        $l0 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.hardware.HardwareBuffer r0;
        android.os.Parcel r1;
        int i0;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        long $l1;

        r0 := @this: android.hardware.HardwareBuffer;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.hardware.HardwareBuffer: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $l1 = r0.<android.hardware.HardwareBuffer: long mNativeObject>;

        staticinvoke <android.hardware.HardwareBuffer: void nWriteHardwareBufferToParcel(long,android.os.Parcel)>($l1, r1);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This HardwareBuffer has been closed and cannot be written to a parcel.");

        throw $r2;
    }
}
