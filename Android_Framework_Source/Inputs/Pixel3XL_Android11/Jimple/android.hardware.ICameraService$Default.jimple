public class android.hardware.ICameraService$Default extends java.lang.Object implements android.hardware.ICameraService
{

    public void <init>()
    {
        android.hardware.ICameraService$Default r0;

        r0 := @this: android.hardware.ICameraService$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.hardware.CameraStatus[] addListener(android.hardware.ICameraServiceListener) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        android.hardware.ICameraServiceListener r1;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: android.hardware.ICameraServiceListener;

        return null;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.ICameraService$Default r0;

        r0 := @this: android.hardware.ICameraService$Default;

        return null;
    }

    public android.hardware.ICamera connect(android.hardware.ICameraClient, int, java.lang.String, int, int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        android.hardware.ICameraClient r1;
        int i0, i1, i2;
        java.lang.String r2;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: android.hardware.ICameraClient;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        return null;
    }

    public android.hardware.camera2.ICameraDeviceUser connectDevice(android.hardware.camera2.ICameraDeviceCallbacks, java.lang.String, java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        android.hardware.camera2.ICameraDeviceCallbacks r1;
        java.lang.String r2, r3, r4;
        int i0;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: android.hardware.camera2.ICameraDeviceCallbacks;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        return null;
    }

    public android.hardware.ICamera connectLegacy(android.hardware.ICameraClient, int, int, java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        android.hardware.ICameraClient r1;
        int i0, i1, i2;
        java.lang.String r2;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: android.hardware.ICameraClient;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        return null;
    }

    public android.hardware.camera2.impl.CameraMetadataNative getCameraCharacteristics(java.lang.String) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        java.lang.String r1;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public android.hardware.CameraInfo getCameraInfo(int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        int i0;

        r0 := @this: android.hardware.ICameraService$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.hardware.camera2.params.VendorTagDescriptorCache getCameraVendorTagCache() throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;

        r0 := @this: android.hardware.ICameraService$Default;

        return null;
    }

    public android.hardware.camera2.params.VendorTagDescriptor getCameraVendorTagDescriptor() throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;

        r0 := @this: android.hardware.ICameraService$Default;

        return null;
    }

    public android.hardware.camera2.utils.ConcurrentCameraIdCombination[] getConcurrentCameraIds() throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;

        r0 := @this: android.hardware.ICameraService$Default;

        return null;
    }

    public java.lang.String getLegacyParameters(int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        int i0;

        r0 := @this: android.hardware.ICameraService$Default;

        i0 := @parameter0: int;

        return null;
    }

    public int getNumberOfCameras(int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        int i0;

        r0 := @this: android.hardware.ICameraService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isConcurrentSessionConfigurationSupported(android.hardware.camera2.utils.CameraIdAndSessionConfiguration[]) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        android.hardware.camera2.utils.CameraIdAndSessionConfiguration[] r1;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: android.hardware.camera2.utils.CameraIdAndSessionConfiguration[];

        return 0;
    }

    public boolean isHiddenPhysicalCamera(java.lang.String) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        java.lang.String r1;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void notifyDeviceStateChange(long) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        long l0;

        r0 := @this: android.hardware.ICameraService$Default;

        l0 := @parameter0: long;

        return;
    }

    public void notifySystemEvent(int, int[]) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        int i0;
        int[] r1;

        r0 := @this: android.hardware.ICameraService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        return;
    }

    public void removeListener(android.hardware.ICameraServiceListener) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        android.hardware.ICameraServiceListener r1;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: android.hardware.ICameraServiceListener;

        return;
    }

    public void setTorchMode(java.lang.String, boolean, android.os.IBinder) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        java.lang.String r1;
        boolean z0;
        android.os.IBinder r2;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.IBinder;

        return;
    }

    public boolean supportsCameraApi(java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.hardware.ICameraService$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }
}
