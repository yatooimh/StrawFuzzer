public abstract class android.hardware.ICameraService$Stub extends android.os.Binder implements android.hardware.ICameraService
{
    private static final java.lang.String DESCRIPTOR;
    static final int TRANSACTION_addListener;
    static final int TRANSACTION_connect;
    static final int TRANSACTION_connectDevice;
    static final int TRANSACTION_connectLegacy;
    static final int TRANSACTION_getCameraCharacteristics;
    static final int TRANSACTION_getCameraInfo;
    static final int TRANSACTION_getCameraVendorTagCache;
    static final int TRANSACTION_getCameraVendorTagDescriptor;
    static final int TRANSACTION_getConcurrentCameraIds;
    static final int TRANSACTION_getLegacyParameters;
    static final int TRANSACTION_getNumberOfCameras;
    static final int TRANSACTION_isConcurrentSessionConfigurationSupported;
    static final int TRANSACTION_isHiddenPhysicalCamera;
    static final int TRANSACTION_notifyDeviceStateChange;
    static final int TRANSACTION_notifySystemEvent;
    static final int TRANSACTION_removeListener;
    static final int TRANSACTION_setTorchMode;
    static final int TRANSACTION_supportsCameraApi;

    public void <init>()
    {
        android.hardware.ICameraService$Stub r0;

        r0 := @this: android.hardware.ICameraService$Stub;

        specialinvoke r0.<android.os.Binder: void <init>()>();

        virtualinvoke r0.<android.hardware.ICameraService$Stub: void attachInterface(android.os.IInterface,java.lang.String)>(r0, "android.hardware.ICameraService");

        return;
    }

    public static android.hardware.ICameraService asInterface(android.os.IBinder)
    {
        android.os.IBinder r0;
        android.os.IInterface r1;
        android.hardware.ICameraService$Stub$Proxy $r2;
        boolean $z0;
        android.hardware.ICameraService $r3;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = interfaceinvoke r0.<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>("android.hardware.ICameraService");

        if r1 == null goto label2;

        $z0 = r1 instanceof android.hardware.ICameraService;

        if $z0 == 0 goto label2;

        $r3 = (android.hardware.ICameraService) r1;

        return $r3;

     label2:
        $r2 = new android.hardware.ICameraService$Stub$Proxy;

        specialinvoke $r2.<android.hardware.ICameraService$Stub$Proxy: void <init>(android.os.IBinder)>(r0);

        return $r2;
    }

    public static android.hardware.ICameraService getDefaultImpl()
    {
        android.hardware.ICameraService $r0;

        $r0 = <android.hardware.ICameraService$Stub$Proxy: android.hardware.ICameraService sDefaultImpl>;

        return $r0;
    }

    public static java.lang.String getDefaultTransactionName(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label19;
            case 2: goto label18;
            case 3: goto label17;
            case 4: goto label16;
            case 5: goto label15;
            case 6: goto label14;
            case 7: goto label13;
            case 8: goto label12;
            case 9: goto label11;
            case 10: goto label10;
            case 11: goto label09;
            case 12: goto label08;
            case 13: goto label07;
            case 14: goto label06;
            case 15: goto label05;
            case 16: goto label04;
            case 17: goto label03;
            case 18: goto label02;
            default: goto label01;
        };

     label01:
        return null;

     label02:
        return "notifyDeviceStateChange";

     label03:
        return "notifySystemEvent";

     label04:
        return "setTorchMode";

     label05:
        return "isHiddenPhysicalCamera";

     label06:
        return "supportsCameraApi";

     label07:
        return "getLegacyParameters";

     label08:
        return "getCameraVendorTagCache";

     label09:
        return "getCameraVendorTagDescriptor";

     label10:
        return "getCameraCharacteristics";

     label11:
        return "removeListener";

     label12:
        return "isConcurrentSessionConfigurationSupported";

     label13:
        return "getConcurrentCameraIds";

     label14:
        return "addListener";

     label15:
        return "connectLegacy";

     label16:
        return "connectDevice";

     label17:
        return "connect";

     label18:
        return "getCameraInfo";

     label19:
        return "getNumberOfCameras";
    }

    public static boolean setDefaultImpl(android.hardware.ICameraService)
    {
        android.hardware.ICameraService r0, $r1;
        java.lang.IllegalStateException $r2;

        r0 := @parameter0: android.hardware.ICameraService;

        $r1 = <android.hardware.ICameraService$Stub$Proxy: android.hardware.ICameraService sDefaultImpl>;

        if $r1 != null goto label2;

        if r0 == null goto label1;

        <android.hardware.ICameraService$Stub$Proxy: android.hardware.ICameraService sDefaultImpl> = r0;

        return 1;

     label1:
        return 0;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setDefaultImpl() called twice");

        throw $r2;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.ICameraService$Stub r0;

        r0 := @this: android.hardware.ICameraService$Stub;

        return r0;
    }

    public java.lang.String getTransactionName(int)
    {
        android.hardware.ICameraService$Stub r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.hardware.ICameraService$Stub;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.hardware.ICameraService$Stub: java.lang.String getDefaultTransactionName(int)>(i0);

        return $r1;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.hardware.ICameraService$Stub r0;
        android.os.Parcel r1, r25;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19;
        long $l1;
        int[] $r2;
        android.os.IBinder $r3, $r7, $r12, $r14, $r17, $r22, r34, r36, r38;
        java.lang.String $r4, $r5, $r6, $r16, $r19, $r20, $r21, $r24, r26, r27;
        android.hardware.ICameraServiceListener $r8, $r13;
        android.os.Parcelable$Creator $r9;
        java.lang.Object[] $r10;
        android.hardware.camera2.utils.CameraIdAndSessionConfiguration[] $r11;
        android.hardware.ICameraClient $r15, $r23;
        android.hardware.camera2.ICameraDeviceCallbacks $r18;
        boolean $z0, z1, z2, z3, z4;
        android.hardware.camera2.params.VendorTagDescriptorCache r28;
        android.hardware.camera2.params.VendorTagDescriptor r29;
        android.hardware.camera2.impl.CameraMetadataNative r30;
        android.hardware.camera2.utils.ConcurrentCameraIdCombination[] r31;
        android.hardware.CameraStatus[] r32;
        android.hardware.ICamera r33, r37;
        android.hardware.camera2.ICameraDeviceUser r35;
        android.hardware.CameraInfo r39;

        r0 := @this: android.hardware.ICameraService$Stub;

        i15 := @parameter0: int;

        r25 := @parameter1: android.os.Parcel;

        r1 := @parameter2: android.os.Parcel;

        i0 := @parameter3: int;

        if i15 == 1598968902 goto label32;

        z1 = 0;

        tableswitch(i15)
        {
            case 1: goto label31;
            case 2: goto label28;
            case 3: goto label26;
            case 4: goto label24;
            case 5: goto label22;
            case 6: goto label21;
            case 7: goto label20;
            case 8: goto label19;
            case 9: goto label18;
            case 10: goto label15;
            case 11: goto label12;
            case 12: goto label09;
            case 13: goto label08;
            case 14: goto label07;
            case 15: goto label06;
            case 16: goto label04;
            case 17: goto label03;
            case 18: goto label02;
            default: goto label01;
        };

     label01:
        $z0 = specialinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i15, r25, r1, i0);

        return $z0;

     label02:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $l1 = virtualinvoke r25.<android.os.Parcel: long readLong()>();

        virtualinvoke r0.<android.hardware.ICameraService$Stub: void notifyDeviceStateChange(long)>($l1);

        return 1;

     label03:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $i2 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        $r2 = virtualinvoke r25.<android.os.Parcel: int[] createIntArray()>();

        virtualinvoke r0.<android.hardware.ICameraService$Stub: void notifySystemEvent(int,int[])>($i2, $r2);

        return 1;

     label04:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        r26 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        $i3 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        if $i3 == 0 goto label05;

        z1 = 1;

     label05:
        $r3 = virtualinvoke r25.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        virtualinvoke r0.<android.hardware.ICameraService$Stub: void setTorchMode(java.lang.String,boolean,android.os.IBinder)>(r26, z1, $r3);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label06:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r4 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        z2 = virtualinvoke r0.<android.hardware.ICameraService$Stub: boolean isHiddenPhysicalCamera(java.lang.String)>($r4);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        i17 = (int) z2;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i17);

        return 1;

     label07:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r5 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        $i4 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        z3 = virtualinvoke r0.<android.hardware.ICameraService$Stub: boolean supportsCameraApi(java.lang.String,int)>($r5, $i4);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        i18 = (int) z3;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i18);

        return 1;

     label08:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $i5 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        r27 = virtualinvoke r0.<android.hardware.ICameraService$Stub: java.lang.String getLegacyParameters(int)>($i5);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r27);

        return 1;

     label09:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        r28 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.camera2.params.VendorTagDescriptorCache getCameraVendorTagCache()>();

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        if r28 == null goto label10;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r28.<android.hardware.camera2.params.VendorTagDescriptorCache: void writeToParcel(android.os.Parcel,int)>(r1, 1);

        goto label11;

     label10:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label11:
        return 1;

     label12:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        r29 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.camera2.params.VendorTagDescriptor getCameraVendorTagDescriptor()>();

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        if r29 == null goto label13;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r29.<android.hardware.camera2.params.VendorTagDescriptor: void writeToParcel(android.os.Parcel,int)>(r1, 1);

        goto label14;

     label13:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label14:
        return 1;

     label15:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r6 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        r30 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.camera2.impl.CameraMetadataNative getCameraCharacteristics(java.lang.String)>($r6);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        if r30 == null goto label16;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r30.<android.hardware.camera2.impl.CameraMetadataNative: void writeToParcel(android.os.Parcel,int)>(r1, 1);

        goto label17;

     label16:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label17:
        return 1;

     label18:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r7 = virtualinvoke r25.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r8 = staticinvoke <android.hardware.ICameraServiceListener$Stub: android.hardware.ICameraServiceListener asInterface(android.os.IBinder)>($r7);

        virtualinvoke r0.<android.hardware.ICameraService$Stub: void removeListener(android.hardware.ICameraServiceListener)>($r8);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        return 1;

     label19:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r9 = <android.hardware.camera2.utils.CameraIdAndSessionConfiguration: android.os.Parcelable$Creator CREATOR>;

        $r10 = virtualinvoke r25.<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>($r9);

        $r11 = (android.hardware.camera2.utils.CameraIdAndSessionConfiguration[]) $r10;

        z4 = virtualinvoke r0.<android.hardware.ICameraService$Stub: boolean isConcurrentSessionConfigurationSupported(android.hardware.camera2.utils.CameraIdAndSessionConfiguration[])>($r11);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        i19 = (int) z4;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i19);

        return 1;

     label20:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        r31 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.camera2.utils.ConcurrentCameraIdCombination[] getConcurrentCameraIds()>();

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r31, 1);

        return 1;

     label21:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r12 = virtualinvoke r25.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r13 = staticinvoke <android.hardware.ICameraServiceListener$Stub: android.hardware.ICameraServiceListener asInterface(android.os.IBinder)>($r12);

        r32 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.CameraStatus[] addListener(android.hardware.ICameraServiceListener)>($r13);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r32, 1);

        return 1;

     label22:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r14 = virtualinvoke r25.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r15 = staticinvoke <android.hardware.ICameraClient$Stub: android.hardware.ICameraClient asInterface(android.os.IBinder)>($r14);

        $i6 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        $i7 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        $r16 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        $i8 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        r33 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.ICamera connectLegacy(android.hardware.ICameraClient,int,int,java.lang.String,int)>($r15, $i6, $i7, $r16, $i8);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        r34 = null;

        if r33 == null goto label23;

        r34 = interfaceinvoke r33.<android.hardware.ICamera: android.os.IBinder asBinder()>();

     label23:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r34);

        return 1;

     label24:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r17 = virtualinvoke r25.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r18 = staticinvoke <android.hardware.camera2.ICameraDeviceCallbacks$Stub: android.hardware.camera2.ICameraDeviceCallbacks asInterface(android.os.IBinder)>($r17);

        $r19 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        $r20 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        $r21 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        $i9 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        r35 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.camera2.ICameraDeviceUser connectDevice(android.hardware.camera2.ICameraDeviceCallbacks,java.lang.String,java.lang.String,java.lang.String,int)>($r18, $r19, $r20, $r21, $i9);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        r36 = null;

        if r35 == null goto label25;

        r36 = interfaceinvoke r35.<android.hardware.camera2.ICameraDeviceUser: android.os.IBinder asBinder()>();

     label25:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r36);

        return 1;

     label26:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $r22 = virtualinvoke r25.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r23 = staticinvoke <android.hardware.ICameraClient$Stub: android.hardware.ICameraClient asInterface(android.os.IBinder)>($r22);

        $i10 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        $r24 = virtualinvoke r25.<android.os.Parcel: java.lang.String readString()>();

        $i11 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        $i12 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        r37 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.ICamera connect(android.hardware.ICameraClient,int,java.lang.String,int,int)>($r23, $i10, $r24, $i11, $i12);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        r38 = null;

        if r37 == null goto label27;

        r38 = interfaceinvoke r37.<android.hardware.ICamera: android.os.IBinder asBinder()>();

     label27:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r38);

        return 1;

     label28:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $i13 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        r39 = virtualinvoke r0.<android.hardware.ICameraService$Stub: android.hardware.CameraInfo getCameraInfo(int)>($i13);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        if r39 == null goto label29;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r39.<android.hardware.CameraInfo: void writeToParcel(android.os.Parcel,int)>(r1, 1);

        goto label30;

     label29:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label30:
        return 1;

     label31:
        virtualinvoke r25.<android.os.Parcel: void enforceInterface(java.lang.String)>("android.hardware.ICameraService");

        $i14 = virtualinvoke r25.<android.os.Parcel: int readInt()>();

        i16 = virtualinvoke r0.<android.hardware.ICameraService$Stub: int getNumberOfCameras(int)>($i14);

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i16);

        return 1;

     label32:
        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>("android.hardware.ICameraService");

        return 1;
    }

    public static void <clinit>()
    {
        <android.hardware.ICameraService$Stub: int TRANSACTION_supportsCameraApi> = 14;

        <android.hardware.ICameraService$Stub: int TRANSACTION_setTorchMode> = 16;

        <android.hardware.ICameraService$Stub: int TRANSACTION_removeListener> = 9;

        <android.hardware.ICameraService$Stub: int TRANSACTION_notifySystemEvent> = 17;

        <android.hardware.ICameraService$Stub: int TRANSACTION_notifyDeviceStateChange> = 18;

        <android.hardware.ICameraService$Stub: int TRANSACTION_isHiddenPhysicalCamera> = 15;

        <android.hardware.ICameraService$Stub: int TRANSACTION_isConcurrentSessionConfigurationSupported> = 8;

        <android.hardware.ICameraService$Stub: int TRANSACTION_getNumberOfCameras> = 1;

        <android.hardware.ICameraService$Stub: int TRANSACTION_getLegacyParameters> = 13;

        <android.hardware.ICameraService$Stub: int TRANSACTION_getConcurrentCameraIds> = 7;

        <android.hardware.ICameraService$Stub: int TRANSACTION_getCameraVendorTagDescriptor> = 11;

        <android.hardware.ICameraService$Stub: int TRANSACTION_getCameraVendorTagCache> = 12;

        <android.hardware.ICameraService$Stub: int TRANSACTION_getCameraInfo> = 2;

        <android.hardware.ICameraService$Stub: int TRANSACTION_getCameraCharacteristics> = 10;

        <android.hardware.ICameraService$Stub: int TRANSACTION_connectLegacy> = 5;

        <android.hardware.ICameraService$Stub: int TRANSACTION_connectDevice> = 4;

        <android.hardware.ICameraService$Stub: int TRANSACTION_connect> = 3;

        <android.hardware.ICameraService$Stub: int TRANSACTION_addListener> = 6;

        <android.hardware.ICameraService$Stub: java.lang.String DESCRIPTOR> = "android.hardware.ICameraService";

        return;
    }
}
