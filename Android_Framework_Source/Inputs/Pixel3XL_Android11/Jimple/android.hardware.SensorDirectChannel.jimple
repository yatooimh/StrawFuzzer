public final class android.hardware.SensorDirectChannel extends java.lang.Object implements java.nio.channels.Channel
{
    public static final int RATE_FAST;
    public static final int RATE_NORMAL;
    public static final int RATE_STOP;
    public static final int RATE_VERY_FAST;
    public static final int TYPE_HARDWARE_BUFFER;
    public static final int TYPE_MEMORY_FILE;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.util.concurrent.atomic.AtomicBoolean mClosed;
    private final android.hardware.SensorManager mManager;
    private final int mNativeHandle;
    private final long mSize;
    private final int mType;

    void <init>(android.hardware.SensorManager, int, int, long)
    {
        android.hardware.SensorDirectChannel r0;
        android.hardware.SensorManager r1;
        int i0, i1;
        long l2;
        dalvik.system.CloseGuard r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;

        r0 := @this: android.hardware.SensorDirectChannel;

        r1 := @parameter0: android.hardware.SensorManager;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.hardware.SensorDirectChannel: java.util.concurrent.atomic.AtomicBoolean mClosed> = $r3;

        r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.hardware.SensorDirectChannel: dalvik.system.CloseGuard mCloseGuard> = r2;

        r0.<android.hardware.SensorDirectChannel: android.hardware.SensorManager mManager> = r1;

        r0.<android.hardware.SensorDirectChannel: int mNativeHandle> = i0;

        r0.<android.hardware.SensorDirectChannel: int mType> = i1;

        r0.<android.hardware.SensorDirectChannel: long mSize> = l2;

        virtualinvoke r2.<dalvik.system.CloseGuard: void open(java.lang.String)>("SensorDirectChannel");

        return;
    }

    static long[] encodeData(android.os.MemoryFile)
    {
        java.io.FileDescriptor $r0;
        long[] $r1;
        long $l0;
        java.lang.Throwable $r2;
        android.os.MemoryFile r3;
        int i1;

        r3 := @parameter0: android.os.MemoryFile;

     label1:
        $r0 = virtualinvoke r3.<android.os.MemoryFile: java.io.FileDescriptor getFileDescriptor()>();

        i1 = virtualinvoke $r0.<java.io.FileDescriptor: int getInt$()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        i1 = -1;

     label4:
        $r1 = newarray (long)[3];

        $r1[0] = 1L;

        $r1[1] = 0L;

        $l0 = (long) i1;

        $r1[2] = $l0;

        return $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close()
    {
        android.hardware.SensorDirectChannel r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        dalvik.system.CloseGuard $r2;
        android.hardware.SensorManager $r3;

        r0 := @this: android.hardware.SensorDirectChannel;

        $r1 = r0.<android.hardware.SensorDirectChannel: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        $r2 = r0.<android.hardware.SensorDirectChannel: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

        $r3 = r0.<android.hardware.SensorDirectChannel: android.hardware.SensorManager mManager>;

        virtualinvoke $r3.<android.hardware.SensorManager: void destroyDirectChannel(android.hardware.SensorDirectChannel)>(r0);

     label1:
        return;
    }

    public int configure(android.hardware.Sensor, int)
    {
        android.hardware.SensorDirectChannel r0;
        android.hardware.Sensor r1;
        int i0, $i1;
        android.hardware.SensorManager $r2;

        r0 := @this: android.hardware.SensorDirectChannel;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        $r2 = r0.<android.hardware.SensorDirectChannel: android.hardware.SensorManager mManager>;

        $i1 = virtualinvoke $r2.<android.hardware.SensorManager: int configureDirectChannelImpl(android.hardware.SensorDirectChannel,android.hardware.Sensor,int)>(r0, r1, i0);

        return $i1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.SensorDirectChannel r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.SensorDirectChannel;

     label1:
        $r2 = r0.<android.hardware.SensorDirectChannel: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.hardware.SensorDirectChannel: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.hardware.SensorDirectChannel: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    int getNativeHandle()
    {
        android.hardware.SensorDirectChannel r0;
        int $i0;

        r0 := @this: android.hardware.SensorDirectChannel;

        $i0 = r0.<android.hardware.SensorDirectChannel: int mNativeHandle>;

        return $i0;
    }

    public boolean isOpen()
    {
        android.hardware.SensorDirectChannel r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0, $z1;

        r0 := @this: android.hardware.SensorDirectChannel;

        $r1 = r0.<android.hardware.SensorDirectChannel: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public boolean isValid()
    {
        android.hardware.SensorDirectChannel r0;
        boolean $z0;

        r0 := @this: android.hardware.SensorDirectChannel;

        $z0 = virtualinvoke r0.<android.hardware.SensorDirectChannel: boolean isOpen()>();

        return $z0;
    }

    public static void <clinit>()
    {
        <android.hardware.SensorDirectChannel: int TYPE_MEMORY_FILE> = 1;

        <android.hardware.SensorDirectChannel: int TYPE_HARDWARE_BUFFER> = 2;

        <android.hardware.SensorDirectChannel: int RATE_VERY_FAST> = 3;

        <android.hardware.SensorDirectChannel: int RATE_STOP> = 0;

        <android.hardware.SensorDirectChannel: int RATE_NORMAL> = 1;

        <android.hardware.SensorDirectChannel: int RATE_FAST> = 2;

        return;
    }
}
