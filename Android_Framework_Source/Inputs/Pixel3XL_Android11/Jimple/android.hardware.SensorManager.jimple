public abstract class android.hardware.SensorManager extends java.lang.Object
{
    public static final int AXIS_MINUS_X;
    public static final int AXIS_MINUS_Y;
    public static final int AXIS_MINUS_Z;
    public static final int AXIS_X;
    public static final int AXIS_Y;
    public static final int AXIS_Z;
    public static final int DATA_X;
    public static final int DATA_Y;
    public static final int DATA_Z;
    public static final float GRAVITY_DEATH_STAR_I;
    public static final float GRAVITY_EARTH;
    public static final float GRAVITY_JUPITER;
    public static final float GRAVITY_MARS;
    public static final float GRAVITY_MERCURY;
    public static final float GRAVITY_MOON;
    public static final float GRAVITY_NEPTUNE;
    public static final float GRAVITY_PLUTO;
    public static final float GRAVITY_SATURN;
    public static final float GRAVITY_SUN;
    public static final float GRAVITY_THE_ISLAND;
    public static final float GRAVITY_URANUS;
    public static final float GRAVITY_VENUS;
    public static final float LIGHT_CLOUDY;
    public static final float LIGHT_FULLMOON;
    public static final float LIGHT_NO_MOON;
    public static final float LIGHT_OVERCAST;
    public static final float LIGHT_SHADE;
    public static final float LIGHT_SUNLIGHT;
    public static final float LIGHT_SUNLIGHT_MAX;
    public static final float LIGHT_SUNRISE;
    public static final float MAGNETIC_FIELD_EARTH_MAX;
    public static final float MAGNETIC_FIELD_EARTH_MIN;
    public static final float PRESSURE_STANDARD_ATMOSPHERE;
    public static final int RAW_DATA_INDEX;
    public static final int RAW_DATA_X;
    public static final int RAW_DATA_Y;
    public static final int RAW_DATA_Z;
    public static final int SENSOR_ACCELEROMETER;
    public static final int SENSOR_ALL;
    public static final int SENSOR_DELAY_FASTEST;
    public static final int SENSOR_DELAY_GAME;
    public static final int SENSOR_DELAY_NORMAL;
    public static final int SENSOR_DELAY_UI;
    public static final int SENSOR_LIGHT;
    public static final int SENSOR_MAGNETIC_FIELD;
    public static final int SENSOR_MAX;
    public static final int SENSOR_MIN;
    public static final int SENSOR_ORIENTATION;
    public static final int SENSOR_ORIENTATION_RAW;
    public static final int SENSOR_PROXIMITY;
    public static final int SENSOR_STATUS_ACCURACY_HIGH;
    public static final int SENSOR_STATUS_ACCURACY_LOW;
    public static final int SENSOR_STATUS_ACCURACY_MEDIUM;
    public static final int SENSOR_STATUS_NO_CONTACT;
    public static final int SENSOR_STATUS_UNRELIABLE;
    public static final int SENSOR_TEMPERATURE;
    public static final int SENSOR_TRICORDER;
    public static final float STANDARD_GRAVITY;
    protected static final java.lang.String TAG;
    private static final float[] sTempMatrix;
    private android.hardware.LegacySensorManager mLegacySensorManager;
    private final android.util.SparseArray mSensorListByType;

    static void <clinit>()
    {
        float[] $r0;

        <android.hardware.SensorManager: java.lang.String TAG> = "SensorManager";

        <android.hardware.SensorManager: float STANDARD_GRAVITY> = 9.80665F;

        <android.hardware.SensorManager: int SENSOR_TRICORDER> = 64;

        <android.hardware.SensorManager: int SENSOR_TEMPERATURE> = 4;

        <android.hardware.SensorManager: int SENSOR_STATUS_UNRELIABLE> = 0;

        <android.hardware.SensorManager: int SENSOR_STATUS_NO_CONTACT> = -1;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_MEDIUM> = 2;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_LOW> = 1;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_HIGH> = 3;

        <android.hardware.SensorManager: int SENSOR_PROXIMITY> = 32;

        <android.hardware.SensorManager: int SENSOR_ORIENTATION_RAW> = 128;

        <android.hardware.SensorManager: int SENSOR_ORIENTATION> = 1;

        <android.hardware.SensorManager: int SENSOR_MIN> = 1;

        <android.hardware.SensorManager: int SENSOR_MAX> = 64;

        <android.hardware.SensorManager: int SENSOR_MAGNETIC_FIELD> = 8;

        <android.hardware.SensorManager: int SENSOR_LIGHT> = 16;

        <android.hardware.SensorManager: int SENSOR_DELAY_UI> = 2;

        <android.hardware.SensorManager: int SENSOR_DELAY_NORMAL> = 3;

        <android.hardware.SensorManager: int SENSOR_DELAY_GAME> = 1;

        <android.hardware.SensorManager: int SENSOR_DELAY_FASTEST> = 0;

        <android.hardware.SensorManager: int SENSOR_ALL> = 127;

        <android.hardware.SensorManager: int SENSOR_ACCELEROMETER> = 2;

        <android.hardware.SensorManager: int RAW_DATA_Z> = 5;

        <android.hardware.SensorManager: int RAW_DATA_Y> = 4;

        <android.hardware.SensorManager: int RAW_DATA_X> = 3;

        <android.hardware.SensorManager: int RAW_DATA_INDEX> = 3;

        <android.hardware.SensorManager: float PRESSURE_STANDARD_ATMOSPHERE> = 1013.25F;

        <android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MIN> = 30.0F;

        <android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MAX> = 60.0F;

        <android.hardware.SensorManager: float LIGHT_SUNRISE> = 400.0F;

        <android.hardware.SensorManager: float LIGHT_SUNLIGHT_MAX> = 120000.0F;

        <android.hardware.SensorManager: float LIGHT_SUNLIGHT> = 110000.0F;

        <android.hardware.SensorManager: float LIGHT_SHADE> = 20000.0F;

        <android.hardware.SensorManager: float LIGHT_OVERCAST> = 10000.0F;

        <android.hardware.SensorManager: float LIGHT_NO_MOON> = 0.001F;

        <android.hardware.SensorManager: float LIGHT_FULLMOON> = 0.25F;

        <android.hardware.SensorManager: float LIGHT_CLOUDY> = 100.0F;

        <android.hardware.SensorManager: float GRAVITY_VENUS> = 8.87F;

        <android.hardware.SensorManager: float GRAVITY_URANUS> = 8.69F;

        <android.hardware.SensorManager: float GRAVITY_THE_ISLAND> = 4.815162F;

        <android.hardware.SensorManager: float GRAVITY_SUN> = 275.0F;

        <android.hardware.SensorManager: float GRAVITY_SATURN> = 8.96F;

        <android.hardware.SensorManager: float GRAVITY_PLUTO> = 0.6F;

        <android.hardware.SensorManager: float GRAVITY_NEPTUNE> = 11.0F;

        <android.hardware.SensorManager: float GRAVITY_MOON> = 1.6F;

        <android.hardware.SensorManager: float GRAVITY_MERCURY> = 3.7F;

        <android.hardware.SensorManager: float GRAVITY_MARS> = 3.71F;

        <android.hardware.SensorManager: float GRAVITY_JUPITER> = 23.12F;

        <android.hardware.SensorManager: float GRAVITY_EARTH> = 9.80665F;

        <android.hardware.SensorManager: float GRAVITY_DEATH_STAR_I> = 3.5303614E-7F;

        <android.hardware.SensorManager: int DATA_Z> = 2;

        <android.hardware.SensorManager: int DATA_Y> = 1;

        <android.hardware.SensorManager: int DATA_X> = 0;

        <android.hardware.SensorManager: int AXIS_Z> = 3;

        <android.hardware.SensorManager: int AXIS_Y> = 2;

        <android.hardware.SensorManager: int AXIS_X> = 1;

        <android.hardware.SensorManager: int AXIS_MINUS_Z> = 131;

        <android.hardware.SensorManager: int AXIS_MINUS_Y> = 130;

        <android.hardware.SensorManager: int AXIS_MINUS_X> = 129;

        $r0 = newarray (float)[16];

        <android.hardware.SensorManager: float[] sTempMatrix> = $r0;

        return;
    }

    public void <init>()
    {
        android.hardware.SensorManager r0;
        android.util.SparseArray $r1;

        r0 := @this: android.hardware.SensorManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType> = $r1;

        return;
    }

    public static float getAltitude(float, float)
    {
        float f0, f1, $f2, $f3, $f4, $f5;
        double $d0, $d1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = f1 / f0;

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 0.19029495120048523);

        $f3 = (float) $d1;

        $f4 = 1.0F - $f3;

        $f5 = $f4 * 44330.0F;

        return $f5;
    }

    public static void getAngleChange(float[], float[], float[])
    {
        float[] r0, r1, r2;
        int $i0, $i1, $i2, $i3;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        r2 := @parameter2: float[];

        f0 = 0.0F;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

        f4 = 0.0F;

        f5 = 0.0F;

        f6 = 0.0F;

        f7 = 0.0F;

        f8 = 0.0F;

        f9 = 0.0F;

        f10 = 0.0F;

        f11 = 0.0F;

        f12 = 0.0F;

        f13 = 0.0F;

        f14 = 0.0F;

        f15 = 0.0F;

        f16 = 0.0F;

        f17 = 0.0F;

        $i0 = lengthof r1;

        if $i0 != 9 goto label1;

        f0 = r1[0];

        f1 = r1[1];

        f2 = r1[2];

        f3 = r1[3];

        f4 = r1[4];

        f5 = r1[5];

        f6 = r1[6];

        f7 = r1[7];

        f8 = r1[8];

        goto label2;

     label1:
        $i1 = lengthof r1;

        if $i1 != 16 goto label2;

        f0 = r1[0];

        f1 = r1[1];

        f2 = r1[2];

        f3 = r1[4];

        f4 = r1[5];

        f5 = r1[6];

        f6 = r1[8];

        f7 = r1[9];

        f8 = r1[10];

        goto label2;

     label2:
        $i3 = lengthof r2;

        if $i3 != 9 goto label3;

        f9 = r2[0];

        f10 = r2[1];

        f11 = r2[2];

        f12 = r2[3];

        f13 = r2[4];

        f14 = r2[5];

        f15 = r2[6];

        f16 = r2[7];

        f17 = r2[8];

        goto label4;

     label3:
        $i2 = lengthof r2;

        if $i2 != 16 goto label4;

        f9 = r2[0];

        f10 = r2[1];

        f11 = r2[2];

        f12 = r2[4];

        f13 = r2[5];

        f14 = r2[6];

        f15 = r2[8];

        f16 = r2[9];

        f17 = r2[10];

     label4:
        $f18 = f9 * f1;

        $f19 = f12 * f4;

        $f20 = $f18 + $f19;

        $f21 = f15 * f7;

        $f22 = $f20 + $f21;

        $d0 = (double) $f22;

        $f23 = f10 * f1;

        $f24 = f13 * f4;

        $f25 = $f23 + $f24;

        $f26 = f16 * f7;

        $f27 = $f25 + $f26;

        $d1 = (double) $f27;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f28 = (float) $d2;

        r0[0] = $f28;

        $f29 = f11 * f1;

        $f30 = f14 * f4;

        $f31 = $f29 + $f30;

        $f32 = f17 * f7;

        $f33 = $f31 + $f32;

        $f34 = neg $f33;

        $d3 = (double) $f34;

        $d4 = staticinvoke <java.lang.Math: double asin(double)>($d3);

        $f35 = (float) $d4;

        r0[1] = $f35;

        $f36 = f11 * f0;

        $f37 = f14 * f3;

        $f38 = $f36 + $f37;

        $f39 = f17 * f6;

        $f40 = $f38 + $f39;

        $f41 = neg $f40;

        $d5 = (double) $f41;

        $f42 = f11 * f2;

        $f43 = f14 * f5;

        $f44 = $f42 + $f43;

        $f45 = f17 * f8;

        $f46 = $f44 + $f45;

        $d6 = (double) $f46;

        $d7 = staticinvoke <java.lang.Math: double atan2(double,double)>($d5, $d6);

        $f47 = (float) $d7;

        r0[2] = $f47;

        return;
    }

    private static int getDelay(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        goto label5;

     label1:
        i0 = 200000;

        goto label5;

     label2:
        i0 = 66667;

        goto label5;

     label3:
        i0 = 20000;

        goto label5;

     label4:
        i0 = 0;

     label5:
        return i0;
    }

    public static float getInclination(float[])
    {
        float[] r0;
        int $i0;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @parameter0: float[];

        $i0 = lengthof r0;

        if $i0 != 9 goto label1;

        $f3 = r0[5];

        $d4 = (double) $f3;

        $f4 = r0[4];

        $d3 = (double) $f4;

        $d5 = staticinvoke <java.lang.Math: double atan2(double,double)>($d4, $d3);

        $f5 = (float) $d5;

        return $f5;

     label1:
        $f0 = r0[6];

        $d1 = (double) $f0;

        $f1 = r0[5];

        $d0 = (double) $f1;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $f2 = (float) $d2;

        return $f2;
    }

    private android.hardware.LegacySensorManager getLegacySensorManager()
    {
        android.hardware.SensorManager r0;
        android.util.SparseArray r1;
        android.hardware.LegacySensorManager $r2, r4, r5;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.SensorManager;

        r1 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager mLegacySensorManager>;

        if $r2 != null goto label2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SensorManager", "This application is using deprecated SensorManager API which will be removed someday.  Please consider switching to the new API.");

        r4 = new android.hardware.LegacySensorManager;

        specialinvoke r4.<android.hardware.LegacySensorManager: void <init>(android.hardware.SensorManager)>(r0);

        r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager mLegacySensorManager> = r4;

     label2:
        r5 = r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager mLegacySensorManager>;

        exitmonitor r1;

     label3:
        return r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static float[] getOrientation(float[], float[])
    {
        float[] r0, r1;
        int $i0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $i0 = lengthof r0;

        if $i0 != 9 goto label1;

        $f10 = r0[1];

        $d9 = (double) $f10;

        $f11 = r0[4];

        $d8 = (double) $f11;

        $d10 = staticinvoke <java.lang.Math: double atan2(double,double)>($d9, $d8);

        $f12 = (float) $d10;

        r1[0] = $f12;

        $f13 = r0[7];

        $f14 = neg $f13;

        $d11 = (double) $f14;

        $d12 = staticinvoke <java.lang.Math: double asin(double)>($d11);

        $f15 = (float) $d12;

        r1[1] = $f15;

        $f16 = r0[6];

        $f17 = neg $f16;

        $d14 = (double) $f17;

        $f18 = r0[8];

        $d13 = (double) $f18;

        $d15 = staticinvoke <java.lang.Math: double atan2(double,double)>($d14, $d13);

        $f19 = (float) $d15;

        r1[2] = $f19;

        goto label2;

     label1:
        $f0 = r0[1];

        $d1 = (double) $f0;

        $f1 = r0[5];

        $d0 = (double) $f1;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $f2 = (float) $d2;

        r1[0] = $f2;

        $f3 = r0[9];

        $f4 = neg $f3;

        $d3 = (double) $f4;

        $d4 = staticinvoke <java.lang.Math: double asin(double)>($d3);

        $f5 = (float) $d4;

        r1[1] = $f5;

        $f6 = r0[8];

        $f7 = neg $f6;

        $d6 = (double) $f7;

        $f8 = r0[10];

        $d5 = (double) $f8;

        $d7 = staticinvoke <java.lang.Math: double atan2(double,double)>($d6, $d5);

        $f9 = (float) $d7;

        r1[2] = $f9;

     label2:
        return r1;
    }

    public static void getQuaternionFromVector(float[], float[])
    {
        float[] r0, r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, f15, $f16, $f17, $f18;
        int $i0;
        byte $b1;
        double $d0, $d1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $i0 = lengthof r1;

        if $i0 < 4 goto label1;

        $f14 = r1[3];

        r0[0] = $f14;

        goto label3;

     label1:
        $f2 = r1[0];

        $f1 = r1[0];

        $f3 = $f2 * $f1;

        $f7 = 1.0F - $f3;

        $f5 = r1[1];

        $f4 = r1[1];

        $f6 = $f5 * $f4;

        $f11 = $f7 - $f6;

        $f9 = r1[2];

        $f8 = r1[2];

        $f10 = $f9 * $f8;

        $f12 = $f11 - $f10;

        r0[0] = $f12;

        f0 = r0[0];

        f15 = 0.0F;

        $b1 = f0 cmpl 0.0F;

        if $b1 <= 0 goto label2;

        $f13 = r0[0];

        $d0 = (double) $f13;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f15 = (float) $d1;

     label2:
        r0[0] = f15;

     label3:
        $f16 = r1[0];

        r0[1] = $f16;

        $f17 = r1[1];

        r0[2] = $f17;

        $f18 = r1[2];

        r0[3] = $f18;

        return;
    }

    public static boolean getRotationMatrix(float[], float[], float[], float[])
    {
        float[] r0, r1, r2, r3;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, f50, f51, f52, f53, f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69;
        byte $b0, $b1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i2, $i3, $i4, $i5;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        r2 := @parameter2: float[];

        r3 := @parameter3: float[];

        f50 = r2[0];

        f51 = r2[1];

        f52 = r2[2];

        $f5 = f50 * f50;

        $f4 = f51 * f51;

        $f7 = $f5 + $f4;

        $f6 = f52 * f52;

        $f8 = $f7 + $f6;

        $b0 = $f8 cmpg 0.96236104F;

        if $b0 >= 0 goto label1;

        return 0;

     label1:
        f53 = r3[0];

        f0 = r3[1];

        f1 = r3[2];

        $f10 = f0 * f52;

        $f9 = f1 * f51;

        f54 = $f10 - $f9;

        $f12 = f1 * f50;

        $f11 = f53 * f52;

        f55 = $f12 - $f11;

        $f14 = f53 * f51;

        $f13 = f0 * f50;

        f56 = $f14 - $f13;

        $f16 = f54 * f54;

        $f15 = f55 * f55;

        $f18 = $f16 + $f15;

        $f17 = f56 * f56;

        $f19 = $f18 + $f17;

        $d0 = (double) $f19;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f57 = (float) $d1;

        $b1 = f57 cmpg 0.1F;

        if $b1 >= 0 goto label2;

        return 0;

     label2:
        f58 = 1.0F / f57;

        f59 = f54 * f58;

        f60 = f55 * f58;

        f61 = f56 * f58;

        $f21 = f50 * f50;

        $f20 = f51 * f51;

        $f23 = $f21 + $f20;

        $f22 = f52 * f52;

        $f24 = $f23 + $f22;

        $d2 = (double) $f24;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $f25 = (float) $d3;

        f62 = 1.0F / $f25;

        f63 = f50 * f62;

        f64 = f51 * f62;

        f65 = f52 * f62;

        $f27 = f64 * f61;

        $f26 = f65 * f60;

        f2 = $f27 - $f26;

        $f29 = f65 * f59;

        $f28 = f63 * f61;

        f3 = $f29 - $f28;

        $f31 = f63 * f60;

        $f30 = f64 * f59;

        f66 = $f31 - $f30;

        if r0 == null goto label4;

        $i4 = lengthof r0;

        if $i4 != 9 goto label3;

        r0[0] = f59;

        r0[1] = f60;

        r0[2] = f61;

        r0[3] = f2;

        r0[4] = f3;

        r0[5] = f66;

        r0[6] = f63;

        r0[7] = f64;

        r0[8] = f65;

        goto label4;

     label3:
        $i5 = lengthof r0;

        if $i5 != 16 goto label4;

        r0[0] = f59;

        r0[1] = f60;

        r0[2] = f61;

        r0[3] = 0.0F;

        r0[4] = f2;

        r0[5] = f3;

        r0[6] = f66;

        r0[7] = 0.0F;

        r0[8] = f63;

        r0[9] = f64;

        r0[10] = f65;

        r0[11] = 0.0F;

        r0[12] = 0.0F;

        r0[13] = 0.0F;

        r0[14] = 0.0F;

        r0[15] = 1.0F;

        goto label4;

     label4:
        if r1 == null goto label6;

        $f33 = f53 * f53;

        $f32 = f0 * f0;

        $f35 = $f33 + $f32;

        $f34 = f1 * f1;

        $f36 = $f35 + $f34;

        $d4 = (double) $f36;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $f37 = (float) $d5;

        f67 = 1.0F / $f37;

        $f39 = f53 * f2;

        $f38 = f0 * f3;

        $f41 = $f39 + $f38;

        $f40 = f1 * f66;

        $f42 = $f41 + $f40;

        f68 = $f42 * f67;

        $f44 = f53 * f63;

        $f43 = f0 * f64;

        $f46 = $f44 + $f43;

        $f45 = f1 * f65;

        $f47 = $f46 + $f45;

        f69 = $f47 * f67;

        $i2 = lengthof r1;

        if $i2 != 9 goto label5;

        r1[0] = 1.0F;

        r1[1] = 0.0F;

        r1[2] = 0.0F;

        r1[3] = 0.0F;

        r1[4] = f68;

        r1[5] = f69;

        r1[6] = 0.0F;

        $f49 = neg f69;

        r1[7] = $f49;

        r1[8] = f68;

        goto label6;

     label5:
        $i3 = lengthof r1;

        if $i3 != 16 goto label6;

        r1[0] = 1.0F;

        r1[1] = 0.0F;

        r1[2] = 0.0F;

        r1[4] = 0.0F;

        r1[5] = f68;

        r1[6] = f69;

        r1[8] = 0.0F;

        $f48 = neg f69;

        r1[9] = $f48;

        r1[10] = f68;

        r1[14] = 0.0F;

        r1[13] = 0.0F;

        r1[12] = 0.0F;

        r1[11] = 0.0F;

        r1[7] = 0.0F;

        r1[3] = 0.0F;

        r1[15] = 1.0F;

        goto label6;

     label6:
        return 1;
    }

    public static void getRotationMatrixFromVector(float[], float[])
    {
        float[] r0, r1;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, f38, f39, f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, f49, $f50, f51;
        int $i0, $i2, $i3;
        byte $b1;
        double $d0, $d1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        f0 = r1[0];

        f38 = r1[1];

        f1 = r1[2];

        $i0 = lengthof r1;

        if $i0 < 4 goto label1;

        f39 = r1[3];

        goto label3;

     label1:
        $f9 = f0 * f0;

        $f11 = 1.0F - $f9;

        $f10 = f38 * f38;

        $f13 = $f11 - $f10;

        $f12 = f1 * f1;

        f40 = $f13 - $f12;

        $b1 = f40 cmpl 0.0F;

        if $b1 <= 0 goto label2;

        $d0 = (double) f40;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f39 = (float) $d1;

        goto label3;

     label2:
        f39 = 0.0F;

     label3:
        $f41 = f0 * 2.0F;

        f2 = $f41 * f0;

        $f42 = f38 * 2.0F;

        f3 = $f42 * f38;

        $f43 = f1 * 2.0F;

        f4 = $f43 * f1;

        $f44 = f0 * 2.0F;

        f5 = $f44 * f38;

        $f45 = f1 * 2.0F;

        f6 = $f45 * f39;

        $f46 = f0 * 2.0F;

        f7 = $f46 * f1;

        $f47 = f38 * 2.0F;

        f8 = $f47 * f39;

        $f48 = f38 * 2.0F;

        f49 = $f48 * f1;

        $f50 = 2.0F * f0;

        f51 = $f50 * f39;

        $i3 = lengthof r0;

        if $i3 != 9 goto label4;

        $f26 = 1.0F - f3;

        $f27 = $f26 - f4;

        r0[0] = $f27;

        $f28 = f5 - f6;

        r0[1] = $f28;

        $f29 = f7 + f8;

        r0[2] = $f29;

        $f30 = f5 + f6;

        r0[3] = $f30;

        $f31 = 1.0F - f2;

        $f32 = $f31 - f4;

        r0[4] = $f32;

        $f33 = f49 - f51;

        r0[5] = $f33;

        $f34 = f7 - f8;

        r0[6] = $f34;

        $f35 = f49 + f51;

        r0[7] = $f35;

        $f36 = 1.0F - f2;

        $f37 = $f36 - f3;

        r0[8] = $f37;

        goto label5;

     label4:
        $i2 = lengthof r0;

        if $i2 != 16 goto label5;

        $f14 = 1.0F - f3;

        $f15 = $f14 - f4;

        r0[0] = $f15;

        $f16 = f5 - f6;

        r0[1] = $f16;

        $f17 = f7 + f8;

        r0[2] = $f17;

        r0[3] = 0.0F;

        $f18 = f5 + f6;

        r0[4] = $f18;

        $f19 = 1.0F - f2;

        $f20 = $f19 - f4;

        r0[5] = $f20;

        $f21 = f49 - f51;

        r0[6] = $f21;

        r0[7] = 0.0F;

        $f22 = f7 - f8;

        r0[8] = $f22;

        $f23 = f49 + f51;

        r0[9] = $f23;

        $f24 = 1.0F - f2;

        $f25 = $f24 - f3;

        r0[10] = $f25;

        r0[11] = 0.0F;

        r0[14] = 0.0F;

        r0[13] = 0.0F;

        r0[12] = 0.0F;

        r0[15] = 1.0F;

     label5:
        return;
    }

    public static boolean remapCoordinateSystem(float[], int, int, float[])
    {
        float[] r0, r1, r3;
        boolean $z0, $z1;
        float $f0;
        java.lang.Throwable $r2;
        int i0, i1, i2, i3;

        r3 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: float[];

        if r3 != r0 goto label11;

        r1 = <android.hardware.SensorManager: float[] sTempMatrix>;

        entermonitor r1;

     label01:
        $z1 = staticinvoke <android.hardware.SensorManager: boolean remapCoordinateSystemImpl(float[],int,int,float[])>(r3, i0, i1, r1);

        if $z1 == 0 goto label06;

        i2 = lengthof r0;

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label04;

        $f0 = r1[i3];

        r0[i3] = $f0;

        i3 = i3 + 1;

        goto label03;

     label04:
        exitmonitor r1;

     label05:
        return 1;

     label06:
        exitmonitor r1;

     label07:
        goto label11;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

     label11:
        $z0 = staticinvoke <android.hardware.SensorManager: boolean remapCoordinateSystemImpl(float[],int,int,float[])>(r3, i0, i1, r0);

        return $z0;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private static boolean remapCoordinateSystemImpl(float[], int, int, float[])
    {
        float[] r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33, i35, i36;
        float $f0, $f1, $f2, f3, f4, f5;
        boolean z0, z1, z2;
        byte b34;

        r0 := @parameter0: float[];

        i29 := @parameter1: int;

        i30 := @parameter2: int;

        r1 := @parameter3: float[];

        i0 = lengthof r1;

        i31 = lengthof r0;

        z0 = 0;

        if i31 == i0 goto label01;

        return 0;

     label01:
        $i6 = i29 & 124;

        if $i6 != 0 goto label28;

        $i7 = i30 & 124;

        if $i7 == 0 goto label02;

        goto label28;

     label02:
        $i8 = i29 & 3;

        if $i8 == 0 goto label27;

        $i9 = i30 & 3;

        if $i9 != 0 goto label03;

        goto label27;

     label03:
        $i11 = i29 & 3;

        $i10 = i30 & 3;

        if $i11 != $i10 goto label04;

        return 0;

     label04:
        i32 = i29 ^ i30;

        $i12 = i29 & 3;

        i1 = $i12 - 1;

        $i13 = i30 & 3;

        i2 = $i13 - 1;

        $i14 = i32 & 3;

        i3 = $i14 - 1;

        i33 = i32;

        $i15 = i3 + 1;

        $i16 = $i15 % 3;

        $i20 = i1 ^ $i16;

        $i17 = i3 + 2;

        $i18 = $i17 % 3;

        $i19 = i2 ^ $i18;

        $i21 = $i20 | $i19;

        if $i21 == 0 goto label05;

        i33 = i32 ^ 128;

     label05:
        if i29 < 128 goto label06;

        z1 = 1;

        goto label07;

     label06:
        z1 = 0;

     label07:
        if i30 < 128 goto label08;

        z2 = 1;

        goto label09;

     label08:
        z2 = 0;

     label09:
        if i33 < 128 goto label10;

        z0 = 1;

     label10:
        if i0 != 16 goto label11;

        b34 = 4;

        goto label12;

     label11:
        b34 = 3;

     label12:
        i35 = 0;

     label13:
        if i35 >= 3 goto label25;

        i4 = i35 * b34;

        i36 = 0;

     label14:
        if i36 >= 3 goto label24;

        if i1 != i36 goto label17;

        if z1 == 0 goto label15;

        $i28 = i4 + 0;

        $f2 = r0[$i28];

        f3 = neg $f2;

        goto label16;

     label15:
        $i26 = i4 + 0;

        f3 = r0[$i26];

     label16:
        $i27 = i4 + i36;

        r1[$i27] = f3;

     label17:
        if i2 != i36 goto label20;

        if z2 == 0 goto label18;

        $i25 = i4 + 1;

        $f1 = r0[$i25];

        f4 = neg $f1;

        goto label19;

     label18:
        $i23 = i4 + 1;

        f4 = r0[$i23];

     label19:
        $i24 = i4 + i36;

        r1[$i24] = f4;

     label20:
        if i3 != i36 goto label23;

        i5 = i4 + 2;

        if z0 == 0 goto label21;

        $f0 = r0[i5];

        f5 = neg $f0;

        goto label22;

     label21:
        f5 = r0[i5];

     label22:
        $i22 = i4 + i36;

        r1[$i22] = f5;

     label23:
        i36 = i36 + 1;

        goto label14;

     label24:
        i35 = i35 + 1;

        goto label13;

     label25:
        if i0 != 16 goto label26;

        r1[14] = 0.0F;

        r1[13] = 0.0F;

        r1[12] = 0.0F;

        r1[11] = 0.0F;

        r1[7] = 0.0F;

        r1[3] = 0.0F;

        r1[15] = 1.0F;

     label26:
        return 1;

     label27:
        return 0;

     label28:
        return 0;
    }

    public boolean cancelTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)
    {
        android.hardware.SensorManager r0;
        android.hardware.TriggerEventListener r1;
        android.hardware.Sensor r2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor,boolean)>(r1, r2, 1);

        return $z0;
    }

    protected abstract boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor, boolean);

    protected abstract int configureDirectChannelImpl(android.hardware.SensorDirectChannel, android.hardware.Sensor, int);

    public android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)
    {
        android.hardware.SensorManager r0;
        android.hardware.HardwareBuffer r1;
        android.hardware.SensorDirectChannel $r2;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.HardwareBuffer;

        $r2 = virtualinvoke r0.<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannelImpl(android.os.MemoryFile,android.hardware.HardwareBuffer)>(null, r1);

        return $r2;
    }

    public android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)
    {
        android.hardware.SensorManager r0;
        android.os.MemoryFile r1;
        android.hardware.SensorDirectChannel $r2;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.os.MemoryFile;

        $r2 = virtualinvoke r0.<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannelImpl(android.os.MemoryFile,android.hardware.HardwareBuffer)>(r1, null);

        return $r2;
    }

    protected abstract android.hardware.SensorDirectChannel createDirectChannelImpl(android.os.MemoryFile, android.hardware.HardwareBuffer);

    void destroyDirectChannel(android.hardware.SensorDirectChannel)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorDirectChannel r1;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorDirectChannel;

        virtualinvoke r0.<android.hardware.SensorManager: void destroyDirectChannelImpl(android.hardware.SensorDirectChannel)>(r1);

        return;
    }

    protected abstract void destroyDirectChannelImpl(android.hardware.SensorDirectChannel);

    public boolean flush(android.hardware.SensorEventListener)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean flushImpl(android.hardware.SensorEventListener)>(r1);

        return $z0;
    }

    protected abstract boolean flushImpl(android.hardware.SensorEventListener);

    public android.hardware.Sensor getDefaultSensor(int)
    {
        android.hardware.SensorManager r0;
        int i0;
        android.hardware.Sensor r1;
        java.lang.Object $r2;
        boolean $z0, z1, $z2;
        java.util.List r3;
        java.util.Iterator r4;

        r0 := @this: android.hardware.SensorManager;

        i0 := @parameter0: int;

        r3 = virtualinvoke r0.<android.hardware.SensorManager: java.util.List getSensorList(int)>(i0);

        z1 = 0;

        if i0 == 8 goto label1;

        if i0 == 17 goto label1;

        if i0 == 22 goto label1;

        if i0 == 23 goto label1;

        if i0 == 24 goto label1;

        if i0 == 25 goto label1;

        if i0 == 26 goto label1;

        if i0 == 32 goto label1;

        if i0 != 36 goto label2;

     label1:
        z1 = 1;

     label2:
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r2 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.hardware.Sensor) $r2;

        $z0 = virtualinvoke r1.<android.hardware.Sensor: boolean isWakeUpSensor()>();

        if $z0 != z1 goto label4;

        return r1;

     label4:
        goto label3;

     label5:
        return null;
    }

    public android.hardware.Sensor getDefaultSensor(int, boolean)
    {
        android.hardware.SensorManager r0;
        int i0;
        boolean z0, $z1, $z2;
        java.util.Iterator r1;
        android.hardware.Sensor r2;
        java.util.List $r3;
        java.lang.Object $r4;

        r0 := @this: android.hardware.SensorManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = virtualinvoke r0.<android.hardware.SensorManager: java.util.List getSensorList(int)>(i0);

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.Sensor) $r4;

        $z2 = virtualinvoke r2.<android.hardware.Sensor: boolean isWakeUpSensor()>();

        if $z2 != z0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.util.List getDynamicSensorList(int)
    {
        android.hardware.SensorManager r0;
        int i0, $i1;
        android.hardware.Sensor r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.util.List $r4, $r6, r7;
        java.lang.Object $r5;
        java.util.Iterator r8;

        r0 := @this: android.hardware.SensorManager;

        i0 := @parameter0: int;

        r7 = virtualinvoke r0.<android.hardware.SensorManager: java.util.List getFullDynamicSensorList()>();

        if i0 != -1 goto label1;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r7);

        return $r6;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.Sensor) $r5;

        $i1 = virtualinvoke r2.<android.hardware.Sensor: int getType()>();

        if $i1 != i0 goto label3;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label3:
        goto label2;

     label4:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    protected abstract java.util.List getFullDynamicSensorList();

    protected abstract java.util.List getFullSensorList();

    public java.util.List getSensorList(int)
    {
        android.hardware.SensorManager r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2, $r4;
        java.lang.Object $r3, $r5, r7;
        boolean $z0;
        java.lang.Throwable $r6;
        java.util.List r8, r9, r15, r16;
        java.util.Iterator r11;
        android.hardware.Sensor r12;
        java.util.ArrayList r14;

        r0 := @this: android.hardware.SensorManager;

        i0 := @parameter0: int;

        r7 = virtualinvoke r0.<android.hardware.SensorManager: java.util.List getFullSensorList()>();

        r1 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r8 = (java.util.List) $r3;

     label02:
        r9 = r8;

        if r8 != null goto label09;

        if i0 != -1 goto label03;

        goto label08;

     label03:
        r14 = new java.util.ArrayList;

        specialinvoke r14.<java.util.ArrayList: void <init>()>();

     label04:
        r15 = (java.util.List) r7;

        r11 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label05:
        r7 = r14;

     label06:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r5 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.hardware.Sensor) $r5;

        $i1 = virtualinvoke r12.<android.hardware.Sensor: int getType()>();

        if $i1 != i0 goto label07;

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r12);

     label07:
        goto label05;

     label08:
        r16 = (java.util.List) r7;

        r9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r16);

        $r4 = r0.<android.hardware.SensorManager: android.util.SparseArray mSensorListByType>;

        virtualinvoke $r4.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9);

     label09:
        exitmonitor r1;

     label10:
        return r9;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public int getSensors()
    {
        android.hardware.SensorManager r0;
        android.hardware.LegacySensorManager $r1;
        int $i0;

        r0 := @this: android.hardware.SensorManager;

        $r1 = specialinvoke r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager getLegacySensorManager()>();

        $i0 = virtualinvoke $r1.<android.hardware.LegacySensorManager: int getSensors()>();

        return $i0;
    }

    public boolean initDataInjection(boolean)
    {
        android.hardware.SensorManager r0;
        boolean z0, $z1;

        r0 := @this: android.hardware.SensorManager;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.hardware.SensorManager: boolean initDataInjectionImpl(boolean)>(z0);

        return $z1;
    }

    protected abstract boolean initDataInjectionImpl(boolean);

    public boolean injectSensorData(android.hardware.Sensor, float[], int, long)
    {
        android.hardware.SensorManager r0;
        android.hardware.Sensor r1;
        float[] r2;
        int i0, i2, $i3, $i4;
        long l1;
        java.lang.IllegalArgumentException $r4, $r5, $r6, $r15, $r17, $r18;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r16;
        byte $b5;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.Sensor;

        r2 := @parameter1: float[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        if r1 == null goto label6;

        $z0 = virtualinvoke r1.<android.hardware.Sensor: boolean isDataInjectionSupported()>();

        if $z0 == 0 goto label5;

        if r2 == null goto label4;

        i2 = staticinvoke <android.hardware.Sensor: int getMaxLengthValuesArray(android.hardware.Sensor,int)>(r1, 23);

        $i3 = lengthof r2;

        if $i3 != i2 goto label3;

        if i0 < -1 goto label2;

        if i0 > 3 goto label2;

        $b5 = l1 cmp 0L;

        if $b5 <= 0 goto label1;

        $z1 = virtualinvoke r0.<android.hardware.SensorManager: boolean injectSensorDataImpl(android.hardware.Sensor,float[],int,long)>(r1, r2, i0, l1);

        return $z1;

     label1:
        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative or zero sensor timestamp");

        throw $r18;

     label2:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid sensor accuracy");

        throw $r17;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong number of values for sensor ");

        $r9 = virtualinvoke r1.<android.hardware.Sensor: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual=");

        $i4 = lengthof r2;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sensor data cannot be null");

        throw $r6;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sensor does not support data injection");

        throw $r5;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sensor cannot be null");

        throw $r4;
    }

    protected abstract boolean injectSensorDataImpl(android.hardware.Sensor, float[], int, long);

    public boolean isDynamicSensorDiscoverySupported()
    {
        android.hardware.SensorManager r0;
        java.util.List $r1;
        int $i0;
        boolean z0;

        r0 := @this: android.hardware.SensorManager;

        $r1 = virtualinvoke r0.<android.hardware.SensorManager: java.util.List getSensorList(int)>(32);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorManager$DynamicSensorCallback r1;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorManager$DynamicSensorCallback;

        virtualinvoke r0.<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>(r1, null);

        return;
    }

    public void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback, android.os.Handler)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorManager$DynamicSensorCallback r1;
        android.os.Handler r2;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorManager$DynamicSensorCallback;

        r2 := @parameter1: android.os.Handler;

        virtualinvoke r0.<android.hardware.SensorManager: void registerDynamicSensorCallbackImpl(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>(r1, r2);

        return;
    }

    protected abstract void registerDynamicSensorCallbackImpl(android.hardware.SensorManager$DynamicSensorCallback, android.os.Handler);

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>(r1, r2, i0, null);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.hardware.SensorManager: int getDelay(int)>(i0);

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>(r1, r2, $i2, null, i1, 0);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int, android.os.Handler)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0, i1, $i2;
        android.os.Handler r3;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.Handler;

        $i2 = staticinvoke <android.hardware.SensorManager: int getDelay(int)>(i0);

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>(r1, r2, $i2, r3, i1, 0);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0, $i1;
        android.os.Handler r3;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.Handler;

        $i1 = staticinvoke <android.hardware.SensorManager: int getDelay(int)>(i0);

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>(r1, r2, $i1, r3, 0, 0);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorListener, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;
        int i0;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>(r1, i0, 3);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorListener, int, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;
        int i0, i1;
        android.hardware.LegacySensorManager $r2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager getLegacySensorManager()>();

        $z0 = virtualinvoke $r2.<android.hardware.LegacySensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>(r1, i0, i1);

        return $z0;
    }

    protected abstract boolean registerListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler, int, int);

    public boolean requestTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)
    {
        android.hardware.SensorManager r0;
        android.hardware.TriggerEventListener r1;
        android.hardware.Sensor r2;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor)>(r1, r2);

        return $z0;
    }

    protected abstract boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor);

    public boolean setOperationParameter(android.hardware.SensorAdditionalInfo)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorAdditionalInfo r1;
        boolean $z0;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorAdditionalInfo;

        $z0 = virtualinvoke r0.<android.hardware.SensorManager: boolean setOperationParameterImpl(android.hardware.SensorAdditionalInfo)>(r1);

        return $z0;
    }

    protected abstract boolean setOperationParameterImpl(android.hardware.SensorAdditionalInfo);

    public void unregisterDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorManager$DynamicSensorCallback r1;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorManager$DynamicSensorCallback;

        virtualinvoke r0.<android.hardware.SensorManager: void unregisterDynamicSensorCallbackImpl(android.hardware.SensorManager$DynamicSensorCallback)>(r1);

        return;
    }

    protected abstract void unregisterDynamicSensorCallbackImpl(android.hardware.SensorManager$DynamicSensorCallback);

    public void unregisterListener(android.hardware.SensorEventListener)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.hardware.SensorManager: void unregisterListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor)>(r1, null);

        return;
    }

    public void unregisterListener(android.hardware.SensorEventListener, android.hardware.Sensor)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        if r1 == null goto label2;

        if r2 != null goto label1;

        goto label2;

     label1:
        virtualinvoke r0.<android.hardware.SensorManager: void unregisterListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor)>(r1, r2);

        return;

     label2:
        return;
    }

    public void unregisterListener(android.hardware.SensorListener)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        virtualinvoke r0.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>(r1, 255);

        return;
    }

    public void unregisterListener(android.hardware.SensorListener, int)
    {
        android.hardware.SensorManager r0;
        android.hardware.SensorListener r1;
        int i0;
        android.hardware.LegacySensorManager $r2;

        r0 := @this: android.hardware.SensorManager;

        r1 := @parameter0: android.hardware.SensorListener;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<android.hardware.SensorManager: android.hardware.LegacySensorManager getLegacySensorManager()>();

        virtualinvoke $r2.<android.hardware.LegacySensorManager: void unregisterListener(android.hardware.SensorListener,int)>(r1, i0);

        return;
    }

    protected abstract void unregisterListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor);
}
