public final class android.hardware.SensorPrivacyManager extends java.lang.Object
{
    private static android.hardware.SensorPrivacyManager sInstance;
    private static final java.lang.Object sInstanceLock;
    private final android.content.Context mContext;
    private final android.util.ArrayMap mListeners;
    private final android.hardware.ISensorPrivacyManager mService;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.hardware.SensorPrivacyManager: java.lang.Object sInstanceLock> = $r0;

        return;
    }

    private void <init>(android.content.Context, android.hardware.ISensorPrivacyManager)
    {
        android.hardware.SensorPrivacyManager r0;
        android.content.Context r1;
        android.hardware.ISensorPrivacyManager r2;
        android.util.ArrayMap $r3;

        r0 := @this: android.hardware.SensorPrivacyManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.ISensorPrivacyManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.SensorPrivacyManager: android.content.Context mContext> = r1;

        r0.<android.hardware.SensorPrivacyManager: android.hardware.ISensorPrivacyManager mService> = r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.SensorPrivacyManager: android.util.ArrayMap mListeners> = $r3;

        return;
    }

    public static android.hardware.SensorPrivacyManager getInstance(android.content.Context)
    {
        java.lang.Object r0;
        android.hardware.ISensorPrivacyManager r1;
        android.os.IBinder $r2;
        android.os.ServiceManager$ServiceNotFoundException $r3;
        java.lang.Throwable $r4;
        android.content.Context r5;
        android.hardware.SensorPrivacyManager r6, r7, r10;
        java.lang.IllegalStateException r9;

        r5 := @parameter0: android.content.Context;

        r0 = <android.hardware.SensorPrivacyManager: java.lang.Object sInstanceLock>;

        entermonitor r0;

     label01:
        r6 = <android.hardware.SensorPrivacyManager: android.hardware.SensorPrivacyManager sInstance>;

     label02:
        if r6 != null goto label07;

     label03:
        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("sensor_privacy");

        r1 = staticinvoke <android.hardware.ISensorPrivacyManager$Stub: android.hardware.ISensorPrivacyManager asInterface(android.os.IBinder)>($r2);

        r7 = new android.hardware.SensorPrivacyManager;

        specialinvoke r7.<android.hardware.SensorPrivacyManager: void <init>(android.content.Context,android.hardware.ISensorPrivacyManager)>(r5, r1);

        <android.hardware.SensorPrivacyManager: android.hardware.SensorPrivacyManager sInstance> = r7;

     label04:
        goto label07;

     label05:
        $r3 := @caughtexception;

     label06:
        r9 = new java.lang.IllegalStateException;

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw r9;

     label07:
        r10 = <android.hardware.SensorPrivacyManager: android.hardware.SensorPrivacyManager sInstance>;

        exitmonitor r0;

     label08:
        return r10;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.ServiceManager$ServiceNotFoundException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void addSensorPrivacyListener(android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)
    {
        android.hardware.SensorPrivacyManager r0;
        android.util.ArrayMap r1, $r3, $r6;
        android.hardware.ISensorPrivacyListener r2, r12;
        java.lang.Object $r4;
        android.hardware.ISensorPrivacyManager $r5;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener r11;
        android.hardware.SensorPrivacyManager$1 r15;

        r0 := @this: android.hardware.SensorPrivacyManager;

        r11 := @parameter0: android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener;

        r1 = r0.<android.hardware.SensorPrivacyManager: android.util.ArrayMap mListeners>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.SensorPrivacyManager: android.util.ArrayMap mListeners>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r2 = (android.hardware.ISensorPrivacyListener) $r4;

     label02:
        r12 = r2;

        if r2 != null goto label05;

     label03:
        r15 = new android.hardware.SensorPrivacyManager$1;

        r12 = r15;

        specialinvoke r15.<android.hardware.SensorPrivacyManager$1: void <init>(android.hardware.SensorPrivacyManager,android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)>(r0, r11);

     label04:
        $r6 = r0.<android.hardware.SensorPrivacyManager: android.util.ArrayMap mListeners>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r15);

     label05:
        $r5 = r0.<android.hardware.SensorPrivacyManager: android.hardware.ISensorPrivacyManager mService>;

        interfaceinvoke $r5.<android.hardware.ISensorPrivacyManager: void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>(r12);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean isSensorPrivacyEnabled()
    {
        android.hardware.SensorPrivacyManager r0;
        boolean z0;
        android.hardware.ISensorPrivacyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.SensorPrivacyManager;

     label1:
        $r2 = r0.<android.hardware.SensorPrivacyManager: android.hardware.ISensorPrivacyManager mService>;

        z0 = interfaceinvoke $r2.<android.hardware.ISensorPrivacyManager: boolean isSensorPrivacyEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeSensorPrivacyListener(android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)
    {
        android.hardware.SensorPrivacyManager r0;
        android.util.ArrayMap r1, $r2, $r4;
        java.lang.Object $r3;
        android.hardware.ISensorPrivacyManager $r6;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener r10;
        android.hardware.ISensorPrivacyListener r11;

        r0 := @this: android.hardware.SensorPrivacyManager;

        r10 := @parameter0: android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener;

        r1 = r0.<android.hardware.SensorPrivacyManager: android.util.ArrayMap mListeners>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.hardware.SensorPrivacyManager: android.util.ArrayMap mListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (android.hardware.ISensorPrivacyListener) $r3;

     label02:
        if r11 == null goto label08;

     label03:
        $r4 = r0.<android.hardware.SensorPrivacyManager: android.util.ArrayMap mListeners>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r11);

     label04:
        $r6 = r0.<android.hardware.SensorPrivacyManager: android.hardware.ISensorPrivacyManager mService>;

        interfaceinvoke $r6.<android.hardware.ISensorPrivacyManager: void removeSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>(r11);

     label05:
        goto label08;

     label06:
        $r8 := @caughtexception;

     label07:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setSensorPrivacy(boolean)
    {
        android.hardware.SensorPrivacyManager r0;
        boolean z0;
        android.hardware.ISensorPrivacyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.SensorPrivacyManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.hardware.SensorPrivacyManager: android.hardware.ISensorPrivacyManager mService>;

        interfaceinvoke $r2.<android.hardware.ISensorPrivacyManager: void setSensorPrivacy(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
