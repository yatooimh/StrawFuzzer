abstract class android.hardware.SystemSensorManager$BaseEventQueue extends java.lang.Object
{
    protected static final int OPERATING_MODE_DATA_INJECTION;
    protected static final int OPERATING_MODE_NORMAL;
    private final android.util.SparseBooleanArray mActiveSensors;
    private final dalvik.system.CloseGuard mCloseGuard;
    protected final android.hardware.SystemSensorManager mManager;
    private long mNativeSensorEventQueue;
    protected final android.util.SparseIntArray mSensorAccuracies;

    void <init>(android.os.Looper, android.hardware.SystemSensorManager, int, java.lang.String)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.os.Looper r1;
        android.hardware.SystemSensorManager r2;
        int i0;
        java.lang.String r3, $r10, r12;
        android.util.SparseBooleanArray $r4;
        android.util.SparseIntArray $r5;
        dalvik.system.CloseGuard $r6, $r11;
        long $l1, $l2;
        java.lang.ref.WeakReference $r7;
        android.os.MessageQueue $r8;
        android.content.Context $r9;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.hardware.SystemSensorManager;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.SparseBooleanArray;

        specialinvoke $r4.<android.util.SparseBooleanArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors> = $r4;

        $r5 = new android.util.SparseIntArray;

        specialinvoke $r5.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseIntArray mSensorAccuracies> = $r5;

        $r6 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard> = $r6;

        r12 = r3;

        if r3 != null goto label1;

        r12 = "";

     label1:
        $l1 = staticinvoke <android.hardware.SystemSensorManager: long access$200(android.hardware.SystemSensorManager)>(r2);

        $r7 = new java.lang.ref.WeakReference;

        specialinvoke $r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r8 = virtualinvoke r1.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $r9 = staticinvoke <android.hardware.SystemSensorManager: android.content.Context access$300(android.hardware.SystemSensorManager)>(r2);

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.String getOpPackageName()>();

        $l2 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: long nativeInitBaseEventQueue(long,java.lang.ref.WeakReference,android.os.MessageQueue,java.lang.String,int,java.lang.String)>($l1, $r7, $r8, r12, i0, $r10);

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: long mNativeSensorEventQueue> = $l2;

        $r11 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r11.<dalvik.system.CloseGuard: void open(java.lang.String)>("dispose");

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.hardware.SystemSensorManager mManager> = r2;

        return;
    }

    private int disableSensor(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        long l0;
        byte $b1;
        int $i2, $i3;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        l0 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: long mNativeSensorEventQueue>;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label2;

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $i3 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: int nativeDisableSensor(long,int)>(l0, $i2);

        return $i3;

     label1:
        throw null;

     label2:
        throw null;
    }

    private void dispose(boolean)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        boolean z0;
        dalvik.system.CloseGuard r1, $r2;
        long l0;
        byte $b1;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        z0 := @parameter0: boolean;

        r1 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard>;

        if r1 == null goto label2;

        if z0 == 0 goto label1;

        virtualinvoke r1.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

     label2:
        l0 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: long mNativeSensorEventQueue>;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label3;

        staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: void nativeDestroySensorEventQueue(long)>(l0);

        r0.<android.hardware.SystemSensorManager$BaseEventQueue: long mNativeSensorEventQueue> = 0L;

     label3:
        return;
    }

    private int enableSensor(android.hardware.Sensor, int, int)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        int i0, i1, $i4, $i5;
        long l2;
        byte $b3;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: long mNativeSensorEventQueue>;

        $b3 = l2 cmp 0L;

        if $b3 == 0 goto label2;

        if r1 == null goto label1;

        $i4 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $i5 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: int nativeEnableSensor(long,int,int,int)>(l2, $i4, i0, i1);

        return $i5;

     label1:
        throw null;

     label2:
        throw null;
    }

    private static native void nativeDestroySensorEventQueue(long);

    private static native int nativeDisableSensor(long, int);

    private static native int nativeEnableSensor(long, int, int, int);

    private static native int nativeFlushSensor(long);

    private static native long nativeInitBaseEventQueue(long, java.lang.ref.WeakReference, android.os.MessageQueue, java.lang.String, int, java.lang.String);

    private static native int nativeInjectSensorData(long, int, float[], int, long);

    public boolean addSensor(android.hardware.Sensor, int, int)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        int i0, i1, i2, $i3, $i4;
        android.util.SparseBooleanArray $r2, $r3;
        boolean $z0;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $z0 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>(i2, 1);

        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void addSensorEvent(android.hardware.Sensor)>(r1);

        $i3 = specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int enableSensor(android.hardware.Sensor,int,int)>(r1, i0, i1);

        if $i3 == 0 goto label3;

        if i1 == 0 goto label2;

        if i1 <= 0 goto label3;

        $i4 = specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int enableSensor(android.hardware.Sensor,int,int)>(r1, i0, 0);

        if $i4 == 0 goto label3;

     label2:
        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: boolean removeSensor(android.hardware.Sensor,boolean)>(r1, 0);

        return 0;

     label3:
        return 1;
    }

    protected abstract void addSensorEvent(android.hardware.Sensor);

    protected void dispatchAdditionalInfoEvent(int, int, int, float[], int[])
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        int i0, i1, i2;
        float[] r1;
        int[] r2;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: float[];

        r2 := @parameter4: int[];

        return;
    }

    protected abstract void dispatchFlushCompleteEvent(int);

    protected abstract void dispatchSensorEvent(int, float[], int, long);

    public void dispose()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void dispose(boolean)>(0);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        java.lang.Throwable $r2;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

     label1:
        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int flush()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        long l0;
        byte $b1;
        int $i2;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        l0 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: long mNativeSensorEventQueue>;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $i2 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: int nativeFlushSensor(long)>(l0);

        return $i2;

     label1:
        throw null;
    }

    public boolean hasSensors()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.util.SparseBooleanArray r1;
        int $i0;
        boolean z0;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        z0 = 1;

        $i0 = virtualinvoke r1.<android.util.SparseBooleanArray: int indexOfValue(boolean)>(1);

        if $i0 < 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected int injectSensorDataBase(int, float[], int, long)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        int i0, i1, $i4;
        float[] r1;
        long l2, $l3;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $l3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: long mNativeSensorEventQueue>;

        $i4 = staticinvoke <android.hardware.SystemSensorManager$BaseEventQueue: int nativeInjectSensorData(long,int,float[],int,long)>($l3, i0, r1, i1, l2);

        return $i4;
    }

    public boolean removeAllSensors()
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        int i0, $i1, i3;
        android.hardware.Sensor r1;
        android.util.SparseBooleanArray $r2, $r3, $r4, $r9;
        boolean $z0;
        android.hardware.SystemSensorManager $r5;
        java.util.HashMap $r6;
        java.lang.Integer $r7;
        java.lang.Object $r8;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        i3 = 0;

     label1:
        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $i1 = virtualinvoke $r2.<android.util.SparseBooleanArray: int size()>();

        if i3 >= $i1 goto label3;

        $r3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $z0 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean valueAt(int)>(i3);

        if $z0 != 1 goto label2;

        $r4 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        i0 = virtualinvoke $r4.<android.util.SparseBooleanArray: int keyAt(int)>(i3);

        $r5 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.hardware.SystemSensorManager mManager>;

        $r6 = staticinvoke <android.hardware.SystemSensorManager: java.util.HashMap access$400(android.hardware.SystemSensorManager)>($r5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        r1 = (android.hardware.Sensor) $r8;

        if r1 == null goto label2;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int disableSensor(android.hardware.Sensor)>(r1);

        $r9 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        virtualinvoke $r9.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 0);

        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void removeSensorEvent(android.hardware.Sensor)>(r1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean removeSensor(android.hardware.Sensor, boolean)
    {
        android.hardware.SystemSensorManager$BaseEventQueue r0;
        android.hardware.Sensor r1;
        boolean z0, $z1;
        int i0, $i1;
        android.util.SparseBooleanArray $r2, $r3;

        r0 := @this: android.hardware.SystemSensorManager$BaseEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        $r2 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $z1 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z1 == 0 goto label2;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: int disableSensor(android.hardware.Sensor)>(r1);

     label1:
        $r3 = r0.<android.hardware.SystemSensorManager$BaseEventQueue: android.util.SparseBooleanArray mActiveSensors>;

        $i1 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>($i1, 0);

        virtualinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void removeSensorEvent(android.hardware.Sensor)>(r1);

        return 1;

     label2:
        return 0;
    }

    protected abstract void removeSensorEvent(android.hardware.Sensor);

    public static void <clinit>()
    {
        <android.hardware.SystemSensorManager$BaseEventQueue: int OPERATING_MODE_NORMAL> = 0;

        <android.hardware.SystemSensorManager$BaseEventQueue: int OPERATING_MODE_DATA_INJECTION> = 1;

        return;
    }
}
