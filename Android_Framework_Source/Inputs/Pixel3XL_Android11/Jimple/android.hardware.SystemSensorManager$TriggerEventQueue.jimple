final class android.hardware.SystemSensorManager$TriggerEventQueue extends android.hardware.SystemSensorManager$BaseEventQueue
{
    private final android.hardware.TriggerEventListener mListener;
    private final android.util.SparseArray mTriggerEvents;

    public void <init>(android.hardware.TriggerEventListener, android.os.Looper, android.hardware.SystemSensorManager, java.lang.String)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        android.hardware.TriggerEventListener r1;
        android.os.Looper r2;
        android.hardware.SystemSensorManager r3;
        java.lang.String r4;
        android.util.SparseArray $r5;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.os.Looper;

        r3 := @parameter2: android.hardware.SystemSensorManager;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void <init>(android.os.Looper,android.hardware.SystemSensorManager,int,java.lang.String)>(r2, r3, 0, r4);

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents> = $r5;

        r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.TriggerEventListener mListener> = r1;

        return;
    }

    public void addSensorEvent(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        android.util.SparseArray r2, $r5;
        android.hardware.TriggerEvent $r3;
        android.hardware.SystemSensorManager $r4;
        int $i0, $i1, $i2;
        java.lang.Throwable $r6;
        android.hardware.Sensor r7;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        r7 := @parameter0: android.hardware.Sensor;

        $r3 = new android.hardware.TriggerEvent;

        $r4 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.SystemSensorManager mManager>;

        $i0 = staticinvoke <android.hardware.SystemSensorManager: int access$500(android.hardware.SystemSensorManager)>($r4);

        $i1 = staticinvoke <android.hardware.Sensor: int getMaxLengthValuesArray(android.hardware.Sensor,int)>(r7, $i0);

        specialinvoke $r3.<android.hardware.TriggerEvent: void <init>(int)>($i1);

        r2 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        entermonitor r2;

     label1:
        $r5 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        $i2 = virtualinvoke r7.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r3);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void dispatchFlushCompleteEvent(int)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        int i0;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        i0 := @parameter0: int;

        return;
    }

    protected void dispatchSensorEvent(int, float[], int, long)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        int i0, i1, $i3;
        long l2;
        android.hardware.Sensor r1;
        android.util.SparseArray r2, $r8;
        android.hardware.TriggerEvent r3;
        android.hardware.SystemSensorManager $r4, $r13;
        java.util.HashMap $r5;
        java.lang.Integer $r6;
        java.lang.Object $r7, $r9;
        float[] $r10, $r11, r20;
        android.hardware.TriggerEventListener $r12, $r14;
        java.lang.StringBuilder $r15;
        java.lang.String $r18;
        java.lang.Throwable $r19;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        i0 := @parameter0: int;

        r20 := @parameter1: float[];

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $r4 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.SystemSensorManager mManager>;

        $r5 = staticinvoke <android.hardware.SystemSensorManager: java.util.HashMap access$400(android.hardware.SystemSensorManager)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r1 = (android.hardware.Sensor) $r7;

        if r1 != null goto label1;

        return;

     label1:
        r2 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        entermonitor r2;

     label2:
        $r8 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (android.hardware.TriggerEvent) $r9;

        exitmonitor r2;

     label3:
        if r3 != null goto label4;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Trigger Event is null for Sensor: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", $r18);

        return;

     label4:
        $r11 = r3.<android.hardware.TriggerEvent: float[] values>;

        $r10 = r3.<android.hardware.TriggerEvent: float[] values>;

        $i3 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r20, 0, $r11, 0, $i3);

        r3.<android.hardware.TriggerEvent: long timestamp> = l2;

        r3.<android.hardware.TriggerEvent: android.hardware.Sensor sensor> = r1;

        $r13 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.SystemSensorManager mManager>;

        $r12 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.TriggerEventListener mListener>;

        virtualinvoke $r13.<android.hardware.SystemSensorManager: boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor,boolean)>($r12, r1, 0);

        $r14 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.TriggerEventListener mListener>;

        virtualinvoke $r14.<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>(r3);

        return;

     label5:
        $r19 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r19;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void removeSensorEvent(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        android.util.SparseArray r1, $r2;
        int $i0;
        java.lang.Throwable $r3;
        android.hardware.Sensor r4;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        r4 := @parameter0: android.hardware.Sensor;

        r1 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        $i0 = virtualinvoke r4.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r2.<android.util.SparseArray: void delete(int)>($i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
