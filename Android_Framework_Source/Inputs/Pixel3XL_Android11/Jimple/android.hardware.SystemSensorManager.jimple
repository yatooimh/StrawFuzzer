public class android.hardware.SystemSensorManager extends android.hardware.SensorManager
{
    private static final boolean DEBUG_DYNAMIC_SENSOR;
    private static final int MAX_LISTENER_COUNT;
    private static final int MIN_DIRECT_CHANNEL_BUFFER_SIZE;
    private static android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue;
    private static final java.lang.Object sLock;
    private static boolean sNativeClassInited;
    private final android.content.Context mContext;
    private android.content.BroadcastReceiver mDynamicSensorBroadcastReceiver;
    private java.util.HashMap mDynamicSensorCallbacks;
    private boolean mDynamicSensorListDirty;
    private java.util.List mFullDynamicSensorsList;
    private final java.util.ArrayList mFullSensorsList;
    private final java.util.HashMap mHandleToSensor;
    private final android.os.Looper mMainLooper;
    private final long mNativeInstance;
    private final java.util.HashMap mSensorListeners;
    private final int mTargetSdkLevel;
    private final java.util.HashMap mTriggerListeners;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.hardware.SystemSensorManager: int MIN_DIRECT_CHANNEL_BUFFER_SIZE> = 104;

        <android.hardware.SystemSensorManager: int MAX_LISTENER_COUNT> = 128;

        <android.hardware.SystemSensorManager: boolean DEBUG_DYNAMIC_SENSOR> = 1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.hardware.SystemSensorManager: java.lang.Object sLock> = $r0;

        <android.hardware.SystemSensorManager: boolean sNativeClassInited> = 0;

        <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue> = null;

        return;
    }

    public void <init>(android.content.Context, android.os.Looper)
    {
        android.hardware.SystemSensorManager r0;
        android.os.Looper r1;
        java.lang.Object r2;
        java.util.ArrayList $r3, $r4, $r11;
        java.util.HashMap $r5, $r6, $r7, $r8, $r12;
        boolean $z0, $z2;
        android.content.pm.ApplicationInfo $r9;
        int $i0, $i2, i3;
        java.lang.String $r10;
        long $l1, $l4;
        java.lang.Integer $r13;
        java.lang.Throwable $r15;
        android.content.Context r16;
        android.hardware.Sensor $r17;

        r0 := @this: android.hardware.SystemSensorManager;

        r16 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Looper;

        specialinvoke r0.<android.hardware.SensorManager: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.ArrayList mFullSensorsList> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.List mFullDynamicSensorsList> = $r4;

        r0.<android.hardware.SystemSensorManager: boolean mDynamicSensorListDirty> = 1;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.HashMap mHandleToSensor> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.HashMap mDynamicSensorCallbacks> = $r8;

        r2 = <android.hardware.SystemSensorManager: java.lang.Object sLock>;

        entermonitor r2;

     label1:
        $z0 = <android.hardware.SystemSensorManager: boolean sNativeClassInited>;

        if $z0 != 0 goto label2;

        <android.hardware.SystemSensorManager: boolean sNativeClassInited> = 1;

        staticinvoke <android.hardware.SystemSensorManager: void nativeClassInit()>();

     label2:
        exitmonitor r2;

     label3:
        r0.<android.hardware.SystemSensorManager: android.os.Looper mMainLooper> = r1;

        $r9 = virtualinvoke r16.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r9.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        r0.<android.hardware.SystemSensorManager: int mTargetSdkLevel> = $i0;

        r0.<android.hardware.SystemSensorManager: android.content.Context mContext> = r16;

        $r10 = virtualinvoke r16.<android.content.Context: java.lang.String getOpPackageName()>();

        $l1 = staticinvoke <android.hardware.SystemSensorManager: long nativeCreate(java.lang.String)>($r10);

        r0.<android.hardware.SystemSensorManager: long mNativeInstance> = $l1;

        i3 = 0;

     label4:
        $r17 = new android.hardware.Sensor;

        specialinvoke $r17.<android.hardware.Sensor: void <init>()>();

        $l4 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        $z2 = staticinvoke <android.hardware.SystemSensorManager: boolean nativeGetSensorAtIndex(long,android.hardware.Sensor,int)>($l4, $r17, i3);

        if $z2 != 0 goto label5;

        return;

     label5:
        $r11 = r0.<android.hardware.SystemSensorManager: java.util.ArrayList mFullSensorsList>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        $r12 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mHandleToSensor>;

        $i2 = virtualinvoke $r17.<android.hardware.Sensor: int getHandle()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r17);

        i3 = i3 + 1;

        goto label4;

     label6:
        $r15 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static boolean access$002(android.hardware.SystemSensorManager, boolean)
    {
        android.hardware.SystemSensorManager r0;
        boolean z0;

        r0 := @parameter0: android.hardware.SystemSensorManager;

        z0 := @parameter1: boolean;

        r0.<android.hardware.SystemSensorManager: boolean mDynamicSensorListDirty> = z0;

        return z0;
    }

    static void access$100(android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager r0;

        r0 := @parameter0: android.hardware.SystemSensorManager;

        specialinvoke r0.<android.hardware.SystemSensorManager: void updateDynamicSensorList()>();

        return;
    }

    static long access$200(android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager r0;
        long $l0;

        r0 := @parameter0: android.hardware.SystemSensorManager;

        $l0 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        return $l0;
    }

    static android.content.Context access$300(android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager r0;
        android.content.Context $r1;

        r0 := @parameter0: android.hardware.SystemSensorManager;

        $r1 = r0.<android.hardware.SystemSensorManager: android.content.Context mContext>;

        return $r1;
    }

    static java.util.HashMap access$400(android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.hardware.SystemSensorManager;

        $r1 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mHandleToSensor>;

        return $r1;
    }

    static int access$500(android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager r0;
        int $i0;

        r0 := @parameter0: android.hardware.SystemSensorManager;

        $i0 = r0.<android.hardware.SystemSensorManager: int mTargetSdkLevel>;

        return $i0;
    }

    private void cleanupSensorConnection(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager r0;
        java.util.HashMap $r1, $r4, $r12, r23, r24, r29, r30;
        int $i0, $i1;
        java.lang.Integer $r2;
        java.util.Set $r5, $r13;
        boolean $z0, $z1;
        java.lang.Object $r6, $r14;
        java.lang.String $r8, $r11, $r16, $r19;
        java.lang.Throwable $r20, $r21;
        android.hardware.Sensor r22;
        java.util.Iterator r25, r31;
        android.hardware.TriggerEventListener r26;
        java.lang.StringBuilder r27, r33;
        android.hardware.SensorEventListener r32;

        r0 := @this: android.hardware.SystemSensorManager;

        r22 := @parameter0: android.hardware.Sensor;

        $r1 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mHandleToSensor>;

        $i0 = virtualinvoke r22.<android.hardware.Sensor: int getHandle()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

        $i1 = virtualinvoke r22.<android.hardware.Sensor: int getReportingMode()>();

        if $i1 != 2 goto label09;

        r23 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        entermonitor r23;

     label01:
        r24 = new java.util.HashMap;

        $r12 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        specialinvoke r24.<java.util.HashMap: void <init>(java.util.Map)>($r12);

        $r13 = virtualinvoke r24.<java.util.HashMap: java.util.Set keySet()>();

        r25 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r14 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (android.hardware.TriggerEventListener) $r14;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removed trigger listener");

        $r16 = virtualinvoke r26.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to sensor disconnection");

        $r19 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SensorManager", $r19);

        virtualinvoke r0.<android.hardware.SystemSensorManager: boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor,boolean)>(r26, r22, 1);

     label03:
        goto label02;

     label04:
        exitmonitor r23;

     label05:
        goto label14;

     label06:
        $r21 := @caughtexception;

     label07:
        exitmonitor r23;

     label08:
        throw $r21;

     label09:
        r29 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        entermonitor r29;

     label10:
        r30 = new java.util.HashMap;

        $r4 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        specialinvoke r30.<java.util.HashMap: void <init>(java.util.Map)>($r4);

        $r5 = virtualinvoke r30.<java.util.HashMap: java.util.Set keySet()>();

        r31 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (android.hardware.SensorEventListener) $r6;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removed event listener");

        $r8 = virtualinvoke r32.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to sensor disconnection");

        $r11 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SensorManager", $r11);

        virtualinvoke r0.<android.hardware.SystemSensorManager: void unregisterListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor)>(r32, r22);

     label12:
        goto label11;

     label13:
        exitmonitor r29;

     label14:
        return;

     label15:
        $r20 := @caughtexception;

     label16:
        exitmonitor r29;

     label17:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private static boolean diffSortedSensorList(java.util.List, java.util.List, java.util.List, java.util.List, java.util.List)
    {
        java.util.List r0, r1, r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        java.lang.Object $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;
        android.hardware.Sensor $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        boolean z4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        r4 := @parameter4: java.util.List;

        z4 = 0;

        i11 = 0;

        i12 = 0;

     label01:
        $i13 = interfaceinvoke r0.<java.util.List: int size()>();

        if i12 >= $i13 goto label04;

        $i8 = interfaceinvoke r1.<java.util.List: int size()>();

        if i11 >= $i8 goto label02;

        $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        $r22 = (android.hardware.Sensor) $r21;

        $i9 = virtualinvoke $r22.<android.hardware.Sensor: int getHandle()>();

        $r23 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        $r24 = (android.hardware.Sensor) $r23;

        $i10 = virtualinvoke $r24.<android.hardware.Sensor: int getHandle()>();

        if $i9 <= $i10 goto label04;

     label02:
        z4 = 1;

        if r4 == null goto label03;

        $r19 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        $r20 = (android.hardware.Sensor) $r19;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r20);

     label03:
        i12 = i12 + 1;

        goto label01;

     label04:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i11 >= $i0 goto label08;

        $i5 = interfaceinvoke r0.<java.util.List: int size()>();

        if i12 >= $i5 goto label05;

        $r15 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        $r16 = (android.hardware.Sensor) $r15;

        $i6 = virtualinvoke $r16.<android.hardware.Sensor: int getHandle()>();

        $r17 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        $r18 = (android.hardware.Sensor) $r17;

        $i7 = virtualinvoke $r18.<android.hardware.Sensor: int getHandle()>();

        if $i6 >= $i7 goto label08;

     label05:
        z4 = 1;

        if r3 == null goto label06;

        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        $r14 = (android.hardware.Sensor) $r13;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r14);

     label06:
        if r2 == null goto label07;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        $r12 = (android.hardware.Sensor) $r11;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

     label07:
        i11 = i11 + 1;

        goto label01;

     label08:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i11 >= $i1 goto label10;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i12 >= $i2 goto label10;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i11);

        $r6 = (android.hardware.Sensor) $r5;

        $i3 = virtualinvoke $r6.<android.hardware.Sensor: int getHandle()>();

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        $r8 = (android.hardware.Sensor) $r7;

        $i4 = virtualinvoke $r8.<android.hardware.Sensor: int getHandle()>();

        if $i3 != $i4 goto label10;

        if r2 == null goto label09;

        $r9 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        $r10 = (android.hardware.Sensor) $r9;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

     label09:
        i11 = i11 + 1;

        i12 = i12 + 1;

        goto label01;

     label10:
        return z4;
    }

    private static native void nativeClassInit();

    private static native int nativeConfigDirectChannel(long, int, int, int);

    private static native long nativeCreate(java.lang.String);

    private static native int nativeCreateDirectChannel(long, long, int, int, android.hardware.HardwareBuffer);

    private static native void nativeDestroyDirectChannel(long, int);

    private static native void nativeGetDynamicSensors(long, java.util.List);

    private static native boolean nativeGetSensorAtIndex(long, android.hardware.Sensor, int);

    private static native boolean nativeIsDataInjectionEnabled(long);

    private static native int nativeSetOperationParameter(long, int, int, float[], int[]);

    private void setupDynamicSensorBroadcastReceiver()
    {
        android.hardware.SystemSensorManager r0;
        android.content.BroadcastReceiver $r2, $r5;
        android.hardware.SystemSensorManager$2 $r3;
        android.content.IntentFilter $r4;
        android.content.Context $r6;

        r0 := @this: android.hardware.SystemSensorManager;

        $r2 = r0.<android.hardware.SystemSensorManager: android.content.BroadcastReceiver mDynamicSensorBroadcastReceiver>;

        if $r2 != null goto label1;

        $r3 = new android.hardware.SystemSensorManager$2;

        specialinvoke $r3.<android.hardware.SystemSensorManager$2: void <init>(android.hardware.SystemSensorManager)>(r0);

        r0.<android.hardware.SystemSensorManager: android.content.BroadcastReceiver mDynamicSensorBroadcastReceiver> = $r3;

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>(java.lang.String)>("dynamic_sensor_change");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DYNAMIC_SENSOR_CHANGED");

        $r6 = r0.<android.hardware.SystemSensorManager: android.content.Context mContext>;

        $r5 = r0.<android.hardware.SystemSensorManager: android.content.BroadcastReceiver mDynamicSensorBroadcastReceiver>;

        virtualinvoke $r6.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r5, $r4);

     label1:
        return;
    }

    private void teardownDynamicSensorBroadcastReceiver()
    {
        android.hardware.SystemSensorManager r0;
        java.util.HashMap $r1;
        android.content.BroadcastReceiver $r2;
        android.content.Context $r3;

        r0 := @this: android.hardware.SystemSensorManager;

        $r1 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mDynamicSensorCallbacks>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        $r3 = r0.<android.hardware.SystemSensorManager: android.content.Context mContext>;

        $r2 = r0.<android.hardware.SystemSensorManager: android.content.BroadcastReceiver mDynamicSensorBroadcastReceiver>;

        virtualinvoke $r3.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r2);

        r0.<android.hardware.SystemSensorManager: android.content.BroadcastReceiver mDynamicSensorBroadcastReceiver> = null;

        return;
    }

    private void updateDynamicSensorList()
    {
        android.hardware.SystemSensorManager r0;
        java.util.List r1, $r7;
        java.util.ArrayList r2, r3, r23, r24;
        java.util.Iterator r4, r25, r30;
        android.hardware.SensorManager$DynamicSensorCallback r5;
        android.hardware.SystemSensorManager$1 r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l0;
        android.content.Context $r8;
        android.os.Looper $r9;
        java.util.HashMap $r10, $r19;
        java.util.Set $r11;
        java.lang.Object $r12, $r14, $r15, $r16, $r17, $r18;
        android.hardware.Sensor $r13, r26;
        int $i2;
        java.lang.Integer $r20;
        java.lang.Throwable $r22;
        android.os.Handler r27, r29;
        java.util.Map$Entry r28;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 = r0.<android.hardware.SystemSensorManager: java.util.List mFullDynamicSensorsList>;

        entermonitor r1;

     label01:
        $z0 = r0.<android.hardware.SystemSensorManager: boolean mDynamicSensorListDirty>;

        if $z0 == 0 goto label14;

        r23 = new java.util.ArrayList;

        specialinvoke r23.<java.util.ArrayList: void <init>()>();

        $l0 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        staticinvoke <android.hardware.SystemSensorManager: void nativeGetDynamicSensors(long,java.util.List)>($l0, r23);

        r24 = new java.util.ArrayList;

        specialinvoke r24.<java.util.ArrayList: void <init>()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r7 = r0.<android.hardware.SystemSensorManager: java.util.List mFullDynamicSensorsList>;

        $z1 = staticinvoke <android.hardware.SystemSensorManager: boolean diffSortedSensorList(java.util.List,java.util.List,java.util.List,java.util.List,java.util.List)>($r7, r23, r24, r2, r3);

        if $z1 == 0 goto label13;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SensorManager", "DYNS dynamic sensor list cached should be updated");

        r0.<android.hardware.SystemSensorManager: java.util.List mFullDynamicSensorsList> = r24;

        r25 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r18 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (android.hardware.Sensor) $r18;

        $r19 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mHandleToSensor>;

        $i2 = virtualinvoke r26.<android.hardware.Sensor: int getHandle()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r26);

     label03:
        goto label02;

     label04:
        r27 = new android.os.Handler;

        $r8 = r0.<android.hardware.SystemSensorManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke r27.<android.os.Handler: void <init>(android.os.Looper)>($r9);

        $r10 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mDynamicSensorCallbacks>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (android.hardware.SensorManager$DynamicSensorCallback) $r15;

        $r16 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r16 != null goto label07;

     label06:
        r29 = r27;

        goto label08;

     label07:
        $r17 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        r29 = (android.os.Handler) $r17;

     label08:
        r6 = new android.hardware.SystemSensorManager$1;

        specialinvoke r6.<android.hardware.SystemSensorManager$1: void <init>(android.hardware.SystemSensorManager,java.util.List,android.hardware.SensorManager$DynamicSensorCallback,java.util.List)>(r0, r2, r5, r3);

        virtualinvoke r29.<android.os.Handler: boolean post(java.lang.Runnable)>(r6);

     label09:
        goto label05;

     label10:
        r30 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r12 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (android.hardware.Sensor) $r12;

        specialinvoke r0.<android.hardware.SystemSensorManager: void cleanupSensorConnection(android.hardware.Sensor)>($r13);

     label12:
        goto label11;

     label13:
        r0.<android.hardware.SystemSensorManager: boolean mDynamicSensorListDirty> = 0;

     label14:
        exitmonitor r1;

     label15:
        return;

     label16:
        $r22 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    protected boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor, boolean)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.Sensor r1;
        java.util.HashMap r2, $r4, $r6;
        android.hardware.SystemSensorManager$TriggerEventQueue r3;
        java.lang.Object $r5;
        boolean $z0, z1, z2;
        int $i0;
        java.lang.Throwable $r8;
        android.hardware.TriggerEventListener r9;

        r0 := @this: android.hardware.SystemSensorManager;

        r9 := @parameter0: android.hardware.TriggerEventListener;

        r1 := @parameter1: android.hardware.Sensor;

        z1 := @parameter2: boolean;

        if r1 == null goto label01;

        $i0 = virtualinvoke r1.<android.hardware.Sensor: int getReportingMode()>();

        if $i0 == 2 goto label01;

        return 0;

     label01:
        r2 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        entermonitor r2;

     label02:
        $r4 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r3 = (android.hardware.SystemSensorManager$TriggerEventQueue) $r5;

     label03:
        if r3 == null goto label11;

        if r1 != null goto label06;

     label04:
        z2 = virtualinvoke r3.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean removeAllSensors()>();

     label05:
        goto label07;

     label06:
        z2 = virtualinvoke r3.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean removeSensor(android.hardware.Sensor,boolean)>(r1, z1);

     label07:
        if z2 == 0 goto label09;

     label08:
        $z0 = virtualinvoke r3.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean hasSensors()>();

        if $z0 != 0 goto label09;

        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r9);

        virtualinvoke r3.<android.hardware.SystemSensorManager$TriggerEventQueue: void dispose()>();

     label09:
        exitmonitor r2;

     label10:
        return z2;

     label11:
        exitmonitor r2;

     label12:
        return 0;

     label13:
        $r8 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected int configureDirectChannelImpl(android.hardware.SensorDirectChannel, android.hardware.Sensor, int)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorDirectChannel r1;
        android.hardware.Sensor r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.IllegalArgumentException $r4, $r5;
        long $l2;
        int $i3, i4, i5, i6, i8;
        byte b7;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorDirectChannel;

        r2 := @parameter1: android.hardware.Sensor;

        i4 := @parameter2: int;

        $z0 = virtualinvoke r1.<android.hardware.SensorDirectChannel: boolean isOpen()>();

        if $z0 == 0 goto label9;

        if i4 < 0 goto label8;

        if i4 > 3 goto label8;

        if r2 != null goto label2;

        if i4 != 0 goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("when sensor is null, rate can only be DIRECT_RATE_STOP");

        throw $r5;

     label2:
        if r2 != null goto label3;

        i5 = -1;

        goto label4;

     label3:
        i5 = virtualinvoke r2.<android.hardware.Sensor: int getHandle()>();

     label4:
        $l2 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        $i3 = virtualinvoke r1.<android.hardware.SensorDirectChannel: int getNativeHandle()>();

        i6 = staticinvoke <android.hardware.SystemSensorManager: int nativeConfigDirectChannel(long,int,int,int)>($l2, $i3, i5, i4);

        if i4 != 0 goto label6;

        b7 = 0;

        if i6 != 0 goto label5;

        b7 = 1;

     label5:
        return b7;

     label6:
        i8 = 0;

        if i6 <= 0 goto label7;

        i8 = i6;

     label7:
        return i8;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("rate parameter invalid");

        throw $r4;

     label9:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("channel is closed");

        throw $r3;
    }

    protected android.hardware.SensorDirectChannel createDirectChannelImpl(android.os.MemoryFile, android.hardware.HardwareBuffer)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.HardwareBuffer r1;
        java.lang.NullPointerException $r2;
        int $i0, $i1, $i2, $i6, $i8, $i9, i11, i13;
        java.lang.IllegalArgumentException $r3, $r4, $r5, $r6, $r15, $r23;
        long $l3, $l4, $l7, $l10, l12;
        byte $b5, b14;
        java.lang.StringBuilder $r7, $r16;
        java.io.UncheckedIOException $r10, $r19;
        java.io.IOException $r11, $r20;
        java.lang.String $r12, $r21;
        android.hardware.SensorDirectChannel $r13;
        java.io.FileDescriptor $r14;
        java.lang.Throwable $r22;
        android.os.MemoryFile r24;

        r0 := @this: android.hardware.SystemSensorManager;

        r24 := @parameter0: android.os.MemoryFile;

        r1 := @parameter1: android.hardware.HardwareBuffer;

        if r24 == null goto label06;

     label01:
        $r14 = virtualinvoke r24.<android.os.MemoryFile: java.io.FileDescriptor getFileDescriptor()>();

        i11 = virtualinvoke $r14.<java.io.FileDescriptor: int getInt$()>();

     label02:
        $i8 = virtualinvoke r24.<android.os.MemoryFile: int length()>();

        if $i8 < 104 goto label04;

        $i9 = virtualinvoke r24.<android.os.MemoryFile: int length()>();

        l12 = (long) $i9;

        $l10 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        i13 = staticinvoke <android.hardware.SystemSensorManager: int nativeCreateDirectChannel(long,long,int,int,android.hardware.HardwareBuffer)>($l10, l12, 1, i11, null);

        if i13 <= 0 goto label03;

        b14 = 1;

        goto label07;

     label03:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create MemoryFile direct channel failed ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r19 = new java.io.UncheckedIOException;

        $r20 = new java.io.IOException;

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r21);

        specialinvoke $r19.<java.io.UncheckedIOException: void <init>(java.io.IOException)>($r20);

        throw $r19;

     label04:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size of MemoryFile has to be greater than 104");

        throw $r15;

     label05:
        $r22 := @caughtexception;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MemoryFile object is not valid");

        throw $r23;

     label06:
        if r1 == null goto label13;

        $i0 = virtualinvoke r1.<android.hardware.HardwareBuffer: int getFormat()>();

        if $i0 != 33 goto label12;

        $i1 = virtualinvoke r1.<android.hardware.HardwareBuffer: int getHeight()>();

        if $i1 != 1 goto label11;

        $i2 = virtualinvoke r1.<android.hardware.HardwareBuffer: int getWidth()>();

        if $i2 < 104 goto label10;

        $l3 = virtualinvoke r1.<android.hardware.HardwareBuffer: long getUsage()>();

        $l4 = $l3 & 8388608L;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label09;

        $i6 = virtualinvoke r1.<android.hardware.HardwareBuffer: int getWidth()>();

        l12 = (long) $i6;

        $l7 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        i13 = staticinvoke <android.hardware.SystemSensorManager: int nativeCreateDirectChannel(long,long,int,int,android.hardware.HardwareBuffer)>($l7, l12, 2, -1, r1);

        if i13 <= 0 goto label08;

        b14 = 2;

     label07:
        $r13 = new android.hardware.SensorDirectChannel;

        specialinvoke $r13.<android.hardware.SensorDirectChannel: void <init>(android.hardware.SensorManager,int,int,long)>(r0, i13, b14, l12);

        return $r13;

     label08:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create HardwareBuffer direct channel failed ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r10 = new java.io.UncheckedIOException;

        $r11 = new java.io.IOException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r12);

        specialinvoke $r10.<java.io.UncheckedIOException: void <init>(java.io.IOException)>($r11);

        throw $r10;

     label09:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HardwareBuffer must set usage flag USAGE_SENSOR_DIRECT_DATA");

        throw $r6;

     label10:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Width if HaradwareBuffer must be greater than 104");

        throw $r5;

     label11:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Height of HardwareBuffer must be 1");

        throw $r4;

     label12:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Format of HardwareBuffer must be BLOB");

        throw $r3;

     label13:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("shared memory object cannot be null");

        throw $r2;

        catch java.io.IOException from label01 to label02 with label05;
    }

    protected void destroyDirectChannelImpl(android.hardware.SensorDirectChannel)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorDirectChannel r1;
        long $l0;
        int $i1;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorDirectChannel;

        if r1 == null goto label1;

        $l0 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        $i1 = virtualinvoke r1.<android.hardware.SensorDirectChannel: int getNativeHandle()>();

        staticinvoke <android.hardware.SystemSensorManager: void nativeDestroyDirectChannel(long,int)>($l0, $i1);

     label1:
        return;
    }

    protected boolean flushImpl(android.hardware.SensorEventListener)
    {
        android.hardware.SystemSensorManager r0;
        java.util.HashMap r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r4;
        int $i0;
        java.lang.Throwable $r5;
        android.hardware.SensorEventListener r6;
        android.hardware.SystemSensorManager$SensorEventQueue r7;
        boolean z0;

        r0 := @this: android.hardware.SystemSensorManager;

        r6 := @parameter0: android.hardware.SensorEventListener;

        if r6 == null goto label12;

        r1 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (android.hardware.SystemSensorManager$SensorEventQueue) $r4;

     label02:
        z0 = 0;

        if r7 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0;

     label05:
        $i0 = virtualinvoke r7.<android.hardware.SystemSensorManager$SensorEventQueue: int flush()>();

        if $i0 != 0 goto label07;

     label06:
        z0 = 1;

     label07:
        exitmonitor r1;

     label08:
        return z0;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

     label12:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener cannot be null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    protected java.util.List getFullDynamicSensorList()
    {
        android.hardware.SystemSensorManager r0;
        java.util.List $r1;

        r0 := @this: android.hardware.SystemSensorManager;

        specialinvoke r0.<android.hardware.SystemSensorManager: void setupDynamicSensorBroadcastReceiver()>();

        specialinvoke r0.<android.hardware.SystemSensorManager: void updateDynamicSensorList()>();

        $r1 = r0.<android.hardware.SystemSensorManager: java.util.List mFullDynamicSensorsList>;

        return $r1;
    }

    protected java.util.List getFullSensorList()
    {
        android.hardware.SystemSensorManager r0;
        java.util.ArrayList $r1;

        r0 := @this: android.hardware.SystemSensorManager;

        $r1 = r0.<android.hardware.SystemSensorManager: java.util.ArrayList mFullSensorsList>;

        return $r1;
    }

    protected boolean initDataInjectionImpl(boolean)
    {
        android.hardware.SystemSensorManager r0;
        java.lang.Object r1;
        android.hardware.SystemSensorManager$InjectEventQueue $r3, $r4, r13, r14, $r16;
        long $l0;
        boolean $z1, z2, z3;
        android.content.Context $r5;
        android.os.Looper $r6;
        java.lang.String $r7, $r11;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r15;

        r0 := @this: android.hardware.SystemSensorManager;

        z2 := @parameter0: boolean;

        r1 = <android.hardware.SystemSensorManager: java.lang.Object sLock>;

        entermonitor r1;

        if z2 == 0 goto label14;

     label01:
        $l0 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        $z1 = staticinvoke <android.hardware.SystemSensorManager: boolean nativeIsDataInjectionEnabled(long)>($l0);

        if $z1 != 0 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "Data Injection mode not enabled");

        exitmonitor r1;

     label02:
        return 0;

     label03:
        r13 = <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue>;

     label04:
        if r13 != null goto label09;

     label05:
        r14 = new android.hardware.SystemSensorManager$InjectEventQueue;

        $r6 = r0.<android.hardware.SystemSensorManager: android.os.Looper mMainLooper>;

        $r5 = r0.<android.hardware.SystemSensorManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        specialinvoke r14.<android.hardware.SystemSensorManager$InjectEventQueue: void <init>(android.hardware.SystemSensorManager,android.os.Looper,android.hardware.SystemSensorManager,java.lang.String)>(r0, $r6, r0, $r7);

        <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue> = r14;

     label06:
        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create InjectEventQueue: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r11 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", $r11);

     label09:
        $r16 = <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue>;

        if $r16 == null goto label11;

     label10:
        z3 = 1;

        goto label12;

     label11:
        z3 = 0;

     label12:
        exitmonitor r1;

     label13:
        return z3;

     label14:
        $r3 = <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue>;

        if $r3 == null goto label15;

        $r4 = <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue>;

        virtualinvoke $r4.<android.hardware.SystemSensorManager$InjectEventQueue: void dispose()>();

        <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue> = null;

     label15:
        exitmonitor r1;

     label16:
        return 1;

     label17:
        $r12 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.RuntimeException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    protected boolean injectSensorDataImpl(android.hardware.Sensor, float[], int, long)
    {
        android.hardware.SystemSensorManager r0;
        float[] r1;
        long l0;
        java.lang.Object r2;
        android.hardware.SystemSensorManager$InjectEventQueue r3, $r4, $r5;
        int $i1, i3, i4;
        java.lang.Throwable $r6;
        android.hardware.Sensor r7;
        boolean z0;

        r0 := @this: android.hardware.SystemSensorManager;

        r7 := @parameter0: android.hardware.Sensor;

        r1 := @parameter1: float[];

        i3 := @parameter2: int;

        l0 := @parameter3: long;

        r2 = <android.hardware.SystemSensorManager: java.lang.Object sLock>;

        entermonitor r2;

     label01:
        r3 = <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue>;

     label02:
        z0 = 0;

        if r3 != null goto label05;

     label03:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "Data injection mode not activated before calling injectSensorData");

        exitmonitor r2;

     label04:
        return 0;

     label05:
        $r4 = <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue>;

        $i1 = virtualinvoke r7.<android.hardware.Sensor: int getHandle()>();

        i4 = virtualinvoke $r4.<android.hardware.SystemSensorManager$InjectEventQueue: int injectSensorData(int,float[],int,long)>($i1, r1, i3, l0);

     label06:
        if i4 == 0 goto label08;

     label07:
        $r5 = <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue>;

        virtualinvoke $r5.<android.hardware.SystemSensorManager$InjectEventQueue: void dispose()>();

        <android.hardware.SystemSensorManager: android.hardware.SystemSensorManager$InjectEventQueue sInjectEventQueue> = null;

     label08:
        if i4 != 0 goto label09;

        z0 = 1;

     label09:
        exitmonitor r2;

     label10:
        return z0;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    protected void registerDynamicSensorCallbackImpl(android.hardware.SensorManager$DynamicSensorCallback, android.os.Handler)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorManager$DynamicSensorCallback r1;
        android.os.Handler r2;
        java.lang.IllegalArgumentException $r3;
        java.util.HashMap $r4, $r5;
        boolean $z0;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorManager$DynamicSensorCallback;

        r2 := @parameter1: android.os.Handler;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SensorManager", "DYNS Register dynamic sensor callback");

        if r1 == null goto label2;

        $r4 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mDynamicSensorCallbacks>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.hardware.SystemSensorManager: void setupDynamicSensorBroadcastReceiver()>();

        $r5 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mDynamicSensorCallbacks>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback cannot be null");

        throw $r3;
    }

    protected boolean registerListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler, int, int)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.Sensor r1;
        int i0, i1, i2, $i4, $i6;
        java.util.HashMap r2, $r4, $r6, $r11;
        android.hardware.SystemSensorManager$SensorEventQueue r3, r18;
        boolean z0, $z1;
        java.lang.IllegalStateException $r5;
        java.lang.Object $r7;
        java.lang.Class $r8, $r9, $r10, $r13, $r14;
        java.lang.Throwable $r15;
        android.hardware.SensorEventListener r16;
        android.os.Handler r17;
        android.os.Looper r19;
        java.lang.String r20;

        r0 := @this: android.hardware.SystemSensorManager;

        r16 := @parameter0: android.hardware.SensorEventListener;

        r1 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        r17 := @parameter3: android.os.Handler;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        if r16 == null goto label23;

        if r1 != null goto label01;

        goto label23;

     label01:
        $i4 = virtualinvoke r1.<android.hardware.Sensor: int getReportingMode()>();

        if $i4 != 2 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "Trigger Sensors should use the requestTriggerSensor.");

        return 0;

     label02:
        if i1 < 0 goto label22;

        if i0 >= 0 goto label03;

        goto label22;

     label03:
        $r4 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        $i6 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        if $i6 >= 128 goto label21;

        r2 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        entermonitor r2;

     label04:
        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r16);

        r18 = (android.hardware.SystemSensorManager$SensorEventQueue) $r7;

     label05:
        if r18 != null goto label16;

        if r17 == null goto label08;

     label06:
        r19 = virtualinvoke r17.<android.os.Handler: android.os.Looper getLooper()>();

     label07:
        goto label09;

     label08:
        r19 = r0.<android.hardware.SystemSensorManager: android.os.Looper mMainLooper>;

     label09:
        $r8 = virtualinvoke r16.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r9 == null goto label11;

        $r13 = virtualinvoke r16.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        r20 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

     label10:
        goto label12;

     label11:
        $r10 = virtualinvoke r16.<java.lang.Object: java.lang.Class getClass()>();

        r20 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

     label12:
        r3 = new android.hardware.SystemSensorManager$SensorEventQueue;

        specialinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: void <init>(android.hardware.SensorEventListener,android.os.Looper,android.hardware.SystemSensorManager,java.lang.String)>(r16, r19, r0, r20);

        $z1 = virtualinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: boolean addSensor(android.hardware.Sensor,int,int)>(r1, i0, i1);

        if $z1 != 0 goto label14;

        virtualinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: void dispose()>();

        exitmonitor r2;

     label13:
        return 0;

     label14:
        $r11 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r3);

        exitmonitor r2;

     label15:
        return 1;

     label16:
        z0 = virtualinvoke r18.<android.hardware.SystemSensorManager$SensorEventQueue: boolean addSensor(android.hardware.Sensor,int,int)>(r1, i0, i1);

        exitmonitor r2;

     label17:
        return z0;

     label18:
        $r15 := @caughtexception;

     label19:
        exitmonitor r2;

     label20:
        throw $r15;

     label21:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("register failed, the sensor listeners size has exceeded the maximum limit 128");

        throw $r5;

     label22:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "maxBatchReportLatencyUs and delayUs should be non-negative");

        return 0;

     label23:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "sensor or listener is null");

        return 0;

        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    protected boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.Sensor r1;
        java.util.HashMap r2, $r6, $r8, $r14;
        android.hardware.SystemSensorManager$TriggerEventQueue r3, r20;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r4, $r5;
        int $i0, $i1;
        java.lang.IllegalStateException $r7;
        java.lang.Object $r9;
        java.lang.Class $r10, $r11, $r12, $r16, $r17;
        android.os.Looper $r13;
        java.lang.Throwable $r18;
        android.hardware.TriggerEventListener r19;
        java.lang.String r21;

        r0 := @this: android.hardware.SystemSensorManager;

        r19 := @parameter0: android.hardware.TriggerEventListener;

        r1 := @parameter1: android.hardware.Sensor;

        if r1 == null goto label18;

        if r19 == null goto label17;

        $i0 = virtualinvoke r1.<android.hardware.Sensor: int getReportingMode()>();

        if $i0 == 2 goto label01;

        return 0;

     label01:
        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        $i1 = virtualinvoke $r6.<java.util.HashMap: int size()>();

        if $i1 >= 128 goto label16;

        r2 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        entermonitor r2;

     label02:
        $r8 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r19);

        r20 = (android.hardware.SystemSensorManager$TriggerEventQueue) $r9;

     label03:
        if r20 != null goto label11;

     label04:
        $r10 = virtualinvoke r19.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r11 == null goto label06;

        $r16 = virtualinvoke r19.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        r21 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

     label05:
        goto label07;

     label06:
        $r12 = virtualinvoke r19.<java.lang.Object: java.lang.Class getClass()>();

        r21 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

     label07:
        r3 = new android.hardware.SystemSensorManager$TriggerEventQueue;

        $r13 = r0.<android.hardware.SystemSensorManager: android.os.Looper mMainLooper>;

        specialinvoke r3.<android.hardware.SystemSensorManager$TriggerEventQueue: void <init>(android.hardware.TriggerEventListener,android.os.Looper,android.hardware.SystemSensorManager,java.lang.String)>(r19, $r13, r0, r21);

        $z1 = virtualinvoke r3.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean addSensor(android.hardware.Sensor,int,int)>(r1, 0, 0);

        if $z1 != 0 goto label09;

        virtualinvoke r3.<android.hardware.SystemSensorManager$TriggerEventQueue: void dispose()>();

        exitmonitor r2;

     label08:
        return 0;

     label09:
        $r14 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r3);

        exitmonitor r2;

     label10:
        return 1;

     label11:
        z0 = virtualinvoke r20.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean addSensor(android.hardware.Sensor,int,int)>(r1, 0, 0);

        exitmonitor r2;

     label12:
        return z0;

     label13:
        $r18 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        throw $r18;

     label16:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("request failed, the trigger listeners size has exceeded the maximum limit 128");

        throw $r7;

     label17:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener cannot be null");

        throw $r5;

     label18:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sensor cannot be null");

        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected boolean setOperationParameterImpl(android.hardware.SensorAdditionalInfo)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorAdditionalInfo r1;
        android.hardware.Sensor $r2, $r5;
        int[] $r3;
        float[] $r4;
        int $i0, $i2, i3;
        long $l1;
        boolean z0;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorAdditionalInfo;

        i3 = -1;

        $r2 = r1.<android.hardware.SensorAdditionalInfo: android.hardware.Sensor sensor>;

        if $r2 == null goto label1;

        $r5 = r1.<android.hardware.SensorAdditionalInfo: android.hardware.Sensor sensor>;

        i3 = virtualinvoke $r5.<android.hardware.Sensor: int getHandle()>();

     label1:
        $l1 = r0.<android.hardware.SystemSensorManager: long mNativeInstance>;

        $i0 = r1.<android.hardware.SensorAdditionalInfo: int type>;

        $r4 = r1.<android.hardware.SensorAdditionalInfo: float[] floatValues>;

        $r3 = r1.<android.hardware.SensorAdditionalInfo: int[] intValues>;

        $i2 = staticinvoke <android.hardware.SystemSensorManager: int nativeSetOperationParameter(long,int,int,float[],int[])>($l1, i3, $i0, $r4, $r3);

        if $i2 != 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    protected void unregisterDynamicSensorCallbackImpl(android.hardware.SensorManager$DynamicSensorCallback)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorManager$DynamicSensorCallback r1;
        java.util.HashMap $r2;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorManager$DynamicSensorCallback;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SensorManager", "Removing dynamic sensor listerner");

        $r2 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mDynamicSensorCallbacks>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    protected void unregisterListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.Sensor r1;
        java.util.HashMap r2, $r4, $r6;
        android.hardware.SystemSensorManager$SensorEventQueue r3;
        java.lang.Object $r5;
        boolean $z0, z1;
        int $i0;
        java.lang.Throwable $r8;
        android.hardware.SensorEventListener r9;

        r0 := @this: android.hardware.SystemSensorManager;

        r9 := @parameter0: android.hardware.SensorEventListener;

        r1 := @parameter1: android.hardware.Sensor;

        if r1 == null goto label01;

        $i0 = virtualinvoke r1.<android.hardware.Sensor: int getReportingMode()>();

        if $i0 != 2 goto label01;

        return;

     label01:
        r2 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        entermonitor r2;

     label02:
        $r4 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r3 = (android.hardware.SystemSensorManager$SensorEventQueue) $r5;

     label03:
        if r3 == null goto label09;

        if r1 != null goto label06;

     label04:
        z1 = virtualinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: boolean removeAllSensors()>();

     label05:
        goto label07;

     label06:
        z1 = virtualinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: boolean removeSensor(android.hardware.Sensor,boolean)>(r1, 1);

     label07:
        if z1 == 0 goto label09;

     label08:
        $z0 = virtualinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: boolean hasSensors()>();

        if $z0 != 0 goto label09;

        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r9);

        virtualinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: void dispose()>();

     label09:
        exitmonitor r2;

     label10:
        return;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }
}
