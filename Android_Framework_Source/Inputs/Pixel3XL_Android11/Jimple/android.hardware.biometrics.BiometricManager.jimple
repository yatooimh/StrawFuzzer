public class android.hardware.biometrics.BiometricManager extends java.lang.Object
{
    public static final int BIOMETRIC_ERROR_HW_UNAVAILABLE;
    public static final int BIOMETRIC_ERROR_NONE_ENROLLED;
    public static final int BIOMETRIC_ERROR_NO_HARDWARE;
    public static final int BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED;
    public static final int BIOMETRIC_SUCCESS;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.hardware.biometrics.IAuthService mService;

    public void <init>(android.content.Context, android.hardware.biometrics.IAuthService)
    {
        android.hardware.biometrics.BiometricManager r0;
        android.content.Context r1;
        android.hardware.biometrics.IAuthService r2;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.biometrics.IAuthService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.biometrics.BiometricManager: android.content.Context mContext> = r1;

        r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService> = r2;

        return;
    }

    public int canAuthenticate()
    {
        android.hardware.biometrics.BiometricManager r0;
        int $i0;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        $i0 = virtualinvoke r0.<android.hardware.biometrics.BiometricManager: int canAuthenticate(int)>(255);

        return $i0;
    }

    public int canAuthenticate(int)
    {
        android.hardware.biometrics.BiometricManager r0;
        int i0, $i1, $i2;
        android.content.Context $r1;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.biometrics.BiometricManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $i2 = virtualinvoke r0.<android.hardware.biometrics.BiometricManager: int canAuthenticate(int,int)>($i1, i0);

        return $i2;
    }

    public int canAuthenticate(int, int)
    {
        android.hardware.biometrics.BiometricManager r0;
        int i0, i2, i3;
        android.hardware.biometrics.IAuthService $r1, $r3;
        android.content.Context $r2;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<android.hardware.biometrics.BiometricManager: android.content.Context mContext>;

        r6 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService>;

        i3 = interfaceinvoke $r3.<android.hardware.biometrics.IAuthService: int canAuthenticate(java.lang.String,int,int)>(r6, i2, i0);

     label2:
        return i3;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BiometricManager", "hasEnrolledBiometrics(): Service not connected");

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long[] getAuthenticatorIds()
    {
        android.hardware.biometrics.BiometricManager r0;
        long[] $r1, r5;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.biometrics.IAuthService r4;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        r4 = r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService>;

        if r4 == null goto label4;

     label1:
        r5 = interfaceinvoke r4.<android.hardware.biometrics.IAuthService: long[] getAuthenticatorIds()>();

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BiometricManager", "getAuthenticatorIds(): Service not connected");

        $r1 = newarray (long)[0];

        return $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasEnrolledBiometrics(int)
    {
        android.hardware.biometrics.BiometricManager r0;
        int i0;
        boolean z0;
        android.content.Context $r2;
        java.lang.String $r3, $r8;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        android.hardware.biometrics.IAuthService r9;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        i0 := @parameter0: int;

        r9 = r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService>;

        if r9 == null goto label4;

     label1:
        $r2 = r0.<android.hardware.biometrics.BiometricManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke r9.<android.hardware.biometrics.IAuthService: boolean hasEnrolledBiometrics(int,java.lang.String)>(i0, $r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception in hasEnrolledBiometrics(): ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BiometricManager", $r8);

        return 0;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)
    {
        android.hardware.biometrics.BiometricManager r0;
        android.hardware.biometrics.IAuthService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback r4;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        r4 := @parameter0: android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback;

        r1 = r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.hardware.biometrics.IAuthService: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>(r4);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BiometricManager", "registerEnabledOnKeyguardCallback(): Service not connected");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resetLockout(byte[])
    {
        android.hardware.biometrics.BiometricManager r0;
        android.hardware.biometrics.IAuthService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        byte[] r4;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        r4 := @parameter0: byte[];

        r1 = r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.hardware.biometrics.IAuthService: void resetLockout(byte[])>(r4);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BiometricManager", "resetLockout(): Service not connected");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActiveUser(int)
    {
        android.hardware.biometrics.BiometricManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.hardware.biometrics.IAuthService r3;

        r0 := @this: android.hardware.biometrics.BiometricManager;

        i0 := @parameter0: int;

        r3 = r0.<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.IAuthService mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.hardware.biometrics.IAuthService: void setActiveUser(int)>(i0);

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BiometricManager", "setActiveUser(): Service not connected");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.biometrics.BiometricManager: java.lang.String TAG> = "BiometricManager";

        <android.hardware.biometrics.BiometricManager: int BIOMETRIC_SUCCESS> = 0;

        <android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED> = 15;

        <android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_NO_HARDWARE> = 12;

        <android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_NONE_ENROLLED> = 11;

        <android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_HW_UNAVAILABLE> = 1;

        return;
    }
}
