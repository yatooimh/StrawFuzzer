public class android.hardware.biometrics.BiometricPrompt$Builder extends java.lang.Object
{
    private final android.os.Bundle mBundle;
    private android.content.Context mContext;
    private android.hardware.biometrics.BiometricPrompt$ButtonInfo mNegativeButtonInfo;
    private android.hardware.biometrics.BiometricPrompt$ButtonInfo mPositiveButtonInfo;

    public void <init>(android.content.Context)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        android.content.Context r1;
        android.os.Bundle $r2;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle> = $r2;

        r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.content.Context mContext> = r1;

        return;
    }

    public android.hardware.biometrics.BiometricPrompt build()
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        java.lang.CharSequence r1, r2;
        android.os.Bundle r3, $r4, $r5, $r6, $r7, $r11;
        boolean z0, z1, $z2, $z3, z4, $z5;
        int i0, $i1;
        android.hardware.biometrics.BiometricPrompt $r8;
        android.hardware.biometrics.BiometricPrompt$ButtonInfo $r9, $r10;
        android.content.Context $r12;
        java.lang.IllegalArgumentException $r13, $r14, $r15;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        $r4 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        r1 = virtualinvoke $r4.<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>("title");

        $r5 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        r2 = virtualinvoke $r5.<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>("negative_text");

        r3 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        z4 = 0;

        z0 = virtualinvoke r3.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("use_default_title", 0);

        $r6 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        z1 = virtualinvoke $r6.<android.os.Bundle: boolean getBoolean(java.lang.String)>("allow_device_credential");

        $r7 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        i0 = virtualinvoke $r7.<android.os.Bundle: int getInt(java.lang.String,int)>("authenticators_allowed", 0);

        if z1 != 0 goto label1;

        $i1 = 32768 & i0;

        if $i1 == 0 goto label2;

     label1:
        z4 = 1;

     label2:
        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z5 == 0 goto label4;

        if z0 == 0 goto label3;

        goto label4;

     label3:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Title must be set and non-empty");

        throw $r15;

     label4:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z2 == 0 goto label6;

        if z4 == 0 goto label5;

        goto label6;

     label5:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative text must be set and non-empty");

        throw $r14;

     label6:
        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z3 != 0 goto label8;

        if z4 != 0 goto label7;

        goto label8;

     label7:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have both negative button behavior and device credential enabled");

        throw $r13;

     label8:
        $r8 = new android.hardware.biometrics.BiometricPrompt;

        $r12 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.content.Context mContext>;

        $r11 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        $r10 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$ButtonInfo mPositiveButtonInfo>;

        $r9 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$ButtonInfo mNegativeButtonInfo>;

        specialinvoke $r8.<android.hardware.biometrics.BiometricPrompt: void <init>(android.content.Context,android.os.Bundle,android.hardware.biometrics.BiometricPrompt$ButtonInfo,android.hardware.biometrics.BiometricPrompt$ButtonInfo,android.hardware.biometrics.BiometricPrompt$1)>($r12, $r11, $r10, $r9, null);

        return $r8;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setAllowedAuthenticators(int)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        int i0;
        android.os.Bundle $r1;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("authenticators_allowed", i0);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setConfirmationRequired(boolean)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        boolean z0;
        android.os.Bundle $r1;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("require_confirmation", z0);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setDescription(java.lang.CharSequence)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        java.lang.CharSequence r1;
        android.os.Bundle $r2;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r2.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("description", r1);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setDeviceCredentialAllowed(boolean)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        boolean z0;
        android.os.Bundle $r1;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("allow_device_credential", z0);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setDisallowBiometricsIfPolicyExists(boolean)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        boolean z0;
        android.os.Bundle $r1;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("check_dpm", z0);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setNegativeButton(java.lang.CharSequence, java.util.concurrent.Executor, android.content.DialogInterface$OnClickListener)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        java.lang.CharSequence r1;
        java.util.concurrent.Executor r2;
        android.content.DialogInterface$OnClickListener r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        android.os.Bundle $r7;
        android.hardware.biometrics.BiometricPrompt$ButtonInfo $r8;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.content.DialogInterface$OnClickListener;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label3;

        if r2 == null goto label2;

        if r3 == null goto label1;

        $r7 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r7.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("negative_text", r1);

        $r8 = new android.hardware.biometrics.BiometricPrompt$ButtonInfo;

        specialinvoke $r8.<android.hardware.biometrics.BiometricPrompt$ButtonInfo: void <init>(java.util.concurrent.Executor,android.content.DialogInterface$OnClickListener)>(r2, r3);

        r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$ButtonInfo mNegativeButtonInfo> = $r8;

        return r0;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Listener must not be null");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Executor must not be null");

        throw $r5;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Text must be set and non-empty");

        throw $r4;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setReceiveSystemEvents(boolean)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        boolean z0;
        android.os.Bundle $r1;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("receive_system_events", z0);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setSubtitle(java.lang.CharSequence)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        java.lang.CharSequence r1;
        android.os.Bundle $r2;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r2.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("subtitle", r1);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setTextForDeviceCredential(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        java.lang.CharSequence r1, r2, r3;
        android.os.Bundle $r4, $r5, $r6;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        r3 := @parameter2: java.lang.CharSequence;

        if r1 == null goto label1;

        $r6 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r6.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("device_credential_title", r1);

     label1:
        if r2 == null goto label2;

        $r5 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r5.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("device_credential_subtitle", r2);

     label2:
        if r3 == null goto label3;

        $r4 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r4.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("device_credential_description", r3);

     label3:
        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setTitle(java.lang.CharSequence)
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        java.lang.CharSequence r1;
        android.os.Bundle $r2;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r2.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("title", r1);

        return r0;
    }

    public android.hardware.biometrics.BiometricPrompt$Builder setUseDefaultTitle()
    {
        android.hardware.biometrics.BiometricPrompt$Builder r0;
        android.os.Bundle $r1;

        r0 := @this: android.hardware.biometrics.BiometricPrompt$Builder;

        $r1 = r0.<android.hardware.biometrics.BiometricPrompt$Builder: android.os.Bundle mBundle>;

        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("use_default_title", 1);

        return r0;
    }
}
