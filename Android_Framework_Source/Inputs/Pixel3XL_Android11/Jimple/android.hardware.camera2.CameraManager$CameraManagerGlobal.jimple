final class android.hardware.camera2.CameraManager$CameraManagerGlobal extends android.hardware.ICameraServiceListener$Stub implements android.os.IBinder$DeathRecipient
{
    private static final java.lang.String CAMERA_SERVICE_BINDER_NAME;
    private static final java.lang.String TAG;
    private static final android.hardware.camera2.CameraManager$CameraManagerGlobal gCameraManager;
    public static final boolean sCameraServiceDisabled;
    private final int CAMERA_SERVICE_RECONNECT_DELAY_MS;
    private final boolean DEBUG;
    private final android.util.ArrayMap mCallbackMap;
    private android.hardware.ICameraService mCameraService;
    private final java.util.Set mConcurrentCameraIdCombinations;
    private final android.util.ArrayMap mDeviceStatus;
    private final java.lang.Object mLock;
    private final java.util.concurrent.ScheduledExecutorService mScheduler;
    private final android.util.ArrayMap mTorchCallbackMap;
    private android.os.Binder mTorchClientBinder;
    private final android.util.ArrayMap mTorchStatus;
    private final android.util.ArrayMap mUnavailablePhysicalDevices;

    static void <clinit>()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r0;
        boolean $z0;

        <android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String TAG> = "CameraManagerGlobal";

        <android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String CAMERA_SERVICE_BINDER_NAME> = "media.camera";

        $r0 = new android.hardware.camera2.CameraManager$CameraManagerGlobal;

        specialinvoke $r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void <init>()>();

        <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal gCameraManager> = $r0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_cameraservice", 0);

        <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean sCameraServiceDisabled> = $z0;

        return;
    }

    private void <init>()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.ScheduledExecutorService $r1;
        android.util.ArrayMap $r2, $r3, $r5, $r7, $r8;
        android.util.ArraySet $r4;
        android.os.Binder $r6;
        java.lang.Object $r9;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        specialinvoke r0.<android.hardware.ICameraServiceListener$Stub: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean DEBUG> = 0;

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: int CAMERA_SERVICE_RECONNECT_DELAY_MS> = 1000;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(1);

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.concurrent.ScheduledExecutorService mScheduler> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mUnavailablePhysicalDevices> = $r3;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set mConcurrentCameraIdCombinations> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap> = $r5;

        $r6 = new android.os.Binder;

        specialinvoke $r6.<android.os.Binder: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.os.Binder mTorchClientBinder> = $r6;

        $r7 = new android.util.ArrayMap;

        specialinvoke $r7.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchStatus> = $r7;

        $r8 = new android.util.ArrayMap;

        specialinvoke $r8.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchCallbackMap> = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock> = $r9;

        return;
    }

    public static boolean cameraStatusesContains(android.hardware.CameraStatus[], java.lang.String)
    {
        android.hardware.CameraStatus[] r0;
        java.lang.String r1, $r3;
        int i0, i1;
        android.hardware.CameraStatus $r2;
        boolean $z0;

        r0 := @parameter0: android.hardware.CameraStatus[];

        r1 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0[i1];

        $r3 = $r2.<android.hardware.CameraStatus: java.lang.String cameraId>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void connectCameraServiceLocked()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        android.hardware.CameraStatus[] r1;
        int i1, i2, $i4, i5, i6, i7, i8;
        java.lang.String[] r2, $r8;
        java.lang.String r3, $r7, $r9;
        android.hardware.ICameraService $r4, r19;
        boolean $z0;
        java.util.Set $r5, $r6;
        android.os.ServiceSpecificException $r10, $r14, $r16;
        android.os.RemoteException $r11, $r12, $r13;
        java.lang.IllegalStateException $r15, $r17;
        android.os.IBinder r18;
        android.hardware.CameraStatus r21;
        android.hardware.camera2.utils.ConcurrentCameraIdCombination[] r23;
        android.hardware.camera2.utils.ConcurrentCameraIdCombination r24;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        if $r4 != null goto label30;

        $z0 = <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean sCameraServiceDisabled>;

        if $z0 == 0 goto label01;

        goto label30;

     label01:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CameraManagerGlobal", "Connecting to camera service");

        r18 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media.camera");

        if r18 != null goto label02;

        return;

     label02:
        interfaceinvoke r18.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label03:
        r19 = staticinvoke <android.hardware.ICameraService$Stub: android.hardware.ICameraService asInterface(android.os.IBinder)>(r18);

     label04:
        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void setupGlobalVendorTagDescriptor()>();

     label05:
        goto label07;

     label06:
        $r10 := @caughtexception;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void handleRecoverableSetupErrors(android.os.ServiceSpecificException)>($r10);

     label07:
        r1 = interfaceinvoke r19.<android.hardware.ICameraService: android.hardware.CameraStatus[] addListener(android.hardware.ICameraServiceListener)>(r0);

        i1 = lengthof r1;

     label08:
        i5 = 0;

     label09:
        if i5 >= i1 goto label16;

        r21 = r1[i5];

     label10:
        $i4 = r21.<android.hardware.CameraStatus: int status>;

        $r7 = r21.<android.hardware.CameraStatus: java.lang.String cameraId>;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onStatusChangedLocked(int,java.lang.String)>($i4, $r7);

        $r8 = r21.<android.hardware.CameraStatus: java.lang.String[] unavailablePhysicalCameras>;

        if $r8 == null goto label15;

        r2 = r21.<android.hardware.CameraStatus: java.lang.String[] unavailablePhysicalCameras>;

        i2 = lengthof r2;

     label11:
        i6 = 0;

     label12:
        if i6 >= i2 goto label15;

        r3 = r2[i6];

     label13:
        $r9 = r21.<android.hardware.CameraStatus: java.lang.String cameraId>;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onPhysicalCameraStatusChangedLocked(int,java.lang.String,java.lang.String)>(0, $r9, r3);

     label14:
        i6 = i6 + 1;

        goto label12;

     label15:
        i5 = i5 + 1;

        goto label09;

     label16:
        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService> = r19;

     label17:
        goto label19;

     label18:
        $r13 := @caughtexception;

     label19:
        r23 = interfaceinvoke r19.<android.hardware.ICameraService: android.hardware.camera2.utils.ConcurrentCameraIdCombination[] getConcurrentCameraIds()>();

        i7 = lengthof r23;

     label20:
        i8 = 0;

     label21:
        if i8 >= i7 goto label24;

        r24 = r23[i8];

     label22:
        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set mConcurrentCameraIdCombinations>;

        $r6 = virtualinvoke r24.<android.hardware.camera2.utils.ConcurrentCameraIdCombination: java.util.Set getConcurrentCameraIdCombination()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label23:
        i8 = i8 + 1;

        goto label21;

     label24:
        goto label26;

     label25:
        $r12 := @caughtexception;

     label26:
        return;

     label27:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get concurrent camera id combinations", $r14);

        throw $r15;

     label28:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to register a camera service listener", $r16);

        throw $r17;

     label29:
        $r11 := @caughtexception;

        return;

     label30:
        return;

        catch android.os.RemoteException from label02 to label03 with label29;
        catch android.os.ServiceSpecificException from label04 to label05 with label06;
        catch android.os.ServiceSpecificException from label07 to label08 with label28;
        catch android.os.RemoteException from label07 to label08 with label18;
        catch android.os.ServiceSpecificException from label10 to label11 with label28;
        catch android.os.RemoteException from label10 to label11 with label18;
        catch android.os.ServiceSpecificException from label13 to label14 with label28;
        catch android.os.RemoteException from label13 to label14 with label18;
        catch android.os.ServiceSpecificException from label16 to label17 with label28;
        catch android.os.RemoteException from label16 to label17 with label18;
        catch android.os.ServiceSpecificException from label19 to label20 with label27;
        catch android.os.RemoteException from label19 to label20 with label25;
        catch android.os.ServiceSpecificException from label22 to label23 with label27;
        catch android.os.RemoteException from label22 to label23 with label25;
    }

    private java.lang.String[] extractCameraIdListLocked()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.String[] r1;
        android.util.ArrayMap $r2, $r3, $r4, $r7, $r10;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9;
        java.lang.Object $r5, $r8, $r11;
        java.lang.Integer $r6, $r12;
        java.lang.String $r9;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i2 = 0;

        i3 = 0;

     label1:
        $r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if i3 >= $i0 goto label4;

        $r10 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r12 = (java.lang.Integer) $r11;

        i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        i5 = i2;

        if i4 == 0 goto label3;

        if i4 != 2 goto label2;

        i5 = i2;

        goto label3;

     label2:
        i5 = i2 + 1;

     label3:
        i3 = i3 + 1;

        i2 = i5;

        goto label1;

     label4:
        r1 = newarray (java.lang.String)[i2];

        i6 = 0;

        i7 = 0;

     label5:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i7 >= $i1 goto label8;

        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i7);

        $r6 = (java.lang.Integer) $r5;

        i8 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        i9 = i6;

        if i8 == 0 goto label7;

        if i8 != 2 goto label6;

        i9 = i6;

        goto label7;

     label6:
        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i7);

        $r9 = (java.lang.String) $r8;

        r1[i6] = $r9;

        i9 = i6 + 1;

     label7:
        i7 = i7 + 1;

        i6 = i9;

        goto label5;

     label8:
        return r1;
    }

    private java.util.Set extractConcurrentCameraIdListLocked()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.Iterator r2, r4;
        java.lang.Integer r5;
        android.util.ArraySet $r6, $r9;
        java.util.Set $r7, r13;
        boolean $z0, $z3;
        java.lang.Object $r8, $r10, $r12;
        android.util.ArrayMap $r11;
        int $i0, $i1;
        java.lang.String r14;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set mConcurrentCameraIdCombinations>;

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Set) $r8;

        $r9 = new android.util.ArraySet;

        specialinvoke $r9.<android.util.ArraySet: void <init>()>();

        r4 = interfaceinvoke r13.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r10;

        $r11 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        r5 = (java.lang.Integer) $r12;

        if r5 != null goto label3;

        goto label2;

     label3:
        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i0 == 2 goto label2;

        $i1 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i1 != 0 goto label4;

        goto label2;

     label4:
        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r14);

        goto label2;

     label5:
        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label1;

     label6:
        return $r6;
    }

    public static android.hardware.camera2.CameraManager$CameraManagerGlobal get()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r0;

        $r0 = <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal gCameraManager>;

        return $r0;
    }

    private void handleRecoverableSetupErrors(android.os.ServiceSpecificException)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        android.os.ServiceSpecificException r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 := @parameter0: android.os.ServiceSpecificException;

        $i0 = r1.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 != 4 goto label1;

        $r3 = virtualinvoke r1.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraManagerGlobal", $r3);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r1);

        throw $r2;
    }

    private boolean isAvailable(int)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        return 0;

     label1:
        return 1;
    }

    static void lambda$postSingleTorchUpdate$0(android.hardware.camera2.CameraManager$TorchCallback, java.lang.String, int)
    {
        android.hardware.camera2.CameraManager$TorchCallback r0;
        java.lang.String r1;
        int i0;
        boolean z0;

        r0 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r0.<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeChanged(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static void lambda$postSingleTorchUpdate$1(android.hardware.camera2.CameraManager$TorchCallback, java.lang.String)
    {
        android.hardware.camera2.CameraManager$TorchCallback r0;
        java.lang.String r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeUnavailable(java.lang.String)>(r1);

        return;
    }

    private void onPhysicalCameraStatusChangedLocked(int, java.lang.String, java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0, i1, $i3, i5;
        java.lang.String r1, r2, $r18, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8;
        android.util.ArrayMap $r3, $r4, $r7, $r8, $r10, $r11, $r13;
        java.lang.Object $r5, $r9, $r12, $r14;
        java.lang.Integer $r6, $r17;
        android.hardware.camera2.CameraManager$AvailabilityCallback $r15;
        java.lang.Object[] $r16, $r21;
        java.util.ArrayList r19;
        java.util.concurrent.Executor r20;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean validStatus(int)>(i0);

        if $z0 != 0 goto label1;

        $r16 = newarray (java.lang.Object)[3];

        $r16[0] = r1;

        $r16[1] = r2;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r16[2] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Ignoring invalid device %s physical device %s status 0x%x", $r16);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManagerGlobal", $r18);

        return;

     label1:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $z1 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label8;

        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.Integer) $r5;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $z2 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isAvailable(int)>($i3);

        if $z2 == 0 goto label8;

        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mUnavailablePhysicalDevices>;

        $z3 = virtualinvoke $r7.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z3 != 0 goto label2;

        goto label8;

     label2:
        $r8 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mUnavailablePhysicalDevices>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r19 = (java.util.ArrayList) $r9;

        $z4 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isAvailable(int)>(i0);

        if $z4 != 0 goto label3;

        $z8 = virtualinvoke r19.<java.util.ArrayList: boolean contains(java.lang.Object)>(r2);

        if $z8 != 0 goto label3;

        virtualinvoke r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        goto label4;

     label3:
        $z5 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isAvailable(int)>(i0);

        if $z5 == 0 goto label7;

        $z6 = virtualinvoke r19.<java.util.ArrayList: boolean contains(java.lang.Object)>(r2);

        if $z6 == 0 goto label7;

        virtualinvoke r19.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

     label4:
        $r10 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        i1 = virtualinvoke $r10.<android.util.ArrayMap: int size()>();

        i5 = 0;

     label5:
        if i5 >= i1 goto label6;

        $r11 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        r20 = (java.util.concurrent.Executor) $r12;

        $r13 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        $r15 = (android.hardware.camera2.CameraManager$AvailabilityCallback) $r14;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor,java.lang.String,java.lang.String,int)>($r15, r20, r1, r2, i0);

        i5 = i5 + 1;

        goto label5;

     label6:
        return;

     label7:
        return;

     label8:
        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = r1;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Camera %s is not available. Ignore physical camera status change", $r21);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManagerGlobal", $r22);

        return;
    }

    private void onStatusChangedLocked(int, java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0, i1, $i2, $i3, i5;
        java.lang.String r1, $r21;
        java.lang.Integer r2, $r4, $r20, r22;
        boolean $z0, $z1, $z2;
        android.util.ArrayMap $r3, $r6, $r7, $r9, $r13, $r15, $r17;
        java.lang.Object $r5, $r8, $r10, $r16;
        android.hardware.camera2.CameraManager$AvailabilityCallback $r11;
        java.util.ArrayList $r12;
        java.lang.Object[] $r19;
        java.util.concurrent.Executor r23;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean validStatus(int)>(i0);

        if $z0 != 0 goto label1;

        $r19 = newarray (java.lang.Object)[2];

        $r19[0] = r1;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r19[1] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Ignoring invalid device %s status 0x%x", $r19);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManagerGlobal", $r21);

        return;

     label1:
        if i0 != 0 goto label2;

        $r15 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r16 = virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        r22 = (java.lang.Integer) $r16;

        $r17 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mUnavailablePhysicalDevices>;

        virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        r2 = (java.lang.Integer) $r5;

        r22 = r2;

        if r2 != null goto label3;

        $r13 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mUnavailablePhysicalDevices>;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r12);

        r22 = r2;

     label3:
        if r22 == null goto label4;

        $i3 = virtualinvoke r22.<java.lang.Integer: int intValue()>();

        if $i3 != i0 goto label4;

        return;

     label4:
        if r22 == null goto label5;

        $z1 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isAvailable(int)>(i0);

        $i2 = virtualinvoke r22.<java.lang.Integer: int intValue()>();

        $z2 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isAvailable(int)>($i2);

        if $z1 != $z2 goto label5;

        return;

     label5:
        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        i1 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        i5 = 0;

     label6:
        if i5 >= i1 goto label7;

        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        r23 = (java.util.concurrent.Executor) $r8;

        $r9 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        $r11 = (android.hardware.camera2.CameraManager$AvailabilityCallback) $r10;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor,java.lang.String,java.lang.String,int)>($r11, r23, r1, null, i0);

        i5 = i5 + 1;

        goto label6;

     label7:
        return;
    }

    private void onTorchStatusChangedLocked(int, java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0, i1, $i2, i4;
        java.lang.String r1, $r13;
        boolean $z0;
        android.util.ArrayMap $r2, $r5, $r6, $r8;
        java.lang.Integer $r3, $r12, r14;
        java.lang.Object $r4, $r7, $r9;
        android.hardware.camera2.CameraManager$TorchCallback $r10;
        java.lang.Object[] $r11;
        java.util.concurrent.Executor r15;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean validTorchStatus(int)>(i0);

        if $z0 != 0 goto label1;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Ignoring invalid device %s torch status 0x%x", $r11);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManagerGlobal", $r13);

        return;

     label1:
        $r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchStatus>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        r14 = (java.lang.Integer) $r4;

        if r14 == null goto label2;

        $i2 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        if $i2 != i0 goto label2;

        return;

     label2:
        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchCallbackMap>;

        i1 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        i4 = 0;

     label3:
        if i4 >= i1 goto label4;

        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchCallbackMap>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        r15 = (java.util.concurrent.Executor) $r7;

        $r8 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchCallbackMap>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i4);

        $r10 = (android.hardware.camera2.CameraManager$TorchCallback) $r9;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleTorchUpdate(android.hardware.camera2.CameraManager$TorchCallback,java.util.concurrent.Executor,java.lang.String,int)>($r10, r15, r1, i0);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    private void postSingleAccessPriorityChangeUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback, java.util.concurrent.Executor)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.Executor r1;
        long l0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal$3 r2;
        java.lang.Throwable $r3;
        android.hardware.camera2.CameraManager$AvailabilityCallback r4;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r4 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r1 := @parameter1: java.util.concurrent.Executor;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = new android.hardware.camera2.CameraManager$CameraManagerGlobal$3;

        specialinvoke r2.<android.hardware.camera2.CameraManager$CameraManagerGlobal$3: void <init>(android.hardware.camera2.CameraManager$CameraManagerGlobal,android.hardware.camera2.CameraManager$AvailabilityCallback)>(r0, r4);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void postSingleCameraClosedUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback, java.util.concurrent.Executor, java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.Executor r1;
        java.lang.String r2;
        long l0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal$5 r3;
        java.lang.Throwable $r4;
        android.hardware.camera2.CameraManager$AvailabilityCallback r5;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r5 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r3 = new android.hardware.camera2.CameraManager$CameraManagerGlobal$5;

        specialinvoke r3.<android.hardware.camera2.CameraManager$CameraManagerGlobal$5: void <init>(android.hardware.camera2.CameraManager$CameraManagerGlobal,android.hardware.camera2.CameraManager$AvailabilityCallback,java.lang.String)>(r0, r5, r2);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void postSingleCameraOpenedUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback, java.util.concurrent.Executor, java.lang.String, java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.Executor r1;
        java.lang.String r2, r3;
        long l0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal$4 r4;
        java.lang.Throwable $r5;
        android.hardware.camera2.CameraManager$AvailabilityCallback r6;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r6 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r4 = new android.hardware.camera2.CameraManager$CameraManagerGlobal$4;

        specialinvoke r4.<android.hardware.camera2.CameraManager$CameraManagerGlobal$4: void <init>(android.hardware.camera2.CameraManager$CameraManagerGlobal,android.hardware.camera2.CameraManager$AvailabilityCallback,java.lang.String,java.lang.String)>(r0, r6, r2, r3);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void postSingleTorchUpdate(android.hardware.camera2.CameraManager$TorchCallback, java.util.concurrent.Executor, java.lang.String, int)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.Executor r1;
        java.lang.String r2;
        int i0;
        java.lang.Throwable $r3, $r4;
        android.hardware.camera2.CameraManager$TorchCallback r5;
        long l1, l2;
        android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$6Ptxoe4wF_VCkE_pml8t66mklao r6;
        android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$CONvadOBAEkcHSpx8j61v67qRGM r8;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r5 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        if i0 == 1 goto label4;

        if i0 == 2 goto label4;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r6 = new android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$6Ptxoe4wF_VCkE_pml8t66mklao;

        specialinvoke r6.<android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$6Ptxoe4wF_VCkE_pml8t66mklao: void <init>(android.hardware.camera2.CameraManager$TorchCallback,java.lang.String)>(r5, r2);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label7;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

     label4:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label5:
        r8 = new android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$CONvadOBAEkcHSpx8j61v67qRGM;

        specialinvoke r8.<android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$CONvadOBAEkcHSpx8j61v67qRGM: void <init>(android.hardware.camera2.CameraManager$TorchCallback,java.lang.String,int)>(r5, r2, i0);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r8);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label7:
        return;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    private void postSingleUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback, java.util.concurrent.Executor, java.lang.String, java.lang.String, int)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.Executor r1;
        java.lang.String r2, r3;
        int i0;
        boolean $z0;
        java.lang.Throwable $r4, $r5;
        android.hardware.camera2.CameraManager$AvailabilityCallback r6;
        long l1, l2;
        android.hardware.camera2.CameraManager$CameraManagerGlobal$6 r7;
        android.hardware.camera2.CameraManager$CameraManagerGlobal$7 r9;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r6 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isAvailable(int)>(i0);

        if $z0 == 0 goto label4;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r7 = new android.hardware.camera2.CameraManager$CameraManagerGlobal$6;

        specialinvoke r7.<android.hardware.camera2.CameraManager$CameraManagerGlobal$6: void <init>(android.hardware.camera2.CameraManager$CameraManagerGlobal,java.lang.String,android.hardware.camera2.CameraManager$AvailabilityCallback,java.lang.String)>(r0, r3, r6, r2);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r7);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label7;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

     label4:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label5:
        r9 = new android.hardware.camera2.CameraManager$CameraManagerGlobal$7;

        specialinvoke r9.<android.hardware.camera2.CameraManager$CameraManagerGlobal$7: void <init>(android.hardware.camera2.CameraManager$CameraManagerGlobal,java.lang.String,android.hardware.camera2.CameraManager$AvailabilityCallback,java.lang.String)>(r0, r3, r6, r2);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label7:
        return;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    private void scheduleCameraServiceReconnectionLocked()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        android.util.ArrayMap $r1, $r4;
        boolean $z0, $z1;
        java.util.concurrent.TimeUnit $r2;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        java.util.concurrent.ScheduledExecutorService r10;
        android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$w1y8myi6vgxAcTEs8WArI_NN3R0 r11;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        $r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchCallbackMap>;

        $z1 = virtualinvoke $r4.<android.util.ArrayMap: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        r10 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.concurrent.ScheduledExecutorService mScheduler>;

        r11 = new android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$w1y8myi6vgxAcTEs8WArI_NN3R0;

        specialinvoke r11.<android.hardware.camera2._$$Lambda$CameraManager$CameraManagerGlobal$w1y8myi6vgxAcTEs8WArI_NN3R0: void <init>(android.hardware.camera2.CameraManager$CameraManagerGlobal)>(r0);

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke r10.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r11, 1000L, $r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to schedule camera service re-connect: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManagerGlobal", $r9);

     label4:
        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private static void sortCameraIds(java.lang.String[])
    {
        java.lang.String[] r0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal$1 $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new android.hardware.camera2.CameraManager$CameraManagerGlobal$1;

        specialinvoke $r1.<android.hardware.camera2.CameraManager$CameraManagerGlobal$1: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return;
    }

    private void updateCallbackLocked(android.hardware.camera2.CameraManager$AvailabilityCallback, java.util.concurrent.Executor)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        android.hardware.camera2.CameraManager$AvailabilityCallback r1;
        java.util.concurrent.Executor r2;
        java.lang.String r3, $r14;
        android.util.ArrayMap $r4, $r5, $r7, $r9, $r10;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r6, $r8, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r12;
        java.lang.Integer r15;
        java.util.Iterator r16;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r2 := @parameter1: java.util.concurrent.Executor;

        i3 = 0;

     label1:
        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $i0 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        if i3 >= $i0 goto label4;

        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        r3 = (java.lang.String) $r6;

        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        r15 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor,java.lang.String,java.lang.String,int)>(r1, r2, r3, null, $i1);

        $i2 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isAvailable(int)>($i2);

        if $z0 == 0 goto label3;

        $r9 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mUnavailablePhysicalDevices>;

        $z1 = virtualinvoke $r9.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

        $r10 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mUnavailablePhysicalDevices>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (java.util.ArrayList) $r11;

        r16 = virtualinvoke $r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r13 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r13;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor,java.lang.String,java.lang.String,int)>(r1, r2, r3, $r14, 0);

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    private void updateTorchCallbackLocked(android.hardware.camera2.CameraManager$TorchCallback, java.util.concurrent.Executor)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        android.hardware.camera2.CameraManager$TorchCallback r1;
        java.util.concurrent.Executor r2;
        android.util.ArrayMap $r3, $r4, $r6;
        int $i0, $i1, i2;
        java.lang.Object $r5, $r8;
        java.lang.String $r7;
        java.lang.Integer $r9;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        r2 := @parameter1: java.util.concurrent.Executor;

        i2 = 0;

     label1:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchStatus>;

        $i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label2;

        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchStatus>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r7 = (java.lang.String) $r5;

        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchStatus>;

        $r8 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r9 = (java.lang.Integer) $r8;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleTorchUpdate(android.hardware.camera2.CameraManager$TorchCallback,java.util.concurrent.Executor,java.lang.String,int)>(r1, r2, $r7, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private boolean validStatus(int)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        if i0 == -2 goto label1;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean validTorchStatus(int)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        return 0;

     label1:
        return 1;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        return r0;
    }

    public void binderDied()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1, $r8, $r11;
        android.hardware.ICameraService $r3;
        android.util.ArrayMap $r4, $r5, $r7, $r10;
        int $i0, $i1, i2, i3;
        java.util.Set $r6;
        java.lang.String $r9, $r12;
        java.lang.Throwable $r13;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        if $r3 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService> = null;

     label04:
        i2 = 0;

     label05:
        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $i0 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label07;

        $r10 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r12 = (java.lang.String) $r11;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onStatusChangedLocked(int,java.lang.String)>(0, $r12);

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        i3 = 0;

     label08:
        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchStatus>;

        $i1 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        if i3 >= $i1 goto label10;

        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchStatus>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        $r9 = (java.lang.String) $r8;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onTorchStatusChangedLocked(int,java.lang.String)>(0, $r9);

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set mConcurrentCameraIdCombinations>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void scheduleCameraServiceReconnectionLocked()>();

        exitmonitor r1;

     label11:
        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean cameraIdHasConcurrentStreamsLocked(java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.String r1;
        java.util.Iterator r2;
        android.util.ArrayMap $r3;
        boolean $z0, $z1, $z2;
        java.util.Set $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManagerGlobal", "cameraIdHasConcurrentStreamsLocked called on non existing camera id");

        return 0;

     label1:
        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set mConcurrentCameraIdCombinations>;

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Set) $r5;

        $z2 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public java.lang.String[] getCameraIdList()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String[] r3;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>();

        r3 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String[] extractCameraIdListLocked()>();

        exitmonitor r1;

     label2:
        staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: void sortCameraIds(java.lang.String[])>(r3);

        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String[] getCameraIdListNoLazy()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1, $r7, $r9;
        int i0, $i1, i2;
        java.lang.String r2, $r8, $r10;
        boolean $z0, $z1, $z2, $z3;
        android.hardware.camera2.CameraManager$CameraManagerGlobal$2 $r3;
        android.hardware.ICameraService $r4, $r5;
        android.util.ArrayMap $r6;
        java.lang.String[] $r11, r23;
        android.os.ServiceSpecificException $r12;
        android.os.RemoteException $r13;
        java.lang.Throwable $r14;
        android.hardware.CameraStatus[] r16;
        android.hardware.CameraStatus r17;
        java.util.Set r18;
        java.util.ArrayList r19;
        java.util.Iterator r20, r21;
        java.lang.IllegalStateException r25;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        $z0 = <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean sCameraServiceDisabled>;

        if $z0 == 0 goto label01;

        $r11 = newarray (java.lang.String)[0];

        return $r11;

     label01:
        $r3 = new android.hardware.camera2.CameraManager$CameraManagerGlobal$2;

        specialinvoke $r3.<android.hardware.camera2.CameraManager$CameraManagerGlobal$2: void <init>(android.hardware.camera2.CameraManager$CameraManagerGlobal)>(r0);

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>();

     label03:
        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        r16 = interfaceinvoke $r4.<android.hardware.ICameraService: android.hardware.CameraStatus[] addListener(android.hardware.ICameraServiceListener)>($r3);

        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        interfaceinvoke $r5.<android.hardware.ICameraService: void removeListener(android.hardware.ICameraServiceListener)>($r3);

        i0 = lengthof r16;

     label04:
        i2 = 0;

     label05:
        if i2 >= i0 goto label08;

        r17 = r16[i2];

     label06:
        $i1 = r17.<android.hardware.CameraStatus: int status>;

        $r10 = r17.<android.hardware.CameraStatus: java.lang.String cameraId>;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onStatusChangedLocked(int,java.lang.String)>($i1, $r10);

     label07:
        i2 = i2 + 1;

        goto label05;

     label08:
        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mDeviceStatus>;

        r18 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Set keySet()>();

        r19 = new java.util.ArrayList;

        specialinvoke r19.<java.util.ArrayList: void <init>()>();

        r20 = interfaceinvoke r18.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r9 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r9;

        $z3 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean cameraStatusesContains(android.hardware.CameraStatus[],java.lang.String)>(r16, r2);

        if $z3 != 0 goto label10;

        virtualinvoke r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label10:
        goto label09;

     label11:
        r21 = virtualinvoke r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r7 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onStatusChangedLocked(int,java.lang.String)>(0, $r8);

     label13:
        goto label12;

     label14:
        goto label16;

     label15:
        $r13 := @caughtexception;

     label16:
        r23 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String[] extractCameraIdListLocked()>();

        exitmonitor r1;

     label17:
        staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: void sortCameraIds(java.lang.String[])>(r23);

        return r23;

     label18:
        $r12 := @caughtexception;

     label19:
        r25 = new java.lang.IllegalStateException;

        specialinvoke r25.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to register a camera service listener", $r12);

        throw r25;

     label20:
        $r14 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label20;
        catch android.os.ServiceSpecificException from label03 to label04 with label18;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch android.os.ServiceSpecificException from label06 to label07 with label18;
        catch android.os.RemoteException from label06 to label07 with label15;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch android.os.ServiceSpecificException from label08 to label09 with label18;
        catch android.os.RemoteException from label08 to label09 with label15;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch android.os.ServiceSpecificException from label09 to label10 with label18;
        catch android.os.RemoteException from label09 to label10 with label15;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch android.os.ServiceSpecificException from label11 to label12 with label18;
        catch android.os.RemoteException from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch android.os.ServiceSpecificException from label12 to label13 with label18;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public android.hardware.ICameraService getCameraService()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1;
        android.hardware.ICameraService $r2, r4;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>();

        $r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        if $r2 != null goto label2;

        $z0 = <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean sCameraServiceDisabled>;

        if $z0 != 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManagerGlobal", "Camera service is unavailable");

     label2:
        r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        exitmonitor r1;

     label3:
        return r4;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.Set getConcurrentCameraIds()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.util.Set r3;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>();

        r3 = specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set extractConcurrentCameraIdListLocked()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isConcurrentSessionConfigurationSupported(java.util.Map) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0, i2;
        java.lang.Object r1, $r8, $r10, $r12, $r14;
        java.util.Map$Entry r2;
        boolean z0, $z1, $z2, $z3, z4;
        java.lang.IllegalArgumentException $r3, $r4;
        java.util.Set $r5, $r6, $r15, $r16;
        android.hardware.ICameraService $r7;
        android.hardware.camera2.utils.CameraIdAndSessionConfiguration $r9;
        java.lang.String $r11;
        android.hardware.camera2.params.SessionConfiguration $r13;
        android.os.RemoteException $r17;
        java.lang.Throwable $r18;
        android.os.ServiceSpecificException $r19;
        java.util.Map r20;
        java.util.Iterator r21, r23;
        android.hardware.camera2.utils.CameraIdAndSessionConfiguration[] r22;
        android.hardware.camera2.CameraAccessException r25;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r20 := @parameter0: java.util.Map;

        if r20 == null goto label27;

        i0 = interfaceinvoke r20.<java.util.Map: int size()>();

        if i0 == 0 goto label26;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

        z4 = 0;

     label01:
        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set mConcurrentCameraIdCombinations>;

        r21 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

     label03:
        $r14 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.util.Set) $r14;

        $r16 = interfaceinvoke r20.<java.util.Map: java.util.Set keySet()>();

        $z3 = interfaceinvoke $r15.<java.util.Set: boolean containsAll(java.util.Collection)>($r16);

        if $z3 == 0 goto label05;

     label04:
        z4 = 1;

     label05:
        goto label02;

     label06:
        if z4 != 0 goto label09;

     label07:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraManagerGlobal", "isConcurrentSessionConfigurationSupported called with a subset ofcamera ids not returned by getConcurrentCameraIds");

        exitmonitor r1;

     label08:
        return 0;

     label09:
        r22 = newarray (android.hardware.camera2.utils.CameraIdAndSessionConfiguration)[i0];

     label10:
        i2 = 0;

     label11:
        $r6 = interfaceinvoke r20.<java.util.Map: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r8 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r8;

        $r9 = new android.hardware.camera2.utils.CameraIdAndSessionConfiguration;

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (android.hardware.camera2.params.SessionConfiguration) $r12;

        specialinvoke $r9.<android.hardware.camera2.utils.CameraIdAndSessionConfiguration: void <init>(java.lang.String,android.hardware.camera2.params.SessionConfiguration)>($r11, $r13);

        r22[i2] = $r9;

     label13:
        i2 = i2 + 1;

        goto label12;

     label14:
        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        z0 = interfaceinvoke $r7.<android.hardware.ICameraService: boolean isConcurrentSessionConfigurationSupported(android.hardware.camera2.utils.CameraIdAndSessionConfiguration[])>(r22);

     label15:
        exitmonitor r1;

     label16:
        return z0;

     label17:
        $r17 := @caughtexception;

     label18:
        r25 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r25.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>(2, "Camera service is currently unavailable", $r17);

        throw r25;

     label19:
        $r19 := @caughtexception;

     label20:
        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r19);

     label21:
        exitmonitor r1;

     label22:
        return 0;

     label23:
        $r18 := @caughtexception;

     label24:
        exitmonitor r1;

     label25:
        throw $r18;

     label26:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("camera id and session combination is empty");

        throw $r4;

     label27:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cameraIdsAndSessionConfigurations was null");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch android.os.ServiceSpecificException from label14 to label15 with label19;
        catch android.os.RemoteException from label14 to label15 with label17;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    public void lambda$scheduleCameraServiceReconnectionLocked$2$CameraManager$CameraManagerGlobal()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1;
        android.hardware.ICameraService $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        $r3 = virtualinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService getCameraService()>();

        if $r3 != null goto label6;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void scheduleCameraServiceReconnectionLocked()>();

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onCameraAccessPrioritiesChanged()
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1, $r4, $r6;
        int i0, i1;
        android.util.ArrayMap $r2, $r3, $r5;
        android.hardware.camera2.CameraManager$AvailabilityCallback $r7;
        java.lang.Throwable $r8;
        java.util.concurrent.Executor r9;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r9 = (java.util.concurrent.Executor) $r4;

        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r7 = (android.hardware.camera2.CameraManager$AvailabilityCallback) $r6;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleAccessPriorityChangeUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor)>($r7, r9);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void onCameraClosed(java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1, $r5, $r7;
        int i0, i1;
        java.util.concurrent.Executor r2;
        android.util.ArrayMap $r3, $r4, $r6;
        android.hardware.camera2.CameraManager$AvailabilityCallback $r8;
        java.lang.Throwable $r9;
        java.lang.String r10;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r10 := @parameter0: java.lang.String;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r2 = (java.util.concurrent.Executor) $r5;

        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r8 = (android.hardware.camera2.CameraManager$AvailabilityCallback) $r7;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleCameraClosedUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor,java.lang.String)>($r8, r2, r10);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void onCameraOpened(java.lang.String, java.lang.String)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.String r1, r11;
        java.lang.Object r2, $r6, $r8;
        int i0, i1;
        java.util.concurrent.Executor r3;
        android.util.ArrayMap $r4, $r5, $r7;
        android.hardware.camera2.CameraManager$AvailabilityCallback $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r4 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        i0 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r5 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r3 = (java.util.concurrent.Executor) $r6;

        $r7 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r9 = (android.hardware.camera2.CameraManager$AvailabilityCallback) $r8;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void postSingleCameraOpenedUpdate(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor,java.lang.String,java.lang.String)>($r9, r3, r11, r1);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void onPhysicalCameraStatusChanged(int, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0;
        java.lang.String r1, r4;
        java.lang.Object r2;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onPhysicalCameraStatusChangedLocked(int,java.lang.String,java.lang.String)>(i0, r4, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onStatusChanged(int, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onStatusChangedLocked(int,java.lang.String)>(i0, r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onTorchStatusChanged(int, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onTorchStatusChangedLocked(int,java.lang.String)>(i0, r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback, java.util.concurrent.Executor)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.Executor r1, $r5;
        java.lang.Object r2, $r4;
        android.util.ArrayMap $r3;
        android.hardware.ICameraService $r6;
        java.lang.Throwable $r7;
        android.hardware.camera2.CameraManager$AvailabilityCallback r8;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r8 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>();

        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r1);

        $r5 = (java.util.concurrent.Executor) $r4;

        if $r5 != null goto label2;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void updateCallbackLocked(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor)>(r8, r1);

     label2:
        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        if $r6 != null goto label3;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void scheduleCameraServiceReconnectionLocked()>();

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback, java.util.concurrent.Executor)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.util.concurrent.Executor r1, $r5;
        java.lang.Object r2, $r4;
        android.util.ArrayMap $r3;
        android.hardware.ICameraService $r6;
        java.lang.Throwable $r7;
        android.hardware.camera2.CameraManager$TorchCallback r8;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r8 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>();

        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchCallbackMap>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r1);

        $r5 = (java.util.concurrent.Executor) $r4;

        if $r5 != null goto label2;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void updateTorchCallbackLocked(android.hardware.camera2.CameraManager$TorchCallback,java.util.concurrent.Executor)>(r8, r1);

     label2:
        $r6 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService mCameraService>;

        if $r6 != null goto label3;

        specialinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void scheduleCameraServiceReconnectionLocked()>();

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setTorchMode(java.lang.String, boolean) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        boolean z0;
        java.lang.Object r1;
        android.hardware.ICameraService r2;
        android.os.Binder $r3;
        java.lang.Throwable $r4;
        android.os.ServiceSpecificException $r5;
        android.os.RemoteException $r6;
        java.lang.String r7;
        android.hardware.camera2.CameraAccessException r9, r11;
        java.lang.IllegalArgumentException r13;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r7 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

        if r7 == null goto label14;

     label01:
        r2 = virtualinvoke r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService getCameraService()>();

     label02:
        if r2 == null goto label12;

     label03:
        $r3 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.os.Binder mTorchClientBinder>;

        interfaceinvoke r2.<android.hardware.ICameraService: void setTorchMode(java.lang.String,boolean,android.os.IBinder)>(r7, z0, $r3);

     label04:
        goto label10;

     label05:
        $r6 := @caughtexception;

     label06:
        r9 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r9.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(2, "Camera service is currently unavailable");

        throw r9;

     label07:
        $r5 := @caughtexception;

     label08:
        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r5);

     label09:
        goto label04;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        r11 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r11.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(2, "Camera service is currently unavailable");

        throw r11;

     label13:
        $r4 := @caughtexception;

        goto label15;

     label14:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cameraId was null");

        throw r13;

     label15:
        exitmonitor r1;

     label16:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch android.os.ServiceSpecificException from label03 to label04 with label07;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
    }

    public void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        android.hardware.camera2.CameraManager$AvailabilityCallback r5;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r5 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mCallbackMap>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void unregisterTorchCallback(android.hardware.camera2.CameraManager$TorchCallback)
    {
        android.hardware.camera2.CameraManager$CameraManagerGlobal r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        android.hardware.camera2.CameraManager$TorchCallback r5;

        r0 := @this: android.hardware.camera2.CameraManager$CameraManagerGlobal;

        r5 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        r1 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.util.ArrayMap mTorchCallbackMap>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
