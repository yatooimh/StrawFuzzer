public final class android.hardware.camera2.CameraManager extends java.lang.Object
{
    private static final int API_VERSION_1;
    private static final int API_VERSION_2;
    private static final int CAMERA_TYPE_ALL;
    private static final int CAMERA_TYPE_BACKWARD_COMPATIBLE;
    private static final java.lang.String TAG;
    private static final int USE_CALLING_UID;
    private final boolean DEBUG;
    private final android.content.Context mContext;
    private java.util.ArrayList mDeviceIdList;
    private final java.lang.Object mLock;

    public void <init>(android.content.Context)
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        android.content.Context r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r4 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CameraManager: boolean DEBUG> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock> = $r2;

        entermonitor $r2;

     label1:
        r0.<android.hardware.camera2.CameraManager: android.content.Context mContext> = r4;

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor $r2;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.util.Size getDisplaySize()
    {
        android.hardware.camera2.CameraManager r0;
        int i0, i1, i4, i5;
        android.util.Size $r2, r12, r14;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.hardware.display.DisplayManager $r5;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r11;
        android.view.Display r13;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r2 = new android.util.Size;

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>(0, 0);

        r12 = $r2;

     label01:
        $r3 = r0.<android.hardware.camera2.CameraManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r5 = (android.hardware.display.DisplayManager) $r4;

        r13 = virtualinvoke $r5.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

     label02:
        if r13 == null goto label08;

     label03:
        i0 = virtualinvoke r13.<android.view.Display: int getWidth()>();

        i1 = virtualinvoke r13.<android.view.Display: int getHeight()>();

     label04:
        i4 = i0;

        i5 = i1;

        if i1 <= i0 goto label06;

        i5 = i0;

     label05:
        i4 = virtualinvoke r13.<android.view.Display: int getHeight()>();

     label06:
        r14 = new android.util.Size;

        specialinvoke r14.<android.util.Size: void <init>(int,int)>(i4, i5);

     label07:
        r12 = r14;

        goto label09;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManager", "Invalid default display!");

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDisplaySize Failed. ");

        $r9 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManager", $r11);

     label11:
        return r12;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label06 with label10;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public static boolean isHiddenPhysicalCamera(java.lang.String)
    {
        android.hardware.ICameraService r0;
        boolean z0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        r0 = virtualinvoke $r1.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService getCameraService()>();

     label2:
        if r0 != null goto label3;

        return 0;

     label3:
        z0 = interfaceinvoke r0.<android.hardware.ICameraService: boolean isHiddenPhysicalCamera(java.lang.String)>(r3);

     label4:
        return z0;

     label5:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private android.hardware.camera2.CameraDevice openCameraDeviceUserAsync(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, java.util.concurrent.Executor, int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraCharacteristics r1;
        java.lang.Object r2;
        android.hardware.camera2.impl.CameraDeviceImpl r3;
        android.content.Context $r4, $r8, $r10;
        android.content.pm.ApplicationInfo $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11;
        boolean $z0;
        android.util.Size $r6;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r7;
        java.lang.String $r9, $r11, $r17, r20;
        android.os.RemoteException $r12, $r18;
        java.lang.Throwable $r13, $r14, $r16, r32;
        android.os.ServiceSpecificException $r15, $r19, r26, r29, r30;
        android.hardware.camera2.CameraDevice$StateCallback r21;
        java.util.concurrent.Executor r22;
        android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks r23;
        android.hardware.ICameraService r24;
        android.hardware.camera2.ICameraDeviceUser r25;
        java.lang.IllegalArgumentException r27;
        java.lang.StringBuilder r28;
        java.lang.AssertionError r31;

        r0 := @this: android.hardware.camera2.CameraManager;

        r20 := @parameter0: java.lang.String;

        r21 := @parameter1: android.hardware.camera2.CameraDevice$StateCallback;

        r22 := @parameter2: java.util.concurrent.Executor;

        i9 := @parameter3: int;

        r1 = virtualinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>(r20);

        r2 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r3 = new android.hardware.camera2.impl.CameraDeviceImpl;

        $r4 = r0.<android.hardware.camera2.CameraManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        specialinvoke r3.<android.hardware.camera2.impl.CameraDeviceImpl: void <init>(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,java.util.concurrent.Executor,android.hardware.camera2.CameraCharacteristics,int)>(r20, r21, r22, r1, $i0);

        r23 = virtualinvoke r3.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks getCallbacks()>();

     label02:
        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager: boolean supportsCamera2ApiLocked(java.lang.String)>(r20);

        if $z0 == 0 goto label07;

        $r7 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        r24 = virtualinvoke $r7.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService getCameraService()>();

     label03:
        if r24 == null goto label06;

     label04:
        $r8 = r0.<android.hardware.camera2.CameraManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getOpPackageName()>();

        $r10 = r0.<android.hardware.camera2.CameraManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.String getAttributionTag()>();

        r25 = interfaceinvoke r24.<android.hardware.ICameraService: android.hardware.camera2.ICameraDeviceUser connectDevice(android.hardware.camera2.ICameraDeviceCallbacks,java.lang.String,java.lang.String,java.lang.String,int)>(r23, r20, $r9, $r11, i9);

     label05:
        goto label10;

     label06:
        r26 = new android.os.ServiceSpecificException;

        specialinvoke r26.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Camera service is currently unavailable");

        throw r26;

     label07:
        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r20);

     label08:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CameraManager", "Using legacy camera HAL.");

     label09:
        $r6 = specialinvoke r0.<android.hardware.camera2.CameraManager: android.util.Size getDisplaySize()>();

        r25 = staticinvoke <android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim connectBinderShim(android.hardware.camera2.ICameraDeviceCallbacks,int,android.util.Size)>(r23, i10, $r6);

     label10:
        goto label27;

     label11:
        $r16 := @caughtexception;

     label12:
        r27 = new java.lang.IllegalArgumentException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected cameraId to be numeric, but it was: ");

     label13:
        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r17 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw r27;

     label14:
        $r18 := @caughtexception;

        goto label17;

     label15:
        $r19 := @caughtexception;

        r29 = $r19;

        goto label20;

     label16:
        $r12 := @caughtexception;

     label17:
        r30 = new android.os.ServiceSpecificException;

        specialinvoke r30.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Camera service is currently unavailable");

        virtualinvoke r3.<android.hardware.camera2.impl.CameraDeviceImpl: void setRemoteFailure(android.os.ServiceSpecificException)>(r30);

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>(r30);

     label18:
        r25 = null;

        goto label27;

     label19:
        $r15 := @caughtexception;

        r29 = $r15;

     label20:
        $i1 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i1 == 9 goto label29;

        $i2 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i2 == 7 goto label24;

        $i5 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i5 == 8 goto label24;

        $i6 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i6 == 6 goto label24;

        $i7 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i7 == 4 goto label24;

        $i8 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i8 != 10 goto label22;

     label21:
        goto label24;

     label22:
        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>(r29);

     label23:
        goto label26;

     label24:
        virtualinvoke r3.<android.hardware.camera2.impl.CameraDeviceImpl: void setRemoteFailure(android.os.ServiceSpecificException)>(r29);

        $i11 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i11 == 6 goto label25;

        $i3 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i3 == 4 goto label25;

        $i4 = r29.<android.os.ServiceSpecificException: int errorCode>;

        if $i4 != 7 goto label26;

     label25:
        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>(r29);

     label26:
        r25 = null;

     label27:
        virtualinvoke r3.<android.hardware.camera2.impl.CameraDeviceImpl: void setRemoteDevice(android.hardware.camera2.ICameraDeviceUser)>(r25);

        exitmonitor r2;

     label28:
        return r3;

     label29:
        r31 = new java.lang.AssertionError;

        specialinvoke r31.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should\'ve gone down the shim path");

        throw r31;

     label30:
        $r13 := @caughtexception;

        r32 = $r13;

     label31:
        exitmonitor r2;

     label32:
        throw r32;

     label33:
        $r14 := @caughtexception;

        r32 = $r14;

        goto label31;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch android.os.ServiceSpecificException from label02 to label03 with label19;
        catch android.os.RemoteException from label02 to label03 with label16;
        catch java.lang.Throwable from label02 to label03 with label30;
        catch android.os.ServiceSpecificException from label04 to label05 with label19;
        catch android.os.RemoteException from label04 to label05 with label16;
        catch java.lang.Throwable from label04 to label05 with label30;
        catch android.os.ServiceSpecificException from label06 to label07 with label19;
        catch android.os.RemoteException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label30;
        catch java.lang.NumberFormatException from label07 to label08 with label11;
        catch android.os.ServiceSpecificException from label07 to label08 with label19;
        catch android.os.RemoteException from label07 to label08 with label16;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch android.os.ServiceSpecificException from label08 to label09 with label19;
        catch android.os.RemoteException from label08 to label09 with label16;
        catch java.lang.Throwable from label08 to label09 with label30;
        catch android.os.ServiceSpecificException from label09 to label10 with label19;
        catch android.os.RemoteException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch android.os.ServiceSpecificException from label12 to label13 with label19;
        catch android.os.RemoteException from label12 to label13 with label16;
        catch java.lang.Throwable from label12 to label13 with label30;
        catch android.os.ServiceSpecificException from label13 to label14 with label15;
        catch android.os.RemoteException from label13 to label14 with label14;
        catch java.lang.Throwable from label13 to label14 with label33;
        catch java.lang.Throwable from label17 to label18 with label33;
        catch java.lang.Throwable from label20 to label21 with label33;
        catch java.lang.Throwable from label22 to label23 with label33;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label25 to label26 with label33;
        catch java.lang.Throwable from label27 to label28 with label33;
        catch java.lang.Throwable from label29 to label30 with label33;
        catch java.lang.Throwable from label31 to label32 with label33;
    }

    private boolean supportsCamera2ApiLocked(java.lang.String)
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager: boolean supportsCameraApiLocked(java.lang.String,int)>(r1, 2);

        return $z0;
    }

    private boolean supportsCameraApiLocked(java.lang.String, int)
    {
        android.hardware.camera2.CameraManager r0;
        int i0;
        android.hardware.ICameraService r1;
        boolean z0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r2;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        r1 = virtualinvoke $r2.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService getCameraService()>();

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        z0 = interfaceinvoke r1.<android.hardware.ICameraService: boolean supportsCameraApi(java.lang.String,int)>(r4, i0);

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public static void throwAsPublicException(java.lang.Throwable) throws android.hardware.camera2.CameraAccessException
    {
        boolean $z0, $z1, $z2, $z3;
        android.hardware.camera2.CameraAccessException $r0, $r9;
        java.lang.UnsupportedOperationException $r1;
        java.lang.RuntimeException $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4, $r6, $r10;
        java.lang.SecurityException $r5;
        java.lang.Throwable r7;
        android.os.ServiceSpecificException r8;
        short s1;

        r7 := @parameter0: java.lang.Throwable;

        $z0 = r7 instanceof android.os.ServiceSpecificException;

        if $z0 == 0 goto label10;

        r8 = (android.os.ServiceSpecificException) r7;

        $i0 = r8.<android.os.ServiceSpecificException: int errorCode>;

        tableswitch($i0)
        {
            case 1: goto label08;
            case 2: goto label07;
            case 3: goto label07;
            case 4: goto label06;
            case 5: goto label01;
            case 6: goto label05;
            case 7: goto label04;
            case 8: goto label03;
            case 9: goto label02;
            default: goto label01;
        };

     label01:
        s1 = 3;

        goto label09;

     label02:
        s1 = 1000;

        goto label09;

     label03:
        s1 = 5;

        goto label09;

     label04:
        s1 = 4;

        goto label09;

     label05:
        s1 = 1;

        goto label09;

     label06:
        s1 = 2;

        goto label09;

     label07:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke r8.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r4, r8);

        throw $r3;

     label08:
        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke r8.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r8);

        throw $r5;

     label09:
        $r9 = new android.hardware.camera2.CameraAccessException;

        $r10 = virtualinvoke r8.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r9.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>(s1, $r10, r8);

        throw $r9;

     label10:
        $z1 = r7 instanceof android.os.DeadObjectException;

        if $z1 != 0 goto label13;

        $z2 = r7 instanceof android.os.RemoteException;

        if $z2 != 0 goto label12;

        $z3 = r7 instanceof java.lang.RuntimeException;

        if $z3 != 0 goto label11;

        return;

     label11:
        $r2 = (java.lang.RuntimeException) r7;

        throw $r2;

     label12:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("An unknown RemoteException was thrown which should never happen.", r7);

        throw $r1;

     label13:
        $r0 = new android.hardware.camera2.CameraAccessException;

        specialinvoke $r0.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>(2, "Camera service has died unexpectedly", r7);

        throw $r0;
    }

    public android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.Object r1;
        android.util.Size r2;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r3;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r4, $r5;
        android.hardware.camera2.CameraCharacteristics $r6, r16;
        java.lang.String $r7, $r13, r14;
        android.hardware.CameraInfo $r8;
        java.lang.Throwable $r9, $r12;
        android.os.ServiceSpecificException $r10;
        android.os.RemoteException $r11;
        android.hardware.ICameraService r15;
        android.hardware.camera2.impl.CameraMetadataNative r17;
        java.lang.StringBuilder r18;
        android.hardware.camera2.CameraAccessException r20, r22;

        r0 := @this: android.hardware.camera2.CameraManager;

        r14 := @parameter0: java.lang.String;

        $z0 = <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean sCameraServiceDisabled>;

        if $z0 != 0 goto label23;

        r1 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        r15 = virtualinvoke $r4.<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService getCameraService()>();

     label02:
        if r15 == null goto label19;

     label03:
        r2 = specialinvoke r0.<android.hardware.camera2.CameraManager: android.util.Size getDisplaySize()>();

        $z1 = staticinvoke <android.hardware.camera2.CameraManager: boolean isHiddenPhysicalCamera(java.lang.String)>(r14);

        if $z1 != 0 goto label05;

        $z3 = specialinvoke r0.<android.hardware.camera2.CameraManager: boolean supportsCamera2ApiLocked(java.lang.String)>(r14);

        if $z3 != 0 goto label05;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r14);

        $r7 = interfaceinvoke r15.<android.hardware.ICameraService: java.lang.String getLegacyParameters(int)>(i0);

        $r8 = interfaceinvoke r15.<android.hardware.ICameraService: android.hardware.CameraInfo getCameraInfo(int)>(i0);

        r16 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.CameraCharacteristics createCharacteristics(java.lang.String,android.hardware.CameraInfo,int,android.util.Size)>($r7, $r8, i0, r2);

     label04:
        goto label17;

     label05:
        r17 = interfaceinvoke r15.<android.hardware.ICameraService: android.hardware.camera2.impl.CameraMetadataNative getCameraCharacteristics(java.lang.String)>(r14);

     label06:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r14);

        virtualinvoke r17.<android.hardware.camera2.impl.CameraMetadataNative: void setCameraId(int)>($i1);

     label07:
        goto label10;

     label08:
        $r12 := @caughtexception;

     label09:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse camera Id ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to integer");

        $r13 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraManager", $r13);

     label10:
        $r5 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        $z2 = virtualinvoke $r5.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean cameraIdHasConcurrentStreamsLocked(java.lang.String)>(r14);

        virtualinvoke r17.<android.hardware.camera2.impl.CameraMetadataNative: void setHasMandatoryConcurrentStreams(boolean)>($z2);

        virtualinvoke r17.<android.hardware.camera2.impl.CameraMetadataNative: void setDisplaySize(android.util.Size)>(r2);

        $r6 = new android.hardware.camera2.CameraCharacteristics;

        specialinvoke $r6.<android.hardware.camera2.CameraCharacteristics: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r17);

        r16 = $r6;

     label11:
        goto label17;

     label12:
        $r11 := @caughtexception;

     label13:
        r20 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r20.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>(2, "Camera service is currently unavailable", $r11);

        throw r20;

     label14:
        $r10 := @caughtexception;

     label15:
        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r10);

     label16:
        r16 = null;

     label17:
        exitmonitor r1;

     label18:
        return r16;

     label19:
        r22 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r22.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(2, "Camera service is currently unavailable");

        throw r22;

     label20:
        $r9 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r9;

     label23:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No cameras available on device");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch android.os.ServiceSpecificException from label03 to label04 with label14;
        catch android.os.RemoteException from label03 to label04 with label12;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch android.os.ServiceSpecificException from label05 to label06 with label14;
        catch android.os.RemoteException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.NumberFormatException from label06 to label07 with label08;
        catch android.os.ServiceSpecificException from label06 to label07 with label14;
        catch android.os.RemoteException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch android.os.ServiceSpecificException from label09 to label10 with label14;
        catch android.os.RemoteException from label09 to label10 with label12;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch android.os.ServiceSpecificException from label10 to label11 with label14;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public java.lang.String[] getCameraIdList() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r1;
        java.lang.String[] $r2;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r1 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        $r2 = virtualinvoke $r1.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String[] getCameraIdList()>();

        return $r2;
    }

    public java.lang.String[] getCameraIdListNoLazy() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r1;
        java.lang.String[] $r2;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r1 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        $r2 = virtualinvoke $r1.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String[] getCameraIdListNoLazy()>();

        return $r2;
    }

    public java.util.Set getConcurrentCameraIds() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r1;
        java.util.Set $r2;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r1 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        $r2 = virtualinvoke $r1.<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set getConcurrentCameraIds()>();

        return $r2;
    }

    public boolean isConcurrentSessionConfigurationSupported(java.util.Map) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.util.Map r1;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r2;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.util.Map;

        $r2 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        $z0 = virtualinvoke $r2.<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isConcurrentSessionConfigurationSupported(java.util.Map)>(r1);

        return $z0;
    }

    public void openCamera(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        android.hardware.camera2.CameraDevice$StateCallback r2;
        android.os.Handler r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r3);

        virtualinvoke r0.<android.hardware.camera2.CameraManager: void openCameraForUid(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,java.util.concurrent.Executor,int)>(r1, r2, $r4, -1);

        return;
    }

    public void openCamera(java.lang.String, java.util.concurrent.Executor, android.hardware.camera2.CameraDevice$StateCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraDevice$StateCallback r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraDevice$StateCallback;

        if r2 == null goto label1;

        virtualinvoke r0.<android.hardware.camera2.CameraManager: void openCameraForUid(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,java.util.concurrent.Executor,int)>(r1, r3, r2, -1);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("executor was null");

        throw $r4;
    }

    public void openCameraForUid(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, java.util.concurrent.Executor, int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        android.hardware.camera2.CameraDevice$StateCallback r2;
        java.util.concurrent.Executor r3;
        int i0;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateCallback;

        r3 := @parameter2: java.util.concurrent.Executor;

        i0 := @parameter3: int;

        if r1 == null goto label3;

        if r2 == null goto label2;

        $z0 = <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean sCameraServiceDisabled>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraDevice openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,java.util.concurrent.Executor,int)>(r1, r2, r3, i0);

        return;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No cameras available on device");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback was null");

        throw $r5;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cameraId was null");

        throw $r4;
    }

    public void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback, android.os.Handler)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$AvailabilityCallback r1;
        android.os.Handler r2;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r2 := @parameter1: android.os.Handler;

        $r3 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        $r4 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r2);

        virtualinvoke $r3.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor)>(r1, $r4);

        return;
    }

    public void registerAvailabilityCallback(java.util.concurrent.Executor, android.hardware.camera2.CameraManager$AvailabilityCallback)
    {
        android.hardware.camera2.CameraManager r0;
        java.util.concurrent.Executor r1;
        android.hardware.camera2.CameraManager$AvailabilityCallback r2;
        java.lang.IllegalArgumentException $r3;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.camera2.CameraManager$AvailabilityCallback;

        if r1 == null goto label1;

        $r4 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        virtualinvoke $r4.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor)>(r2, r1);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("executor was null");

        throw $r3;
    }

    public void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback, android.os.Handler)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$TorchCallback r1;
        android.os.Handler r2;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        r2 := @parameter1: android.os.Handler;

        $r3 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        $r4 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r2);

        virtualinvoke $r3.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback,java.util.concurrent.Executor)>(r1, $r4);

        return;
    }

    public void registerTorchCallback(java.util.concurrent.Executor, android.hardware.camera2.CameraManager$TorchCallback)
    {
        android.hardware.camera2.CameraManager r0;
        java.util.concurrent.Executor r1;
        android.hardware.camera2.CameraManager$TorchCallback r2;
        java.lang.IllegalArgumentException $r3;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.camera2.CameraManager$TorchCallback;

        if r1 == null goto label1;

        $r4 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        virtualinvoke $r4.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback,java.util.concurrent.Executor)>(r2, r1);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("executor was null");

        throw $r3;
    }

    public void setTorchMode(java.lang.String, boolean) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r2;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r3;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = <android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean sCameraServiceDisabled>;

        if $z1 != 0 goto label1;

        $r3 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        virtualinvoke $r3.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void setTorchMode(java.lang.String,boolean)>(r1, z0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No cameras available on device");

        throw $r2;
    }

    public void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$AvailabilityCallback r1;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r2;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        $r2 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        virtualinvoke $r2.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)>(r1);

        return;
    }

    public void unregisterTorchCallback(android.hardware.camera2.CameraManager$TorchCallback)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$TorchCallback r1;
        android.hardware.camera2.CameraManager$CameraManagerGlobal $r2;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$TorchCallback;

        $r2 = staticinvoke <android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()>();

        virtualinvoke $r2.<android.hardware.camera2.CameraManager$CameraManagerGlobal: void unregisterTorchCallback(android.hardware.camera2.CameraManager$TorchCallback)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.CameraManager: int USE_CALLING_UID> = -1;

        <android.hardware.camera2.CameraManager: java.lang.String TAG> = "CameraManager";

        <android.hardware.camera2.CameraManager: int CAMERA_TYPE_BACKWARD_COMPATIBLE> = 0;

        <android.hardware.camera2.CameraManager: int CAMERA_TYPE_ALL> = 1;

        <android.hardware.camera2.CameraManager: int API_VERSION_2> = 2;

        <android.hardware.camera2.CameraManager: int API_VERSION_1> = 1;

        return;
    }
}
