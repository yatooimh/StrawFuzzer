public final class android.hardware.camera2.CaptureRequest extends android.hardware.camera2.CameraMetadata implements android.os.Parcelable
{
    public static final android.hardware.camera2.CaptureRequest$Key BLACK_LEVEL_LOCK;
    public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_GAINS;
    public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_TRANSFORM;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_ENABLE_ZSL;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_EXTENDED_SCENE_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_POST_RAW_SENSITIVITY_BOOST;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO;
    public static final android.os.Parcelable$Creator CREATOR;
    public static final android.hardware.camera2.CaptureRequest$Key DISTORTION_CORRECTION_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key EDGE_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key FLASH_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key HOT_PIXEL_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_GPS_COORDINATES;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_GPS_PROCESSING_METHOD;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_GPS_TIMESTAMP;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY;
    public static final android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE;
    public static final android.hardware.camera2.CaptureRequest$Key LED_TRANSMIT;
    public static final android.hardware.camera2.CaptureRequest$Key LENS_APERTURE;
    public static final android.hardware.camera2.CaptureRequest$Key LENS_FILTER_DENSITY;
    public static final android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH;
    public static final android.hardware.camera2.CaptureRequest$Key LENS_FOCUS_DISTANCE;
    public static final android.hardware.camera2.CaptureRequest$Key LENS_OPTICAL_STABILIZATION_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key REPROCESS_EFFECTIVE_EXPOSURE_FACTOR;
    public static final android.hardware.camera2.CaptureRequest$Key REQUEST_ID;
    public static final int REQUEST_TYPE_COUNT;
    public static final int REQUEST_TYPE_REGULAR;
    public static final int REQUEST_TYPE_REPROCESS;
    public static final int REQUEST_TYPE_ZSL_STILL;
    public static final android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION;
    public static final android.hardware.camera2.CaptureRequest$Key SCALER_ROTATE_AND_CROP;
    public static final android.hardware.camera2.CaptureRequest$Key SENSOR_EXPOSURE_TIME;
    public static final android.hardware.camera2.CaptureRequest$Key SENSOR_FRAME_DURATION;
    public static final android.hardware.camera2.CaptureRequest$Key SENSOR_SENSITIVITY;
    public static final android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_DATA;
    public static final android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key SHADING_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key STATISTICS_HOT_PIXEL_MAP_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key STATISTICS_LENS_SHADING_MAP_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key STATISTICS_OIS_DATA_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE;
    public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_BLUE;
    public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_GREEN;
    public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_RED;
    public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_GAMMA;
    public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_MODE;
    public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_PRESET_CURVE;
    private static final android.util.ArraySet mEmptySurfaceSet;
    private final java.lang.String TAG;
    private boolean mIsPartOfCHSRequestList;
    private boolean mIsReprocess;
    private java.lang.String mLogicalCameraId;
    private android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings;
    private final java.util.HashMap mPhysicalCameraSettings;
    private int mReprocessableSessionId;
    private int mRequestType;
    private int[] mStreamIdxArray;
    private boolean mSurfaceConverted;
    private int[] mSurfaceIdxArray;
    private final android.util.ArraySet mSurfaceSet;
    private final java.lang.Object mSurfacesLock;
    private java.lang.Object mUserTag;

    static void <clinit>()
    {
        android.util.ArraySet $r0;
        android.hardware.camera2.CaptureRequest$1 $r1;
        android.hardware.camera2.CaptureRequest$Key $r2, $r4, $r5, $r6, $r8, $r10, $r12, $r14, $r16, $r17, $r19, $r21, $r23, $r24, $r26, $r28, $r30, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r56, $r57, $r58, $r60, $r62, $r64, $r66, $r67, $r69, $r71, $r73, $r75, $r77, $r79, $r81, $r82, $r84, $r86, $r88, $r90, $r91, $r93, $r95, $r97, $r99, $r101, $r103, $r104, $r105, $r106, $r107, $r109, $r111, $r113, $r115, $r117, $r119;
        java.lang.Class $r3, $r7, $r9, $r11, $r13, $r15, $r20, $r22, $r25, $r27, $r29, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r59, $r61, $r63, $r65, $r68, $r70, $r72, $r74, $r76, $r78, $r80, $r83, $r85, $r87, $r89, $r92, $r94, $r96, $r98, $r100, $r102, $r108, $r110, $r112, $r114, $r116, $r118, $r120;
        android.hardware.camera2.CaptureRequest$2 $r18;

        <android.hardware.camera2.CaptureRequest: int REQUEST_TYPE_ZSL_STILL> = 2;

        <android.hardware.camera2.CaptureRequest: int REQUEST_TYPE_REPROCESS> = 1;

        <android.hardware.camera2.CaptureRequest: int REQUEST_TYPE_REGULAR> = 0;

        <android.hardware.camera2.CaptureRequest: int REQUEST_TYPE_COUNT> = 3;

        $r0 = new android.util.ArraySet;

        specialinvoke $r0.<android.util.ArraySet: void <init>()>();

        <android.hardware.camera2.CaptureRequest: android.util.ArraySet mEmptySurfaceSet> = $r0;

        $r1 = new android.hardware.camera2.CaptureRequest$1;

        specialinvoke $r1.<android.hardware.camera2.CaptureRequest$1: void <init>()>();

        <android.hardware.camera2.CaptureRequest: android.os.Parcelable$Creator CREATOR> = $r1;

        $r2 = new android.hardware.camera2.CaptureRequest$Key;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r2.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.colorCorrection.mode", $r3);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_MODE> = $r2;

        $r4 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r4.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.colorCorrection.transform", class "Landroid/hardware/camera2/params/ColorSpaceTransform;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_TRANSFORM> = $r4;

        $r5 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r5.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.colorCorrection.gains", class "Landroid/hardware/camera2/params/RggbChannelVector;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_GAINS> = $r5;

        $r6 = new android.hardware.camera2.CaptureRequest$Key;

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r6.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.colorCorrection.aberrationMode", $r7);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE> = $r6;

        $r8 = new android.hardware.camera2.CaptureRequest$Key;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r8.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.aeAntibandingMode", $r9);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE> = $r8;

        $r10 = new android.hardware.camera2.CaptureRequest$Key;

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r10.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.aeExposureCompensation", $r11);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION> = $r10;

        $r12 = new android.hardware.camera2.CaptureRequest$Key;

        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r12.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.aeLock", $r13);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK> = $r12;

        $r14 = new android.hardware.camera2.CaptureRequest$Key;

        $r15 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r14.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.aeMode", $r15);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE> = $r14;

        $r16 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r16.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.aeRegions", class "[Landroid/hardware/camera2/params/MeteringRectangle;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS> = $r16;

        $r17 = new android.hardware.camera2.CaptureRequest$Key;

        $r18 = new android.hardware.camera2.CaptureRequest$2;

        specialinvoke $r18.<android.hardware.camera2.CaptureRequest$2: void <init>()>();

        specialinvoke $r17.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,android.hardware.camera2.utils.TypeReference)>("android.control.aeTargetFpsRange", $r18);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE> = $r17;

        $r19 = new android.hardware.camera2.CaptureRequest$Key;

        $r20 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r19.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.aePrecaptureTrigger", $r20);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER> = $r19;

        $r21 = new android.hardware.camera2.CaptureRequest$Key;

        $r22 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r21.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.afMode", $r22);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE> = $r21;

        $r23 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r23.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.afRegions", class "[Landroid/hardware/camera2/params/MeteringRectangle;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS> = $r23;

        $r24 = new android.hardware.camera2.CaptureRequest$Key;

        $r25 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r24.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.afTrigger", $r25);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER> = $r24;

        $r26 = new android.hardware.camera2.CaptureRequest$Key;

        $r27 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r26.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.awbLock", $r27);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK> = $r26;

        $r28 = new android.hardware.camera2.CaptureRequest$Key;

        $r29 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r28.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.awbMode", $r29);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE> = $r28;

        $r30 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r30.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.awbRegions", class "[Landroid/hardware/camera2/params/MeteringRectangle;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS> = $r30;

        $r31 = new android.hardware.camera2.CaptureRequest$Key;

        $r32 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r31.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.captureIntent", $r32);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT> = $r31;

        $r33 = new android.hardware.camera2.CaptureRequest$Key;

        $r34 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r33.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.effectMode", $r34);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE> = $r33;

        $r35 = new android.hardware.camera2.CaptureRequest$Key;

        $r36 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r35.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.mode", $r36);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE> = $r35;

        $r37 = new android.hardware.camera2.CaptureRequest$Key;

        $r38 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r37.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.sceneMode", $r38);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE> = $r37;

        $r39 = new android.hardware.camera2.CaptureRequest$Key;

        $r40 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r39.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.videoStabilizationMode", $r40);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE> = $r39;

        $r41 = new android.hardware.camera2.CaptureRequest$Key;

        $r42 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r41.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.postRawSensitivityBoost", $r42);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_POST_RAW_SENSITIVITY_BOOST> = $r41;

        $r43 = new android.hardware.camera2.CaptureRequest$Key;

        $r44 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r43.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.enableZsl", $r44);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ENABLE_ZSL> = $r43;

        $r45 = new android.hardware.camera2.CaptureRequest$Key;

        $r46 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r45.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.extendedSceneMode", $r46);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EXTENDED_SCENE_MODE> = $r45;

        $r47 = new android.hardware.camera2.CaptureRequest$Key;

        $r48 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r47.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.control.zoomRatio", $r48);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO> = $r47;

        $r49 = new android.hardware.camera2.CaptureRequest$Key;

        $r50 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r49.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.edge.mode", $r50);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key EDGE_MODE> = $r49;

        $r51 = new android.hardware.camera2.CaptureRequest$Key;

        $r52 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r51.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.flash.mode", $r52);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE> = $r51;

        $r53 = new android.hardware.camera2.CaptureRequest$Key;

        $r54 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r53.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.hotPixel.mode", $r54);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key HOT_PIXEL_MODE> = $r53;

        $r55 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r55.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.gpsLocation", class "Landroid/location/Location;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION> = $r55;

        $r56 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r56.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.gpsCoordinates", class "[D");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_COORDINATES> = $r56;

        $r57 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r57.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.gpsProcessingMethod", class "Ljava/lang/String;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_PROCESSING_METHOD> = $r57;

        $r58 = new android.hardware.camera2.CaptureRequest$Key;

        $r59 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r58.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.gpsTimestamp", $r59);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_TIMESTAMP> = $r58;

        $r60 = new android.hardware.camera2.CaptureRequest$Key;

        $r61 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r60.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.orientation", $r61);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION> = $r60;

        $r62 = new android.hardware.camera2.CaptureRequest$Key;

        $r63 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r62.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.quality", $r63);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY> = $r62;

        $r64 = new android.hardware.camera2.CaptureRequest$Key;

        $r65 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r64.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.thumbnailQuality", $r65);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY> = $r64;

        $r66 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r66.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.jpeg.thumbnailSize", class "Landroid/util/Size;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE> = $r66;

        $r67 = new android.hardware.camera2.CaptureRequest$Key;

        $r68 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r67.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.lens.aperture", $r68);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_APERTURE> = $r67;

        $r69 = new android.hardware.camera2.CaptureRequest$Key;

        $r70 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r69.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.lens.filterDensity", $r70);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FILTER_DENSITY> = $r69;

        $r71 = new android.hardware.camera2.CaptureRequest$Key;

        $r72 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r71.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.lens.focalLength", $r72);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH> = $r71;

        $r73 = new android.hardware.camera2.CaptureRequest$Key;

        $r74 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r73.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.lens.focusDistance", $r74);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCUS_DISTANCE> = $r73;

        $r75 = new android.hardware.camera2.CaptureRequest$Key;

        $r76 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r75.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.lens.opticalStabilizationMode", $r76);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_OPTICAL_STABILIZATION_MODE> = $r75;

        $r77 = new android.hardware.camera2.CaptureRequest$Key;

        $r78 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r77.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.noiseReduction.mode", $r78);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE> = $r77;

        $r79 = new android.hardware.camera2.CaptureRequest$Key;

        $r80 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r79.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.request.id", $r80);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key REQUEST_ID> = $r79;

        $r81 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r81.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.scaler.cropRegion", class "Landroid/graphics/Rect;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION> = $r81;

        $r82 = new android.hardware.camera2.CaptureRequest$Key;

        $r83 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r82.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.scaler.rotateAndCrop", $r83);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_ROTATE_AND_CROP> = $r82;

        $r84 = new android.hardware.camera2.CaptureRequest$Key;

        $r85 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r84.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.sensor.exposureTime", $r85);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_EXPOSURE_TIME> = $r84;

        $r86 = new android.hardware.camera2.CaptureRequest$Key;

        $r87 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r86.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.sensor.frameDuration", $r87);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_FRAME_DURATION> = $r86;

        $r88 = new android.hardware.camera2.CaptureRequest$Key;

        $r89 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r88.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.sensor.sensitivity", $r89);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_SENSITIVITY> = $r88;

        $r90 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r90.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.sensor.testPatternData", class "[I");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_DATA> = $r90;

        $r91 = new android.hardware.camera2.CaptureRequest$Key;

        $r92 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r91.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.sensor.testPatternMode", $r92);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_MODE> = $r91;

        $r93 = new android.hardware.camera2.CaptureRequest$Key;

        $r94 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r93.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.shading.mode", $r94);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SHADING_MODE> = $r93;

        $r95 = new android.hardware.camera2.CaptureRequest$Key;

        $r96 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r95.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.statistics.faceDetectMode", $r96);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE> = $r95;

        $r97 = new android.hardware.camera2.CaptureRequest$Key;

        $r98 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r97.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.statistics.hotPixelMapMode", $r98);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_HOT_PIXEL_MAP_MODE> = $r97;

        $r99 = new android.hardware.camera2.CaptureRequest$Key;

        $r100 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r99.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.statistics.lensShadingMapMode", $r100);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_LENS_SHADING_MAP_MODE> = $r99;

        $r101 = new android.hardware.camera2.CaptureRequest$Key;

        $r102 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r101.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.statistics.oisDataMode", $r102);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_OIS_DATA_MODE> = $r101;

        $r103 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r103.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.tonemap.curveBlue", class "[F");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_BLUE> = $r103;

        $r104 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r104.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.tonemap.curveGreen", class "[F");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_GREEN> = $r104;

        $r105 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r105.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.tonemap.curveRed", class "[F");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_RED> = $r105;

        $r106 = new android.hardware.camera2.CaptureRequest$Key;

        specialinvoke $r106.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.tonemap.curve", class "Landroid/hardware/camera2/params/TonemapCurve;");

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE> = $r106;

        $r107 = new android.hardware.camera2.CaptureRequest$Key;

        $r108 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r107.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.tonemap.mode", $r108);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_MODE> = $r107;

        $r109 = new android.hardware.camera2.CaptureRequest$Key;

        $r110 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r109.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.tonemap.gamma", $r110);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_GAMMA> = $r109;

        $r111 = new android.hardware.camera2.CaptureRequest$Key;

        $r112 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r111.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.tonemap.presetCurve", $r112);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_PRESET_CURVE> = $r111;

        $r113 = new android.hardware.camera2.CaptureRequest$Key;

        $r114 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r113.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.led.transmit", $r114);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LED_TRANSMIT> = $r113;

        $r115 = new android.hardware.camera2.CaptureRequest$Key;

        $r116 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r115.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.blackLevel.lock", $r116);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key BLACK_LEVEL_LOCK> = $r115;

        $r117 = new android.hardware.camera2.CaptureRequest$Key;

        $r118 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r117.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.reprocess.effectiveExposureFactor", $r118);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key REPROCESS_EFFECTIVE_EXPOSURE_FACTOR> = $r117;

        $r119 = new android.hardware.camera2.CaptureRequest$Key;

        $r120 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r119.<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>("android.distortionCorrection.mode", $r120);

        <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key DISTORTION_CORRECTION_MODE> = $r119;

        return;
    }

    private void <init>()
    {
        android.hardware.camera2.CaptureRequest r0;
        android.util.ArraySet $r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        specialinvoke r0.<android.hardware.camera2.CameraMetadata: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.lang.String TAG> = "CaptureRequest-JV";

        $r1 = new android.util.ArraySet;

        specialinvoke $r1.<android.util.ArraySet: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mSurfacesLock> = $r2;

        r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted> = 0;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings> = $r3;

        r0.<android.hardware.camera2.CaptureRequest: int mRequestType> = -1;

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsPartOfCHSRequestList> = 0;

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess> = 0;

        r0.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId> = -1;

        return;
    }

    void <init>(android.hardware.camera2.CaptureRequest$1)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.CaptureRequest$1 r1;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$1;

        specialinvoke r0.<android.hardware.camera2.CaptureRequest: void <init>()>();

        return;
    }

    private void <init>(android.hardware.camera2.CaptureRequest)
    {
        android.hardware.camera2.CaptureRequest r0, r1;
        java.util.Map$Entry r2;
        android.util.ArraySet $r3, $r13, $r14;
        java.lang.Object $r4, $r12, $r15, $r16, $r19, $r22;
        java.util.HashMap $r5, $r8, $r11, $r18;
        java.lang.String $r6, $r7, $r10, $r17, $r20;
        java.util.Set $r9;
        boolean $z0, $z1, $z2;
        int $i0;
        android.hardware.camera2.impl.CameraMetadataNative $r21, $r23, r26;
        java.util.Iterator r25;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        specialinvoke r0.<android.hardware.camera2.CameraMetadata: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.lang.String TAG> = "CaptureRequest-JV";

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mSurfacesLock> = $r4;

        r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted> = 0;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings> = $r5;

        r0.<android.hardware.camera2.CaptureRequest: int mRequestType> = -1;

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsPartOfCHSRequestList> = 0;

        $r6 = new java.lang.String;

        $r7 = r1.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>($r7);

        r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId> = $r6;

        $r8 = r1.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Set entrySet()>();

        r25 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r16;

        $r18 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r17 = new java.lang.String;

        $r19 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.String) $r19;

        specialinvoke $r17.<java.lang.String: void <init>(java.lang.String)>($r20);

        $r21 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r22 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (android.hardware.camera2.impl.CameraMetadataNative) $r22;

        specialinvoke $r21.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r23);

        virtualinvoke $r18.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r21);

        goto label1;

     label2:
        $r11 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r10 = r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        r26 = (android.hardware.camera2.impl.CameraMetadataNative) $r12;

        r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings> = r26;

        virtualinvoke r0.<android.hardware.camera2.CaptureRequest: void setNativeInstance(android.hardware.camera2.impl.CameraMetadataNative)>(r26);

        $r14 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $r13 = r1.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        virtualinvoke $r14.<android.util.ArraySet: void addAll(android.util.ArraySet)>($r13);

        $z1 = r1.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess>;

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess> = $z1;

        $z2 = r1.<android.hardware.camera2.CaptureRequest: boolean mIsPartOfCHSRequestList>;

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsPartOfCHSRequestList> = $z2;

        $i0 = r1.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId>;

        r0.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId> = $i0;

        $r15 = r1.<android.hardware.camera2.CaptureRequest: java.lang.Object mUserTag>;

        r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mUserTag> = $r15;

        return;
    }

    void <init>(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest$1)
    {
        android.hardware.camera2.CaptureRequest r0, r1;
        android.hardware.camera2.CaptureRequest$1 r2;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest$1;

        specialinvoke r0.<android.hardware.camera2.CaptureRequest: void <init>(android.hardware.camera2.CaptureRequest)>(r1);

        return;
    }

    private void <init>(android.hardware.camera2.impl.CameraMetadataNative, boolean, int, java.lang.String, java.util.Set)
    {
        android.hardware.camera2.CaptureRequest r0;
        boolean z0, $z1;
        int i0;
        java.util.Set r1;
        android.util.ArraySet $r2;
        java.lang.Object $r3, $r14;
        java.util.HashMap $r4, $r6, $r17;
        java.lang.String $r5, $r13, r21, r24;
        android.hardware.camera2.impl.CameraMetadataNative $r8, $r15, $r16, r20, r22;
        java.lang.StringBuilder $r9;
        java.lang.IllegalArgumentException $r12, $r19;
        java.util.Iterator r23;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r20 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r21 := @parameter3: java.lang.String;

        r1 := @parameter4: java.util.Set;

        specialinvoke r0.<android.hardware.camera2.CameraMetadata: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.lang.String TAG> = "CaptureRequest-JV";

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mSurfacesLock> = $r3;

        r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted> = 0;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings> = $r4;

        r0.<android.hardware.camera2.CaptureRequest: int mRequestType> = -1;

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsPartOfCHSRequestList> = 0;

        if r1 == null goto label2;

        if z0 != 0 goto label1;

        goto label2;

     label1:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Create a reprocess capture request with with more than one physical camera is not supported!");

        throw $r19;

     label2:
        r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId> = r21;

        r22 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.impl.CameraMetadataNative move(android.hardware.camera2.impl.CameraMetadataNative)>(r20);

        r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings> = r22;

        $r6 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r5 = r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r22);

        if r1 == null goto label4;

        r23 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r14;

        $r17 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r15 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r16 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        specialinvoke $r15.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r16);

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r15);

        goto label3;

     label4:
        $r8 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        virtualinvoke r0.<android.hardware.camera2.CaptureRequest: void setNativeInstance(android.hardware.camera2.impl.CameraMetadataNative)>($r8);

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess> = z0;

        if z0 == 0 goto label6;

        if i0 == -1 goto label5;

        r0.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId> = i0;

        goto label7;

     label5:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Create a reprocess capture request with an invalid session ID: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label6:
        r0.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId> = -1;

     label7:
        return;
    }

    void <init>(android.hardware.camera2.impl.CameraMetadataNative, boolean, int, java.lang.String, java.util.Set, android.hardware.camera2.CaptureRequest$1)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.impl.CameraMetadataNative r1;
        boolean z0;
        int i0;
        java.lang.String r2;
        java.util.Set r3;
        android.hardware.camera2.CaptureRequest$1 r4;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.util.Set;

        r4 := @parameter5: android.hardware.camera2.CaptureRequest$1;

        specialinvoke r0.<android.hardware.camera2.CaptureRequest: void <init>(android.hardware.camera2.impl.CameraMetadataNative,boolean,int,java.lang.String,java.util.Set)>(r1, z0, i0, r2, r3);

        return;
    }

    static void access$100(android.hardware.camera2.CaptureRequest, android.os.Parcel)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.os.Parcel r1;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        r1 := @parameter1: android.os.Parcel;

        specialinvoke r0.<android.hardware.camera2.CaptureRequest: void readFromParcel(android.os.Parcel)>(r1);

        return;
    }

    static android.util.ArraySet access$300(android.hardware.camera2.CaptureRequest)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        $r1 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        return $r1;
    }

    static android.hardware.camera2.impl.CameraMetadataNative access$400(android.hardware.camera2.CaptureRequest)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.impl.CameraMetadataNative $r1;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        $r1 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        return $r1;
    }

    static java.util.HashMap access$500(android.hardware.camera2.CaptureRequest)
    {
        android.hardware.camera2.CaptureRequest r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        $r1 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        return $r1;
    }

    static java.lang.Object access$602(android.hardware.camera2.CaptureRequest, java.lang.Object)
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Object r1;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        r1 := @parameter1: java.lang.Object;

        r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mUserTag> = r1;

        return r1;
    }

    static boolean access$702(android.hardware.camera2.CaptureRequest, boolean)
    {
        android.hardware.camera2.CaptureRequest r0;
        boolean z0;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        z0 := @parameter1: boolean;

        r0.<android.hardware.camera2.CaptureRequest: boolean mIsPartOfCHSRequestList> = z0;

        return z0;
    }

    private boolean equals(android.hardware.camera2.CaptureRequest)
    {
        android.hardware.camera2.CaptureRequest r0, r1;
        java.lang.Object $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        android.util.ArraySet $r4, $r5;
        java.util.HashMap $r6, $r7;
        java.lang.String $r8, $r9;
        android.hardware.camera2.impl.CameraMetadataNative $r10, $r11;
        int $i0, $i1;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        if r1 == null goto label1;

        $r3 = r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mUserTag>;

        $r2 = r1.<android.hardware.camera2.CaptureRequest: java.lang.Object mUserTag>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $r4 = r1.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $z1 = virtualinvoke $r5.<android.util.ArraySet: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $r7 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r6 = r1.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $z2 = virtualinvoke $r7.<java.util.HashMap: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label1;

        $r9 = r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        $r8 = r1.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label1;

        $r11 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        $r10 = r1.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        $z4 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label1;

        $z6 = r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess>;

        $z5 = r1.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess>;

        if $z6 != $z5 goto label1;

        $i1 = r0.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId>;

        $i0 = r1.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId>;

        if $i1 != $i0 goto label1;

        z7 = 1;

        goto label2;

     label1:
        z7 = 0;

     label2:
        return z7;
    }

    private void readFromParcel(android.os.Parcel)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.os.Parcelable[] r1;
        java.lang.StringBuilder $r2;
        java.lang.RuntimeException $r6, r30;
        java.lang.String $r7, $r8, $r12, r26;
        android.hardware.camera2.impl.CameraMetadataNative $r9, $r10, $r11, $r20;
        java.util.HashMap $r13, $r21;
        android.util.ArraySet $r15, $r19;
        java.lang.Class $r16;
        java.lang.ClassLoader $r17;
        int $i0, i1, i2, i3, i4, i5;
        android.os.Parcelable $r18;
        java.lang.Throwable $r23;
        android.os.Parcel r24;
        boolean z1;
        java.lang.Object r28;
        android.view.Surface r29;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r24 := @parameter0: android.os.Parcel;

        i1 = virtualinvoke r24.<android.os.Parcel: int readInt()>();

        if i1 <= 0 goto label17;

        $r8 = virtualinvoke r24.<android.os.Parcel: java.lang.String readString()>();

        r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId> = $r8;

        $r9 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r9.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings> = $r9;

        virtualinvoke $r9.<android.hardware.camera2.impl.CameraMetadataNative: void readFromParcel(android.os.Parcel)>(r24);

        $r10 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        virtualinvoke r0.<android.hardware.camera2.CaptureRequest: void setNativeInstance(android.hardware.camera2.impl.CameraMetadataNative)>($r10);

        $r13 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r12 = r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        $r11 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        i2 = 1;

     label01:
        if i2 >= i1 goto label02;

        r26 = virtualinvoke r24.<android.os.Parcel: java.lang.String readString()>();

        $r20 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r20.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        virtualinvoke $r20.<android.hardware.camera2.impl.CameraMetadataNative: void readFromParcel(android.os.Parcel)>(r24);

        $r21 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        virtualinvoke $r21.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r20);

        i2 = i2 + 1;

        goto label01;

     label02:
        i3 = virtualinvoke r24.<android.os.Parcel: int readInt()>();

        i4 = 0;

        if i3 != 0 goto label03;

        z1 = 0;

        goto label04;

     label03:
        z1 = 1;

     label04:
        r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess> = z1;

        r0.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId> = -1;

        r28 = r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mSurfacesLock>;

        entermonitor r28;

     label05:
        $r15 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        virtualinvoke $r15.<android.util.ArraySet: void clear()>();

        $r16 = class "Landroid/view/Surface;";

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r1 = virtualinvoke r24.<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>($r17);

     label06:
        if r1 == null goto label11;

     label07:
        i5 = lengthof r1;

     label08:
        if i4 >= i5 goto label11;

     label09:
        $r18 = r1[i4];

        r29 = (android.view.Surface) $r18;

        $r19 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        virtualinvoke $r19.<android.util.ArraySet: boolean add(java.lang.Object)>(r29);

     label10:
        i4 = i4 + 1;

        goto label08;

     label11:
        $i0 = virtualinvoke r24.<android.os.Parcel: int readInt()>();

        if $i0 != 0 goto label13;

        exitmonitor r28;

     label12:
        return;

     label13:
        r30 = new java.lang.RuntimeException;

        specialinvoke r30.<java.lang.RuntimeException: void <init>(java.lang.String)>("Reading cached CaptureRequest is not supported");

        throw r30;

     label14:
        $r23 := @caughtexception;

     label15:
        exitmonitor r28;

     label16:
        throw $r23;

     label17:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Physical camera count");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should always be positive");

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean containsTarget(android.view.Surface)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.view.Surface r1;
        android.util.ArraySet $r2;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void convertSurfaceToStreamId(android.util.SparseArray)
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Object r1, $r8, $r9, $r11, $r15, $r17;
        java.util.Iterator r2, r25, r27;
        long l0, $l5;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6;
        android.util.ArraySet $r3, $r5, $r7;
        int $i1, $i2, $i3, $i4, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        int[] $r4, $r6, $r13, $r14, $r19, $r20;
        java.util.List $r10, $r16;
        android.view.Surface $r12, $r18, r23;
        byte $b6;
        java.lang.Throwable $r21;
        android.util.SparseArray r22;
        android.hardware.camera2.params.OutputConfiguration r24, r26;
        java.lang.IllegalArgumentException r28;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r22 := @parameter0: android.util.SparseArray;

        r1 = r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mSurfacesLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted>;

        if $z0 == 0 goto label03;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CaptureRequest-JV", "Cannot convert already converted surfaces!");

        exitmonitor r1;

     label02:
        return;

     label03:
        $r3 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $i1 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        $r4 = newarray (int)[$i1];

        r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray> = $r4;

        $r5 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $i2 = virtualinvoke $r5.<android.util.ArraySet: int size()>();

        $r6 = newarray (int)[$i2];

        r0.<android.hardware.camera2.CaptureRequest: int[] mSurfaceIdxArray> = $r6;

     label04:
        i8 = 0;

     label05:
        $r7 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        r2 = virtualinvoke $r7.<android.util.ArraySet: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label37;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.view.Surface) $r8;

     label07:
        z4 = 0;

        i9 = 0;

     label08:
        i10 = i8;

        z5 = z4;

     label09:
        $i3 = virtualinvoke r22.<android.util.SparseArray: int size()>();

        if i9 >= $i3 goto label20;

        i11 = virtualinvoke r22.<android.util.SparseArray: int keyAt(int)>(i9);

        $r15 = virtualinvoke r22.<android.util.SparseArray: java.lang.Object valueAt(int)>(i9);

        r24 = (android.hardware.camera2.params.OutputConfiguration) $r15;

     label10:
        i12 = 0;

     label11:
        $r16 = virtualinvoke r24.<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>();

        r25 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label12:
        i10 = i8;

        z5 = z4;

     label13:
        $z3 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label18;

        $r17 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (android.view.Surface) $r17;

        if r23 != $r18 goto label17;

     label14:
        z5 = 1;

     label15:
        $r19 = r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray>;

        $r19[i8] = i11;

        $r20 = r0.<android.hardware.camera2.CaptureRequest: int[] mSurfaceIdxArray>;

        $r20[i8] = i12;

     label16:
        i10 = i8 + 1;

        goto label18;

     label17:
        i12 = i12 + 1;

        goto label12;

     label18:
        if z5 == 0 goto label19;

        goto label20;

     label19:
        i9 = i9 + 1;

        i8 = i10;

        z4 = z5;

        goto label08;

     label20:
        i13 = i10;

        z6 = z5;

        if z5 != 0 goto label35;

     label21:
        l0 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: long getSurfaceId(android.view.Surface)>(r23);

     label22:
        i14 = 0;

     label23:
        i13 = i10;

        z6 = z5;

     label24:
        $i4 = virtualinvoke r22.<android.util.SparseArray: int size()>();

        if i14 >= $i4 goto label35;

        i15 = virtualinvoke r22.<android.util.SparseArray: int keyAt(int)>(i14);

        $r9 = virtualinvoke r22.<android.util.SparseArray: java.lang.Object valueAt(int)>(i14);

        r26 = (android.hardware.camera2.params.OutputConfiguration) $r9;

     label25:
        i16 = 0;

     label26:
        $r10 = virtualinvoke r26.<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>();

        r27 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label27:
        i13 = i10;

        z6 = z5;

     label28:
        $z2 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label33;

        $r11 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (android.view.Surface) $r11;

        $l5 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: long getSurfaceId(android.view.Surface)>($r12);

        $b6 = l0 cmp $l5;

        if $b6 != 0 goto label32;

     label29:
        z6 = 1;

     label30:
        $r13 = r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray>;

        $r13[i10] = i15;

        $r14 = r0.<android.hardware.camera2.CaptureRequest: int[] mSurfaceIdxArray>;

        $r14[i10] = i16;

     label31:
        i13 = i10 + 1;

        goto label33;

     label32:
        i16 = i16 + 1;

        goto label27;

     label33:
        if z6 == 0 goto label34;

        goto label35;

     label34:
        i14 = i14 + 1;

        i10 = i13;

        z5 = z6;

        goto label23;

     label35:
        if z6 == 0 goto label36;

        i8 = i13;

        goto label06;

     label36:
        r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray> = null;

        r0.<android.hardware.camera2.CaptureRequest: int[] mSurfaceIdxArray> = null;

        r28 = new java.lang.IllegalArgumentException;

        specialinvoke r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CaptureRequest contains unconfigured Input/Output Surface!");

        throw r28;

     label37:
        r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted> = 1;

        exitmonitor r1;

     label38:
        return;

     label39:
        $r21 := @caughtexception;

     label40:
        exitmonitor r1;

     label41:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label39;
        catch java.lang.Throwable from label03 to label04 with label39;
        catch java.lang.Throwable from label05 to label06 with label39;
        catch java.lang.Throwable from label06 to label07 with label39;
        catch java.lang.Throwable from label09 to label10 with label39;
        catch java.lang.Throwable from label11 to label12 with label39;
        catch java.lang.Throwable from label13 to label14 with label39;
        catch java.lang.Throwable from label15 to label16 with label39;
        catch java.lang.Throwable from label21 to label22 with label39;
        catch java.lang.Throwable from label24 to label25 with label39;
        catch java.lang.Throwable from label26 to label27 with label39;
        catch java.lang.Throwable from label28 to label29 with label39;
        catch java.lang.Throwable from label30 to label31 with label39;
        catch java.lang.Throwable from label36 to label37 with label39;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label40 to label41 with label39;
    }

    public int describeContents()
    {
        android.hardware.camera2.CaptureRequest r0;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.camera2.CaptureRequest r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.hardware.camera2.CaptureRequest;

        if $z0 == 0 goto label1;

        $r2 = (android.hardware.camera2.CaptureRequest) r1;

        $z1 = specialinvoke r0.<android.hardware.camera2.CaptureRequest: boolean equals(android.hardware.camera2.CaptureRequest)>($r2);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Key;

        $r2 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>(r1);

        return $r3;
    }

    protected java.lang.Class getKeyClass()
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Class $r1;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $r1 = (java.lang.Class) class "Landroid/hardware/camera2/CaptureRequest$Key;";

        return $r1;
    }

    public java.util.List getKeys()
    {
        android.hardware.camera2.CaptureRequest r0;
        java.util.List $r1;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $r1 = specialinvoke r0.<android.hardware.camera2.CameraMetadata: java.util.List getKeys()>();

        return $r1;
    }

    public java.lang.String getLogicalCameraId()
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $r1 = r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        return $r1;
    }

    public android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.impl.CameraMetadataNative $r1, $r2;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $r1 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r2 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        specialinvoke $r1.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r2);

        return $r1;
    }

    protected java.lang.Object getProtected(android.hardware.camera2.CaptureRequest$Key)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Key;

        $r2 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>(r1);

        return $r3;
    }

    protected volatile java.lang.Object getProtected(java.lang.Object)
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Object r1, $r3;
        android.hardware.camera2.CaptureRequest$Key $r2;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.hardware.camera2.CaptureRequest$Key) r1;

        $r3 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object getProtected(android.hardware.camera2.CaptureRequest$Key)>($r2);

        return $r3;
    }

    public int getReprocessableSessionId()
    {
        android.hardware.camera2.CaptureRequest r0;
        int i0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $z0 = r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess>;

        if $z0 == 0 goto label1;

        i0 = r0.<android.hardware.camera2.CaptureRequest: int mReprocessableSessionId>;

        if i0 == -1 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Getting the reprocessable session ID for a non-reprocess capture request is illegal.");

        throw $r1;
    }

    public int getRequestType()
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Boolean r1;
        int $i1, $i2, $i4;
        boolean $z1, $z2, z3;
        android.hardware.camera2.CaptureRequest$Key $r2, $r5;
        android.hardware.camera2.impl.CameraMetadataNative $r3, $r6;
        java.lang.Object $r4, $r7;
        java.lang.Integer $r8;
        byte b3;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $i1 = r0.<android.hardware.camera2.CaptureRequest: int mRequestType>;

        if $i1 != -1 goto label5;

        $z1 = r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess>;

        if $z1 == 0 goto label1;

        r0.<android.hardware.camera2.CaptureRequest: int mRequestType> = 1;

        goto label5;

     label1:
        $r3 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        $r2 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ENABLE_ZSL>;

        $r4 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r2);

        r1 = (java.lang.Boolean) $r4;

        z3 = 0;

        if r1 == null goto label2;

        z3 = 0;

        $z2 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label2;

        z3 = 0;

        $r6 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r7 = virtualinvoke $r6.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r5);

        $r8 = (java.lang.Integer) $r7;

        $i2 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i2 != 2 goto label2;

        z3 = 1;

     label2:
        if z3 == 0 goto label3;

        b3 = 2;

        goto label4;

     label3:
        b3 = 0;

     label4:
        r0.<android.hardware.camera2.CaptureRequest: int mRequestType> = b3;

     label5:
        $i4 = r0.<android.hardware.camera2.CaptureRequest: int mRequestType>;

        return $i4;
    }

    public java.lang.Object getTag()
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Object $r1;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $r1 = r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mUserTag>;

        return $r1;
    }

    public java.util.Collection getTargets()
    {
        android.hardware.camera2.CaptureRequest r0;
        android.util.ArraySet $r1;
        java.util.Collection $r2;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $r1 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public int hashCode()
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Object[] $r1;
        java.util.HashMap $r2;
        android.util.ArraySet $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r1[0] = $r2;

        $r3 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

        $r1[1] = $r3;

        $r4 = r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mUserTag>;

        $r1[2] = $r4;

        $i0 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCodeGeneric(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean isPartOfCRequestList()
    {
        android.hardware.camera2.CaptureRequest r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $z0 = r0.<android.hardware.camera2.CaptureRequest: boolean mIsPartOfCHSRequestList>;

        return $z0;
    }

    public boolean isReprocess()
    {
        android.hardware.camera2.CaptureRequest r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        $z0 = r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess>;

        return $z0;
    }

    public void recoverStreamIdToSurface()
    {
        android.hardware.camera2.CaptureRequest r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r1 = r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mSurfacesLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted>;

        if $z0 != 0 goto label3;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CaptureRequest-JV", "Cannot convert already converted surfaces!");

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray> = null;

        r0.<android.hardware.camera2.CaptureRequest: int[] mSurfaceIdxArray> = null;

        r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted> = 0;

        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.hardware.camera2.CaptureRequest r0;
        java.util.HashMap $r1, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.String $r2, $r15, $r16, $r18;
        android.hardware.camera2.impl.CameraMetadataNative $r3, $r20;
        java.util.Set $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.view.Surface[] $r6, $r8;
        java.lang.Object[] $r7;
        int[] $r9, $r10, $r11, $r12;
        java.lang.Object $r13, $r14, $r17, $r19, r25;
        java.lang.Throwable $r21;
        android.os.Parcel r22;
        java.util.Iterator r23;
        java.util.Map$Entry r24;
        android.util.ArraySet r26;

        r0 := @this: android.hardware.camera2.CaptureRequest;

        r22 := @parameter0: android.os.Parcel;

        i6 := @parameter1: int;

        $r1 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        virtualinvoke r22.<android.os.Parcel: void writeInt(int)>($i0);

        $r2 = r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        virtualinvoke r22.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        $r3 = r0.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative mLogicalCameraSettings>;

        virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative: void writeToParcel(android.os.Parcel,int)>(r22, i6);

        $r4 = r0.<android.hardware.camera2.CaptureRequest: java.util.HashMap mPhysicalCameraSettings>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r13 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r13;

        $r14 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (java.lang.String) $r14;

        $r15 = r0.<android.hardware.camera2.CaptureRequest: java.lang.String mLogicalCameraId>;

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label02;

        goto label01;

     label02:
        $r17 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        virtualinvoke r22.<android.os.Parcel: void writeString(java.lang.String)>($r18);

        $r19 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (android.hardware.camera2.impl.CameraMetadataNative) $r19;

        virtualinvoke $r20.<android.hardware.camera2.impl.CameraMetadataNative: void writeToParcel(android.os.Parcel,int)>(r22, i6);

        goto label01;

     label03:
        $z0 = r0.<android.hardware.camera2.CaptureRequest: boolean mIsReprocess>;

        i8 = (int) $z0;

        virtualinvoke r22.<android.os.Parcel: void writeInt(int)>(i8);

        r25 = r0.<android.hardware.camera2.CaptureRequest: java.lang.Object mSurfacesLock>;

        entermonitor r25;

     label04:
        $z1 = r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted>;

        if $z1 == 0 goto label06;

        r26 = <android.hardware.camera2.CaptureRequest: android.util.ArraySet mEmptySurfaceSet>;

     label05:
        goto label07;

     label06:
        r26 = r0.<android.hardware.camera2.CaptureRequest: android.util.ArraySet mSurfaceSet>;

     label07:
        $i1 = virtualinvoke r26.<android.util.ArraySet: int size()>();

        $r6 = newarray (android.view.Surface)[$i1];

        $r7 = virtualinvoke r26.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (android.view.Surface[]) $r7;

        virtualinvoke r22.<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>($r8, i6);

        $z2 = r0.<android.hardware.camera2.CaptureRequest: boolean mSurfaceConverted>;

        if $z2 == 0 goto label12;

        $r9 = r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray>;

        $i2 = lengthof $r9;

        virtualinvoke r22.<android.os.Parcel: void writeInt(int)>($i2);

     label08:
        i7 = 0;

     label09:
        $r10 = r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray>;

        $i3 = lengthof $r10;

        if i7 >= $i3 goto label11;

        $r11 = r0.<android.hardware.camera2.CaptureRequest: int[] mStreamIdxArray>;

        $i4 = $r11[i7];

        virtualinvoke r22.<android.os.Parcel: void writeInt(int)>($i4);

        $r12 = r0.<android.hardware.camera2.CaptureRequest: int[] mSurfaceIdxArray>;

        $i5 = $r12[i7];

        virtualinvoke r22.<android.os.Parcel: void writeInt(int)>($i5);

     label10:
        i7 = i7 + 1;

        goto label09;

     label11:
        goto label13;

     label12:
        virtualinvoke r22.<android.os.Parcel: void writeInt(int)>(0);

     label13:
        exitmonitor r25;

     label14:
        return;

     label15:
        $r21 := @caughtexception;

     label16:
        exitmonitor r25;

     label17:
        throw $r21;

        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }
}
