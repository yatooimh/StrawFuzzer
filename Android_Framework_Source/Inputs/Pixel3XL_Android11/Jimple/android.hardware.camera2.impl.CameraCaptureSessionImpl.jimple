public class android.hardware.camera2.impl.CameraCaptureSessionImpl extends android.hardware.camera2.CameraCaptureSession implements android.hardware.camera2.impl.CameraCaptureSessionCore
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer;
    private volatile boolean mAborting;
    private boolean mClosed;
    private final boolean mConfigureSuccess;
    private final java.util.concurrent.Executor mDeviceExecutor;
    private final android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl;
    private final int mId;
    private final java.lang.String mIdString;
    private final android.hardware.camera2.utils.TaskSingleDrainer mIdleDrainer;
    private final android.view.Surface mInput;
    private final android.hardware.camera2.utils.TaskDrainer mSequenceDrainer;
    private boolean mSkipUnconfigure;
    private final android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback;
    private final java.util.concurrent.Executor mStateExecutor;

    void <init>(int, android.view.Surface, android.hardware.camera2.CameraCaptureSession$StateCallback, java.util.concurrent.Executor, android.hardware.camera2.impl.CameraDeviceImpl, java.util.concurrent.Executor, boolean)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;
        android.hardware.camera2.CameraCaptureSession$StateCallback r1, $r10, $r24, $r30;
        java.util.concurrent.Executor r2, r4, $r12, $r17, $r20, $r23, r32;
        android.hardware.camera2.impl.CameraDeviceImpl r3, $r14;
        boolean z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.String $r8, $r26, $r29;
        java.lang.Object $r9, $r11, $r13;
        android.hardware.camera2.utils.TaskDrainer $r15;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$SequenceDrainListener $r16;
        android.hardware.camera2.utils.TaskSingleDrainer $r18, $r21;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$IdleDrainListener $r19;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$AbortDrainListener $r22;
        java.lang.StringBuilder $r25;
        android.view.Surface r31;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter0: int;

        r31 := @parameter1: android.view.Surface;

        r1 := @parameter2: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r2 := @parameter3: java.util.concurrent.Executor;

        r3 := @parameter4: android.hardware.camera2.impl.CameraDeviceImpl;

        r4 := @parameter5: java.util.concurrent.Executor;

        z0 := @parameter6: boolean;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed> = 0;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mSkipUnconfigure> = 0;

        if r1 == null goto label3;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int mId> = i0;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Session %d: ", $r6);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString> = $r8;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.view.Surface mInput> = r31;

        $r9 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "stateExecutor must not be null");

        r32 = (java.util.concurrent.Executor) $r9;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mStateExecutor> = r32;

        $r10 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback createUserStateCallbackProxy(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$StateCallback)>(r32, r1);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback> = $r10;

        $r11 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "deviceStateExecutor must not be null");

        $r12 = (java.util.concurrent.Executor) $r11;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor> = $r12;

        $r13 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "deviceImpl must not be null");

        $r14 = (android.hardware.camera2.impl.CameraDeviceImpl) $r13;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl> = $r14;

        $r15 = new android.hardware.camera2.utils.TaskDrainer;

        $r17 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r16 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$SequenceDrainListener;

        specialinvoke $r16.<android.hardware.camera2.impl.CameraCaptureSessionImpl$SequenceDrainListener: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.impl.CameraCaptureSessionImpl$1)>(r0, null);

        specialinvoke $r15.<android.hardware.camera2.utils.TaskDrainer: void <init>(java.util.concurrent.Executor,android.hardware.camera2.utils.TaskDrainer$DrainListener,java.lang.String)>($r17, $r16, "seq");

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer> = $r15;

        $r18 = new android.hardware.camera2.utils.TaskSingleDrainer;

        $r20 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r19 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$IdleDrainListener;

        specialinvoke $r19.<android.hardware.camera2.impl.CameraCaptureSessionImpl$IdleDrainListener: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.impl.CameraCaptureSessionImpl$1)>(r0, null);

        specialinvoke $r18.<android.hardware.camera2.utils.TaskSingleDrainer: void <init>(java.util.concurrent.Executor,android.hardware.camera2.utils.TaskDrainer$DrainListener,java.lang.String)>($r20, $r19, "idle");

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mIdleDrainer> = $r18;

        $r21 = new android.hardware.camera2.utils.TaskSingleDrainer;

        $r23 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r22 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$AbortDrainListener;

        specialinvoke $r22.<android.hardware.camera2.impl.CameraCaptureSessionImpl$AbortDrainListener: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.impl.CameraCaptureSessionImpl$1)>(r0, null);

        specialinvoke $r21.<android.hardware.camera2.utils.TaskSingleDrainer: void <init>(java.util.concurrent.Executor,android.hardware.camera2.utils.TaskDrainer$DrainListener,java.lang.String)>($r23, $r22, "abort");

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer> = $r21;

        if z0 == 0 goto label1;

        $r30 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        virtualinvoke $r30.<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)>(r0);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mConfigureSuccess> = 1;

        goto label2;

     label1:
        $r24 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        virtualinvoke $r24.<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>(r0);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed> = 1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create capture session; configuration failed");

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraCaptureSession", $r29);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mConfigureSuccess> = 0;

     label2:
        return;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r5;
    }

    static android.hardware.camera2.impl.CameraDeviceImpl access$1000(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        return $r1;
    }

    static void access$300(android.hardware.camera2.impl.CameraCaptureSessionImpl, int)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter1: int;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void finishPendingSequence(int)>(i0);

        return;
    }

    static java.lang.String access$400(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        return $r1;
    }

    static android.hardware.camera2.utils.TaskSingleDrainer access$500(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.utils.TaskSingleDrainer $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mIdleDrainer>;

        return $r1;
    }

    static android.hardware.camera2.CameraCaptureSession$StateCallback access$600(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        return $r1;
    }

    static boolean access$700(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting>;

        return $z0;
    }

    static boolean access$702(android.hardware.camera2.impl.CameraCaptureSessionImpl, boolean)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        z0 := @parameter1: boolean;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting> = z0;

        return z0;
    }

    static android.hardware.camera2.utils.TaskSingleDrainer access$800(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.utils.TaskSingleDrainer $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer>;

        return $r1;
    }

    static boolean access$900(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mSkipUnconfigure>;

        return $z0;
    }

    private int addPendingSequence(int)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;
        android.hardware.camera2.utils.TaskDrainer $r1;
        java.lang.Integer $r2;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<android.hardware.camera2.utils.TaskDrainer: void taskStarted(java.lang.Object)>($r2);

        return i0;
    }

    private void checkCaptureRequest(android.hardware.camera2.CaptureRequest)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        if r1 == null goto label5;

        $z0 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: boolean isReprocess()>();

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean isReprocessable()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("this capture session cannot handle reprocess requests");

        throw $r4;

     label2:
        $z1 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: boolean isReprocess()>();

        if $z1 == 0 goto label4;

        $i0 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: int getReprocessableSessionId()>();

        $i1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int mId>;

        if $i0 != $i1 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("capture request was created for another session");

        throw $r3;

     label4:
        return;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("request must not be null");

        throw $r2;
    }

    private void checkCaptureRequests(java.util.List)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.lang.IllegalArgumentException $r2, $r3, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r4;
        int $i0, $i1;
        java.util.List r7;
        java.util.Iterator r8;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r7 := @parameter0: java.util.List;

        if r7 == null goto label7;

        $z0 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.hardware.camera2.CaptureRequest) $r4;

        $z2 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: boolean isReprocess()>();

        if $z2 == 0 goto label4;

        $z3 = virtualinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean isReprocessable()>();

        if $z3 == 0 goto label3;

        $i0 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: int getReprocessableSessionId()>();

        $i1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int mId>;

        if $i0 != $i1 goto label2;

        goto label4;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Capture request was created for another session");

        throw $r6;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This capture session cannot handle reprocess requests");

        throw $r5;

     label4:
        goto label1;

     label5:
        return;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requests must have at least one element");

        throw $r3;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requests must not be null");

        throw $r2;
    }

    private void checkNotClosed()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Session has been closed; further changes are illegal.");

        throw $r1;
    }

    private void checkRepeatingRequest(android.hardware.camera2.CaptureRequest)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.lang.IllegalArgumentException $r2, $r3;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: boolean isReprocess()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("repeating reprocess requests are not supported");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("request must not be null");

        throw $r2;
    }

    private void checkRepeatingRequests(java.util.List)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.IllegalArgumentException $r1, $r2, $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        android.hardware.camera2.CaptureRequest $r4;
        java.util.List r6;
        java.util.Iterator r7;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r6 := @parameter0: java.util.List;

        if r6 == null goto label5;

        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.hardware.camera2.CaptureRequest) $r3;

        $z2 = virtualinvoke $r4.<android.hardware.camera2.CaptureRequest: boolean isReprocess()>();

        if $z2 != 0 goto label2;

        goto label1;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("repeating reprocess burst requests are not supported");

        throw $r5;

     label3:
        return;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("requests must have at least one element");

        throw $r2;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("requests must not be null");

        throw $r1;
    }

    private android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxy(android.os.Handler, android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        android.hardware.camera2.impl.CaptureCallback $r2;
        android.os.Handler r3;
        java.util.concurrent.Executor r4;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r3 := @parameter0: android.os.Handler;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        if r1 == null goto label1;

        r4 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r3);

        goto label2;

     label1:
        r4 = null;

     label2:
        $r2 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r4, r1);

        return $r2;
    }

    private android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.util.concurrent.Executor r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$1 $r3;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r3 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$1;

        specialinvoke $r3.<android.hardware.camera2.impl.CameraCaptureSessionImpl$1: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.hardware.camera2.CameraCaptureSession$CaptureCallback,java.util.concurrent.Executor)>(r0, r1, r2, r2, r1);

        return $r3;
    }

    private android.hardware.camera2.CameraCaptureSession$StateCallback createUserStateCallbackProxy(java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$StateCallback)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.util.concurrent.Executor r1;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2;
        android.hardware.camera2.impl.CallbackProxies$SessionStateCallbackProxy $r3;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$StateCallback;

        $r3 = new android.hardware.camera2.impl.CallbackProxies$SessionStateCallbackProxy;

        specialinvoke $r3.<android.hardware.camera2.impl.CallbackProxies$SessionStateCallbackProxy: void <init>(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$StateCallback)>(r1, r2);

        return $r3;
    }

    private void finishPendingSequence(int)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;
        android.hardware.camera2.utils.TaskDrainer $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r4;
        java.lang.String $r5;
        java.lang.IllegalStateException r6;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<android.hardware.camera2.utils.TaskDrainer: void taskFinished(java.lang.Object)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = (java.lang.IllegalStateException) $r4;

        $r5 = virtualinvoke r6.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraCaptureSession", $r5);

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void abortCaptures() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r4;
        boolean $z0;
        android.hardware.camera2.utils.TaskSingleDrainer $r3;
        java.lang.String $r5, $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting>;

        if $z0 == 0 goto label3;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abortCaptures - Session is already aborting; doing nothing");

        $r8 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraCaptureSession", $r8);

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting> = 1;

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer>;

        virtualinvoke $r3.<android.hardware.camera2.utils.TaskSingleDrainer: void taskStarted()>();

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: void flush()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        android.hardware.camera2.impl.CameraDeviceImpl $r3, $r4;
        android.hardware.camera2.impl.CaptureCallback $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Throwable $r7;
        android.hardware.camera2.CaptureRequest r8;
        android.os.Handler r9, r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r8 := @parameter0: android.hardware.camera2.CaptureRequest;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r9 := @parameter2: android.os.Handler;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkCaptureRequest(android.hardware.camera2.CaptureRequest)>(r8);

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r3.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r10 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r9, r1);

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r5 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r10, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r8, $r5, $r6);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int captureBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        android.hardware.camera2.impl.CameraDeviceImpl $r3, $r4;
        android.hardware.camera2.impl.CaptureCallback $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Throwable $r7;
        java.util.List r8;
        android.os.Handler r9, r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r8 := @parameter0: java.util.List;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r9 := @parameter2: android.os.Handler;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkCaptureRequests(java.util.List)>(r8);

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r3.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r10 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r9, r1);

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r5 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r10, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: int captureBurst(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r8, $r5, $r6);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int captureBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3, $r4;
        android.hardware.camera2.impl.CameraDeviceImpl $r5, $r6;
        android.hardware.camera2.impl.CaptureCallback $r7;
        java.util.concurrent.Executor $r8, r11, r12;
        java.lang.Throwable $r9;
        java.util.List r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r10 := @parameter0: java.util.List;

        r11 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        if r11 == null goto label7;

        if r1 == null goto label6;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkCaptureRequests(java.util.List)>(r10);

        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r5.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r12 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor,java.lang.Object)>(r11, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r7 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r12, r1);

        $r8 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r6.<android.hardware.camera2.impl.CameraDeviceImpl: int captureBurst(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r10, $r7, $r8);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r9;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r4;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("executor must not be null");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int captureSingleRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3, $r4;
        android.hardware.camera2.impl.CameraDeviceImpl $r5, $r6;
        android.hardware.camera2.impl.CaptureCallback $r7;
        java.util.concurrent.Executor $r8, r11, r12;
        java.lang.Throwable $r9;
        android.hardware.camera2.CaptureRequest r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r10 := @parameter0: android.hardware.camera2.CaptureRequest;

        r11 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        if r11 == null goto label7;

        if r1 == null goto label6;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkCaptureRequest(android.hardware.camera2.CaptureRequest)>(r10);

        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r5.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r12 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor,java.lang.Object)>(r11, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r7 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r12, r1);

        $r8 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r6.<android.hardware.camera2.impl.CameraDeviceImpl: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r10, $r7, $r8);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r9;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r4;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("executor must not be null");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void close()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.StringBuilder r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r3;
        boolean $z0;
        android.hardware.camera2.utils.TaskDrainer $r4;
        java.lang.Throwable $r5, $r12;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r6;
        android.hardware.camera2.CameraAccessException $r7;
        java.lang.String $r8, $r11;
        java.lang.Object r13;
        android.view.Surface r15;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r13 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r13;

     label01:
        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed>;

        if $z0 == 0 goto label03;

        exitmonitor r13;

     label02:
        return;

     label03:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed> = 1;

     label04:
        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r3.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

     label05:
        goto label08;

     label06:
        $r7 := @caughtexception;

     label07:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while stopping repeating: ");

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraCaptureSession", $r11, $r7);

     label08:
        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer>;

        virtualinvoke $r4.<android.hardware.camera2.utils.TaskDrainer: void beginDrain()>();

        exitmonitor r13;

     label09:
        r15 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.view.Surface mInput>;

        if r15 == null goto label10;

        virtualinvoke r15.<android.view.Surface: void release()>();

     label10:
        return;

     label11:
        $r5 := @caughtexception;

     label12:
        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        virtualinvoke $r6.<android.hardware.camera2.CameraCaptureSession$StateCallback: void onClosed(android.hardware.camera2.CameraCaptureSession)>(r0);

        exitmonitor r13;

     label13:
        return;

     label14:
        $r12 := @caughtexception;

     label15:
        exitmonitor r13;

     label16:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.IllegalStateException from label04 to label05 with label11;
        catch android.hardware.camera2.CameraAccessException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void closeWithoutDraining()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2;
        boolean $z0;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r3;
        java.lang.Throwable $r4;
        android.view.Surface r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed> = 1;

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        virtualinvoke $r3.<android.hardware.camera2.CameraCaptureSession$StateCallback: void onClosed(android.hardware.camera2.CameraCaptureSession)>(r0);

        exitmonitor r1;

     label4:
        r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.view.Surface mInput>;

        if r5 == null goto label5;

        virtualinvoke r5.<android.view.Surface: void release()>();

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Throwable $r2;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

     label1:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void finalizeOutputConfigurations(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r3;
        java.lang.Throwable $r4;
        java.util.List r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r5 := @parameter0: java.util.List;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r3.<android.hardware.camera2.impl.CameraDeviceImpl: void finalizeOutputConfigs(java.util.List)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.hardware.camera2.CameraDevice getDevice()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl $r1;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        return $r1;
    }

    public android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$2 $r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$2;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r3 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        specialinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl$2: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.CameraCaptureSession,java.lang.Object)>(r0, r0, $r3);

        return $r1;
    }

    public android.view.Surface getInputSurface()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.view.Surface $r1;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.view.Surface mInput>;

        return $r1;
    }

    public boolean isAborting()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting>;

        return $z0;
    }

    public boolean isReprocessable()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.view.Surface $r1;
        boolean z0;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.view.Surface mInput>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void prepare(int, android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r3;
        java.lang.Throwable $r4;
        android.view.Surface r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter0: int;

        r5 := @parameter1: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r3.<android.hardware.camera2.impl.CameraDeviceImpl: void prepare(int,android.view.Surface)>(i0, r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void prepare(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r3;
        java.lang.Throwable $r4;
        android.view.Surface r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r5 := @parameter0: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r3.<android.hardware.camera2.impl.CameraDeviceImpl: void prepare(android.view.Surface)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void replaceSessionClose()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r3.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mSkipUnconfigure> = 1;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int setRepeatingBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        android.hardware.camera2.impl.CameraDeviceImpl $r3, $r4;
        android.hardware.camera2.impl.CaptureCallback $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Throwable $r7;
        java.util.List r8;
        android.os.Handler r9, r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r8 := @parameter0: java.util.List;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r9 := @parameter2: android.os.Handler;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkRepeatingRequests(java.util.List)>(r8);

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r3.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r10 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r9, r1);

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r5 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r10, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: int setRepeatingBurst(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r8, $r5, $r6);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int setRepeatingBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3, $r4;
        android.hardware.camera2.impl.CameraDeviceImpl $r5, $r6;
        android.hardware.camera2.impl.CaptureCallback $r7;
        java.util.concurrent.Executor $r8, r11, r12;
        java.lang.Throwable $r9;
        java.util.List r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r10 := @parameter0: java.util.List;

        r11 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        if r11 == null goto label7;

        if r1 == null goto label6;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkRepeatingRequests(java.util.List)>(r10);

        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r5.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r12 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor,java.lang.Object)>(r11, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r7 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r12, r1);

        $r8 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r6.<android.hardware.camera2.impl.CameraDeviceImpl: int setRepeatingBurst(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r10, $r7, $r8);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r9;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r4;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("executor must not be null");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        android.hardware.camera2.impl.CameraDeviceImpl $r3, $r4;
        android.hardware.camera2.impl.CaptureCallback $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Throwable $r7;
        android.hardware.camera2.CaptureRequest r8;
        android.os.Handler r9, r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r8 := @parameter0: android.hardware.camera2.CaptureRequest;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r9 := @parameter2: android.os.Handler;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkRepeatingRequest(android.hardware.camera2.CaptureRequest)>(r8);

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r3.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r10 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r9, r1);

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r5 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r10, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r8, $r5, $r6);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r1;
        java.lang.Object r2;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3, $r4;
        android.hardware.camera2.impl.CameraDeviceImpl $r5, $r6;
        android.hardware.camera2.impl.CaptureCallback $r7;
        java.util.concurrent.Executor $r8, r11, r12;
        java.lang.Throwable $r9;
        android.hardware.camera2.CaptureRequest r10;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r10 := @parameter0: android.hardware.camera2.CaptureRequest;

        r11 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        if r11 == null goto label7;

        if r1 == null goto label6;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkRepeatingRequest(android.hardware.camera2.CaptureRequest)>(r10);

        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r2 = $r5.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r12 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor,java.lang.Object)>(r11, r1);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r7 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CaptureCallback createCaptureCallbackProxyWithExecutor(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r12, r1);

        $r8 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $i1 = virtualinvoke $r6.<android.hardware.camera2.impl.CameraDeviceImpl: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor)>(r10, $r7, $r8);

        i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i1);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r9;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r4;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("executor must not be null");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r3.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean supportsOfflineProcessing(android.view.Surface)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.view.Surface r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r5 := @parameter0: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        exitmonitor r1;

     label2:
        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $z0 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraDeviceImpl: boolean supportsOfflineProcessing(android.view.Surface)>(r5);

        return $z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection, java.util.concurrent.Executor, android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.util.concurrent.Executor r1;
        android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback r2;
        java.lang.Object r3;
        android.hardware.camera2.impl.CameraDeviceImpl $r4, $r5;
        android.hardware.camera2.CameraOfflineSession $r6;
        java.lang.Throwable $r7;
        java.util.Collection r8;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r8 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback;

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r3 = $r4.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r3;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        exitmonitor r3;

     label2:
        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r6 = virtualinvoke $r5.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection,java.util.concurrent.Executor,android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback)>(r8, r1, r2);

        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void tearDown(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r3;
        java.lang.Throwable $r4;
        android.view.Surface r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r5 := @parameter0: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r3.<android.hardware.camera2.impl.CameraDeviceImpl: void tearDown(android.view.Surface)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2, $r3;
        java.lang.Throwable $r4;
        android.hardware.camera2.params.OutputConfiguration r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r5 := @parameter0: android.hardware.camera2.params.OutputConfiguration;

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        r1 = $r2.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r3.<android.hardware.camera2.impl.CameraDeviceImpl: void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String TAG> = "CameraCaptureSession";

        <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean DEBUG> = 0;

        return;
    }
}
