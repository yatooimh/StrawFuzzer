public class android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl extends android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession implements android.hardware.camera2.impl.CameraCaptureSessionCore
{
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final android.os.ConditionVariable mInitialized;
    private final android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl;

    void <init>(int, android.hardware.camera2.CameraCaptureSession$StateCallback, java.util.concurrent.Executor, android.hardware.camera2.impl.CameraDeviceImpl, java.util.concurrent.Executor, boolean, android.hardware.camera2.CameraCharacteristics)
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        int i0;
        android.hardware.camera2.CameraCaptureSession$StateCallback r1;
        java.util.concurrent.Executor r2, r4;
        android.hardware.camera2.impl.CameraDeviceImpl r3;
        boolean z0;
        android.hardware.camera2.CameraCharacteristics r5;
        android.os.ConditionVariable $r6, $r9;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r7;
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl$WrapperCallback $r8;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: android.hardware.camera2.impl.CameraDeviceImpl;

        r4 := @parameter4: java.util.concurrent.Executor;

        z0 := @parameter5: boolean;

        r5 := @parameter6: android.hardware.camera2.CameraCharacteristics;

        specialinvoke r0.<android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession: void <init>()>();

        $r6 = new android.os.ConditionVariable;

        specialinvoke $r6.<android.os.ConditionVariable: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.os.ConditionVariable mInitialized> = $r6;

        r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics> = r5;

        $r7 = new android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r8 = new android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl$WrapperCallback;

        specialinvoke $r8.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl$WrapperCallback: void <init>(android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl,android.hardware.camera2.CameraCaptureSession$StateCallback)>(r0, r1);

        specialinvoke $r7.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void <init>(int,android.view.Surface,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,android.hardware.camera2.impl.CameraDeviceImpl,java.util.concurrent.Executor,boolean)>(i0, null, $r8, r2, r3, r4, z0);

        r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl> = $r7;

        $r9 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.os.ConditionVariable mInitialized>;

        virtualinvoke $r9.<android.os.ConditionVariable: void open()>();

        return;
    }

    static android.os.ConditionVariable access$000(android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.os.ConditionVariable $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.os.ConditionVariable mInitialized>;

        return $r1;
    }

    private boolean isConstrainedHighSpeedRequestList(java.util.List)
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        boolean $z0, $z1;
        java.lang.Object $r2;
        android.hardware.camera2.CaptureRequest $r3;
        java.util.List r4;
        java.util.Iterator r5;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r4 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.util.Collection checkCollectionNotEmpty(java.util.Collection,java.lang.String)>(r4, "High speed request list");

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (android.hardware.camera2.CaptureRequest) $r2;

        $z1 = virtualinvoke $r3.<android.hardware.camera2.CaptureRequest: boolean isPartOfCRequestList()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public void abortCaptures() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void abortCaptures()>();

        return;
    }

    public int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support this method");

        throw $r4;
    }

    public int captureBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r5;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: boolean isConstrainedHighSpeedRequestList(java.util.List)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        $i0 = virtualinvoke $r5.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int captureBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>(r1, r2, r3);

        return $i0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only request lists created by createHighSpeedRequestList() can be submitted to a constrained high speed capture session");

        throw $r4;
    }

    public int captureBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r5;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: boolean isConstrainedHighSpeedRequestList(java.util.List)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        $i0 = virtualinvoke $r5.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only request lists created by createHighSpeedRequestList() can be submitted to a constrained high speed capture session");

        throw $r4;
    }

    public int captureSingleRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support this method");

        throw $r4;
    }

    public void close()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>();

        return;
    }

    public void closeWithoutDraining()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support this method");

        throw $r1;
    }

    public java.util.List createHighSpeedRequestList(android.hardware.camera2.CaptureRequest) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.util.Collection r1;
        int i0, $i1, $i2, $i3, i4;
        java.lang.IllegalArgumentException $r4;
        android.hardware.camera2.CaptureRequest$Key $r5, $r20, $r30, $r33;
        java.lang.Object $r6, $r9, $r18, $r19, $r29, $r32;
        android.hardware.camera2.CameraCharacteristics$Key $r7;
        android.hardware.camera2.CameraCharacteristics $r8;
        android.hardware.camera2.params.StreamConfigurationMap $r10;
        java.lang.Comparable $r11;
        java.lang.Integer $r12, $r21, $r31, $r34;
        java.util.ArrayList $r13;
        android.hardware.camera2.CaptureRequest$Builder $r14, $r25, r42;
        android.hardware.camera2.impl.CameraMetadataNative $r15, $r16, $r26, $r27;
        java.lang.String $r17, $r28;
        java.util.List $r22;
        android.hardware.camera2.CaptureRequest $r23, $r24, r35;
        boolean $z0, $z1;
        android.util.Range r36;
        java.util.Iterator r37;
        android.view.Surface r38, r40, r41;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r35 := @parameter0: android.hardware.camera2.CaptureRequest;

        if r35 == null goto label10;

        r1 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        $r6 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r5);

        r36 = (android.util.Range) $r6;

        $r8 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r9 = virtualinvoke $r8.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r7);

        $r10 = (android.hardware.camera2.params.StreamConfigurationMap) $r9;

        staticinvoke <android.hardware.camera2.utils.SurfaceUtils: void checkConstrainedHighSpeedSurfaces(java.util.Collection,android.util.Range,android.hardware.camera2.params.StreamConfigurationMap)>(r1, r36, $r10);

        $r11 = virtualinvoke r36.<android.util.Range: java.lang.Comparable getUpper()>();

        $r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        i0 = $i1 / 30;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new android.hardware.camera2.CaptureRequest$Builder;

        $r15 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r16 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()>();

        specialinvoke $r15.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r16);

        $r17 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: java.lang.String getLogicalCameraId()>();

        specialinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative,boolean,int,java.lang.String,java.util.Set)>($r15, 0, -1, $r17, null);

        $r18 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>();

        virtualinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>($r18);

        r37 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r19 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (android.view.Surface) $r19;

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i2 != 1 goto label01;

        $z1 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForHwVideoEncoder(android.view.Surface)>(r38);

        if $z1 == 0 goto label01;

        $r33 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r33, $r34);

        goto label02;

     label01:
        $r20 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r20, $r21);

     label02:
        virtualinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: void setPartOfCHSRequestList(boolean)>(1);

        $i3 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i3 != 2 goto label04;

        $r25 = new android.hardware.camera2.CaptureRequest$Builder;

        $r26 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r27 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()>();

        specialinvoke $r26.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r27);

        $r28 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: java.lang.String getLogicalCameraId()>();

        specialinvoke $r25.<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative,boolean,int,java.lang.String,java.util.Set)>($r26, 0, -1, $r28, null);

        $r29 = virtualinvoke r35.<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>();

        virtualinvoke $r25.<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>($r29);

        $r30 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r25.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r30, $r31);

        virtualinvoke $r25.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>(r38);

        $r32 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r40 = (android.view.Surface) $r32;

        virtualinvoke $r25.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>(r40);

        virtualinvoke $r25.<android.hardware.camera2.CaptureRequest$Builder: void setPartOfCHSRequestList(boolean)>(1);

        r41 = r38;

        $z0 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForHwVideoEncoder(android.view.Surface)>(r38);

        if $z0 != 0 goto label03;

        r41 = r40;

     label03:
        virtualinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>(r41);

        r42 = $r25;

        goto label05;

     label04:
        virtualinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>(r38);

        r42 = null;

     label05:
        i4 = 0;

     label06:
        if i4 >= i0 goto label09;

        if i4 != 0 goto label07;

        if r42 == null goto label07;

        $r24 = virtualinvoke r42.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label08;

     label07:
        $r23 = virtualinvoke $r14.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r23);

     label08:
        i4 = i4 + 1;

        goto label06;

     label09:
        $r22 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r13);

        return $r22;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input capture request must not be null");

        throw $r4;
    }

    public void finalizeOutputConfigurations(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.util.List r1;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void finalizeOutputConfigurations(java.util.List)>(r1);

        return;
    }

    public android.hardware.camera2.CameraDevice getDevice()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;
        android.hardware.camera2.CameraDevice $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        $r2 = virtualinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraDevice getDevice()>();

        return $r2;
    }

    public android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;
        android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        $r2 = virtualinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()>();

        return $r2;
    }

    public android.view.Surface getInputSurface()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        return null;
    }

    public boolean isAborting()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        $z0 = virtualinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean isAborting()>();

        return $z0;
    }

    public boolean isReprocessable()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        return 0;
    }

    public void prepare(int, android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        int i0;
        android.view.Surface r1;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void prepare(int,android.view.Surface)>(i0, r1);

        return;
    }

    public void prepare(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.view.Surface r1;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void prepare(android.view.Surface)>(r1);

        return;
    }

    public void replaceSessionClose()
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void replaceSessionClose()>();

        return;
    }

    public int setRepeatingBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r5;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: boolean isConstrainedHighSpeedRequestList(java.util.List)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        $i0 = virtualinvoke $r5.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int setRepeatingBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>(r1, r2, r3);

        return $i0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only request lists created by createHighSpeedRequestList() can be submitted to a constrained high speed capture session");

        throw $r4;
    }

    public int setRepeatingBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r5;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: boolean isConstrainedHighSpeedRequestList(java.util.List)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        $i0 = virtualinvoke $r5.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only request lists created by createHighSpeedRequestList() can be submitted to a constrained high speed capture session");

        throw $r4;
    }

    public int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support this method");

        throw $r4;
    }

    public int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support this method");

        throw $r4;
    }

    public void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r1.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void stopRepeating()>();

        return;
    }

    public boolean supportsOfflineProcessing(android.view.Surface)
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.view.Surface r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.view.Surface;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support offline mode");

        throw $r2;
    }

    public android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection, java.util.concurrent.Executor, android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        java.util.Collection r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support this method");

        throw $r4;
    }

    public void tearDown(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.view.Surface r1;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mSessionImpl>;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void tearDown(android.view.Surface)>(r1);

        return;
    }

    public void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r0;
        android.hardware.camera2.params.OutputConfiguration r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.params.OutputConfiguration;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support this method");

        throw $r2;
    }
}
