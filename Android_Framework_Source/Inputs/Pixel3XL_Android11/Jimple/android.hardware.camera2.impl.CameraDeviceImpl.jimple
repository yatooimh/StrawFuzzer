public class android.hardware.camera2.impl.CameraDeviceImpl extends android.hardware.camera2.CameraDevice implements android.os.IBinder$DeathRecipient
{
    private static final long NANO_PER_SECOND;
    private static final int REQUEST_ID_NONE;
    private final boolean DEBUG;
    private final java.lang.String TAG;
    private final int mAppTargetSdkVersion;
    private final java.lang.Runnable mCallOnActive;
    private final java.lang.Runnable mCallOnBusy;
    private final java.lang.Runnable mCallOnClosed;
    private final java.lang.Runnable mCallOnDisconnected;
    private final java.lang.Runnable mCallOnIdle;
    private final java.lang.Runnable mCallOnOpened;
    private final java.lang.Runnable mCallOnUnconfigured;
    private final android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks mCallbacks;
    private final java.lang.String mCameraId;
    private android.util.SparseArray mCaptureCallbackMap;
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final java.util.concurrent.atomic.AtomicBoolean mClosing;
    private java.util.AbstractMap$SimpleEntry mConfiguredInput;
    private final android.util.SparseArray mConfiguredOutputs;
    private android.hardware.camera2.impl.CameraCaptureSessionCore mCurrentSession;
    private final android.hardware.camera2.CameraDevice$StateCallback mDeviceCallback;
    private final java.util.concurrent.Executor mDeviceExecutor;
    private android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker;
    private boolean mIdle;
    private boolean mInError;
    final java.lang.Object mInterfaceLock;
    private int mNextSessionId;
    private android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl;
    private final java.util.HashSet mOfflineSupport;
    private java.util.concurrent.ExecutorService mOfflineSwitchService;
    private android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice;
    private int mRepeatingRequestId;
    private int[] mRepeatingRequestTypes;
    private final java.util.List mRequestLastFrameNumbersList;
    private volatile android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback;
    private final int mTotalPartialCount;

    public void <init>(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, java.util.concurrent.Executor, android.hardware.camera2.CameraCharacteristics, int)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.concurrent.Executor r1;
        android.hardware.camera2.CameraCharacteristics r2, $r22;
        int i0, $i1, $i2;
        java.lang.Object $r3, $r23;
        android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        android.util.SparseArray $r6, $r9;
        java.util.AbstractMap$SimpleEntry $r7;
        java.lang.Integer $r8, r28;
        java.util.HashSet $r10;
        java.util.ArrayList $r11;
        android.hardware.camera2.impl.FrameNumberTracker $r12;
        android.hardware.camera2.impl.CameraDeviceImpl$1 $r13;
        android.hardware.camera2.impl.CameraDeviceImpl$2 $r14;
        android.hardware.camera2.impl.CameraDeviceImpl$3 $r15;
        android.hardware.camera2.impl.CameraDeviceImpl$4 $r16;
        android.hardware.camera2.impl.CameraDeviceImpl$5 $r17;
        android.hardware.camera2.impl.CameraDeviceImpl$6 $r18;
        android.hardware.camera2.impl.CameraDeviceImpl$7 $r19;
        java.lang.Object[] $r20;
        android.hardware.camera2.CameraCharacteristics$Key $r21;
        java.lang.String r24, r26, r27;
        android.hardware.camera2.CameraDevice$StateCallback r25;
        java.lang.IllegalArgumentException $r29;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r24 := @parameter0: java.lang.String;

        r25 := @parameter1: android.hardware.camera2.CameraDevice$StateCallback;

        r1 := @parameter2: java.util.concurrent.Executor;

        r2 := @parameter3: android.hardware.camera2.CameraCharacteristics;

        i0 := @parameter4: int;

        specialinvoke r0.<android.hardware.camera2.CameraDevice: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock> = $r3;

        $r4 = new android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks;

        specialinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks mCallbacks> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.atomic.AtomicBoolean mClosing> = $r5;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = 0;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle> = 1;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap> = $r6;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = -1;

        $r7 = new java.util.AbstractMap$SimpleEntry;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        specialinvoke $r7.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r8, null);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.AbstractMap$SimpleEntry mConfiguredInput> = $r7;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.HashSet mOfflineSupport> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mRequestLastFrameNumbersList> = $r11;

        $r12 = new android.hardware.camera2.impl.FrameNumberTracker;

        specialinvoke $r12.<android.hardware.camera2.impl.FrameNumberTracker: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker> = $r12;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId> = 0;

        $r13 = new android.hardware.camera2.impl.CameraDeviceImpl$1;

        specialinvoke $r13.<android.hardware.camera2.impl.CameraDeviceImpl$1: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnOpened> = $r13;

        $r14 = new android.hardware.camera2.impl.CameraDeviceImpl$2;

        specialinvoke $r14.<android.hardware.camera2.impl.CameraDeviceImpl$2: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured> = $r14;

        $r15 = new android.hardware.camera2.impl.CameraDeviceImpl$3;

        specialinvoke $r15.<android.hardware.camera2.impl.CameraDeviceImpl$3: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnActive> = $r15;

        $r16 = new android.hardware.camera2.impl.CameraDeviceImpl$4;

        specialinvoke $r16.<android.hardware.camera2.impl.CameraDeviceImpl$4: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnBusy> = $r16;

        $r17 = new android.hardware.camera2.impl.CameraDeviceImpl$5;

        specialinvoke $r17.<android.hardware.camera2.impl.CameraDeviceImpl$5: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnClosed> = $r17;

        $r18 = new android.hardware.camera2.impl.CameraDeviceImpl$6;

        specialinvoke $r18.<android.hardware.camera2.impl.CameraDeviceImpl$6: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle> = $r18;

        $r19 = new android.hardware.camera2.impl.CameraDeviceImpl$7;

        specialinvoke $r19.<android.hardware.camera2.impl.CameraDeviceImpl$7: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnDisconnected> = $r19;

        if r24 == null goto label4;

        if r25 == null goto label4;

        if r1 == null goto label4;

        if r2 == null goto label4;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String mCameraId> = r24;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraDevice$StateCallback mDeviceCallback> = r25;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor> = r1;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics> = r2;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mAppTargetSdkVersion> = i0;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r24;

        r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CameraDevice-JV-%s", $r20);

        r27 = r26;

        $i1 = virtualinvoke r26.<java.lang.String: int length()>();

        if $i1 <= 23 goto label1;

        r27 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int,int)>(0, 23);

     label1:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG> = r27;

        $r22 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r21 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>;

        $r23 = virtualinvoke $r22.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r21);

        r28 = (java.lang.Integer) $r23;

        if r28 != null goto label2;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mTotalPartialCount> = 1;

        goto label3;

     label2:
        $i2 = virtualinvoke r28.<java.lang.Integer: int intValue()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mTotalPartialCount> = $i2;

     label3:
        return;

     label4:
        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument given");

        throw $r29;
    }

    static android.hardware.camera2.impl.ICameraDeviceUserWrapper access$000(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        return $r1;
    }

    static android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK access$100(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback>;

        return $r1;
    }

    static android.hardware.camera2.CameraCharacteristics access$1000(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraCharacteristics $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics getCharacteristics()>();

        return $r1;
    }

    static int access$1100(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int $i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mTotalPartialCount>;

        return $i0;
    }

    static android.hardware.camera2.impl.FrameNumberTracker access$1200(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.FrameNumberTracker $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        return $r1;
    }

    static void access$1300(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkAndFireSequenceComplete()>();

        return;
    }

    static android.util.SparseArray access$1400(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        return $r1;
    }

    static java.lang.String access$1500(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        return $r1;
    }

    static android.hardware.camera2.CameraDevice$StateCallback access$200(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraDevice$StateCallback $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraDevice$StateCallback mDeviceCallback>;

        return $r1;
    }

    static android.hardware.camera2.impl.CameraOfflineSessionImpl access$300(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl>;

        return $r1;
    }

    static android.hardware.camera2.impl.CameraOfflineSessionImpl access$302(android.hardware.camera2.impl.CameraDeviceImpl, android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraOfflineSessionImpl r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter1: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl> = r1;

        return r1;
    }

    static boolean access$400(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean isClosed()>();

        return $z0;
    }

    static int access$500(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int $i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        return $i0;
    }

    static int access$502(android.hardware.camera2.impl.CameraDeviceImpl, int)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter1: int;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = i0;

        return i0;
    }

    static int[] access$600(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes>;

        return $r1;
    }

    static int[] access$602(android.hardware.camera2.impl.CameraDeviceImpl, int[])
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int[] r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter1: int[];

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes> = r1;

        return r1;
    }

    static void access$700(android.hardware.camera2.impl.CameraDeviceImpl, int, long, int[])
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;
        long l1;
        int[] r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 := @parameter3: int[];

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkEarlyTriggerSequenceCompleteLocked(int,long,int[])>(i0, l1, r1);

        return;
    }

    static void access$800(android.hardware.camera2.impl.CameraDeviceImpl, long, long, long)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        long l0, l1, l2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void removeCompletedCallbackHolderLocked(long,long,long)>(l0, l1, l2);

        return;
    }

    static android.util.SparseArray access$900(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        return $r1;
    }

    private void checkAndFireSequenceComplete()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        long l0, l1, l2, l3, l4, l11, l12;
        java.util.Iterator r1;
        android.hardware.camera2.impl.RequestLastFrameNumbersHolder r2;
        int i5, i10, i13;
        android.hardware.camera2.impl.FrameNumberTracker $r4, $r5, $r6;
        java.util.List $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r8, $r14;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r9;
        android.util.SparseArray $r10, $r11, $r13, $r18;
        byte $b6, $b7, $b8;
        android.hardware.camera2.impl.CameraDeviceImpl$11 $r12;
        java.lang.String $r15;
        java.lang.Throwable $r16, $r17, r21;
        android.hardware.camera2.impl.CaptureCallbackHolder r19;
        java.util.concurrent.Executor r20;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        l0 = virtualinvoke $r4.<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedFrameNumber()>();

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        l1 = virtualinvoke $r5.<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedReprocessFrameNumber()>();

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        l2 = virtualinvoke $r6.<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedZslStillFrameNumber()>();

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mRequestLastFrameNumbersList>;

        r1 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.camera2.impl.RequestLastFrameNumbersHolder) $r8;

        i10 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: int getRequestId()>();

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r9 != null goto label02;

        $r15 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r15, "Camera closed while checking sequences");

        return;

     label02:
        $z1 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: boolean isSequenceCompleted()>();

        if $z1 != 0 goto label13;

        l3 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastRegularFrameNumber()>();

        l11 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastReprocessFrameNumber()>();

        l4 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastZslStillFrameNumber()>();

        $b6 = l3 cmp l0;

        if $b6 > 0 goto label03;

        $b7 = l11 cmp l1;

        if $b7 > 0 goto label03;

        $b8 = l4 cmp l2;

        if $b8 > 0 goto label03;

        virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: void markSequenceCompleted()>();

     label03:
        $r18 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        i5 = virtualinvoke $r18.<android.util.SparseArray: int indexOfKey(int)>(i10);

        if i5 < 0 goto label04;

        $r13 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r19 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r14;

        goto label05;

     label04:
        r19 = null;

     label05:
        if r19 == null goto label12;

        $z3 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: boolean isSequenceCompleted()>();

        if $z3 == 0 goto label12;

        $r12 = new android.hardware.camera2.impl.CameraDeviceImpl$11;

        specialinvoke $r12.<android.hardware.camera2.impl.CameraDeviceImpl$11: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,int,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.impl.RequestLastFrameNumbersHolder)>(r0, i10, r19, r2);

        l12 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        r20 = virtualinvoke r19.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.concurrent.Executor getExecutor()>();

     label07:
        interfaceinvoke r20.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r12);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        goto label13;

     label09:
        $r16 := @caughtexception;

        r21 = $r16;

        goto label11;

     label10:
        $r17 := @caughtexception;

        r21 = $r17;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        throw r21;

     label12:
        goto label13;

     label13:
        $z4 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: boolean isSequenceCompleted()>();

        if $z4 == 0 goto label15;

        $z2 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: boolean isInflightCompleted()>();

        if $z2 == 0 goto label15;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        i13 = virtualinvoke $r10.<android.util.SparseArray: int indexOfKey(int)>(i10);

        if i13 < 0 goto label14;

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        virtualinvoke $r11.<android.util.SparseArray: void removeAt(int)>(i13);

     label14:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label15:
        goto label01;

     label16:
        return;

        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public static java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)
    {
        android.os.Handler r0, $r2;
        android.hardware.camera2.impl.CameraDeviceImpl$CameraHandlerExecutor $r1;

        r0 := @parameter0: android.os.Handler;

        $r1 = new android.hardware.camera2.impl.CameraDeviceImpl$CameraHandlerExecutor;

        $r2 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler)>(r0);

        specialinvoke $r1.<android.hardware.camera2.impl.CameraDeviceImpl$CameraHandlerExecutor: void <init>(android.os.Handler)>($r2);

        return $r1;
    }

    private void checkEarlyTriggerSequenceCompleteLocked(int, long, int[])
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0, i1;
        byte $b2;
        android.hardware.camera2.impl.RequestLastFrameNumbersHolder $r2;
        java.util.List $r3;
        android.util.SparseArray $r4, $r11, $r12;
        java.lang.Object[] $r5;
        java.lang.String $r6, $r8;
        java.lang.Integer $r7;
        android.hardware.camera2.impl.CameraDeviceImpl$10 $r9;
        java.util.concurrent.Executor $r10;
        java.lang.Object $r13;
        java.lang.Throwable $r14;
        long l4, l5;
        int[] r15;
        android.hardware.camera2.impl.CaptureCallbackHolder r16;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        l4 := @parameter1: long;

        r15 := @parameter2: int[];

        $b2 = l4 cmp -1L;

        if $b2 != 0 goto label09;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int indexOfKey(int)>(i0);

        if i1 < 0 goto label01;

        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r16 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r13;

        goto label02;

     label01:
        r16 = null;

     label02:
        if r16 == null goto label03;

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        virtualinvoke $r11.<android.util.SparseArray: void removeAt(int)>(i1);

     label03:
        if r16 == null goto label07;

        $r9 = new android.hardware.camera2.impl.CameraDeviceImpl$10;

        specialinvoke $r9.<android.hardware.camera2.impl.CameraDeviceImpl$10: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,int,android.hardware.camera2.impl.CaptureCallbackHolder)>(r0, i0, r16);

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r10 = virtualinvoke r16.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.concurrent.Executor getExecutor()>();

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        goto label08;

     label06:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        throw $r14;

     label07:
        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("did not register callback to request %d", $r5);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, $r8);

     label08:
        goto label10;

     label09:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mRequestLastFrameNumbersList>;

        $r2 = new android.hardware.camera2.impl.RequestLastFrameNumbersHolder;

        specialinvoke $r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: void <init>(int,long,int[])>(i0, l4, r15);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkAndFireSequenceComplete()>();

     label10:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
    }

    static java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor r0;

        r0 := @parameter0: java.util.concurrent.Executor;

        if r0 != null goto label1;

        r0 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(null);

        goto label1;

     label1:
        return r0;
    }

    public static java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor, java.lang.Object)
    {
        java.lang.Object r0;
        java.util.concurrent.Executor r1;

        r1 := @parameter0: java.util.concurrent.Executor;

        r0 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        r1 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor)>(r1);

        goto label1;

     label1:
        return r1;
    }

    static android.os.Handler checkHandler(android.os.Handler)
    {
        java.lang.IllegalArgumentException $r0;
        android.os.Handler $r1, r2, r3;
        android.os.Looper r4;

        r2 := @parameter0: android.os.Handler;

        r3 = r2;

        if r2 != null goto label2;

        r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r4 == null goto label1;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>(r4);

        r3 = $r1;

        goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No handler given, and current thread has no looper!");

        throw $r0;

     label2:
        return r3;
    }

    static android.os.Handler checkHandler(android.os.Handler, java.lang.Object)
    {
        android.os.Handler r0, $r2;
        java.lang.Object r1;

        r0 := @parameter0: android.os.Handler;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler)>(r0);

        return $r2;

     label1:
        return r0;
    }

    private void checkIfCameraClosedOrInError() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r1;
        java.lang.IllegalStateException $r2;
        boolean $z0;
        android.hardware.camera2.CameraAccessException $r3;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r1 == null goto label2;

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new android.hardware.camera2.CameraAccessException;

        specialinvoke $r3.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(3, "The camera device has encountered a serious error");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraDevice was already closed");

        throw $r2;
    }

    private void checkInputConfiguration(android.hardware.camera2.params.InputConfiguration)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.params.InputConfiguration r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        android.hardware.camera2.CameraCharacteristics $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        java.lang.IllegalArgumentException $r9, $r17;
        java.lang.String $r10, $r18;
        android.hardware.camera2.params.StreamConfigurationMap r19;
        int[] r20;
        boolean z0, z1, z2;
        android.util.Size[] r21;
        android.util.Size r22;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.params.InputConfiguration;

        if r1 == null goto label9;

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r4 = virtualinvoke $r3.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r19 = (android.hardware.camera2.params.StreamConfigurationMap) $r4;

        r20 = virtualinvoke r19.<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>();

        z0 = 0;

        i10 = lengthof r20;

        i11 = 0;

        i12 = 0;

     label1:
        if i12 >= i10 goto label3;

        $i8 = r20[i12];

        $i9 = virtualinvoke r1.<android.hardware.camera2.params.InputConfiguration: int getFormat()>();

        if $i8 != $i9 goto label2;

        z0 = 1;

     label2:
        i12 = i12 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label8;

        z1 = 0;

        $i1 = virtualinvoke r1.<android.hardware.camera2.params.InputConfiguration: int getFormat()>();

        r21 = virtualinvoke r19.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>($i1);

        i13 = lengthof r21;

     label4:
        if i11 >= i13 goto label6;

        r22 = r21[i11];

        z2 = z1;

        $i4 = virtualinvoke r1.<android.hardware.camera2.params.InputConfiguration: int getWidth()>();

        $i5 = virtualinvoke r22.<android.util.Size: int getWidth()>();

        if $i4 != $i5 goto label5;

        z2 = z1;

        $i6 = virtualinvoke r1.<android.hardware.camera2.params.InputConfiguration: int getHeight()>();

        $i7 = virtualinvoke r22.<android.util.Size: int getHeight()>();

        if $i6 != $i7 goto label5;

        z2 = 1;

     label5:
        i11 = i11 + 1;

        z1 = z2;

        goto label4;

     label6:
        if z1 == 0 goto label7;

        goto label9;

     label7:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input size ");

        $i2 = virtualinvoke r1.<android.hardware.camera2.params.InputConfiguration: int getWidth()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i3 = virtualinvoke r1.<android.hardware.camera2.params.InputConfiguration: int getHeight()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label8:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input format ");

        $i0 = virtualinvoke r1.<android.hardware.camera2.params.InputConfiguration: int getFormat()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label9:
        return;
    }

    private void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration, java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, java.util.concurrent.Executor, int, android.hardware.camera2.CaptureRequest) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraCaptureSession$StateCallback r1;
        java.util.concurrent.Executor r2, $r6, $r13;
        java.lang.Object r3, $r10, $r14;
        android.hardware.camera2.impl.CameraCaptureSessionCore $r4, $r18, r30;
        int $i0, $i1, $i2, i3, i4, i5;
        android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK $r7;
        boolean $z0, z1, z2;
        android.hardware.camera2.CameraCharacteristics $r8, $r12;
        android.hardware.camera2.CameraCharacteristics$Key $r9;
        android.hardware.camera2.params.StreamConfigurationMap $r11;
        android.hardware.camera2.params.OutputConfiguration $r15;
        android.view.Surface $r16, r26;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r17;
        android.hardware.camera2.CameraAccessException $r19, r27;
        java.lang.Throwable $r20, $r21, r31;
        android.hardware.camera2.params.InputConfiguration r22;
        java.util.List r23;
        android.hardware.camera2.CaptureRequest r24;
        java.util.Iterator r29;
        java.lang.IllegalArgumentException r32;
        java.util.ArrayList r33;
        android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl r34;
        android.hardware.camera2.impl.CameraCaptureSessionImpl r35;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r22 := @parameter0: android.hardware.camera2.params.InputConfiguration;

        r23 := @parameter1: java.util.List;

        r1 := @parameter2: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r2 := @parameter3: java.util.concurrent.Executor;

        i3 := @parameter4: int;

        r24 := @parameter5: android.hardware.camera2.CaptureRequest;

        r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r3;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

     label02:
        if i3 != 1 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        if z1 == 0 goto label06;

        if r22 != null goto label05;

        goto label06;

     label05:
        r32 = new java.lang.IllegalArgumentException;

        specialinvoke r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Constrained high speed session doesn\'t support input configuration yet.");

        throw r32;

     label06:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionCore mCurrentSession>;

        if $r4 == null goto label07;

        $r18 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionCore mCurrentSession>;

        interfaceinvoke $r18.<android.hardware.camera2.impl.CameraCaptureSessionCore: void replaceSessionClose()>();

     label07:
        z2 = virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean configureStreamsChecked(android.hardware.camera2.params.InputConfiguration,java.util.List,int,android.hardware.camera2.CaptureRequest)>(r22, r23, i3, r24);

     label08:
        r26 = null;

        if z2 != 1 goto label10;

        r26 = null;

        if r22 == null goto label10;

     label09:
        $r17 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        r26 = virtualinvoke $r17.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.view.Surface getInputSurface()>();

     label10:
        r27 = null;

        goto label12;

     label11:
        $r19 := @caughtexception;

        r27 = $r19;

        z2 = 0;

        r26 = null;

     label12:
        if z1 == 0 goto label18;

     label13:
        r33 = new java.util.ArrayList;

        $i1 = interfaceinvoke r23.<java.util.List: int size()>();

        specialinvoke r33.<java.util.ArrayList: void <init>(int)>($i1);

        r29 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r14 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (android.hardware.camera2.params.OutputConfiguration) $r14;

        $r16 = virtualinvoke $r15.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        virtualinvoke r33.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label15:
        goto label14;

     label16:
        $r8 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics getCharacteristics()>();

        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r10 = virtualinvoke $r8.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r9);

        $r11 = (android.hardware.camera2.params.StreamConfigurationMap) $r10;

        staticinvoke <android.hardware.camera2.utils.SurfaceUtils: void checkConstrainedHighSpeedSurfaces(java.util.Collection,android.util.Range,android.hardware.camera2.params.StreamConfigurationMap)>(r33, null, $r11);

        r34 = new android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl;

        r30 = r34;

        i4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId>;

        $i2 = i4 + 1;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId> = $i2;

        $r13 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        specialinvoke r34.<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: void <init>(int,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,android.hardware.camera2.impl.CameraDeviceImpl,java.util.concurrent.Executor,boolean,android.hardware.camera2.CameraCharacteristics)>(i4, r1, r2, r0, $r13, z2, $r12);

     label17:
        goto label19;

     label18:
        i5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId>;

        $i0 = i5 + 1;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId> = $i0;

        r35 = new android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        specialinvoke r35.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void <init>(int,android.view.Surface,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,android.hardware.camera2.impl.CameraDeviceImpl,java.util.concurrent.Executor,boolean)>(i5, r26, r1, r2, r0, $r6, z2);

        r30 = r35;

     label19:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionCore mCurrentSession> = r30;

     label20:
        if r27 != null goto label23;

     label21:
        $r7 = interfaceinvoke r30.<android.hardware.camera2.impl.CameraCaptureSessionCore: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback> = $r7;

        exitmonitor r3;

     label22:
        return;

     label23:
        throw r27;

     label24:
        $r20 := @caughtexception;

        r31 = $r20;

     label25:
        exitmonitor r3;

     label26:
        throw r31;

     label27:
        $r21 := @caughtexception;

        r31 = $r21;

        goto label25;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch android.hardware.camera2.CameraAccessException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label27;
        catch android.hardware.camera2.CameraAccessException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label27;
        catch java.lang.Throwable from label13 to label14 with label27;
        catch java.lang.Throwable from label14 to label15 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
    }

    private android.hardware.camera2.CameraCharacteristics getCharacteristics()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraCharacteristics $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        return $r1;
    }

    private int[] getRequestTypes(android.hardware.camera2.CaptureRequest[])
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CaptureRequest[] r1;
        int[] r2;
        int $i0, $i1, $i2, i3;
        android.hardware.camera2.CaptureRequest $r3;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest[];

        $i0 = lengthof r1;

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $r3 = r1[i3];

        $i2 = virtualinvoke $r3.<android.hardware.camera2.CaptureRequest: int getRequestType()>();

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    private boolean isClosed()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.atomic.AtomicBoolean mClosing>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public static void lambda$oDs27OTfKFfK18rUW2nQxxkPdV0(android.hardware.camera2.impl.CameraDeviceImpl, int)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter1: int;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void notifyError(int)>(i0);

        return;
    }

    private void notifyError(int)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;
        boolean $z0;
        android.hardware.camera2.CameraDevice$StateCallback $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraDevice$StateCallback mDeviceCallback>;

        virtualinvoke $r1.<android.hardware.camera2.CameraDevice$StateCallback: void onError(android.hardware.camera2.CameraDevice,int)>(r0, i0);

     label1:
        return;
    }

    private void onCaptureErrorLocked(int, android.hardware.camera2.impl.CaptureResultExtras)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0, i1, $i4, $i5, i8, $i11;
        android.hardware.camera2.impl.CaptureCallbackHolder r1;
        android.hardware.camera2.CaptureRequest r2;
        long l3, l9, l12;
        android.util.SparseArray $r3, $r5;
        java.lang.Object $r4, $r6, $r8;
        boolean $z0, $z1, $z2, z3;
        java.util.List $r7;
        android.hardware.camera2.impl.CameraDeviceImpl$12 $r9;
        java.util.concurrent.Executor $r10, $r33;
        java.lang.Object[] $r11, $r15;
        java.lang.String $r12, $r14, $r16, $r18, r22;
        java.lang.Integer $r13, $r17;
        java.lang.Throwable $r19, $r20;
        android.hardware.camera2.impl.CaptureResultExtras r21;
        android.hardware.camera2.params.OutputConfiguration r23;
        java.util.Iterator r24;
        android.view.Surface r25;
        android.hardware.camera2.impl.CameraCaptureSessionCore r28;
        byte b10;
        android.hardware.camera2.impl.CameraDeviceImpl$13 $r29;
        android.hardware.camera2.CaptureFailure $r30;
        android.hardware.camera2.impl.FrameNumberTracker $r32;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i8 := @parameter0: int;

        r21 := @parameter1: android.hardware.camera2.impl.CaptureResultExtras;

        i0 = virtualinvoke r21.<android.hardware.camera2.impl.CaptureResultExtras: int getRequestId()>();

        i1 = virtualinvoke r21.<android.hardware.camera2.impl.CaptureResultExtras: int getSubsequenceId()>();

        l9 = virtualinvoke r21.<android.hardware.camera2.impl.CaptureResultExtras: long getFrameNumber()>();

        r22 = virtualinvoke r21.<android.hardware.camera2.impl.CaptureResultExtras: java.lang.String getErrorPhysicalCameraId()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r4;

        if r1 != null goto label01;

        $r16 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r15 = newarray (java.lang.Object)[1];

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15[0] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Receive capture error on unknown request ID %d", $r15);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r16, $r18);

        return;

     label01:
        r2 = virtualinvoke r1.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.CaptureRequest getRequest(int)>(i1);

        if i8 != 5 goto label09;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i4 = virtualinvoke r21.<android.hardware.camera2.impl.CaptureResultExtras: int getErrorStreamId()>();

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>($i4);

        r23 = (android.hardware.camera2.params.OutputConfiguration) $r6;

        if r23 != null goto label02;

        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r11 = newarray (java.lang.Object)[1];

        $i5 = virtualinvoke r21.<android.hardware.camera2.impl.CaptureResultExtras: int getErrorStreamId()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r11[0] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stream %d has been removed. Skipping buffer lost callback", $r11);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r12, $r14);

        return;

     label02:
        $r7 = virtualinvoke r23.<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>();

        r24 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r8 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (android.view.Surface) $r8;

        $z1 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: boolean containsTarget(android.view.Surface)>(r25);

        if $z1 != 0 goto label04;

        goto label03;

     label04:
        $r9 = new android.hardware.camera2.impl.CameraDeviceImpl$12;

        specialinvoke $r9.<android.hardware.camera2.impl.CameraDeviceImpl$12: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.CaptureRequest,android.view.Surface,long)>(r0, r1, r2, r25, l9);

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r10 = virtualinvoke r1.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.concurrent.Executor getExecutor()>();

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label03;

     label07:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r19;

     label08:
        goto label16;

     label09:
        if i8 != 4 goto label10;

        z3 = 1;

        goto label11;

     label10:
        z3 = 0;

     label11:
        r28 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionCore mCurrentSession>;

        if r28 == null goto label12;

        $z0 = interfaceinvoke r28.<android.hardware.camera2.impl.CameraCaptureSessionCore: boolean isAborting()>();

        if $z0 == 0 goto label12;

        b10 = 1;

        goto label13;

     label12:
        b10 = 0;

     label13:
        $r29 = new android.hardware.camera2.impl.CameraDeviceImpl$13;

        $r30 = new android.hardware.camera2.CaptureFailure;

        specialinvoke $r30.<android.hardware.camera2.CaptureFailure: void <init>(android.hardware.camera2.CaptureRequest,int,boolean,int,long,java.lang.String)>(r2, b10, z3, i0, l9, r22);

        specialinvoke $r29.<android.hardware.camera2.impl.CameraDeviceImpl$13: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>(r0, r1, r2, $r30);

        $r32 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        $i11 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: int getRequestType()>();

        virtualinvoke $r32.<android.hardware.camera2.impl.FrameNumberTracker: void updateTracker(long,boolean,int)>(l9, 1, $i11);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkAndFireSequenceComplete()>();

        l12 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        $r33 = virtualinvoke r1.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.concurrent.Executor getExecutor()>();

        interfaceinvoke $r33.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r29);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

     label16:
        return;

     label17:
        $r20 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        throw $r20;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label14 to label15 with label17;
    }

    private void overrideEnableZsl(android.hardware.camera2.impl.CameraMetadataNative, boolean)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraMetadataNative r1;
        boolean z0;
        android.hardware.camera2.CaptureRequest$Key $r2, $r5;
        java.lang.Object $r3;
        java.lang.Boolean $r4, $r6;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        z0 := @parameter1: boolean;

        $r2 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ENABLE_ZSL>;

        $r3 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        if $r4 != null goto label1;

        return;

     label1:
        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ENABLE_ZSL>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r5, $r6);

        return;
    }

    private void removeCompletedCallbackHolderLocked(long, long, long)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        long l0, l1, l2, l3, l4, l5;
        java.util.Iterator r1;
        android.hardware.camera2.impl.RequestLastFrameNumbersHolder r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r5;
        byte $b6, $b7, $b8;
        android.util.SparseArray $r6, $r7;
        java.lang.String $r8;
        int i10, i11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mRequestLastFrameNumbersList>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.camera2.impl.RequestLastFrameNumbersHolder) $r4;

        i10 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: int getRequestId()>();

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r5 != null goto label2;

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, "Camera closed while removing completed callback holders");

        return;

     label2:
        l3 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastRegularFrameNumber()>();

        l4 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastReprocessFrameNumber()>();

        l5 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastZslStillFrameNumber()>();

        $b6 = l3 cmp l0;

        if $b6 > 0 goto label5;

        $b7 = l4 cmp l1;

        if $b7 > 0 goto label5;

        $b8 = l5 cmp l2;

        if $b8 > 0 goto label5;

        $z1 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: boolean isSequenceCompleted()>();

        if $z1 == 0 goto label4;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        i11 = virtualinvoke $r6.<android.util.SparseArray: int indexOfKey(int)>(i10);

        if i11 < 0 goto label3;

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        virtualinvoke $r7.<android.util.SparseArray: void removeAt(int)>(i11);

     label3:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label5;

     label4:
        virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: void markInflightCompleted()>();

     label5:
        goto label1;

     label6:
        return;
    }

    private void scheduleNotifyError(int)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;
        long l1;
        java.util.concurrent.Executor $r2;
        android.hardware.camera2.impl.'-$$Lambda$CameraDeviceImpl$oDs27OTfKFfK18rUW2nQxxkPdV0' $r3;
        java.lang.Integer $r4;
        com.android.internal.util.function.pooled.PooledRunnable $r5, $r6;
        java.lang.Throwable $r7;
        java.util.function.BiConsumer r8;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = 1;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r3 = <android.hardware.camera2.impl._$$Lambda$CameraDeviceImpl$oDs27OTfKFfK18rUW2nQxxkPdV0: android.hardware.camera2.impl.'-$$Lambda$CameraDeviceImpl$oDs27OTfKFfK18rUW2nQxxkPdV0' INSTANCE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r8 = (java.util.function.BiConsumer) $r3;

        $r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r8, r0, $r4);

        $r6 = interfaceinvoke $r5.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int submitCaptureRequest(java.util.List, android.hardware.camera2.impl.CaptureCallback, java.util.concurrent.Executor, boolean) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean z0, $z1, $z3, $z4, $z5;
        android.hardware.camera2.CaptureRequest[] r1, $r3;
        android.hardware.camera2.impl.CaptureCallbackHolder r2;
        int $i0, $i1, $i2, $i3, $i5, $i6, i7, i8, i9, i10, i11, i12;
        java.lang.Object[] $r4;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r5;
        java.lang.Runnable $r6;
        java.util.concurrent.Executor $r7, r21, r22;
        int[] $r8, $r9;
        long $l4;
        android.hardware.camera2.CaptureRequest $r10, $r12, r25;
        android.util.SparseArray $r11, r30;
        java.lang.Object $r13, $r16, r23;
        java.util.Collection $r14, $r15;
        android.view.Surface $r17;
        java.lang.Throwable $r18;
        java.util.List r19, r31;
        android.hardware.camera2.impl.CaptureCallback r20;
        java.util.Iterator r24, r26;
        java.lang.IllegalArgumentException r27, r28;
        android.hardware.camera2.utils.SubmitInfo r29;
        android.hardware.camera2.impl.RequestLastFrameNumbersHolder r32;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r19 := @parameter0: java.util.List;

        r20 := @parameter1: android.hardware.camera2.impl.CaptureCallback;

        r21 := @parameter2: java.util.concurrent.Executor;

        z0 := @parameter3: boolean;

        r22 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkExecutor(java.util.concurrent.Executor,java.lang.Object)>(r21, r20);

        r23 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r23;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        r24 = interfaceinvoke r19.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r13 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (android.hardware.camera2.CaptureRequest) $r13;

        $r14 = virtualinvoke r25.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        $z4 = interfaceinvoke $r14.<java.util.Collection: boolean isEmpty()>();

        if $z4 != 0 goto label07;

        $r15 = virtualinvoke r25.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        r26 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r16 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (android.view.Surface) $r16;

        if $r17 == null goto label05;

     label04:
        goto label03;

     label05:
        r27 = new java.lang.IllegalArgumentException;

        specialinvoke r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null Surface targets are not allowed");

        throw r27;

     label06:
        goto label02;

     label07:
        r28 = new java.lang.IllegalArgumentException;

        specialinvoke r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Each request must have at least one Surface target");

        throw r28;

     label08:
        if z0 == 0 goto label10;

     label09:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

     label10:
        $i0 = interfaceinvoke r19.<java.util.List: int size()>();

        $r3 = newarray (android.hardware.camera2.CaptureRequest)[$i0];

        $r4 = interfaceinvoke r19.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        r1 = (android.hardware.camera2.CaptureRequest[]) $r4;

        i7 = lengthof r1;

     label11:
        i8 = 0;

     label12:
        if i8 >= i7 goto label15;

     label13:
        $r12 = r1[i8];

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        virtualinvoke $r12.<android.hardware.camera2.CaptureRequest: void convertSurfaceToStreamId(android.util.SparseArray)>($r11);

     label14:
        i8 = i8 + 1;

        goto label12;

     label15:
        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        r29 = virtualinvoke $r5.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[],boolean)>(r1, z0);

        i9 = lengthof r1;

     label16:
        i10 = 0;

     label17:
        if i10 >= i9 goto label20;

     label18:
        $r10 = r1[i10];

        virtualinvoke $r10.<android.hardware.camera2.CaptureRequest: void recoverStreamIdToSurface()>();

     label19:
        i10 = i10 + 1;

        goto label17;

     label20:
        if r20 == null goto label22;

     label21:
        r30 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        i11 = virtualinvoke r29.<android.hardware.camera2.utils.SubmitInfo: int getRequestId()>();

        r2 = new android.hardware.camera2.impl.CaptureCallbackHolder;

        $i5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId>;

        $i6 = $i5 - 1;

        specialinvoke r2.<android.hardware.camera2.impl.CaptureCallbackHolder: void <init>(android.hardware.camera2.impl.CaptureCallback,java.util.List,java.util.concurrent.Executor,boolean,int)>(r20, r19, r22, z0, $i6);

        virtualinvoke r30.<android.util.SparseArray: void put(int,java.lang.Object)>(i11, r2);

     label22:
        if z0 == 0 goto label26;

     label23:
        $i1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i1 == -1 goto label24;

        $i3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        $l4 = virtualinvoke r29.<android.hardware.camera2.utils.SubmitInfo: long getLastFrameNumber()>();

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes>;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkEarlyTriggerSequenceCompleteLocked(int,long,int[])>($i3, $l4, $r9);

     label24:
        $i2 = virtualinvoke r29.<android.hardware.camera2.utils.SubmitInfo: int getRequestId()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = $i2;

        $r8 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] getRequestTypes(android.hardware.camera2.CaptureRequest[])>(r1);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes> = $r8;

     label25:
        goto label27;

     label26:
        r31 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mRequestLastFrameNumbersList>;

        r32 = new android.hardware.camera2.impl.RequestLastFrameNumbersHolder;

        specialinvoke r32.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: void <init>(java.util.List,android.hardware.camera2.utils.SubmitInfo)>(r19, r29);

        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>(r32);

     label27:
        $z3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle>;

        if $z3 == 0 goto label28;

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnActive>;

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

     label28:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle> = 0;

        i12 = virtualinvoke r29.<android.hardware.camera2.utils.SubmitInfo: int getRequestId()>();

        exitmonitor r23;

     label29:
        return i12;

     label30:
        $r18 := @caughtexception;

     label31:
        exitmonitor r23;

     label32:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.lang.Throwable from label10 to label11 with label30;
        catch java.lang.Throwable from label13 to label14 with label30;
        catch java.lang.Throwable from label15 to label16 with label30;
        catch java.lang.Throwable from label18 to label19 with label30;
        catch java.lang.Throwable from label21 to label22 with label30;
        catch java.lang.Throwable from label23 to label24 with label30;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch java.lang.Throwable from label26 to label27 with label30;
        catch java.lang.Throwable from label27 to label28 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    private void waitUntilIdle() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        int $i0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException r4;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i0 != -1 goto label3;

        $r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r2.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void waitUntilIdle()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Active repeating request ongoing");

        throw r4;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void binderDied()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.String r1, $r4, $r7;
        long l0;
        java.lang.StringBuilder $r2;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r8;
        android.hardware.camera2.impl.CameraDeviceImpl$14 $r9;
        java.util.concurrent.Executor $r10;
        java.lang.Throwable $r11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraDevice ");

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String mCameraId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" died unexpectedly");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r1, $r7);

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r8 != null goto label1;

        return;

     label1:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = 1;

        $r9 = new android.hardware.camera2.impl.CameraDeviceImpl$14;

        specialinvoke $r9.<android.hardware.camera2.impl.CameraDeviceImpl$14: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.impl.CaptureCallback, java.util.concurrent.Executor) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.impl.CaptureCallback r2;
        java.util.concurrent.Executor r3;
        java.util.ArrayList $r5;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.impl.CaptureCallback;

        r3 := @parameter2: java.util.concurrent.Executor;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor,boolean)>($r5, r2, r3, 0);

        return $i0;
    }

    public int captureBurst(java.util.List, android.hardware.camera2.impl.CaptureCallback, java.util.concurrent.Executor) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;
        android.hardware.camera2.impl.CaptureCallback r2;
        java.util.concurrent.Executor r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.impl.CaptureCallback;

        r3 := @parameter2: java.util.concurrent.Executor;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor,boolean)>(r1, r2, r3, 0);

        return $i0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one request must be given");

        throw $r4;
    }

    public void close()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0, $z1;
        java.util.concurrent.ExecutorService $r4, $r11;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r5, $r6, $r9, $r10;
        java.lang.Runnable $r7;
        java.util.concurrent.Executor $r8;
        java.lang.Throwable $r13;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.atomic.AtomicBoolean mClosing>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.ExecutorService mOfflineSwitchService>;

        if $r4 == null goto label04;

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.ExecutorService mOfflineSwitchService>;

        interfaceinvoke $r11.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.ExecutorService mOfflineSwitchService> = null;

     label04:
        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r5 == null goto label05;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r9.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void disconnect()>();

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r10.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label05:
        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r6 != null goto label06;

        $z1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError>;

        if $z1 == 0 goto label07;

     label06:
        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnClosed>;

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

     label07:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice> = null;

        exitmonitor r1;

     label08:
        return;

     label09:
        $r13 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void configureOutputs(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.ArrayList $r2;
        int $i0;
        boolean $z0;
        android.hardware.camera2.params.OutputConfiguration $r3;
        java.lang.Object $r4;
        android.view.Surface $r5;
        java.util.List r6;
        java.util.Iterator r7;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r6 := @parameter0: java.util.List;

        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = new android.hardware.camera2.params.OutputConfiguration;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.view.Surface) $r4;

        specialinvoke $r3.<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>($r5);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean configureStreamsChecked(android.hardware.camera2.params.InputConfiguration,java.util.List,int,android.hardware.camera2.CaptureRequest)>(null, $r2, 0, null);

        return;
    }

    public boolean configureStreamsChecked(android.hardware.camera2.params.InputConfiguration, java.util.List, int, android.hardware.camera2.CaptureRequest) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r6, $r17, $r20, $r27, $r32, r53;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, i13, i14, $i15, i16, i17, i18, i19, i20, i21;
        java.lang.Runnable $r2, $r9, $r11, $r37, $r47;
        java.util.concurrent.Executor $r3, $r10, $r12, $r38, $r48;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r4, $r7, $r15, $r18, $r21, $r23, $r26;
        java.util.AbstractMap$SimpleEntry $r5, $r25, r78, r79;
        boolean $z0, $z2, $z3, $z4, $z6, $z8;
        java.util.HashSet $r8, $r13, r76;
        java.lang.Integer $r14, $r24, $r28, $r29, $r33, r63;
        android.hardware.camera2.impl.CameraMetadataNative $r16;
        android.util.SparseArray $r19, $r22, $r30, $r31, $r57;
        java.lang.Throwable $r36, $r42, $r51;
        android.hardware.camera2.CameraAccessException $r41;
        java.lang.String $r44, $r46, r71;
        android.hardware.camera2.params.InputConfiguration r52, r59;
        android.hardware.camera2.CaptureRequest r54;
        android.hardware.camera2.params.OutputConfiguration r58, r65;
        java.util.Iterator r62, r64;
        int[] r66;
        java.util.ArrayList r74, r77;
        java.lang.IllegalArgumentException r75, r87;
        java.lang.IllegalStateException r80;
        java.lang.StringBuilder r81;
        java.util.List r82, r84, r85, r86;
        java.util.Collection r83;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r52 := @parameter0: android.hardware.camera2.params.InputConfiguration;

        r53 := @parameter1: java.util.List;

        i13 := @parameter2: int;

        r54 := @parameter3: android.hardware.camera2.CaptureRequest;

        if r53 != null goto label01;

        r74 = new java.util.ArrayList;

        specialinvoke r74.<java.util.ArrayList: void <init>()>();

        r53 = r74;

        goto label01;

     label01:
        r82 = (java.util.List) r53;

        $i0 = interfaceinvoke r82.<java.util.List: int size()>();

        if $i0 != 0 goto label03;

        if r52 != null goto label02;

        goto label03;

     label02:
        r75 = new java.lang.IllegalArgumentException;

        specialinvoke r75.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot configure an input stream without any output streams");

        throw r75;

     label03:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkInputConfiguration(android.hardware.camera2.params.InputConfiguration)>(r52);

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label04:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        r76 = new java.util.HashSet;

        r83 = (java.util.Collection) r53;

        specialinvoke r76.<java.util.HashSet: void <init>(java.util.Collection)>(r83);

        r77 = new java.util.ArrayList;

        specialinvoke r77.<java.util.ArrayList: void <init>()>();

     label05:
        i14 = 0;

     label06:
        $r57 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i15 = virtualinvoke $r57.<android.util.SparseArray: int size()>();

        if i14 >= $i15 goto label12;

        $r30 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i16 = virtualinvoke $r30.<android.util.SparseArray: int keyAt(int)>(i14);

        $r31 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r32 = virtualinvoke $r31.<android.util.SparseArray: java.lang.Object valueAt(int)>(i14);

        r58 = (android.hardware.camera2.params.OutputConfiguration) $r32;

        r84 = (java.util.List) r53;

        $z4 = interfaceinvoke r84.<java.util.List: boolean contains(java.lang.Object)>(r58);

        if $z4 == 0 goto label10;

        $z6 = virtualinvoke r58.<android.hardware.camera2.params.OutputConfiguration: boolean isDeferredConfiguration()>();

        if $z6 == 0 goto label08;

     label07:
        goto label10;

     label08:
        virtualinvoke r76.<java.util.HashSet: boolean remove(java.lang.Object)>(r58);

     label09:
        goto label11;

     label10:
        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16);

        interfaceinvoke r77.<java.util.List: boolean add(java.lang.Object)>($r33);

     label11:
        i14 = i14 + 1;

        goto label06;

     label12:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnBusy>;

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

     label13:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void waitUntilIdle()>();

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r4.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void beginConfigure()>();

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.AbstractMap$SimpleEntry mConfiguredInput>;

        $r6 = virtualinvoke $r5.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>();

        r59 = (android.hardware.camera2.params.InputConfiguration) $r6;

     label14:
        if r52 == r59 goto label20;

        if r52 == null goto label16;

     label15:
        $z3 = virtualinvoke r52.<android.hardware.camera2.params.InputConfiguration: boolean equals(java.lang.Object)>(r59);

        if $z3 != 0 goto label20;

     label16:
        if r59 == null goto label18;

     label17:
        $r26 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        $r25 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.AbstractMap$SimpleEntry mConfiguredInput>;

        $r27 = virtualinvoke $r25.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>();

        $r28 = (java.lang.Integer) $r27;

        $i8 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();

        virtualinvoke $r26.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void deleteStream(int)>($i8);

        r78 = new java.util.AbstractMap$SimpleEntry;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        specialinvoke r78.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r29, null);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.AbstractMap$SimpleEntry mConfiguredInput> = r78;

     label18:
        if r52 == null goto label20;

     label19:
        $r23 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        $i5 = virtualinvoke r52.<android.hardware.camera2.params.InputConfiguration: int getWidth()>();

        $i6 = virtualinvoke r52.<android.hardware.camera2.params.InputConfiguration: int getHeight()>();

        $i7 = virtualinvoke r52.<android.hardware.camera2.params.InputConfiguration: int getFormat()>();

        i17 = virtualinvoke $r23.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: int createInputStream(int,int,int)>($i5, $i6, $i7);

        r79 = new java.util.AbstractMap$SimpleEntry;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        specialinvoke r79.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r24, r52);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.AbstractMap$SimpleEntry mConfiguredInput> = r79;

     label20:
        r62 = interfaceinvoke r77.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z8 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label23;

        $r20 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.lang.Integer) $r20;

        $r21 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        $i3 = virtualinvoke r63.<java.lang.Integer: int intValue()>();

        virtualinvoke $r21.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void deleteStream(int)>($i3);

        $r22 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i4 = virtualinvoke r63.<java.lang.Integer: int intValue()>();

        virtualinvoke $r22.<android.util.SparseArray: void delete(int)>($i4);

     label22:
        goto label21;

     label23:
        r85 = (java.util.List) r53;

        r64 = interfaceinvoke r85.<java.util.List: java.util.Iterator iterator()>();

     label24:
        $z0 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label26;

        $r17 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (android.hardware.camera2.params.OutputConfiguration) $r17;

        $z2 = virtualinvoke r76.<java.util.HashSet: boolean contains(java.lang.Object)>(r65);

        if $z2 == 0 goto label25;

        $r18 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        i18 = virtualinvoke $r18.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: int createStream(android.hardware.camera2.params.OutputConfiguration)>(r65);

        $r19 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        virtualinvoke $r19.<android.util.SparseArray: void put(int,java.lang.Object)>(i18, r65);

     label25:
        goto label24;

     label26:
        if r54 == null goto label29;

     label27:
        $r15 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        $r16 = virtualinvoke r54.<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()>();

        r66 = virtualinvoke $r15.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: int[] endConfigure(int,android.hardware.camera2.impl.CameraMetadataNative)>(i13, $r16);

     label28:
        goto label30;

     label29:
        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        r66 = virtualinvoke $r7.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: int[] endConfigure(int,android.hardware.camera2.impl.CameraMetadataNative)>(i13, null);

     label30:
        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.HashSet mOfflineSupport>;

        virtualinvoke $r8.<java.util.HashSet: void clear()>();

     label31:
        if r66 == null goto label37;

     label32:
        $i2 = lengthof r66;

        if $i2 <= 0 goto label37;

        i19 = lengthof r66;

     label33:
        i20 = 0;

     label34:
        if i20 >= i19 goto label37;

        i21 = r66[i20];

     label35:
        $r13 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.HashSet mOfflineSupport>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i21);

        virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>($r14);

     label36:
        i20 = i20 + 1;

        goto label34;

     label37:
        r86 = (java.util.List) r53;

        $i1 = interfaceinvoke r86.<java.util.List: int size()>();

        if $i1 <= 0 goto label39;

        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        interfaceinvoke $r12.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

     label38:
        goto label40;

     label39:
        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

     label40:
        exitmonitor r1;

     label41:
        return 1;

     label42:
        $r36 := @caughtexception;

        goto label52;

     label43:
        $r41 := @caughtexception;

     label44:
        $i10 = virtualinvoke $r41.<android.hardware.camera2.CameraAccessException: int getReason()>();

        if $i10 != 4 goto label45;

        r80 = new java.lang.IllegalStateException;

        specialinvoke r80.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("The camera is currently busy. You must wait until the previous operation completes.", $r41);

        throw r80;

     label45:
        throw $r41;

     label46:
        $r42 := @caughtexception;

     label47:
        r71 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        r81 = new java.lang.StringBuilder;

        specialinvoke r81.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stream configuration failed due to: ");

        r87 = (java.lang.IllegalArgumentException) $r42;

        $r44 = virtualinvoke r87.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke r81.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r71, $r46);

     label48:
        goto label49;

     label49:
        $r48 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r47 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        interfaceinvoke $r48.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r47);

     label50:
        exitmonitor r1;

     label51:
        return 0;

     label52:
        goto label53;

     label53:
        $r38 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r37 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        interfaceinvoke $r38.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r37);

     label54:
        throw $r36;

     label55:
        $r51 := @caughtexception;

     label56:
        exitmonitor r1;

     label57:
        throw $r51;

        catch java.lang.Throwable from label04 to label05 with label55;
        catch java.lang.Throwable from label06 to label07 with label55;
        catch java.lang.Throwable from label08 to label09 with label55;
        catch java.lang.Throwable from label10 to label11 with label55;
        catch java.lang.Throwable from label12 to label13 with label55;
        catch java.lang.IllegalArgumentException from label13 to label14 with label46;
        catch android.hardware.camera2.CameraAccessException from label13 to label14 with label43;
        catch java.lang.Throwable from label13 to label14 with label42;
        catch java.lang.IllegalArgumentException from label15 to label16 with label46;
        catch android.hardware.camera2.CameraAccessException from label15 to label16 with label43;
        catch java.lang.Throwable from label15 to label16 with label42;
        catch java.lang.IllegalArgumentException from label17 to label18 with label46;
        catch android.hardware.camera2.CameraAccessException from label17 to label18 with label43;
        catch java.lang.Throwable from label17 to label18 with label42;
        catch java.lang.IllegalArgumentException from label19 to label20 with label46;
        catch android.hardware.camera2.CameraAccessException from label19 to label20 with label43;
        catch java.lang.Throwable from label19 to label20 with label42;
        catch java.lang.IllegalArgumentException from label20 to label21 with label46;
        catch android.hardware.camera2.CameraAccessException from label20 to label21 with label43;
        catch java.lang.Throwable from label20 to label21 with label42;
        catch java.lang.IllegalArgumentException from label21 to label22 with label46;
        catch android.hardware.camera2.CameraAccessException from label21 to label22 with label43;
        catch java.lang.Throwable from label21 to label22 with label42;
        catch java.lang.IllegalArgumentException from label23 to label24 with label46;
        catch android.hardware.camera2.CameraAccessException from label23 to label24 with label43;
        catch java.lang.Throwable from label23 to label24 with label42;
        catch java.lang.IllegalArgumentException from label24 to label25 with label46;
        catch android.hardware.camera2.CameraAccessException from label24 to label25 with label43;
        catch java.lang.Throwable from label24 to label25 with label42;
        catch java.lang.IllegalArgumentException from label27 to label28 with label46;
        catch android.hardware.camera2.CameraAccessException from label27 to label28 with label43;
        catch java.lang.Throwable from label27 to label28 with label42;
        catch java.lang.IllegalArgumentException from label29 to label30 with label46;
        catch android.hardware.camera2.CameraAccessException from label29 to label30 with label43;
        catch java.lang.Throwable from label29 to label30 with label42;
        catch java.lang.IllegalArgumentException from label30 to label31 with label46;
        catch android.hardware.camera2.CameraAccessException from label30 to label31 with label43;
        catch java.lang.Throwable from label30 to label31 with label42;
        catch java.lang.IllegalArgumentException from label32 to label33 with label46;
        catch android.hardware.camera2.CameraAccessException from label32 to label33 with label43;
        catch java.lang.Throwable from label32 to label33 with label42;
        catch java.lang.IllegalArgumentException from label35 to label36 with label46;
        catch android.hardware.camera2.CameraAccessException from label35 to label36 with label43;
        catch java.lang.Throwable from label35 to label36 with label42;
        catch java.lang.Throwable from label37 to label38 with label55;
        catch java.lang.Throwable from label39 to label40 with label55;
        catch java.lang.Throwable from label40 to label41 with label55;
        catch java.lang.Throwable from label44 to label45 with label42;
        catch java.lang.Throwable from label45 to label46 with label42;
        catch java.lang.Throwable from label47 to label48 with label42;
        catch java.lang.Throwable from label49 to label49 with label55;
        catch java.lang.Throwable from label49 to label50 with label55;
        catch java.lang.Throwable from label50 to label51 with label55;
        catch java.lang.Throwable from label53 to label53 with label55;
        catch java.lang.Throwable from label53 to label54 with label55;
        catch java.lang.Throwable from label54 to label55 with label55;
        catch java.lang.Throwable from label56 to label57 with label55;
    }

    public android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0, $i1;
        java.lang.Object r1;
        android.hardware.camera2.CaptureRequest$Builder r2;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r3;
        java.lang.Throwable $r4;
        android.hardware.camera2.impl.CameraMetadataNative r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        r5 = virtualinvoke $r3.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.impl.CameraMetadataNative createDefaultRequest(int)>(i0);

        $i1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mAppTargetSdkVersion>;

        if $i1 < 26 goto label3;

     label2:
        if i0 == 2 goto label4;

     label3:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void overrideEnableZsl(android.hardware.camera2.impl.CameraMetadataNative,boolean)>(r5, 0);

     label4:
        r2 = new android.hardware.camera2.CaptureRequest$Builder;

        $r6 = virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String getId()>();

        specialinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative,boolean,int,java.lang.String,java.util.Set)>(r5, 0, -1, $r6, null);

        exitmonitor r1;

     label5:
        return r2;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int, java.util.Set) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        android.hardware.camera2.CaptureRequest$Builder r2;
        boolean $z0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r3;
        java.lang.String $r5, $r6, $r12;
        java.lang.Throwable $r7;
        java.util.Set r8;
        java.util.Iterator r9;
        java.lang.IllegalStateException r10;
        android.hardware.camera2.impl.CameraMetadataNative r11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        r8 := @parameter1: java.util.Set;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        r9 = interfaceinvoke r8.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String getId()>();

        if $r5 == $r6 goto label04;

     label03:
        goto label02;

     label04:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Physical id matches the logical id!");

        throw r10;

     label05:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        r11 = virtualinvoke $r3.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.impl.CameraMetadataNative createDefaultRequest(int)>(i0);

        $i1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mAppTargetSdkVersion>;

        if $i1 < 26 goto label07;

     label06:
        if i0 == 2 goto label08;

     label07:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void overrideEnableZsl(android.hardware.camera2.impl.CameraMetadataNative,boolean)>(r11, 0);

     label08:
        r2 = new android.hardware.camera2.CaptureRequest$Builder;

        $r12 = virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String getId()>();

        specialinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative,boolean,int,java.lang.String,java.util.Set)>(r11, 0, -1, $r12, r8);

        exitmonitor r1;

     label09:
        return r2;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void createCaptureSession(android.hardware.camera2.params.SessionConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.params.SessionConfiguration r1;
        java.util.List r2;
        java.lang.IllegalArgumentException $r3, $r4, $r6;
        java.util.concurrent.Executor $r5, $r9;
        android.hardware.camera2.params.InputConfiguration $r7;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r8;
        int $i0;
        android.hardware.camera2.CaptureRequest $r10;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.params.SessionConfiguration;

        if r1 == null goto label3;

        r2 = virtualinvoke r1.<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()>();

        if r2 == null goto label2;

        $r5 = virtualinvoke r1.<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()>();

        if $r5 == null goto label1;

        $r7 = virtualinvoke r1.<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>();

        $r8 = virtualinvoke r1.<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CameraCaptureSession$StateCallback getStateCallback()>();

        $r9 = virtualinvoke r1.<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()>();

        $i0 = virtualinvoke r1.<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>();

        $r10 = virtualinvoke r1.<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()>();

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>($r7, r2, $r8, $r9, $i0, $r10);

        return;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid executor");

        throw $r6;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid output configurations");

        throw $r4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid session configuration");

        throw $r3;
    }

    public void createCaptureSession(java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraCaptureSession$StateCallback r1;
        android.os.Handler r2;
        java.util.ArrayList $r4;
        int $i0;
        boolean $z0;
        java.util.concurrent.Executor $r5;
        android.hardware.camera2.params.OutputConfiguration $r6;
        java.lang.Object $r7;
        android.view.Surface $r8;
        java.util.List r9;
        java.util.Iterator r10;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r9 := @parameter0: java.util.List;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r2 := @parameter2: android.os.Handler;

        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r9.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = new android.hardware.camera2.params.OutputConfiguration;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.view.Surface) $r7;

        specialinvoke $r6.<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>($r8);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r5 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r2);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>(null, $r4, r1, $r5, 0, null);

        return;
    }

    public void createCaptureSessionByOutputConfigurations(java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2;
        android.os.Handler r3;
        java.util.ArrayList $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r5 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r3);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>(null, $r4, r2, $r5, 0, null);

        return;
    }

    public void createConstrainedHighSpeedCaptureSession(java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraCaptureSession$StateCallback r1;
        android.os.Handler r2;
        int $i0, $i1, $i2;
        java.util.ArrayList $r4;
        boolean $z0;
        java.util.concurrent.Executor $r5;
        android.hardware.camera2.params.OutputConfiguration $r6;
        java.lang.Object $r7;
        android.view.Surface $r8;
        java.util.List r9;
        java.util.Iterator r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r9 := @parameter0: java.util.List;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r2 := @parameter2: android.os.Handler;

        if r9 == null goto label3;

        $i0 = interfaceinvoke r9.<java.util.List: int size()>();

        if $i0 == 0 goto label3;

        $i1 = interfaceinvoke r9.<java.util.List: int size()>();

        if $i1 > 2 goto label3;

        $r4 = new java.util.ArrayList;

        $i2 = interfaceinvoke r9.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = new android.hardware.camera2.params.OutputConfiguration;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.view.Surface) $r7;

        specialinvoke $r6.<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>($r8);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r5 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r2);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>(null, $r4, r1, $r5, 1, null);

        return;

     label3:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output surface list must not be null and the size must be no more than 2");

        throw $r11;
    }

    public void createCustomCaptureSession(android.hardware.camera2.params.InputConfiguration, java.util.List, int, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.params.InputConfiguration r1;
        int i0;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2;
        android.os.Handler r3;
        java.util.ArrayList $r5;
        boolean $z0;
        java.util.concurrent.Executor $r6;
        android.hardware.camera2.params.OutputConfiguration $r7, $r9;
        java.lang.Object $r8;
        java.util.List r10;
        java.util.Iterator r11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.params.InputConfiguration;

        r10 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r2 := @parameter3: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r3 := @parameter4: android.os.Handler;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r11 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = new android.hardware.camera2.params.OutputConfiguration;

        $r8 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.hardware.camera2.params.OutputConfiguration) $r8;

        specialinvoke $r7.<android.hardware.camera2.params.OutputConfiguration: void <init>(android.hardware.camera2.params.OutputConfiguration)>($r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r6 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r3);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>(r1, $r5, r2, $r6, i0, null);

        return;
    }

    public android.hardware.camera2.CaptureRequest$Builder createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.CameraMetadataNative r2, $r4;
        android.hardware.camera2.CaptureRequest$Builder r3;
        int $i0;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        android.hardware.camera2.TotalCaptureResult r7;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r7 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        r2 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r4 = virtualinvoke r7.<android.hardware.camera2.TotalCaptureResult: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()>();

        specialinvoke r2.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r4);

        r3 = new android.hardware.camera2.CaptureRequest$Builder;

        $i0 = virtualinvoke r7.<android.hardware.camera2.TotalCaptureResult: int getSessionId()>();

        $r5 = virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String getId()>();

        specialinvoke r3.<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative,boolean,int,java.lang.String,java.util.Set)>(r2, 1, $i0, $r5, null);

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration, java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.params.InputConfiguration r1;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2;
        android.os.Handler r3;
        java.lang.IllegalArgumentException $r5;
        java.util.ArrayList $r6;
        int $i0;
        boolean $z0;
        java.util.concurrent.Executor $r7;
        android.hardware.camera2.params.OutputConfiguration $r8;
        java.lang.Object $r9;
        android.view.Surface $r10;
        java.util.List r11;
        java.util.Iterator r12;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.params.InputConfiguration;

        r11 := @parameter1: java.util.List;

        r2 := @parameter2: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r3 := @parameter3: android.os.Handler;

        if r1 == null goto label3;

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        r12 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = new android.hardware.camera2.params.OutputConfiguration;

        $r9 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.view.Surface) $r9;

        specialinvoke $r8.<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>($r10);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $r7 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r3);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>(r1, $r6, r2, $r7, 0, null);

        return;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputConfig cannot be null when creating a reprocessable capture session");

        throw $r5;
    }

    public void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration, java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.params.InputConfiguration r1;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2;
        android.os.Handler r3;
        java.lang.IllegalArgumentException $r5, $r6;
        java.util.ArrayList $r7;
        boolean $z0;
        java.util.concurrent.Executor $r8;
        android.hardware.camera2.params.OutputConfiguration $r9, $r11;
        java.lang.Object $r10;
        java.util.List r12;
        java.util.Iterator r13;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.params.InputConfiguration;

        r12 := @parameter1: java.util.List;

        r2 := @parameter2: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r3 := @parameter3: android.os.Handler;

        if r1 == null goto label4;

        if r12 == null goto label3;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = new android.hardware.camera2.params.OutputConfiguration;

        $r10 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (android.hardware.camera2.params.OutputConfiguration) $r10;

        specialinvoke $r9.<android.hardware.camera2.params.OutputConfiguration: void <init>(android.hardware.camera2.params.OutputConfiguration)>($r11);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r8 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor checkAndWrapHandler(android.os.Handler)>(r3);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>(r1, $r7, r2, $r8, 0, null);

        return;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output configurations cannot be null when creating a reprocessable capture session");

        throw $r6;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputConfig cannot be null when creating a reprocessable capture session");

        throw $r5;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Throwable $r2;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

     label1:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void finalizeOutputConfigs(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r3, $r13;
        java.lang.IllegalArgumentException $r2, r19, r21;
        int $i1, $i2, $i3, i4, i5;
        boolean $z0, $z1;
        android.util.SparseArray $r4, $r11, $r12, $r14;
        java.util.List $r5, r16;
        java.lang.String $r9;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r10;
        java.lang.Throwable $r15;
        java.util.Iterator r17;
        android.hardware.camera2.params.OutputConfiguration r18;
        java.lang.StringBuilder r20;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r16 := @parameter0: java.util.List;

        if r16 == null goto label18;

        $i1 = interfaceinvoke r16.<java.util.List: int size()>();

        if $i1 == 0 goto label18;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        r17 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r3 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (android.hardware.camera2.params.OutputConfiguration) $r3;

     label03:
        i4 = 0;

     label04:
        i5 = -1;

     label05:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i2 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i4 >= $i2 goto label08;

        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        $z1 = virtualinvoke r18.<android.hardware.camera2.params.OutputConfiguration: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label07;

        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i5 = virtualinvoke $r14.<android.util.SparseArray: int keyAt(int)>(i4);

     label06:
        goto label08;

     label07:
        i4 = i4 + 1;

        goto label04;

     label08:
        if i5 == -1 goto label12;

     label09:
        $r5 = virtualinvoke r18.<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>();

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i3 == 0 goto label11;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r10.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void finalizeOutputConfigurations(int,android.hardware.camera2.params.OutputConfiguration)>(i5, r18);

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i5, r18);

     label10:
        goto label02;

     label11:
        r19 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The final config for stream ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have at least 1 surface");

        $r9 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r19;

     label12:
        r21 = new java.lang.IllegalArgumentException;

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Deferred config is not part of this session");

        throw r21;

     label13:
        exitmonitor r1;

     label14:
        return;

     label15:
        $r15 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r15;

     label18:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deferred config is null or empty");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void flush() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        long l0;
        java.lang.Runnable $r3, $r7;
        java.util.concurrent.Executor $r4, $r8;
        boolean $z0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r5;
        int $i1, $i2;
        int[] $r6;
        java.lang.Throwable $r9;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnBusy>;

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle>;

        if $z0 == 0 goto label3;

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        l0 = virtualinvoke $r5.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: long flush()>();

        $i1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i1 == -1 goto label4;

        $i2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes>;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkEarlyTriggerSequenceCompleteLocked(int,long,int[])>($i2, l0, $r6);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = -1;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes> = null;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks getCallbacks()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks mCallbacks>;

        return $r1;
    }

    public int getCameraAudioRestriction() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        int i0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        i0 = virtualinvoke $r3.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: int getGlobalAudioRestriction()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getId()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String mCameraId>;

        return $r1;
    }

    public boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration) throws android.hardware.camera2.CameraAccessException, java.lang.UnsupportedOperationException, java.lang.IllegalArgumentException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        boolean z0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r2;
        java.lang.Throwable $r3;
        android.hardware.camera2.params.SessionConfiguration r4;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r4 := @parameter0: android.hardware.camera2.params.SessionConfiguration;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        z0 = virtualinvoke $r2.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)>(r4);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onDeviceError(int, android.hardware.camera2.impl.CaptureResultExtras)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;
        java.lang.Object r1;
        java.lang.String r2, $r9;
        long l1;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r3;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r4, $r10;
        java.lang.Runnable $r5;
        java.util.concurrent.Executor $r6;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks $r11;
        java.lang.Throwable $r12, $r13;
        android.hardware.camera2.impl.CaptureResultExtras r14;
        java.lang.StringBuilder r15;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        r14 := @parameter1: android.hardware.camera2.impl.CaptureResultExtras;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r3 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl>;

        if $r4 == null goto label05;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl>;

        $r11 = virtualinvoke $r10.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks getCallbacks()>();

        virtualinvoke $r11.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: void onDeviceError(int,android.hardware.camera2.impl.CaptureResultExtras)>(i0, r14);

        exitmonitor r1;

     label04:
        return;

     label05:
        if i0 == 0 goto label14;

        if i0 == 1 goto label12;

        if i0 == 3 goto label10;

        if i0 == 4 goto label10;

        if i0 == 5 goto label10;

        if i0 == 6 goto label08;

     label06:
        r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown error from camera device: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r2, $r9);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void scheduleNotifyError(int)>(5);

     label07:
        goto label17;

     label08:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void scheduleNotifyError(int)>(3);

     label09:
        goto label17;

     label10:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void onCaptureErrorLocked(int,android.hardware.camera2.impl.CaptureResultExtras)>(i0, r14);

     label11:
        goto label17;

     label12:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void scheduleNotifyError(int)>(4);

     label13:
        goto label17;

     label14:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label15:
        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnDisconnected>;

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label17:
        exitmonitor r1;

     label18:
        return;

     label19:
        $r13 := @caughtexception;

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label21:
        throw $r13;

     label22:
        $r12 := @caughtexception;

     label23:
        exitmonitor r1;

     label24:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public void onDeviceIdle()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        long l0;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r2;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r3, $r6;
        boolean $z0;
        java.lang.Runnable $r4;
        java.util.concurrent.Executor $r5;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks $r7;
        java.lang.Throwable $r8, $r9;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        if $r2 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl>;

        if $r3 == null goto label05;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl>;

        $r7 = virtualinvoke $r6.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks getCallbacks()>();

        virtualinvoke $r7.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: void onDeviceIdle()>();

        exitmonitor r1;

     label04:
        return;

     label05:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void removeCompletedCallbackHolderLocked(long,long,long)>(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle>;

        if $z0 != 0 goto label12;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        goto label12;

     label09:
        $r8 := @caughtexception;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label11:
        throw $r8;

     label12:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle> = 1;

        exitmonitor r1;

     label13:
        return;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void prepare(int, android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0, $i2, i3, i4;
        java.lang.Object r1, $r11;
        java.lang.IllegalArgumentException $r2, $r6, r17;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        android.util.SparseArray $r8, $r10, $r14;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r9;
        android.hardware.camera2.params.OutputConfiguration $r12;
        android.view.Surface $r13, r16;
        java.lang.Throwable $r15;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        r16 := @parameter1: android.view.Surface;

        if r16 == null goto label15;

        if i0 <= 0 goto label14;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

     label02:
        i3 = 0;

     label03:
        i4 = -1;

     label04:
        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i2 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        if i3 >= $i2 goto label07;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r12 = (android.hardware.camera2.params.OutputConfiguration) $r11;

        $r13 = virtualinvoke $r12.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        if r16 != $r13 goto label06;

        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i4 = virtualinvoke $r14.<android.util.SparseArray: int keyAt(int)>(i3);

     label05:
        goto label07;

     label06:
        i3 = i3 + 1;

        goto label03;

     label07:
        if i4 == -1 goto label10;

     label08:
        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r9.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void prepare2(int,int)>(i0, i4);

        exitmonitor r1;

     label09:
        return;

     label10:
        r17 = new java.lang.IllegalArgumentException;

        specialinvoke r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is not part of this session");

        throw r17;

     label11:
        $r15 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r15;

     label14:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid maxCount given: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label15:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void prepare(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r6;
        java.lang.IllegalArgumentException $r2, r12;
        android.util.SparseArray $r3, $r5, $r9;
        int $i1, i2, i3;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r4;
        android.hardware.camera2.params.OutputConfiguration $r7;
        java.util.List $r8;
        boolean $z0;
        java.lang.Throwable $r10;
        android.view.Surface r11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r11 := @parameter0: android.view.Surface;

        if r11 == null goto label14;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

     label02:
        i2 = 0;

     label03:
        i3 = -1;

     label04:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i2 >= $i1 goto label07;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r7 = (android.hardware.camera2.params.OutputConfiguration) $r6;

        $r8 = virtualinvoke $r7.<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>();

        $z0 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z0 == 0 goto label06;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i3 = virtualinvoke $r9.<android.util.SparseArray: int keyAt(int)>(i2);

     label05:
        goto label07;

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        if i3 == -1 goto label10;

     label08:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r4.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void prepare(int)>(i3);

        exitmonitor r1;

     label09:
        return;

     label10:
        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is not part of this session");

        throw r12;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r10;

     label14:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setCameraAudioRestriction(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;
        java.lang.Object r1;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r3.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void setCameraAudioRestriction(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setRemoteDevice(android.hardware.camera2.ICameraDeviceUser) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r2;
        boolean $z0;
        java.lang.Runnable $r3, $r5, $r9;
        java.util.concurrent.Executor $r4, $r6, $r10;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        android.hardware.camera2.ICameraDeviceUser r11;
        android.os.IBinder r12;
        android.hardware.camera2.CameraAccessException r14;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r11 := @parameter0: android.hardware.camera2.ICameraDeviceUser;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError>;

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r2 = new android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        specialinvoke r2.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void <init>(android.hardware.camera2.ICameraDeviceUser)>(r11);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice> = r2;

        r12 = interfaceinvoke r11.<android.hardware.camera2.ICameraDeviceUser: android.os.IBinder asBinder()>();

     label04:
        if r12 == null goto label09;

     label05:
        interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label06:
        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnDisconnected>;

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

        r14 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r14.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(2, "The camera device has encountered a serious error");

        throw r14;

     label09:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnOpened>;

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        exitmonitor r1;

     label10:
        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setRemoteFailure(android.os.ServiceSpecificException)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r6, r9;
        java.lang.Throwable $r7;
        android.os.ServiceSpecificException r8;
        byte b3;
        boolean z0;
        java.lang.Object r11;
        java.util.concurrent.Executor r12;
        android.hardware.camera2.impl.CameraDeviceImpl$8 r13;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r8 := @parameter0: android.os.ServiceSpecificException;

        b3 = 4;

        z0 = 1;

        i0 = r8.<android.os.ServiceSpecificException: int errorCode>;

        if i0 == 4 goto label05;

        if i0 == 10 goto label04;

        if i0 == 6 goto label03;

        if i0 == 7 goto label02;

        if i0 == 8 goto label01;

        r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected failure in opening camera device: ");

        $i1 = r8.<android.os.ServiceSpecificException: int errorCode>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke r8.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r9, $r6);

        goto label06;

     label01:
        b3 = 2;

        goto label06;

     label02:
        b3 = 1;

        goto label06;

     label03:
        b3 = 3;

        goto label06;

     label04:
        b3 = 4;

        goto label06;

     label05:
        z0 = 0;

     label06:
        r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r11;

     label07:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = 1;

        r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.Executor mDeviceExecutor>;

        r13 = new android.hardware.camera2.impl.CameraDeviceImpl$8;

        specialinvoke r13.<android.hardware.camera2.impl.CameraDeviceImpl$8: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,boolean,int)>(r0, z0, b3);

        interfaceinvoke r12.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r13);

        exitmonitor r11;

     label08:
        return;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r11;

     label11:
        throw $r7;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int setRepeatingBurst(java.util.List, android.hardware.camera2.impl.CaptureCallback, java.util.concurrent.Executor) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;
        android.hardware.camera2.impl.CaptureCallback r2;
        java.util.concurrent.Executor r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.impl.CaptureCallback;

        r3 := @parameter2: java.util.concurrent.Executor;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor,boolean)>(r1, r2, r3, 1);

        return $i0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one request must be given");

        throw $r4;
    }

    public int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.impl.CaptureCallback, java.util.concurrent.Executor) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.impl.CaptureCallback r2;
        java.util.concurrent.Executor r3;
        java.util.ArrayList $r5;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.impl.CaptureCallback;

        r3 := @parameter2: java.util.concurrent.Executor;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor,boolean)>($r5, r2, r3, 1);

        return $i0;
    }

    public void setSessionListener(android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK r3;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r3 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1;
        int i0, $i2;
        long l1;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r2;
        java.lang.Throwable $r3, $r4;
        int[] r5;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $i2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i2 == -1 goto label08;

        i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = -1;

        r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes>;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int[] mRepeatingRequestTypes> = null;

     label02:
        $r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        l1 = virtualinvoke $r2.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: long cancelRequest(int)>(i0);

     label03:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkEarlyTriggerSequenceCompleteLocked(int,long,int[])>(i0, l1, r5);

     label04:
        goto label08;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.IllegalArgumentException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean supportsOfflineProcessing(android.view.Surface)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r7;
        boolean z0;
        java.lang.IllegalArgumentException $r2, r13;
        android.util.SparseArray $r3, $r6, $r10;
        int $i1, i2, i3;
        java.util.HashSet $r4;
        java.lang.Integer $r5;
        android.hardware.camera2.params.OutputConfiguration $r8;
        android.view.Surface $r9, r12;
        java.lang.Throwable $r11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r12 := @parameter0: android.view.Surface;

        if r12 == null goto label12;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

        i2 = 0;

     label01:
        i3 = -1;

     label02:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i2 >= $i1 goto label05;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r8 = (android.hardware.camera2.params.OutputConfiguration) $r7;

        $r9 = virtualinvoke $r8.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        if r12 != $r9 goto label04;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i3 = virtualinvoke $r10.<android.util.SparseArray: int keyAt(int)>(i2);

     label03:
        goto label05;

     label04:
        i2 = i2 + 1;

        goto label01;

     label05:
        if i3 == -1 goto label08;

     label06:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.HashSet mOfflineSupport>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        z0 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>($r5);

        exitmonitor r1;

     label07:
        return z0;

     label08:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is not part of this session");

        throw r13;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r11;

     label12:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is null");

        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection, java.util.concurrent.Executor, android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r3, $r22, $r32, $r37;
        java.util.Iterator r4;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r5, r44, r46;
        java.util.HashSet $r6, $r24;
        android.util.SparseArray $r7, $r10, $r12, $r17, $r23, $r31, $r35, $r36, r49;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r8, r47;
        java.util.List $r9;
        android.hardware.camera2.impl.FrameNumberTracker $r11, r50;
        java.util.AbstractMap$SimpleEntry $r13, r48;
        android.hardware.camera2.CameraCharacteristics $r14;
        java.lang.String $r15, $r29;
        java.util.concurrent.ExecutorService $r16, $r21;
        java.lang.Integer $r18, $r25, $r30;
        android.hardware.camera2.impl.CameraCaptureSessionCore $r19;
        android.hardware.camera2.impl.CameraDeviceImpl$9 $r20;
        int $i1, i2, i3;
        android.hardware.camera2.params.OutputConfiguration $r33, $r38;
        android.view.Surface $r34, r43;
        java.lang.Throwable $r39;
        java.util.Collection r40;
        java.util.concurrent.Executor r41;
        android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback r42;
        java.lang.StringBuilder r45;
        java.lang.IllegalStateException r51;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r40 := @parameter0: java.util.Collection;

        r41 := @parameter1: java.util.concurrent.Executor;

        r42 := @parameter2: android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback;

        $z0 = interfaceinvoke r40.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label20;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = new android.util.SparseArray;

        specialinvoke $r7.<android.util.SparseArray: void <init>()>();

        r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r3;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl>;

        if $r8 != null goto label16;

        r4 = interfaceinvoke r40.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r22 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r43 = (android.view.Surface) $r22;

     label03:
        i2 = 0;

     label04:
        i3 = -1;

     label05:
        $r23 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i1 = virtualinvoke $r23.<android.util.SparseArray: int size()>();

        if i2 >= $i1 goto label08;

        $r31 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r32 = virtualinvoke $r31.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r33 = (android.hardware.camera2.params.OutputConfiguration) $r32;

        $r34 = virtualinvoke $r33.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        if r43 != $r34 goto label07;

        $r35 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i3 = virtualinvoke $r35.<android.util.SparseArray: int keyAt(int)>(i2);

        $r36 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r37 = virtualinvoke $r36.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r38 = (android.hardware.camera2.params.OutputConfiguration) $r37;

        virtualinvoke $r7.<android.util.SparseArray: void append(int,java.lang.Object)>(i3, $r38);

     label06:
        goto label08;

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        if i3 == -1 goto label12;

     label09:
        $r24 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.HashSet mOfflineSupport>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z2 = virtualinvoke $r24.<java.util.HashSet: boolean contains(java.lang.Object)>($r25);

        if $z2 == 0 goto label11;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r30);

     label10:
        goto label02;

     label11:
        r44 = new java.lang.IllegalArgumentException;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface: ");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not  support offline mode");

        $r29 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw r44;

     label12:
        r46 = new java.lang.IllegalArgumentException;

        specialinvoke r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offline surface is not part of this session");

        throw r46;

     label13:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

        r47 = new android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r15 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String mCameraId>;

        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r13 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.AbstractMap$SimpleEntry mConfiguredInput>;

        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mRequestLastFrameNumbersList>;

        specialinvoke r47.<android.hardware.camera2.impl.CameraOfflineSessionImpl: void <init>(java.lang.String,android.hardware.camera2.CameraCharacteristics,java.util.concurrent.Executor,android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback,android.util.SparseArray,java.util.AbstractMap$SimpleEntry,android.util.SparseArray,android.hardware.camera2.impl.FrameNumberTracker,android.util.SparseArray,java.util.List)>($r15, $r14, r41, r42, $r7, $r13, $r12, $r11, $r10, $r9);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl mOfflineSessionImpl> = r47;

     label14:
        $r16 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.ExecutorService mOfflineSwitchService> = $r16;

        $r17 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        virtualinvoke $r17.<android.util.SparseArray: void clear()>();

        r48 = new java.util.AbstractMap$SimpleEntry;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        specialinvoke r48.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r18, null);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.AbstractMap$SimpleEntry mConfiguredInput> = r48;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle> = 1;

        r49 = new android.util.SparseArray;

        specialinvoke r49.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap> = r49;

        r50 = new android.hardware.camera2.impl.FrameNumberTracker;

        specialinvoke r50.<android.hardware.camera2.impl.FrameNumberTracker: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker> = r50;

        $r19 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionCore mCurrentSession>;

        interfaceinvoke $r19.<android.hardware.camera2.impl.CameraCaptureSessionCore: void closeWithoutDraining()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionCore mCurrentSession> = null;

        exitmonitor r3;

     label15:
        $r21 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.concurrent.ExecutorService mOfflineSwitchService>;

        $r20 = new android.hardware.camera2.impl.CameraDeviceImpl$9;

        specialinvoke $r20.<android.hardware.camera2.impl.CameraDeviceImpl$9: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,java.util.HashSet)>(r0, $r6);

        interfaceinvoke $r21.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r20);

        return r47;

     label16:
        r51 = new java.lang.IllegalStateException;

        specialinvoke r51.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Switch to offline mode already in progress");

        throw r51;

     label17:
        $r39 := @caughtexception;

     label18:
        exitmonitor r3;

     label19:
        throw $r39;

     label20:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid offline surfaces!");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void tearDown(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r6;
        java.lang.IllegalArgumentException $r2, r12;
        android.util.SparseArray $r3, $r5, $r9;
        int $i1, i2, i3;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r4;
        android.hardware.camera2.params.OutputConfiguration $r7;
        android.view.Surface $r8, r11;
        java.lang.Throwable $r10;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r11 := @parameter0: android.view.Surface;

        if r11 == null goto label14;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

     label02:
        i2 = 0;

     label03:
        i3 = -1;

     label04:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i2 >= $i1 goto label07;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r7 = (android.hardware.camera2.params.OutputConfiguration) $r6;

        $r8 = virtualinvoke $r7.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        if r11 != $r8 goto label06;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i3 = virtualinvoke $r9.<android.util.SparseArray: int keyAt(int)>(i2);

     label05:
        goto label07;

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        if i3 == -1 goto label10;

     label08:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r4.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void tearDown(int)>(i3);

        exitmonitor r1;

     label09:
        return;

     label10:
        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is not part of this session");

        throw r12;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r10;

     label14:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r7;
        android.util.SparseArray $r2, $r4, $r6, $r10;
        int $i1, i2, i3;
        android.hardware.camera2.impl.ICameraDeviceUserWrapper $r3;
        android.view.Surface $r5, $r9;
        android.hardware.camera2.params.OutputConfiguration $r8, r12;
        java.lang.Throwable $r11;
        java.lang.IllegalArgumentException r13;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r12 := @parameter0: android.hardware.camera2.params.OutputConfiguration;

        r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

     label02:
        i2 = 0;

     label03:
        i3 = -1;

     label04:
        $r2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i2 >= $i1 goto label07;

        $r5 = virtualinvoke r12.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r8 = (android.hardware.camera2.params.OutputConfiguration) $r7;

        $r9 = virtualinvoke $r8.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        if $r5 != $r9 goto label06;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i3 = virtualinvoke $r10.<android.util.SparseArray: int keyAt(int)>(i2);

     label05:
        goto label07;

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        if i3 == -1 goto label10;

     label08:
        $r3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.ICameraDeviceUserWrapper mRemoteDevice>;

        virtualinvoke $r3.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: void updateOutputConfiguration(int,android.hardware.camera2.params.OutputConfiguration)>(i3, r12);

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r12);

        exitmonitor r1;

     label09:
        return;

     label10:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid output configuration");

        throw r13;

     label11:
        $r11 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.impl.CameraDeviceImpl: int REQUEST_ID_NONE> = -1;

        <android.hardware.camera2.impl.CameraDeviceImpl: long NANO_PER_SECOND> = 1000000000L;

        return;
    }
}
