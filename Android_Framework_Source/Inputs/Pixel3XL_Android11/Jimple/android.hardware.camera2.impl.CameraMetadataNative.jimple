public class android.hardware.camera2.impl.CameraMetadataNative extends java.lang.Object implements android.os.Parcelable
{
    private static final java.lang.String CELLID_PROCESS;
    public static final android.os.Parcelable$Creator CREATOR;
    private static final boolean DEBUG;
    private static final int FACE_LANDMARK_SIZE;
    private static final java.lang.String GPS_PROCESS;
    public static final int NATIVE_JPEG_FORMAT;
    public static final int NUM_TYPES;
    private static final java.lang.String TAG;
    public static final int TYPE_BYTE;
    public static final int TYPE_DOUBLE;
    public static final int TYPE_FLOAT;
    public static final int TYPE_INT32;
    public static final int TYPE_INT64;
    public static final int TYPE_RATIONAL;
    private static final java.util.HashMap sGetCommandMap;
    private static final java.util.HashMap sSetCommandMap;
    private int mCameraId;
    private android.util.Size mDisplaySize;
    private boolean mHasMandatoryConcurrentStreams;
    private long mMetadataPtr;

    static void <clinit>()
    {
        android.hardware.camera2.impl.CameraMetadataNative$1 $r0;
        java.util.HashMap $r1, $r7, $r12, $r17, $r22, $r27, $r32, $r37, $r42, $r47, $r52, $r57, $r62, $r67, $r72, $r77, $r82, $r86, $r92, $r97, $r102, $r107;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r16, $r21, $r26, $r31, $r36, $r41, $r46, $r51, $r56, $r81, $r87;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3, $r8, $r13, $r18, $r23, $r28, $r33, $r38, $r43, $r48, $r53, $r58, $r63, $r68, $r73, $r78, $r83, $r88, $r93, $r98, $r103, $r108;
        android.hardware.camera2.impl.CameraMetadataNative$2 $r4;
        android.hardware.camera2.CaptureResult$Key $r6, $r11, $r66, $r71, $r76, $r91, $r96, $r106;
        android.hardware.camera2.impl.CameraMetadataNative$3 $r9;
        android.hardware.camera2.impl.CameraMetadataNative$4 $r14;
        android.hardware.camera2.impl.CameraMetadataNative$5 $r19;
        android.hardware.camera2.impl.CameraMetadataNative$6 $r24;
        android.hardware.camera2.impl.CameraMetadataNative$7 $r29;
        android.hardware.camera2.impl.CameraMetadataNative$8 $r34;
        android.hardware.camera2.impl.CameraMetadataNative$9 $r39;
        android.hardware.camera2.impl.CameraMetadataNative$10 $r44;
        android.hardware.camera2.impl.CameraMetadataNative$11 $r49;
        android.hardware.camera2.impl.CameraMetadataNative$12 $r54;
        android.hardware.camera2.impl.CameraMetadataNative$13 $r59;
        android.hardware.camera2.CaptureRequest$Key $r61, $r101;
        android.hardware.camera2.impl.CameraMetadataNative$14 $r64;
        android.hardware.camera2.impl.CameraMetadataNative$15 $r69;
        android.hardware.camera2.impl.CameraMetadataNative$16 $r74;
        android.hardware.camera2.impl.CameraMetadataNative$17 $r79;
        android.hardware.camera2.impl.CameraMetadataNative$18 $r84;
        android.hardware.camera2.impl.CameraMetadataNative$19 $r89;
        android.hardware.camera2.impl.CameraMetadataNative$20 $r94;
        android.hardware.camera2.impl.CameraMetadataNative$21 $r99;
        android.hardware.camera2.impl.CameraMetadataNative$22 $r104;
        android.hardware.camera2.impl.CameraMetadataNative$23 $r109;

        <android.hardware.camera2.impl.CameraMetadataNative: int TYPE_RATIONAL> = 5;

        <android.hardware.camera2.impl.CameraMetadataNative: int TYPE_INT64> = 3;

        <android.hardware.camera2.impl.CameraMetadataNative: int TYPE_INT32> = 1;

        <android.hardware.camera2.impl.CameraMetadataNative: int TYPE_FLOAT> = 2;

        <android.hardware.camera2.impl.CameraMetadataNative: int TYPE_DOUBLE> = 4;

        <android.hardware.camera2.impl.CameraMetadataNative: int TYPE_BYTE> = 0;

        <android.hardware.camera2.impl.CameraMetadataNative: java.lang.String TAG> = "CameraMetadataJV";

        <android.hardware.camera2.impl.CameraMetadataNative: int NUM_TYPES> = 6;

        <android.hardware.camera2.impl.CameraMetadataNative: int NATIVE_JPEG_FORMAT> = 33;

        <android.hardware.camera2.impl.CameraMetadataNative: java.lang.String GPS_PROCESS> = "GPS";

        <android.hardware.camera2.impl.CameraMetadataNative: int FACE_LANDMARK_SIZE> = 6;

        <android.hardware.camera2.impl.CameraMetadataNative: boolean DEBUG> = 0;

        <android.hardware.camera2.impl.CameraMetadataNative: java.lang.String CELLID_PROCESS> = "CELLID";

        $r0 = new android.hardware.camera2.impl.CameraMetadataNative$1;

        specialinvoke $r0.<android.hardware.camera2.impl.CameraMetadataNative$1: void <init>()>();

        <android.hardware.camera2.impl.CameraMetadataNative: android.os.Parcelable$Creator CREATOR> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap> = $r1;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_FORMATS>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r4 = new android.hardware.camera2.impl.CameraMetadataNative$2;

        specialinvoke $r4.<android.hardware.camera2.impl.CameraMetadataNative$2: void <init>()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r7 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r6 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACES>;

        $r8 = virtualinvoke $r6.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r9 = new android.hardware.camera2.impl.CameraMetadataNative$3;

        specialinvoke $r9.<android.hardware.camera2.impl.CameraMetadataNative$3: void <init>()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r12 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r11 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_RECTANGLES>;

        $r13 = virtualinvoke $r11.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r14 = new android.hardware.camera2.impl.CameraMetadataNative$4;

        specialinvoke $r14.<android.hardware.camera2.impl.CameraMetadataNative$4: void <init>()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r17 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r16 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r18 = virtualinvoke $r16.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r19 = new android.hardware.camera2.impl.CameraMetadataNative$5;

        specialinvoke $r19.<android.hardware.camera2.impl.CameraMetadataNative$5: void <init>()>();

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r22 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r21 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_STREAM_COMBINATIONS>;

        $r23 = virtualinvoke $r21.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r24 = new android.hardware.camera2.impl.CameraMetadataNative$6;

        specialinvoke $r24.<android.hardware.camera2.impl.CameraMetadataNative$6: void <init>()>();

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r27 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r26 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONS>;

        $r28 = virtualinvoke $r26.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r29 = new android.hardware.camera2.impl.CameraMetadataNative$7;

        specialinvoke $r29.<android.hardware.camera2.impl.CameraMetadataNative$7: void <init>()>();

        virtualinvoke $r27.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r32 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r31 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AE>;

        $r33 = virtualinvoke $r31.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r34 = new android.hardware.camera2.impl.CameraMetadataNative$8;

        specialinvoke $r34.<android.hardware.camera2.impl.CameraMetadataNative$8: void <init>()>();

        virtualinvoke $r32.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r37 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r36 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AWB>;

        $r38 = virtualinvoke $r36.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r39 = new android.hardware.camera2.impl.CameraMetadataNative$9;

        specialinvoke $r39.<android.hardware.camera2.impl.CameraMetadataNative$9: void <init>()>();

        virtualinvoke $r37.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r42 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r41 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AF>;

        $r43 = virtualinvoke $r41.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r44 = new android.hardware.camera2.impl.CameraMetadataNative$10;

        specialinvoke $r44.<android.hardware.camera2.impl.CameraMetadataNative$10: void <init>()>();

        virtualinvoke $r42.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r44);

        $r47 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r46 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_RAW>;

        $r48 = virtualinvoke $r46.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r49 = new android.hardware.camera2.impl.CameraMetadataNative$11;

        specialinvoke $r49.<android.hardware.camera2.impl.CameraMetadataNative$11: void <init>()>();

        virtualinvoke $r47.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r49);

        $r52 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r51 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC>;

        $r53 = virtualinvoke $r51.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r54 = new android.hardware.camera2.impl.CameraMetadataNative$12;

        specialinvoke $r54.<android.hardware.camera2.impl.CameraMetadataNative$12: void <init>()>();

        virtualinvoke $r52.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, $r54);

        $r57 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r56 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC_STALLING>;

        $r58 = virtualinvoke $r56.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r59 = new android.hardware.camera2.impl.CameraMetadataNative$13;

        specialinvoke $r59.<android.hardware.camera2.impl.CameraMetadataNative$13: void <init>()>();

        virtualinvoke $r57.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, $r59);

        $r62 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r61 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE>;

        $r63 = virtualinvoke $r61.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r64 = new android.hardware.camera2.impl.CameraMetadataNative$14;

        specialinvoke $r64.<android.hardware.camera2.impl.CameraMetadataNative$14: void <init>()>();

        virtualinvoke $r62.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r63, $r64);

        $r67 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r66 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_LOCATION>;

        $r68 = virtualinvoke $r66.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r69 = new android.hardware.camera2.impl.CameraMetadataNative$15;

        specialinvoke $r69.<android.hardware.camera2.impl.CameraMetadataNative$15: void <init>()>();

        virtualinvoke $r67.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, $r69);

        $r72 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r71 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_LENS_SHADING_CORRECTION_MAP>;

        $r73 = virtualinvoke $r71.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r74 = new android.hardware.camera2.impl.CameraMetadataNative$16;

        specialinvoke $r74.<android.hardware.camera2.impl.CameraMetadataNative$16: void <init>()>();

        virtualinvoke $r72.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r73, $r74);

        $r77 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r76 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_OIS_SAMPLES>;

        $r78 = virtualinvoke $r76.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r79 = new android.hardware.camera2.impl.CameraMetadataNative$17;

        specialinvoke $r79.<android.hardware.camera2.impl.CameraMetadataNative$17: void <init>()>();

        virtualinvoke $r77.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r78, $r79);

        $r82 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r81 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIES>;

        $r83 = virtualinvoke $r81.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r84 = new android.hardware.camera2.impl.CameraMetadataNative$18;

        specialinvoke $r84.<android.hardware.camera2.impl.CameraMetadataNative$18: void <init>()>();

        virtualinvoke $r82.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r83, $r84);

        $r86 = new java.util.HashMap;

        specialinvoke $r86.<java.util.HashMap: void <init>()>();

        <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sSetCommandMap> = $r86;

        $r87 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_FORMATS>;

        $r88 = virtualinvoke $r87.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r89 = new android.hardware.camera2.impl.CameraMetadataNative$19;

        specialinvoke $r89.<android.hardware.camera2.impl.CameraMetadataNative$19: void <init>()>();

        virtualinvoke $r86.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r88, $r89);

        $r92 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sSetCommandMap>;

        $r91 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_RECTANGLES>;

        $r93 = virtualinvoke $r91.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r94 = new android.hardware.camera2.impl.CameraMetadataNative$20;

        specialinvoke $r94.<android.hardware.camera2.impl.CameraMetadataNative$20: void <init>()>();

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r93, $r94);

        $r97 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sSetCommandMap>;

        $r96 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACES>;

        $r98 = virtualinvoke $r96.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r99 = new android.hardware.camera2.impl.CameraMetadataNative$21;

        specialinvoke $r99.<android.hardware.camera2.impl.CameraMetadataNative$21: void <init>()>();

        virtualinvoke $r97.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r98, $r99);

        $r102 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sSetCommandMap>;

        $r101 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE>;

        $r103 = virtualinvoke $r101.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r104 = new android.hardware.camera2.impl.CameraMetadataNative$22;

        specialinvoke $r104.<android.hardware.camera2.impl.CameraMetadataNative$22: void <init>()>();

        virtualinvoke $r102.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r103, $r104);

        $r107 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sSetCommandMap>;

        $r106 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_LOCATION>;

        $r108 = virtualinvoke $r106.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r109 = new android.hardware.camera2.impl.CameraMetadataNative$23;

        specialinvoke $r109.<android.hardware.camera2.impl.CameraMetadataNative$23: void <init>()>();

        virtualinvoke $r107.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r108, $r109);

        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void registerAllMarshalers()>();

        return;
    }

    public void <init>()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        long l0;
        android.util.Size $r1;
        byte $b1;
        java.lang.OutOfMemoryError $r2;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraMetadataNative: int mCameraId> = -1;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean mHasMandatoryConcurrentStreams> = 0;

        $r1 = new android.util.Size;

        specialinvoke $r1.<android.util.Size: void <init>(int,int)>(0, 0);

        r0.<android.hardware.camera2.impl.CameraMetadataNative: android.util.Size mDisplaySize> = $r1;

        l0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: long nativeAllocate()>();

        r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr> = l0;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.OutOfMemoryError;

        specialinvoke $r2.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Failed to allocate native CameraMetadata");

        throw $r2;
    }

    public void <init>(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0, r1;
        long l0, $l1;
        android.util.Size $r2;
        byte $b2;
        java.lang.OutOfMemoryError $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraMetadataNative: int mCameraId> = -1;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean mHasMandatoryConcurrentStreams> = 0;

        $r2 = new android.util.Size;

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>(0, 0);

        r0.<android.hardware.camera2.impl.CameraMetadataNative: android.util.Size mDisplaySize> = $r2;

        $l1 = r1.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        l0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: long nativeAllocateCopy(long)>($l1);

        r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr> = l0;

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.OutOfMemoryError;

        specialinvoke $r3.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Failed to allocate native CameraMetadata");

        throw $r3;
    }

    static int[] access$100(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: int[] getAvailableFormats()>();

        return $r1;
    }

    static android.location.Location access$1000(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.location.Location $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.location.Location getGpsLocation()>();

        return $r1;
    }

    static android.hardware.camera2.params.LensShadingMap access$1100(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.LensShadingMap $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.LensShadingMap getLensShadingMap()>();

        return $r1;
    }

    static android.hardware.camera2.params.OisSample[] access$1200(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.OisSample[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.OisSample[] getOisSamples()>();

        return $r1;
    }

    static android.hardware.camera2.params.Capability[] access$1300(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.Capability[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.Capability[] getExtendedSceneModeCapabilities()>();

        return $r1;
    }

    static boolean access$1500(android.hardware.camera2.impl.CameraMetadataNative, int[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int[] r1;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: int[];

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean setAvailableFormats(int[])>(r1);

        return $z0;
    }

    static boolean access$1600(android.hardware.camera2.impl.CameraMetadataNative, android.graphics.Rect[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.graphics.Rect[] r1;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.graphics.Rect[];

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean setFaceRectangles(android.graphics.Rect[])>(r1);

        return $z0;
    }

    static boolean access$1700(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.params.Face[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.Face[] r1;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.params.Face[];

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean setFaces(android.hardware.camera2.params.Face[])>(r1);

        return $z0;
    }

    static boolean access$1800(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.params.TonemapCurve)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.TonemapCurve r1;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.params.TonemapCurve;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean setTonemapCurve(android.hardware.camera2.params.TonemapCurve)>(r1);

        return $z0;
    }

    static boolean access$1900(android.hardware.camera2.impl.CameraMetadataNative, android.location.Location)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.location.Location r1;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.location.Location;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean setGpsLocation(android.location.Location)>(r1);

        return $z0;
    }

    static android.hardware.camera2.params.Face[] access$200(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.Face[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.Face[] getFaces()>();

        return $r1;
    }

    static android.graphics.Rect[] access$300(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.graphics.Rect[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.graphics.Rect[] getFaceRectangles()>();

        return $r1;
    }

    static android.hardware.camera2.params.StreamConfigurationMap access$400(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.StreamConfigurationMap $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.StreamConfigurationMap getStreamConfigurationMap()>();

        return $r1;
    }

    static android.hardware.camera2.params.MandatoryStreamCombination[] access$500(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.MandatoryStreamCombination[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.MandatoryStreamCombination[] getMandatoryStreamCombinations()>();

        return $r1;
    }

    static android.hardware.camera2.params.MandatoryStreamCombination[] access$600(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.MandatoryStreamCombination[] $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.MandatoryStreamCombination[] getMandatoryConcurrentStreamCombinations()>();

        return $r1;
    }

    static java.lang.Integer access$700(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.impl.CameraMetadataNative$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.impl.CameraMetadataNative$Key r1;
        java.lang.Integer $r2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.impl.CameraMetadataNative$Key;

        $r2 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Integer getMaxRegions(android.hardware.camera2.impl.CameraMetadataNative$Key)>(r1);

        return $r2;
    }

    static java.lang.Integer access$800(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.impl.CameraMetadataNative$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.impl.CameraMetadataNative$Key r1;
        java.lang.Integer $r2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.impl.CameraMetadataNative$Key;

        $r2 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Integer getMaxNumOutputs(android.hardware.camera2.impl.CameraMetadataNative$Key)>(r1);

        return $r2;
    }

    static android.hardware.camera2.params.TonemapCurve access$900(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.TonemapCurve $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.TonemapCurve getTonemapCurve()>();

        return $r1;
    }

    private static transient boolean areValuesAllNull(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Object[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r1 = r0[i1];

        if $r1 == null goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private void close()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        long $l0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void nativeClose(long)>($l0);

        r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr> = 0L;

        return;
    }

    private int[] getAvailableFormats()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int[] r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Object $r3;
        int $i0, $i1, i2;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_FORMATS>;

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (int[]) $r3;

        if r1 == null goto label3;

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $i1 = r1[i2];

        if $i1 != 33 goto label2;

        r1[i2] = 256;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r1;
    }

    private java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CameraCharacteristics$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CameraCharacteristics$Key;

        $r2 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.impl.CameraMetadataNative$Key)>($r2);

        return $r3;
    }

    private java.lang.Object getBase(android.hardware.camera2.CaptureRequest$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Key;

        $r2 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.impl.CameraMetadataNative$Key)>($r2);

        return $r3;
    }

    private java.lang.Object getBase(android.hardware.camera2.CaptureResult$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureResult$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureResult$Key;

        $r2 = virtualinvoke r1.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.impl.CameraMetadataNative$Key)>($r2);

        return $r3;
    }

    private java.lang.Object getBase(android.hardware.camera2.impl.CameraMetadataNative$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.impl.CameraMetadataNative$Key r1;
        boolean $z0;
        long $l0, $l1, $l3;
        java.lang.String $r2, $r8, $r9;
        int $i2, i4;
        android.hardware.camera2.marshal.Marshaler $r3;
        java.nio.ByteBuffer $r4, $r6;
        java.nio.ByteOrder $r5;
        java.lang.Object $r7;
        byte[] r10, r11, r12;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative$Key;

        $z0 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean hasTag()>();

        if $z0 == 0 goto label1;

        i4 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        goto label2;

     label1:
        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $r2 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: java.lang.String getName()>();

        i4 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTagFromKeyLocal(long,java.lang.String)>($l0, $r2);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: void cacheTag(int)>(i4);

     label2:
        r10 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: byte[] readValues(int)>(i4);

        r11 = r10;

        if r10 != null goto label4;

        $r8 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative$Key: java.lang.String access$000(android.hardware.camera2.impl.CameraMetadataNative$Key)>(r1);

        if $r8 != null goto label3;

        return null;

     label3:
        $l3 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $r9 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative$Key: java.lang.String access$000(android.hardware.camera2.impl.CameraMetadataNative$Key)>(r1);

        i4 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTagFromKeyLocal(long,java.lang.String)>($l3, $r9);

        r12 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: byte[] readValues(int)>(i4);

        r11 = r12;

        if r12 != null goto label4;

        return null;

     label4:
        $l1 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $i2 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTypeFromTagLocal(long,int)>($l1, i4);

        $r3 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.marshal.Marshaler getMarshalerForKey(android.hardware.camera2.impl.CameraMetadataNative$Key,int)>(r1, $i2);

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r11);

        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $r7 = virtualinvoke $r3.<android.hardware.camera2.marshal.Marshaler: java.lang.Object unmarshal(java.nio.ByteBuffer)>($r6);

        return $r7;
    }

    private android.hardware.camera2.params.Capability[] getExtendedSceneModeCapabilities()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int[] r1;
        float[] r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21;
        android.hardware.camera2.CameraCharacteristics$Key $r3, $r5, $r7, $r9;
        java.lang.Object $r4, $r6, $r8, $r10;
        java.lang.Float $r11, $r16, $r18;
        java.lang.AssertionError $r12, $r19, $r20;
        android.hardware.camera2.params.Capability $r13, $r14;
        float $f0, $f1, f2, f3;
        java.lang.Comparable $r15, $r17;
        android.util.Range r21;
        android.hardware.camera2.params.Capability[] r22;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_MAX_SIZES>;

        $r4 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r3);

        r1 = (int[]) $r4;

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_ZOOM_RATIO_RANGES>;

        $r6 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r5);

        r2 = (float[]) $r6;

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_ZOOM_RATIO_RANGE>;

        $r8 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r7);

        r21 = (android.util.Range) $r8;

        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $r10 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r9);

        $r11 = (java.lang.Float) $r10;

        f2 = virtualinvoke $r11.<java.lang.Float: float floatValue()>();

        if r1 != null goto label01;

        return null;

     label01:
        $i4 = lengthof r1;

        $i5 = $i4 % 3;

        if $i5 != 0 goto label10;

        $i6 = lengthof r1;

        i0 = $i6 / 3;

        i19 = 0;

        if r2 == null goto label04;

        $i15 = lengthof r2;

        $i16 = $i15 % 2;

        if $i16 != 0 goto label03;

        $i17 = lengthof r2;

        i19 = $i17 / 2;

        $i18 = i0 - i19;

        if $i18 != 1 goto label02;

        goto label04;

     label02:
        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("Number of extended scene mode zoom ranges must be 1 less than number of supported modes");

        throw $r20;

     label03:
        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>("availableExtendedSceneModeZoomRanges must be tuples of [minZoom, maxZoom]");

        throw $r19;

     label04:
        f3 = 1.0F;

        if r21 == null goto label05;

        $r15 = virtualinvoke r21.<android.util.Range: java.lang.Comparable getLower()>();

        $r16 = (java.lang.Float) $r15;

        f3 = virtualinvoke $r16.<java.lang.Float: float floatValue()>();

        $r17 = virtualinvoke r21.<android.util.Range: java.lang.Comparable getUpper()>();

        $r18 = (java.lang.Float) $r17;

        f2 = virtualinvoke $r18.<java.lang.Float: float floatValue()>();

     label05:
        r22 = newarray (android.hardware.camera2.params.Capability)[i0];

        i20 = 0;

        i21 = 0;

     label06:
        if i20 >= i0 goto label09;

        $i7 = i20 * 3;

        i1 = r1[$i7];

        $i8 = i20 * 3;

        $i9 = $i8 + 1;

        i2 = r1[$i9];

        $i10 = i20 * 3;

        $i11 = $i10 + 2;

        i3 = r1[$i11];

        if i1 == 0 goto label07;

        if i21 >= i19 goto label07;

        $r14 = new android.hardware.camera2.params.Capability;

        $i12 = i21 * 2;

        $f1 = r2[$i12];

        $i13 = i21 * 2;

        $i14 = $i13 + 1;

        $f0 = r2[$i14];

        specialinvoke $r14.<android.hardware.camera2.params.Capability: void <init>(int,int,int,float,float)>(i1, i2, i3, $f1, $f0);

        r22[i20] = $r14;

        i21 = i21 + 1;

        goto label08;

     label07:
        $r13 = new android.hardware.camera2.params.Capability;

        specialinvoke $r13.<android.hardware.camera2.params.Capability: void <init>(int,int,int,float,float)>(i1, i2, i3, f3, f2);

        r22[i20] = $r13;

     label08:
        i20 = i20 + 1;

        goto label06;

     label09:
        return r22;

     label10:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("availableExtendedSceneModeMaxSizes must be tuples of [mode, width, height]");

        throw $r12;
    }

    private android.graphics.Rect[] getFaceRectangles()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.graphics.Rect[] r1, r2;
        android.hardware.camera2.CaptureResult$Key $r3;
        java.lang.Object $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.graphics.Rect $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_RECTANGLES>;

        $r4 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureResult$Key)>($r3);

        r1 = (android.graphics.Rect[]) $r4;

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r1;

        r2 = newarray (android.graphics.Rect)[$i0];

        i10 = 0;

     label2:
        $i1 = lengthof r1;

        if i10 >= $i1 goto label3;

        $r5 = new android.graphics.Rect;

        $r6 = r1[i10];

        $i9 = $r6.<android.graphics.Rect: int left>;

        $r7 = r1[i10];

        $i8 = $r7.<android.graphics.Rect: int top>;

        $r8 = r1[i10];

        $i3 = $r8.<android.graphics.Rect: int right>;

        $r9 = r1[i10];

        $i2 = $r9.<android.graphics.Rect: int left>;

        $i7 = $i3 - $i2;

        $r10 = r1[i10];

        $i5 = $r10.<android.graphics.Rect: int bottom>;

        $r11 = r1[i10];

        $i4 = $r11.<android.graphics.Rect: int top>;

        $i6 = $i5 - $i4;

        specialinvoke $r5.<android.graphics.Rect: void <init>(int,int,int,int)>($i9, $i8, $i7, $i6);

        r2[i10] = $r5;

        i10 = i10 + 1;

        goto label2;

     label3:
        return r2;
    }

    private android.hardware.camera2.params.Face[] getFaces()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        byte[] r1;
        android.graphics.Rect[] r2;
        int[] r3, r4;
        android.hardware.camera2.CaptureResult$Key $r7, $r9, $r11, $r13, $r15;
        java.lang.Object $r8, $r10, $r12, $r14, $r16;
        java.lang.Object[] $r17, $r27, $r32;
        boolean $z0;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i36, $i37, $i38, $i39, $i41, $i42, $i43, $i44, $i46, i49, i50, $i51, $i52, $i53, $i54, $i55, i56, i57;
        android.hardware.camera2.params.Face[] $r18, $r40, $r41, r49;
        byte $b10, $b11, $b31, $b32, $b33, $b34;
        android.graphics.Point $r20, $r21, $r22;
        android.hardware.camera2.params.Face $r23, $r25;
        android.graphics.Rect $r24, $r26;
        java.lang.Integer $r28, $r29, $r30, $r33, $r34, r42, r43, r45;
        java.lang.String $r31, $r35, $r39;
        java.lang.StringBuilder $r36;
        java.util.ArrayList $r46;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r7 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_DETECT_MODE>;

        $r8 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r7);

        r42 = (java.lang.Integer) $r8;

        $r9 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_SCORES>;

        $r10 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r9);

        r1 = (byte[]) $r10;

        $r11 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_RECTANGLES>;

        $r12 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r11);

        r2 = (android.graphics.Rect[]) $r12;

        $r13 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_IDS>;

        $r14 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r13);

        r3 = (int[]) $r14;

        $r15 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_LANDMARKS>;

        $r16 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r15);

        r4 = (int[]) $r16;

        $r17 = newarray (java.lang.Object)[5];

        $r17[0] = r42;

        $r17[1] = r1;

        $r17[2] = r2;

        $r17[3] = r3;

        $r17[4] = r4;

        $z0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: boolean areValuesAllNull(java.lang.Object[])>($r17);

        if $z0 == 0 goto label01;

        return null;

     label01:
        if r42 != null goto label02;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "Face detect mode metadata is null, assuming the mode is SIMPLE");

        r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        goto label05;

     label02:
        $i0 = virtualinvoke r42.<java.lang.Integer: int intValue()>();

        if $i0 <= 2 goto label03;

        r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        goto label05;

     label03:
        $i1 = virtualinvoke r42.<java.lang.Integer: int intValue()>();

        if $i1 != 0 goto label04;

        $r41 = newarray (android.hardware.camera2.params.Face)[0];

        return $r41;

     label04:
        r43 = r42;

        $i2 = virtualinvoke r42.<java.lang.Integer: int intValue()>();

        if $i2 == 1 goto label05;

        r43 = r42;

        $i46 = virtualinvoke r42.<java.lang.Integer: int intValue()>();

        if $i46 == 2 goto label05;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown face detect mode: ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", $r39);

        $r40 = newarray (android.hardware.camera2.params.Face)[0];

        return $r40;

     label05:
        if r1 == null goto label20;

        if r2 != null goto label06;

        goto label20;

     label06:
        $i5 = lengthof r1;

        $i4 = lengthof r2;

        if $i5 == $i4 goto label07;

        $r32 = newarray (java.lang.Object)[2];

        $i43 = lengthof r1;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i43);

        $r32[0] = $r33;

        $i44 = lengthof r2;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i44);

        $r32[1] = $r34;

        $r35 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Face score size(%d) doesn match face rectangle size(%d)!", $r32);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", $r35);

     label07:
        $i7 = lengthof r1;

        $i6 = lengthof r2;

        i49 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        r45 = r43;

        i50 = i49;

        $i8 = virtualinvoke r43.<java.lang.Integer: int intValue()>();

        if $i8 != 2 goto label12;

        if r3 == null goto label11;

        if r4 != null goto label08;

        goto label11;

     label08:
        $i36 = lengthof r3;

        if $i36 != i49 goto label09;

        $i42 = lengthof r4;

        $i41 = i49 * 6;

        if $i42 == $i41 goto label10;

     label09:
        $r27 = newarray (java.lang.Object)[3];

        $i37 = lengthof r3;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i37);

        $r27[0] = $r28;

        $i38 = lengthof r4;

        $i39 = $i38 * 6;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i39);

        $r27[1] = $r29;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i49);

        $r27[2] = $r30;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Face id size(%d), or face landmark size(%d) don\'tmatch face number(%d)!", $r27);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", $r31);

     label10:
        $i51 = lengthof r3;

        $i52 = staticinvoke <java.lang.Math: int min(int,int)>(i49, $i51);

        $i53 = lengthof r4;

        $i54 = $i53 / 6;

        i50 = staticinvoke <java.lang.Math: int min(int,int)>($i52, $i54);

        r45 = r43;

        goto label12;

     label11:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "Expect face ids and landmarks to be non-null for FULL mode,fallback to SIMPLE mode");

        r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        i50 = i49;

     label12:
        $r46 = new java.util.ArrayList;

        specialinvoke $r46.<java.util.ArrayList: void <init>()>();

        $i55 = virtualinvoke r45.<java.lang.Integer: int intValue()>();

        if $i55 != 1 goto label16;

        i56 = 0;

     label13:
        if i56 >= i50 goto label15;

        $b32 = r1[i56];

        if $b32 > 100 goto label14;

        $b33 = r1[i56];

        if $b33 < 1 goto label14;

        $r25 = new android.hardware.camera2.params.Face;

        $r26 = r2[i56];

        $b34 = r1[i56];

        specialinvoke $r25.<android.hardware.camera2.params.Face: void <init>(android.graphics.Rect,int)>($r26, $b34);

        virtualinvoke $r46.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

     label14:
        i56 = i56 + 1;

        goto label13;

     label15:
        goto label19;

     label16:
        i57 = 0;

     label17:
        if i57 >= i50 goto label19;

        $b10 = r1[i57];

        if $b10 > 100 goto label18;

        $b11 = r1[i57];

        if $b11 < 1 goto label18;

        $i12 = r3[i57];

        if $i12 < 0 goto label18;

        $r20 = new android.graphics.Point;

        $i13 = i57 * 6;

        $i17 = r4[$i13];

        $i14 = i57 * 6;

        $i15 = $i14 + 1;

        $i16 = r4[$i15];

        specialinvoke $r20.<android.graphics.Point: void <init>(int,int)>($i17, $i16);

        $r21 = new android.graphics.Point;

        $i18 = i57 * 6;

        $i19 = $i18 + 2;

        $i23 = r4[$i19];

        $i20 = i57 * 6;

        $i21 = $i20 + 3;

        $i22 = r4[$i21];

        specialinvoke $r21.<android.graphics.Point: void <init>(int,int)>($i23, $i22);

        $r22 = new android.graphics.Point;

        $i24 = i57 * 6;

        $i25 = $i24 + 4;

        $i29 = r4[$i25];

        $i26 = i57 * 6;

        $i27 = $i26 + 5;

        $i28 = r4[$i27];

        specialinvoke $r22.<android.graphics.Point: void <init>(int,int)>($i29, $i28);

        $r23 = new android.hardware.camera2.params.Face;

        $r24 = r2[i57];

        $b31 = r1[i57];

        $i30 = r3[i57];

        specialinvoke $r23.<android.hardware.camera2.params.Face: void <init>(android.graphics.Rect,int,int,android.graphics.Point,android.graphics.Point,android.graphics.Point)>($r24, $b31, $i30, $r20, $r21, $r22);

        virtualinvoke $r46.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

     label18:
        i57 = i57 + 1;

        goto label17;

     label19:
        $i9 = virtualinvoke $r46.<java.util.ArrayList: int size()>();

        r49 = newarray (android.hardware.camera2.params.Face)[$i9];

        virtualinvoke $r46.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r49);

        return r49;

     label20:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "Expect face scores and rectangles to be non-null");

        $r18 = newarray (android.hardware.camera2.params.Face)[0];

        return $r18;
    }

    private android.location.Location getGpsLocation()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        double[] r1;
        java.lang.Long r2;
        android.hardware.camera2.CaptureResult$Key $r3, $r5, $r7;
        java.lang.Object $r4, $r6, $r8;
        java.lang.Object[] $r9;
        boolean $z0;
        android.location.Location $r10;
        java.lang.String $r11, r12;
        double $d0, $d1, $d2;
        long $l2, $l3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_PROCESSING_METHOD>;

        $r4 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r3);

        r12 = (java.lang.String) $r4;

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_COORDINATES>;

        $r6 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r5);

        r1 = (double[]) $r6;

        $r7 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_TIMESTAMP>;

        $r8 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r7);

        r2 = (java.lang.Long) $r8;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r12;

        $r9[1] = r1;

        $r9[2] = r2;

        $z0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: boolean areValuesAllNull(java.lang.Object[])>($r9);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r10 = new android.location.Location;

        $r11 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: java.lang.String translateProcessToLocationProvider(java.lang.String)>(r12);

        specialinvoke $r10.<android.location.Location: void <init>(java.lang.String)>($r11);

        if r2 == null goto label2;

        $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l3 = $l2 * 1000L;

        virtualinvoke $r10.<android.location.Location: void setTime(long)>($l3);

        goto label3;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "getGpsLocation - No timestamp for GPS location.");

     label3:
        if r1 == null goto label4;

        $d0 = r1[0];

        virtualinvoke $r10.<android.location.Location: void setLatitude(double)>($d0);

        $d1 = r1[1];

        virtualinvoke $r10.<android.location.Location: void setLongitude(double)>($d1);

        $d2 = r1[2];

        virtualinvoke $r10.<android.location.Location: void setAltitude(double)>($d2);

        goto label5;

     label4:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "getGpsLocation - No coordinates for GPS location");

     label5:
        return $r10;
    }

    private android.hardware.camera2.params.LensShadingMap getLensShadingMap()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        float[] r1;
        android.util.Size r2;
        android.hardware.camera2.CaptureResult$Key $r3;
        java.lang.Object $r4, $r6;
        android.hardware.camera2.CameraCharacteristics$Key $r5;
        android.hardware.camera2.params.LensShadingMap $r7;
        int $i0, $i1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_LENS_SHADING_MAP>;

        $r4 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureResult$Key)>($r3);

        r1 = (float[]) $r4;

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_SHADING_MAP_SIZE>;

        $r6 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r5);

        r2 = (android.util.Size) $r6;

        if r1 != null goto label1;

        return null;

     label1:
        if r2 != null goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "getLensShadingMap - Lens shading map size was null.");

        return null;

     label2:
        $r7 = new android.hardware.camera2.params.LensShadingMap;

        $i0 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        specialinvoke $r7.<android.hardware.camera2.params.LensShadingMap: void <init>(float[],int,int)>(r1, $i0, $i1);

        return $r7;
    }

    private android.hardware.camera2.params.MandatoryStreamCombination[] getMandatoryConcurrentStreamCombinations()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        boolean $z0;
        android.hardware.camera2.params.MandatoryStreamCombination[] $r1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $z0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean mHasMandatoryConcurrentStreams>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.MandatoryStreamCombination[] getMandatoryStreamCombinationsHelper(boolean)>(1);

        return $r1;
    }

    private android.hardware.camera2.params.MandatoryStreamCombination[] getMandatoryStreamCombinations()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.MandatoryStreamCombination[] $r1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.MandatoryStreamCombination[] getMandatoryStreamCombinationsHelper(boolean)>(0);

        return $r1;
    }

    private android.hardware.camera2.params.MandatoryStreamCombination[] getMandatoryStreamCombinationsHelper(boolean)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        boolean z0, $z1;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r5;
        java.lang.Object $r3, $r6;
        java.util.ArrayList $r4;
        java.lang.Integer $r7, $r14;
        android.hardware.camera2.params.MandatoryStreamCombination$Builder $r8;
        android.util.Size $r9;
        android.hardware.camera2.params.StreamConfigurationMap $r10;
        android.hardware.camera2.params.MandatoryStreamCombination[] $r11, $r13;
        java.lang.Object[] $r12;
        java.util.List r17;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        z0 := @parameter0: boolean;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>;

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (int[]) $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i1 = lengthof r1;

        virtualinvoke $r4.<java.util.ArrayList: void ensureCapacity(int)>($i1);

        i0 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r14 = new java.lang.Integer;

        $i4 = r1[i5];

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i4);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r6 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i6 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = new android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $i2 = r0.<android.hardware.camera2.impl.CameraMetadataNative: int mCameraId>;

        $r9 = r0.<android.hardware.camera2.impl.CameraMetadataNative: android.util.Size mDisplaySize>;

        $r10 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.StreamConfigurationMap getStreamConfigurationMap()>();

        specialinvoke $r8.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: void <init>(int,int,android.util.Size,java.util.List,android.hardware.camera2.params.StreamConfigurationMap)>($i2, i6, $r9, $r4, $r10);

        if z0 == 0 goto label3;

        r17 = virtualinvoke $r8.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAvailableMandatoryConcurrentStreamCombinations()>();

        goto label4;

     label3:
        r17 = virtualinvoke $r8.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAvailableMandatoryStreamCombinations()>();

     label4:
        if r17 == null goto label5;

        $z1 = interfaceinvoke r17.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label5;

        $i3 = interfaceinvoke r17.<java.util.List: int size()>();

        $r11 = newarray (android.hardware.camera2.params.MandatoryStreamCombination)[$i3];

        $r12 = interfaceinvoke r17.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (android.hardware.camera2.params.MandatoryStreamCombination[]) $r12;

        return $r13;

     label5:
        return null;
    }

    private static android.hardware.camera2.marshal.Marshaler getMarshalerForKey(android.hardware.camera2.impl.CameraMetadataNative$Key, int)
    {
        android.hardware.camera2.impl.CameraMetadataNative$Key r0;
        int i0;
        android.hardware.camera2.utils.TypeReference $r1;
        android.hardware.camera2.marshal.Marshaler $r2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative$Key;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative$Key: android.hardware.camera2.utils.TypeReference getTypeReference()>();

        $r2 = staticinvoke <android.hardware.camera2.marshal.MarshalRegistry: android.hardware.camera2.marshal.Marshaler getMarshaler(android.hardware.camera2.utils.TypeReference,int)>($r1, i0);

        return $r2;
    }

    private java.lang.Integer getMaxNumOutputs(android.hardware.camera2.impl.CameraMetadataNative$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.impl.CameraMetadataNative$Key r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r4, $r5, $r6;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r7;
        java.lang.AssertionError $r10;
        java.lang.String $r11;
        int $i0, $i1, $i2;
        java.lang.Integer $r12, $r13, $r14;
        int[] r15;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative$Key;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_STREAMS>;

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r15 = (int[]) $r3;

        if r15 != null goto label1;

        return null;

     label1:
        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_RAW>;

        $z0 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $i2 = r15[0];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r14;

     label2:
        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC>;

        $z1 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        $i1 = r15[1];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r13;

     label3:
        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC_STALLING>;

        $z2 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label4;

        $i0 = r15[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r12;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = new java.lang.AssertionError;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r10;
    }

    private java.lang.Integer getMaxRegions(android.hardware.camera2.impl.CameraMetadataNative$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.impl.CameraMetadataNative$Key r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r4, $r5, $r6;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r7;
        java.lang.AssertionError $r10;
        java.lang.String $r11;
        int $i0, $i1, $i2;
        java.lang.Integer $r12, $r13, $r14;
        int[] r15;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative$Key;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS>;

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r15 = (int[]) $r3;

        if r15 != null goto label1;

        return null;

     label1:
        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AE>;

        $z0 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $i2 = r15[0];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r14;

     label2:
        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AWB>;

        $z1 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        $i1 = r15[1];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r13;

     label3:
        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AF>;

        $z2 = virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label4;

        $i0 = r15[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r12;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = new java.lang.AssertionError;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r10;
    }

    public static int getNativeType(int, long)
    {
        int i0, $i2;
        long l1;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $i2 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTypeFromTag(int,long)>(i0, l1);

        return $i2;
    }

    private android.hardware.camera2.params.OisSample[] getOisSamples()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        long[] r1;
        float[] r2, r3;
        android.hardware.camera2.params.OisSample[] r4;
        android.hardware.camera2.CaptureResult$Key $r5, $r7, $r9;
        java.lang.Object $r6, $r8, $r10;
        java.lang.AssertionError $r11, $r12, $r13, $r18, $r24, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11;
        java.lang.Object[] $r14, $r19;
        java.lang.Integer $r15, $r16, $r20, $r21;
        java.lang.String $r17, $r22;
        android.hardware.camera2.params.OisSample $r23;
        float $f0, $f1;
        long $l10;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_OIS_TIMESTAMPS>;

        $r6 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureResult$Key)>($r5);

        r1 = (long[]) $r6;

        $r7 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_OIS_X_SHIFTS>;

        $r8 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureResult$Key)>($r7);

        r2 = (float[]) $r8;

        $r9 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_OIS_Y_SHIFTS>;

        $r10 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureResult$Key)>($r9);

        r3 = (float[]) $r10;

        if r1 != null goto label3;

        if r2 != null goto label2;

        if r3 != null goto label1;

        return null;

     label1:
        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>("timestamps is null but yShifts is not");

        throw $r25;

     label2:
        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>("timestamps is null but xShifts is not");

        throw $r24;

     label3:
        if r2 == null goto label9;

        if r3 == null goto label8;

        $i1 = lengthof r2;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label7;

        $i5 = lengthof r3;

        $i4 = lengthof r1;

        if $i5 != $i4 goto label6;

        $i8 = lengthof r1;

        r4 = newarray (android.hardware.camera2.params.OisSample)[$i8];

        i11 = 0;

     label4:
        $i9 = lengthof r1;

        if i11 >= $i9 goto label5;

        $r23 = new android.hardware.camera2.params.OisSample;

        $l10 = r1[i11];

        $f1 = r2[i11];

        $f0 = r3[i11];

        specialinvoke $r23.<android.hardware.camera2.params.OisSample: void <init>(long,float,float)>($l10, $f1, $f0);

        r4[i11] = $r23;

        i11 = i11 + 1;

        goto label4;

     label5:
        return r4;

     label6:
        $r18 = new java.lang.AssertionError;

        $r19 = newarray (java.lang.Object)[2];

        $i6 = lengthof r1;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r19[0] = $r20;

        $i7 = lengthof r3;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r19[1] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("timestamps has %d entries but yShifts has %d", $r19);

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r22);

        throw $r18;

     label7:
        $r13 = new java.lang.AssertionError;

        $r14 = newarray (java.lang.Object)[2];

        $i2 = lengthof r1;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r14[0] = $r15;

        $i3 = lengthof r2;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r14[1] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("timestamps has %d entries but xShifts has %d", $r14);

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r17);

        throw $r13;

     label8:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("timestamps is not null but yShifts is");

        throw $r12;

     label9:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>("timestamps is not null but xShifts is");

        throw $r11;
    }

    private android.hardware.camera2.params.StreamConfigurationMap getStreamConfigurationMap()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.StreamConfigurationMap $r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40;
        java.lang.Object $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42;
        android.hardware.camera2.params.StreamConfiguration[] $r5, $r14, $r23, $r32;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r8, $r11, $r17, $r20, $r26, $r29, $r35, $r38;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] $r41;
        android.hardware.camera2.params.ReprocessFormatsMap $r43;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = new android.hardware.camera2.params.StreamConfigurationMap;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_STREAM_CONFIGURATIONS>;

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        $r5 = (android.hardware.camera2.params.StreamConfiguration[]) $r3;

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MIN_FRAME_DURATIONS>;

        $r6 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r4);

        $r8 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r6;

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_STALL_DURATIONS>;

        $r9 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r7);

        $r11 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r9;

        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_AVAILABLE_DEPTH_STREAM_CONFIGURATIONS>;

        $r12 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r10);

        $r14 = (android.hardware.camera2.params.StreamConfiguration[]) $r12;

        $r13 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_AVAILABLE_DEPTH_MIN_FRAME_DURATIONS>;

        $r15 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r13);

        $r17 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r15;

        $r16 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_AVAILABLE_DEPTH_STALL_DURATIONS>;

        $r18 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r16);

        $r20 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r18;

        $r19 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_AVAILABLE_DYNAMIC_DEPTH_STREAM_CONFIGURATIONS>;

        $r21 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r19);

        $r23 = (android.hardware.camera2.params.StreamConfiguration[]) $r21;

        $r22 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_AVAILABLE_DYNAMIC_DEPTH_MIN_FRAME_DURATIONS>;

        $r24 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r22);

        $r26 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r24;

        $r25 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_AVAILABLE_DYNAMIC_DEPTH_STALL_DURATIONS>;

        $r27 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r25);

        $r29 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r27;

        $r28 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key HEIC_AVAILABLE_HEIC_STREAM_CONFIGURATIONS>;

        $r30 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r28);

        $r32 = (android.hardware.camera2.params.StreamConfiguration[]) $r30;

        $r31 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key HEIC_AVAILABLE_HEIC_MIN_FRAME_DURATIONS>;

        $r33 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r31);

        $r35 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r33;

        $r34 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key HEIC_AVAILABLE_HEIC_STALL_DURATIONS>;

        $r36 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r34);

        $r38 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r36;

        $r37 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS>;

        $r39 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r37);

        $r41 = (android.hardware.camera2.params.HighSpeedVideoConfiguration[]) $r39;

        $r40 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_INPUT_OUTPUT_FORMATS_MAP>;

        $r42 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r40);

        $r43 = (android.hardware.camera2.params.ReprocessFormatsMap) $r42;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean isBurstSupported()>();

        specialinvoke $r1.<android.hardware.camera2.params.StreamConfigurationMap: void <init>(android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.HighSpeedVideoConfiguration[],android.hardware.camera2.params.ReprocessFormatsMap,boolean)>($r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r43, $z0);

        return $r1;
    }

    public static int getTag(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTagFromKey(java.lang.String,long)>(r0, 9223372036854775807L);

        return $i0;
    }

    public static int getTag(java.lang.String, long)
    {
        java.lang.String r0;
        long l0;
        int $i1;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $i1 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTagFromKey(java.lang.String,long)>(r0, l0);

        return $i1;
    }

    private android.hardware.camera2.params.TonemapCurve getTonemapCurve()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        float[] r1, r2, r3;
        android.hardware.camera2.CaptureRequest$Key $r4, $r6, $r8;
        java.lang.Object $r5, $r7, $r9;
        java.lang.Object[] $r10;
        boolean $z0;
        android.hardware.camera2.params.TonemapCurve $r11;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r4 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_RED>;

        $r5 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureRequest$Key)>($r4);

        r1 = (float[]) $r5;

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_GREEN>;

        $r7 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureRequest$Key)>($r6);

        r2 = (float[]) $r7;

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_BLUE>;

        $r9 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CaptureRequest$Key)>($r8);

        r3 = (float[]) $r9;

        $r10 = newarray (java.lang.Object)[3];

        $r10[0] = r1;

        $r10[1] = r2;

        $r10[2] = r3;

        $z0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: boolean areValuesAllNull(java.lang.Object[])>($r10);

        if $z0 == 0 goto label1;

        return null;

     label1:
        if r1 == null goto label3;

        if r2 == null goto label3;

        if r3 != null goto label2;

        goto label3;

     label2:
        $r11 = new android.hardware.camera2.params.TonemapCurve;

        specialinvoke $r11.<android.hardware.camera2.params.TonemapCurve: void <init>(float[],float[],float[])>(r1, r2, r3);

        return $r11;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "getTonemapCurve - missing tone curve components");

        return null;
    }

    private boolean isBurstSupported()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int[] r1;
        int i0, $i1, i2;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Object $r3;
        boolean z1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>;

        $r3 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (int[]) $r3;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        z1 = 0;

        if i2 >= i0 goto label3;

        $i1 = r1[i2];

        if $i1 != 6 goto label2;

        z1 = 1;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return z1;
    }

    public static android.hardware.camera2.impl.CameraMetadataNative move(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0, $r2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $r2 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void swap(android.hardware.camera2.impl.CameraMetadataNative)>(r0);

        return $r2;
    }

    private static native long nativeAllocate();

    private static native long nativeAllocateCopy(long) throws java.lang.NullPointerException;

    private static synchronized native void nativeClose(long);

    private static synchronized native void nativeDump(long) throws java.io.IOException;

    private static synchronized native java.util.ArrayList nativeGetAllVendorKeys(long, java.lang.Class);

    private static synchronized native int nativeGetEntryCount(long);

    private static native int nativeGetTagFromKey(java.lang.String, long) throws java.lang.IllegalArgumentException;

    private static synchronized native int nativeGetTagFromKeyLocal(long, java.lang.String) throws java.lang.IllegalArgumentException;

    private static native int nativeGetTypeFromTag(int, long) throws java.lang.IllegalArgumentException;

    private static synchronized native int nativeGetTypeFromTagLocal(long, int) throws java.lang.IllegalArgumentException;

    private static synchronized native boolean nativeIsEmpty(long);

    private static synchronized native void nativeReadFromParcel(android.os.Parcel, long);

    private static synchronized native byte[] nativeReadValues(int, long);

    private static native int nativeSetupGlobalVendorTagDescriptor();

    private static synchronized native void nativeSwap(long, long) throws java.lang.NullPointerException;

    private static synchronized native void nativeWriteToParcel(android.os.Parcel, long);

    private static synchronized native void nativeWriteValues(int, byte[], long);

    private void parseRecommendedConfigurations(android.hardware.camera2.params.RecommendedStreamConfiguration[], android.hardware.camera2.params.StreamConfigurationMap, boolean, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, boolean[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.RecommendedStreamConfiguration[] r1;
        android.hardware.camera2.params.StreamConfigurationMap r2;
        boolean z0, $z1, $z4;
        java.util.ArrayList r3, r4, r5, $r12, $r15, $r17, $r19, $r22, $r23, $r24;
        boolean[] r6;
        int i0, i1, i2, i3, i4, i6, $i10, $i11, i14, i15, i16, i17;
        long l5, l7;
        android.util.Size $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.Object $r10, $r14, $r16, $r18;
        android.hardware.camera2.params.StreamConfiguration $r11, $r13;
        byte $b8, $b9, $b12, $b13;
        android.hardware.camera2.params.StreamConfigurationDuration $r20, $r21, r27, r28;
        android.hardware.camera2.params.RecommendedStreamConfiguration r25;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.params.RecommendedStreamConfiguration[];

        r2 := @parameter1: android.hardware.camera2.params.StreamConfigurationMap;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.ArrayList;

        r4 := @parameter4: java.util.ArrayList;

        r5 := @parameter5: java.util.ArrayList;

        r6 := @parameter6: boolean[];

        virtualinvoke r3.<java.util.ArrayList: void ensureCapacity(int)>(32);

        virtualinvoke r4.<java.util.ArrayList: void ensureCapacity(int)>(32);

        virtualinvoke r5.<java.util.ArrayList: void ensureCapacity(int)>(32);

        i14 = 0;

     label01:
        if i14 >= 32 goto label02;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r24);

        i14 = i14 + 1;

        goto label01;

     label02:
        i0 = lengthof r1;

        i15 = 0;

     label03:
        if i15 >= i0 goto label18;

        r25 = r1[i15];

        i1 = virtualinvoke r25.<android.hardware.camera2.params.RecommendedStreamConfiguration: int getWidth()>();

        i2 = virtualinvoke r25.<android.hardware.camera2.params.RecommendedStreamConfiguration: int getHeight()>();

        i3 = virtualinvoke r25.<android.hardware.camera2.params.RecommendedStreamConfiguration: int getFormat()>();

        if z0 == 0 goto label04;

        i16 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int depthFormatToPublic(int)>(i3);

        goto label05;

     label04:
        i16 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToPublic(int)>(i3);

     label05:
        $r8 = new android.util.Size;

        specialinvoke $r8.<android.util.Size: void <init>(int,int)>(i1, i2);

        i4 = virtualinvoke r25.<android.hardware.camera2.params.RecommendedStreamConfiguration: int getUsecaseBitmap()>();

        $z1 = virtualinvoke r25.<android.hardware.camera2.params.RecommendedStreamConfiguration: boolean isInput()>();

        if $z1 != 0 goto label15;

        $r13 = new android.hardware.camera2.params.StreamConfiguration;

        specialinvoke $r13.<android.hardware.camera2.params.StreamConfiguration: void <init>(int,int,int,boolean)>(i3, i1, i2, 0);

        l5 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>(i16, $r8);

        $b8 = l5 cmp 0L;

        if $b8 <= 0 goto label06;

        $r21 = new android.hardware.camera2.params.StreamConfigurationDuration;

        specialinvoke $r21.<android.hardware.camera2.params.StreamConfigurationDuration: void <init>(int,int,int,long)>(i3, i1, i2, l5);

        r27 = $r21;

        goto label07;

     label06:
        r27 = null;

     label07:
        i6 = i16;

        l7 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>(i16, $r8);

        $b9 = l7 cmp 0L;

        if $b9 <= 0 goto label08;

        $r20 = new android.hardware.camera2.params.StreamConfigurationDuration;

        specialinvoke $r20.<android.hardware.camera2.params.StreamConfigurationDuration: void <init>(int,int,int,long)>(i3, i1, i2, l7);

        r28 = $r20;

        goto label09;

     label08:
        r28 = null;

     label09:
        i17 = 0;

     label10:
        if i17 >= 32 goto label14;

        $i10 = 1 << i17;

        $i11 = i4 & $i10;

        if $i11 == 0 goto label13;

        $r14 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        $r15 = (java.util.ArrayList) $r14;

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        $b12 = l5 cmp 0L;

        if $b12 <= 0 goto label11;

        $r18 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        $r19 = (java.util.ArrayList) $r18;

        virtualinvoke $r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r27);

     label11:
        $b13 = l7 cmp 0L;

        if $b13 <= 0 goto label12;

        $r16 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        $r17 = (java.util.ArrayList) $r16;

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>(r28);

     label12:
        if r6 == null goto label13;

        $z4 = r6[i17];

        if $z4 != 0 goto label13;

        if i6 != 34 goto label13;

        r6[i17] = 1;

     label13:
        i17 = i17 + 1;

        goto label10;

     label14:
        goto label16;

     label15:
        if i4 != 16 goto label17;

        $r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(4);

        $r12 = (java.util.ArrayList) $r10;

        $r11 = new android.hardware.camera2.params.StreamConfiguration;

        specialinvoke $r11.<android.hardware.camera2.params.StreamConfiguration: void <init>(int,int,int,boolean)>(i3, i1, i2, 1);

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label16:
        i15 = i15 + 1;

        goto label03;

     label17:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Recommended input stream configurations should only be advertised in the ZSL use case!");

        throw $r9;

     label18:
        return;
    }

    private static void registerAllMarshalers()
    {
        android.hardware.camera2.marshal.MarshalQueryable[] r0;
        int i0, i1;
        android.hardware.camera2.marshal.impl.MarshalQueryablePrimitive $r2;
        android.hardware.camera2.marshal.impl.MarshalQueryableEnum $r3;
        android.hardware.camera2.marshal.impl.MarshalQueryableArray $r4;
        android.hardware.camera2.marshal.impl.MarshalQueryableBoolean $r5;
        android.hardware.camera2.marshal.impl.MarshalQueryableNativeByteToInteger $r6;
        android.hardware.camera2.marshal.impl.MarshalQueryableRect $r7;
        android.hardware.camera2.marshal.impl.MarshalQueryableSize $r8;
        android.hardware.camera2.marshal.impl.MarshalQueryableSizeF $r9;
        android.hardware.camera2.marshal.impl.MarshalQueryableString $r10;
        android.hardware.camera2.marshal.impl.MarshalQueryableReprocessFormatsMap $r11;
        android.hardware.camera2.marshal.impl.MarshalQueryableRange $r12;
        android.hardware.camera2.marshal.impl.MarshalQueryablePair $r13;
        android.hardware.camera2.marshal.impl.MarshalQueryableMeteringRectangle $r14;
        android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform $r15;
        android.hardware.camera2.marshal.impl.MarshalQueryableStreamConfiguration $r16;
        android.hardware.camera2.marshal.impl.MarshalQueryableStreamConfigurationDuration $r17;
        android.hardware.camera2.marshal.impl.MarshalQueryableRggbChannelVector $r18;
        android.hardware.camera2.marshal.impl.MarshalQueryableBlackLevelPattern $r19;
        android.hardware.camera2.marshal.impl.MarshalQueryableHighSpeedVideoConfiguration $r20;
        android.hardware.camera2.marshal.impl.MarshalQueryableRecommendedStreamConfiguration $r21;
        android.hardware.camera2.marshal.impl.MarshalQueryableParcelable $r22;
        android.hardware.camera2.marshal.MarshalQueryable $r23;

        r0 = newarray (android.hardware.camera2.marshal.MarshalQueryable)[21];

        $r2 = new android.hardware.camera2.marshal.impl.MarshalQueryablePrimitive;

        specialinvoke $r2.<android.hardware.camera2.marshal.impl.MarshalQueryablePrimitive: void <init>()>();

        i1 = 0;

        r0[0] = $r2;

        $r3 = new android.hardware.camera2.marshal.impl.MarshalQueryableEnum;

        specialinvoke $r3.<android.hardware.camera2.marshal.impl.MarshalQueryableEnum: void <init>()>();

        r0[1] = $r3;

        $r4 = new android.hardware.camera2.marshal.impl.MarshalQueryableArray;

        specialinvoke $r4.<android.hardware.camera2.marshal.impl.MarshalQueryableArray: void <init>()>();

        r0[2] = $r4;

        $r5 = new android.hardware.camera2.marshal.impl.MarshalQueryableBoolean;

        specialinvoke $r5.<android.hardware.camera2.marshal.impl.MarshalQueryableBoolean: void <init>()>();

        r0[3] = $r5;

        $r6 = new android.hardware.camera2.marshal.impl.MarshalQueryableNativeByteToInteger;

        specialinvoke $r6.<android.hardware.camera2.marshal.impl.MarshalQueryableNativeByteToInteger: void <init>()>();

        r0[4] = $r6;

        $r7 = new android.hardware.camera2.marshal.impl.MarshalQueryableRect;

        specialinvoke $r7.<android.hardware.camera2.marshal.impl.MarshalQueryableRect: void <init>()>();

        r0[5] = $r7;

        $r8 = new android.hardware.camera2.marshal.impl.MarshalQueryableSize;

        specialinvoke $r8.<android.hardware.camera2.marshal.impl.MarshalQueryableSize: void <init>()>();

        r0[6] = $r8;

        $r9 = new android.hardware.camera2.marshal.impl.MarshalQueryableSizeF;

        specialinvoke $r9.<android.hardware.camera2.marshal.impl.MarshalQueryableSizeF: void <init>()>();

        r0[7] = $r9;

        $r10 = new android.hardware.camera2.marshal.impl.MarshalQueryableString;

        specialinvoke $r10.<android.hardware.camera2.marshal.impl.MarshalQueryableString: void <init>()>();

        r0[8] = $r10;

        $r11 = new android.hardware.camera2.marshal.impl.MarshalQueryableReprocessFormatsMap;

        specialinvoke $r11.<android.hardware.camera2.marshal.impl.MarshalQueryableReprocessFormatsMap: void <init>()>();

        r0[9] = $r11;

        $r12 = new android.hardware.camera2.marshal.impl.MarshalQueryableRange;

        specialinvoke $r12.<android.hardware.camera2.marshal.impl.MarshalQueryableRange: void <init>()>();

        r0[10] = $r12;

        $r13 = new android.hardware.camera2.marshal.impl.MarshalQueryablePair;

        specialinvoke $r13.<android.hardware.camera2.marshal.impl.MarshalQueryablePair: void <init>()>();

        r0[11] = $r13;

        $r14 = new android.hardware.camera2.marshal.impl.MarshalQueryableMeteringRectangle;

        specialinvoke $r14.<android.hardware.camera2.marshal.impl.MarshalQueryableMeteringRectangle: void <init>()>();

        r0[12] = $r14;

        $r15 = new android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform;

        specialinvoke $r15.<android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform: void <init>()>();

        r0[13] = $r15;

        $r16 = new android.hardware.camera2.marshal.impl.MarshalQueryableStreamConfiguration;

        specialinvoke $r16.<android.hardware.camera2.marshal.impl.MarshalQueryableStreamConfiguration: void <init>()>();

        r0[14] = $r16;

        $r17 = new android.hardware.camera2.marshal.impl.MarshalQueryableStreamConfigurationDuration;

        specialinvoke $r17.<android.hardware.camera2.marshal.impl.MarshalQueryableStreamConfigurationDuration: void <init>()>();

        r0[15] = $r17;

        $r18 = new android.hardware.camera2.marshal.impl.MarshalQueryableRggbChannelVector;

        specialinvoke $r18.<android.hardware.camera2.marshal.impl.MarshalQueryableRggbChannelVector: void <init>()>();

        r0[16] = $r18;

        $r19 = new android.hardware.camera2.marshal.impl.MarshalQueryableBlackLevelPattern;

        specialinvoke $r19.<android.hardware.camera2.marshal.impl.MarshalQueryableBlackLevelPattern: void <init>()>();

        r0[17] = $r19;

        $r20 = new android.hardware.camera2.marshal.impl.MarshalQueryableHighSpeedVideoConfiguration;

        specialinvoke $r20.<android.hardware.camera2.marshal.impl.MarshalQueryableHighSpeedVideoConfiguration: void <init>()>();

        r0[18] = $r20;

        $r21 = new android.hardware.camera2.marshal.impl.MarshalQueryableRecommendedStreamConfiguration;

        specialinvoke $r21.<android.hardware.camera2.marshal.impl.MarshalQueryableRecommendedStreamConfiguration: void <init>()>();

        r0[19] = $r21;

        $r22 = new android.hardware.camera2.marshal.impl.MarshalQueryableParcelable;

        specialinvoke $r22.<android.hardware.camera2.marshal.impl.MarshalQueryableParcelable: void <init>()>();

        r0[20] = $r22;

        i0 = lengthof r0;

     label1:
        if i1 >= i0 goto label2;

        $r23 = r0[i1];

        staticinvoke <android.hardware.camera2.marshal.MarshalRegistry: void registerMarshalQueryable(android.hardware.camera2.marshal.MarshalQueryable)>($r23);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private boolean setAvailableFormats(int[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int[] r1, r2;
        int $i0, $i1, $i2, $i3, i4;
        android.hardware.camera2.CameraCharacteristics$Key $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: int[];

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof r1;

        r2 = newarray (int)[$i0];

        i4 = 0;

     label2:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label4;

        $i2 = r1[i4];

        r2[i4] = $i2;

        $i3 = r1[i4];

        if $i3 != 256 goto label3;

        r2[i4] = 33;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_FORMATS>;

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r3, r2);

        return 1;
    }

    private void setBase(android.hardware.camera2.CameraCharacteristics$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CameraCharacteristics$Key r1;
        java.lang.Object r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CameraCharacteristics$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>($r3, r2);

        return;
    }

    private void setBase(android.hardware.camera2.CaptureRequest$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        java.lang.Object r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>($r3, r2);

        return;
    }

    private void setBase(android.hardware.camera2.CaptureResult$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureResult$Key r1;
        java.lang.Object r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureResult$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>($r3, r2);

        return;
    }

    private void setBase(android.hardware.camera2.impl.CameraMetadataNative$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        java.lang.Object r1;
        android.hardware.camera2.marshal.Marshaler r2;
        boolean $z0;
        long $l0, $l1;
        java.lang.String $r3;
        int $i2, $i3, i4;
        java.nio.ByteBuffer $r4, $r6;
        java.nio.ByteOrder $r5;
        android.hardware.camera2.impl.CameraMetadataNative$Key r7;
        byte[] r8;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r7 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative$Key;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r7.<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean hasTag()>();

        if $z0 == 0 goto label1;

        i4 = virtualinvoke r7.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        goto label2;

     label1:
        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $r3 = virtualinvoke r7.<android.hardware.camera2.impl.CameraMetadataNative$Key: java.lang.String getName()>();

        i4 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTagFromKeyLocal(long,java.lang.String)>($l0, $r3);

        virtualinvoke r7.<android.hardware.camera2.impl.CameraMetadataNative$Key: void cacheTag(int)>(i4);

     label2:
        if r1 != null goto label3;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void writeValues(int,byte[])>(i4, null);

        return;

     label3:
        $l1 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $i2 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetTypeFromTagLocal(long,int)>($l1, i4);

        r2 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.marshal.Marshaler getMarshalerForKey(android.hardware.camera2.impl.CameraMetadataNative$Key,int)>(r7, $i2);

        $i3 = virtualinvoke r2.<android.hardware.camera2.marshal.Marshaler: int calculateMarshalSize(java.lang.Object)>(r1);

        r8 = newarray (byte)[$i3];

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r8);

        $r5 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        virtualinvoke r2.<android.hardware.camera2.marshal.Marshaler: void marshal(java.lang.Object,java.nio.ByteBuffer)>(r1, $r6);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void writeValues(int,byte[])>(i4, r8);

        return;
    }

    private boolean setFaceRectangles(android.graphics.Rect[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.graphics.Rect[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.hardware.camera2.CaptureResult$Key $r3;
        android.graphics.Rect $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.graphics.Rect[];

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof r1;

        r2 = newarray (android.graphics.Rect)[$i0];

        i10 = 0;

     label2:
        $i1 = lengthof r2;

        if i10 >= $i1 goto label3;

        $r4 = new android.graphics.Rect;

        $r5 = r1[i10];

        $i9 = $r5.<android.graphics.Rect: int left>;

        $r6 = r1[i10];

        $i8 = $r6.<android.graphics.Rect: int top>;

        $r7 = r1[i10];

        $i3 = $r7.<android.graphics.Rect: int right>;

        $r8 = r1[i10];

        $i2 = $r8.<android.graphics.Rect: int left>;

        $i7 = $i3 + $i2;

        $r9 = r1[i10];

        $i5 = $r9.<android.graphics.Rect: int bottom>;

        $r10 = r1[i10];

        $i4 = $r10.<android.graphics.Rect: int top>;

        $i6 = $i5 + $i4;

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>($i9, $i8, $i7, $i6);

        r2[i10] = $r4;

        i10 = i10 + 1;

        goto label2;

     label3:
        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_RECTANGLES>;

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r3, r2);

        return 1;
    }

    private boolean setFaces(android.hardware.camera2.params.Face[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.Face[] r1;
        android.graphics.Rect[] r2;
        byte[] r3;
        android.hardware.camera2.params.Face r4, r16;
        android.hardware.camera2.CaptureResult$Key $r5, $r6, $r7, $r8;
        android.graphics.Rect $r9;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37;
        byte $b1, $b2;
        android.graphics.Point $r10, $r11, $r12, $r13, $r14, $r15;
        boolean z0;
        int[] r17, r18;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.params.Face[];

        if r1 != null goto label01;

        return 0;

     label01:
        i26 = lengthof r1;

        z0 = 1;

        i27 = lengthof r1;

        i28 = 0;

     label02:
        if i28 >= i27 goto label05;

        r16 = r1[i28];

        if r16 != null goto label03;

        i29 = i26 - 1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "setFaces - null face detected, skipping");

        goto label04;

     label03:
        i29 = i26;

        $i23 = virtualinvoke r16.<android.hardware.camera2.params.Face: int getId()>();

        if $i23 != -1 goto label04;

        z0 = 0;

        i29 = i26;

     label04:
        i28 = i28 + 1;

        i26 = i29;

        goto label02;

     label05:
        r2 = newarray (android.graphics.Rect)[i26];

        r3 = newarray (byte)[i26];

        r17 = null;

        r18 = null;

        if z0 == 0 goto label06;

        r17 = newarray (int)[i26];

        $i22 = i26 * 6;

        r18 = newarray (int)[$i22];

     label06:
        i30 = 0;

        i31 = lengthof r1;

        i32 = 0;

     label07:
        if i32 >= i31 goto label11;

        r4 = r1[i32];

        if r4 != null goto label08;

        goto label10;

     label08:
        $r9 = virtualinvoke r4.<android.hardware.camera2.params.Face: android.graphics.Rect getBounds()>();

        r2[i30] = $r9;

        $i0 = virtualinvoke r4.<android.hardware.camera2.params.Face: int getScore()>();

        $b1 = (byte) $i0;

        $b2 = (byte) $b1;

        r3[i30] = $b2;

        if z0 == 0 goto label09;

        $i3 = virtualinvoke r4.<android.hardware.camera2.params.Face: int getId()>();

        r17[i30] = $i3;

        i33 = 0 + 1;

        $i4 = i30 * 6;

        $i5 = $i4 + 0;

        $r10 = virtualinvoke r4.<android.hardware.camera2.params.Face: android.graphics.Point getLeftEyePosition()>();

        $i6 = $r10.<android.graphics.Point: int x>;

        r18[$i5] = $i6;

        i34 = i33 + 1;

        $i7 = i30 * 6;

        $i8 = $i7 + i33;

        $r11 = virtualinvoke r4.<android.hardware.camera2.params.Face: android.graphics.Point getLeftEyePosition()>();

        $i9 = $r11.<android.graphics.Point: int y>;

        r18[$i8] = $i9;

        i35 = i34 + 1;

        $i10 = i30 * 6;

        $i11 = $i10 + i34;

        $r12 = virtualinvoke r4.<android.hardware.camera2.params.Face: android.graphics.Point getRightEyePosition()>();

        $i12 = $r12.<android.graphics.Point: int x>;

        r18[$i11] = $i12;

        i36 = i35 + 1;

        $i13 = i30 * 6;

        $i14 = $i13 + i35;

        $r13 = virtualinvoke r4.<android.hardware.camera2.params.Face: android.graphics.Point getRightEyePosition()>();

        $i15 = $r13.<android.graphics.Point: int y>;

        r18[$i14] = $i15;

        i37 = i36 + 1;

        $i16 = i30 * 6;

        $i17 = $i16 + i36;

        $r14 = virtualinvoke r4.<android.hardware.camera2.params.Face: android.graphics.Point getMouthPosition()>();

        $i18 = $r14.<android.graphics.Point: int x>;

        r18[$i17] = $i18;

        $i19 = i30 * 6;

        $i20 = $i19 + i37;

        $r15 = virtualinvoke r4.<android.hardware.camera2.params.Face: android.graphics.Point getMouthPosition()>();

        $i21 = $r15.<android.graphics.Point: int y>;

        r18[$i20] = $i21;

     label09:
        i30 = i30 + 1;

     label10:
        i32 = i32 + 1;

        goto label07;

     label11:
        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_RECTANGLES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r5, r2);

        $r6 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_IDS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r6, r17);

        $r7 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_LANDMARKS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r7, r18);

        $r8 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_SCORES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r8, r3);

        return 1;
    }

    private boolean setGpsLocation(android.location.Location)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.location.Location r1;
        double d0, d1, d2;
        java.lang.String r2, $r3;
        long l0, $l1;
        android.hardware.camera2.CaptureRequest$Key $r4, $r7, $r8;
        java.lang.Long $r5;
        double[] $r6;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.location.Location;

        if r1 != null goto label1;

        return 0;

     label1:
        d0 = virtualinvoke r1.<android.location.Location: double getLatitude()>();

        d1 = virtualinvoke r1.<android.location.Location: double getLongitude()>();

        d2 = virtualinvoke r1.<android.location.Location: double getAltitude()>();

        $r3 = virtualinvoke r1.<android.location.Location: java.lang.String getProvider()>();

        r2 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: java.lang.String translateLocationProviderToProcess(java.lang.String)>($r3);

        $l1 = virtualinvoke r1.<android.location.Location: long getTime()>();

        l0 = $l1 / 1000L;

        $r4 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_TIMESTAMP>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r4, $r5);

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_COORDINATES>;

        $r6 = newarray (double)[3];

        $r6[0] = d0;

        $r6[1] = d1;

        $r6[2] = d2;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r6);

        if r2 != null goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraMetadataJV", "setGpsLocation - No process method, Location is not from a GPS or NETWORKprovider");

        goto label3;

     label2:
        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_PROCESSING_METHOD>;

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, r2);

     label3:
        return 1;
    }

    private boolean setTonemapCurve(android.hardware.camera2.params.TonemapCurve)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.TonemapCurve r1;
        float[][] r2;
        float[] $r3, $r5, $r7, $r9, $r10;
        android.hardware.camera2.CaptureRequest$Key $r4, $r6, $r8;
        int $i0, $i1, i2;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.params.TonemapCurve;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = newarray (float[])[3];

        i2 = 0;

     label2:
        if i2 > 2 goto label3;

        $i0 = virtualinvoke r1.<android.hardware.camera2.params.TonemapCurve: int getPointCount(int)>(i2);

        $i1 = $i0 * 2;

        $r9 = newarray (float)[$i1];

        r2[i2] = $r9;

        $r10 = r2[i2];

        virtualinvoke r1.<android.hardware.camera2.params.TonemapCurve: void copyColorCurve(int,float[],int)>(i2, $r10, 0);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r4 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_RED>;

        $r3 = r2[0];

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r4, $r3);

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_GREEN>;

        $r5 = r2[1];

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r6, $r5);

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE_BLUE>;

        $r7 = r2[2];

        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r7);

        return 1;
    }

    public static void setupGlobalVendorTagDescriptor() throws android.os.ServiceSpecificException
    {
        int i0;
        android.os.ServiceSpecificException $r0;

        i0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeSetupGlobalVendorTagDescriptor()>();

        if i0 != 0 goto label1;

        return;

     label1:
        $r0 = new android.os.ServiceSpecificException;

        specialinvoke $r0.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(i0, "Failure to set up global vendor tags");

        throw $r0;
    }

    private static java.lang.String translateLocationProviderToProcess(java.lang.String)
    {
        java.lang.String r0;
        int i0;
        boolean $z0, $z1;
        byte b1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        b1 = -1;

        i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        if i0 == 102570 goto label4;

        if i0 == 1843485230 goto label3;

     label2:
        goto label5;

     label3:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("network");

        if $z1 == 0 goto label2;

        b1 = 1;

        goto label5;

     label4:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("gps");

        if $z0 == 0 goto label2;

        b1 = 0;

     label5:
        if b1 == 0 goto label7;

        if b1 == 1 goto label6;

        return null;

     label6:
        return "CELLID";

     label7:
        return "GPS";
    }

    private static java.lang.String translateProcessToLocationProvider(java.lang.String)
    {
        java.lang.String r0;
        int i0;
        boolean $z0, $z1;
        byte b1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        b1 = -1;

        i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        if i0 == 70794 goto label4;

        if i0 == 1984215549 goto label3;

     label2:
        goto label5;

     label3:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CELLID");

        if $z1 == 0 goto label2;

        b1 = 1;

        goto label5;

     label4:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("GPS");

        if $z0 == 0 goto label2;

        b1 = 0;

     label5:
        if b1 == 0 goto label7;

        if b1 == 1 goto label6;

        return null;

     label6:
        return "network";

     label7:
        return "gps";
    }

    public int describeContents()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        return 0;
    }

    public void dumpToLog()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        long $l0;
        java.lang.Throwable $r2;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

     label1:
        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void nativeDump(long)>($l0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraMetadataJV", "Dump logging failed", $r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        java.lang.Throwable $r2;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CameraCharacteristics$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CameraCharacteristics$Key;

        $r2 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r3 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.impl.CameraMetadataNative$Key)>($r2);

        return $r3;
    }

    public java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Key;

        $r2 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r3 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.impl.CameraMetadataNative$Key)>($r2);

        return $r3;
    }

    public java.lang.Object get(android.hardware.camera2.CaptureResult$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureResult$Key r1;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureResult$Key;

        $r2 = virtualinvoke r1.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $r3 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.impl.CameraMetadataNative$Key)>($r2);

        return $r3;
    }

    public java.lang.Object get(android.hardware.camera2.impl.CameraMetadataNative$Key)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.impl.CameraMetadataNative$Key r1;
        android.hardware.camera2.impl.GetCommand r2;
        java.util.HashMap $r4;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative$Key;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "key must not be null");

        $r4 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sGetCommandMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.hardware.camera2.impl.GetCommand) $r5;

        if r2 == null goto label1;

        $r7 = interfaceinvoke r2.<android.hardware.camera2.impl.GetCommand: java.lang.Object getValue(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.impl.CameraMetadataNative$Key)>(r0, r1);

        return $r7;

     label1:
        $r6 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.impl.CameraMetadataNative$Key)>(r1);

        return $r6;
    }

    public java.util.ArrayList getAllVendorKeys(java.lang.Class)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        java.lang.Class r1;
        long $l0;
        java.util.ArrayList $r2;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: java.lang.Class;

        if r1 == null goto label1;

        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $r2 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: java.util.ArrayList nativeGetAllVendorKeys(long,java.lang.Class)>($l0, r1);

        return $r2;

     label1:
        throw null;
    }

    public int getEntryCount()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        long $l0;
        int $i1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $i1 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeGetEntryCount(long)>($l0);

        return $i1;
    }

    public long getMetadataPtr()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        long $l0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        return $l0;
    }

    public java.util.ArrayList getRecommendedStreamConfigurations()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.params.RecommendedStreamConfiguration[] r1, r2;
        boolean[] r6;
        android.hardware.camera2.params.ReprocessFormatsMap r10;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r11;
        boolean z0, $z3, $z4, $z5, $z6, $z7;
        android.hardware.camera2.CameraCharacteristics$Key $r13, $r15, $r24, $r26;
        java.lang.Object $r14, $r16, $r25, $r27, $r52, $r54, $r56, $r58, $r60, $r62;
        java.util.ArrayList $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r53, $r55, $r57, $r59, $r61, $r63, r67, r70;
        android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData $r28, $r29;
        android.hardware.camera2.params.StreamConfiguration[] $r30, $r31, $r32, $r36, $r40, $r43, $r47, $r50, $r51, $r74;
        int $i0, $i1, i4;
        android.hardware.camera2.params.StreamConfigurationMap $r33, $r37, $r44, r66, r72, $r73;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r34, $r35, $r38, $r39, $r41, $r42, $r45, $r46, $r48, $r49, $r75, $r76;
        java.lang.Throwable $r64, $r65;
        android.hardware.camera2.params.RecommendedStreamConfigurationMap $r77;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $r13 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_RECOMMENDED_STREAM_CONFIGURATIONS>;

        $r14 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r13);

        r1 = (android.hardware.camera2.params.RecommendedStreamConfiguration[]) $r14;

        $r15 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_AVAILABLE_RECOMMENDED_DEPTH_STREAM_CONFIGURATIONS>;

        $r16 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r15);

        r2 = (android.hardware.camera2.params.RecommendedStreamConfiguration[]) $r16;

        if r1 != null goto label01;

        if r2 != null goto label01;

        return null;

     label01:
        r66 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: android.hardware.camera2.params.StreamConfigurationMap getStreamConfigurationMap()>();

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r67 = $r19;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r6 = newarray (boolean)[32];

        if r1 == null goto label05;

     label02:
        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void parseRecommendedConfigurations(android.hardware.camera2.params.RecommendedStreamConfiguration[],android.hardware.camera2.params.StreamConfigurationMap,boolean,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,boolean[])>(r1, r66, 0, $r18, $r19, $r20, r6);

     label03:
        goto label05;

     label04:
        $r64 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraMetadataJV", "Failed parsing the recommended stream configurations!");

        return null;

     label05:
        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        if r2 == null goto label09;

     label06:
        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void parseRecommendedConfigurations(android.hardware.camera2.params.RecommendedStreamConfiguration[],android.hardware.camera2.params.StreamConfigurationMap,boolean,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,boolean[])>(r2, r66, 1, $r21, $r22, $r23, null);

     label07:
        goto label09;

     label08:
        $r65 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraMetadataJV", "Failed parsing the recommended depth stream configurations!");

        return null;

     label09:
        $r24 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_RECOMMENDED_INPUT_OUTPUT_FORMATS_MAP>;

        $r25 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r24);

        r10 = (android.hardware.camera2.params.ReprocessFormatsMap) $r25;

        $r26 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS>;

        $r27 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object getBase(android.hardware.camera2.CameraCharacteristics$Key)>($r26);

        r11 = (android.hardware.camera2.params.HighSpeedVideoConfiguration[]) $r27;

        z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean isBurstSupported()>();

        virtualinvoke $r17.<java.util.ArrayList: void ensureCapacity(int)>(32);

        i4 = 0;

     label10:
        if i4 >= 32 goto label21;

        $r28 = new android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData;

        specialinvoke $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: void <init>(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.impl.CameraMetadataNative$1)>(r0, null);

        if r1 == null goto label11;

        $r58 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r59 = (java.util.ArrayList) $r58;

        $r60 = virtualinvoke r67.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r61 = (java.util.ArrayList) $r60;

        $r62 = virtualinvoke $r20.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r63 = (java.util.ArrayList) $r62;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void initializeStreamConfigurationData(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData)>($r59, $r61, $r63, $r28);

        goto label11;

     label11:
        r70 = r67;

        $r29 = new android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData;

        specialinvoke $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: void <init>(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.impl.CameraMetadataNative$1)>(r0, null);

        if r2 == null goto label12;

        $r52 = virtualinvoke $r21.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r53 = (java.util.ArrayList) $r52;

        $r54 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r55 = (java.util.ArrayList) $r54;

        $r56 = virtualinvoke $r23.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r57 = (java.util.ArrayList) $r56;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void initializeStreamConfigurationData(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData)>($r53, $r55, $r57, $r29);

        goto label12;

     label12:
        $r30 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        if $r30 == null goto label13;

        $r51 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $i1 = lengthof $r51;

        if $i1 != 0 goto label14;

     label13:
        $r31 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        if $r31 == null goto label19;

        $r32 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $i0 = lengthof $r32;

        if $i0 != 0 goto label14;

        goto label19;

     label14:
        if i4 == 0 goto label17;

        if i4 == 1 goto label16;

        if i4 == 2 goto label17;

        if i4 == 4 goto label15;

        if i4 == 5 goto label17;

        if i4 == 6 goto label17;

        $r44 = new android.hardware.camera2.params.StreamConfigurationMap;

        $r50 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $r49 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray>;

        $r48 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray>;

        $r47 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $r46 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray>;

        $r45 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray>;

        $z5 = r6[i4];

        specialinvoke $r44.<android.hardware.camera2.params.StreamConfigurationMap: void <init>(android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.HighSpeedVideoConfiguration[],android.hardware.camera2.params.ReprocessFormatsMap,boolean,boolean)>($r50, $r49, $r48, $r47, $r46, $r45, null, null, null, null, null, null, null, null, z0, $z5);

        r72 = $r44;

        goto label18;

     label15:
        $r37 = new android.hardware.camera2.params.StreamConfigurationMap;

        $r43 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $r42 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray>;

        $r41 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray>;

        $r40 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $r39 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray>;

        $r38 = $r29.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray>;

        $z4 = r6[i4];

        specialinvoke $r37.<android.hardware.camera2.params.StreamConfigurationMap: void <init>(android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.HighSpeedVideoConfiguration[],android.hardware.camera2.params.ReprocessFormatsMap,boolean,boolean)>($r43, $r42, $r41, $r40, $r39, $r38, null, null, null, null, null, null, null, r10, z0, $z4);

        r72 = $r37;

        goto label18;

     label16:
        $r33 = new android.hardware.camera2.params.StreamConfigurationMap;

        $r36 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $r35 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray>;

        $r34 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray>;

        $z3 = r6[i4];

        specialinvoke $r33.<android.hardware.camera2.params.StreamConfigurationMap: void <init>(android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.HighSpeedVideoConfiguration[],android.hardware.camera2.params.ReprocessFormatsMap,boolean,boolean)>($r36, $r35, $r34, null, null, null, null, null, null, null, null, null, r11, null, z0, $z3);

        r72 = $r33;

        goto label18;

     label17:
        $r73 = new android.hardware.camera2.params.StreamConfigurationMap;

        $r74 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $r75 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray>;

        $r76 = $r28.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray>;

        $z6 = r6[i4];

        specialinvoke $r73.<android.hardware.camera2.params.StreamConfigurationMap: void <init>(android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.HighSpeedVideoConfiguration[],android.hardware.camera2.params.ReprocessFormatsMap,boolean,boolean)>($r74, $r75, $r76, null, null, null, null, null, null, null, null, null, null, null, z0, $z6);

        r72 = $r73;

     label18:
        $r77 = new android.hardware.camera2.params.RecommendedStreamConfigurationMap;

        $z7 = r6[i4];

        specialinvoke $r77.<android.hardware.camera2.params.RecommendedStreamConfigurationMap: void <init>(android.hardware.camera2.params.StreamConfigurationMap,int,boolean)>(r72, i4, $z7);

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r77);

        goto label20;

     label19:
        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

     label20:
        i4 = i4 + 1;

        r67 = r70;

        goto label10;

     label21:
        return $r17;

        catch java.lang.IllegalArgumentException from label02 to label03 with label04;
        catch java.lang.IllegalArgumentException from label06 to label07 with label08;
    }

    public void initializeStreamConfigurationData(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        java.util.ArrayList r1, r2, r3;
        android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData r4;
        int $i0, $i1, $i2;
        android.hardware.camera2.params.StreamConfiguration[] $r5, $r6, $r8;
        java.lang.Object[] $r7, $r13, $r17;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r18;
        boolean $z0, $z1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.util.ArrayList;

        r3 := @parameter2: java.util.ArrayList;

        r4 := @parameter3: android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData;

        if r4 == null goto label6;

        if r1 != null goto label1;

        goto label6;

     label1:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r5 = newarray (android.hardware.camera2.params.StreamConfiguration)[$i0];

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray> = $r5;

        $r6 = r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray>;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (android.hardware.camera2.params.StreamConfiguration[]) $r7;

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfiguration[] streamConfigurationArray> = $r8;

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r15 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[$i2];

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray> = $r15;

        $r16 = r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray>;

        $r17 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r17;

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray> = $r18;

        goto label3;

     label2:
        $r9 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] minDurationArray> = $r9;

     label3:
        if r3 == null goto label4;

        $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $i1 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r11 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[$i1];

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray> = $r11;

        $r12 = r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray>;

        $r13 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r13;

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray> = $r14;

        goto label5;

     label4:
        $r10 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r4.<android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData: android.hardware.camera2.params.StreamConfigurationDuration[] stallDurationArray> = $r10;

     label5:
        return;

     label6:
        return;
    }

    public boolean isEmpty()
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $z0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: boolean nativeIsEmpty(long)>($l0);

        return $z0;
    }

    public void readFromParcel(android.os.Parcel)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.os.Parcel r1;
        long $l0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.os.Parcel;

        $l0 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void nativeReadFromParcel(android.os.Parcel,long)>(r1, $l0);

        return;
    }

    public byte[] readValues(int)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int i0;
        long $l1;
        byte[] $r1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        i0 := @parameter0: int;

        $l1 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $r1 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: byte[] nativeReadValues(int,long)>(i0, $l1);

        return $r1;
    }

    public void set(android.hardware.camera2.CameraCharacteristics$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CameraCharacteristics$Key r1;
        java.lang.Object r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CameraCharacteristics$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>($r3, r2);

        return;
    }

    public void set(android.hardware.camera2.CaptureRequest$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        java.lang.Object r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>($r3, r2);

        return;
    }

    public void set(android.hardware.camera2.CaptureResult$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureResult$Key r1;
        java.lang.Object r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.CaptureResult$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>($r3, r2);

        return;
    }

    public void set(android.hardware.camera2.impl.CameraMetadataNative$Key, java.lang.Object)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.impl.CameraMetadataNative$Key r1;
        java.lang.Object r2, $r5;
        android.hardware.camera2.impl.SetCommand r3;
        java.util.HashMap $r4;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative$Key;

        r2 := @parameter1: java.lang.Object;

        $r4 = <android.hardware.camera2.impl.CameraMetadataNative: java.util.HashMap sSetCommandMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.hardware.camera2.impl.SetCommand) $r5;

        if r3 == null goto label1;

        interfaceinvoke r3.<android.hardware.camera2.impl.SetCommand: void setValue(android.hardware.camera2.impl.CameraMetadataNative,java.lang.Object)>(r0, r2);

        return;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>(r1, r2);

        return;
    }

    public void setCameraId(int)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int i0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        i0 := @parameter0: int;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: int mCameraId> = i0;

        return;
    }

    public void setDisplaySize(android.util.Size)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.util.Size r1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.util.Size;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: android.util.Size mDisplaySize> = r1;

        return;
    }

    public void setHasMandatoryConcurrentStreams(boolean)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        boolean z0;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        z0 := @parameter0: boolean;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean mHasMandatoryConcurrentStreams> = z0;

        return;
    }

    public void swap(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0, r1;
        long $l0, $l1;
        int $i2;
        boolean $z0;
        android.util.Size $r2;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $l1 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        $l0 = r1.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void nativeSwap(long,long)>($l1, $l0);

        $i2 = r1.<android.hardware.camera2.impl.CameraMetadataNative: int mCameraId>;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: int mCameraId> = $i2;

        $z0 = r1.<android.hardware.camera2.impl.CameraMetadataNative: boolean mHasMandatoryConcurrentStreams>;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: boolean mHasMandatoryConcurrentStreams> = $z0;

        $r2 = r1.<android.hardware.camera2.impl.CameraMetadataNative: android.util.Size mDisplaySize>;

        r0.<android.hardware.camera2.impl.CameraMetadataNative: android.util.Size mDisplaySize> = $r2;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.os.Parcel r1;
        int i0;
        long $l1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $l1 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void nativeWriteToParcel(android.os.Parcel,long)>(r1, $l1);

        return;
    }

    public void writeValues(int, byte[])
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int i0;
        byte[] r1;
        long $l1;

        r0 := @this: android.hardware.camera2.impl.CameraMetadataNative;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $l1 = r0.<android.hardware.camera2.impl.CameraMetadataNative: long mMetadataPtr>;

        staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: void nativeWriteValues(int,byte[],long)>(i0, r1, $l1);

        return;
    }
}
