public class android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks extends android.hardware.camera2.ICameraDeviceCallbacks$Stub
{
    final android.hardware.camera2.impl.CameraOfflineSessionImpl this$0;

    public void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        android.hardware.camera2.impl.CameraOfflineSessionImpl r1;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        r1 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.ICameraDeviceCallbacks$Stub: void <init>()>();

        return;
    }

    private void onCaptureErrorLocked(int, android.hardware.camera2.impl.CaptureResultExtras)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        int i0, i1, i2, $i4, $i5, $i6, $i8;
        android.hardware.camera2.CaptureRequest r1;
        long l3, l10, l11;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r2, $r8, $r10, $r11, $r13, $r23, $r24;
        android.util.SparseArray $r3, $r14, $r25;
        java.lang.Object $r4, $r15, $r17, $r26;
        android.hardware.camera2.CaptureFailure $r5;
        android.hardware.camera2.impl.CaptureCallback $r6, $r18;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$7 $r7;
        android.hardware.camera2.impl.FrameNumberTracker $r9;
        android.hardware.camera2.ICameraOfflineSession $r12;
        java.util.List $r16;
        boolean $z0, $z1, z2, $z3;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$6 $r19;
        java.lang.Object[] $r20, $r27;
        java.lang.Integer $r21, $r28;
        java.lang.String $r22, $r29, r33;
        java.lang.Throwable $r30, $r31;
        android.hardware.camera2.impl.CaptureResultExtras r32;
        android.hardware.camera2.impl.CaptureCallbackHolder r34;
        android.hardware.camera2.params.OutputConfiguration r35;
        java.util.Iterator r36;
        android.view.Surface r38;
        java.util.concurrent.Executor r39, r43;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        i0 := @parameter0: int;

        r32 := @parameter1: android.hardware.camera2.impl.CaptureResultExtras;

        i1 = virtualinvoke r32.<android.hardware.camera2.impl.CaptureResultExtras: int getRequestId()>();

        i2 = virtualinvoke r32.<android.hardware.camera2.impl.CaptureResultExtras: int getSubsequenceId()>();

        l10 = virtualinvoke r32.<android.hardware.camera2.impl.CaptureResultExtras: long getFrameNumber()>();

        r33 = virtualinvoke r32.<android.hardware.camera2.impl.CaptureResultExtras: java.lang.String getErrorPhysicalCameraId()>();

        $r2 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r3 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray access$500(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r2);

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r34 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r4;

        z2 = 0;

        if r34 != null goto label01;

        $r27 = newarray (java.lang.Object)[1];

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r27[0] = $r28;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Receive capture error on unknown request ID %d", $r27);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", $r29);

        return;

     label01:
        r1 = virtualinvoke r34.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.CaptureRequest getRequest(int)>(i2);

        if i0 != 5 goto label12;

        $r11 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r12 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession access$300(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r11);

        if $r12 != null goto label02;

        $r23 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $z1 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: boolean access$000(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r23);

        if $z1 != 0 goto label02;

        $r24 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r25 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray access$1000(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r24);

        $i8 = virtualinvoke r32.<android.hardware.camera2.impl.CaptureResultExtras: int getErrorStreamId()>();

        $r26 = virtualinvoke $r25.<android.util.SparseArray: java.lang.Object get(int)>($i8);

        r35 = (android.hardware.camera2.params.OutputConfiguration) $r26;

        goto label03;

     label02:
        $r13 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r14 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray access$1100(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r13);

        $i5 = virtualinvoke r32.<android.hardware.camera2.impl.CaptureResultExtras: int getErrorStreamId()>();

        $r15 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object get(int)>($i5);

        r35 = (android.hardware.camera2.params.OutputConfiguration) $r15;

     label03:
        if r35 != null goto label04;

        $r20 = newarray (java.lang.Object)[1];

        $i6 = virtualinvoke r32.<android.hardware.camera2.impl.CaptureResultExtras: int getErrorStreamId()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r20[0] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stream %d has been removed. Skipping buffer lost callback", $r20);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", $r22);

        return;

     label04:
        $r16 = virtualinvoke r35.<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>();

        r36 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r17 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r38 = (android.view.Surface) $r17;

        $z0 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: boolean containsTarget(android.view.Surface)>(r38);

        if $z0 != 0 goto label06;

        goto label05;

     label06:
        $r18 = virtualinvoke r34.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback getCallback()>();

        r39 = virtualinvoke $r18.<android.hardware.camera2.impl.CaptureCallback: java.util.concurrent.Executor getExecutor()>();

        $r19 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$6;

        specialinvoke $r19.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$6: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.CaptureRequest,android.view.Surface,long)>(r0, r34, r1, r38, l10);

        if r39 == null goto label10;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        interfaceinvoke r39.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r19);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label10;

     label09:
        $r30 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r30;

     label10:
        goto label05;

     label11:
        goto label17;

     label12:
        if i0 != 4 goto label13;

        z2 = 1;

     label13:
        $r5 = new android.hardware.camera2.CaptureFailure;

        specialinvoke $r5.<android.hardware.camera2.CaptureFailure: void <init>(android.hardware.camera2.CaptureRequest,int,boolean,int,long,java.lang.String)>(r1, 0, z2, i1, l10, r33);

        $r6 = virtualinvoke r34.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback getCallback()>();

        r43 = virtualinvoke $r6.<android.hardware.camera2.impl.CaptureCallback: java.util.concurrent.Executor getExecutor()>();

        $r7 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$7;

        specialinvoke $r7.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$7: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>(r0, r34, r1, $r5);

        $r8 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r9 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker access$800(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r8);

        $i4 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: int getRequestType()>();

        virtualinvoke $r9.<android.hardware.camera2.impl.FrameNumberTracker: void updateTracker(long,boolean,int)>(l10, 1, $i4);

        $r10 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: void access$900(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r10);

        if r43 == null goto label17;

        l11 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        interfaceinvoke r43.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        goto label17;

     label16:
        $r31 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        throw $r31;

     label17:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        return r0;
    }

    public void onCaptureStarted(android.hardware.camera2.impl.CaptureResultExtras, long)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        long l0, l2, l3, l4, l5, l6;
        int i1;
        android.hardware.camera2.impl.CaptureCallbackHolder r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$3 r3;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r4, $r5, $r6, $r10;
        android.util.SparseArray $r7;
        java.lang.Object $r8, r16, r18;
        android.hardware.camera2.impl.CaptureCallback $r9;
        boolean $z0;
        java.lang.Throwable $r11, $r12, $r13, $r14, r19, r21;
        android.hardware.camera2.impl.CaptureResultExtras r15;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        r15 := @parameter0: android.hardware.camera2.impl.CaptureResultExtras;

        l0 := @parameter1: long;

        i1 = virtualinvoke r15.<android.hardware.camera2.impl.CaptureResultExtras: int getRequestId()>();

        l2 = virtualinvoke r15.<android.hardware.camera2.impl.CaptureResultExtras: long getFrameNumber()>();

        l5 = virtualinvoke r15.<android.hardware.camera2.impl.CaptureResultExtras: long getLastCompletedRegularFrameNumber()>();

        l3 = virtualinvoke r15.<android.hardware.camera2.impl.CaptureResultExtras: long getLastCompletedReprocessFrameNumber()>();

        l4 = virtualinvoke r15.<android.hardware.camera2.impl.CaptureResultExtras: long getLastCompletedZslFrameNumber()>();

        $r4 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        r16 = $r4.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r16;

     label01:
        $r5 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: void access$400(android.hardware.camera2.impl.CameraOfflineSessionImpl,long,long,long)>($r5, l5, l3, l4);

        $r6 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r7 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray access$500(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r6);

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r8;

     label02:
        if r1 != null goto label05;

     label03:
        exitmonitor r16;

     label04:
        return;

     label05:
        $r9 = virtualinvoke r1.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback getCallback()>();

        r2 = virtualinvoke $r9.<android.hardware.camera2.impl.CaptureCallback: java.util.concurrent.Executor getExecutor()>();

        $r10 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $z0 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: boolean access$000(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r10);

        if $z0 != 0 goto label21;

     label06:
        if r2 != null goto label07;

        goto label21;

     label07:
        l6 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        r3 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$3;

     label09:
        specialinvoke r3.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$3: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.impl.CaptureResultExtras,long,long)>(r0, r1, r15, l0, l2);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r3);

     label10:
        r18 = r16;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l6);

     label12:
        r18 = r16;

     label13:
        exitmonitor r16;

     label14:
        return;

     label15:
        $r11 := @caughtexception;

        r19 = $r11;

        goto label17;

     label16:
        $r12 := @caughtexception;

        r19 = $r12;

     label17:
        r18 = r16;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l6);

     label19:
        r18 = r16;

     label20:
        throw r19;

     label21:
        r18 = r16;

     label22:
        exitmonitor r16;

     label23:
        return;

     label24:
        $r13 := @caughtexception;

        r21 = $r13;

     label25:
        r18 = r16;

     label26:
        exitmonitor r16;

     label27:
        throw r21;

     label28:
        $r14 := @caughtexception;

        r21 = $r14;

        r16 = r18;

        goto label25;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    public void onDeviceError(int, android.hardware.camera2.impl.CaptureResultExtras)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        int i0;
        java.lang.Object r1;
        long l1;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r2, $r3;
        java.util.concurrent.Executor $r4;
        java.lang.Throwable $r5, $r6;
        android.hardware.camera2.impl.CaptureResultExtras r7;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$1 r8;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        i0 := @parameter0: int;

        r7 := @parameter1: android.hardware.camera2.impl.CaptureResultExtras;

        $r2 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        r1 = $r2.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

        if i0 == 3 goto label08;

        if i0 == 4 goto label08;

        if i0 == 5 goto label08;

     label01:
        r8 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$1;

        specialinvoke r8.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$1: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks)>(r0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r4 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.Executor access$200(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r3);

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r8);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label04:
        goto label09;

     label05:
        $r6 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        throw $r6;

     label08:
        specialinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: void onCaptureErrorLocked(int,android.hardware.camera2.impl.CaptureResultExtras)>(i0, r7);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void onDeviceIdle()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        java.lang.Object r1;
        long l0;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r2, $r3, $r5, $r6;
        android.hardware.camera2.ICameraOfflineSession $r4;
        java.util.concurrent.Executor $r7;
        java.lang.Throwable $r8, $r9;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$2 r10;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        $r2 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        r1 = $r2.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r4 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession access$300(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r3);

        if $r4 != null goto label03;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", "Ignoring idle state notifications during offline switches");

        exitmonitor r1;

     label02:
        return;

     label03:
        $r5 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: void access$400(android.hardware.camera2.impl.CameraOfflineSessionImpl,long,long,long)>($r5, 9223372036854775807L, 9223372036854775807L, 9223372036854775807L);

        r10 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$2;

        specialinvoke r10.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$2: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks)>(r0);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r6 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r7 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.Executor access$200(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r6);

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r10);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        throw $r9;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void onPrepared(int)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected stream ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is prepared");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", $r6);

        return;
    }

    public void onRepeatingRequestError(long, int)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        long l0;
        int i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected repeating request error received. Last frame number is ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", $r5);

        return;
    }

    public void onRequestQueueEmpty()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", "onRequestQueueEmpty");

        return;
    }

    public void onResultReceived(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.impl.CaptureResultExtras, android.hardware.camera2.impl.PhysicalCaptureResultInfo[]) throws android.os.RemoteException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks r0;
        long l0, l7, l9;
        java.lang.Object r1, $r13, $r17, $r24, $r27, r46, r51;
        android.hardware.camera2.impl.CaptureCallbackHolder r2;
        android.hardware.camera2.CaptureRequest r3;
        int i1, i2, $i3, $i4, $i5, i6, i8;
        java.util.concurrent.Executor r4;
        java.util.List r5;
        android.util.Range r6;
        android.hardware.camera2.TotalCaptureResult r7;
        android.hardware.camera2.impl.CameraOfflineSessionImpl $r8, $r9, $r15, $r18, $r19, $r21, $r29, $r31, $r33, $r35;
        android.hardware.camera2.CameraCharacteristics$Key $r10, $r12;
        android.hardware.camera2.CameraCharacteristics $r11;
        android.util.Size $r14;
        android.util.SparseArray $r16;
        android.hardware.camera2.impl.CaptureCallback $r20;
        android.hardware.camera2.impl.FrameNumberTracker $r22, $r30, $r34, $r36;
        android.hardware.camera2.CaptureResult$Key $r23;
        java.lang.Long $r25;
        android.hardware.camera2.CaptureRequest$Key $r26;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$5 $r28;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$4 $r32;
        java.lang.Throwable $r37, $r38, $r39, $r40, $r41, r45;
        android.hardware.camera2.impl.CameraMetadataNative r42, r47;
        android.hardware.camera2.impl.CaptureResultExtras r43;
        android.hardware.camera2.impl.PhysicalCaptureResultInfo[] r44;
        boolean z0, z1, z2;
        android.hardware.camera2.CaptureResult r48, r50;
        java.lang.Runnable r49;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        r42 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r43 := @parameter1: android.hardware.camera2.impl.CaptureResultExtras;

        r44 := @parameter2: android.hardware.camera2.impl.PhysicalCaptureResultInfo[];

        i6 = virtualinvoke r43.<android.hardware.camera2.impl.CaptureResultExtras: int getRequestId()>();

        l0 = virtualinvoke r43.<android.hardware.camera2.impl.CaptureResultExtras: long getFrameNumber()>();

        $r8 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        r1 = $r8.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_SHADING_MAP_SIZE>;

        $r9 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r11 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.CameraCharacteristics access$600(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r9);

        $r12 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_SHADING_MAP_SIZE>;

        $r13 = virtualinvoke $r11.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r12);

        $r14 = (android.util.Size) $r13;

        virtualinvoke r42.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r10, $r14);

        $r15 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r16 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray access$500(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r15);

        $r17 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object get(int)>(i6);

        r2 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r17;

        $i3 = virtualinvoke r43.<android.hardware.camera2.impl.CaptureResultExtras: int getSubsequenceId()>();

        r3 = virtualinvoke r2.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.CaptureRequest getRequest(int)>($i3);

     label02:
        $i4 = virtualinvoke r43.<android.hardware.camera2.impl.CaptureResultExtras: int getPartialResultCount()>();

        $r18 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $i5 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: int access$700(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r18);

        if $i4 >= $i5 goto label04;

     label03:
        z0 = 1;

        goto label05;

     label04:
        z0 = 0;

     label05:
        i1 = virtualinvoke r3.<android.hardware.camera2.CaptureRequest: int getRequestType()>();

     label06:
        if r2 != null goto label10;

     label07:
        $r35 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r36 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker access$800(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r35);

        virtualinvoke $r36.<android.hardware.camera2.impl.FrameNumberTracker: void updateTracker(long,android.hardware.camera2.CaptureResult,boolean,int)>(l0, null, z0, i1);

        exitmonitor r1;

     label08:
        return;

     label09:
        $r38 := @caughtexception;

        r45 = $r38;

        r46 = r1;

        goto label47;

     label10:
        $r19 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        z1 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: boolean access$000(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r19);

     label11:
        if z1 == 0 goto label14;

     label12:
        $r33 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r34 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker access$800(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r33);

        virtualinvoke $r34.<android.hardware.camera2.impl.FrameNumberTracker: void updateTracker(long,android.hardware.camera2.CaptureResult,boolean,int)>(l0, null, z0, i1);

        exitmonitor r1;

     label13:
        return;

     label14:
        z2 = virtualinvoke r2.<android.hardware.camera2.impl.CaptureCallbackHolder: boolean hasBatchedOutputs()>();

     label15:
        if z2 == 0 goto label18;

     label16:
        r47 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke r47.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r42);

     label17:
        goto label19;

     label18:
        r47 = null;

     label19:
        $r20 = virtualinvoke r2.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback getCallback()>();

        r4 = virtualinvoke $r20.<android.hardware.camera2.impl.CaptureCallback: java.util.concurrent.Executor getExecutor()>();

     label20:
        if z0 == 0 goto label23;

     label21:
        r48 = new android.hardware.camera2.CaptureResult;

        specialinvoke r48.<android.hardware.camera2.CaptureResult: void <init>(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CaptureResultExtras)>(r42, r3, r43);

        $r32 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$4;

        specialinvoke $r32.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$4: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.impl.CaptureResultExtras,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureResult)>(r0, r2, r47, r43, r3, r48);

        r49 = $r32;

     label22:
        r50 = r48;

        goto label28;

     label23:
        $r21 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r22 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker access$800(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r21);

        r5 = virtualinvoke $r22.<android.hardware.camera2.impl.FrameNumberTracker: java.util.List popPartialResults(long)>(l0);

        $r23 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r24 = virtualinvoke r42.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r23);

        $r25 = (java.lang.Long) $r24;

        l7 = virtualinvoke $r25.<java.lang.Long: long longValue()>();

        $r26 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        $r27 = virtualinvoke r3.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r26);

        r6 = (android.util.Range) $r27;

        i2 = virtualinvoke r43.<android.hardware.camera2.impl.CaptureResultExtras: int getSubsequenceId()>();

        r7 = new android.hardware.camera2.TotalCaptureResult;

        i8 = virtualinvoke r2.<android.hardware.camera2.impl.CaptureCallbackHolder: int getSessionId()>();

     label24:
        specialinvoke r7.<android.hardware.camera2.TotalCaptureResult: void <init>(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CaptureResultExtras,java.util.List,int,android.hardware.camera2.impl.PhysicalCaptureResultInfo[])>(r42, r3, r43, r5, i8, r44);

     label25:
        r51 = r1;

     label26:
        $r28 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$5;

        specialinvoke $r28.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks$5: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks,android.hardware.camera2.impl.CaptureCallbackHolder,android.hardware.camera2.impl.CameraMetadataNative,long,int,android.util.Range,android.hardware.camera2.impl.CaptureResultExtras,java.util.List,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>(r0, r2, r47, l7, i2, r6, r43, r5, r3, r7);

        r49 = $r28;

     label27:
        r50 = r7;

     label28:
        if r4 == null goto label38;

        r51 = r1;

     label29:
        l9 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label30:
        interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r49);

     label31:
        r51 = r1;

     label32:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

     label33:
        goto label38;

     label34:
        $r37 := @caughtexception;

        r51 = r1;

     label35:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

     label36:
        r51 = r1;

     label37:
        throw $r37;

     label38:
        r51 = r1;

     label39:
        $r29 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        $r30 = staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker access$800(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r29);

        virtualinvoke $r30.<android.hardware.camera2.impl.FrameNumberTracker: void updateTracker(long,android.hardware.camera2.CaptureResult,boolean,int)>(l0, r50, z0, i1);

     label40:
        if z0 != 0 goto label42;

        r51 = r1;

     label41:
        $r31 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: android.hardware.camera2.impl.CameraOfflineSessionImpl this$0>;

        staticinvoke <android.hardware.camera2.impl.CameraOfflineSessionImpl: void access$900(android.hardware.camera2.impl.CameraOfflineSessionImpl)>($r31);

     label42:
        r51 = r1;

     label43:
        exitmonitor r1;

     label44:
        return;

     label45:
        $r39 := @caughtexception;

        r45 = $r39;

        r46 = r1;

        goto label47;

     label46:
        $r41 := @caughtexception;

        r45 = $r41;

        r46 = r1;

     label47:
        r51 = r46;

     label48:
        exitmonitor r46;

     label49:
        throw r45;

     label50:
        $r40 := @caughtexception;

        r45 = $r40;

        r46 = r51;

        goto label47;

        catch java.lang.Throwable from label01 to label02 with label46;
        catch java.lang.Throwable from label02 to label03 with label46;
        catch java.lang.Throwable from label05 to label06 with label46;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label46;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label14 to label15 with label46;
        catch java.lang.Throwable from label16 to label17 with label09;
        catch java.lang.Throwable from label19 to label20 with label46;
        catch java.lang.Throwable from label21 to label22 with label09;
        catch java.lang.Throwable from label23 to label24 with label46;
        catch java.lang.Throwable from label24 to label25 with label45;
        catch java.lang.Throwable from label26 to label27 with label50;
        catch java.lang.Throwable from label29 to label30 with label50;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label32 to label33 with label50;
        catch java.lang.Throwable from label35 to label36 with label50;
        catch java.lang.Throwable from label37 to label38 with label50;
        catch java.lang.Throwable from label39 to label40 with label50;
        catch java.lang.Throwable from label41 to label42 with label50;
        catch java.lang.Throwable from label43 to label44 with label50;
        catch java.lang.Throwable from label48 to label49 with label50;
    }
}
