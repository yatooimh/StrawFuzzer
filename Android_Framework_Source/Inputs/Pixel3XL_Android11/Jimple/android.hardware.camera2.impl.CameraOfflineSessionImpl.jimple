public class android.hardware.camera2.impl.CameraOfflineSessionImpl extends android.hardware.camera2.CameraOfflineSession implements android.os.IBinder$DeathRecipient
{
    private static final long NANO_PER_SECOND;
    private static final int REQUEST_ID_NONE;
    private static final java.lang.String TAG;
    private final boolean DEBUG;
    private final android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks mCallbacks;
    private final java.lang.String mCameraId;
    private android.util.SparseArray mCaptureCallbackMap;
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final java.util.concurrent.atomic.AtomicBoolean mClosing;
    private android.util.SparseArray mConfiguredOutputs;
    private android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker;
    final java.lang.Object mInterfaceLock;
    private final android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback mOfflineCallback;
    private final java.util.concurrent.Executor mOfflineExecutor;
    private java.util.AbstractMap$SimpleEntry mOfflineInput;
    private android.util.SparseArray mOfflineOutputs;
    private java.util.List mOfflineRequestLastFrameNumbersList;
    private android.hardware.camera2.ICameraOfflineSession mRemoteSession;
    private final int mTotalPartialCount;

    public void <init>(java.lang.String, android.hardware.camera2.CameraCharacteristics, java.util.concurrent.Executor, android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback, android.util.SparseArray, java.util.AbstractMap$SimpleEntry, android.util.SparseArray, android.hardware.camera2.impl.FrameNumberTracker, android.util.SparseArray, java.util.List)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.CameraCharacteristics r1;
        java.util.concurrent.Executor r2, $r25;
        android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback r3, $r27;
        android.util.SparseArray r4, r6, r8, $r13, $r14, $r19;
        java.util.AbstractMap$SimpleEntry r5, $r11;
        android.hardware.camera2.impl.FrameNumberTracker r7, $r18;
        java.util.List r9, $r23;
        java.util.concurrent.atomic.AtomicBoolean $r10;
        java.lang.Integer $r12, r29;
        java.lang.Object $r15, $r22, $r24, $r26;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks $r16;
        java.util.ArrayList $r17;
        java.lang.IllegalArgumentException $r20;
        android.hardware.camera2.CameraCharacteristics$Key $r21;
        int $i0;
        java.lang.String r28;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r28 := @parameter0: java.lang.String;

        r1 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback;

        r4 := @parameter4: android.util.SparseArray;

        r5 := @parameter5: java.util.AbstractMap$SimpleEntry;

        r6 := @parameter6: android.util.SparseArray;

        r7 := @parameter7: android.hardware.camera2.impl.FrameNumberTracker;

        r8 := @parameter8: android.util.SparseArray;

        r9 := @parameter9: java.util.List;

        specialinvoke r0.<android.hardware.camera2.CameraOfflineSession: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: boolean DEBUG> = 0;

        $r10 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.atomic.AtomicBoolean mClosing> = $r10;

        $r11 = new java.util.AbstractMap$SimpleEntry;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        specialinvoke $r11.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r12, null);

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.AbstractMap$SimpleEntry mOfflineInput> = $r11;

        $r13 = new android.util.SparseArray;

        specialinvoke $r13.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mOfflineOutputs> = $r13;

        $r14 = new android.util.SparseArray;

        specialinvoke $r14.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mConfiguredOutputs> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock> = $r15;

        $r16 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks;

        specialinvoke $r16.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks mCallbacks> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.List mOfflineRequestLastFrameNumbersList> = $r17;

        $r18 = new android.hardware.camera2.impl.FrameNumberTracker;

        specialinvoke $r18.<android.hardware.camera2.impl.FrameNumberTracker: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker> = $r18;

        $r19 = new android.util.SparseArray;

        specialinvoke $r19.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap> = $r19;

        if r28 == null goto label3;

        if r1 == null goto label3;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.String mCameraId> = r28;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics> = r1;

        $r21 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>;

        $r22 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r21);

        r29 = (java.lang.Integer) $r22;

        if r29 != null goto label1;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: int mTotalPartialCount> = 1;

        goto label2;

     label1:
        $i0 = virtualinvoke r29.<java.lang.Integer: int intValue()>();

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: int mTotalPartialCount> = $i0;

     label2:
        $r23 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.List mOfflineRequestLastFrameNumbersList>;

        interfaceinvoke $r23.<java.util.List: boolean addAll(java.util.Collection)>(r9);

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker> = r7;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap> = r8;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mConfiguredOutputs> = r6;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mOfflineOutputs> = r4;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.AbstractMap$SimpleEntry mOfflineInput> = r5;

        $r24 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "offline executor must not be null");

        $r25 = (java.util.concurrent.Executor) $r24;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.Executor mOfflineExecutor> = $r25;

        $r26 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "offline callback must not be null");

        $r27 = (android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback) $r26;

        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback mOfflineCallback> = $r27;

        return;

     label3:
        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument given");

        throw $r20;
    }

    static boolean access$000(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: boolean isClosed()>();

        return $z0;
    }

    static android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback access$100(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback mOfflineCallback>;

        return $r1;
    }

    static android.util.SparseArray access$1000(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mConfiguredOutputs>;

        return $r1;
    }

    static android.util.SparseArray access$1100(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mOfflineOutputs>;

        return $r1;
    }

    static java.util.concurrent.Executor access$200(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.Executor mOfflineExecutor>;

        return $r1;
    }

    static android.hardware.camera2.ICameraOfflineSession access$300(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.ICameraOfflineSession $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession mRemoteSession>;

        return $r1;
    }

    static void access$400(android.hardware.camera2.impl.CameraOfflineSessionImpl, long, long, long)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        long l0, l1, l2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        specialinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: void removeCompletedCallbackHolderLocked(long,long,long)>(l0, l1, l2);

        return;
    }

    static android.util.SparseArray access$500(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        return $r1;
    }

    static android.hardware.camera2.CameraCharacteristics access$600(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.CameraCharacteristics $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        return $r1;
    }

    static int access$700(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        int $i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $i0 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: int mTotalPartialCount>;

        return $i0;
    }

    static android.hardware.camera2.impl.FrameNumberTracker access$800(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.impl.FrameNumberTracker $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        return $r1;
    }

    static void access$900(android.hardware.camera2.impl.CameraOfflineSessionImpl)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        specialinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: void checkAndFireSequenceComplete()>();

        return;
    }

    private void checkAndFireSequenceComplete()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        long l0, l1, l2, l5, l6, l11, l12;
        java.util.Iterator r1;
        android.hardware.camera2.impl.RequestLastFrameNumbersHolder r2;
        int i3, i4, $i7;
        java.lang.Object r3, $r8, $r17;
        android.hardware.camera2.impl.FrameNumberTracker $r4, $r5, $r6;
        java.util.List $r7;
        boolean $z1, z2;
        android.util.SparseArray $r9, $r11, $r15, $r16;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$1 $r10;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks $r12;
        android.hardware.camera2.impl.CaptureCallback $r13, $r14;
        byte $b8, $b9, $b10;
        java.lang.Throwable $r18, $r19, $r20, $r21, r23;
        android.hardware.camera2.impl.CaptureCallbackHolder r22;
        java.util.concurrent.Executor r24;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r25;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r4 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        l0 = virtualinvoke $r4.<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedFrameNumber()>();

        $r5 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        l1 = virtualinvoke $r5.<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedReprocessFrameNumber()>();

        $r6 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.FrameNumberTracker mFrameNumberTracker>;

        l2 = virtualinvoke $r6.<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedZslStillFrameNumber()>();

        $r7 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.List mOfflineRequestLastFrameNumbersList>;

        r1 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label29;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.camera2.impl.RequestLastFrameNumbersHolder) $r8;

        z2 = 0;

        i3 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: int getRequestId()>();

        r3 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r3;

     label02:
        $r9 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        i4 = virtualinvoke $r9.<android.util.SparseArray: int indexOfKey(int)>(i3);

     label03:
        if i4 < 0 goto label07;

     label04:
        $r16 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r17 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r22 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r17;

     label05:
        goto label08;

     label06:
        $r21 := @caughtexception;

        r23 = $r21;

        goto label26;

     label07:
        r22 = null;

     label08:
        if r22 == null goto label16;

     label09:
        l5 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastRegularFrameNumber()>();

     label10:
        l11 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastReprocessFrameNumber()>();

     label11:
        l6 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastZslStillFrameNumber()>();

        $r13 = virtualinvoke r22.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback getCallback()>();

        r24 = virtualinvoke $r13.<android.hardware.camera2.impl.CaptureCallback: java.util.concurrent.Executor getExecutor()>();

        $r14 = virtualinvoke r22.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback getCallback()>();

        r25 = virtualinvoke $r14.<android.hardware.camera2.impl.CaptureCallback: android.hardware.camera2.CameraCaptureSession$CaptureCallback getSessionCallback()>();

     label12:
        $b8 = l5 cmp l0;

        if $b8 > 0 goto label15;

        $b9 = l11 cmp l1;

        if $b9 > 0 goto label15;

        $b10 = l6 cmp l2;

        if $b10 > 0 goto label15;

        z2 = 1;

     label13:
        $r15 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        virtualinvoke $r15.<android.util.SparseArray: void removeAt(int)>(i4);

     label14:
        goto label15;

     label15:
        goto label17;

     label16:
        r24 = null;

        r25 = null;

        z2 = 0;

     label17:
        exitmonitor r3;

     label18:
        if r22 == null goto label19;

        if z2 == 0 goto label20;

     label19:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label20:
        if z2 == 0 goto label24;

        if r25 == null goto label24;

        if r24 == null goto label24;

        $r10 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$1;

        specialinvoke $r10.<android.hardware.camera2.impl.CameraOfflineSessionImpl$1: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl,android.hardware.camera2.CameraCaptureSession$CaptureCallback,int,android.hardware.camera2.impl.RequestLastFrameNumbersHolder)>(r0, r25, i3, r2);

        l12 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label21:
        interfaceinvoke r24.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        $r11 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        $i7 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        if $i7 != 0 goto label24;

        $r12 = virtualinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks getCallbacks()>();

        virtualinvoke $r12.<android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks: void onDeviceIdle()>();

        goto label24;

     label23:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        throw $r19;

     label24:
        goto label01;

     label25:
        $r18 := @caughtexception;

        r23 = $r18;

     label26:
        exitmonitor r3;

     label27:
        throw r23;

     label28:
        $r20 := @caughtexception;

        r23 = $r20;

        goto label26;

     label29:
        return;

        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    private void disconnect()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;
        android.hardware.camera2.ICameraOfflineSession $r3, $r4, $r6;
        android.os.IBinder $r5;
        java.util.concurrent.Executor $r7;
        java.lang.Throwable $r8, $r10;
        android.os.RemoteException $r9;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$4 r12;
        java.lang.IllegalStateException r14;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.atomic.AtomicBoolean mClosing>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r3 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession mRemoteSession>;

        if $r3 == null goto label16;

        $r4 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession mRemoteSession>;

        $r5 = interfaceinvoke $r4.<android.hardware.camera2.ICameraOfflineSession: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label04:
        $r6 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession mRemoteSession>;

        interfaceinvoke $r6.<android.hardware.camera2.ICameraOfflineSession: void disconnect()>();

     label05:
        goto label08;

     label06:
        $r9 := @caughtexception;

     label07:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraOfflineSessionImpl", "Exception while disconnecting from offline session: ", $r9);

     label08:
        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession mRemoteSession> = null;

        r12 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$4;

        specialinvoke r12.<android.hardware.camera2.impl.CameraOfflineSessionImpl$4: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl)>(r0);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r7 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.Executor mOfflineExecutor>;

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r12);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r10 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label15:
        throw $r10;

     label16:
        r14 = new java.lang.IllegalStateException;

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Offline session is not yet ready");

        throw r14;

     label17:
        $r8 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private boolean isClosed()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.atomic.AtomicBoolean mClosing>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    private void removeCompletedCallbackHolderLocked(long, long, long)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        long l0, l1, l2, l5, l6, l7;
        java.util.Iterator r1;
        android.hardware.camera2.impl.RequestLastFrameNumbersHolder r2;
        int i3, i4;
        java.util.List $r3;
        java.lang.Object $r4, $r12;
        android.util.SparseArray $r5, $r10, $r11;
        byte $b8, $b9, $b10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        android.hardware.camera2.impl.CaptureCallbackHolder r13;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r3 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.List mOfflineRequestLastFrameNumbersList>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.camera2.impl.RequestLastFrameNumbersHolder) $r4;

        i3 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: int getRequestId()>();

        $r5 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        i4 = virtualinvoke $r5.<android.util.SparseArray: int indexOfKey(int)>(i3);

        if i4 < 0 goto label2;

        $r11 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r13 = (android.hardware.camera2.impl.CaptureCallbackHolder) $r12;

        goto label3;

     label2:
        r13 = null;

     label3:
        if r13 == null goto label5;

        l5 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastRegularFrameNumber()>();

        l6 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastReprocessFrameNumber()>();

        l7 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastZslStillFrameNumber()>();

        $b8 = l5 cmp l0;

        if $b8 > 0 goto label5;

        $b9 = l6 cmp l1;

        if $b9 > 0 goto label5;

        $b10 = l7 cmp l2;

        if $b10 > 0 goto label5;

        $z0 = virtualinvoke r2.<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: boolean isSequenceCompleted()>();

        if $z0 == 0 goto label4;

        $r10 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.util.SparseArray mCaptureCallbackMap>;

        virtualinvoke $r10.<android.util.SparseArray: void removeAt(int)>(i4);

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label5;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sequence not yet completed for request id ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", $r9);

        goto label1;

     label5:
        goto label1;

     label6:
        return;
    }

    public void abortCaptures() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r1;
    }

    public void binderDied()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraOfflineSession on device ");

        $r4 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.String mCameraId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" died unexpectedly");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraOfflineSessionImpl", $r7);

        specialinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: void disconnect()>();

        return;
    }

    public int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public int captureBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public int captureBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public int captureSingleRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public void close()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        specialinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: void disconnect()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.Throwable $r2;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: void disconnect()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void finalizeOutputConfigurations(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.List r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: java.util.List;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r2;
    }

    public android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks getCallbacks()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks $r1;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks mCallbacks>;

        return $r1;
    }

    public android.hardware.camera2.CameraDevice getDevice()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r1;
    }

    public android.view.Surface getInputSurface()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r1;
    }

    public boolean isReprocessable()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r1;
    }

    public void notifyFailedSwitch()
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.Executor $r2;
        java.lang.Throwable $r3, $r4;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$2 r5;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

     label01:
        r5 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$2;

        specialinvoke r5.<android.hardware.camera2.impl.CameraOfflineSessionImpl$2: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl)>(r0);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.Executor mOfflineExecutor>;

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r5);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r3 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r3;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void prepare(int, android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        int i0;
        android.view.Surface r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.Surface;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r2;
    }

    public void prepare(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.view.Surface r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.view.Surface;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r2;
    }

    public void setRemoteSession(android.hardware.camera2.ICameraOfflineSession) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.Executor $r2;
        java.lang.Throwable $r3, $r4;
        android.os.RemoteException $r5;
        android.hardware.camera2.ICameraOfflineSession r6;
        android.os.IBinder r7;
        android.hardware.camera2.impl.CameraOfflineSessionImpl$3 r8;
        android.hardware.camera2.CameraAccessException r11, r12;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r6 := @parameter0: android.hardware.camera2.ICameraOfflineSession;

        r1 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.Object mInterfaceLock>;

        entermonitor r1;

        if r6 != null goto label03;

     label01:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: void notifyFailedSwitch()>();

        exitmonitor r1;

     label02:
        return;

     label03:
        r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.ICameraOfflineSession mRemoteSession> = r6;

        r7 = interfaceinvoke r6.<android.hardware.camera2.ICameraOfflineSession: android.os.IBinder asBinder()>();

     label04:
        if r7 == null goto label16;

     label05:
        interfaceinvoke r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label06:
        r8 = new android.hardware.camera2.impl.CameraOfflineSessionImpl$3;

        specialinvoke r8.<android.hardware.camera2.impl.CameraOfflineSessionImpl$3: void <init>(android.hardware.camera2.impl.CameraOfflineSessionImpl)>(r0);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $r2 = r0.<android.hardware.camera2.impl.CameraOfflineSessionImpl: java.util.concurrent.Executor mOfflineExecutor>;

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r8);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r3 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label13:
        throw $r3;

     label14:
        $r5 := @caughtexception;

     label15:
        r11 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r11.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(2, "The camera offline session has encountered a serious error");

        throw r11;

     label16:
        r12 = new android.hardware.camera2.CameraAccessException;

        specialinvoke r12.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(2, "The camera offline session has encountered a serious error");

        throw r12;

     label17:
        $r4 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch android.os.RemoteException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public int setRepeatingBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public int setRepeatingBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r1;
    }

    public boolean supportsOfflineProcessing(android.view.Surface)
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.view.Surface r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.view.Surface;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r2;
    }

    public android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection, java.util.concurrent.Executor, android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        java.util.Collection r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r4;
    }

    public void tearDown(android.view.Surface) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.view.Surface r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.view.Surface;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r2;
    }

    public void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraOfflineSessionImpl r0;
        android.hardware.camera2.params.OutputConfiguration r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.camera2.impl.CameraOfflineSessionImpl;

        r1 := @parameter0: android.hardware.camera2.params.OutputConfiguration;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported in offline mode");

        throw $r2;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.impl.CameraOfflineSessionImpl: java.lang.String TAG> = "CameraOfflineSessionImpl";

        <android.hardware.camera2.impl.CameraOfflineSessionImpl: int REQUEST_ID_NONE> = -1;

        <android.hardware.camera2.impl.CameraOfflineSessionImpl: long NANO_PER_SECOND> = 1000000000L;

        return;
    }
}
