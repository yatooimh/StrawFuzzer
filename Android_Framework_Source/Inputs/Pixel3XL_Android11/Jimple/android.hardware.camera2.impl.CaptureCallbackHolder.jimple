public class android.hardware.camera2.impl.CaptureCallbackHolder extends java.lang.Object
{
    private final android.hardware.camera2.impl.CaptureCallback mCallback;
    private final java.util.concurrent.Executor mExecutor;
    private final boolean mHasBatchedOutputs;
    private final boolean mRepeating;
    private final java.util.List mRequestList;
    private final int mSessionId;

    void <init>(android.hardware.camera2.impl.CaptureCallback, java.util.List, java.util.concurrent.Executor, boolean, int)
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        java.lang.UnsupportedOperationException $r3;
        java.util.ArrayList $r4;
        int $i0, $i1, i2, i3;
        java.lang.Object $r5;
        boolean $z1, z2, z3;
        java.util.Collection $r6;
        android.hardware.camera2.impl.CaptureCallback r7;
        android.hardware.camera2.CaptureRequest r8;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        r7 := @parameter0: android.hardware.camera2.impl.CaptureCallback;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.concurrent.Executor;

        z2 := @parameter3: boolean;

        i2 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r7 == null goto label5;

        if r2 == null goto label5;

        r0.<android.hardware.camera2.impl.CaptureCallbackHolder: boolean mRepeating> = z2;

        r0.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.concurrent.Executor mExecutor> = r2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.List mRequestList> = $r4;

        r0.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback mCallback> = r7;

        r0.<android.hardware.camera2.impl.CaptureCallbackHolder: int mSessionId> = i2;

        i3 = 0;

     label1:
        z3 = 1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r8 = (android.hardware.camera2.CaptureRequest) $r5;

        $z1 = virtualinvoke r8.<android.hardware.camera2.CaptureRequest: boolean isPartOfCRequestList()>();

        if $z1 != 0 goto label2;

        z3 = 0;

        goto label4;

     label2:
        if i3 != 0 goto label3;

        $r6 = virtualinvoke r8.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        $i1 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        if $i1 == 2 goto label3;

        z3 = 0;

        goto label4;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        r0.<android.hardware.camera2.impl.CaptureCallbackHolder: boolean mHasBatchedOutputs> = z3;

        return;

     label5:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Must have a valid handler and a valid callback");

        throw $r3;
    }

    public android.hardware.camera2.impl.CaptureCallback getCallback()
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        android.hardware.camera2.impl.CaptureCallback $r1;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        $r1 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback mCallback>;

        return $r1;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        $r1 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.concurrent.Executor mExecutor>;

        return $r1;
    }

    public android.hardware.camera2.CaptureRequest getRequest()
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        android.hardware.camera2.CaptureRequest $r1;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        $r1 = virtualinvoke r0.<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.CaptureRequest getRequest(int)>(0);

        return $r1;
    }

    public android.hardware.camera2.CaptureRequest getRequest(int)
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        int i0, $i1, $i2;
        java.util.List $r1, $r5, $r12;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.Object[] $r3, $r9;
        java.lang.Integer $r4, $r6, $r10;
        java.lang.String $r7, $r11;
        java.lang.Object $r13;
        android.hardware.camera2.CaptureRequest $r14;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.List mRequestList>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label2;

        if i0 < 0 goto label1;

        $r12 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.List mRequestList>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i0);

        $r14 = (android.hardware.camera2.CaptureRequest) $r13;

        return $r14;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Requested subsequenceId %d is negative", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.List mRequestList>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Requested subsequenceId %d is larger than request list size %d.", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public int getRequestCount()
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        $r1 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.List mRequestList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int getSessionId()
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        $i0 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: int mSessionId>;

        return $i0;
    }

    public boolean hasBatchedOutputs()
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        $z0 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: boolean mHasBatchedOutputs>;

        return $z0;
    }

    public boolean isRepeating()
    {
        android.hardware.camera2.impl.CaptureCallbackHolder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CaptureCallbackHolder;

        $z0 = r0.<android.hardware.camera2.impl.CaptureCallbackHolder: boolean mRepeating>;

        return $z0;
    }
}
