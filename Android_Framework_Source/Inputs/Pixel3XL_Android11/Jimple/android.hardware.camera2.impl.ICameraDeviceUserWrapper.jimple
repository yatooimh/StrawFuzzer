public class android.hardware.camera2.impl.ICameraDeviceUserWrapper extends java.lang.Object
{
    private final android.hardware.camera2.ICameraDeviceUser mRemoteDevice;

    public void <init>(android.hardware.camera2.ICameraDeviceUser)
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        android.hardware.camera2.ICameraDeviceUser r1;
        java.lang.NullPointerException $r2;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        r1 := @parameter0: android.hardware.camera2.ICameraDeviceUser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice> = r1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Remote device may not be null");

        throw $r2;
    }

    public void beginConfigure() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void beginConfigure()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long cancelRequest(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        long l1;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        l1 = interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: long cancelRequest(int)>(i0);

     label2:
        return l1;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.camera2.impl.CameraMetadataNative createDefaultRequest(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.impl.CameraMetadataNative r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        r4 = interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.impl.CameraMetadataNative createDefaultRequest(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int createInputStream(int, int, int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0, i1, i2, i3;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        i3 = interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: int createInputStream(int,int,int)>(i2, i0, i1);

     label2:
        return i3;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int createStream(android.hardware.camera2.params.OutputConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.params.OutputConfiguration r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        r4 := @parameter0: android.hardware.camera2.params.OutputConfiguration;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        i0 = interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: int createStream(android.hardware.camera2.params.OutputConfiguration)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void deleteStream(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void deleteStream(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void disconnect()
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void disconnect()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int[] endConfigure(int, android.hardware.camera2.impl.CameraMetadataNative) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.impl.CameraMetadataNative r4;
        int[] r5;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

        r4 := @parameter1: android.hardware.camera2.impl.CameraMetadataNative;

     label1:
        r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

     label2:
        if r4 != null goto label5;

     label3:
        r4 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke r4.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

     label4:
        goto label5;

     label5:
        r5 = interfaceinvoke r1.<android.hardware.camera2.ICameraDeviceUser: int[] endConfigure(int,android.hardware.camera2.impl.CameraMetadataNative)>(i0, r4);

     label6:
        return r5;

     label7:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void finalizeOutputConfigurations(int, android.hardware.camera2.params.OutputConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.params.OutputConfiguration r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

        r4 := @parameter1: android.hardware.camera2.params.OutputConfiguration;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: void finalizeOutputConfigurations(int,android.hardware.camera2.params.OutputConfiguration)>(i0, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long flush() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        long l0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        l0 = interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: long flush()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.camera2.impl.CameraMetadataNative getCameraInfo() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.impl.CameraMetadataNative r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        r4 = interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.impl.CameraMetadataNative getCameraInfo()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getGlobalAudioRestriction() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        i0 = interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: int getGlobalAudioRestriction()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.view.Surface getInputSurface() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.view.Surface r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        r4 = interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: android.view.Surface getInputSurface()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        boolean z0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        android.os.ServiceSpecificException $r2;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r3, $r6;
        java.lang.IllegalArgumentException $r4;
        java.lang.Throwable $r5;
        android.hardware.camera2.params.SessionConfiguration r7;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        r7 := @parameter0: android.hardware.camera2.params.SessionConfiguration;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        z0 = interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)>(r7);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r5);

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r5);

        throw $r6;

     label4:
        $r2 := @caughtexception;

        $i0 = $r2.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 == 10 goto label6;

        $i1 = $r2.<android.os.ServiceSpecificException: int errorCode>;

        if $i1 != 3 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid session configuration");

        throw $r4;

     label5:
        throw $r2;

     label6:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Session configuration query not supported");

        throw $r3;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void prepare(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void prepare(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void prepare2(int, int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0, i1;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void prepare2(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setCameraAudioRestriction(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void setCameraAudioRestriction(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.camera2.utils.SubmitInfo submitRequest(android.hardware.camera2.CaptureRequest, boolean) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        boolean z0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.CaptureRequest r4;
        android.hardware.camera2.utils.SubmitInfo r5;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        r4 := @parameter0: android.hardware.camera2.CaptureRequest;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        r5 = interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.utils.SubmitInfo submitRequest(android.hardware.camera2.CaptureRequest,boolean)>(r4, z0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[], boolean) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        boolean z0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.CaptureRequest[] r4;
        android.hardware.camera2.utils.SubmitInfo r5;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        r4 := @parameter0: android.hardware.camera2.CaptureRequest[];

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        r5 = interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[],boolean)>(r4, z0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.camera2.ICameraOfflineSession switchToOffline(android.hardware.camera2.ICameraDeviceCallbacks, int[]) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int[] r1;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;
        android.hardware.camera2.ICameraDeviceCallbacks r5;
        android.hardware.camera2.ICameraOfflineSession r6;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        r5 := @parameter0: android.hardware.camera2.ICameraDeviceCallbacks;

        r1 := @parameter1: int[];

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        r6 = interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.ICameraOfflineSession switchToOffline(android.hardware.camera2.ICameraDeviceCallbacks,int[])>(r5, r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void tearDown(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void tearDown(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void unlinkToDeath(android.os.IBinder$DeathRecipient, int)
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        android.os.IBinder$DeathRecipient r1;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r2, $r4;
        android.os.IBinder $r3, $r5;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        r1 := @parameter0: android.os.IBinder$DeathRecipient;

        i0 := @parameter1: int;

        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        $r3 = interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: android.os.IBinder asBinder()>();

        if $r3 == null goto label1;

        $r4 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        $r5 = interfaceinvoke $r4.<android.hardware.camera2.ICameraDeviceUser: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, i0);

     label1:
        return;
    }

    public void updateOutputConfiguration(int, android.hardware.camera2.params.OutputConfiguration) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        int i0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.Throwable $r2;
        java.lang.UnsupportedOperationException $r3;
        android.hardware.camera2.params.OutputConfiguration r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

        i0 := @parameter0: int;

        r4 := @parameter1: android.hardware.camera2.params.OutputConfiguration;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r1.<android.hardware.camera2.ICameraDeviceUser: void updateOutputConfiguration(int,android.hardware.camera2.params.OutputConfiguration)>(i0, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r2);

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void waitUntilIdle() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.ICameraDeviceUserWrapper r0;
        android.hardware.camera2.ICameraDeviceUser $r2;
        java.lang.Throwable $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.hardware.camera2.impl.ICameraDeviceUserWrapper;

     label1:
        $r2 = r0.<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r2.<android.hardware.camera2.ICameraDeviceUser: void waitUntilIdle()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.hardware.camera2.CameraManager: void throwAsPublicException(java.lang.Throwable)>($r3);

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
