class android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper extends java.lang.Object implements java.lang.Runnable, java.lang.AutoCloseable
{
    private final android.hardware.Camera mCamera;
    private final int mCameraId;
    private volatile int mInitErrors;
    private android.os.Looper mLooper;
    private final android.os.ConditionVariable mStartDone;
    private final java.lang.Thread mThread;

    public void <init>(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r0;
        int i0;
        android.hardware.Camera $r2;
        android.os.ConditionVariable $r3;
        java.lang.Thread $r4;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <android.hardware.Camera: android.hardware.Camera openUninitialized()>();

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.hardware.Camera mCamera> = $r2;

        $r3 = new android.os.ConditionVariable;

        specialinvoke $r3.<android.os.ConditionVariable: void <init>()>();

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.os.ConditionVariable mStartDone> = $r3;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: int mCameraId> = i0;

        $r4 = new java.lang.Thread;

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r0, "LegacyCameraLooper");

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: java.lang.Thread mThread> = $r4;

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return;
    }

    public void close()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r0;
        java.lang.Thread $r1;
        java.lang.Throwable $r2;
        java.lang.AssertionError $r3;
        android.os.Looper r4;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.os.Looper mLooper>;

        if r4 != null goto label1;

        return;

     label1:
        virtualinvoke r4.<android.os.Looper: void quitSafely()>();

     label2:
        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: java.lang.Thread mThread>;

        virtualinvoke $r1.<java.lang.Thread: void join()>();

     label3:
        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.os.Looper mLooper> = null;

        return;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r3;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public android.hardware.Camera getCamera()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r0;
        android.hardware.Camera $r1;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.hardware.Camera mCamera>;

        return $r1;
    }

    public void run()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r0;
        android.os.Looper $r1;
        int $i0, $i1;
        android.hardware.Camera $r2;
        android.os.ConditionVariable $r3;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        staticinvoke <android.os.Looper: void prepare()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.os.Looper mLooper> = $r1;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.hardware.Camera mCamera>;

        $i0 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: int mCameraId>;

        $i1 = virtualinvoke $r2.<android.hardware.Camera: int cameraInitUnspecified(int)>($i0);

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: int mInitErrors> = $i1;

        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.os.ConditionVariable mStartDone>;

        virtualinvoke $r3.<android.os.ConditionVariable: void open()>();

        staticinvoke <android.os.Looper: void loop()>();

        return;
    }

    public int waitForOpen(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r0;
        int i0, $i3;
        long $l1;
        android.os.ConditionVariable $r2;
        boolean $z0;
        android.hardware.Camera $r3;
        android.os.ServiceSpecificException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        i0 := @parameter0: int;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.os.ConditionVariable mStartDone>;

        $l1 = (long) i0;

        $z0 = virtualinvoke $r2.<android.os.ConditionVariable: boolean block(long)>($l1);

        if $z0 == 0 goto label1;

        $i3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: int mInitErrors>;

        return $i3;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "waitForOpen - Camera failed to open after timeout of 5000 ms");

     label2:
        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.hardware.Camera mCamera>;

        virtualinvoke $r3.<android.hardware.Camera: void release()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraDeviceUserShim", "connectBinderShim - Failed to release camera after timeout ", $r5);

     label5:
        $r4 = new android.os.ServiceSpecificException;

        specialinvoke $r4.<android.os.ServiceSpecificException: void <init>(int)>(10);

        throw $r4;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }
}
