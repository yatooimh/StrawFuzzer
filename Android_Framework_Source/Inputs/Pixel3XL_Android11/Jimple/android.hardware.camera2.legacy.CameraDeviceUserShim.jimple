public class android.hardware.camera2.legacy.CameraDeviceUserShim extends java.lang.Object implements android.hardware.camera2.ICameraDeviceUser
{
    private static final boolean DEBUG;
    private static final int OPEN_CAMERA_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private final android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks;
    private final android.hardware.camera2.CameraCharacteristics mCameraCharacteristics;
    private final android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit;
    private final java.lang.Object mConfigureLock;
    private boolean mConfiguring;
    private final android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice;
    private int mSurfaceIdCounter;
    private final android.util.SparseArray mSurfaces;

    protected void <init>(int, android.hardware.camera2.legacy.LegacyCameraDevice, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper, android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.legacy.LegacyCameraDevice r1;
        android.hardware.camera2.CameraCharacteristics r2;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r3;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread r4;
        java.lang.Object $r5;
        android.util.SparseArray $r6;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.legacy.LegacyCameraDevice;

        r2 := @parameter2: android.hardware.camera2.CameraCharacteristics;

        r3 := @parameter3: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        r4 := @parameter4: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock> = $r5;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice> = r1;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 0;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces> = $r6;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.CameraCharacteristics mCameraCharacteristics> = r2;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit> = r3;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks> = r4;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: int mSurfaceIdCounter> = 0;

        return;
    }

    public static android.hardware.camera2.legacy.CameraDeviceUserShim connectBinderShim(android.hardware.camera2.ICameraDeviceCallbacks, int, android.util.Size)
    {
        int i0, i1;
        android.hardware.Camera r1;
        android.hardware.Camera$Parameters r3;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper $r4;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread $r5;
        android.hardware.Camera$CameraInfo $r6;
        android.hardware.camera2.legacy.CameraDeviceUserShim $r7;
        android.hardware.camera2.legacy.LegacyCameraDevice $r8;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r12, $r15;
        android.os.ServiceSpecificException $r14;
        android.hardware.camera2.ICameraDeviceCallbacks r16;
        android.util.Size r17;
        android.hardware.camera2.CameraCharacteristics r19;

        r16 := @parameter0: android.hardware.camera2.ICameraDeviceCallbacks;

        i0 := @parameter1: int;

        r17 := @parameter2: android.util.Size;

        $r4 = new android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        specialinvoke $r4.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: void <init>(int)>(i0);

        $r5 = new android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread;

        specialinvoke $r5.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread: void <init>(android.hardware.camera2.ICameraDeviceCallbacks)>(r16);

        i1 = virtualinvoke $r4.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: int waitForOpen(int)>(5000);

        r1 = virtualinvoke $r4.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.hardware.Camera getCamera()>();

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: void throwOnServiceError(int)>(i1);

        virtualinvoke r1.<android.hardware.Camera: boolean disableShutterSound()>();

        $r6 = new android.hardware.Camera$CameraInfo;

        specialinvoke $r6.<android.hardware.Camera$CameraInfo: void <init>()>();

        staticinvoke <android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>(i0, $r6);

     label1:
        r3 = virtualinvoke r1.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

     label2:
        r19 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.CameraCharacteristics createCharacteristics(android.hardware.Camera$Parameters,android.hardware.Camera$CameraInfo,int,android.util.Size)>(r3, $r6, i0, r17);

        $r7 = new android.hardware.camera2.legacy.CameraDeviceUserShim;

        $r8 = new android.hardware.camera2.legacy.LegacyCameraDevice;

        specialinvoke $r8.<android.hardware.camera2.legacy.LegacyCameraDevice: void <init>(int,android.hardware.Camera,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.ICameraDeviceCallbacks)>(i0, r1, r19, $r5);

        specialinvoke $r7.<android.hardware.camera2.legacy.CameraDeviceUserShim: void <init>(int,android.hardware.camera2.legacy.LegacyCameraDevice,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper,android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread)>(i0, $r8, r19, $r4, $r5);

        return $r7;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get initial parameters: ");

        $r12 = virtualinvoke $r9.<java.lang.RuntimeException: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new android.os.ServiceSpecificException;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, $r15);

        throw $r14;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private static int translateErrorsFromCamera1(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = <android.system.OsConstants: int EACCES>;

        $i2 = neg $i1;

        if i0 != $i2 goto label1;

        return 1;

     label1:
        return i0;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        return null;
    }

    public void beginConfigure()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.lang.Object r1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2;
        boolean $z0, $z1;
        android.os.ServiceSpecificException $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label7;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z1 != 0 goto label3;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot begin configure, configuration change already in progress.");

        r5 = new android.os.ServiceSpecificException;

        specialinvoke r5.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot begin configure, configuration change already in progress.");

        throw r5;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot begin configure, device has been closed.");

        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot begin configure, device has been closed.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public long cancelRequest(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        java.lang.Object r1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2, $r4;
        boolean $z0, $z1;
        android.os.ServiceSpecificException $r3, r6;
        long $l3;
        java.lang.Throwable $r5;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label7;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z1 != 0 goto label3;

        exitmonitor r1;

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $l3 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: long cancelRequest(int)>(i0);

        return $l3;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot cancel request, configuration change in progress.");

        r6 = new android.os.ServiceSpecificException;

        specialinvoke r6.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot cancel request, configuration change in progress.");

        throw r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot cancel request, device has been closed.");

        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot cancel request, device has been closed.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.hardware.camera2.impl.CameraMetadataNative createDefaultRequest(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.legacy.LegacyCameraDevice $r1;
        boolean $z0;
        android.os.ServiceSpecificException $r2, $r5;
        android.hardware.camera2.CameraCharacteristics $r3;
        java.lang.Throwable $r4;
        android.hardware.camera2.impl.CameraMetadataNative r6;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r1.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label4;

     label1:
        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.CameraCharacteristics mCameraCharacteristics>;

        r6 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.impl.CameraMetadataNative createRequestTemplate(android.hardware.camera2.CameraCharacteristics,int)>($r3, i0);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "createDefaultRequest - invalid templateId specified");

        $r5 = new android.os.ServiceSpecificException;

        specialinvoke $r5.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(3, "createDefaultRequest - invalid templateId specified");

        throw $r5;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot create default request, device has been closed.");

        $r2 = new android.os.ServiceSpecificException;

        specialinvoke $r2.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot create default request, device has been closed.");

        throw $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public int createInputStream(int, int, int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0, i1, i2;
        android.os.ServiceSpecificException $r1;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Creating input stream is not supported on legacy devices");

        $r1 = new android.os.ServiceSpecificException;

        specialinvoke $r1.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Creating input stream is not supported on legacy devices");

        throw $r1;
    }

    public int createStream(android.hardware.camera2.params.OutputConfiguration)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.lang.Object r1;
        int i0, $i3, $i5;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2;
        boolean $z0, $z1;
        android.os.ServiceSpecificException $r3, r8, r9;
        android.util.SparseArray $r4;
        android.view.Surface $r5;
        java.lang.Throwable $r6;
        android.hardware.camera2.params.OutputConfiguration r7;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r7 := @parameter0: android.hardware.camera2.params.OutputConfiguration;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label8;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z1 == 0 goto label4;

        $i3 = virtualinvoke r7.<android.hardware.camera2.params.OutputConfiguration: int getRotation()>();

        if $i3 != 0 goto label3;

        $i5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: int mSurfaceIdCounter>;

        i0 = $i5 + 1;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: int mSurfaceIdCounter> = i0;

        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        $r5 = virtualinvoke r7.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r5);

        exitmonitor r1;

     label2:
        return i0;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot create stream, stream rotation is not supported.");

        r8 = new android.os.ServiceSpecificException;

        specialinvoke r8.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(3, "Cannot create stream, stream rotation is not supported.");

        throw r8;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot create stream, beginConfigure hasn\'t been called yet.");

        r9 = new android.os.ServiceSpecificException;

        specialinvoke r9.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot create stream, beginConfigure hasn\'t been called yet.");

        throw r9;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

     label8:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot create stream, device has been closed.");

        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot create stream, device has been closed.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void deleteStream(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0, i1;
        java.lang.Object r1;
        java.lang.String r2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r3;
        boolean $z0, $z1;
        android.os.ServiceSpecificException $r4, r12, r13;
        android.util.SparseArray $r5, $r9;
        java.lang.Throwable $r10;
        java.lang.StringBuilder r11;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label10;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label01:
        $z1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z1 == 0 goto label06;

        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        i1 = virtualinvoke $r5.<android.util.SparseArray: int indexOfKey(int)>(i0);

     label02:
        if i1 < 0 goto label05;

     label03:
        $r9 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        virtualinvoke $r9.<android.util.SparseArray: void removeAt(int)>(i1);

        exitmonitor r1;

     label04:
        return;

     label05:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete stream, stream id ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist.");

        r2 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", r2);

        r12 = new android.os.ServiceSpecificException;

        specialinvoke r12.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(3, r2);

        throw r12;

     label06:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot delete stream, no configuration change in progress.");

        r13 = new android.os.ServiceSpecificException;

        specialinvoke r13.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot delete stream, no configuration change in progress.");

        throw r13;

     label07:
        $r10 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r10;

     label10:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot delete stream, device has been closed.");

        $r4 = new android.os.ServiceSpecificException;

        specialinvoke $r4.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot delete stream, device has been closed.");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void disconnect()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2, $r3;
        boolean $z0;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper $r4, $r7;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread $r5, $r8;
        java.lang.Throwable $r6;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot disconnect, device has already been closed.");

     label1:
        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: void close()>();

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit>;

        virtualinvoke $r4.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: void close()>();

        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks>;

        virtualinvoke $r5.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread: void close()>();

        return;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit>;

        virtualinvoke $r7.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: void close()>();

        $r8 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks>;

        virtualinvoke $r8.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int[] endConfigure(int, android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.legacy.LegacyCameraDevice $r1, $r5;
        boolean $z0, $z1;
        android.os.ServiceSpecificException $r2, $r3, r14;
        android.util.SparseArray $r4, $r7, r12;
        int[] $r6;
        java.lang.Throwable $r8, $r9, $r10;
        android.hardware.camera2.impl.CameraMetadataNative r11;
        java.lang.Object r13, r16, r18;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        r11 := @parameter1: android.hardware.camera2.impl.CameraMetadataNative;

        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r1.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label15;

        if i0 != 0 goto label09;

        r12 = null;

        r13 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r13;

     label01:
        $z1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z1 == 0 goto label05;

     label02:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        if $r4 == null goto label03;

        $r7 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        r12 = virtualinvoke $r7.<android.util.SparseArray: android.util.SparseArray clone()>();

     label03:
        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 0;

        exitmonitor r13;

     label04:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        virtualinvoke $r5.<android.hardware.camera2.legacy.LegacyCameraDevice: int configureOutputs(android.util.SparseArray)>(r12);

        $r6 = newarray (int)[0];

        return $r6;

     label05:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot end configure, no configuration change in progress.");

        r14 = new android.os.ServiceSpecificException;

        specialinvoke r14.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot end configure, no configuration change in progress.");

        throw r14;

     label06:
        $r9 := @caughtexception;

     label07:
        exitmonitor r13;

     label08:
        throw $r9;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "LEGACY devices do not support this operating mode");

        r16 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r16;

     label10:
        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 0;

        exitmonitor r16;

     label11:
        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(3, "LEGACY devices do not support this operating mode");

        throw $r3;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r16;

     label14:
        throw $r8;

     label15:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot end configure, device has been closed.");

        r18 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r18;

     label16:
        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 0;

        exitmonitor r18;

     label17:
        $r2 = new android.os.ServiceSpecificException;

        specialinvoke $r2.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot end configure, device has been closed.");

        throw $r2;

     label18:
        $r10 := @caughtexception;

     label19:
        exitmonitor r18;

     label20:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void finalizeOutputConfigurations(int, android.hardware.camera2.params.OutputConfiguration)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.params.OutputConfiguration r1;
        android.os.ServiceSpecificException $r2;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.params.OutputConfiguration;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Finalizing output configuration is not supported on legacy devices");

        $r2 = new android.os.ServiceSpecificException;

        specialinvoke $r2.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Finalizing output configuration is not supported on legacy devices");

        throw $r2;
    }

    public long flush()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.lang.Object r1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2, $r4;
        boolean $z0, $z1;
        android.os.ServiceSpecificException $r3, r6;
        long $l2;
        java.lang.Throwable $r5;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label7;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z1 != 0 goto label3;

        exitmonitor r1;

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $l2 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: long flush()>();

        return $l2;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot flush, configuration change in progress.");

        r6 = new android.os.ServiceSpecificException;

        specialinvoke r6.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot flush, configuration change in progress.");

        throw r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot flush, device has been closed.");

        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot flush, device has been closed.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.hardware.camera2.impl.CameraMetadataNative getCameraInfo()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "getCameraInfo unimplemented.");

        return null;
    }

    public int getGlobalAudioRestriction()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        android.hardware.camera2.legacy.LegacyCameraDevice $r1, $r3;
        boolean $z0;
        android.os.ServiceSpecificException $r2;
        int $i1;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r1.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $i1 = virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: int getAudioRestriction()>();

        return $i1;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot set camera audio restriction, device has been closed.");

        $r2 = new android.os.ServiceSpecificException;

        specialinvoke $r2.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot set camera audio restriction, device has been closed.");

        throw $r2;
    }

    public android.view.Surface getInputSurface()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        android.os.ServiceSpecificException $r1;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Getting input surface is not supported on legacy devices");

        $r1 = new android.os.ServiceSpecificException;

        specialinvoke $r1.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Getting input surface is not supported on legacy devices");

        throw $r1;
    }

    public boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.util.Iterator r1;
        java.util.List r2, r15;
        android.hardware.camera2.params.InputConfiguration $r3;
        boolean $z0, $z1, $z2, z3;
        android.util.SparseArray $r4;
        int $i0, $i1, $i3, $i6, i8, i9;
        android.hardware.camera2.legacy.LegacyCameraDevice $r5;
        java.lang.Object $r6;
        android.view.Surface $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r12;
        android.hardware.camera2.params.SessionConfiguration r13;
        android.hardware.camera2.params.OutputConfiguration r17;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r13 := @parameter0: android.hardware.camera2.params.SessionConfiguration;

        i8 = virtualinvoke r13.<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>();

        z3 = 0;

        if i8 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session type: ");

        $i6 = virtualinvoke r13.<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is different from  regular. Legacy devices support only regular session types!");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", $r12);

        return 0;

     label1:
        $r3 = virtualinvoke r13.<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>();

        if $r3 == null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Input configuration present, legacy devices do not support this feature!");

        return 0;

     label2:
        r15 = virtualinvoke r13.<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()>();

        $z0 = interfaceinvoke r15.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Empty output configuration list!");

        return 0;

     label3:
        $r4 = new android.util.SparseArray;

        $i0 = interfaceinvoke r15.<java.util.List: int size()>();

        specialinvoke $r4.<android.util.SparseArray: void <init>(int)>($i0);

        i9 = 0;

        r1 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r17 = (android.hardware.camera2.params.OutputConfiguration) $r6;

        r2 = virtualinvoke r17.<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>();

        $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label6;

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i3 <= 1 goto label5;

        goto label6;

     label5:
        $r7 = virtualinvoke r17.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i9, $r7);

        i9 = i9 + 1;

        goto label4;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Legacy devices do not support deferred or shared surfaces!");

        return 0;

     label7:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $i1 = virtualinvoke $r5.<android.hardware.camera2.legacy.LegacyCameraDevice: int configureOutputs(android.util.SparseArray,boolean)>($r4, 1);

        if $i1 != 0 goto label8;

        z3 = 1;

     label8:
        return z3;
    }

    public void prepare(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.legacy.LegacyCameraDevice $r1;
        boolean $z0;
        android.os.ServiceSpecificException $r2;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread $r3;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r1.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks>;

        virtualinvoke $r3.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread: void onPrepared(int)>(i0);

        return;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot prepare stream, device has been closed.");

        $r2 = new android.os.ServiceSpecificException;

        specialinvoke $r2.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot prepare stream, device has been closed.");

        throw $r2;
    }

    public void prepare2(int, int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0, i1;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: void prepare(int)>(i1);

        return;
    }

    public void setCameraAudioRestriction(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.legacy.LegacyCameraDevice $r1, $r3;
        boolean $z0;
        android.os.ServiceSpecificException $r2;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r1.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: void setAudioRestriction(int)>(i0);

        return;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot set camera audio restriction, device has been closed.");

        $r2 = new android.os.ServiceSpecificException;

        specialinvoke $r2.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot set camera audio restriction, device has been closed.");

        throw $r2;
    }

    public android.hardware.camera2.utils.SubmitInfo submitRequest(android.hardware.camera2.CaptureRequest, boolean)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2, $r4;
        android.os.ServiceSpecificException $r3, r8;
        android.hardware.camera2.utils.SubmitInfo $r5;
        java.lang.Throwable $r6;
        android.hardware.camera2.CaptureRequest r7;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r7 := @parameter0: android.hardware.camera2.CaptureRequest;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 != 0 goto label7;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label1:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 != 0 goto label3;

        exitmonitor r1;

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $r5 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.utils.SubmitInfo submitRequest(android.hardware.camera2.CaptureRequest,boolean)>(r7, z0);

        return $r5;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request, configuration change in progress.");

        r8 = new android.os.ServiceSpecificException;

        specialinvoke r8.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot submit request, configuration change in progress.");

        throw r8;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request, device has been closed.");

        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot submit request, device has been closed.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[], boolean)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2, $r4;
        android.os.ServiceSpecificException $r3, r8;
        android.hardware.camera2.utils.SubmitInfo $r5;
        java.lang.Throwable $r6;
        android.hardware.camera2.CaptureRequest[] r7;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r7 := @parameter0: android.hardware.camera2.CaptureRequest[];

        z0 := @parameter1: boolean;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 != 0 goto label7;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label1:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 != 0 goto label3;

        exitmonitor r1;

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $r5 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[],boolean)>(r7, z0);

        return $r5;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request, configuration change in progress.");

        r8 = new android.os.ServiceSpecificException;

        specialinvoke r8.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot submit request, configuration change in progress.");

        throw r8;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request list, device has been closed.");

        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot submit request list, device has been closed.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.hardware.camera2.ICameraOfflineSession switchToOffline(android.hardware.camera2.ICameraDeviceCallbacks, int[])
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        android.hardware.camera2.ICameraDeviceCallbacks r1;
        int[] r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r1 := @parameter0: android.hardware.camera2.ICameraDeviceCallbacks;

        r2 := @parameter1: int[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Legacy device does not support offline mode");

        throw $r3;
    }

    public void tearDown(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.legacy.LegacyCameraDevice $r1;
        boolean $z0;
        android.os.ServiceSpecificException $r2;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r1.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot tear down stream, device has been closed.");

        $r2 = new android.os.ServiceSpecificException;

        specialinvoke $r2.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot tear down stream, device has been closed.");

        throw $r2;
    }

    public void updateOutputConfiguration(int, android.hardware.camera2.params.OutputConfiguration)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.params.OutputConfiguration r1;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.params.OutputConfiguration;

        return;
    }

    public void waitUntilIdle() throws android.os.RemoteException
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.lang.Object r1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2, $r4;
        boolean $z0, $z1;
        android.os.ServiceSpecificException $r3, r6;
        java.lang.Throwable $r5;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z0 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z0 != 0 goto label7;

        r1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z1 != 0 goto label3;

        exitmonitor r1;

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: void waitUntilIdle()>();

        return;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot wait until idle, configuration change in progress.");

        r6 = new android.os.ServiceSpecificException;

        specialinvoke r6.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(10, "Cannot wait until idle, configuration change in progress.");

        throw r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot wait until idle, device has been closed.");

        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(4, "Cannot wait until idle, device has been closed.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.String TAG> = "CameraDeviceUserShim";

        <android.hardware.camera2.legacy.CameraDeviceUserShim: int OPEN_CAMERA_TIMEOUT_MS> = 5000;

        <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG> = 0;

        return;
    }
}
