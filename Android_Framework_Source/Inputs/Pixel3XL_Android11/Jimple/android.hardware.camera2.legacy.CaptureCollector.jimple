public class android.hardware.camera2.legacy.CaptureCollector extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int FLAG_RECEIVED_ALL_JPEG;
    private static final int FLAG_RECEIVED_ALL_PREVIEW;
    private static final int FLAG_RECEIVED_JPEG;
    private static final int FLAG_RECEIVED_JPEG_TS;
    private static final int FLAG_RECEIVED_PREVIEW;
    private static final int FLAG_RECEIVED_PREVIEW_TS;
    private static final int MAX_JPEGS_IN_FLIGHT;
    private static final java.lang.String TAG;
    private final java.util.TreeSet mActiveRequests;
    private final java.util.ArrayList mCompletedRequests;
    private final android.hardware.camera2.legacy.CameraDeviceState mDeviceState;
    private int mInFlight;
    private int mInFlightPreviews;
    private final java.util.concurrent.locks.Condition mIsEmpty;
    private final java.util.ArrayDeque mJpegCaptureQueue;
    private final java.util.ArrayDeque mJpegProduceQueue;
    private final java.util.concurrent.locks.ReentrantLock mLock;
    private final int mMaxInFlight;
    private final java.util.concurrent.locks.Condition mNotFull;
    private final java.util.ArrayDeque mPreviewCaptureQueue;
    private final java.util.ArrayDeque mPreviewProduceQueue;
    private final java.util.concurrent.locks.Condition mPreviewsEmpty;

    public void <init>(int, android.hardware.camera2.legacy.CameraDeviceState)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        int i0, $i1, $i2;
        android.hardware.camera2.legacy.CameraDeviceState r1;
        java.util.ArrayList $r2;
        java.util.concurrent.locks.ReentrantLock $r3, $r9, $r11, $r13;
        java.util.ArrayDeque $r4, $r5, $r6, $r7;
        java.util.TreeSet $r8;
        java.util.concurrent.locks.Condition $r10, $r12, $r14;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.legacy.CameraDeviceState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayList mCompletedRequests> = $r2;

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock> = $r3;

        r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight> = 0;

        r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlightPreviews> = 0;

        r0.<android.hardware.camera2.legacy.CaptureCollector: int mMaxInFlight> = i0;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>(int)>(1);

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegCaptureQueue> = $r4;

        $r5 = new java.util.ArrayDeque;

        specialinvoke $r5.<java.util.ArrayDeque: void <init>(int)>(1);

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegProduceQueue> = $r5;

        $r6 = new java.util.ArrayDeque;

        $i1 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mMaxInFlight>;

        specialinvoke $r6.<java.util.ArrayDeque: void <init>(int)>($i1);

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewCaptureQueue> = $r6;

        $r7 = new java.util.ArrayDeque;

        $i2 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mMaxInFlight>;

        specialinvoke $r7.<java.util.ArrayDeque: void <init>(int)>($i2);

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewProduceQueue> = $r7;

        $r8 = new java.util.TreeSet;

        specialinvoke $r8.<java.util.TreeSet: void <init>()>();

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.TreeSet mActiveRequests> = $r8;

        $r9 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mIsEmpty> = $r10;

        $r11 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mNotFull> = $r12;

        $r13 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mPreviewsEmpty> = $r14;

        r0.<android.hardware.camera2.legacy.CaptureCollector: android.hardware.camera2.legacy.CameraDeviceState mDeviceState> = r1;

        return;
    }

    static void access$000(android.hardware.camera2.legacy.CaptureCollector)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;

        r0 := @parameter0: android.hardware.camera2.legacy.CaptureCollector;

        specialinvoke r0.<android.hardware.camera2.legacy.CaptureCollector: void onPreviewCompleted()>();

        return;
    }

    static android.hardware.camera2.legacy.CameraDeviceState access$100(android.hardware.camera2.legacy.CaptureCollector)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        android.hardware.camera2.legacy.CameraDeviceState $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.CaptureCollector;

        $r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        return $r1;
    }

    static void access$200(android.hardware.camera2.legacy.CaptureCollector, android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r1;

        r0 := @parameter0: android.hardware.camera2.legacy.CaptureCollector;

        r1 := @parameter1: android.hardware.camera2.legacy.CaptureCollector$CaptureHolder;

        specialinvoke r0.<android.hardware.camera2.legacy.CaptureCollector: void onRequestCompleted(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r1);

        return;
    }

    private void onPreviewCompleted()
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        int i0, $i1;
        java.lang.IllegalStateException $r1;
        java.util.concurrent.locks.Condition $r2;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        $i1 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlightPreviews>;

        i0 = $i1 - 1;

        r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlightPreviews> = i0;

        if i0 < 0 goto label2;

        if i0 != 0 goto label1;

        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mPreviewsEmpty>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Condition: void signalAll()>();

     label1:
        return;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("More preview captures completed than requests queued.");

        throw $r1;
    }

    private void onRequestCompleted(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r1;
        int i0, $i1, $i2;
        java.lang.IllegalStateException $r3;
        java.util.ArrayList $r4;
        java.util.TreeSet $r5;
        java.util.concurrent.locks.Condition $r6, $r7;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 := @parameter0: android.hardware.camera2.legacy.CaptureCollector$CaptureHolder;

        staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: android.hardware.camera2.legacy.RequestHolder access$300(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r1);

        $i1 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight>;

        i0 = $i1 - 1;

        r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight> = i0;

        if i0 < 0 goto label2;

        $r4 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayList mCompletedRequests>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.TreeSet mActiveRequests>;

        virtualinvoke $r5.<java.util.TreeSet: boolean remove(java.lang.Object)>(r1);

        $r6 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mNotFull>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signalAll()>();

        $i2 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight>;

        if $i2 != 0 goto label1;

        $r7 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mIsEmpty>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void signalAll()>();

     label1:
        return;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("More captures completed than requests queued.");

        throw $r3;
    }

    private boolean removeRequestIfCompleted(android.hardware.camera2.legacy.RequestHolder, android.util.MutableLong)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        android.hardware.camera2.legacy.RequestHolder r1, $r7;
        android.util.MutableLong r2;
        java.util.Iterator r3;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r4;
        java.util.ArrayList $r5, $r8;
        boolean $z0, $z1;
        java.lang.Object $r6;
        long $l0;
        int i1;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        r2 := @parameter1: android.util.MutableLong;

        i1 = 0;

        $r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayList mCompletedRequests>;

        r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r6;

        $r7 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: android.hardware.camera2.legacy.RequestHolder access$300(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r4);

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $l0 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: long access$400(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r4);

        r2.<android.util.MutableLong: long value> = $l0;

        $r8 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayList mCompletedRequests>;

        virtualinvoke $r8.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void failAll()
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.TreeSet $r2;
        java.lang.Object $r3;
        java.util.ArrayDeque $r4, $r5, $r6, $r7;
        java.lang.Throwable $r8;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r9;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.TreeSet mActiveRequests>;

        $r3 = virtualinvoke $r2.<java.util.TreeSet: java.lang.Object pollFirst()>();

        r9 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r3;

     label2:
        if r9 == null goto label5;

     label3:
        virtualinvoke r9.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setPreviewFailed()>();

        virtualinvoke r9.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setJpegFailed()>();

     label4:
        goto label1;

     label5:
        $r4 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewCaptureQueue>;

        virtualinvoke $r4.<java.util.ArrayDeque: void clear()>();

        $r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewProduceQueue>;

        virtualinvoke $r5.<java.util.ArrayDeque: void clear()>();

        $r6 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegCaptureQueue>;

        virtualinvoke $r6.<java.util.ArrayDeque: void clear()>();

        $r7 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegProduceQueue>;

        virtualinvoke $r7.<java.util.ArrayDeque: void clear()>();

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void failNextJpeg()
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        java.util.concurrent.locks.ReentrantLock r1;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r2, r11;
        java.util.ArrayDeque $r3, $r5, $r7, $r8;
        java.lang.Object $r4, $r6;
        int $i0;
        java.util.TreeSet $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $r3 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegCaptureQueue>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object peek()>();

        r11 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r4;

        $r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegProduceQueue>;

        $r6 = virtualinvoke $r5.<java.util.ArrayDeque: java.lang.Object peek()>();

        r2 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r6;

     label02:
        if r11 != null goto label03;

        goto label06;

     label03:
        if r2 != null goto label04;

        goto label05;

     label04:
        $i0 = virtualinvoke r11.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: int compareTo(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r2);

        if $i0 > 0 goto label06;

     label05:
        goto label07;

     label06:
        r11 = r2;

     label07:
        if r11 == null goto label09;

     label08:
        $r7 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegCaptureQueue>;

        virtualinvoke $r7.<java.util.ArrayDeque: boolean remove(java.lang.Object)>(r11);

        $r8 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegProduceQueue>;

        virtualinvoke $r8.<java.util.ArrayDeque: boolean remove(java.lang.Object)>(r11);

        $r9 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.TreeSet mActiveRequests>;

        virtualinvoke $r9.<java.util.TreeSet: boolean remove(java.lang.Object)>(r11);

        virtualinvoke r11.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setJpegFailed()>();

     label09:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label10:
        $r10 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void failNextPreview()
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        java.util.concurrent.locks.ReentrantLock r1;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r2, r11;
        java.util.ArrayDeque $r3, $r5, $r7, $r8;
        java.lang.Object $r4, $r6;
        int $i0;
        java.util.TreeSet $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewCaptureQueue>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object peek()>();

        r2 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r4;

        $r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewProduceQueue>;

        $r6 = virtualinvoke $r5.<java.util.ArrayDeque: java.lang.Object peek()>();

        r11 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r6;

     label2:
        if r2 != null goto label3;

        goto label6;

     label3:
        if r11 != null goto label4;

        goto label5;

     label4:
        $i0 = virtualinvoke r2.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: int compareTo(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r11);

        if $i0 > 0 goto label6;

     label5:
        r11 = r2;

        goto label6;

     label6:
        if r11 == null goto label8;

     label7:
        $r7 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewCaptureQueue>;

        virtualinvoke $r7.<java.util.ArrayDeque: boolean remove(java.lang.Object)>(r11);

        $r8 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewProduceQueue>;

        virtualinvoke $r8.<java.util.ArrayDeque: boolean remove(java.lang.Object)>(r11);

        $r9 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.TreeSet mActiveRequests>;

        virtualinvoke $r9.<java.util.TreeSet: boolean remove(java.lang.Object)>(r11);

        virtualinvoke r11.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setPreviewFailed()>();

     label8:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label9:
        $r10 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public boolean hasPendingPreviewCaptures()
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        java.util.concurrent.locks.ReentrantLock r1;
        boolean z0, $z1;
        java.util.ArrayDeque $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewCaptureQueue>;

        z0 = virtualinvoke $r3.<java.util.ArrayDeque: boolean isEmpty()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.camera2.legacy.RequestHolder jpegCaptured(long)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        long l0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.ArrayDeque $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r5;
        android.hardware.camera2.legacy.RequestHolder r6;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        l0 := @parameter0: long;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegCaptureQueue>;

        $r3 = virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object poll()>();

        r5 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r3;

     label2:
        if r5 != null goto label5;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CaptureCollector", "jpegCaptured called with no jpeg request on queue!");

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label5:
        virtualinvoke r5.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setJpegTimestamp(long)>(l0);

        r6 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: android.hardware.camera2.legacy.RequestHolder access$300(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r5);

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r6;

     label7:
        $r4 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public android.util.Pair jpegProduced()
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.ArrayDeque $r2;
        java.lang.Object $r3;
        android.util.Pair $r4;
        android.hardware.camera2.legacy.RequestHolder $r5;
        long $l0;
        java.lang.Long $r6;
        java.lang.Throwable $r7;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r8;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegProduceQueue>;

        $r3 = virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object poll()>();

        r8 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r3;

     label2:
        if r8 != null goto label5;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CaptureCollector", "jpegProduced called with no jpeg request on queue!");

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label5:
        virtualinvoke r8.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setJpegProduced()>();

        $r4 = new android.util.Pair;

        $r5 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: android.hardware.camera2.legacy.RequestHolder access$300(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r8);

        $l0 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: long access$400(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r8);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $r4;

     label7:
        $r7 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public android.util.Pair previewCaptured(long)
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        long l0, $l1;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.ArrayDeque $r2;
        java.lang.Object $r3;
        android.util.Pair $r4;
        android.hardware.camera2.legacy.RequestHolder $r5;
        java.lang.Long $r6;
        java.lang.Throwable $r7;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r8;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        l0 := @parameter0: long;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewCaptureQueue>;

        $r3 = virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object poll()>();

        r8 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r3;

     label2:
        if r8 != null goto label3;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label3:
        virtualinvoke r8.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setPreviewTimestamp(long)>(l0);

        $r4 = new android.util.Pair;

        $r5 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: android.hardware.camera2.legacy.RequestHolder access$300(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r8);

        $l1 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: long access$400(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r8);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $r4;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.hardware.camera2.legacy.RequestHolder previewProduced()
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.ArrayDeque $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder r5;
        android.hardware.camera2.legacy.RequestHolder r6;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r1 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewProduceQueue>;

        $r3 = virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object poll()>();

        r5 = (android.hardware.camera2.legacy.CaptureCollector$CaptureHolder) $r3;

     label2:
        if r5 != null goto label5;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CaptureCollector", "previewProduced called with no preview request on queue!");

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label5:
        virtualinvoke r5.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void setPreviewProduced()>();

        r6 = staticinvoke <android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: android.hardware.camera2.legacy.RequestHolder access$300(android.hardware.camera2.legacy.CaptureCollector$CaptureHolder)>(r5);

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r6;

     label7:
        $r4 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean queueRequest(android.hardware.camera2.legacy.RequestHolder, android.hardware.camera2.legacy.LegacyRequest, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        java.util.concurrent.TimeUnit r1;
        long l0, l8, l9;
        int i1, $i2, $i3, $i4, $i5, i10, i11;
        android.hardware.camera2.legacy.CaptureCollector$CaptureHolder $r2;
        boolean $z0, $z1, $z2, $z8;
        java.util.TreeSet $r3;
        java.util.ArrayDeque $r4, $r5, $r7, $r8;
        byte $b6, $b7;
        java.util.concurrent.locks.Condition $r6, $r9;
        java.lang.Throwable $r10;
        android.hardware.camera2.legacy.RequestHolder r11;
        android.hardware.camera2.legacy.LegacyRequest r12;
        java.util.concurrent.locks.ReentrantLock r14;
        java.lang.IllegalStateException r15;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r11 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        r12 := @parameter1: android.hardware.camera2.legacy.LegacyRequest;

        l8 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r2 = new android.hardware.camera2.legacy.CaptureCollector$CaptureHolder;

        specialinvoke $r2.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: void <init>(android.hardware.camera2.legacy.CaptureCollector,android.hardware.camera2.legacy.RequestHolder,android.hardware.camera2.legacy.LegacyRequest)>(r0, r11, r12);

        l0 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l8);

        r14 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r14.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $z0 = $r2.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: boolean needsJpeg>;

        if $z0 != 0 goto label04;

        $z8 = $r2.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: boolean needsPreview>;

        if $z8 == 0 goto label03;

     label02:
        goto label04;

     label03:
        r15 = new java.lang.IllegalStateException;

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request must target at least one output surface!");

        throw r15;

     label04:
        l9 = l0;

     label05:
        $z1 = $r2.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: boolean needsJpeg>;

        if $z1 == 0 goto label12;

     label06:
        l9 = l0;

     label07:
        i10 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight>;

     label08:
        if i10 <= 0 goto label11;

        $b7 = l9 cmp 0L;

        if $b7 > 0 goto label09;

        virtualinvoke r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label09:
        $r9 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mIsEmpty>;

        l9 = interfaceinvoke $r9.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l9);

     label10:
        goto label07;

     label11:
        $r7 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegCaptureQueue>;

        virtualinvoke $r7.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r2);

        $r8 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mJpegProduceQueue>;

        virtualinvoke $r8.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r2);

     label12:
        $z2 = $r2.<android.hardware.camera2.legacy.CaptureCollector$CaptureHolder: boolean needsPreview>;

        if $z2 == 0 goto label18;

     label13:
        i11 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight>;

        i1 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mMaxInFlight>;

     label14:
        if i11 < i1 goto label17;

        $b6 = l9 cmp 0L;

        if $b6 > 0 goto label15;

        virtualinvoke r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label15:
        $r6 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mNotFull>;

        l9 = interfaceinvoke $r6.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l9);

     label16:
        goto label13;

     label17:
        $r4 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewCaptureQueue>;

        virtualinvoke $r4.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r2);

        $r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.ArrayDeque mPreviewProduceQueue>;

        virtualinvoke $r5.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r2);

        $i4 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlightPreviews>;

        $i5 = $i4 + 1;

        r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlightPreviews> = $i5;

     label18:
        $r3 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.TreeSet mActiveRequests>;

        virtualinvoke $r3.<java.util.TreeSet: boolean add(java.lang.Object)>($r2);

        $i2 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight>;

        $i3 = $i2 + 1;

        r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight> = $i3;

     label19:
        virtualinvoke r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label20:
        $r10 := @caughtexception;

        virtualinvoke r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    public boolean waitForEmpty(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        int i0;
        byte $b1;
        java.util.concurrent.locks.Condition $r2;
        java.lang.Throwable $r3;
        long l2, l3;
        java.util.concurrent.TimeUnit r4;
        java.util.concurrent.locks.ReentrantLock r5;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        l2 := @parameter0: long;

        r4 := @parameter1: java.util.concurrent.TimeUnit;

        l3 = virtualinvoke r4.<java.util.concurrent.TimeUnit: long toNanos(long)>(l2);

        r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlight>;

     label2:
        if i0 <= 0 goto label5;

        $b1 = l3 cmp 0L;

        if $b1 > 0 goto label3;

        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label3:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mIsEmpty>;

        l3 = interfaceinvoke $r2.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l3);

     label4:
        goto label1;

     label5:
        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label6:
        $r3 := @caughtexception;

        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public boolean waitForPreviewsEmpty(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        int i0;
        byte $b1;
        java.util.concurrent.locks.Condition $r2;
        java.lang.Throwable $r3;
        long l2, l3;
        java.util.concurrent.TimeUnit r4;
        java.util.concurrent.locks.ReentrantLock r5;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        l2 := @parameter0: long;

        r4 := @parameter1: java.util.concurrent.TimeUnit;

        l3 = virtualinvoke r4.<java.util.concurrent.TimeUnit: long toNanos(long)>(l2);

        r5 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<android.hardware.camera2.legacy.CaptureCollector: int mInFlightPreviews>;

     label2:
        if i0 <= 0 goto label5;

        $b1 = l3 cmp 0L;

        if $b1 > 0 goto label3;

        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label3:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mPreviewsEmpty>;

        l3 = interfaceinvoke $r2.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l3);

     label4:
        goto label1;

     label5:
        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label6:
        $r3 := @caughtexception;

        virtualinvoke r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public boolean waitForRequestCompleted(android.hardware.camera2.legacy.RequestHolder, long, java.util.concurrent.TimeUnit, android.util.MutableLong) throws java.lang.InterruptedException
    {
        android.hardware.camera2.legacy.CaptureCollector r0;
        android.util.MutableLong r1;
        boolean z0;
        byte $b0;
        java.util.concurrent.locks.Condition $r2;
        java.lang.Throwable $r3;
        android.hardware.camera2.legacy.RequestHolder r4;
        long l1, l2;
        java.util.concurrent.TimeUnit r5;
        java.util.concurrent.locks.ReentrantLock r6;

        r0 := @this: android.hardware.camera2.legacy.CaptureCollector;

        r4 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        l1 := @parameter1: long;

        r5 := @parameter2: java.util.concurrent.TimeUnit;

        r1 := @parameter3: android.util.MutableLong;

        l2 = virtualinvoke r5.<java.util.concurrent.TimeUnit: long toNanos(long)>(l1);

        r6 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke r6.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        z0 = specialinvoke r0.<android.hardware.camera2.legacy.CaptureCollector: boolean removeRequestIfCompleted(android.hardware.camera2.legacy.RequestHolder,android.util.MutableLong)>(r4, r1);

     label2:
        if z0 != 0 goto label5;

        $b0 = l2 cmp 0L;

        if $b0 > 0 goto label3;

        virtualinvoke r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label3:
        $r2 = r0.<android.hardware.camera2.legacy.CaptureCollector: java.util.concurrent.locks.Condition mNotFull>;

        l2 = interfaceinvoke $r2.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l2);

     label4:
        goto label1;

     label5:
        virtualinvoke r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label6:
        $r3 := @caughtexception;

        virtualinvoke r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.legacy.CaptureCollector: java.lang.String TAG> = "CaptureCollector";

        <android.hardware.camera2.legacy.CaptureCollector: int MAX_JPEGS_IN_FLIGHT> = 1;

        <android.hardware.camera2.legacy.CaptureCollector: int FLAG_RECEIVED_PREVIEW_TS> = 8;

        <android.hardware.camera2.legacy.CaptureCollector: int FLAG_RECEIVED_PREVIEW> = 4;

        <android.hardware.camera2.legacy.CaptureCollector: int FLAG_RECEIVED_JPEG_TS> = 2;

        <android.hardware.camera2.legacy.CaptureCollector: int FLAG_RECEIVED_JPEG> = 1;

        <android.hardware.camera2.legacy.CaptureCollector: int FLAG_RECEIVED_ALL_PREVIEW> = 12;

        <android.hardware.camera2.legacy.CaptureCollector: int FLAG_RECEIVED_ALL_JPEG> = 3;

        <android.hardware.camera2.legacy.CaptureCollector: boolean DEBUG> = 0;

        return;
    }
}
