public class android.hardware.camera2.legacy.LegacyCameraDevice extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final boolean DEBUG;
    private static final int GRALLOC_USAGE_HW_COMPOSER;
    private static final int GRALLOC_USAGE_HW_RENDER;
    private static final int GRALLOC_USAGE_HW_TEXTURE;
    private static final int GRALLOC_USAGE_HW_VIDEO_ENCODER;
    private static final int GRALLOC_USAGE_RENDERSCRIPT;
    private static final int GRALLOC_USAGE_SW_READ_OFTEN;
    private static final int ILLEGAL_VALUE;
    public static final int MAX_DIMEN_FOR_ROUNDING;
    public static final int NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW;
    private final java.lang.String TAG;
    private final android.os.Handler mCallbackHandler;
    private final android.os.HandlerThread mCallbackHandlerThread;
    private final int mCameraId;
    private boolean mClosed;
    private android.util.SparseArray mConfiguredSurfaces;
    private final android.hardware.camera2.ICameraDeviceCallbacks mDeviceCallbacks;
    private final android.hardware.camera2.legacy.CameraDeviceState mDeviceState;
    private final android.os.ConditionVariable mIdle;
    private final android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager;
    private final android.os.Handler mResultHandler;
    private final android.os.HandlerThread mResultThread;
    private final android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener mStateListener;
    private final android.hardware.camera2.CameraCharacteristics mStaticCharacteristics;

    public void <init>(int, android.hardware.Camera, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.ICameraDeviceCallbacks)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        int i0;
        android.hardware.camera2.CameraCharacteristics r1;
        android.hardware.camera2.legacy.CameraDeviceState $r2, $r19, $r21;
        android.os.ConditionVariable $r3;
        android.os.HandlerThread $r4, $r5, $r10, $r12, $r14, $r16;
        android.hardware.camera2.legacy.LegacyCameraDevice$1 $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.String $r9;
        android.os.Handler $r11, $r15;
        android.os.Looper $r13, $r17;
        android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener $r18;
        android.hardware.camera2.legacy.RequestThreadManager $r20;
        android.hardware.Camera r22;
        android.hardware.camera2.ICameraDeviceCallbacks r23;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        i0 := @parameter0: int;

        r22 := @parameter1: android.hardware.Camera;

        r1 := @parameter2: android.hardware.camera2.CameraCharacteristics;

        r23 := @parameter3: android.hardware.camera2.ICameraDeviceCallbacks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.hardware.camera2.legacy.CameraDeviceState;

        specialinvoke $r2.<android.hardware.camera2.legacy.CameraDeviceState: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState> = $r2;

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean mClosed> = 0;

        $r3 = new android.os.ConditionVariable;

        specialinvoke $r3.<android.os.ConditionVariable: void <init>(boolean)>(1);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle> = $r3;

        $r4 = new android.os.HandlerThread;

        specialinvoke $r4.<android.os.HandlerThread: void <init>(java.lang.String)>("ResultThread");

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread> = $r4;

        $r5 = new android.os.HandlerThread;

        specialinvoke $r5.<android.os.HandlerThread: void <init>(java.lang.String)>("CallbackThread");

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread> = $r5;

        $r6 = new android.hardware.camera2.legacy.LegacyCameraDevice$1;

        specialinvoke $r6.<android.hardware.camera2.legacy.LegacyCameraDevice$1: void <init>(android.hardware.camera2.legacy.LegacyCameraDevice)>(r0);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener mStateListener> = $r6;

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: int mCameraId> = i0;

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.ICameraDeviceCallbacks mDeviceCallbacks> = r23;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CameraDevice-%d-LE", $r7);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG> = $r9;

        $r10 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        virtualinvoke $r10.<android.os.HandlerThread: void start()>();

        $r11 = new android.os.Handler;

        $r12 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        $r13 = virtualinvoke $r12.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r11.<android.os.Handler: void <init>(android.os.Looper)>($r13);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.Handler mResultHandler> = $r11;

        $r14 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        virtualinvoke $r14.<android.os.HandlerThread: void start()>();

        $r15 = new android.os.Handler;

        $r16 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        $r17 = virtualinvoke $r16.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r15.<android.os.Handler: void <init>(android.os.Looper)>($r17);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.Handler mCallbackHandler> = $r15;

        $r19 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        $r18 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener mStateListener>;

        virtualinvoke $r19.<android.hardware.camera2.legacy.CameraDeviceState: void setCameraDeviceCallbacks(android.os.Handler,android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener)>($r15, $r18);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.CameraCharacteristics mStaticCharacteristics> = r1;

        $r20 = new android.hardware.camera2.legacy.RequestThreadManager;

        $r21 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        specialinvoke $r20.<android.hardware.camera2.legacy.RequestThreadManager: void <init>(int,android.hardware.Camera,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.legacy.CameraDeviceState)>(i0, r22, r1, $r21);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager> = $r20;

        virtualinvoke $r20.<android.hardware.camera2.legacy.RequestThreadManager: void start()>();

        return;
    }

    static android.os.ConditionVariable access$000(android.hardware.camera2.legacy.LegacyCameraDevice)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.os.ConditionVariable $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle>;

        return $r1;
    }

    static android.hardware.camera2.impl.CaptureResultExtras access$100(android.hardware.camera2.legacy.LegacyCameraDevice, android.hardware.camera2.legacy.RequestHolder, int, java.lang.Object)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        int i0;
        java.lang.Object r2;
        android.hardware.camera2.impl.CaptureResultExtras $r3;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        $r3 = specialinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.impl.CaptureResultExtras getExtrasFromRequest(android.hardware.camera2.legacy.RequestHolder,int,java.lang.Object)>(r1, i0, r2);

        return $r3;
    }

    static android.hardware.camera2.ICameraDeviceCallbacks access$200(android.hardware.camera2.legacy.LegacyCameraDevice)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.ICameraDeviceCallbacks $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.ICameraDeviceCallbacks mDeviceCallbacks>;

        return $r1;
    }

    static android.os.Handler access$300(android.hardware.camera2.legacy.LegacyCameraDevice)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.Handler mResultHandler>;

        return $r1;
    }

    static android.hardware.camera2.impl.CaptureResultExtras access$400(android.hardware.camera2.legacy.LegacyCameraDevice, android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        android.hardware.camera2.impl.CaptureResultExtras $r2;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        $r2 = specialinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.impl.CaptureResultExtras getExtrasFromRequest(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return $r2;
    }

    static void connectSurface(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int $i0;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeConnectSurface(android.view.Surface)>(r0);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        return;
    }

    static boolean containsSurfaceId(android.view.Surface, java.util.Collection)
    {
        java.util.Collection r0;
        long l0;
        java.lang.Long $r1;
        boolean $z0;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r2;
        android.view.Surface r3;

        r3 := @parameter0: android.view.Surface;

        r0 := @parameter1: java.util.Collection;

     label1:
        l0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>(r3);

     label2:
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        return $z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label1 to label2 with label3;
    }

    public static int detectSurfaceDataspace(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int $i0, $i1;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectSurfaceDataspace(android.view.Surface)>(r0);

        $i1 = staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        return $i1;
    }

    public static int detectSurfaceType(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, i1, $i2;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectSurfaceType(android.view.Surface)>(r0);

        i1 = i0;

        if i0 < 1 goto label1;

        i1 = i0;

        if i0 > 5 goto label1;

        i1 = 34;

     label1:
        $i2 = staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>(i1);

        return $i2;
    }

    static int detectSurfaceUsageFlags(android.view.Surface)
    {
        android.view.Surface r0;
        int $i0;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectSurfaceUsageFlags(android.view.Surface)>(r0);

        return $i0;
    }

    static void disconnectSurface(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int $i0;

        r0 := @parameter0: android.view.Surface;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDisconnectSurface(android.view.Surface)>(r0);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        return;
    }

    static android.util.Size findClosestSize(android.util.Size, android.util.Size[])
    {
        android.util.Size r0, r2, r3, r4;
        android.util.Size[] r1;
        int i0, $i1, i5;
        boolean $z0;
        long $l2, $l3;
        byte $b4;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size[];

        if r0 == null goto label7;

        if r1 != null goto label1;

        goto label7;

     label1:
        r3 = null;

        i0 = lengthof r1;

        i5 = 0;

     label2:
        if i5 >= i0 goto label6;

        r2 = r1[i5];

        $z0 = virtualinvoke r2.<android.util.Size: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        return r0;

     label3:
        r4 = r3;

        $i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        if $i1 > 1920 goto label5;

        if r3 == null goto label4;

        r4 = r3;

        $l2 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long findEuclidDistSquare(android.util.Size,android.util.Size)>(r0, r2);

        $l3 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long findEuclidDistSquare(android.util.Size,android.util.Size)>(r3, r2);

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label5;

     label4:
        r4 = r2;

     label5:
        i5 = i5 + 1;

        r3 = r4;

        goto label2;

     label6:
        return r3;

     label7:
        return null;
    }

    static long findEuclidDistSquare(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        long l0, l1, $l8, $l9, $l10;
        int $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        $i2 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $i3 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i4 = $i2 - $i3;

        l0 = (long) $i4;

        $i5 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $i6 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i7 = $i5 - $i6;

        l1 = (long) $i7;

        $l9 = l0 * l0;

        $l8 = l1 * l1;

        $l10 = $l9 + $l8;

        return $l10;
    }

    private android.hardware.camera2.impl.CaptureResultExtras getExtrasFromRequest(android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        android.hardware.camera2.impl.CaptureResultExtras $r2;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        $r2 = specialinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.impl.CaptureResultExtras getExtrasFromRequest(android.hardware.camera2.legacy.RequestHolder,int,java.lang.Object)>(r1, -1, null);

        return $r2;
    }

    private android.hardware.camera2.impl.CaptureResultExtras getExtrasFromRequest(android.hardware.camera2.legacy.RequestHolder, int, java.lang.Object)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        android.hardware.camera2.impl.CaptureResultExtras $r2, $r3;
        int $i1, $i2, i6, i7, i8;
        long $l3, $l4;
        android.util.SparseArray $r4, $r5;
        java.lang.String $r6;
        java.lang.Object r7;
        android.view.Surface r8;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        i6 := @parameter1: int;

        r7 := @parameter2: java.lang.Object;

        i7 = -1;

        if i6 != 5 goto label2;

        r8 = (android.view.Surface) r7;

        $r4 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.SparseArray mConfiguredSurfaces>;

        i8 = virtualinvoke $r4.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r8);

        if i8 >= 0 goto label1;

        $r6 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, "Buffer drop error reported for unknown Surface");

        i7 = -1;

        goto label2;

     label1:
        $r5 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.SparseArray mConfiguredSurfaces>;

        i7 = virtualinvoke $r5.<android.util.SparseArray: int keyAt(int)>(i8);

     label2:
        if r1 != null goto label3;

        $r3 = new android.hardware.camera2.impl.CaptureResultExtras;

        specialinvoke $r3.<android.hardware.camera2.impl.CaptureResultExtras: void <init>(int,int,int,int,long,int,int,java.lang.String,long,long,long)>(-1, -1, -1, -1, -1L, -1, -1, null, -1L, -1L, -1L);

        return $r3;

     label3:
        $r2 = new android.hardware.camera2.impl.CaptureResultExtras;

        $i1 = virtualinvoke r1.<android.hardware.camera2.legacy.RequestHolder: int getRequestId()>();

        $i2 = virtualinvoke r1.<android.hardware.camera2.legacy.RequestHolder: int getSubsequeceId()>();

        $l3 = virtualinvoke r1.<android.hardware.camera2.legacy.RequestHolder: long getFrameNumber()>();

        $l4 = virtualinvoke r1.<android.hardware.camera2.legacy.RequestHolder: long getFrameNumber()>();

        specialinvoke $r2.<android.hardware.camera2.impl.CaptureResultExtras: void <init>(int,int,int,int,long,int,int,java.lang.String,long,long,long)>($i1, $i2, 0, 0, $l3, 1, i7, null, $l4, -1L, -1L);

        return $r2;
    }

    public static long getSurfaceId(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        long l0;
        java.lang.Throwable $r1;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r2;
        android.view.Surface r3;

        r3 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

     label1:
        l0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long nativeGetSurfaceId(android.view.Surface)>(r3);

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        $r2 = new android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException;

        specialinvoke $r2.<android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException: void <init>()>();

        throw $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    static java.util.List getSurfaceIds(android.util.SparseArray) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.util.SparseArray r0;
        int i0, i3;
        long l1;
        java.lang.NullPointerException $r2;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        android.view.Surface $r5;
        byte $b2;
        java.lang.IllegalStateException $r6;
        java.lang.Long $r7;

        r0 := @parameter0: android.util.SparseArray;

        if r0 == null goto label4;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = virtualinvoke r0.<android.util.SparseArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r4 = virtualinvoke r0.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r5 = (android.view.Surface) $r4;

        l1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>($r5);

        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label2;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Configured surface had null native GraphicBufferProducer pointer!");

        throw $r6;

     label3:
        return $r3;

     label4:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null argument surfaces");

        throw $r2;
    }

    static java.util.List getSurfaceIds(java.util.Collection) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        long l0;
        java.lang.NullPointerException $r1;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.view.Surface $r4;
        byte $b1;
        java.lang.IllegalStateException $r5;
        java.lang.Long $r6;
        java.util.Collection r7;
        java.util.Iterator r8;

        r7 := @parameter0: java.util.Collection;

        if r7 == null goto label4;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r8 = interfaceinvoke r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.view.Surface) $r3;

        l0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>($r4);

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label2;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Configured surface had null native GraphicBufferProducer pointer!");

        throw $r5;

     label3:
        return $r2;

     label4:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null argument surfaces");

        throw $r1;
    }

    public static android.util.Size getSurfaceSize(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int[] r1;
        int $i0, $i2, $i3;
        android.util.Size $r3;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r1 = newarray (int)[2];

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectSurfaceDimens(android.view.Surface,int[])>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        $r3 = new android.util.Size;

        $i3 = r1[0];

        $i2 = r1[1];

        specialinvoke $r3.<android.util.Size: void <init>(int,int)>($i3, $i2);

        return $r3;
    }

    static android.util.Size getTextureSize(android.graphics.SurfaceTexture) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.graphics.SurfaceTexture r0;
        int[] r1;
        int $i0, $i2, $i3;
        android.util.Size $r3;

        r0 := @parameter0: android.graphics.SurfaceTexture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r1 = newarray (int)[2];

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectTextureDimens(android.graphics.SurfaceTexture,int[])>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        $r3 = new android.util.Size;

        $i3 = r1[0];

        $i2 = r1[1];

        specialinvoke $r3.<android.util.Size: void <init>(int,int)>($i3, $i2);

        return $r3;
    }

    public static boolean isFlexibleConsumer(android.view.Surface)
    {
        android.view.Surface r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @parameter0: android.view.Surface;

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceUsageFlags(android.view.Surface)>(r0);

        $i1 = i0 & 1114112;

        if $i1 != 0 goto label1;

        $i2 = i0 & 2307;

        if $i2 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isPreviewConsumer(android.view.Surface)
    {
        int i0, $i1, $i3;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r0;
        java.lang.IllegalArgumentException $r1;
        android.view.Surface r2;
        boolean z0;

        r2 := @parameter0: android.view.Surface;

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceUsageFlags(android.view.Surface)>(r2);

        $i1 = i0 & 1114115;

        if $i1 != 0 goto label1;

        $i3 = i0 & 2816;

        if $i3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r2);

     label3:
        return z0;

     label4:
        $r0 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Surface was abandoned", $r0);

        throw $r1;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label2 to label3 with label4;
    }

    public static boolean isVideoEncoderConsumer(android.view.Surface)
    {
        int i0, $i1, $i3;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r0;
        java.lang.IllegalArgumentException $r1;
        android.view.Surface r2;
        boolean z0;

        r2 := @parameter0: android.view.Surface;

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceUsageFlags(android.view.Surface)>(r2);

        $i1 = i0 & 1050883;

        if $i1 != 0 goto label1;

        $i3 = i0 & 65536;

        if $i3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r2);

     label3:
        return z0;

     label4:
        $r0 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Surface was abandoned", $r0);

        throw $r1;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label2 to label3 with label4;
    }

    private static native int nativeConnectSurface(android.view.Surface);

    private static native int nativeDetectSurfaceDataspace(android.view.Surface);

    private static native int nativeDetectSurfaceDimens(android.view.Surface, int[]);

    private static native int nativeDetectSurfaceType(android.view.Surface);

    private static native int nativeDetectSurfaceUsageFlags(android.view.Surface);

    private static native int nativeDetectTextureDimens(android.graphics.SurfaceTexture, int[]);

    private static native int nativeDisconnectSurface(android.view.Surface);

    static native int nativeGetJpegFooterSize();

    private static native long nativeGetSurfaceId(android.view.Surface);

    private static native int nativeProduceFrame(android.view.Surface, byte[], int, int, int);

    private static native int nativeSetNextTimestamp(android.view.Surface, long);

    private static native int nativeSetScalingMode(android.view.Surface, int);

    private static native int nativeSetSurfaceDimens(android.view.Surface, int, int);

    private static native int nativeSetSurfaceFormat(android.view.Surface, int);

    private static native int nativeSetSurfaceOrientation(android.view.Surface, int, int);

    static boolean needsConversion(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.view.Surface;

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r0);

        if i0 == 35 goto label2;

        if i0 == 842094169 goto label2;

        if i0 != 17 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    static void produceFrame(android.view.Surface, byte[], int, int, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        byte[] r1;
        int i0, i1, i2, $i5;

        r0 := @parameter0: android.view.Surface;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i0, "width must be positive.");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i1, "height must be positive.");

        $i5 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeProduceFrame(android.view.Surface,byte[],int,int,int)>(r0, r1, i0, i1, i2);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i5);

        return;
    }

    static void setNextTimestamp(android.view.Surface, long) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        long l0;
        int $i1;

        r0 := @parameter0: android.view.Surface;

        l0 := @parameter1: long;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetNextTimestamp(android.view.Surface,long)>(r0, l0);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i1);

        return;
    }

    static void setScalingMode(android.view.Surface, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, $i1;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetScalingMode(android.view.Surface,int)>(r0, i0);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i1);

        return;
    }

    static void setSurfaceDimens(android.view.Surface, int, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, i1, $i4;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i0, "width must be positive.");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i1, "height must be positive.");

        $i4 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetSurfaceDimens(android.view.Surface,int,int)>(r0, i0, i1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i4);

        return;
    }

    static void setSurfaceFormat(android.view.Surface, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, $i1;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetSurfaceFormat(android.view.Surface,int)>(r0, i0);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i1);

        return;
    }

    static void setSurfaceOrientation(android.view.Surface, int, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, i1, $i2;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i2 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetSurfaceOrientation(android.view.Surface,int,int)>(r0, i0, i1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i2);

        return;
    }

    public long cancelRequest(int)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        int i0;
        android.hardware.camera2.legacy.RequestThreadManager $r1;
        long $l1;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        $l1 = virtualinvoke $r1.<android.hardware.camera2.legacy.RequestThreadManager: long cancelRepeating(int)>(i0);

        return $l1;
    }

    public void close()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestThreadManager $r1;
        android.os.HandlerThread $r2, $r3, $r4, $r5, $r8, $r11, $r16, $r19;
        java.lang.Throwable $r6, $r14;
        java.lang.Object[] $r7, $r15;
        java.lang.String $r9, $r10, $r13, $r17, $r18, $r21;
        long $l0, $l2;
        java.lang.Long $r12, $r20;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        virtualinvoke $r1.<android.hardware.camera2.legacy.RequestThreadManager: void quit()>();

        $r2 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        virtualinvoke $r2.<android.os.HandlerThread: boolean quitSafely()>();

        $r3 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        virtualinvoke $r3.<android.os.HandlerThread: boolean quitSafely()>();

     label1:
        $r4 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        virtualinvoke $r4.<android.os.HandlerThread: void join()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r17 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        $r15 = newarray (java.lang.Object)[2];

        $r16 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        $r18 = virtualinvoke $r16.<android.os.HandlerThread: java.lang.String getName()>();

        $r15[0] = $r18;

        $r19 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        $l2 = virtualinvoke $r19.<android.os.HandlerThread: long getId()>();

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r15[1] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Thread %s (%d) interrupted while quitting.", $r15);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r17, $r21);

     label4:
        $r5 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        virtualinvoke $r5.<android.os.HandlerThread: void join()>();

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        $r9 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        $r10 = virtualinvoke $r8.<android.os.HandlerThread: java.lang.String getName()>();

        $r7[0] = $r10;

        $r11 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        $l0 = virtualinvoke $r11.<android.os.HandlerThread: long getId()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r7[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Thread %s (%d) interrupted while quitting.", $r7);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r9, $r13);

     label7:
        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean mClosed> = 1;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label4 to label5 with label6;
    }

    public int configureOutputs(android.util.SparseArray)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.util.SparseArray r1;
        int $i0;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: android.util.SparseArray;

        $i0 = virtualinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: int configureOutputs(android.util.SparseArray,boolean)>(r1, 0);

        return $i0;
    }

    public int configureOutputs(android.util.SparseArray, boolean)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14, i15;
        android.view.Surface r2;
        boolean z0, $z1, $z2, z5, $z6, z7;
        java.util.ArrayList $r3;
        android.hardware.camera2.legacy.CameraDeviceState $r4, $r6;
        android.hardware.camera2.legacy.RequestThreadManager $r5;
        java.lang.Object $r7, $r10;
        android.hardware.camera2.CameraCharacteristics$Key $r8;
        android.hardware.camera2.CameraCharacteristics $r9;
        java.lang.String $r12, $r15, $r19, $r20, $r21, $r23, r32;
        java.lang.Object[] $r14;
        java.lang.Integer $r16, $r17, $r18;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r22;
        android.util.SparseArray r24;
        android.hardware.camera2.params.StreamConfigurationMap r25;
        android.util.Size r26, r29, r30;
        android.util.Size[] r27, r28;
        android.util.Pair r31, r34;
        java.lang.StringBuilder r33;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r24 := @parameter0: android.util.SparseArray;

        z5 := @parameter1: boolean;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        if r24 == null goto label24;

        i0 = virtualinvoke r24.<android.util.SparseArray: int size()>();

        i15 = 0;

     label01:
        if i15 >= i0 goto label24;

        $r7 = virtualinvoke r24.<android.util.SparseArray: java.lang.Object valueAt(int)>(i15);

        r2 = (android.view.Surface) $r7;

        if r2 != null goto label02;

        $r21 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r21, "configureOutputs - null outputs are not allowed");

        $i12 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        return $i12;

     label02:
        $z2 = virtualinvoke r2.<android.view.Surface: boolean isValid()>();

        if $z2 != 0 goto label03;

        $r20 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r20, "configureOutputs - invalid output surfaces are not allowed");

        $i10 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        return $i10;

     label03:
        $r9 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.CameraCharacteristics mStaticCharacteristics>;

        $r8 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r10 = virtualinvoke $r9.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r8);

        r25 = (android.hardware.camera2.params.StreamConfigurationMap) $r10;

     label04:
        r26 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size getSurfaceSize(android.view.Surface)>(r2);

        i1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r2);

        z0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean isFlexibleConsumer(android.view.Surface)>(r2);

        r27 = virtualinvoke r25.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(i1);

     label05:
        r28 = r27;

        if r27 != null goto label10;

        if i1 != 34 goto label08;

     label06:
        r28 = virtualinvoke r25.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(35);

     label07:
        goto label10;

     label08:
        r28 = r27;

        if i1 != 33 goto label10;

     label09:
        r28 = virtualinvoke r25.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(256);

     label10:
        $z6 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r28, r26);

        if $z6 != 0 goto label19;

     label11:
        r29 = r26;

        if z0 == 0 goto label16;

     label12:
        r30 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size findClosestSize(android.util.Size,android.util.Size[])>(r26, r28);

     label13:
        r26 = r30;

        r29 = r30;

        if r30 == null goto label16;

     label14:
        r31 = new android.util.Pair;

        specialinvoke r31.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r2, r30);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r31);

     label15:
        goto label20;

     label16:
        if r28 != null goto label17;

        r32 = "format is invalid.";

        goto label18;

     label17:
        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size not in valid set: ");

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r28);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r32 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

     label18:
        $r15 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        $r14 = newarray (java.lang.Object)[4];

        $i5 = virtualinvoke r29.<android.util.Size: int getWidth()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r14[0] = $r16;

        $i6 = virtualinvoke r29.<android.util.Size: int getHeight()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r14[1] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r14[2] = $r18;

        $r14[3] = r32;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Surface with size (w=%d, h=%d) and format 0x%x is not valid, %s", $r14);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r15, $r19);

        $i8 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        return $i8;

     label19:
        r34 = new android.util.Pair;

        specialinvoke r34.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r2, r26);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r34);

     label20:
        if z5 != 0 goto label22;

     label21:
        $i3 = virtualinvoke r26.<android.util.Size: int getWidth()>();

        $i4 = virtualinvoke r26.<android.util.Size: int getHeight()>();

        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceDimens(android.view.Surface,int,int)>(r2, $i3, $i4);

     label22:
        i15 = i15 + 1;

        goto label01;

     label23:
        $r22 := @caughtexception;

        $r23 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r23, "Surface bufferqueue is abandoned, cannot configure as output: ", $r22);

        $i14 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        return $i14;

     label24:
        if z5 == 0 goto label25;

        return 0;

     label25:
        z7 = 0;

        $r4 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        $z1 = virtualinvoke $r4.<android.hardware.camera2.legacy.CameraDeviceState: boolean setConfiguring()>();

        if $z1 == 0 goto label26;

        $r5 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        virtualinvoke $r5.<android.hardware.camera2.legacy.RequestThreadManager: void configure(java.util.Collection)>($r3);

        $r6 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        z7 = virtualinvoke $r6.<android.hardware.camera2.legacy.CameraDeviceState: boolean setIdle()>();

     label26:
        if z7 == 0 goto label27;

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.SparseArray mConfiguredSurfaces> = r24;

        return 0;

     label27:
        $i2 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int INVALID_OPERATION>;

        return $i2;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label04 to label05 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label06 to label07 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label09 to label10 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label10 to label11 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label12 to label13 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label14 to label15 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label17 to label18 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label18 to label19 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label19 to label20 with label23;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label21 to label22 with label23;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        java.lang.String r1, $r6, $r8;
        java.lang.StringBuilder r2;
        java.lang.Throwable $r3;
        android.os.ServiceSpecificException $r4;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

     label1:
        virtualinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label7;

     label3:
        $r3 := @caughtexception;

        goto label8;

     label4:
        $r4 := @caughtexception;

     label5:
        r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got error while trying to finalize, ignoring: ");

        $r6 = virtualinvoke $r4.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r1, $r8);

     label6:
        goto label2;

     label7:
        return;

     label8:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r3;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public long flush()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        long l0;
        android.hardware.camera2.legacy.RequestThreadManager $r1;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        l0 = virtualinvoke $r1.<android.hardware.camera2.legacy.RequestThreadManager: long flush()>();

        virtualinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: void waitUntilIdle()>();

        return l0;
    }

    public int getAudioRestriction()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestThreadManager $r1;
        int $i0;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        $i0 = virtualinvoke $r1.<android.hardware.camera2.legacy.RequestThreadManager: int getAudioRestriction()>();

        return $i0;
    }

    public boolean isClosed()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $z0 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean mClosed>;

        return $z0;
    }

    public void setAudioRestriction(int)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        int i0;
        android.hardware.camera2.legacy.RequestThreadManager $r1;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        virtualinvoke $r1.<android.hardware.camera2.legacy.RequestThreadManager: void setAudioRestriction(int)>(i0);

        return;
    }

    public android.hardware.camera2.utils.SubmitInfo submitRequest(android.hardware.camera2.CaptureRequest, boolean)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.CaptureRequest r1;
        boolean z0;
        android.hardware.camera2.CaptureRequest[] $r2;
        android.hardware.camera2.utils.SubmitInfo $r3;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        z0 := @parameter1: boolean;

        $r2 = newarray (android.hardware.camera2.CaptureRequest)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[],boolean)>($r2, z0);

        return $r3;
    }

    public android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[], boolean)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        boolean z0, $z1, $z2, $z3;
        int i0, $i2, $i3, $i5, $i7, $i9, $i11, $i12, i13;
        java.util.Iterator r1;
        java.lang.String $r2, $r10, $r14, $r17, $r19;
        android.util.SparseArray $r4, $r5, $r16;
        android.os.ConditionVariable $r6;
        android.hardware.camera2.legacy.RequestThreadManager $r7;
        android.hardware.camera2.utils.SubmitInfo $r8;
        java.util.Collection $r9, $r12, r36;
        java.lang.Object $r13, r25;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r22;
        android.hardware.camera2.CaptureRequest[] r24;
        android.hardware.camera2.CaptureRequest r26;
        android.view.Surface r27;
        java.util.ArrayList r29;
        android.os.ServiceSpecificException r30, r31, r32, r33, r34, r35;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r24 := @parameter0: android.hardware.camera2.CaptureRequest[];

        z0 := @parameter1: boolean;

        if r24 == null goto label14;

        $i3 = lengthof r24;

        if $i3 == 0 goto label14;

     label01:
        $r4 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.SparseArray mConfiguredSurfaces>;

        if $r4 != null goto label03;

        r29 = new java.util.ArrayList;

        specialinvoke r29.<java.util.ArrayList: void <init>()>();

        r25 = r29;

     label02:
        goto label04;

     label03:
        $r5 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.SparseArray mConfiguredSurfaces>;

        r25 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: java.util.List getSurfaceIds(android.util.SparseArray)>($r5);

     label04:
        i0 = lengthof r24;

        i13 = 0;

     label05:
        if i13 >= i0 goto label12;

        r26 = r24[i13];

        $r9 = virtualinvoke r26.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        $z1 = interfaceinvoke $r9.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        $r12 = virtualinvoke r26.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r13 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r27 = (android.view.Surface) $r13;

        if r27 == null goto label09;

        $r16 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.SparseArray mConfiguredSurfaces>;

        if $r16 == null goto label08;

        r36 = (java.util.Collection) r25;

        $z3 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean containsSurfaceId(android.view.Surface,java.util.Collection)>(r27, r36);

        if $z3 == 0 goto label07;

        goto label06;

     label07:
        $r19 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r19, "submitRequestList - cannot use a surface that wasn\'t configured");

        r30 = new android.os.ServiceSpecificException;

        $i11 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        specialinvoke r30.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>($i11, "submitRequestList - cannot use a surface that wasn\'t configured");

        throw r30;

     label08:
        $r17 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r17, "submitRequestList - must configure  device with valid surfaces before submitting requests");

        r31 = new android.os.ServiceSpecificException;

        $i9 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int INVALID_OPERATION>;

        specialinvoke r31.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>($i9, "submitRequestList - must configure  device with valid surfaces before submitting requests");

        throw r31;

     label09:
        $r14 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r14, "submitRequestList - Null Surface targets are not allowed");

        r32 = new android.os.ServiceSpecificException;

        $i7 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        specialinvoke r32.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>($i7, "submitRequestList - Null Surface targets are not allowed");

        throw r32;

     label10:
        i13 = i13 + 1;

        goto label05;

     label11:
        $r10 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r10, "submitRequestList - Each request must have at least one Surface target");

        r33 = new android.os.ServiceSpecificException;

        $i5 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        specialinvoke r33.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>($i5, "submitRequestList - Each request must have at least one Surface target");

        throw r33;

     label12:
        $r6 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle>;

        virtualinvoke $r6.<android.os.ConditionVariable: void close()>();

        $r7 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        $r8 = virtualinvoke $r7.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.utils.SubmitInfo submitCaptureRequests(android.hardware.camera2.CaptureRequest[],boolean)>(r24, z0);

        return $r8;

     label13:
        $r22 := @caughtexception;

        r34 = new android.os.ServiceSpecificException;

        $i12 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        specialinvoke r34.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>($i12, "submitRequestList - configured surface is abandoned.");

        throw r34;

     label14:
        $r2 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r2, "submitRequestList - Empty/null requests are not allowed");

        r35 = new android.os.ServiceSpecificException;

        $i2 = <android.hardware.camera2.legacy.LegacyExceptionUtils: int BAD_VALUE>;

        specialinvoke r35.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>($i2, "submitRequestList - Empty/null requests are not allowed");

        throw r35;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label01 to label02 with label13;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label03 to label04 with label13;
    }

    public void waitUntilIdle()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.os.ConditionVariable $r1;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle>;

        virtualinvoke $r1.<android.os.ConditionVariable: void block()>();

        return;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.legacy.LegacyCameraDevice: int NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW> = 1;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int MAX_DIMEN_FOR_ROUNDING> = 1920;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int ILLEGAL_VALUE> = -1;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int GRALLOC_USAGE_SW_READ_OFTEN> = 3;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int GRALLOC_USAGE_RENDERSCRIPT> = 1048576;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int GRALLOC_USAGE_HW_VIDEO_ENCODER> = 65536;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int GRALLOC_USAGE_HW_TEXTURE> = 256;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int GRALLOC_USAGE_HW_RENDER> = 512;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int GRALLOC_USAGE_HW_COMPOSER> = 2048;

        <android.hardware.camera2.legacy.LegacyCameraDevice: boolean DEBUG> = 0;

        return;
    }
}
