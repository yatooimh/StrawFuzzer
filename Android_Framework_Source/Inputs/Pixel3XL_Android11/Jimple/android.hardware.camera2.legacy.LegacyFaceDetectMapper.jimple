public class android.hardware.camera2.legacy.LegacyFaceDetectMapper extends java.lang.Object
{
    private static final boolean DEBUG;
    private static java.lang.String TAG;
    private final android.hardware.Camera mCamera;
    private boolean mFaceDetectEnabled;
    private boolean mFaceDetectReporting;
    private boolean mFaceDetectScenePriority;
    private final boolean mFaceDetectSupported;
    private android.hardware.Camera$Face[] mFaces;
    private android.hardware.Camera$Face[] mFacesPrev;
    private final java.lang.Object mLock;

    static void <clinit>()
    {
        <android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean DEBUG> = 0;

        <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG> = "LegacyFaceDetectMapper";

        return;
    }

    public void <init>(android.hardware.Camera, android.hardware.camera2.CameraCharacteristics)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        android.hardware.Camera r1, $r5, $r11;
        android.hardware.camera2.CameraCharacteristics r2;
        boolean z0;
        java.lang.Object $r3, $r4, $r8;
        android.hardware.camera2.CameraCharacteristics$Key $r7;
        int[] $r9;
        android.hardware.camera2.legacy.LegacyFaceDetectMapper$1 $r10;

        r0 := @this: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r1 := @parameter0: android.hardware.Camera;

        r2 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled> = 0;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectScenePriority> = 0;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock> = $r3;

        $r4 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "camera must not be null");

        $r5 = (android.hardware.Camera) $r4;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera> = $r5;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "characteristics must not be null");

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES>;

        $r8 = virtualinvoke r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r7);

        $r9 = (int[]) $r8;

        z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r9, 1);

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectSupported> = z0;

        if z0 != 0 goto label1;

        return;

     label1:
        $r11 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera>;

        $r10 = new android.hardware.camera2.legacy.LegacyFaceDetectMapper$1;

        specialinvoke $r10.<android.hardware.camera2.legacy.LegacyFaceDetectMapper$1: void <init>(android.hardware.camera2.legacy.LegacyFaceDetectMapper)>(r0);

        virtualinvoke $r11.<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)>($r10);

        return;
    }

    static java.lang.Object access$000(android.hardware.camera2.legacy.LegacyFaceDetectMapper)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$100(android.hardware.camera2.legacy.LegacyFaceDetectMapper)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        $z0 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled>;

        return $z0;
    }

    static android.hardware.Camera$Face[] access$202(android.hardware.camera2.legacy.LegacyFaceDetectMapper, android.hardware.Camera$Face[])
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        android.hardware.Camera$Face[] r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r1 := @parameter1: android.hardware.Camera$Face[];

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFaces> = r1;

        return r1;
    }

    static java.lang.String access$300()
    {
        java.lang.String $r0;

        $r0 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        return $r0;
    }

    public void mapResultFaces(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        boolean z0, $z1, $z2;
        android.hardware.camera2.CameraCharacteristics r1;
        int i0, i3;
        android.hardware.camera2.CameraCharacteristics$Key $r4;
        java.lang.Object $r5, $r7, $r10, r26;
        android.hardware.camera2.CaptureRequest$Key $r6, $r8;
        android.graphics.Rect $r9, r32;
        java.lang.Float $r11;
        java.util.ArrayList $r12;
        android.hardware.camera2.params.Face[] $r13, $r16;
        android.hardware.camera2.CaptureResult$Key $r14, $r17, $r19;
        java.lang.Object[] $r15;
        java.lang.Integer $r18, $r20;
        java.lang.String $r21;
        android.hardware.camera2.params.Face $r22;
        java.lang.Throwable $r23;
        android.hardware.camera2.impl.CameraMetadataNative r24;
        android.hardware.camera2.legacy.LegacyRequest r25;
        byte b2;
        android.hardware.Camera$Face[] r27;
        android.hardware.camera2.CaptureRequest r29;
        android.util.Size r30;
        android.hardware.Camera$Parameters r31;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r33;
        android.hardware.Camera$Face r35;

        r0 := @this: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r24 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r25 := @parameter1: android.hardware.camera2.legacy.LegacyRequest;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r24, "result must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r25, "legacyRequest must not be null");

        r26 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock>;

        entermonitor r26;

     label01:
        $z1 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting>;

        if $z1 == 0 goto label03;

     label02:
        b2 = 1;

        goto label04;

     label03:
        b2 = 0;

     label04:
        $z2 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting>;

        if $z2 == 0 goto label06;

        r27 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFaces>;

     label05:
        goto label07;

     label06:
        r27 = null;

     label07:
        z0 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectScenePriority>;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFacesPrev> = r27;

        exitmonitor r26;

     label08:
        r1 = r25.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CameraCharacteristics characteristics>;

        r29 = r25.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        r30 = r25.<android.hardware.camera2.legacy.LegacyRequest: android.util.Size previewSize>;

        r31 = r25.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r5 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r4);

        r32 = (android.graphics.Rect) $r5;

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r7 = virtualinvoke r29.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r6);

        $r9 = (android.graphics.Rect) $r7;

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>;

        $r10 = virtualinvoke r29.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r8);

        $r11 = (java.lang.Float) $r10;

        r33 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertToLegacyZoom(android.graphics.Rect,android.graphics.Rect,java.lang.Float,android.util.Size,android.hardware.Camera$Parameters)>(r32, $r9, $r11, r30, r31);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        if r27 == null goto label12;

        i0 = lengthof r27;

        i3 = 0;

     label09:
        if i3 >= i0 goto label12;

        r35 = r27[i3];

        if r35 == null goto label10;

        $r22 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.params.Face convertFaceFromLegacy(android.hardware.Camera$Face,android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData)>(r35, r32, r33);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label11;

     label10:
        $r21 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r21, "mapResultFaces - read NULL face from camera1 device");

     label11:
        i3 = i3 + 1;

        goto label09;

     label12:
        $r14 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACES>;

        $r13 = newarray (android.hardware.camera2.params.Face)[0];

        $r15 = interfaceinvoke $r12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r16 = (android.hardware.camera2.params.Face[]) $r15;

        virtualinvoke r24.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r14, $r16);

        $r17 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_DETECT_MODE>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        virtualinvoke r24.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r17, $r18);

        if z0 == 0 goto label13;

        $r19 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r24.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r19, $r20);

     label13:
        return;

     label14:
        $r23 := @caughtexception;

     label15:
        exitmonitor r26;

     label16:
        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void processFaceDetectMode(android.hardware.camera2.CaptureRequest, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        int i0, i1;
        java.lang.Object $r2, $r4, r23;
        java.lang.Integer $r3, $r5, r19;
        android.hardware.Camera $r6, $r7;
        java.lang.String $r8, $r12, $r13, $r14, r21;
        java.lang.StringBuilder $r9;
        boolean $z1, $z2, z3, $z4, z5, z6;
        java.lang.Throwable $r15;
        android.hardware.camera2.CaptureRequest r16;
        android.hardware.Camera$Parameters r17;
        android.hardware.camera2.CaptureRequest$Key r18, r20;

        r0 := @this: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r16 := @parameter0: android.hardware.camera2.CaptureRequest;

        r17 := @parameter1: android.hardware.Camera$Parameters;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r16, "captureRequest must not be null");

        r18 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>;

        r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r16, r18, r19);

        $r3 = (java.lang.Integer) $r2;

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if i0 == 0 goto label01;

        $z2 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectSupported>;

        if $z2 != 0 goto label01;

        $r14 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r14, "processFaceDetectMode - Ignoring statistics.faceDetectMode; face detection is not available");

        return;

     label01:
        r20 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r4 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r16, r20, r19);

        $r5 = (java.lang.Integer) $r4;

        i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if i1 != 1 goto label02;

        $z1 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectSupported>;

        if $z1 != 0 goto label02;

        $r13 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r13, "processFaceDetectMode - ignoring control.sceneMode == FACE_PRIORITY; face detection is not available");

        return;

     label02:
        if i0 == 0 goto label04;

        if i0 == 1 goto label04;

        if i0 == 2 goto label03;

        r21 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processFaceDetectMode - ignoring unknown statistics.faceDetectMode = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r21, $r12);

        return;

     label03:
        $r8 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, "processFaceDetectMode - statistics.faceDetectMode == FULL unsupported, downgrading to SIMPLE");

        goto label04;

     label04:
        if i0 != 0 goto label06;

        if i1 != 1 goto label05;

        goto label06;

     label05:
        z3 = 0;

        goto label07;

     label06:
        z3 = 1;

     label07:
        r23 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock>;

        entermonitor r23;

     label08:
        $z4 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled>;

        if z3 == $z4 goto label19;

     label09:
        if z3 == 0 goto label12;

     label10:
        $r7 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera>;

        virtualinvoke $r7.<android.hardware.Camera: void startFaceDetection()>();

     label11:
        goto label13;

     label12:
        $r6 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera>;

        virtualinvoke $r6.<android.hardware.Camera: void stopFaceDetection()>();

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFaces> = null;

     label13:
        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled> = z3;

     label14:
        if i1 != 1 goto label15;

        z5 = 1;

        goto label16;

     label15:
        z5 = 0;

     label16:
        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectScenePriority> = z5;

     label17:
        z6 = 0;

        if i0 == 0 goto label18;

        z6 = 1;

     label18:
        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting> = z6;

     label19:
        exitmonitor r23;

     label20:
        return;

     label21:
        $r15 := @caughtexception;

     label22:
        exitmonitor r23;

     label23:
        throw $r15;

        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }
}
