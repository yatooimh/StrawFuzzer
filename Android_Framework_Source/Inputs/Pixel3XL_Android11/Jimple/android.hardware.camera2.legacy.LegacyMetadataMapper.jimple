public class android.hardware.camera2.legacy.LegacyMetadataMapper extends java.lang.Object
{
    private static final long APPROXIMATE_CAPTURE_DELAY_MS;
    private static final long APPROXIMATE_JPEG_ENCODE_TIME_MS;
    private static final long APPROXIMATE_SENSOR_AREA_PX;
    private static final boolean DEBUG;
    public static final int HAL_PIXEL_FORMAT_BGRA_8888;
    public static final int HAL_PIXEL_FORMAT_BLOB;
    public static final int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED;
    public static final int HAL_PIXEL_FORMAT_RGBA_8888;
    private static final float LENS_INFO_MINIMUM_FOCUS_DISTANCE_FIXED_FOCUS;
    static final boolean LIE_ABOUT_AE_MAX_REGIONS;
    static final boolean LIE_ABOUT_AE_STATE;
    static final boolean LIE_ABOUT_AF;
    static final boolean LIE_ABOUT_AF_MAX_REGIONS;
    static final boolean LIE_ABOUT_AWB;
    static final boolean LIE_ABOUT_AWB_STATE;
    private static final long NS_PER_MS;
    private static final float PREVIEW_ASPECT_RATIO_TOLERANCE;
    private static final int REQUEST_MAX_NUM_INPUT_STREAMS_COUNT;
    private static final int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC;
    private static final int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC_STALL;
    private static final int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_RAW;
    private static final int REQUEST_PIPELINE_MAX_DEPTH_HAL1;
    private static final int REQUEST_PIPELINE_MAX_DEPTH_OURS;
    private static final java.lang.String TAG;
    static final int UNKNOWN_MODE;
    private static final int[] sAllowedTemplates;
    private static final int[] sEffectModes;
    private static final java.lang.String[] sLegacyEffectMode;
    private static final java.lang.String[] sLegacySceneModes;
    private static final int[] sSceneModes;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r2;
        int[] $r1, $r3, $r4;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int UNKNOWN_MODE> = -1;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String TAG> = "LegacyMetadataMapper";

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_PIPELINE_MAX_DEPTH_OURS> = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_PIPELINE_MAX_DEPTH_HAL1> = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_RAW> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC_STALL> = 1;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC> = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_INPUT_STREAMS_COUNT> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: float PREVIEW_ASPECT_RATIO_TOLERANCE> = 0.01F;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long NS_PER_MS> = 1000000L;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AWB_STATE> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AWB> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AF_MAX_REGIONS> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AF> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AE_STATE> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AE_MAX_REGIONS> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: float LENS_INFO_MINIMUM_FOCUS_DISTANCE_FIXED_FOCUS> = 0.0F;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_RGBA_8888> = 1;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED> = 34;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_BLOB> = 33;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_BGRA_8888> = 5;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean DEBUG> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long APPROXIMATE_SENSOR_AREA_PX> = 8388608L;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long APPROXIMATE_JPEG_ENCODE_TIME_MS> = 600L;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long APPROXIMATE_CAPTURE_DELAY_MS> = 200L;

        $r0 = newarray (java.lang.String)[17];

        $r0[0] = "auto";

        $r0[1] = "action";

        $r0[2] = "portrait";

        $r0[3] = "landscape";

        $r0[4] = "night";

        $r0[5] = "night-portrait";

        $r0[6] = "theatre";

        $r0[7] = "beach";

        $r0[8] = "snow";

        $r0[9] = "sunset";

        $r0[10] = "steadyphoto";

        $r0[11] = "fireworks";

        $r0[12] = "sports";

        $r0[13] = "party";

        $r0[14] = "candlelight";

        $r0[15] = "barcode";

        $r0[16] = "hdr";

        <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes> = $r0;

        $r1 = newarray (int)[17];

        $r1[0] = 0;

        $r1[1] = 2;

        $r1[2] = 3;

        $r1[3] = 4;

        $r1[4] = 5;

        $r1[5] = 6;

        $r1[6] = 7;

        $r1[7] = 8;

        $r1[8] = 9;

        $r1[9] = 10;

        $r1[10] = 11;

        $r1[11] = 12;

        $r1[12] = 13;

        $r1[13] = 14;

        $r1[14] = 15;

        $r1[15] = 16;

        $r1[16] = 18;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes> = $r1;

        $r2 = newarray (java.lang.String)[9];

        $r2[0] = "none";

        $r2[1] = "mono";

        $r2[2] = "negative";

        $r2[3] = "solarize";

        $r2[4] = "sepia";

        $r2[5] = "posterize";

        $r2[6] = "whiteboard";

        $r2[7] = "blackboard";

        $r2[8] = "aqua";

        <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode> = $r2;

        $r3 = newarray (int)[9];

        $r3[0] = 0;

        $r3[1] = 1;

        $r3[2] = 2;

        $r3[3] = 3;

        $r3[4] = 4;

        $r3[5] = 5;

        $r3[6] = 6;

        $r3[7] = 7;

        $r3[8] = 8;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes> = $r3;

        $r4 = newarray (int)[3];

        $r4[0] = 1;

        $r4[1] = 2;

        $r4[2] = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sAllowedTemplates> = $r4;

        return;
    }

    public void <init>()
    {
        android.hardware.camera2.legacy.LegacyMetadataMapper r0;

        r0 := @this: android.hardware.camera2.legacy.LegacyMetadataMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void appendStreamConfig(java.util.ArrayList, int, java.util.List)
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        android.hardware.camera2.params.StreamConfiguration $r3;
        java.util.List r4;
        android.hardware.Camera$Size r5;

        r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        r4 := @parameter2: java.util.List;

        r1 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.Camera$Size) $r2;

        $r3 = new android.hardware.camera2.params.StreamConfiguration;

        $i2 = r5.<android.hardware.Camera$Size: int width>;

        $i1 = r5.<android.hardware.Camera$Size: int height>;

        specialinvoke $r3.<android.hardware.camera2.params.StreamConfiguration: void <init>(int,int,int,boolean)>(i0, $i2, $i1, 0);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return;
    }

    private static long calculateJpegStallDuration(android.hardware.Camera$Size)
    {
        android.hardware.Camera$Size r0;
        int $i0, $i1;
        long $l2, $l3, $l4, $l5, $l6;

        r0 := @parameter0: android.hardware.Camera$Size;

        $i0 = r0.<android.hardware.Camera$Size: int width>;

        $l3 = (long) $i0;

        $i1 = r0.<android.hardware.Camera$Size: int height>;

        $l2 = (long) $i1;

        $l4 = $l3 * $l2;

        $l5 = $l4 * 71L;

        $l6 = $l5 + 200000000L;

        return $l6;
    }

    private static int[] convertAeFpsRangeToLegacy(android.util.Range)
    {
        android.util.Range r0;
        int[] $r1;
        java.lang.Comparable $r2, $r4;
        java.lang.Integer $r3, $r5;
        int $i0, $i1;

        r0 := @parameter0: android.util.Range;

        $r1 = newarray (int)[2];

        $r2 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getLower()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r1[0] = $i0;

        $r4 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getUpper()>();

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r1[1] = $i1;

        return $r1;
    }

    static java.lang.String convertAfModeToLegacy(int, java.util.List)
    {
        int i0;
        java.util.List r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String $r4, r5, r6;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        if r0 == null goto label11;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        goto label11;

     label01:
        r5 = null;

        if i0 == 0 goto label07;

        if i0 == 1 goto label06;

        if i0 == 2 goto label05;

        if i0 == 3 goto label04;

        if i0 == 4 goto label03;

        if i0 == 5 goto label02;

        goto label09;

     label02:
        r5 = "edof";

        goto label09;

     label03:
        r5 = "continuous-picture";

        goto label09;

     label04:
        r5 = "continuous-video";

        goto label09;

     label05:
        r5 = "macro";

        goto label09;

     label06:
        r5 = "auto";

        goto label09;

     label07:
        $z1 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("fixed");

        if $z1 == 0 goto label08;

        r5 = "fixed";

        goto label09;

     label08:
        r5 = "infinity";

     label09:
        r6 = r5;

        $z2 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z2 != 0 goto label10;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (java.lang.String) $r1;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r2[1] = r6;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("convertAfModeToLegacy - ignoring unsupported mode %d, defaulting to %s", $r2);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r4);

     label10:
        return r6;

     label11:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "No focus modes supported; API1 bug");

        return null;
    }

    private static int convertAntiBandingMode(java.lang.String)
    {
        java.lang.String r0, $r5;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2;
        byte b2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return -1;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 109935: goto label06;
            case 1628397: goto label05;
            case 1658188: goto label04;
            case 3005871: goto label03;
            default: goto label02;
        };

     label02:
        goto label07;

     label03:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z0 == 0 goto label02;

        b2 = 3;

        goto label08;

     label04:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("60hz");

        if $z1 == 0 goto label02;

        b2 = 2;

        goto label08;

     label05:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("50hz");

        if $z2 == 0 goto label02;

        b2 = 1;

        goto label08;

     label06:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z3 == 0 goto label02;

        b2 = 0;

        goto label08;

     label07:
        b2 = -1;

     label08:
        if b2 == 0 goto label12;

        if b2 == 1 goto label11;

        if b2 == 2 goto label10;

        if b2 == 3 goto label09;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertAntiBandingMode - Unknown antibanding mode ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r5);

        return -1;

     label09:
        return 3;

     label10:
        return 2;

     label11:
        return 1;

     label12:
        return 0;
    }

    static int convertAntiBandingModeOrDefault(java.lang.String)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertAntiBandingMode(java.lang.String)>(r0);

        if i0 != -1 goto label1;

        return 0;

     label1:
        return i0;
    }

    static int convertEffectModeFromLegacy(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1;
        java.lang.String[] $r1;
        int[] $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode>;

        i0 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(java.lang.Object[],java.lang.Object)>($r1, r0);

        if i0 >= 0 goto label2;

        return -1;

     label2:
        $r2 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes>;

        $i1 = $r2[i0];

        return $i1;
    }

    static java.lang.String convertEffectModeToLegacy(int)
    {
        int[] $r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        int i0, i1;

        i0 := @parameter0: int;

        $r0 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes>;

        i1 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(int[],int)>($r0, i0);

        if i1 >= 0 goto label1;

        return null;

     label1:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode>;

        $r2 = $r1[i1];

        return $r2;
    }

    public static void convertRequestMetadata(android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.LegacyRequest r0;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: void convertRequestMetadata(android.hardware.camera2.legacy.LegacyRequest)>(r0);

        return;
    }

    static int convertSceneModeFromLegacy(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1;
        java.lang.String[] $r1;
        int[] $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes>;

        i0 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(java.lang.Object[],java.lang.Object)>($r1, r0);

        if i0 >= 0 goto label2;

        return -1;

     label2:
        $r2 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes>;

        $i1 = $r2[i0];

        return $i1;
    }

    static java.lang.String convertSceneModeToLegacy(int)
    {
        int[] $r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        int i0, i1;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return "auto";

     label1:
        $r0 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes>;

        i1 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(int[],int)>($r0, i0);

        if i1 >= 0 goto label2;

        return null;

     label2:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes>;

        $r2 = $r1[i1];

        return $r2;
    }

    public static android.hardware.camera2.CameraCharacteristics createCharacteristics(android.hardware.Camera$Parameters, android.hardware.Camera$CameraInfo, int, android.util.Size)
    {
        android.hardware.Camera$CameraInfo r0;
        int i0;
        android.util.Size r1;
        android.hardware.CameraInfo $r5;
        android.hardware.camera2.CameraCharacteristics $r6;
        android.hardware.Camera$Parameters r7;
        java.lang.String r8;

        r7 := @parameter0: android.hardware.Camera$Parameters;

        r0 := @parameter1: android.hardware.Camera$CameraInfo;

        i0 := @parameter2: int;

        r1 := @parameter3: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r7, "parameters must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "info must not be null");

        r8 = virtualinvoke r7.<android.hardware.Camera$Parameters: java.lang.String flatten()>();

        $r5 = new android.hardware.CameraInfo;

        specialinvoke $r5.<android.hardware.CameraInfo: void <init>()>();

        $r5.<android.hardware.CameraInfo: android.hardware.Camera$CameraInfo info> = r0;

        $r6 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.CameraCharacteristics createCharacteristics(java.lang.String,android.hardware.CameraInfo,int,android.util.Size)>(r8, $r5, i0, r1);

        return $r6;
    }

    public static android.hardware.camera2.CameraCharacteristics createCharacteristics(java.lang.String, android.hardware.CameraInfo, int, android.util.Size)
    {
        java.lang.String r0;
        int i0;
        android.util.Size r1;
        android.hardware.Camera$CameraInfo $r5, $r8;
        android.hardware.camera2.impl.CameraMetadataNative $r7;
        android.hardware.camera2.CameraCharacteristics $r9;
        android.hardware.CameraInfo r10;
        android.hardware.Camera$Parameters r11;

        r0 := @parameter0: java.lang.String;

        r10 := @parameter1: android.hardware.CameraInfo;

        i0 := @parameter2: int;

        r1 := @parameter3: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "parameters must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r10, "info must not be null");

        $r5 = r10.<android.hardware.CameraInfo: android.hardware.Camera$CameraInfo info>;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r5, "info.info must not be null");

        $r7 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r7.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        $r8 = r10.<android.hardware.CameraInfo: android.hardware.Camera$CameraInfo info>;

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapCharacteristicsFromInfo(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$CameraInfo)>($r7, $r8);

        r11 = staticinvoke <android.hardware.Camera: android.hardware.Camera$Parameters getEmptyParameters()>();

        virtualinvoke r11.<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>(r0);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapCharacteristicsFromParameters(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>($r7, r11);

        virtualinvoke $r7.<android.hardware.camera2.impl.CameraMetadataNative: void setCameraId(int)>(i0);

        virtualinvoke $r7.<android.hardware.camera2.impl.CameraMetadataNative: void setDisplaySize(android.util.Size)>(r1);

        $r9 = new android.hardware.camera2.CameraCharacteristics;

        specialinvoke $r9.<android.hardware.camera2.CameraCharacteristics: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r7);

        return $r9;
    }

    public static android.hardware.camera2.impl.CameraMetadataNative createRequestTemplate(android.hardware.camera2.CameraCharacteristics, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i14;
        android.util.Range[] r1;
        android.util.Range r2, r85, r86;
        int[] $r3, $r30, $r67;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4;
        android.hardware.camera2.impl.CameraMetadataNative $r5;
        android.hardware.camera2.CaptureRequest$Key $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r25, $r26, $r27, $r31, $r32, $r34, $r36, $r38, $r40, $r42, $r45, $r51, $r53, $r72, $r74, $r76, $r81, r88;
        java.lang.Integer $r7, $r9, $r11, $r15, $r17, $r19, $r33, $r37, $r39, $r41, $r43, $r52, $r54, $r56, $r58, $r62, $r64, $r73, $r75, $r77, $r82;
        java.lang.Boolean $r13, $r21;
        android.hardware.camera2.CameraCharacteristics$Key $r22, $r28, $r44, $r49, $r65, $r78, $r83;
        java.lang.Object $r23, $r29, $r46, $r50, $r66, $r79, $r84;
        android.hardware.camera2.params.MeteringRectangle $r24;
        java.lang.Float $r35, $r48, r80;
        float[] $r47;
        float $f0, $f1;
        java.lang.Comparable $r55, $r57, $r59, $r60, $r61, $r63;
        byte $b11, b12, b13;
        java.lang.AssertionError $r68;
        android.hardware.camera2.CameraCharacteristics r69;
        android.graphics.Rect r70;
        android.hardware.camera2.params.MeteringRectangle[] r71;
        android.util.Size[] r87;
        android.util.Size r89;

        r69 := @parameter0: android.hardware.camera2.CameraCharacteristics;

        i0 := @parameter1: int;

        $r3 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sAllowedTemplates>;

        $z0 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(int[],int)>($r3, i0);

        if $z0 == 0 goto label21;

        $r5 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r6, $r7);

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

        $r10 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r10, $r11);

        $r12 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r12, $r13);

        $r14 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r14, $r15);

        $r16 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r16, $r17);

        $r18 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r18, $r19);

        $r20 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK>;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r20, $r21);

        $r22 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r23 = virtualinvoke r69.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r22);

        r70 = (android.graphics.Rect) $r23;

        r71 = newarray (android.hardware.camera2.params.MeteringRectangle)[1];

        $r24 = new android.hardware.camera2.params.MeteringRectangle;

        $i2 = virtualinvoke r70.<android.graphics.Rect: int width()>();

        $i3 = $i2 - 1;

        $i4 = virtualinvoke r70.<android.graphics.Rect: int height()>();

        $i5 = $i4 - 1;

        specialinvoke $r24.<android.hardware.camera2.params.MeteringRectangle: void <init>(int,int,int,int,int)>(0, 0, $i3, $i5, 0);

        r71[0] = $r24;

        $r25 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r25, r71);

        $r26 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS>;

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r26, r71);

        $r27 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r27, r71);

        if i0 == 1 goto label03;

        if i0 == 2 goto label02;

        if i0 != 3 goto label01;

        b12 = 3;

        goto label04;

     label01:
        $r68 = new java.lang.AssertionError;

        specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>("Impossible; keep in sync with sAllowedTemplates");

        throw $r68;

     label02:
        b12 = 2;

        goto label04;

     label03:
        b12 = 1;

     label04:
        $r72 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b12);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r72, $r73);

        $r74 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r74, $r75);

        $r76 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r76, $r77);

        $r78 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        $r79 = virtualinvoke r69.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r78);

        r80 = (java.lang.Float) $r79;

        if r80 == null goto label05;

        $f1 = virtualinvoke r80.<java.lang.Float: float floatValue()>();

        $b11 = $f1 cmpl 0.0F;

        if $b11 != 0 goto label05;

        b13 = 0;

        goto label10;

     label05:
        if i0 == 3 goto label08;

        if i0 != 4 goto label06;

        goto label08;

     label06:
        if i0 == 1 goto label07;

        if i0 != 2 goto label09;

     label07:
        $r65 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r66 = virtualinvoke r69.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r65);

        $r67 = (int[]) $r66;

        $z2 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(int[],int)>($r67, 4);

        if $z2 == 0 goto label09;

        b13 = 4;

        goto label10;

     label08:
        $r28 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r29 = virtualinvoke r69.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r28);

        $r30 = (int[]) $r29;

        $z1 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(int[],int)>($r30, 3);

        if $z1 == 0 goto label09;

        b13 = 3;

        goto label10;

     label09:
        b13 = 1;

     label10:
        $r81 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r82 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b13);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r81, $r82);

        $r83 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES>;

        $r84 = virtualinvoke r69.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r83);

        r1 = (android.util.Range[]) $r84;

        r85 = r1[0];

        i1 = lengthof r1;

        i14 = 0;

     label11:
        if i14 >= i1 goto label14;

        r2 = r1[i14];

        $r55 = virtualinvoke r85.<android.util.Range: java.lang.Comparable getUpper()>();

        $r56 = (java.lang.Integer) $r55;

        $i7 = virtualinvoke $r56.<java.lang.Integer: int intValue()>();

        $r57 = virtualinvoke r2.<android.util.Range: java.lang.Comparable getUpper()>();

        $r58 = (java.lang.Integer) $r57;

        $i8 = virtualinvoke $r58.<java.lang.Integer: int intValue()>();

        if $i7 >= $i8 goto label12;

        r86 = r2;

        goto label13;

     label12:
        r86 = r85;

        $r59 = virtualinvoke r85.<android.util.Range: java.lang.Comparable getUpper()>();

        $r60 = virtualinvoke r2.<android.util.Range: java.lang.Comparable getUpper()>();

        if $r59 != $r60 goto label13;

        r86 = r85;

        $r61 = virtualinvoke r85.<android.util.Range: java.lang.Comparable getLower()>();

        $r62 = (java.lang.Integer) $r61;

        $i9 = virtualinvoke $r62.<java.lang.Integer: int intValue()>();

        $r63 = virtualinvoke r2.<android.util.Range: java.lang.Comparable getLower()>();

        $r64 = (java.lang.Integer) $r63;

        $i10 = virtualinvoke $r64.<java.lang.Integer: int intValue()>();

        if $i9 >= $i10 goto label13;

        r86 = r2;

     label13:
        i14 = i14 + 1;

        r85 = r86;

        goto label11;

     label14:
        $r31 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r31, r85);

        $r32 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r32, $r33);

        $r34 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>;

        $r35 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r34, $r35);

        $r36 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r36, $r37);

        $r38 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r38, $r39);

        if i0 != 2 goto label15;

        $r53 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r53, $r54);

        goto label16;

     label15:
        $r40 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r40, $r41);

     label16:
        if i0 != 2 goto label17;

        $r51 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r51, $r52);

        goto label18;

     label17:
        $r42 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r42, $r43);

     label18:
        $r45 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH>;

        $r44 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS>;

        $r46 = virtualinvoke r69.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r44);

        $r47 = (float[]) $r46;

        $f0 = $r47[0];

        $r48 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r45, $r48);

        $r49 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES>;

        $r50 = virtualinvoke r69.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r49);

        r87 = (android.util.Size[]) $r50;

        r88 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE>;

        $i6 = lengthof r87;

        if $i6 <= 1 goto label19;

        r89 = r87[1];

        goto label20;

     label19:
        r89 = r87[0];

     label20:
        virtualinvoke $r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r88, r89);

        return $r5;

     label21:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("templateId out of range");

        throw $r4;
    }

    private static int[] getTagsForKeys(android.hardware.camera2.CameraCharacteristics$Key[])
    {
        android.hardware.camera2.CameraCharacteristics$Key[] r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @parameter0: android.hardware.camera2.CameraCharacteristics$Key[];

        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $i2 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static int[] getTagsForKeys(android.hardware.camera2.CaptureRequest$Key[])
    {
        android.hardware.camera2.CaptureRequest$Key[] r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        android.hardware.camera2.CaptureRequest$Key $r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest$Key[];

        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $i2 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static int[] getTagsForKeys(android.hardware.camera2.CaptureResult$Key[])
    {
        android.hardware.camera2.CaptureResult$Key[] r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        android.hardware.camera2.CaptureResult$Key $r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @parameter0: android.hardware.camera2.CaptureResult$Key[];

        $i0 = lengthof r0;

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $i2 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static void mapCharacteristicsFromInfo(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$CameraInfo)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$CameraInfo r1;
        android.hardware.camera2.CameraCharacteristics$Key r2, $r4;
        int $i0, $i1;
        java.lang.Integer $r3, $r5;
        byte b2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$CameraInfo;

        r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $i0 = r1.<android.hardware.Camera$CameraInfo: int facing>;

        if $i0 != 0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>(r2, $r3);

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $i1 = r1.<android.hardware.Camera$CameraInfo: int orientation>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r4, $r5);

        return;
    }

    private static void mapCharacteristicsFromParameters(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        int[] $r2, $r4;
        android.hardware.camera2.CameraCharacteristics$Key $r3, $r5, $r6;
        java.lang.Integer $r7;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES>;

        $r2 = newarray (int)[2];

        $r2[0] = 1;

        $r2[1] = 2;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r3, $r2);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlAe(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlAf(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlAwb(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlOther(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapLens(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapFlash(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapJpeg(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES>;

        $r4 = newarray (int)[2];

        $r4[0] = 1;

        $r4[1] = 2;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r5, $r4);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapScaler(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapSensor(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapStatistics(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapSync(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r6, $r7);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapScalerStreamConfigs(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapRequest(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        return;
    }

    private static void mapControlAe(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        android.util.Range[] r2;
        int[] r3, $r4, $r11, $r12, $r18, r22, r26, r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12;
        float f0;
        boolean z0, $z1, $z2;
        android.hardware.camera2.CameraCharacteristics$Key $r5, $r8, $r17, $r28, $r29, $r33, $r35;
        java.lang.AssertionError $r6, $r7;
        java.util.List $r9, r21, r24;
        java.lang.String[] $r10;
        java.lang.Object $r13, $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Integer $r14, $r15, $r30, $r31;
        android.util.Range $r16, $r32;
        java.lang.String $r20;
        java.util.Iterator r23, r25;
        android.util.Rational $r34;
        java.lang.Boolean $r36;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r21 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>();

        if r21 == null goto label03;

        $i6 = interfaceinvoke r21.<java.util.List: int size()>();

        if $i6 <= 0 goto label03;

        $i7 = interfaceinvoke r21.<java.util.List: int size()>();

        r22 = newarray (int)[$i7];

        i9 = 0;

        r23 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label02;

        $r19 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.String) $r19;

        $i8 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertAntiBandingMode(java.lang.String)>($r20);

        r22[i9] = $i8;

        i9 = i9 + 1;

        goto label01;

     label02:
        $r17 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES>;

        $r18 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r22, i9);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r17, $r18);

        goto label04;

     label03:
        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES>;

        $r4 = newarray (int)[0];

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r5, $r4);

     label04:
        r24 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        if r24 == null goto label10;

        i10 = interfaceinvoke r24.<java.util.List: int size()>();

        if i10 <= 0 goto label09;

        r2 = newarray (android.util.Range)[i10];

        i11 = 0;

        r25 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r13 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r3 = (int[]) $r13;

        $i2 = r3[0];

        $d0 = (double) $i2;

        $d1 = $d0 / 1000.0;

        $d2 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        $i3 = (int) $d2;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i4 = r3[1];

        $d3 = (double) $i4;

        $d4 = $d3 / 1000.0;

        $d5 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        $i5 = (int) $d5;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r16 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r14, $r15);

        r2[i11] = $r16;

        i11 = i11 + 1;

        goto label05;

     label06:
        $r8 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r8, r2);

        $r9 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>();

        $r10 = newarray (java.lang.String)[5];

        $r10[0] = "off";

        $r10[1] = "auto";

        $r10[2] = "on";

        $r10[3] = "red-eye";

        $r10[4] = "torch";

        $r11 = newarray (int)[4];

        $r11[0] = 1;

        $r11[1] = 2;

        $r11[2] = 3;

        $r11[3] = 4;

        r26 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] convertStringListToIntArray(java.util.List,java.lang.String[],int[])>($r9, $r10, $r11);

        if r26 == null goto label07;

        r27 = r26;

        $i1 = lengthof r26;

        if $i1 != 0 goto label08;

     label07:
        $r12 = newarray (int)[1];

        $r12[0] = 1;

        r27 = $r12;

     label08:
        $r28 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_MODES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r28, r27);

        i12 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMinExposureCompensation()>();

        i0 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxExposureCompensation()>();

        $r29 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r32 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r30, $r31);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r29, $r32);

        f0 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getExposureCompensationStep()>();

        $r33 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_STEP>;

        $r34 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.util.Rational createRational(float)>(f0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r33, $r34);

        z0 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>();

        $r35 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_LOCK_AVAILABLE>;

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r35, $r36);

        return;

     label09:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("At least one FPS range must be supported.");

        throw $r7;

     label10:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Supported FPS ranges cannot be null.");

        throw $r6;
    }

    private static void mapControlAf(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        java.util.List r1, $r2, r12, r13;
        java.lang.String[] $r3;
        int[] $r4, $r10;
        java.lang.Integer $r6;
        int $i1;
        android.hardware.Camera$Parameters r7;
        java.lang.Object r8;
        android.hardware.camera2.CameraCharacteristics$Key $r9;
        java.util.ArrayList r11;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r7 := @parameter1: android.hardware.Camera$Parameters;

        $r2 = virtualinvoke r7.<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>();

        $r3 = newarray (java.lang.String)[7];

        $r3[0] = "auto";

        $r3[1] = "continuous-picture";

        $r3[2] = "continuous-video";

        $r3[3] = "edof";

        $r3[4] = "infinity";

        $r3[5] = "macro";

        $r3[6] = "fixed";

        $r4 = newarray (int)[7];

        $r4[0] = 1;

        $r4[1] = 4;

        $r4[2] = 3;

        $r4[3] = 5;

        $r4[4] = 0;

        $r4[5] = 2;

        $r4[6] = 0;

        r1 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: java.util.List convertStringListToIntList(java.util.List,java.lang.String[],int[])>($r2, $r3, $r4);

        if r1 == null goto label1;

        r8 = r1;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 != 0 goto label2;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "No AF modes supported (HAL bug); defaulting to AF_MODE_OFF only");

        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>(int)>(1);

        r8 = r11;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r12 = (java.util.List) r11;

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        r13 = (java.util.List) r8;

        $r10 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] toIntArray(java.util.List)>(r13);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r9, $r10);

        return;
    }

    private static void mapControlAwb(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        java.util.List r2, $r3, r14, r15;
        boolean z0;
        java.lang.String[] $r4;
        int[] $r5, $r10;
        java.lang.Integer $r7;
        int $i1;
        java.lang.Object r8;
        android.hardware.camera2.CameraCharacteristics$Key $r9, $r11;
        java.lang.Boolean $r12;
        java.util.ArrayList r13;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r3 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>();

        $r4 = newarray (java.lang.String)[8];

        $r4[0] = "auto";

        $r4[1] = "incandescent";

        $r4[2] = "fluorescent";

        $r4[3] = "warm-fluorescent";

        $r4[4] = "daylight";

        $r4[5] = "cloudy-daylight";

        $r4[6] = "twilight";

        $r4[7] = "shade";

        $r5 = newarray (int)[8];

        $r5[0] = 1;

        $r5[1] = 2;

        $r5[2] = 3;

        $r5[3] = 4;

        $r5[4] = 5;

        $r5[5] = 6;

        $r5[6] = 7;

        $r5[7] = 8;

        r2 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: java.util.List convertStringListToIntList(java.util.List,java.lang.String[],int[])>($r3, $r4, $r5);

        if r2 == null goto label1;

        r8 = r2;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 != 0 goto label2;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "No AWB modes supported (HAL bug); defaulting to AWB_MODE_AUTO only");

        r13 = new java.util.ArrayList;

        specialinvoke r13.<java.util.ArrayList: void <init>(int)>(1);

        r8 = r13;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r14 = (java.util.List) r13;

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_AVAILABLE_MODES>;

        r15 = (java.util.List) r8;

        $r10 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] toIntArray(java.util.List)>(r15);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r9, $r10);

        z0 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>();

        $r11 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_LOCK_AVAILABLE>;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r11, $r12);

        return;
    }

    private static void mapControlOther(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        int i0, $i1, i2, i3;
        java.util.List r1, r22, r24, r25, r31, r32, r33, r34;
        boolean $z0, $z1, $z2, $z4, z6;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r4, $r7, $r11, $r13, r27;
        int[] $r3, $r5, $r8, $r10, $r14, r21, r23, r28;
        java.lang.String[] $r6, $r9;
        java.lang.Integer $r12, $r16, r30;
        java.lang.Object $r18, r26;
        java.lang.String $r19;
        android.hardware.Camera$Parameters r20;
        java.util.ArrayList r29;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r20 := @parameter1: android.hardware.Camera$Parameters;

        $z0 = virtualinvoke r20.<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>();

        if $z0 == 0 goto label01;

        r21 = newarray (int)[2];

        r21[0] = 0;

        r21[1] = 1;

        goto label02;

     label01:
        r21 = newarray (int)[1];

        r21[0] = 0;

     label02:
        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r2, r21);

        i2 = virtualinvoke r20.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        i3 = virtualinvoke r20.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS>;

        $r3 = newarray (int)[3];

        $r3[0] = i2;

        $r3[1] = 0;

        $r3[2] = i3;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r4, $r3);

        r22 = virtualinvoke r20.<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>();

        if r22 != null goto label03;

        r23 = newarray (int)[0];

        goto label04;

     label03:
        $r6 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode>;

        $r5 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes>;

        r23 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] convertStringListToIntArray(java.util.List,java.lang.String[],int[])>(r22, $r6, $r5);

     label04:
        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EFFECTS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r7, r23);

        i0 = virtualinvoke r20.<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>();

        r1 = virtualinvoke r20.<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>();

        $r9 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes>;

        $r8 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes>;

        r24 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: java.util.List convertStringListToIntList(java.util.List,java.lang.String[],int[])>(r1, $r9, $r8);

        r25 = r24;

        if r1 == null goto label05;

        r25 = r24;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 != 1 goto label05;

        r25 = r24;

        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r19 = (java.lang.String) $r18;

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z4 == 0 goto label05;

        r25 = null;

     label05:
        z6 = 1;

        if r25 != null goto label06;

        z6 = 1;

        if i0 != 0 goto label06;

        z6 = 0;

     label06:
        if z6 == 0 goto label11;

        r26 = r25;

        if r25 != null goto label07;

        r29 = new java.util.ArrayList;

        specialinvoke r29.<java.util.ArrayList: void <init>()>();

        r26 = r29;

     label07:
        if i0 <= 0 goto label08;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r31 = (java.util.List) r26;

        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>($r16);

     label08:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r32 = (java.util.List) r26;

        $z1 = interfaceinvoke r32.<java.util.List: boolean contains(java.lang.Object)>($r12);

        if $z1 == 0 goto label10;

     label09:
        r30 = new java.lang.Integer;

        specialinvoke r30.<java.lang.Integer: void <init>(int)>(0);

        r33 = (java.util.List) r26;

        $z2 = interfaceinvoke r33.<java.util.List: boolean remove(java.lang.Object)>(r30);

        if $z2 == 0 goto label10;

        goto label09;

     label10:
        $r13 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_SCENE_MODES>;

        r34 = (java.util.List) r26;

        $r14 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] toIntArray(java.util.List)>(r34);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r13, $r14);

        goto label12;

     label11:
        $r11 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_SCENE_MODES>;

        $r10 = newarray (int)[1];

        $r10[0] = 0;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r11, $r10);

     label12:
        r27 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_MODES>;

        if z6 == 0 goto label13;

        r28 = newarray (int)[2];

        r28[0] = 1;

        r28[1] = 2;

        goto label14;

     label13:
        r28 = newarray (int)[1];

        r28[0] = 1;

     label14:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>(r27, r28);

        return;
    }

    private static void mapFlash(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        java.lang.Boolean $r2;
        boolean $z0, z1;
        android.hardware.Camera$Parameters r3;
        java.util.List r4;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r3 := @parameter1: android.hardware.Camera$Parameters;

        z1 = 0;

        r4 = virtualinvoke r3.<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>();

        if r4 == null goto label1;

        $z0 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listElementsEqualTo(java.util.List,java.lang.Object)>(r4, "off");

        z1 = $z0 ^ 1;

     label1:
        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r1, $r2);

        return;
    }

    private static void mapJpeg(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.utils.SizeAreaComparator $r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        android.hardware.Camera$Parameters r3;
        java.util.List r4;
        android.util.Size[] r5;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r3 := @parameter1: android.hardware.Camera$Parameters;

        r4 = virtualinvoke r3.<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>();

        if r4 == null goto label1;

        r5 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size[] convertSizeListToArray(java.util.List)>(r4);

        $r1 = new android.hardware.camera2.utils.SizeAreaComparator;

        specialinvoke $r1.<android.hardware.camera2.utils.SizeAreaComparator: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r5, $r1);

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r2, r5);

     label1:
        return;
    }

    private static void mapLens(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        float f0;
        java.lang.String $r2, $r3;
        boolean $z0;
        float[] $r4;
        android.hardware.camera2.CameraCharacteristics$Key $r5, $r6;
        java.lang.Float $r7;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r2 = "fixed";

        $r3 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r6, $r7);

     label1:
        f0 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getFocalLength()>();

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS>;

        $r4 = newarray (float)[1];

        $r4[0] = f0;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r5, $r4);

        return;
    }

    private static void mapRequest(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CaptureRequest$Key[] r1, $r53;
        int[] $r2, $r51, $r85, $r115, $r116;
        android.hardware.camera2.CameraCharacteristics$Key $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r48, $r84, $r114, $r117, $r118, $r120, $r122, $r128;
        java.util.ArrayList $r4, $r52, $r86;
        android.hardware.camera2.CameraCharacteristics$Key[] $r5, $r47, $r50;
        java.util.List $r44, $r82, $r112;
        java.lang.Object $r46;
        java.lang.Object[] $r49;
        android.hardware.camera2.CaptureRequest$Key $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r126, $r127;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.hardware.camera2.CaptureResult$Key[] $r87, r133;
        android.hardware.camera2.CaptureResult$Key $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r124, $r125;
        java.lang.Integer $r119, $r121;
        java.lang.Byte $r123;
        android.hardware.Camera$Parameters r129;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r129 := @parameter1: android.hardware.Camera$Parameters;

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>;

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r3, $r2);

        $r4 = new java.util.ArrayList;

        $r5 = newarray (android.hardware.camera2.CameraCharacteristics$Key)[38];

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES>;

        $r5[0] = $r6;

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES>;

        $r5[1] = $r7;

        $r8 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_MODES>;

        $r5[2] = $r8;

        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES>;

        $r5[3] = $r9;

        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE>;

        $r5[4] = $r10;

        $r11 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_STEP>;

        $r5[5] = $r11;

        $r12 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_LOCK_AVAILABLE>;

        $r5[6] = $r12;

        $r13 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r5[7] = $r13;

        $r14 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EFFECTS>;

        $r5[8] = $r14;

        $r15 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_MODES>;

        $r5[9] = $r15;

        $r16 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_SCENE_MODES>;

        $r5[10] = $r16;

        $r17 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES>;

        $r5[11] = $r17;

        $r18 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_AVAILABLE_MODES>;

        $r5[12] = $r18;

        $r19 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_LOCK_AVAILABLE>;

        $r5[13] = $r19;

        $r20 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS>;

        $r5[14] = $r20;

        $r21 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_ZOOM_RATIO_RANGE>;

        $r5[15] = $r21;

        $r22 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE>;

        $r5[16] = $r22;

        $r23 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r5[17] = $r23;

        $r24 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES>;

        $r5[18] = $r24;

        $r25 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r5[19] = $r25;

        $r26 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS>;

        $r5[20] = $r26;

        $r27 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES>;

        $r5[21] = $r27;

        $r28 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>;

        $r5[22] = $r28;

        $r29 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_STREAMS>;

        $r5[23] = $r29;

        $r30 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>;

        $r5[24] = $r30;

        $r31 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH>;

        $r5[25] = $r31;

        $r32 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $r5[26] = $r32;

        $r33 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_CROPPING_TYPE>;

        $r5[27] = $r33;

        $r34 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_AVAILABLE_TEST_PATTERN_MODES>;

        $r5[28] = $r34;

        $r35 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r5[29] = $r35;

        $r36 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PHYSICAL_SIZE>;

        $r5[30] = $r36;

        $r37 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE>;

        $r5[31] = $r37;

        $r38 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE>;

        $r5[32] = $r38;

        $r39 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_TIMESTAMP_SOURCE>;

        $r5[33] = $r39;

        $r40 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r5[34] = $r40;

        $r41 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES>;

        $r5[35] = $r41;

        $r42 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_MAX_FACE_COUNT>;

        $r5[36] = $r42;

        $r43 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SYNC_MAX_LATENCY>;

        $r5[37] = $r43;

        $r44 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r44);

        $r45 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        $r46 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r45);

        if $r46 == null goto label1;

        $r128 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r128);

     label1:
        $r48 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CHARACTERISTICS_KEYS>;

        $r47 = newarray (android.hardware.camera2.CameraCharacteristics$Key)[0];

        $r49 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r47);

        $r50 = (android.hardware.camera2.CameraCharacteristics$Key[]) $r49;

        $r51 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CameraCharacteristics$Key[])>($r50);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r48, $r51);

        $r52 = new java.util.ArrayList;

        $r53 = newarray (android.hardware.camera2.CaptureRequest$Key)[28];

        $r54 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r53[0] = $r54;

        $r55 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r53[1] = $r55;

        $r56 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r53[2] = $r56;

        $r57 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r53[3] = $r57;

        $r58 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r53[4] = $r58;

        $r59 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        $r53[5] = $r59;

        $r60 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r53[6] = $r60;

        $r61 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r53[7] = $r61;

        $r62 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK>;

        $r53[8] = $r62;

        $r63 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r53[9] = $r63;

        $r64 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r53[10] = $r64;

        $r65 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE>;

        $r53[11] = $r65;

        $r66 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r53[12] = $r66;

        $r67 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r53[13] = $r67;

        $r68 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE>;

        $r53[14] = $r68;

        $r69 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>;

        $r53[15] = $r69;

        $r70 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r53[16] = $r70;

        $r71 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_COORDINATES>;

        $r53[17] = $r71;

        $r72 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_PROCESSING_METHOD>;

        $r53[18] = $r72;

        $r73 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_TIMESTAMP>;

        $r53[19] = $r73;

        $r74 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $r53[20] = $r74;

        $r75 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY>;

        $r53[21] = $r75;

        $r76 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY>;

        $r53[22] = $r76;

        $r77 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE>;

        $r53[23] = $r77;

        $r78 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH>;

        $r53[24] = $r78;

        $r79 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r53[25] = $r79;

        $r80 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r53[26] = $r80;

        $r81 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>;

        $r53[27] = $r81;

        $r82 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r53);

        specialinvoke $r52.<java.util.ArrayList: void <init>(java.util.Collection)>($r82);

        $i0 = virtualinvoke r129.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        if $i0 <= 0 goto label2;

        $r127 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        virtualinvoke $r52.<java.util.ArrayList: boolean add(java.lang.Object)>($r127);

     label2:
        $i1 = virtualinvoke r129.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        if $i1 <= 0 goto label3;

        $r126 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        virtualinvoke $r52.<java.util.ArrayList: boolean add(java.lang.Object)>($r126);

     label3:
        $i2 = virtualinvoke $r52.<java.util.ArrayList: int size()>();

        r1 = newarray (android.hardware.camera2.CaptureRequest$Key)[$i2];

        virtualinvoke $r52.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        $r84 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_REQUEST_KEYS>;

        $r85 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CaptureRequest$Key[])>(r1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r84, $r85);

        $r86 = new java.util.ArrayList;

        $r87 = newarray (android.hardware.camera2.CaptureResult$Key)[24];

        $r88 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r87[0] = $r88;

        $r89 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r87[1] = $r89;

        $r90 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r87[2] = $r90;

        $r91 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_LOCK>;

        $r87[3] = $r91;

        $r92 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_MODE>;

        $r87[4] = $r92;

        $r93 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE>;

        $r87[5] = $r93;

        $r94 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>;

        $r87[6] = $r94;

        $r95 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_MODE>;

        $r87[7] = $r95;

        $r96 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_LOCK>;

        $r87[8] = $r96;

        $r97 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_MODE>;

        $r87[9] = $r97;

        $r98 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_ZOOM_RATIO>;

        $r87[10] = $r98;

        $r99 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_MODE>;

        $r87[11] = $r99;

        $r100 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_COORDINATES>;

        $r87[12] = $r100;

        $r101 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_PROCESSING_METHOD>;

        $r87[13] = $r101;

        $r102 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_TIMESTAMP>;

        $r87[14] = $r102;

        $r103 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_ORIENTATION>;

        $r87[15] = $r103;

        $r104 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_QUALITY>;

        $r87[16] = $r104;

        $r105 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_QUALITY>;

        $r87[17] = $r105;

        $r106 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCAL_LENGTH>;

        $r87[18] = $r106;

        $r107 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key NOISE_REDUCTION_MODE>;

        $r87[19] = $r107;

        $r108 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key REQUEST_PIPELINE_DEPTH>;

        $r87[20] = $r108;

        $r109 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SCALER_CROP_REGION>;

        $r87[21] = $r109;

        $r110 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r87[22] = $r110;

        $r111 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_DETECT_MODE>;

        $r87[23] = $r111;

        $r112 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r87);

        specialinvoke $r86.<java.util.ArrayList: void <init>(java.util.Collection)>($r112);

        $i3 = virtualinvoke r129.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        if $i3 <= 0 goto label4;

        $r125 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_REGIONS>;

        interfaceinvoke $r86.<java.util.List: boolean add(java.lang.Object)>($r125);

     label4:
        $i4 = virtualinvoke r129.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        if $i4 <= 0 goto label5;

        $r124 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_REGIONS>;

        interfaceinvoke $r86.<java.util.List: boolean add(java.lang.Object)>($r124);

     label5:
        $i5 = interfaceinvoke $r86.<java.util.List: int size()>();

        r133 = newarray (android.hardware.camera2.CaptureResult$Key)[$i5];

        interfaceinvoke $r86.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r133);

        $r114 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_RESULT_KEYS>;

        $r115 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CaptureResult$Key[])>(r133);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r114, $r115);

        $r117 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_STREAMS>;

        $r116 = newarray (int)[3];

        $r116[0] = 0;

        $r116[1] = 3;

        $r116[2] = 1;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r117, $r116);

        $r118 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_INPUT_STREAMS>;

        $r119 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r118, $r119);

        $r120 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>;

        $r121 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r120, $r121);

        $r122 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH>;

        $r123 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(6);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r122, $r123);

        return;
    }

    private static void mapScaler(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        android.util.Range $r3;
        java.lang.Float $r4, $r5, $r8;
        float $f0, $f1;
        android.hardware.camera2.CameraCharacteristics$Key $r6, $r7, $r9;
        java.lang.Integer $r10;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r3 = new android.util.Range;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);

        $f0 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: float getMaxZoomRatio(android.hardware.Camera$Parameters)>(r1);

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        specialinvoke $r3.<android.util.Range: void <init>(java.lang.Comparable,java.lang.Comparable)>($r4, $r5);

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_ZOOM_RATIO_RANGE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r6, $r3);

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $f1 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: float getMaxZoomRatio(android.hardware.Camera$Parameters)>(r1);

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r7, $r8);

        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_CROPPING_TYPE>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r9, $r10);

        return;
    }

    private static void mapScalerStreamConfigs(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        java.util.List r2, $r7, $r8, r29, r32;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        long l0, l15, l16;
        java.util.ArrayList $r4;
        android.hardware.camera2.legacy.SizeAreaComparator $r5;
        int $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, i12, i13, i14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Comparator $r6;
        android.hardware.camera2.params.StreamConfiguration[] $r9, $r12;
        android.hardware.camera2.CameraCharacteristics$Key $r10, $r14, $r15, $r16;
        java.lang.Object[] $r11;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r13, r35;
        java.lang.Long $r17;
        java.lang.Object $r18, $r20, $r26;
        android.hardware.camera2.params.StreamConfigurationDuration $r19;
        byte $b6, $b11;
        java.lang.Integer $r21;
        java.lang.StringBuilder $r22;
        java.lang.String $r25;
        android.hardware.Camera$Parameters r28;
        android.hardware.Camera$Size r30, r31, r37;
        java.util.Iterator r34, r36;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r28 := @parameter1: android.hardware.Camera$Parameters;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r29 = virtualinvoke r28.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

        r2 = virtualinvoke r28.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        $r5 = new android.hardware.camera2.legacy.SizeAreaComparator;

        specialinvoke $r5.<android.hardware.camera2.legacy.SizeAreaComparator: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r29, $r5);

        r30 = staticinvoke <android.hardware.camera2.legacy.SizeAreaComparator: android.hardware.Camera$Size findLargestByArea(java.util.List)>(r2);

        $i1 = r30.<android.hardware.Camera$Size: int width>;

        $f1 = (float) $i1;

        $f3 = $f1 * 1.0F;

        $i2 = r30.<android.hardware.Camera$Size: int height>;

        $f2 = (float) $i2;

        f0 = $f3 / $f2;

     label1:
        $z0 = interfaceinvoke r29.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i8 = interfaceinvoke r29.<java.util.List: int size()>();

        i12 = $i8 - 1;

        $r26 = interfaceinvoke r29.<java.util.List: java.lang.Object get(int)>(i12);

        r31 = (android.hardware.Camera$Size) $r26;

        $i9 = r31.<android.hardware.Camera$Size: int width>;

        $f4 = (float) $i9;

        $f6 = $f4 * 1.0F;

        $i10 = r31.<android.hardware.Camera$Size: int height>;

        $f5 = (float) $i10;

        $f7 = $f6 / $f5;

        $f8 = f0 - $f7;

        $f9 = staticinvoke <java.lang.Math: float abs(float)>($f8);

        $b11 = $f9 cmpl 0.01F;

        if $b11 < 0 goto label2;

        interfaceinvoke r29.<java.util.List: java.lang.Object remove(int)>(i12);

        goto label1;

     label2:
        r32 = r29;

        $z1 = interfaceinvoke r29.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapScalerStreamConfigs - failed to find any preview size matching JPEG aspect ratio ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r25);

        r32 = virtualinvoke r28.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

     label3:
        $r6 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>($r5);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r32, $r6);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>($r4, 34, r32);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>($r4, 35, r32);

        $r7 = virtualinvoke r28.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()>();

        r34 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r20 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.lang.Integer) $r20;

        i13 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        $z3 = staticinvoke <android.graphics.ImageFormat: boolean isPublicFormat(int)>(i13);

        if $z3 == 0 goto label5;

        if i13 == 17 goto label5;

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>($r4, i13, r32);

     label5:
        goto label4;

     label6:
        $r8 = virtualinvoke r28.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>($r4, 33, $r8);

        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_STREAM_CONFIGURATIONS>;

        $r9 = newarray (android.hardware.camera2.params.StreamConfiguration)[0];

        $r11 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r12 = (android.hardware.camera2.params.StreamConfiguration[]) $r11;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r10, $r12);

        $r14 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MIN_FRAME_DURATIONS>;

        $r13 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r14, $r13);

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        r35 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[$i3];

        i14 = 0;

        l15 = -1L;

        r36 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r18 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (android.hardware.Camera$Size) $r18;

        l0 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: long calculateJpegStallDuration(android.hardware.Camera$Size)>(r37);

        $r19 = new android.hardware.camera2.params.StreamConfigurationDuration;

        $i5 = r37.<android.hardware.Camera$Size: int width>;

        $i4 = r37.<android.hardware.Camera$Size: int height>;

        specialinvoke $r19.<android.hardware.camera2.params.StreamConfigurationDuration: void <init>(int,int,int,long)>(33, $i5, $i4, l0);

        r35[i14] = $r19;

        l16 = l15;

        $b6 = l15 cmp l0;

        if $b6 >= 0 goto label8;

        l16 = l0;

     label8:
        i14 = i14 + 1;

        l15 = l16;

        goto label7;

     label9:
        $r15 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_STALL_DURATIONS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r15, r35);

        $r16 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_MAX_FRAME_DURATION>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l15);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r16, $r17);

        return;
    }

    private static void mapSensor(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        android.util.Size r2;
        android.graphics.Rect r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        float f0, $f1, $f2, $f3, $f4, f5, f6;
        android.hardware.camera2.CameraCharacteristics$Key $r4, $r5, $r7, $r8, $r10, $r11;
        int[] $r6;
        android.util.SizeF $r9;
        java.lang.Integer $r12;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r2 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size getLargestSupportedJpegSizeByArea(android.hardware.Camera$Parameters)>(r1);

        r3 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.util.Size)>(r2);

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r4, r3);

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r5, r3);

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_AVAILABLE_TEST_PATTERN_MODES>;

        $r6 = newarray (int)[1];

        $r6[0] = 0;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r7, $r6);

        $r8 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r8, r2);

        f5 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getFocalLength()>();

        $f1 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getHorizontalViewAngle()>();

        $d2 = (double) $f1;

        $d3 = $d2 * 3.141592653589793;

        d0 = $d3 / 180.0;

        $f2 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getVerticalViewAngle()>();

        $d4 = (double) $f2;

        $d5 = $d4 * 3.141592653589793;

        d1 = $d5 / 180.0;

        $f3 = f5 * 2.0F;

        $d7 = (double) $f3;

        $d6 = d1 / 2.0;

        $d8 = staticinvoke <java.lang.Math: double tan(double)>($d6);

        $d9 = $d7 * $d8;

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d9);

        f0 = (float) $d10;

        $f4 = 2.0F * f5;

        $d12 = (double) $f4;

        $d11 = d0 / 2.0;

        $d13 = staticinvoke <java.lang.Math: double tan(double)>($d11);

        $d14 = $d12 * $d13;

        $d15 = staticinvoke <java.lang.Math: double abs(double)>($d14);

        f6 = (float) $d15;

        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PHYSICAL_SIZE>;

        $r9 = new android.util.SizeF;

        specialinvoke $r9.<android.util.SizeF: void <init>(float,float)>(f6, f0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r10, $r9);

        $r11 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_TIMESTAMP_SOURCE>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r11, $r12);

        return;
    }

    private static void mapStatistics(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        int $i0, $i1;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r3;
        java.lang.Integer $r4;
        int[] r5;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $i0 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>();

        if $i0 <= 0 goto label1;

        r5 = newarray (int)[2];

        r5[0] = 0;

        r5[1] = 1;

        goto label2;

     label1:
        r5 = newarray (int)[1];

        r5[0] = 0;

     label2:
        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r2, r5);

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_MAX_FACE_COUNT>;

        $i1 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r3, $r4);

        return;
    }

    private static void mapSync(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SYNC_MAX_LATENCY>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r2, $r3);

        return;
    }
}
