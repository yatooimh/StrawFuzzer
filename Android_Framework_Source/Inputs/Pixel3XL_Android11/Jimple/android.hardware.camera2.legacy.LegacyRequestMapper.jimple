public class android.hardware.camera2.legacy.LegacyRequestMapper extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final byte DEFAULT_JPEG_QUALITY;
    private static final java.lang.String TAG;

    public void <init>()
    {
        android.hardware.camera2.legacy.LegacyRequestMapper r0;

        r0 := @this: android.hardware.camera2.legacy.LegacyRequestMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean checkForCompleteGpsData(android.location.Location)
    {
        android.location.Location r0;
        java.lang.String $r1;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @parameter0: android.location.Location;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<android.location.Location: java.lang.String getProvider()>();

        if $r1 == null goto label1;

        $l0 = virtualinvoke r0.<android.location.Location: long getTime()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static java.lang.String convertAeAntiBandingModeToLegacy(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        return null;

     label1:
        return "auto";

     label2:
        return "60hz";

     label3:
        return "50hz";

     label4:
        return "off";
    }

    private static int[] convertAeFpsRangeToLegacy(android.util.Range)
    {
        android.util.Range r0;
        int[] $r1;
        java.lang.Comparable $r2, $r4;
        java.lang.Integer $r3, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: android.util.Range;

        $r1 = newarray (int)[2];

        $r2 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getLower()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i0 * 1000;

        $r1[0] = $i1;

        $r4 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getUpper()>();

        $r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i3 = $i2 * 1000;

        $r1[1] = $i3;

        return $r1;
    }

    private static java.lang.String convertAwbModeToLegacy(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label9;
            case 2: goto label8;
            case 3: goto label7;
            case 4: goto label6;
            case 5: goto label5;
            case 6: goto label4;
            case 7: goto label3;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertAwbModeToLegacy - unrecognized control.awbMode");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r4);

        return "auto";

     label2:
        return "shade";

     label3:
        return "twilight";

     label4:
        return "cloudy-daylight";

     label5:
        return "daylight";

     label6:
        return "warm-fluorescent";

     label7:
        return "fluorescent";

     label8:
        return "incandescent";

     label9:
        return "auto";
    }

    private static java.util.List convertMeteringRegionsToLegacy(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.camera2.params.MeteringRectangle[], int, java.lang.String)
    {
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r0;
        int i0, $i1, $i2, $i3, $i6, i7, i8, i9, i10;
        java.lang.String r1, $r13;
        android.hardware.Camera$Area[] $r3, $r17;
        android.hardware.Camera$Area $r4, $r16, $r18;
        java.util.List $r5, $r19;
        java.util.ArrayList $r6, $r7;
        java.lang.StringBuilder $r8;
        java.lang.Object $r14;
        android.hardware.camera2.legacy.ParameterUtils$MeteringData $r15;
        android.graphics.Rect r20;
        android.hardware.camera2.params.MeteringRectangle[] r21;
        android.hardware.camera2.params.MeteringRectangle r22, r24;

        r20 := @parameter0: android.graphics.Rect;

        r0 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r21 := @parameter2: android.hardware.camera2.params.MeteringRectangle[];

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        if r21 == null goto label09;

        if i0 > 0 goto label01;

        goto label09;

     label01:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i7 = lengthof r21;

        i8 = 0;

     label02:
        if i8 >= i7 goto label04;

        r22 = r21[i8];

        $i6 = virtualinvoke r22.<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>();

        if $i6 == 0 goto label03;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r22);

     label03:
        i8 = i8 + 1;

        goto label02;

     label04:
        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 != 0 goto label05;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "Only received metering rectangles with weight 0.");

        $r17 = newarray (android.hardware.Camera$Area)[1];

        $r18 = <android.hardware.camera2.legacy.ParameterUtils: android.hardware.Camera$Area CAMERA_AREA_DEFAULT>;

        $r17[0] = $r18;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        return $r19;

     label05:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i2);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(i9);

        i10 = 0;

     label06:
        if i10 >= i9 goto label07;

        $r14 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i10);

        r24 = (android.hardware.camera2.params.MeteringRectangle) $r14;

        $r15 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$MeteringData convertMeteringRectangleToLegacy(android.graphics.Rect,android.hardware.camera2.params.MeteringRectangle,android.hardware.camera2.legacy.ParameterUtils$ZoomData)>(r20, r24, r0);

        $r16 = $r15.<android.hardware.camera2.legacy.ParameterUtils$MeteringData: android.hardware.Camera$Area meteringArea>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r16);

        i10 = i10 + 1;

        goto label06;

     label07:
        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i0 >= $i3 goto label08;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertMeteringRegionsToLegacy - Too many requested ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" regions, ignoring all beyond the first ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r13);

     label08:
        return $r7;

     label09:
        if i0 <= 0 goto label10;

        $r3 = newarray (android.hardware.Camera$Area)[1];

        $r4 = <android.hardware.camera2.legacy.ParameterUtils: android.hardware.Camera$Area CAMERA_AREA_DEFAULT>;

        $r3[0] = $r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        return $r5;

     label10:
        return null;
    }

    public static void convertRequestMetadata(android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.CameraCharacteristics r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.Camera$Parameters r2;
        java.util.Iterator r3;
        int[] r4, r115, r116, r117;
        android.hardware.camera2.CameraCharacteristics$Key $r5, $r119;
        java.lang.Object $r6, $r8, $r11, $r15, $r19, $r21, $r23, $r25, $r27, $r31, $r34, $r40, $r44, $r47, $r52, $r54, $r58, $r62, $r67, $r78, $r84, $r88, $r98, $r107, $r120, $r124, $r135, $r141, $r153, $r159, $r167;
        android.hardware.camera2.CaptureRequest$Key $r7, $r9, $r13, $r20, $r22, $r24, $r26, $r28, $r32, $r41, $r45, $r51, $r56, $r60, $r66, $r76, $r82, $r86, $r106, $r122, r129, $r132, $r138, $r151, $r158, r161, $r165;
        android.graphics.Rect $r10, r103;
        java.lang.Float $r12, $r139, $r140, r142;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, $z11, z12, z13, z14;
        java.lang.Integer $r14, $r16, $r33, $r35, $r38, $r39, $r46, $r48, $r53, $r55, $r77, $r79, $r83, $r85, $r87, $r89, r108, $r123, $r125, $r126, r130, $r133, $r134, r136, $r152, $r154, r160, $r166, $r168;
        java.util.List $r17, $r36, $r37, $r95, r111, r113, $r137, $r144, $r148, r162;
        java.lang.String[] $r18;
        java.lang.Boolean $r29, $r30, $r42, $r43, r127, r131;
        int $i0, $i1, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41;
        java.lang.StringBuilder $r49, $r64, $r68, $r70, $r74, $r80, $r90, $r92, $r96, $r99;
        java.lang.String $r50, $r65, $r69, $r71, $r72, $r73, $r75, $r81, $r91, $r93, $r94, $r97, $r100, r109, r128, r146, r149;
        java.lang.Byte $r57, $r59, $r61, $r63;
        byte $b2, $b4, $b12;
        short $s3, $s5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        long $l11;
        float $f0;
        android.hardware.camera2.legacy.LegacyRequest r101;
        android.util.Size r102, r163;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r104;
        android.hardware.camera2.params.MeteringRectangle[] r110, r112;
        android.util.Range r114, r121;
        android.location.Location r156;

        r101 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        r0 = r101.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CameraCharacteristics characteristics>;

        r1 = r101.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        r102 = r101.<android.hardware.camera2.legacy.LegacyRequest: android.util.Size previewSize>;

        r2 = r101.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r6 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r5);

        r103 = (android.graphics.Rect) $r6;

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r8 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r7);

        $r10 = (android.graphics.Rect) $r8;

        $r9 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>;

        $r11 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r9);

        $r12 = (java.lang.Float) $r11;

        r104 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertToLegacyZoom(android.graphics.Rect,android.graphics.Rect,java.lang.Float,android.util.Size,android.hardware.Camera$Parameters)>(r103, $r10, $r12, r102, r2);

        $z0 = virtualinvoke r2.<android.hardware.Camera$Parameters: boolean isZoomSupported()>();

        if $z0 == 0 goto label01;

        $i25 = r104.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: int zoomIndex>;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setZoom(int)>($i25);

     label01:
        $r13 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r15 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r13, $r14);

        $r16 = (java.lang.Integer) $r15;

        i26 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        if i26 == 1 goto label02;

        if i26 == 2 goto label02;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - Ignoring unsupported colorCorrection.aberrationMode = ");

        virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i26);

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r100);

     label02:
        $r106 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r107 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r106);

        r108 = (java.lang.Integer) $r107;

        if r108 == null goto label03;

        $i24 = virtualinvoke r108.<java.lang.Integer: int intValue()>();

        r109 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.String convertAeAntiBandingModeToLegacy(int)>($i24);

        goto label04;

     label03:
        $r17 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>();

        $r18 = newarray (java.lang.String)[4];

        $r18[0] = "auto";

        $r18[1] = "off";

        $r18[2] = "50hz";

        $r18[3] = "60hz";

        $r19 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.Object listSelectFirstFrom(java.util.List,java.lang.Object[])>($r17, $r18);

        r109 = (java.lang.String) $r19;

     label04:
        if r109 == null goto label05;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)>(r109);

     label05:
        $r20 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        $r21 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r20);

        r110 = (android.hardware.camera2.params.MeteringRectangle[]) $r21;

        $r22 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS>;

        $r23 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r22);

        if $r23 == null goto label06;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "convertRequestMetadata - control.awbRegions setting is not supported, ignoring value");

     label06:
        i27 = virtualinvoke r2.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        r111 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.util.List convertMeteringRegionsToLegacy(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.camera2.params.MeteringRectangle[],int,java.lang.String)>(r103, r104, r110, i27, "AE");

        if i27 <= 0 goto label07;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)>(r111);

     label07:
        $r24 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        $r25 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r24);

        r112 = (android.hardware.camera2.params.MeteringRectangle[]) $r25;

        i28 = virtualinvoke r2.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        r113 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.util.List convertMeteringRegionsToLegacy(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.camera2.params.MeteringRectangle[],int,java.lang.String)>(r103, r104, r112, i28, "AF");

        if i28 <= 0 goto label08;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)>(r113);

     label08:
        $r26 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        $r27 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r26);

        r114 = (android.util.Range) $r27;

        if r114 == null goto label14;

        r115 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: int[] convertAeFpsRangeToLegacy(android.util.Range)>(r114);

        $r95 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        r3 = interfaceinvoke $r95.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label11;

        $r98 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (int[]) $r98;

        i29 = r4[0];

        r116 = r115;

        $d3 = (double) i29;

        $d4 = $d3 / 1000.0;

        $d5 = staticinvoke <java.lang.Math: double floor(double)>($d4);

        i30 = (int) $d5;

        $i19 = r4[1];

        $d6 = (double) $i19;

        $d7 = $d6 / 1000.0;

        $d8 = staticinvoke <java.lang.Math: double ceil(double)>($d7);

        i31 = (int) $d8;

        $i21 = r115[0];

        $i20 = i30 * 1000;

        if $i21 != $i20 goto label10;

        $i23 = r115[1];

        $i22 = i31 * 1000;

        if $i23 != $i22 goto label10;

        r117 = r4;

        goto label12;

     label10:
        r115 = r116;

        goto label09;

     label11:
        r117 = null;

     label12:
        if r117 == null goto label13;

        $i18 = r117[0];

        $i17 = r117[1];

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i18, $i17);

        goto label14;

     label13:
        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported FPS range set [");

        $i15 = r115[0];

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i16 = r115[1];

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r97);

     label14:
        $r119 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE>;

        $r120 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r119);

        r121 = (android.util.Range) $r120;

        $r122 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r123 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r124 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r122, $r123);

        $r125 = (java.lang.Integer) $r124;

        i32 = virtualinvoke $r125.<java.lang.Integer: int intValue()>();

        i33 = i32;

        $r126 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i32);

        $z8 = virtualinvoke r121.<android.util.Range: boolean contains(java.lang.Comparable)>($r126);

        if $z8 != 0 goto label15;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "convertRequestMetadata - control.aeExposureCompensation is out of range, ignoring value");

        i33 = 0;

     label15:
        virtualinvoke r2.<android.hardware.Camera$Parameters: void setExposureCompensation(int)>(i33);

        $r28 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z1 = virtualinvoke r2.<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>();

        $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r31 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r1, $r28, $r29, $z1, $r30);

        r127 = (java.lang.Boolean) $r31;

        if r127 == null goto label16;

        $z6 = virtualinvoke r127.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)>($z6);

     label16:
        staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: void mapAeAndFlashMode(android.hardware.camera2.CaptureRequest,android.hardware.Camera$Parameters)>(r1, r2);

        $r32 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r34 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r32, $r33);

        $r35 = (java.lang.Integer) $r34;

        i34 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();

        $r36 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>();

        r128 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String convertAfModeToLegacy(int,java.util.List)>(i34, $r36);

        if r128 == null goto label17;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)>(r128);

     label17:
        r129 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r37 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>();

        if $r37 == null goto label18;

        z9 = 1;

        goto label19;

     label18:
        z9 = 0;

     label19:
        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r40 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r1, r129, $r38, z9, $r39);

        r130 = (java.lang.Integer) $r40;

        if r130 == null goto label20;

        $i14 = virtualinvoke r130.<java.lang.Integer: int intValue()>();

        $r94 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.String convertAwbModeToLegacy(int)>($i14);

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)>($r94);

     label20:
        $r41 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK>;

        $r42 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z2 = virtualinvoke r2.<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>();

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r44 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r1, $r41, $r42, $z2, $r43);

        r131 = (java.lang.Boolean) $r44;

        if r131 == null goto label21;

        $z5 = virtualinvoke r131.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)>($z5);

     label21:
        $r45 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r47 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r45, $r46);

        $r48 = (java.lang.Integer) $r47;

        $i0 = virtualinvoke $r48.<java.lang.Integer: int intValue()>();

        i35 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: int filterSupportedCaptureIntent(int)>($i0);

        if i35 == 3 goto label23;

        if i35 != 4 goto label22;

        goto label23;

     label22:
        z10 = 0;

        goto label24;

     label23:
        z10 = 1;

     label24:
        virtualinvoke r2.<android.hardware.Camera$Parameters: void setRecordingHint(boolean)>(z10);

        $r132 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE>;

        $r133 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z11 = virtualinvoke r2.<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>();

        $r134 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r135 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r1, $r132, $r133, $z11, $r134);

        r136 = (java.lang.Integer) $r135;

        if r136 == null goto label27;

        $i13 = virtualinvoke r136.<java.lang.Integer: int intValue()>();

        if $i13 != 1 goto label25;

        z12 = 1;

        goto label26;

     label25:
        z12 = 0;

     label26:
        virtualinvoke r2.<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)>(z12);

     label27:
        $r137 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>();

        z13 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>($r137, "infinity");

        $r138 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCUS_DISTANCE>;

        $r139 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r140 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r141 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r1, $r138, $r139, z13, $r140);

        r142 = (java.lang.Float) $r141;

        if r142 == null goto label28;

        $f0 = virtualinvoke r142.<java.lang.Float: float floatValue()>();

        $b12 = $f0 cmpl 0.0F;

        if $b12 == 0 goto label29;

     label28:
        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - Ignoring android.lens.focusDistance ");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z13);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", only 0.0f is supported");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r50);

     label29:
        $r144 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>();

        if $r144 == null goto label34;

        $r82 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r83 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r84 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r82, $r83);

        $r85 = (java.lang.Integer) $r84;

        i36 = virtualinvoke $r85.<java.lang.Integer: int intValue()>();

        if i36 == 1 goto label32;

        if i36 == 2 goto label30;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Control mode ");

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i36);

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unsupported, defaulting to AUTO");

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r93);

        r146 = "auto";

        goto label33;

     label30:
        $r86 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r87 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r88 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r86, $r87);

        $r89 = (java.lang.Integer) $r88;

        i37 = virtualinvoke $r89.<java.lang.Integer: int intValue()>();

        r146 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String convertSceneModeToLegacy(int)>(i37);

        if r146 == null goto label31;

        goto label33;

     label31:
        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unknown requested scene mode: ");

        virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i37);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r91);

        r146 = "auto";

        goto label33;

     label32:
        r146 = "auto";

     label33:
        virtualinvoke r2.<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)>(r146);

     label34:
        $r148 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>();

        if $r148 == null goto label36;

        $r76 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE>;

        $r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r78 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r76, $r77);

        $r79 = (java.lang.Integer) $r78;

        i38 = virtualinvoke $r79.<java.lang.Integer: int intValue()>();

        r149 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String convertEffectModeToLegacy(int)>(i38);

        if r149 == null goto label35;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>(r149);

        goto label36;

     label35:
        virtualinvoke r2.<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>("none");

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unknown requested effect mode: ");

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i38);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r81);

     label36:
        $r151 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_MODE>;

        $r152 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r153 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r151, $r152);

        $r154 = (java.lang.Integer) $r153;

        i39 = virtualinvoke $r154.<java.lang.Integer: int intValue()>();

        if i39 == 0 goto label37;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - ignoring sensor.testPatternMode ");

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i39);

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; only OFF is supported");

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r75);

     label37:
        $r51 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION>;

        $r52 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r51);

        r156 = (android.location.Location) $r52;

        if r156 == null goto label39;

        $z4 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: boolean checkForCompleteGpsData(android.location.Location)>(r156);

        if $z4 == 0 goto label38;

        $d0 = virtualinvoke r156.<android.location.Location: double getAltitude()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setGpsAltitude(double)>($d0);

        $d1 = virtualinvoke r156.<android.location.Location: double getLatitude()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setGpsLatitude(double)>($d1);

        $d2 = virtualinvoke r156.<android.location.Location: double getLongitude()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setGpsLongitude(double)>($d2);

        $r72 = virtualinvoke r156.<android.location.Location: java.lang.String getProvider()>();

        $r73 = virtualinvoke $r72.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)>($r73);

        $l11 = virtualinvoke r156.<android.location.Location: long getTime()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setGpsTimestamp(long)>($l11);

        goto label40;

     label38:
        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete GPS parameters provided in location ");

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r156);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r71);

        goto label40;

     label39:
        virtualinvoke r2.<android.hardware.Camera$Parameters: void removeGpsData()>();

     label40:
        $r158 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $r159 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r158);

        r160 = (java.lang.Integer) $r159;

        r161 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        if r160 != null goto label41;

        i40 = 0;

        goto label42;

     label41:
        i40 = virtualinvoke r160.<java.lang.Integer: int intValue()>();

     label42:
        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i40);

        $r54 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, r161, $r53);

        $r55 = (java.lang.Integer) $r54;

        $i1 = virtualinvoke $r55.<java.lang.Integer: int intValue()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setRotation(int)>($i1);

        $r56 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY>;

        $r57 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(85);

        $r58 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r56, $r57);

        $r59 = (java.lang.Byte) $r58;

        $b2 = virtualinvoke $r59.<java.lang.Byte: byte byteValue()>();

        $s3 = $b2 & 255;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setJpegQuality(int)>($s3);

        $r60 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY>;

        $r61 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(85);

        $r62 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r60, $r61);

        $r63 = (java.lang.Byte) $r62;

        $b4 = virtualinvoke $r63.<java.lang.Byte: byte byteValue()>();

        $s5 = $b4 & 255;

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)>($s5);

        r162 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>();

        if r162 == null goto label49;

        $i6 = interfaceinvoke r162.<java.util.List: int size()>();

        if $i6 <= 0 goto label49;

        $r66 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE>;

        $r67 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r66);

        r163 = (android.util.Size) $r67;

        if r163 != null goto label44;

     label43:
        z14 = 0;

        goto label45;

     label44:
        $i7 = virtualinvoke r163.<android.util.Size: int getWidth()>();

        $i8 = virtualinvoke r163.<android.util.Size: int getHeight()>();

        $z3 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: boolean containsSize(java.util.List,int,int)>(r162, $i7, $i8);

        if $z3 != 0 goto label43;

        z14 = 1;

     label45:
        if z14 == 0 goto label46;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid JPEG thumbnail size set ");

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r163);

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping thumbnail...");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r69);

     label46:
        if r163 == null goto label48;

        if z14 == 0 goto label47;

        goto label48;

     label47:
        $i9 = virtualinvoke r163.<android.util.Size: int getWidth()>();

        $i10 = virtualinvoke r163.<android.util.Size: int getHeight()>();

        virtualinvoke r2.<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>($i9, $i10);

        goto label49;

     label48:
        virtualinvoke r2.<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>(0, 0);

     label49:
        $r165 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r166 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r167 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r165, $r166);

        $r168 = (java.lang.Integer) $r167;

        i41 = virtualinvoke $r168.<java.lang.Integer: int intValue()>();

        if i41 == 1 goto label50;

        if i41 == 2 goto label50;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - Ignoring unsupported noiseReduction.mode = ");

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i41);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r65);

     label50:
        return;
    }

    static int filterSupportedCaptureIntent(int)
    {
        java.lang.StringBuilder $r0, $r5;
        java.lang.String $r4, $r9;
        int i2;

        i2 := @parameter0: int;

        tableswitch(i2)
        {
            case 0: goto label3;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        goto label4;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported control.captureIntent value ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; default to PREVIEW");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r4);

        goto label4;

     label3:
        goto label5;

     label4:
        i2 = 1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown control.captureIntent value ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; default to PREVIEW");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r9);

     label5:
        return i2;
    }

    private static java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest$Key, java.lang.Object, boolean, java.lang.Object)
    {
        android.hardware.camera2.CaptureRequest$Key r0;
        boolean z0, $z1;
        java.lang.Object r1, r9, r10;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r7;
        android.hardware.camera2.CaptureRequest r8;

        r8 := @parameter0: android.hardware.camera2.CaptureRequest;

        r0 := @parameter1: android.hardware.camera2.CaptureRequest$Key;

        r9 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.lang.Object;

        r10 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r8, r0, r9);

        if z0 != 0 goto label2;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r10, r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest$Key: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported; ignoring requested value ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r7);

     label1:
        return null;

     label2:
        return r10;
    }

    private static void mapAeAndFlashMode(android.hardware.camera2.CaptureRequest, android.hardware.Camera$Parameters)
    {
        android.hardware.Camera$Parameters r0;
        int i0, i1;
        java.util.List r1;
        android.hardware.camera2.CaptureRequest$Key $r2, $r6;
        java.lang.Integer $r3, $r5, $r7, $r9;
        java.lang.Object $r4, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.hardware.camera2.CaptureRequest r10;
        java.lang.String r11, r12;

        r10 := @parameter0: android.hardware.camera2.CaptureRequest;

        r0 := @parameter1: android.hardware.Camera$Parameters;

        $r2 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r10, $r2, $r3);

        $r5 = (java.lang.Integer) $r4;

        i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r10, $r6, $r7);

        $r9 = (java.lang.Integer) $r8;

        i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>();

        r11 = null;

        $z0 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r1, "off");

        if $z0 == 0 goto label01;

        r11 = "off";

     label01:
        if i1 != 1 goto label05;

        if i0 != 2 goto label03;

        $z5 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r1, "torch");

        if $z5 == 0 goto label02;

        r12 = "torch";

        goto label11;

     label02:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore flash.mode == TORCH;camera does not support it");

        r12 = r11;

        goto label11;

     label03:
        r12 = r11;

        if i0 != 1 goto label11;

        $z4 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r1, "on");

        if $z4 == 0 goto label04;

        r12 = "on";

        goto label11;

     label04:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore flash.mode == SINGLE;camera does not support it");

        r12 = r11;

        goto label11;

     label05:
        if i1 != 3 goto label07;

        $z3 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r1, "on");

        if $z3 == 0 goto label06;

        r12 = "on";

        goto label11;

     label06:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore control.aeMode == ON_ALWAYS_FLASH;camera does not support it");

        r12 = r11;

        goto label11;

     label07:
        if i1 != 2 goto label09;

        $z2 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r1, "auto");

        if $z2 == 0 goto label08;

        r12 = "auto";

        goto label11;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore control.aeMode == ON_AUTO_FLASH;camera does not support it");

        r12 = r11;

        goto label11;

     label09:
        r12 = r11;

        if i1 != 4 goto label11;

        $z1 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r1, "red-eye");

        if $z1 == 0 goto label10;

        r12 = "red-eye";

        goto label11;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore control.aeMode == ON_AUTO_FLASH_REDEYE;camera does not support it");

        r12 = r11;

     label11:
        if r12 == null goto label12;

        virtualinvoke r0.<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>(r12);

     label12:
        return;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.String TAG> = "LegacyRequestMapper";

        <android.hardware.camera2.legacy.LegacyRequestMapper: byte DEFAULT_JPEG_QUALITY> = 85;

        <android.hardware.camera2.legacy.LegacyRequestMapper: boolean DEBUG> = 0;

        return;
    }
}
