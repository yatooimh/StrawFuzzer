public class android.hardware.camera2.legacy.LegacyResultMapper extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private android.hardware.camera2.legacy.LegacyRequest mCachedRequest;
    private android.hardware.camera2.impl.CameraMetadataNative mCachedResult;

    public void <init>()
    {
        android.hardware.camera2.legacy.LegacyResultMapper r0;

        r0 := @this: android.hardware.camera2.legacy.LegacyResultMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest> = null;

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative mCachedResult> = null;

        return;
    }

    private static int convertLegacyAfMode(java.lang.String)
    {
        java.lang.String r0, $r6;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r2;
        byte b3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", "convertLegacyAfMode - no AF mode, default to OFF");

        return 0;

     label01:
        b3 = -1;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -194628547: goto label09;
            case 3005871: goto label08;
            case 3108534: goto label07;
            case 97445748: goto label06;
            case 103652300: goto label05;
            case 173173288: goto label04;
            case 910005312: goto label03;
            default: goto label02;
        };

     label02:
        goto label10;

     label03:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("continuous-picture");

        if $z0 == 0 goto label02;

        b3 = 1;

        goto label10;

     label04:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("infinity");

        if $z1 == 0 goto label02;

        b3 = 6;

        goto label10;

     label05:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("macro");

        if $z2 == 0 goto label02;

        b3 = 4;

        goto label10;

     label06:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("fixed");

        if $z3 == 0 goto label02;

        b3 = 5;

        goto label10;

     label07:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("edof");

        if $z4 == 0 goto label02;

        b3 = 3;

        goto label10;

     label08:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z5 == 0 goto label02;

        b3 = 0;

        goto label10;

     label09:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("continuous-video");

        if $z6 == 0 goto label02;

        b3 = 2;

     label10:
        tableswitch(b3)
        {
            case 0: goto label18;
            case 1: goto label17;
            case 2: goto label16;
            case 3: goto label15;
            case 4: goto label14;
            case 5: goto label13;
            case 6: goto label12;
            default: goto label11;
        };

     label11:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertLegacyAfMode - unknown mode ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , ignoring");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r6);

        return 0;

     label12:
        return 0;

     label13:
        return 0;

     label14:
        return 2;

     label15:
        return 5;

     label16:
        return 3;

     label17:
        return 4;

     label18:
        return 1;
    }

    private static int convertLegacyAwbMode(java.lang.String)
    {
        java.lang.String r0, $r5;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r2;
        byte b2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return 1;

     label01:
        b2 = -1;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -939299377: goto label10;
            case -719316704: goto label09;
            case 3005871: goto label08;
            case 109399597: goto label07;
            case 474934723: goto label06;
            case 1650323088: goto label05;
            case 1902580840: goto label04;
            case 1942983418: goto label03;
            default: goto label02;
        };

     label02:
        goto label11;

     label03:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("daylight");

        if $z0 == 0 goto label02;

        b2 = 4;

        goto label11;

     label04:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("fluorescent");

        if $z1 == 0 goto label02;

        b2 = 2;

        goto label11;

     label05:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("twilight");

        if $z2 == 0 goto label02;

        b2 = 6;

        goto label11;

     label06:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("cloudy-daylight");

        if $z3 == 0 goto label02;

        b2 = 5;

        goto label11;

     label07:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("shade");

        if $z4 == 0 goto label02;

        b2 = 7;

        goto label11;

     label08:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z5 == 0 goto label02;

        b2 = 0;

        goto label11;

     label09:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("warm-fluorescent");

        if $z6 == 0 goto label02;

        b2 = 3;

        goto label11;

     label10:
        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("incandescent");

        if $z7 == 0 goto label02;

        b2 = 1;

     label11:
        tableswitch(b2)
        {
            case 0: goto label20;
            case 1: goto label19;
            case 2: goto label18;
            case 3: goto label17;
            case 4: goto label16;
            case 5: goto label15;
            case 6: goto label14;
            case 7: goto label13;
            default: goto label12;
        };

     label12:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertAwbMode - unrecognized WB mode ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r5);

        return 1;

     label13:
        return 8;

     label14:
        return 7;

     label15:
        return 6;

     label16:
        return 5;

     label17:
        return 4;

     label18:
        return 3;

     label19:
        return 2;

     label20:
        return 1;
    }

    private static android.hardware.camera2.impl.CameraMetadataNative convertResultMetadata(android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.Camera$Parameters r1;
        android.hardware.camera2.impl.CameraMetadataNative $r2;
        android.hardware.camera2.CameraCharacteristics$Key $r3, $r38;
        java.lang.Object $r4, $r6, $r9, $r13, $r15, $r19, $r40, $r46, $r50, $r58;
        android.hardware.camera2.CaptureRequest$Key $r5, $r7, $r11, $r44, $r48, $r56, r76, r78;
        android.graphics.Rect $r8, r74;
        java.lang.Float $r10, $r37, $r63;
        android.hardware.camera2.CaptureResult$Key $r12, $r17, $r21, $r27, $r34, $r36, $r39, $r42, $r45, $r49, $r52, $r54, $r57, $r60, $r62, $r64, $r66, $r68, $r83;
        java.lang.Integer $r14, $r16, $r18, $r20, $r28, $r35, $r43, $r51, $r59, $r65, $r67, $r69, r77, $r84;
        int $i0, $i1, $i4, $i6, i10, i11, i12;
        java.lang.StringBuilder $r22, $r29;
        java.lang.String $r26, $r33, r79, r81, $r85, $r86;
        boolean $z0, $z1, $z2;
        float $f0;
        java.lang.Byte $r41, $r53, $r55;
        android.location.Location $r47;
        byte $b5, $b7, b9;
        android.util.Size $r61, r72;
        android.hardware.camera2.legacy.LegacyRequest r70;
        android.hardware.camera2.CameraCharacteristics r71;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r75;
        android.hardware.Camera$Size r87;

        r70 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        r71 = r70.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CameraCharacteristics characteristics>;

        r0 = r70.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        r72 = r70.<android.hardware.camera2.legacy.LegacyRequest: android.util.Size previewSize>;

        r1 = r70.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r2 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r4 = virtualinvoke r71.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r3);

        r74 = (android.graphics.Rect) $r4;

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r6 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r5);

        $r8 = (android.graphics.Rect) $r6;

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>;

        $r9 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r7);

        $r10 = (java.lang.Float) $r9;

        r75 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertToLegacyZoom(android.graphics.Rect,android.graphics.Rect,java.lang.Float,android.util.Size,android.hardware.Camera$Parameters)>(r74, $r8, $r10, r72, r1);

        $r12 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r11 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r13 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r11);

        $r14 = (java.lang.Integer) $r13;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r12, $r14);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAe(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.CaptureRequest,android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Parameters)>($r2, r71, r0, r74, r75, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAf(android.hardware.camera2.impl.CameraMetadataNative,android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Parameters)>($r2, r74, r75, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAwb(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>($r2, r1);

        r76 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        b9 = 1;

        r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r15 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r0, r76, r77);

        $r16 = (java.lang.Integer) $r15;

        $i0 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        i10 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: int filterSupportedCaptureIntent(int)>($i0);

        $r17 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_CAPTURE_INTENT>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r17, $r18);

        r78 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r19 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r0, r78, r77);

        $r20 = (java.lang.Integer) $r19;

        $i1 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        if $i1 != 2 goto label01;

        $r68 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_MODE>;

        $r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r68, $r69);

        goto label02;

     label01:
        $r21 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_MODE>;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r21, r77);

     label02:
        r79 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getSceneMode()>();

        i11 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertSceneModeFromLegacy(java.lang.String)>(r79);

        if i11 == -1 goto label03;

        $r66 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE>;

        $r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r66, $r67);

        goto label04;

     label03:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown scene mode ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r79);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned by camera HAL, setting to disabled.");

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r26);

        $r27 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r27, $r28);

     label04:
        r81 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getColorEffect()>();

        i12 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertEffectModeFromLegacy(java.lang.String)>(r81);

        if i12 == -1 goto label05;

        $r64 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_EFFECT_MODE>;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r64, $r65);

        goto label06;

     label05:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown effect mode ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned by camera HAL, setting to off.");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r33);

        $r34 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_EFFECT_MODE>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r34, $r35);

     label06:
        $z0 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>();

        if $z0 == 0 goto label07;

        $z1 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean getVideoStabilization()>();

        if $z1 == 0 goto label07;

        goto label08;

     label07:
        b9 = 0;

     label08:
        $r83 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_VIDEO_STABILIZATION_MODE>;

        $r84 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b9);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r83, $r84);

        $r85 = "infinity";

        $r86 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>();

        $z2 = virtualinvoke $r85.<java.lang.String: boolean equals(java.lang.Object)>($r86);

        if $z2 == 0 goto label09;

        $r62 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCUS_DISTANCE>;

        $r63 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r62, $r63);

     label09:
        $r36 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCAL_LENGTH>;

        $f0 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getFocalLength()>();

        $r37 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r36, $r37);

        $r39 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key REQUEST_PIPELINE_DEPTH>;

        $r38 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH>;

        $r40 = virtualinvoke r71.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r38);

        $r41 = (java.lang.Byte) $r40;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r39, $r41);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapScaler(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Parameters)>($r2, r75, r1);

        $r42 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TEST_PATTERN_MODE>;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r42, $r43);

        $r45 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_LOCATION>;

        $r44 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION>;

        $r46 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r44);

        $r47 = (android.location.Location) $r46;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r45, $r47);

        $r49 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_ORIENTATION>;

        $r48 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $r50 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r48);

        $r51 = (java.lang.Integer) $r50;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r49, $r51);

        $r52 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_QUALITY>;

        $i4 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getJpegQuality()>();

        $b5 = (byte) $i4;

        $r53 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b5);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r52, $r53);

        $r54 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_QUALITY>;

        $i6 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()>();

        $b7 = (byte) $i6;

        $r55 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b7);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r54, $r55);

        r87 = virtualinvoke r1.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()>();

        if r87 == null goto label10;

        $r60 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_SIZE>;

        $r61 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size convertSize(android.hardware.Camera$Size)>(r87);

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r60, $r61);

        goto label11;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", "Null thumbnail size received from parameters.");

     label11:
        $r57 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key NOISE_REDUCTION_MODE>;

        $r56 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r58 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r56);

        $r59 = (java.lang.Integer) $r58;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r57, $r59);

        return $r2;
    }

    private static android.hardware.camera2.params.MeteringRectangle[] getMeteringRectangles(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, java.util.List, java.lang.String)
    {
        android.graphics.Rect r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.Camera$Area r2;
        java.util.ArrayList $r3;
        android.hardware.camera2.params.MeteringRectangle[] $r4, $r6;
        java.lang.Object[] $r5;
        boolean $z0;
        java.lang.Object $r7;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle $r8;
        android.hardware.camera2.params.MeteringRectangle $r9;
        java.util.List r10;
        java.lang.String r11;
        java.util.Iterator r13;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r10 := @parameter2: java.util.List;

        r11 := @parameter3: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        if r10 == null goto label2;

        r13 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.Camera$Area) $r7;

        $r8 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area)>(r0, r1, r2);

        $r9 = virtualinvoke $r8.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.hardware.camera2.params.MeteringRectangle toMetering()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r4 = newarray (android.hardware.camera2.params.MeteringRectangle)[0];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (android.hardware.camera2.params.MeteringRectangle[]) $r5;

        return $r6;
    }

    private static void mapAe(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.CaptureRequest, android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.graphics.Rect r1;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r2;
        android.hardware.Camera$Parameters r3;
        int i0, $i1, $i3;
        java.lang.String $r5, $r21;
        android.hardware.camera2.CaptureResult$Key $r6, $r8, $r10, $r15;
        java.lang.Integer $r7, $r9;
        boolean $z0, $z1, z2;
        java.lang.Boolean $r11, r24;
        android.hardware.camera2.CaptureRequest$Key $r12;
        java.lang.Object $r13;
        java.util.List $r14;
        java.lang.StringBuilder $r16;
        android.hardware.camera2.CameraCharacteristics r22;
        android.hardware.camera2.CaptureRequest r23;
        android.hardware.camera2.params.MeteringRectangle[] r25;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r22 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        r23 := @parameter2: android.hardware.camera2.CaptureRequest;

        r1 := @parameter3: android.graphics.Rect;

        r2 := @parameter4: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r3 := @parameter5: android.hardware.Camera$Parameters;

        $r5 = virtualinvoke r3.<android.hardware.Camera$Parameters: java.lang.String getAntibanding()>();

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertAntiBandingModeOrDefault(java.lang.String)>($r5);

        $r6 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r6, $r7);

        $r8 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $i1 = virtualinvoke r3.<android.hardware.Camera$Parameters: int getExposureCompensation()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r8, $r9);

        $z0 = virtualinvoke r3.<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>();

        if $z0 == 0 goto label1;

        z2 = virtualinvoke r3.<android.hardware.Camera$Parameters: boolean getAutoExposureLock()>();

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r10 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_LOCK>;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r10, $r11);

        $r12 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r13 = virtualinvoke r23.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r12);

        r24 = (java.lang.Boolean) $r13;

        if r24 == null goto label3;

        $z1 = virtualinvoke r24.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == z2 goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAe - android.control.aeLock was requested to ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but resulted in ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r21);

     label3:
        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAeAndFlashMode(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.CameraCharacteristics,android.hardware.Camera$Parameters)>(r0, r22, r3);

        $i3 = virtualinvoke r3.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        if $i3 <= 0 goto label4;

        $r14 = virtualinvoke r3.<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()>();

        r25 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.params.MeteringRectangle[] getMeteringRectangles(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,java.util.List,java.lang.String)>(r1, r2, $r14, "AE");

        $r15 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_REGIONS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r15, r25);

     label4:
        return;
    }

    private static void mapAeAndFlashMode(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.CameraCharacteristics, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String r2, $r8, $r10;
        android.hardware.camera2.CameraCharacteristics$Key $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        int $i2;
        java.lang.StringBuilder $r6;
        android.hardware.camera2.CameraCharacteristics r11;
        byte b4, b5, b6;
        java.lang.Integer r12, r13, $r17, $r19;
        android.hardware.camera2.CaptureResult$Key $r15, $r16, $r18;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r11 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        r1 := @parameter2: android.hardware.Camera$Parameters;

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE>;

        $r4 = virtualinvoke r11.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        b4 = 0;

        if z0 == 0 goto label01;

        r12 = null;

        goto label02;

     label01:
        r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label02:
        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>();

        b5 = 0;

        r13 = r12;

        b6 = 1;

        if r2 == null goto label15;

        $i2 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch($i2)
        {
            case 3551: goto label08;
            case 109935: goto label07;
            case 3005871: goto label06;
            case 110547964: goto label05;
            case 1081542389: goto label04;
            default: goto label03;
        };

     label03:
        goto label09;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("red-eye");

        if $z1 == 0 goto label03;

        b4 = 3;

        goto label10;

     label05:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("torch");

        if $z2 == 0 goto label03;

        b4 = 4;

        goto label10;

     label06:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z3 == 0 goto label03;

        b4 = 1;

        goto label10;

     label07:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z4 == 0 goto label03;

        goto label10;

     label08:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z5 == 0 goto label03;

        b4 = 2;

        goto label10;

     label09:
        b4 = -1;

     label10:
        b5 = 0;

        r13 = r12;

        b6 = 1;

        if b4 == 0 goto label15;

        if b4 == 1 goto label14;

        if b4 == 2 goto label13;

        if b4 == 3 goto label12;

        if b4 == 4 goto label11;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAeAndFlashMode - Ignoring unknown flash mode ");

        $r8 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r10);

        b5 = 0;

        r13 = r12;

        b6 = 1;

        goto label15;

     label11:
        b5 = 2;

        r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        b6 = 1;

        goto label15;

     label12:
        b6 = 4;

        b5 = 0;

        r13 = r12;

        goto label15;

     label13:
        b5 = 1;

        b6 = 3;

        r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        goto label15;

     label14:
        b6 = 2;

        r13 = r12;

        b5 = 0;

     label15:
        $r15 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_STATE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r15, r13);

        $r16 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_MODE>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b5);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r16, $r17);

        $r18 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_MODE>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b6);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r18, $r19);

        return;
    }

    private static void mapAf(android.hardware.camera2.impl.CameraMetadataNative, android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.Camera$Parameters r2;
        android.hardware.camera2.CaptureResult$Key $r3, $r7;
        java.lang.String $r4;
        int $i0, $i1;
        java.lang.Integer $r5;
        java.util.List $r6;
        android.graphics.Rect r8;
        android.hardware.camera2.params.MeteringRectangle[] r9;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r8 := @parameter1: android.graphics.Rect;

        r1 := @parameter2: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter3: android.hardware.Camera$Parameters;

        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE>;

        $r4 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>();

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: int convertLegacyAfMode(java.lang.String)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r3, $r5);

        $i1 = virtualinvoke r2.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        if $i1 <= 0 goto label1;

        $r6 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getFocusAreas()>();

        r9 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.params.MeteringRectangle[] getMeteringRectangles(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,java.util.List,java.lang.String)>(r8, r1, $r6, "AF");

        $r7 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_REGIONS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r7, r9);

     label1:
        return;
    }

    private static void mapAwb(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        int i0;
        boolean $z0, z1;
        android.hardware.camera2.CaptureResult$Key $r2, $r5;
        java.lang.Boolean $r3;
        java.lang.String $r4;
        java.lang.Integer $r6;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $z0 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>();

        if $z0 == 0 goto label1;

        z1 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()>();

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r2 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_LOCK>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r2, $r3);

        $r4 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()>();

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: int convertLegacyAwbMode(java.lang.String)>($r4);

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_MODE>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r5, $r6);

        return;
    }

    private static void mapScaler(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.Camera$Parameters r2;
        android.graphics.Rect $r3;
        android.hardware.camera2.CaptureResult$Key $r4, $r5;
        float $f0;
        java.lang.Float $r6;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: android.hardware.Camera$Parameters;

        $r4 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SCALER_CROP_REGION>;

        $r3 = r1.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect reportedCrop>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r4, $r3);

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_ZOOM_RATIO>;

        $f0 = r1.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: float reportedZoomRatio>;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r5, $r6);

        return;
    }

    public android.hardware.camera2.impl.CameraMetadataNative cachedConvertResultMetadata(android.hardware.camera2.legacy.LegacyRequest, long)
    {
        android.hardware.camera2.legacy.LegacyResultMapper r0;
        long l0;
        android.hardware.camera2.impl.CameraMetadataNative r1, $r9, $r10, r12, $r13;
        android.hardware.camera2.legacy.LegacyRequest $r2, $r3, $r6, r11;
        android.hardware.Camera$Parameters $r4, $r5;
        boolean $z0, $z1;
        android.hardware.camera2.CaptureRequest $r7, $r8;
        android.hardware.camera2.CaptureResult$Key $r14;
        java.lang.Long $r15;

        r0 := @this: android.hardware.camera2.legacy.LegacyResultMapper;

        r11 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        l0 := @parameter1: long;

        $r2 = r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest>;

        if $r2 == null goto label1;

        $r5 = r11.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r3 = r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest>;

        $r4 = $r3.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $z0 = virtualinvoke $r5.<android.hardware.Camera$Parameters: boolean same(android.hardware.Camera$Parameters)>($r4);

        if $z0 == 0 goto label1;

        $r8 = r11.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        $r6 = r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest>;

        $r7 = $r6.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        $z1 = virtualinvoke $r8.<android.hardware.camera2.CaptureRequest: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

        $r9 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r10 = r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative mCachedResult>;

        specialinvoke $r9.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r10);

        r12 = $r9;

        goto label2;

     label1:
        r1 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative convertResultMetadata(android.hardware.camera2.legacy.LegacyRequest)>(r11);

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest> = r11;

        $r13 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r13.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r1);

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative mCachedResult> = $r13;

        r12 = r1;

     label2:
        $r14 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r12.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r14, $r15);

        return r12;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.legacy.LegacyResultMapper: java.lang.String TAG> = "LegacyResultMapper";

        <android.hardware.camera2.legacy.LegacyResultMapper: boolean DEBUG> = 0;

        return;
    }
}
