public class android.hardware.camera2.legacy.ParameterUtils extends java.lang.Object
{
    private static final double ASPECT_RATIO_TOLERANCE;
    public static final android.hardware.Camera$Area CAMERA_AREA_DEFAULT;
    private static final boolean DEBUG;
    public static final android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT;
    public static final int NORMALIZED_RECTANGLE_MAX;
    public static final int NORMALIZED_RECTANGLE_MIN;
    public static final android.graphics.Rect RECTANGLE_EMPTY;
    private static final java.lang.String TAG;
    private static final int ZOOM_RATIO_MULTIPLIER;

    static void <clinit>()
    {
        android.graphics.Rect $r0, $r2, $r3, $r4;
        android.hardware.Camera$Area $r1;

        <android.hardware.camera2.legacy.ParameterUtils: int ZOOM_RATIO_MULTIPLIER> = 100;

        <android.hardware.camera2.legacy.ParameterUtils: java.lang.String TAG> = "ParameterUtils";

        <android.hardware.camera2.legacy.ParameterUtils: int NORMALIZED_RECTANGLE_MIN> = -1000;

        <android.hardware.camera2.legacy.ParameterUtils: int NORMALIZED_RECTANGLE_MAX> = 1000;

        <android.hardware.camera2.legacy.ParameterUtils: boolean DEBUG> = 0;

        <android.hardware.camera2.legacy.ParameterUtils: double ASPECT_RATIO_TOLERANCE> = 0.05000000074505806;

        $r0 = new android.graphics.Rect;

        specialinvoke $r0.<android.graphics.Rect: void <init>(int,int,int,int)>(-1000, -1000, 1000, 1000);

        <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT> = $r0;

        $r1 = new android.hardware.Camera$Area;

        $r2 = new android.graphics.Rect;

        $r3 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT>;

        specialinvoke $r2.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r3);

        specialinvoke $r1.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r2, 1);

        <android.hardware.camera2.legacy.ParameterUtils: android.hardware.Camera$Area CAMERA_AREA_DEFAULT> = $r1;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, 0, 0);

        <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY> = $r4;

        return;
    }

    private void <init>()
    {
        android.hardware.camera2.legacy.ParameterUtils r0;
        java.lang.AssertionError $r1;

        r0 := @this: android.hardware.camera2.legacy.ParameterUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    public static boolean containsSize(java.util.List, int, int)
    {
        int i0, i1, $i2, $i3;
        android.hardware.Camera$Size r0;
        boolean $z0;
        java.lang.Object $r2;
        java.util.List r3;
        java.util.Iterator r4;

        r3 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "sizeList must not be null");

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r0 = (android.hardware.Camera$Size) $r2;

        $i2 = r0.<android.hardware.Camera$Size: int height>;

        if $i2 != i1 goto label2;

        $i3 = r0.<android.hardware.Camera$Size: int width>;

        if $i3 != i0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Area)
    {
        android.graphics.Rect r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.Camera$Area r2;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle $r3;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: android.hardware.Camera$Area;

        $r3 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area,boolean)>(r0, r1, r2, 1);

        return $r3;
    }

    private static android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Area, boolean)
    {
        android.hardware.Camera$Area r0;
        boolean z0, $z3;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Matrix $r2;
        android.graphics.Rect $r3, $r11, r12, r14, r15, r16;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r10;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r13;

        r12 := @parameter0: android.graphics.Rect;

        r13 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r0 := @parameter2: android.hardware.Camera$Area;

        z0 := @parameter3: boolean;

        r14 = r13.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect previewCrop>;

        r15 = r13.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect reportedCrop>;

        $i0 = virtualinvoke r14.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        $f3 = $f2 * 1.0F;

        f0 = $f3 / 2000.0F;

        $i1 = virtualinvoke r14.<android.graphics.Rect: int height()>();

        $f4 = (float) $i1;

        $f5 = $f4 * 1.0F;

        f1 = $f5 / 2000.0F;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        virtualinvoke $r2.<android.graphics.Matrix: void setTranslate(float,float)>(1000.0F, 1000.0F);

        virtualinvoke $r2.<android.graphics.Matrix: boolean postScale(float,float)>(f0, f1);

        $i2 = r14.<android.graphics.Rect: int left>;

        $f7 = (float) $i2;

        $i3 = r14.<android.graphics.Rect: int top>;

        $f6 = (float) $i3;

        virtualinvoke $r2.<android.graphics.Matrix: boolean postTranslate(float,float)>($f7, $f6);

        if z0 == 0 goto label1;

        goto label2;

     label1:
        r14 = r15;

     label2:
        $r3 = r0.<android.hardware.Camera$Area: android.graphics.Rect rect>;

        r16 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect mapRect(android.graphics.Matrix,android.graphics.Rect)>($r2, $r3);

        $z3 = virtualinvoke r16.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r14);

        if $z3 != 0 goto label3;

        $r11 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        virtualinvoke r16.<android.graphics.Rect: void set(android.graphics.Rect)>($r11);

     label3:
        $i4 = r0.<android.hardware.Camera$Area: int weight>;

        if $i4 >= 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertCameraAreaToMeteringRectangle - rectangle ");

        $r7 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.lang.String stringFromArea(android.hardware.Camera$Area)>(r0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has too small weight, clip to 0");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ParameterUtils", $r10);

     label4:
        $r4 = new android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle;

        $i5 = r0.<android.hardware.Camera$Area: int weight>;

        specialinvoke $r4.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: void <init>(android.graphics.Rect,int)>(r16, $i5);

        return $r4;
    }

    private static android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.graphics.Point, boolean)
    {
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r0;
        boolean z0;
        android.hardware.Camera$Area $r1;
        android.graphics.Rect $r2, $r4, $r5, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Point $r3, r7;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle r9;

        r6 := @parameter0: android.graphics.Rect;

        r0 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r7 := @parameter2: android.graphics.Point;

        z0 := @parameter3: boolean;

        $r1 = new android.hardware.Camera$Area;

        $r2 = new android.graphics.Rect;

        $i3 = r7.<android.graphics.Point: int x>;

        $i2 = r7.<android.graphics.Point: int y>;

        $i1 = r7.<android.graphics.Point: int x>;

        $i0 = r7.<android.graphics.Point: int y>;

        specialinvoke $r2.<android.graphics.Rect: void <init>(int,int,int,int)>($i3, $i2, $i1, $i0);

        specialinvoke $r1.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r2, 1);

        r9 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area,boolean)>(r6, r0, $r1, z0);

        $r3 = new android.graphics.Point;

        $r4 = r9.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.graphics.Rect rect>;

        $i5 = $r4.<android.graphics.Rect: int left>;

        $r5 = r9.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.graphics.Rect rect>;

        $i4 = $r5.<android.graphics.Rect: int top>;

        specialinvoke $r3.<android.graphics.Point: void <init>(int,int)>($i5, $i4);

        return $r3;
    }

    public static android.hardware.camera2.params.Face convertFaceFromLegacy(android.hardware.Camera$Face, android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData)
    {
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r0;
        android.graphics.Point r1, r9, r10, r11, r12, r13;
        android.hardware.Camera$Area $r3;
        android.graphics.Rect $r4, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.hardware.Camera$Face r5;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle r8;
        android.hardware.camera2.params.Face r14;

        r5 := @parameter0: android.hardware.Camera$Face;

        r6 := @parameter1: android.graphics.Rect;

        r0 := @parameter2: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "face must not be null");

        $r3 = new android.hardware.Camera$Area;

        $r4 = r5.<android.hardware.Camera$Face: android.graphics.Rect rect>;

        specialinvoke $r3.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r4, 1);

        r8 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area)>(r6, r0, $r3);

        r1 = r5.<android.hardware.Camera$Face: android.graphics.Point leftEye>;

        r9 = r5.<android.hardware.Camera$Face: android.graphics.Point rightEye>;

        r10 = r5.<android.hardware.Camera$Face: android.graphics.Point mouth>;

        if r1 == null goto label1;

        if r9 == null goto label1;

        if r10 == null goto label1;

        $i0 = r1.<android.graphics.Point: int x>;

        if $i0 == -2000 goto label1;

        $i1 = r1.<android.graphics.Point: int y>;

        if $i1 == -2000 goto label1;

        $i2 = r9.<android.graphics.Point: int x>;

        if $i2 == -2000 goto label1;

        $i3 = r9.<android.graphics.Point: int y>;

        if $i3 == -2000 goto label1;

        $i4 = r10.<android.graphics.Point: int x>;

        if $i4 == -2000 goto label1;

        $i5 = r10.<android.graphics.Point: int y>;

        if $i5 == -2000 goto label1;

        r11 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.graphics.Point,boolean)>(r6, r0, r1, 1);

        r12 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.graphics.Point,boolean)>(r6, r0, r11, 1);

        r13 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.graphics.Point,boolean)>(r6, r0, r11, 1);

        $i6 = r5.<android.hardware.Camera$Face: int id>;

        r14 = virtualinvoke r8.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.hardware.camera2.params.Face toFace(int,android.graphics.Point,android.graphics.Point,android.graphics.Point)>($i6, r11, r12, r13);

        goto label2;

     label1:
        r14 = virtualinvoke r8.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.hardware.camera2.params.Face toFace()>();

     label2:
        return r14;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$MeteringData convertMeteringRectangleToLegacy(android.graphics.Rect, android.hardware.camera2.params.MeteringRectangle, android.hardware.camera2.legacy.ParameterUtils$ZoomData)
    {
        android.graphics.Rect r0, r3, r4, r5, $r7, $r8, $r9, $r14, $r15, $r16, $r18;
        android.hardware.camera2.params.MeteringRectangle r1;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r2;
        float f0, f1, $f2, $f3, $f4, $f5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Matrix $r6;
        boolean $z2, $z3;
        android.hardware.Camera$Area $r10, $r12, $r17, r21;
        android.hardware.camera2.legacy.ParameterUtils$MeteringData $r11;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle $r13;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.params.MeteringRectangle;

        r2 := @parameter2: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r3 = r2.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect previewCrop>;

        $i0 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        f0 = 2000.0F / $f2;

        $i1 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f3 = (float) $i1;

        f1 = 2000.0F / $f3;

        $r6 = new android.graphics.Matrix;

        specialinvoke $r6.<android.graphics.Matrix: void <init>()>();

        $i2 = r3.<android.graphics.Rect: int left>;

        $i3 = neg $i2;

        $f5 = (float) $i3;

        $i4 = r3.<android.graphics.Rect: int top>;

        $i5 = neg $i4;

        $f4 = (float) $i5;

        virtualinvoke $r6.<android.graphics.Matrix: void setTranslate(float,float)>($f5, $f4);

        virtualinvoke $r6.<android.graphics.Matrix: boolean postScale(float,float)>(f0, f1);

        virtualinvoke $r6.<android.graphics.Matrix: boolean postTranslate(float,float)>(-1000.0F, -1000.0F);

        $r7 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>();

        r4 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect mapRect(android.graphics.Matrix,android.graphics.Rect)>($r6, $r7);

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r4);

        $r9 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT>;

        $z2 = virtualinvoke $r8.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r9);

        if $z2 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ParameterUtils", "convertMeteringRectangleToLegacy - metering rectangle too small, no metering will be done");

        $r16 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r16);

        $r17 = new android.hardware.Camera$Area;

        $r18 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        specialinvoke $r17.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r18, 0);

        r21 = $r17;

        goto label2;

     label1:
        $r10 = new android.hardware.Camera$Area;

        $i6 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>();

        specialinvoke $r10.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r8, $i6);

        r21 = $r10;

     label2:
        r5 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>();

        $z3 = virtualinvoke r5.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r3);

        if $z3 != 0 goto label3;

        $r15 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        virtualinvoke r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r15);

     label3:
        $r11 = new android.hardware.camera2.legacy.ParameterUtils$MeteringData;

        $r12 = new android.hardware.Camera$Area;

        $i7 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>();

        specialinvoke $r12.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>(r4, $i7);

        $r13 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area,boolean)>(r0, r2, $r12, 0);

        $r14 = $r13.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.graphics.Rect rect>;

        specialinvoke $r11.<android.hardware.camera2.legacy.ParameterUtils$MeteringData: void <init>(android.hardware.Camera$Area,android.graphics.Rect,android.graphics.Rect)>(r21, r5, $r14);

        return $r11;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$ZoomData convertScalerCropRegion(android.graphics.Rect, android.graphics.Rect, android.util.Size, android.hardware.Camera$Parameters)
    {
        android.util.Size r0;
        android.hardware.Camera$Parameters r1;
        android.graphics.Rect $r4, $r5, $r6, r8, r9, r10;
        int $i0, $i1, $i2;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData $r7;

        r8 := @parameter0: android.graphics.Rect;

        r9 := @parameter1: android.graphics.Rect;

        r0 := @parameter2: android.util.Size;

        r1 := @parameter3: android.hardware.Camera$Parameters;

        $r4 = new android.graphics.Rect;

        $i0 = virtualinvoke r8.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r8.<android.graphics.Rect: int height()>();

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        if r9 != null goto label1;

        r10 = $r4;

        goto label2;

     label1:
        r10 = r9;

     label2:
        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        $r7 = new android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        $i2 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: int getClosestAvailableZoomCrop(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, $r4, r0, r10, $r5, $r6);

        specialinvoke $r7.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: void <init>(int,android.graphics.Rect,android.graphics.Rect,float)>($i2, $r6, $r5, 1.0F);

        return $r7;
    }

    public static android.util.Size convertSize(android.hardware.Camera$Size)
    {
        android.hardware.Camera$Size r0;
        android.util.Size $r2;
        int $i0, $i1;

        r0 := @parameter0: android.hardware.Camera$Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "size must not be null");

        $r2 = new android.util.Size;

        $i1 = r0.<android.hardware.Camera$Size: int width>;

        $i0 = r0.<android.hardware.Camera$Size: int height>;

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>($i1, $i0);

        return $r2;
    }

    public static java.util.List convertSizeList(java.util.List)
    {
        android.hardware.Camera$Size r1;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r4;
        android.util.Size $r5;
        java.util.List r6;
        java.util.Iterator r7;

        r6 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "sizeList must not be null");

        $r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.hardware.Camera$Size) $r4;

        $r5 = new android.util.Size;

        $i2 = r1.<android.hardware.Camera$Size: int width>;

        $i1 = r1.<android.hardware.Camera$Size: int height>;

        specialinvoke $r5.<android.util.Size: void <init>(int,int)>($i2, $i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r3;
    }

    public static android.util.Size[] convertSizeListToArray(java.util.List)
    {
        android.util.Size[] r0;
        android.hardware.Camera$Size r1;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        java.lang.Object $r3;
        android.util.Size $r4;
        java.util.List r5;
        java.util.Iterator r6;

        r5 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "sizeList must not be null");

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        r0 = newarray (android.util.Size)[$i0];

        i3 = 0;

        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.hardware.Camera$Size) $r3;

        $r4 = new android.util.Size;

        $i2 = r1.<android.hardware.Camera$Size: int width>;

        $i1 = r1.<android.hardware.Camera$Size: int height>;

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>($i2, $i1);

        r0[i3] = $r4;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$ZoomData convertToLegacyZoom(android.graphics.Rect, android.graphics.Rect, java.lang.Float, android.util.Size, android.hardware.Camera$Parameters)
    {
        android.graphics.Rect r0, r1;
        java.lang.Float r2;
        android.util.Size r3;
        android.hardware.Camera$Parameters r4;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData $r5, $r6;
        float $f0, $f1, $f2, $f3;
        byte $b0;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: java.lang.Float;

        r3 := @parameter3: android.util.Size;

        r4 := @parameter4: android.hardware.Camera$Parameters;

        if r2 == null goto label1;

        $f0 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

        $f1 = 1.0F - $f0;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $b0 = $f2 cmpl 1.0E-4F;

        if $b0 <= 0 goto label1;

        $f3 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

        $r6 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertZoomRatio(android.graphics.Rect,float,android.util.Size,android.hardware.Camera$Parameters)>(r0, $f3, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertScalerCropRegion(android.graphics.Rect,android.graphics.Rect,android.util.Size,android.hardware.Camera$Parameters)>(r0, r1, r3, r4);

        return $r5;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$ZoomData convertZoomRatio(android.graphics.Rect, float, android.util.Size, android.hardware.Camera$Parameters)
    {
        float f0, $f1, $f2, f3, f4;
        java.util.List r0, r1, r22;
        int $i0, $i1, $i2, $i3, $i5, i6, i7, i8;
        java.lang.AssertionError $r2;
        android.graphics.Rect $r3, $r5, $r6, $r8, r15, r18, r19, r20, r21;
        java.lang.Object $r4, $r7, $r9, $r11, $r12, $r13;
        boolean $z0;
        java.lang.Integer $r10, $r14;
        byte $b4;
        android.util.Size r16;
        android.hardware.Camera$Parameters r17;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData $r23;

        r15 := @parameter0: android.graphics.Rect;

        f0 := @parameter1: float;

        r16 := @parameter2: android.util.Size;

        r17 := @parameter3: android.hardware.Camera$Parameters;

        r0 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect)>(r17, r15);

        r1 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailablePreviewZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>(r17, r15, r16);

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != $i1 goto label3;

        i6 = 0;

        i7 = 0;

        $r3 = new android.graphics.Rect;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (android.graphics.Rect) $r4;

        specialinvoke $r3.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r5);

        r18 = $r3;

        $r6 = new android.graphics.Rect;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (android.graphics.Rect) $r7;

        specialinvoke $r6.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r8);

        r19 = $r6;

        f3 = 1.0F;

        r20 = $r3;

        r21 = $r6;

        f4 = 1.0F;

        $z0 = virtualinvoke r17.<android.hardware.Camera$Parameters: boolean isZoomSupported()>();

        if $z0 == 0 goto label2;

        r22 = virtualinvoke r17.<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>();

        i8 = 1;

     label1:
        i6 = i7;

        r20 = r18;

        r21 = r19;

        f4 = f3;

        $i2 = interfaceinvoke r22.<java.util.List: int size()>();

        if i8 >= $i2 goto label2;

        i6 = i7;

        r20 = r18;

        r21 = r19;

        f4 = f3;

        $f1 = 100.0F * f0;

        $r9 = interfaceinvoke r22.<java.util.List: java.lang.Object get(int)>(i8);

        $r10 = (java.lang.Integer) $r9;

        $i3 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $f2 = (float) $i3;

        $b4 = $f1 cmpl $f2;

        if $b4 < 0 goto label2;

        i7 = i8;

        $r11 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i8);

        r18 = (android.graphics.Rect) $r11;

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        r19 = (android.graphics.Rect) $r12;

        $r13 = interfaceinvoke r22.<java.util.List: java.lang.Object get(int)>(i8);

        $r14 = (java.lang.Integer) $r13;

        $i5 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        f3 = (float) $i5;

        i8 = i8 + 1;

        goto label1;

     label2:
        $r23 = new android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        specialinvoke $r23.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: void <init>(int,android.graphics.Rect,android.graphics.Rect,float)>(i6, r20, r21, f4);

        return $r23;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("available reported/preview crop region size mismatch");

        throw $r2;
    }

    private static java.util.List getAvailableCropRectangles(android.hardware.Camera$Parameters, android.graphics.Rect, android.util.Size)
    {
        android.graphics.Rect r0, r1, $r13;
        float f0, $f1, $f2, $f3;
        boolean $z0, $z1;
        java.util.ArrayList $r7, $r14;
        int $i0, $i1, $i2;
        android.graphics.Matrix $r8;
        android.graphics.RectF $r9;
        java.util.List $r10, $r16;
        java.lang.Object $r11;
        java.lang.Integer $r12;
        android.graphics.Rect[] $r15;
        android.hardware.Camera$Parameters r17;
        android.util.Size r18;
        java.util.Iterator r20;

        r17 := @parameter0: android.hardware.Camera$Parameters;

        r0 := @parameter1: android.graphics.Rect;

        r18 := @parameter2: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r17, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "activeArray must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r18, "streamSize must not be null");

        r1 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect getPreviewCropRectangleUnzoomed(android.graphics.Rect,android.util.Size)>(r0, r18);

        $z0 = virtualinvoke r17.<android.hardware.Camera$Parameters: boolean isZoomSupported()>();

        if $z0 != 0 goto label1;

        $r14 = new java.util.ArrayList;

        $r15 = newarray (android.graphics.Rect)[1];

        $r15[0] = r1;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>($r16);

        return $r14;

     label1:
        $r7 = new java.util.ArrayList;

        $i0 = virtualinvoke r17.<android.hardware.Camera$Parameters: int getMaxZoom()>();

        $i1 = $i0 + 1;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i1);

        $r8 = new android.graphics.Matrix;

        specialinvoke $r8.<android.graphics.Matrix: void <init>()>();

        $r9 = new android.graphics.RectF;

        specialinvoke $r9.<android.graphics.RectF: void <init>()>();

        $r10 = virtualinvoke r17.<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>();

        r20 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Integer) $r11;

        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $f1 = (float) $i2;

        f0 = 100.0F / $f1;

        staticinvoke <android.hardware.camera2.utils.ParamsUtils: void convertRectF(android.graphics.Rect,android.graphics.RectF)>(r1, $r9);

        $f2 = virtualinvoke r0.<android.graphics.Rect: float exactCenterX()>();

        $f3 = virtualinvoke r0.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke $r8.<android.graphics.Matrix: void setScale(float,float,float,float)>(f0, f0, $f2, $f3);

        virtualinvoke $r8.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r9);

        $r13 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.graphics.RectF)>($r9);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label2;

     label3:
        return $r7;
    }

    public static java.util.List getAvailablePreviewZoomCropRectangles(android.hardware.Camera$Parameters, android.graphics.Rect, android.util.Size)
    {
        android.hardware.Camera$Parameters r0;
        android.graphics.Rect r1;
        android.util.Size r2;
        java.util.List $r6;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "activeArray must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "previewSize must not be null");

        $r6 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>(r0, r1, r2);

        return $r6;
    }

    public static java.util.List getAvailableZoomCropRectangles(android.hardware.Camera$Parameters, android.graphics.Rect)
    {
        android.hardware.Camera$Parameters r0;
        android.graphics.Rect r1;
        android.util.Size $r4;
        java.util.List $r5;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        r1 := @parameter1: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "activeArray must not be null");

        $r4 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.util.Size createSize(android.graphics.Rect)>(r1);

        $r5 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>(r0, r1, $r4);

        return $r5;
    }

    public static int getClosestAvailableZoomCrop(android.hardware.Camera$Parameters, android.graphics.Rect, android.util.Size, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1, r2, $r5, r11, r13, r15, r16, r17, r18, r19;
        java.util.List r3, r4;
        boolean $z0, z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.AssertionError $r6, $r7;
        java.lang.Object $r8, $r9;
        android.hardware.Camera$Parameters r10;
        android.util.Size r12;

        r10 := @parameter0: android.hardware.Camera$Parameters;

        r11 := @parameter1: android.graphics.Rect;

        r12 := @parameter2: android.util.Size;

        r13 := @parameter3: android.graphics.Rect;

        r0 := @parameter4: android.graphics.Rect;

        r1 := @parameter5: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r10, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r11, "activeArray must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r12, "streamSize must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "reportedCropRegion must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "previewCropRegion must not be null");

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r13);

        $z0 = virtualinvoke $r5.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r11);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ParameterUtils", "getClosestAvailableZoomCrop - Crop region out of range; setting to active array size");

        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>(r11);

     label1:
        r15 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect getPreviewCropRectangleUnzoomed(android.graphics.Rect,android.util.Size)>(r11, r12);

        r2 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect shrinkToSameAspectRatioCentered(android.graphics.Rect,android.graphics.Rect)>(r15, $r5);

        i7 = -1;

        r3 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect)>(r10, r11);

        r4 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailablePreviewZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>(r10, r11, r12);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i0 != $i1 goto label8;

        i8 = 0;

        r16 = null;

        r17 = null;

     label2:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if i8 >= $i2 goto label6;

        $r8 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i8);

        r18 = (android.graphics.Rect) $r8;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i8);

        r19 = (android.graphics.Rect) $r9;

        if i7 != -1 goto label3;

        z1 = 1;

        goto label5;

     label3:
        $i3 = virtualinvoke r18.<android.graphics.Rect: int width()>();

        $i4 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        if $i3 < $i4 goto label4;

        $i5 = virtualinvoke r18.<android.graphics.Rect: int height()>();

        $i6 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        if $i5 < $i6 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        if z1 == 0 goto label6;

        r16 = r18;

        r17 = r19;

        i7 = i8;

        i8 = i8 + 1;

        goto label2;

     label6:
        if i7 == -1 goto label7;

        virtualinvoke r0.<android.graphics.Rect: void set(android.graphics.Rect)>(r17);

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r16);

        return i7;

     label7:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should\'ve found at least one valid zoom index");

        throw $r7;

     label8:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("available reported/preview crop region size mismatch");

        throw $r6;
    }

    public static android.util.Size getLargestSupportedJpegSizeByArea(android.hardware.Camera$Parameters)
    {
        android.hardware.Camera$Parameters r0;
        java.util.List $r2, $r3;
        android.util.Size $r4;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        $r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        $r3 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)>($r2);

        $r4 = staticinvoke <android.hardware.camera2.utils.SizeAreaComparator: android.util.Size findLargestByArea(java.util.List)>($r3);

        return $r4;
    }

    public static float getMaxZoomRatio(android.hardware.Camera$Parameters)
    {
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r0;
        java.lang.Integer $r1;
        float $f0, $f1, $f2;
        android.hardware.Camera$Parameters r2;
        java.util.List r3;

        r2 := @parameter0: android.hardware.Camera$Parameters;

        $z0 = virtualinvoke r2.<android.hardware.Camera$Parameters: boolean isZoomSupported()>();

        if $z0 != 0 goto label1;

        return 1.0F;

     label1:
        r3 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>();

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r0 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r1 = (java.lang.Integer) $r0;

        $i2 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $f0 = (float) $i2;

        $f1 = $f0 * 1.0F;

        $f2 = $f1 / 100.0F;

        return $f2;
    }

    private static android.graphics.Rect getPreviewCropRectangleUnzoomed(android.graphics.Rect, android.util.Size)
    {
        android.graphics.Rect r0, $r8;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10, f11, $f12, $f13, $f14, $f15, $f16, $f17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13;
        java.lang.IllegalArgumentException $r2, $r3;
        double $d0;
        byte $b8, $b9;
        android.util.Size r4;
        android.graphics.Matrix $r5;
        android.graphics.RectF $r7;

        r0 := @parameter0: android.graphics.Rect;

        r4 := @parameter1: android.util.Size;

        $i0 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        if $i0 > $i1 goto label5;

        $i2 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $i3 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        if $i2 > $i3 goto label4;

        $i4 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f1 = (float) $i4;

        $f2 = $f1 * 1.0F;

        $i5 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f3 = (float) $i5;

        f9 = $f2 / $f3;

        $i6 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $f4 = (float) $i6;

        $f5 = $f4 * 1.0F;

        $i7 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $f6 = (float) $i7;

        f0 = $f5 / $f6;

        $f7 = f0 - f9;

        $f8 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $d0 = (double) $f8;

        $b8 = $d0 cmpg 0.05000000074505806;

        if $b8 >= 0 goto label1;

        $i12 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        f10 = (float) $i12;

        $i13 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        f11 = (float) $i13;

        goto label3;

     label1:
        $b9 = f0 cmpg f9;

        if $b9 >= 0 goto label2;

        $i11 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        f10 = (float) $i11;

        f11 = f10 * f0;

        goto label3;

     label2:
        $i10 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        f11 = (float) $i10;

        f10 = f11 / f0;

     label3:
        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        $r7 = new android.graphics.RectF;

        specialinvoke $r7.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, f11, f10);

        $f12 = virtualinvoke r0.<android.graphics.Rect: float exactCenterX()>();

        $f13 = virtualinvoke r0.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke $r5.<android.graphics.Matrix: void setTranslate(float,float)>($f12, $f13);

        $f14 = virtualinvoke $r7.<android.graphics.RectF: float centerX()>();

        $f15 = neg $f14;

        $f16 = virtualinvoke $r7.<android.graphics.RectF: float centerY()>();

        $f17 = neg $f16;

        virtualinvoke $r5.<android.graphics.Matrix: boolean postTranslate(float,float)>($f15, $f17);

        virtualinvoke $r5.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r7);

        $r8 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.graphics.RectF)>($r7);

        return $r8;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("previewSize must not be taller than activeArray");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("previewSize must not be wider than activeArray");

        throw $r2;
    }

    private static android.util.SizeF getZoomRatio(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        int $i0, $i2, $i4, $i5, $i6, $i7;
        android.util.SizeF $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "activeArraySize must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "cropSize must not be null");

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>($i0, "cropSize.width must be positive");

        $i2 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>($i2, "cropSize.height must be positive");

        $r4 = new android.util.SizeF;

        $i4 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f0 = (float) $i4;

        $f1 = $f0 * 1.0F;

        $i5 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f2 = (float) $i5;

        $f3 = $f1 / $f2;

        $i6 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f4 = (float) $i6;

        $f5 = $f4 * 1.0F;

        $i7 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f6 = (float) $i7;

        $f7 = $f5 / $f6;

        specialinvoke $r4.<android.util.SizeF: void <init>(float,float)>($f3, $f7);

        return $r4;
    }

    private static android.graphics.Rect shrinkToSameAspectRatioCentered(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1, $r6;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, f14, f15;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8;
        byte $b4;
        android.graphics.Matrix $r4;
        android.graphics.RectF $r5;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f1 = (float) $i0;

        $f2 = $f1 * 1.0F;

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f3 = (float) $i1;

        f13 = $f2 / $f3;

        $i2 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f4 = (float) $i2;

        $f5 = $f4 * 1.0F;

        $i3 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f6 = (float) $i3;

        f0 = $f5 / $f6;

        $b4 = f0 cmpg f13;

        if $b4 >= 0 goto label1;

        $i8 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        f14 = (float) $i8;

        f15 = f14 * f0;

        goto label2;

     label1:
        $i5 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        f15 = (float) $i5;

        f14 = f15 / f0;

     label2:
        $r4 = new android.graphics.Matrix;

        specialinvoke $r4.<android.graphics.Matrix: void <init>()>();

        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>(android.graphics.Rect)>(r1);

        $i6 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f7 = (float) $i6;

        $f8 = f15 / $f7;

        $i7 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f9 = (float) $i7;

        $f10 = f14 / $f9;

        $f11 = virtualinvoke r1.<android.graphics.Rect: float exactCenterX()>();

        $f12 = virtualinvoke r1.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke $r4.<android.graphics.Matrix: void setScale(float,float,float,float)>($f8, $f10, $f11, $f12);

        virtualinvoke $r4.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r5);

        $r6 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.graphics.RectF)>($r5);

        return $r6;
    }

    public static java.lang.String stringFromArea(android.hardware.Camera$Area)
    {
        android.hardware.Camera$Area r0;
        android.graphics.Rect r2;
        java.lang.StringBuilder $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r16;

        r0 := @parameter0: android.hardware.Camera$Area;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r2 = r0.<android.hardware.Camera$Area: android.graphics.Rect rect>;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([");

        $i0 = r2.<android.graphics.Rect: int left>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i1 = r2.<android.graphics.Rect: int top>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][");

        $i2 = r2.<android.graphics.Rect: int right>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i3 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i4 = r0.<android.hardware.Camera$Area: int weight>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r16 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public static java.lang.String stringFromAreaList(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r2;
        android.hardware.Camera$Area r3;
        java.lang.StringBuilder $r4;
        boolean $z0;
        java.lang.String $r5, $r7;
        java.lang.Object $r6;
        int $i0, $i1, i2;

        r0 := @parameter0: java.util.List;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r0 != null goto label1;

        return null;

     label1:
        i2 = 0;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.Camera$Area) $r6;

        if r3 != null goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        goto label4;

     label3:
        $r7 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.lang.String stringFromArea(android.hardware.Camera$Area)>(r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label4:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        if i2 == $i1 goto label5;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
