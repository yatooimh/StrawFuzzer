public class android.hardware.camera2.legacy.RequestThreadManager extends java.lang.Object
{
    private static final float ASPECT_RATIO_TOLERANCE;
    private static final boolean DEBUG;
    private static final int JPEG_FRAME_TIMEOUT;
    private static final int MAX_IN_FLIGHT_REQUESTS;
    private static final int MSG_CLEANUP;
    private static final int MSG_CONFIGURE_OUTPUTS;
    private static final int MSG_SUBMIT_CAPTURE_REQUEST;
    private static final int PREVIEW_FRAME_TIMEOUT;
    private static final int REQUEST_COMPLETE_TIMEOUT;
    private static final boolean USE_BLOB_FORMAT_OVERRIDE;
    private static final boolean VERBOSE;
    private final java.lang.String TAG;
    private final java.util.List mCallbackOutputs;
    private android.hardware.Camera mCamera;
    private final int mCameraId;
    private final android.hardware.camera2.legacy.CaptureCollector mCaptureCollector;
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final android.hardware.camera2.legacy.CameraDeviceState mDeviceState;
    private android.view.Surface mDummySurface;
    private android.graphics.SurfaceTexture mDummyTexture;
    private final android.hardware.Camera$ErrorCallback mErrorCallback;
    private final android.hardware.camera2.legacy.LegacyFaceDetectMapper mFaceDetectMapper;
    private final android.hardware.camera2.legacy.LegacyFocusStateMapper mFocusStateMapper;
    private android.hardware.camera2.legacy.GLThreadManager mGLThreadManager;
    private final java.lang.Object mIdleLock;
    private android.util.Size mIntermediateBufferSize;
    private final android.hardware.Camera$PictureCallback mJpegCallback;
    private final android.hardware.Camera$ShutterCallback mJpegShutterCallback;
    private final java.util.List mJpegSurfaceIds;
    private android.hardware.camera2.legacy.LegacyRequest mLastRequest;
    private android.hardware.Camera$Parameters mParams;
    private final android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mPrevCounter;
    private final android.graphics.SurfaceTexture$OnFrameAvailableListener mPreviewCallback;
    private final java.util.List mPreviewOutputs;
    private boolean mPreviewRunning;
    private android.graphics.SurfaceTexture mPreviewTexture;
    private final java.util.concurrent.atomic.AtomicBoolean mQuit;
    private final android.os.ConditionVariable mReceivedJpeg;
    private final android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mRequestCounter;
    private final android.os.Handler$Callback mRequestHandlerCb;
    private final android.hardware.camera2.legacy.RequestQueue mRequestQueue;
    private final android.hardware.camera2.legacy.RequestHandlerThread mRequestThread;

    public void <init>(int, android.hardware.Camera, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.legacy.CameraDeviceState)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        int i0;
        android.hardware.camera2.CameraCharacteristics r1, $r21, $r29;
        android.hardware.camera2.legacy.CameraDeviceState r2, $r25, $r32;
        java.util.ArrayList $r4, $r5, $r6;
        android.hardware.camera2.legacy.RequestQueue $r7;
        java.lang.Object $r8, $r18, $r20, $r24;
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter $r9, $r10;
        java.util.concurrent.atomic.AtomicBoolean $r11;
        android.hardware.camera2.legacy.RequestThreadManager$1 $r12;
        android.os.ConditionVariable $r13;
        android.hardware.camera2.legacy.RequestThreadManager$2 $r14;
        android.hardware.camera2.legacy.RequestThreadManager$3 $r15;
        android.hardware.camera2.legacy.RequestThreadManager$4 $r16;
        android.hardware.camera2.legacy.RequestThreadManager$5 $r17;
        android.hardware.Camera $r19, $r27, $r30, $r36, r37;
        java.lang.Object[] $r22;
        java.lang.Integer $r23;
        android.hardware.camera2.legacy.LegacyFocusStateMapper $r26;
        android.hardware.camera2.legacy.LegacyFaceDetectMapper $r28;
        android.hardware.camera2.legacy.CaptureCollector $r31;
        android.hardware.camera2.legacy.RequestHandlerThread $r33;
        android.os.Handler$Callback $r34;
        android.hardware.Camera$ErrorCallback $r35;
        java.lang.String r38;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        i0 := @parameter0: int;

        r37 := @parameter1: android.hardware.Camera;

        r1 := @parameter2: android.hardware.camera2.CameraCharacteristics;

        r2 := @parameter3: android.hardware.camera2.legacy.CameraDeviceState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds> = $r6;

        $r7 = new android.hardware.camera2.legacy.RequestQueue;

        specialinvoke $r7.<android.hardware.camera2.legacy.RequestQueue: void <init>(java.util.List)>($r6);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue> = $r7;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyRequest mLastRequest> = null;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.Object mIdleLock> = $r8;

        $r9 = new android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        specialinvoke $r9.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: void <init>(java.lang.String)>("Incoming Preview");

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mPrevCounter> = $r9;

        $r10 = new android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        specialinvoke $r10.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: void <init>(java.lang.String)>("Incoming Requests");

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mRequestCounter> = $r10;

        $r11 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.concurrent.atomic.AtomicBoolean mQuit> = $r11;

        $r12 = new android.hardware.camera2.legacy.RequestThreadManager$1;

        specialinvoke $r12.<android.hardware.camera2.legacy.RequestThreadManager$1: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ErrorCallback mErrorCallback> = $r12;

        $r13 = new android.os.ConditionVariable;

        specialinvoke $r13.<android.os.ConditionVariable: void <init>(boolean)>(0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.ConditionVariable mReceivedJpeg> = $r13;

        $r14 = new android.hardware.camera2.legacy.RequestThreadManager$2;

        specialinvoke $r14.<android.hardware.camera2.legacy.RequestThreadManager$2: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$PictureCallback mJpegCallback> = $r14;

        $r15 = new android.hardware.camera2.legacy.RequestThreadManager$3;

        specialinvoke $r15.<android.hardware.camera2.legacy.RequestThreadManager$3: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ShutterCallback mJpegShutterCallback> = $r15;

        $r16 = new android.hardware.camera2.legacy.RequestThreadManager$4;

        specialinvoke $r16.<android.hardware.camera2.legacy.RequestThreadManager$4: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture$OnFrameAvailableListener mPreviewCallback> = $r16;

        $r17 = new android.hardware.camera2.legacy.RequestThreadManager$5;

        specialinvoke $r17.<android.hardware.camera2.legacy.RequestThreadManager$5: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.Handler$Callback mRequestHandlerCb> = $r17;

        $r18 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r37, "camera must not be null");

        $r19 = (android.hardware.Camera) $r18;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera> = $r19;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: int mCameraId> = i0;

        $r20 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "characteristics must not be null");

        $r21 = (android.hardware.camera2.CameraCharacteristics) $r20;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics> = $r21;

        $r22 = newarray (java.lang.Object)[1];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r22[0] = $r23;

        r38 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("RequestThread-%d", $r22);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG> = r38;

        $r24 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "deviceState must not be null");

        $r25 = (android.hardware.camera2.legacy.CameraDeviceState) $r24;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState> = $r25;

        $r26 = new android.hardware.camera2.legacy.LegacyFocusStateMapper;

        $r27 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        specialinvoke $r26.<android.hardware.camera2.legacy.LegacyFocusStateMapper: void <init>(android.hardware.Camera)>($r27);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFocusStateMapper mFocusStateMapper> = $r26;

        $r28 = new android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        $r30 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r29 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        specialinvoke $r28.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: void <init>(android.hardware.Camera,android.hardware.camera2.CameraCharacteristics)>($r30, $r29);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFaceDetectMapper mFaceDetectMapper> = $r28;

        $r31 = new android.hardware.camera2.legacy.CaptureCollector;

        $r32 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        specialinvoke $r31.<android.hardware.camera2.legacy.CaptureCollector: void <init>(int,android.hardware.camera2.legacy.CameraDeviceState)>(2, $r32);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector> = $r31;

        $r33 = new android.hardware.camera2.legacy.RequestHandlerThread;

        $r34 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.Handler$Callback mRequestHandlerCb>;

        specialinvoke $r33.<android.hardware.camera2.legacy.RequestHandlerThread: void <init>(java.lang.String,android.os.Handler$Callback)>(r38, $r34);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread> = $r33;

        $r36 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r35 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ErrorCallback mErrorCallback>;

        virtualinvoke $r36.<android.hardware.Camera: void setDetailedErrorCallback(android.hardware.Camera$ErrorCallback)>($r35);

        return;
    }

    static android.hardware.camera2.legacy.CameraDeviceState access$000(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.CameraDeviceState $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        return $r1;
    }

    static java.lang.String access$100(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        return $r1;
    }

    static android.hardware.camera2.legacy.LegacyRequest access$1000(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyRequest $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyRequest mLastRequest>;

        return $r1;
    }

    static android.hardware.camera2.legacy.LegacyRequest access$1002(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyRequest r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.LegacyRequest;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyRequest mLastRequest> = r1;

        return r1;
    }

    static android.hardware.Camera$Parameters access$1100(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera$Parameters $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        return $r1;
    }

    static android.hardware.Camera$Parameters access$1102(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera$Parameters r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams> = r1;

        return r1;
    }

    static android.hardware.camera2.CameraCharacteristics access$1200(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.CameraCharacteristics $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        return $r1;
    }

    static android.hardware.Camera access$1300(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        return $r1;
    }

    static android.hardware.Camera access$1302(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.Camera)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.Camera;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera> = r1;

        return r1;
    }

    static void access$1400(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void doPreviewCapture(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return;
    }

    static void access$1500(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void doJpegCapturePrepare(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return;
    }

    static android.hardware.camera2.legacy.LegacyFaceDetectMapper access$1600(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyFaceDetectMapper $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFaceDetectMapper mFaceDetectMapper>;

        return $r1;
    }

    static android.hardware.camera2.legacy.LegacyFocusStateMapper access$1700(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyFocusStateMapper $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFocusStateMapper mFocusStateMapper>;

        return $r1;
    }

    static void access$1800(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void doJpegCapture(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return;
    }

    static void access$1900(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void disconnectCallbackSurfaces()>();

        return;
    }

    static android.hardware.camera2.legacy.CaptureCollector access$200(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.CaptureCollector $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector>;

        return $r1;
    }

    static java.util.List access$300(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.List $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        return $r1;
    }

    static android.os.ConditionVariable access$400(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.os.ConditionVariable $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.ConditionVariable mReceivedJpeg>;

        return $r1;
    }

    static android.hardware.camera2.legacy.GLThreadManager access$500(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.GLThreadManager $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        return $r1;
    }

    static android.hardware.camera2.legacy.GLThreadManager access$502(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.GLThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.GLThreadManager r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.GLThreadManager;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager> = r1;

        return r1;
    }

    static void access$600(android.hardware.camera2.legacy.RequestThreadManager, java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: java.util.Collection;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void configureOutputs(java.util.Collection)>(r1);

        return;
    }

    static android.hardware.camera2.legacy.RequestHandlerThread access$700(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHandlerThread $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        return $r1;
    }

    static android.hardware.camera2.legacy.RequestQueue access$800(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestQueue $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        return $r1;
    }

    static java.lang.Object access$900(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.Object mIdleLock>;

        return $r1;
    }

    private android.util.Size calculatePictureSize(java.util.List, java.util.List, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.view.Surface r1;
        android.util.Size r2, $r5, r30, r35, r36;
        int $i0, $i1, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.IllegalStateException $r3;
        java.util.ArrayList $r4, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z8;
        java.util.List $r6, $r22, r23, r24, r32;
        java.lang.StringBuilder $r8;
        java.lang.AssertionError $r11;
        java.lang.String $r12, $r16, $r17;
        android.hardware.camera2.utils.SizeAreaComparator $r13;
        java.lang.Object $r14, $r18, $r19, $r20, $r21;
        java.lang.Object[] $r15;
        android.hardware.Camera$Parameters r25;
        java.util.Iterator r27, r28, r29, r34;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r23 := @parameter0: java.util.List;

        r24 := @parameter1: java.util.List;

        r25 := @parameter2: android.hardware.Camera$Parameters;

        $i0 = interfaceinvoke r23.<java.util.List: int size()>();

        $i1 = interfaceinvoke r24.<java.util.List: int size()>();

        if $i0 != $i1 goto label14;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r27 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

        r28 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z8 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label03;

        $r20 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.view.Surface) $r20;

        $r21 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.util.Size) $r21;

        $r22 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        $z6 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean containsSurfaceId(android.view.Surface,java.util.Collection)>(r1, $r22);

        if $z6 != 0 goto label02;

        goto label01;

     label02:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label01;

     label03:
        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label13;

        i7 = -1;

        i8 = -1;

        r29 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r19 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (android.util.Size) $r19;

        $i5 = virtualinvoke r30.<android.util.Size: int getWidth()>();

        if $i5 <= i7 goto label05;

        i7 = virtualinvoke r30.<android.util.Size: int getWidth()>();

        goto label05;

     label05:
        $i6 = virtualinvoke r30.<android.util.Size: int getHeight()>();

        if $i6 <= i8 goto label06;

        i8 = virtualinvoke r30.<android.util.Size: int getHeight()>();

        goto label06;

     label06:
        goto label04;

     label07:
        $r5 = new android.util.Size;

        specialinvoke $r5.<android.util.Size: void <init>(int,int)>(i7, i8);

        $r6 = virtualinvoke r25.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        r32 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)>($r6);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r34 = interfaceinvoke r32.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r18 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (android.util.Size) $r18;

        $i3 = virtualinvoke r35.<android.util.Size: int getWidth()>();

        if $i3 < i7 goto label09;

        $i4 = virtualinvoke r35.<android.util.Size: int getHeight()>();

        if $i4 < i8 goto label09;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r35);

     label09:
        goto label08;

     label10:
        $z3 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label12;

        $r13 = new android.hardware.camera2.utils.SizeAreaComparator;

        specialinvoke $r13.<android.hardware.camera2.utils.SizeAreaComparator: void <init>()>();

        $r14 = staticinvoke <java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)>($r7, $r13);

        r36 = (android.util.Size) $r14;

        $z4 = virtualinvoke r36.<android.util.Size: boolean equals(java.lang.Object)>($r5);

        if $z4 != 0 goto label11;

        $r16 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r15 = newarray (java.lang.Object)[2];

        $r15[0] = r36;

        $r15[1] = $r5;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("configureOutputs - Will need to crop picture %s into smallest bound size %s", $r15);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r16, $r17);

     label11:
        return r36;

     label12:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find any supported JPEG sizes large enough to fit ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r11 = new java.lang.AssertionError;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r11;

     label13:
        return null;

     label14:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Input collections must be same length");

        throw $r3;
    }

    private static boolean checkAspectRatiosMatch(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b4;
        boolean z0;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        $i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f1 = (float) $i1;

        $f2 = $f0 / $f1;

        $i2 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f3 = (float) $i2;

        $i3 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f4 = (float) $i3;

        $f5 = $f3 / $f4;

        $f6 = $f2 - $f5;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        $b4 = $f7 cmpg 0.01F;

        if $b4 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void configureOutputs(java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        int i0, i1, i2, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        android.util.Size r3, r4, r5, $r42, $r54, r90, r95, r97, r99;
        long l3, l4, l5, l6, $l25, $l27;
        android.hardware.Camera $r6, $r21, $r35;
        java.util.List $r7, $r8, $r9, $r10, $r24, $r28, $r31, $r52, $r59, $r61, $r62, r93, r96;
        java.util.ArrayList $r11, $r12, $r27;
        android.hardware.camera2.CameraCharacteristics$Key $r13, $r17;
        android.hardware.camera2.CameraCharacteristics $r14, $r18;
        java.lang.Object $r15, $r19, $r37, $r39, $r41, $r55, $r56, $r57, $r58;
        java.lang.Integer $r16, $r20;
        android.hardware.Camera$Parameters $r22, $r23, $r34, $r49, $r50, $r51, $r53, r92;
        android.hardware.camera2.legacy.GLThreadManager $r25, $r26, $r30, $r32, $r33, $r43, $r63, $r64, r86;
        android.hardware.camera2.legacy.CaptureCollector $r29;
        boolean $z0, $z2, $z3, $z9, $z10;
        android.graphics.SurfaceTexture$OnFrameAvailableListener $r36;
        android.util.Pair $r38, r88;
        android.view.Surface $r40, r89, r107;
        android.hardware.camera2.legacy.CameraDeviceState $r44, $r69, $r72, $r75, $r78;
        java.lang.StringBuilder $r45;
        java.lang.String $r48, $r66, $r68, $r71, $r74, $r77, $r80, $r82, r100;
        byte $b24, $b26;
        java.lang.Long $r60;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r65, $r79;
        java.lang.RuntimeException $r67, $r70, $r73, $r76;
        java.lang.Throwable $r81;
        java.util.Collection r83;
        java.util.Iterator r87, r98, r104, r105, r106;
        int[] r94;
        android.graphics.SurfaceTexture r109;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r83 := @parameter0: java.util.Collection;

     label01:
        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void stopPreview()>();

     label02:
        $r6 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        virtualinvoke $r6.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>(null);

     label03:
        goto label06;

     label04:
        $r73 := @caughtexception;

        $r74 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r74, "Received device exception in configure call: ", $r73);

        $r75 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        virtualinvoke $r75.<android.hardware.camera2.legacy.CameraDeviceState: void setError(int)>(1);

        return;

     label05:
        $r81 := @caughtexception;

        $r82 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r82, "Failed to clear prior SurfaceTexture, may cause GL deadlock: ", $r81);

     label06:
        r86 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        if r86 == null goto label07;

        virtualinvoke r86.<android.hardware.camera2.legacy.GLThreadManager: void waitUntilStarted()>();

        $r63 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r63.<android.hardware.camera2.legacy.GLThreadManager: void ignoreNewFrames()>();

        $r64 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r64.<android.hardware.camera2.legacy.GLThreadManager: void waitUntilIdle()>();

     label07:
        $r7 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void resetJpegSurfaceFormats(java.util.Collection)>($r7);

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void disconnectCallbackSurfaces()>();

        $r8 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r9 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        interfaceinvoke $r9.<java.util.List: void clear()>();

        $r10 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture> = null;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r14 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r13 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r15 = virtualinvoke $r14.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r13);

        $r16 = (java.lang.Integer) $r15;

        i0 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        $r18 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r17 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r19 = virtualinvoke $r18.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r17);

        $r20 = (java.lang.Integer) $r19;

        i1 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        if r83 == null goto label17;

        r87 = interfaceinvoke r83.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r56 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>();

        r88 = (android.util.Pair) $r56;

        $r57 = r88.<android.util.Pair: java.lang.Object first>;

        r89 = (android.view.Surface) $r57;

        $r58 = r88.<android.util.Pair: java.lang.Object second>;

        r90 = (android.util.Size) $r58;

     label09:
        i2 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r89);

        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceOrientation(android.view.Surface,int,int)>(r89, i0, i1);

     label10:
        if i2 == 33 goto label13;

     label11:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setScalingMode(android.view.Surface,int)>(r89, 1);

        $r62 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>(r89);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r90);

     label12:
        goto label14;

     label13:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceFormat(android.view.Surface,int)>(r89, 1);

        $r59 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        $l27 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>(r89);

        $r60 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l27);

        interfaceinvoke $r59.<java.util.List: boolean add(java.lang.Object)>($r60);

        $r61 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        interfaceinvoke $r61.<java.util.List: boolean add(java.lang.Object)>(r89);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r90);

        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void connectSurface(android.view.Surface)>(r89);

     label14:
        goto label16;

     label15:
        $r79 := @caughtexception;

        $r80 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r80, "Surface abandoned, skipping...", $r79);

     label16:
        goto label08;

     label17:
        $r21 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        r92 = virtualinvoke $r21.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams> = r92;

     label18:
        r93 = virtualinvoke r92.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        r94 = specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: int[] getPhotoPreviewFpsRange(java.util.List)>(r93);

        $r22 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $i8 = r94[0];

        $i7 = r94[1];

        virtualinvoke $r22.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i8, $i7);

        $r24 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        $r23 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        r3 = specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size calculatePictureSize(java.util.List,java.util.List,android.hardware.Camera$Parameters)>($r24, $r12, $r23);

        $i9 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i9 <= 0 goto label23;

        r4 = staticinvoke <android.hardware.camera2.utils.SizeAreaComparator: android.util.Size findLargestByArea(java.util.List)>($r11);

        $r50 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        r95 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size getLargestSupportedJpegSizeByArea(android.hardware.Camera$Parameters)>($r50);

        if r3 == null goto label19;

        r95 = r3;

        goto label19;

     label19:
        $r51 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $r52 = virtualinvoke $r51.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

        r96 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)>($r52);

        $i14 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        l3 = (long) $i14;

        $i15 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        l4 = (long) $i15;

        r97 = staticinvoke <android.hardware.camera2.utils.SizeAreaComparator: android.util.Size findLargestByArea(java.util.List)>(r96);

        r98 = interfaceinvoke r96.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z9 = interfaceinvoke r98.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label22;

        $r55 = interfaceinvoke r98.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.util.Size) $r55;

        $i18 = virtualinvoke r5.<android.util.Size: int getWidth()>();

        $i19 = virtualinvoke r5.<android.util.Size: int getHeight()>();

        $i20 = $i18 * $i19;

        l5 = (long) $i20;

        $i21 = virtualinvoke r97.<android.util.Size: int getWidth()>();

        $i22 = virtualinvoke r97.<android.util.Size: int getHeight()>();

        $i23 = $i21 * $i22;

        l6 = (long) $i23;

        r99 = r97;

        $z2 = staticinvoke <android.hardware.camera2.legacy.RequestThreadManager: boolean checkAspectRatiosMatch(android.util.Size,android.util.Size)>(r95, r5);

        if $z2 == 0 goto label21;

        r99 = r97;

        $b24 = l5 cmp l6;

        if $b24 >= 0 goto label21;

        r99 = r97;

        $l25 = l3 * l4;

        $b26 = l5 cmp $l25;

        if $b26 < 0 goto label21;

        r99 = r5;

     label21:
        r97 = r99;

        goto label20;

     label22:
        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize> = r97;

        $r53 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $i16 = virtualinvoke r97.<android.util.Size: int getWidth()>();

        $r54 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize>;

        $i17 = virtualinvoke $r54.<android.util.Size: int getHeight()>();

        virtualinvoke $r53.<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>($i16, $i17);

        goto label24;

     label23:
        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize> = null;

     label24:
        if r3 == null goto label25;

        r100 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("configureOutputs - set take picture size to ");

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r100, $r48);

        $r49 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $i12 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i13 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        virtualinvoke $r49.<android.hardware.Camera$Parameters: void setPictureSize(int,int)>($i12, $i13);

     label25:
        $r25 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        if $r25 != null goto label26;

        $r43 = new android.hardware.camera2.legacy.GLThreadManager;

        $i10 = r0.<android.hardware.camera2.legacy.RequestThreadManager: int mCameraId>;

        $r44 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        specialinvoke $r43.<android.hardware.camera2.legacy.GLThreadManager: void <init>(int,int,android.hardware.camera2.legacy.CameraDeviceState)>($i10, i0, $r44);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager> = $r43;

        virtualinvoke $r43.<android.hardware.camera2.legacy.GLThreadManager: void start()>();

     label26:
        $r26 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r26.<android.hardware.camera2.legacy.GLThreadManager: void waitUntilStarted()>();

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        r104 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

        $r28 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        r105 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>();

     label27:
        $z10 = interfaceinvoke r105.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label28;

        $r38 = new android.util.Pair;

        $r39 = interfaceinvoke r105.<java.util.Iterator: java.lang.Object next()>();

        $r40 = (android.view.Surface) $r39;

        $r41 = interfaceinvoke r104.<java.util.Iterator: java.lang.Object next()>();

        $r42 = (android.util.Size) $r41;

        specialinvoke $r38.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r40, $r42);

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r38);

        goto label27;

     label28:
        $r30 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        $r29 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector>;

        virtualinvoke $r30.<android.hardware.camera2.legacy.GLThreadManager: void setConfigurationAndWait(java.util.Collection,android.hardware.camera2.legacy.CaptureCollector)>($r27, $r29);

        $r31 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        r106 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label29:
        $z0 = interfaceinvoke r106.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label34;

        $r37 = interfaceinvoke r106.<java.util.Iterator: java.lang.Object next()>();

        r107 = (android.view.Surface) $r37;

     label30:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceOrientation(android.view.Surface,int,int)>(r107, i0, i1);

     label31:
        goto label33;

     label32:
        $r65 := @caughtexception;

        $r66 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r66, "Surface abandoned, skipping setSurfaceOrientation()", $r65);

     label33:
        goto label29;

     label34:
        $r32 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r32.<android.hardware.camera2.legacy.GLThreadManager: void allowNewFrames()>();

        $r33 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        r109 = virtualinvoke $r33.<android.hardware.camera2.legacy.GLThreadManager: android.graphics.SurfaceTexture getCurrentSurfaceTexture()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture> = r109;

        if r109 == null goto label35;

        $r36 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture$OnFrameAvailableListener mPreviewCallback>;

        virtualinvoke r109.<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>($r36);

     label35:
        $r35 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r34 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        virtualinvoke $r35.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r34);

     label36:
        goto label38;

     label37:
        $r67 := @caughtexception;

        $r68 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r68, "Received device exception while configuring: ", $r67);

        $r69 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        virtualinvoke $r69.<android.hardware.camera2.legacy.CameraDeviceState: void setError(int)>(1);

     label38:
        return;

     label39:
        $r70 := @caughtexception;

        $r71 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r71, "Received device exception: ", $r70);

        $r72 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        virtualinvoke $r72.<android.hardware.camera2.legacy.CameraDeviceState: void setError(int)>(1);

        return;

     label40:
        $r76 := @caughtexception;

        $r77 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r77, "Received device exception in configure call: ", $r76);

        $r78 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        virtualinvoke $r78.<android.hardware.camera2.legacy.CameraDeviceState: void setError(int)>(1);

        return;

        catch java.lang.RuntimeException from label01 to label02 with label40;
        catch java.io.IOException from label02 to label03 with label05;
        catch java.lang.RuntimeException from label02 to label03 with label04;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label09 to label10 with label15;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label11 to label12 with label15;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label13 to label14 with label15;
        catch java.lang.RuntimeException from label17 to label18 with label39;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label30 to label31 with label32;
        catch java.lang.RuntimeException from label35 to label36 with label37;
    }

    private void createDummySurface()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.graphics.SurfaceTexture $r2, $r3, $r5;
        android.view.Surface $r4, $r6;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture>;

        if $r2 == null goto label1;

        $r6 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.view.Surface mDummySurface>;

        if $r6 != null goto label2;

     label1:
        $r3 = new android.graphics.SurfaceTexture;

        specialinvoke $r3.<android.graphics.SurfaceTexture: void <init>(int)>(0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture> = $r3;

        virtualinvoke $r3.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>(640, 480);

        $r4 = new android.view.Surface;

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture>;

        specialinvoke $r4.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>($r5);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.view.Surface mDummySurface> = $r4;

     label2:
        return;
    }

    private void disconnectCallbackSurfaces()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Iterator r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r4;
        java.lang.String $r5;
        android.view.Surface r6;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.view.Surface) $r3;

     label2:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void disconnectSurface(android.view.Surface)>(r6);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Surface abandoned, skipping...", $r4);

     label5:
        goto label1;

     label6:
        return;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label2 to label3 with label4;
    }

    private void doJpegCapture(android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        android.hardware.Camera$PictureCallback $r2;
        android.hardware.Camera$ShutterCallback $r3;
        android.hardware.Camera $r4;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ShutterCallback mJpegShutterCallback>;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$PictureCallback mJpegCallback>;

        virtualinvoke $r4.<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>($r3, null, $r2);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 0;

        return;
    }

    private void doJpegCapturePrepare(android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        boolean $z0;
        android.graphics.SurfaceTexture $r2;
        android.hardware.Camera $r3;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        $z0 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void createDummySurface()>();

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture>;

        virtualinvoke $r3.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>($r2);

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void startPreview()>();

     label1:
        return;
    }

    private void doPreviewCapture(android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        android.util.Size $r2, $r3;
        int $i0, $i1;
        android.graphics.SurfaceTexture $r4, r7;
        android.hardware.Camera $r5;
        android.hardware.camera2.legacy.RequestHolder r6;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r6 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        $z0 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r7 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture>;

        if r7 == null goto label2;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize>;

        $i0 = virtualinvoke $r2.<android.util.Size: int getWidth()>();

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize>;

        $i1 = virtualinvoke $r3.<android.util.Size: int getHeight()>();

        virtualinvoke r7.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>($i0, $i1);

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture>;

        virtualinvoke $r5.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>($r4);

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void startPreview()>();

        return;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Preview capture called with no preview surfaces configured.");

        throw $r1;
    }

    private int[] getPhotoPreviewFpsRange(java.util.List)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.List r1;
        java.util.Iterator r2;
        int[] r3, $r5;
        int i0, i1, $i2, i4, i5, i6, i7, i8, i9, i10;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.lang.String $r7;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.List;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 != 0 goto label1;

        $r7 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, "No supported frame rates returned!");

        return null;

     label1:
        i4 = 0;

        i5 = 0;

        i6 = 0;

        i7 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (int[]) $r6;

        i0 = r3[0];

        i1 = r3[1];

        if i1 > i5 goto label3;

        i8 = i4;

        i9 = i5;

        i10 = i6;

        if i1 != i5 goto label4;

        i8 = i4;

        i9 = i5;

        i10 = i6;

        if i0 <= i4 goto label4;

     label3:
        i8 = i0;

        i9 = i1;

        i10 = i7;

     label4:
        i7 = i7 + 1;

        i4 = i8;

        i5 = i9;

        i6 = i10;

        goto label2;

     label5:
        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        $r5 = (int[]) $r4;

        return $r5;
    }

    private void resetJpegSurfaceFormats(java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r3;
        java.util.Collection r5;
        java.util.Iterator r6;
        android.view.Surface r7;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r5 := @parameter0: java.util.Collection;

        if r5 != null goto label1;

        return;

     label1:
        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r1 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.view.Surface) $r1;

        if r7 == null goto label7;

        $z0 = virtualinvoke r7.<android.view.Surface: boolean isValid()>();

        if $z0 != 0 goto label3;

        goto label7;

     label3:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceFormat(android.view.Surface,int)>(r7, 33);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Surface abandoned, skipping...", $r3);

     label6:
        goto label2;

     label7:
        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "Jpeg surface is invalid, skipping...");

        goto label2;

     label8:
        return;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label3 to label4 with label5;
    }

    private void startPreview()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        boolean $z0;
        android.hardware.Camera $r1;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $z0 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        virtualinvoke $r1.<android.hardware.Camera: void startPreview()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 1;

     label1:
        return;
    }

    private void stopPreview()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        boolean $z0;
        android.hardware.Camera $r1;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $z0 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        virtualinvoke $r1.<android.hardware.Camera: void stopPreview()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 0;

     label1:
        return;
    }

    public long cancelRepeating(int)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        int i0;
        android.hardware.camera2.legacy.RequestQueue $r1;
        long $l1;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        $l1 = virtualinvoke $r1.<android.hardware.camera2.legacy.RequestQueue: long stopRepeating(int)>(i0);

        return $l1;
    }

    public void configure(java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;
        android.os.Handler r2;
        android.hardware.camera2.legacy.RequestHandlerThread $r4;
        android.os.ConditionVariable $r5;
        android.hardware.camera2.legacy.RequestThreadManager$ConfigureHolder $r6;
        android.os.Message $r7;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.Collection;

        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        r2 = virtualinvoke $r4.<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler waitAndGetHandler()>();

        $r5 = new android.os.ConditionVariable;

        specialinvoke $r5.<android.os.ConditionVariable: void <init>(boolean)>(0);

        $r6 = new android.hardware.camera2.legacy.RequestThreadManager$ConfigureHolder;

        specialinvoke $r6.<android.hardware.camera2.legacy.RequestThreadManager$ConfigureHolder: void <init>(android.os.ConditionVariable,java.util.Collection)>($r5, r1);

        $r7 = virtualinvoke r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(1, 0, 0, $r6);

        virtualinvoke r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r7);

        virtualinvoke $r5.<android.os.ConditionVariable: void block()>();

        return;
    }

    public long flush()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        long l0;
        java.lang.String $r1;
        android.hardware.camera2.legacy.RequestQueue $r2;
        android.hardware.camera2.legacy.CaptureCollector $r3;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r1, "Flushing all pending requests.");

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        l0 = virtualinvoke $r2.<android.hardware.camera2.legacy.RequestQueue: long stopRepeating()>();

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector>;

        virtualinvoke $r3.<android.hardware.camera2.legacy.CaptureCollector: void failAll()>();

        return l0;
    }

    public int getAudioRestriction()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera r1;
        java.lang.IllegalStateException $r2;
        int $i0;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.hardware.Camera: int getAudioRestriction()>();

        return $i0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Camera has been released!");

        throw $r2;
    }

    public void quit()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        android.hardware.camera2.legacy.RequestHandlerThread $r2, $r4, $r5, $r8, $r11;
        android.os.Message $r3;
        java.lang.Throwable $r6;
        java.lang.Object[] $r7;
        java.lang.String $r9, $r10, $r13;
        long $l0;
        java.lang.Long $r12;
        android.os.Handler r14;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.concurrent.atomic.AtomicBoolean mQuit>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 != 0 goto label4;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        r14 = virtualinvoke $r2.<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler waitAndGetHandler()>();

        $r3 = virtualinvoke r14.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke r14.<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>($r3);

        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        virtualinvoke $r4.<android.hardware.camera2.legacy.RequestHandlerThread: boolean quitSafely()>();

     label1:
        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        virtualinvoke $r5.<android.hardware.camera2.legacy.RequestHandlerThread: void join()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r9 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        $r10 = virtualinvoke $r8.<android.hardware.camera2.legacy.RequestHandlerThread: java.lang.String getName()>();

        $r7[0] = $r10;

        $r11 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        $l0 = virtualinvoke $r11.<android.hardware.camera2.legacy.RequestHandlerThread: long getId()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r7[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Thread %s (%d) interrupted while quitting.", $r7);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r9, $r13);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void setAudioRestriction(int)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        int i0;
        android.hardware.Camera r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.hardware.Camera: void setAudioRestriction(int)>(i0);

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Camera has been released!");

        throw $r2;
    }

    public void start()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHandlerThread $r1;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        virtualinvoke $r1.<android.hardware.camera2.legacy.RequestHandlerThread: void start()>();

        return;
    }

    public android.hardware.camera2.utils.SubmitInfo submitCaptureRequests(android.hardware.camera2.CaptureRequest[], boolean)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        boolean z0;
        android.os.Handler r1;
        java.lang.Object r2;
        android.hardware.camera2.legacy.RequestHandlerThread $r3;
        android.hardware.camera2.legacy.RequestQueue $r4;
        java.lang.Throwable $r5;
        android.hardware.camera2.CaptureRequest[] r6;
        android.hardware.camera2.utils.SubmitInfo r7;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r6 := @parameter0: android.hardware.camera2.CaptureRequest[];

        z0 := @parameter1: boolean;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        r1 = virtualinvoke $r3.<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler waitAndGetHandler()>();

        r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.Object mIdleLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        r7 = virtualinvoke $r4.<android.hardware.camera2.legacy.RequestQueue: android.hardware.camera2.utils.SubmitInfo submit(android.hardware.camera2.CaptureRequest[],boolean)>(r6, z0);

        virtualinvoke r1.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

        exitmonitor r2;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.legacy.RequestThreadManager: boolean VERBOSE> = 0;

        <android.hardware.camera2.legacy.RequestThreadManager: boolean USE_BLOB_FORMAT_OVERRIDE> = 1;

        <android.hardware.camera2.legacy.RequestThreadManager: int REQUEST_COMPLETE_TIMEOUT> = 4000;

        <android.hardware.camera2.legacy.RequestThreadManager: int PREVIEW_FRAME_TIMEOUT> = 1000;

        <android.hardware.camera2.legacy.RequestThreadManager: int MSG_SUBMIT_CAPTURE_REQUEST> = 2;

        <android.hardware.camera2.legacy.RequestThreadManager: int MSG_CONFIGURE_OUTPUTS> = 1;

        <android.hardware.camera2.legacy.RequestThreadManager: int MSG_CLEANUP> = 3;

        <android.hardware.camera2.legacy.RequestThreadManager: int MAX_IN_FLIGHT_REQUESTS> = 2;

        <android.hardware.camera2.legacy.RequestThreadManager: int JPEG_FRAME_TIMEOUT> = 4000;

        <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG> = 0;

        <android.hardware.camera2.legacy.RequestThreadManager: float ASPECT_RATIO_TOLERANCE> = 0.01F;

        return;
    }
}
