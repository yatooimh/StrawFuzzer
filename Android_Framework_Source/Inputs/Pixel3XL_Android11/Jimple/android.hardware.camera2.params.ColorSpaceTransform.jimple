public final class android.hardware.camera2.params.ColorSpaceTransform extends java.lang.Object
{
    private static final int COLUMNS;
    private static final int COUNT;
    private static final int COUNT_INT;
    private static final int OFFSET_DENOMINATOR;
    private static final int OFFSET_NUMERATOR;
    private static final int RATIONAL_SIZE;
    private static final int ROWS;
    private final int[] mElements;

    public void <init>(int[])
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        int[] r1, $r5;
        int $i0, $i1, $i2, i3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r6;
        java.lang.String $r10;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "elements must not be null");

        $i0 = lengthof r1;

        if $i0 != 18 goto label3;

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, $r10);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i2 = lengthof r1;

        $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, $i2);

        r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements> = $r5;

        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("elements must be 18 length");

        throw $r4;
    }

    public void <init>(android.util.Rational[])
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        android.util.Rational[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.IllegalArgumentException $r4;
        int[] $r5, $r13, $r15;
        java.lang.StringBuilder $r6;
        java.lang.String $r10;
        android.util.Rational $r12, $r14;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        r1 := @parameter0: android.util.Rational[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "elements must not be null");

        $i0 = lengthof r1;

        if $i0 != 9 goto label3;

        $r5 = newarray (int)[18];

        r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements> = $r5;

        i8 = 0;

     label1:
        $i1 = lengthof r1;

        if i8 >= $i1 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element[");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must not be null");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, $r10);

        $r13 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i2 = i8 * 2;

        $i3 = $i2 + 0;

        $r12 = r1[i8];

        $i4 = virtualinvoke $r12.<android.util.Rational: int getNumerator()>();

        $r13[$i3] = $i4;

        $r15 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i5 = i8 * 2;

        $i6 = $i5 + 1;

        $r14 = r1[i8];

        $i7 = virtualinvoke $r14.<android.util.Rational: int getDenominator()>();

        $r15[$i6] = $i7;

        i8 = i8 + 1;

        goto label1;

     label2:
        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("elements must be 9 length");

        throw $r4;
    }

    private java.lang.String toShortString()
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        int[] r2;
        int i0, i1, $i2, $i3, i4, i5, i6;
        java.lang.StringBuilder $r3;
        java.lang.String $r5;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        i4 = 0;

        i5 = 0;

     label1:
        if i4 >= 3 goto label6;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i6 = 0;

     label2:
        if i6 >= 3 goto label4;

        r2 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i2 = i5 + 0;

        i0 = r2[$i2];

        $i3 = i5 + 1;

        i1 = r2[$i3];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        if i6 >= 2 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        i6 = i6 + 1;

        i5 = i5 + 2;

        goto label2;

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        if i4 >= 2 goto label5;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void copyElements(int[], int)
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        int[] r1, $r4;
        int i0, $i2, $i3, $i4, $i5, i6;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i0, "offset must not be negative");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "destination must not be null");

        $i2 = lengthof r1;

        $i3 = $i2 - i0;

        if $i3 < 18 goto label3;

        i6 = 0;

     label1:
        if i6 >= 18 goto label2;

        $i5 = i6 + i0;

        $r4 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i4 = $r4[i6];

        r1[$i5] = $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        return;

     label3:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("destination too small to fit elements");

        throw $r3;
    }

    public void copyElements(android.util.Rational[], int)
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        android.util.Rational[] r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        int[] r2;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        android.util.Rational $r5;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        r1 := @parameter0: android.util.Rational[];

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i0, "offset must not be negative");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "destination must not be null");

        $i2 = lengthof r1;

        $i3 = $i2 - i0;

        if $i3 < 9 goto label3;

        i9 = 0;

        i10 = 0;

     label1:
        if i9 >= 9 goto label2;

        r2 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i8 = i9 + i0;

        $r5 = new android.util.Rational;

        $i4 = i10 + 0;

        $i7 = r2[$i4];

        $i5 = i10 + 1;

        $i6 = r2[$i5];

        specialinvoke $r5.<android.util.Rational: void <init>(int,int)>($i7, $i6);

        r1[$i8] = $r5;

        i9 = i9 + 1;

        i10 = i10 + 2;

        goto label1;

     label2:
        return;

     label3:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("destination too small to fit elements");

        throw $r4;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.camera2.params.ColorSpaceTransform r0, r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        boolean $z0, $z1;
        android.util.Rational $r1, $r2;
        java.lang.Object r3;
        int[] r5, r6;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        r3 := @parameter0: java.lang.Object;

        if r3 != null goto label1;

        return 0;

     label1:
        if r0 != r3 goto label2;

        return 1;

     label2:
        $z0 = r3 instanceof android.hardware.camera2.params.ColorSpaceTransform;

        if $z0 == 0 goto label6;

        r4 = (android.hardware.camera2.params.ColorSpaceTransform) r3;

        i8 = 0;

        i9 = 0;

     label3:
        if i8 >= 9 goto label5;

        r5 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i4 = i9 + 0;

        i0 = r5[$i4];

        $i5 = i9 + 1;

        i1 = r5[$i5];

        r6 = r4.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i6 = i9 + 0;

        i2 = r6[$i6];

        $i7 = i9 + 1;

        i3 = r6[$i7];

        $r1 = new android.util.Rational;

        specialinvoke $r1.<android.util.Rational: void <init>(int,int)>(i0, i1);

        $r2 = new android.util.Rational;

        specialinvoke $r2.<android.util.Rational: void <init>(int,int)>(i2, i3);

        $z1 = virtualinvoke $r1.<android.util.Rational: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i8 = i8 + 1;

        i9 = i9 + 2;

        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }

    public android.util.Rational getElement(int, int)
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] r1;
        java.lang.IllegalArgumentException $r2, $r3;
        android.util.Rational $r4;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label2;

        if i0 >= 3 goto label2;

        if i1 < 0 goto label1;

        if i1 >= 3 goto label1;

        r1 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $r4 = new android.util.Rational;

        $i2 = i1 * 3;

        $i3 = $i2 + i0;

        $i4 = $i3 * 2;

        $i5 = $i4 + 0;

        $i11 = r1[$i5];

        $i6 = i1 * 3;

        $i7 = $i6 + i0;

        $i8 = $i7 * 2;

        $i9 = $i8 + 1;

        $i10 = r1[$i9];

        specialinvoke $r4.<android.util.Rational: void <init>(int,int)>($i11, $i10);

        return $r4;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("row out of range");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("column out of range");

        throw $r2;
    }

    public int hashCode()
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        int[] $r1;
        int $i0;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        $r1 = r0.<android.hardware.camera2.params.ColorSpaceTransform: int[] mElements>;

        $i0 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCode(int[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        android.hardware.camera2.params.ColorSpaceTransform r0;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r3;

        r0 := @this: android.hardware.camera2.params.ColorSpaceTransform;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = specialinvoke r0.<android.hardware.camera2.params.ColorSpaceTransform: java.lang.String toShortString()>();

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ColorSpaceTransform%s", $r1);

        return $r3;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.params.ColorSpaceTransform: int ROWS> = 3;

        <android.hardware.camera2.params.ColorSpaceTransform: int RATIONAL_SIZE> = 2;

        <android.hardware.camera2.params.ColorSpaceTransform: int OFFSET_NUMERATOR> = 0;

        <android.hardware.camera2.params.ColorSpaceTransform: int OFFSET_DENOMINATOR> = 1;

        <android.hardware.camera2.params.ColorSpaceTransform: int COUNT_INT> = 18;

        <android.hardware.camera2.params.ColorSpaceTransform: int COUNT> = 9;

        <android.hardware.camera2.params.ColorSpaceTransform: int COLUMNS> = 3;

        return;
    }
}
