public final class android.hardware.camera2.params.LensShadingMap extends java.lang.Object
{
    public static final float MINIMUM_GAIN_FACTOR;
    private final int mColumns;
    private final float[] mElements;
    private final int mRows;

    public void <init>(float[], int, int)
    {
        android.hardware.camera2.params.LensShadingMap r0;
        float[] r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r10;
        java.lang.String $r11;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i0, "rows must be positive");

        r0.<android.hardware.camera2.params.LensShadingMap: int mRows> = $i2;

        $i3 = staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i1, "columns must be positive");

        r0.<android.hardware.camera2.params.LensShadingMap: int mColumns> = $i3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "elements must not be null");

        $r4 = (float[]) r1;

        r0.<android.hardware.camera2.params.LensShadingMap: float[] mElements> = $r4;

        $i4 = lengthof r1;

        $i5 = virtualinvoke r0.<android.hardware.camera2.params.LensShadingMap: int getGainFactorCount()>();

        if $i4 != $i5 goto label1;

        staticinvoke <com.android.internal.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>(r1, 1.0F, 3.4028235E38F, "elements");

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elements must be ");

        $i6 = virtualinvoke r0.<android.hardware.camera2.params.LensShadingMap: int getGainFactorCount()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length, received ");

        $i7 = lengthof r1;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public void copyGainFactors(float[], int)
    {
        android.hardware.camera2.params.LensShadingMap r0;
        float[] r1, $r4;
        int i0, $i2, $i3, $i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i0, "offset must not be negative");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "destination must not be null");

        $i2 = lengthof r1;

        $i3 = $i2 + i0;

        $i4 = virtualinvoke r0.<android.hardware.camera2.params.LensShadingMap: int getGainFactorCount()>();

        if $i3 < $i4 goto label1;

        $r4 = r0.<android.hardware.camera2.params.LensShadingMap: float[] mElements>;

        $i5 = virtualinvoke r0.<android.hardware.camera2.params.LensShadingMap: int getGainFactorCount()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, i0, $i5);

        return;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("destination too small to fit elements");

        throw $r3;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.camera2.params.LensShadingMap r0, r4;
        boolean $z0, $z1, z2;
        int $i0, $i1, $i2, $i3;
        float[] $r1, $r2;
        java.lang.Object r3;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        r3 := @parameter0: java.lang.Object;

        z2 = 0;

        if r3 != null goto label1;

        return 0;

     label1:
        if r0 != r3 goto label2;

        return 1;

     label2:
        $z0 = r3 instanceof android.hardware.camera2.params.LensShadingMap;

        if $z0 == 0 goto label4;

        r4 = (android.hardware.camera2.params.LensShadingMap) r3;

        $i1 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        $i0 = r4.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        if $i1 != $i0 goto label3;

        $i3 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        $i2 = r4.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        if $i3 != $i2 goto label3;

        $r2 = r0.<android.hardware.camera2.params.LensShadingMap: float[] mElements>;

        $r1 = r4.<android.hardware.camera2.params.LensShadingMap: float[] mElements>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r2, $r1);

        if $z1 == 0 goto label3;

        z2 = 1;

        goto label3;

     label3:
        return z2;

     label4:
        return 0;
    }

    public int getColumnCount()
    {
        android.hardware.camera2.params.LensShadingMap r0;
        int $i0;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        $i0 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        return $i0;
    }

    public float getGainFactor(int, int, int)
    {
        android.hardware.camera2.params.LensShadingMap r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        float[] $r4;
        float $f0;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 < 0 goto label3;

        if i0 > 4 goto label3;

        if i1 < 0 goto label2;

        i3 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        if i1 >= i3 goto label2;

        if i2 < 0 goto label1;

        $i4 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        if i2 >= $i4 goto label1;

        $r4 = r0.<android.hardware.camera2.params.LensShadingMap: float[] mElements>;

        $i5 = i3 * i2;

        $i6 = $i5 + i1;

        $i7 = $i6 * 4;

        $i8 = $i7 + i0;

        $f0 = $r4[$i8];

        return $f0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("row out of range");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("column out of range");

        throw $r2;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("colorChannel out of range");

        throw $r1;
    }

    public int getGainFactorCount()
    {
        android.hardware.camera2.params.LensShadingMap r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        $i1 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        $i0 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        $i2 = $i1 * $i0;

        $i3 = $i2 * 4;

        return $i3;
    }

    public android.hardware.camera2.params.RggbChannelVector getGainFactorVector(int, int)
    {
        android.hardware.camera2.params.LensShadingMap r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        float[] r1;
        java.lang.IllegalArgumentException $r2, $r3;
        android.hardware.camera2.params.RggbChannelVector $r4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        i9 := @parameter0: int;

        i0 := @parameter1: int;

        if i9 < 0 goto label2;

        i1 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        if i9 >= i1 goto label2;

        if i0 < 0 goto label1;

        $i2 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        if i0 >= $i2 goto label1;

        $i3 = i1 * i0;

        $i4 = $i3 + i9;

        i10 = $i4 * 4;

        r1 = r0.<android.hardware.camera2.params.LensShadingMap: float[] mElements>;

        $r4 = new android.hardware.camera2.params.RggbChannelVector;

        $i5 = i10 + 0;

        $f3 = r1[$i5];

        $i6 = i10 + 1;

        $f2 = r1[$i6];

        $i7 = i10 + 2;

        $f1 = r1[$i7];

        $i8 = i10 + 3;

        $f0 = r1[$i8];

        specialinvoke $r4.<android.hardware.camera2.params.RggbChannelVector: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        return $r4;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("row out of range");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("column out of range");

        throw $r2;
    }

    public int getRowCount()
    {
        android.hardware.camera2.params.LensShadingMap r0;
        int $i0;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        $i0 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        return $i0;
    }

    public int hashCode()
    {
        android.hardware.camera2.params.LensShadingMap r0;
        int i0, $i1, $i2, $i3;
        float[] $r1;
        int[] $r2;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        $r1 = r0.<android.hardware.camera2.params.LensShadingMap: float[] mElements>;

        i0 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCode(float[])>($r1);

        $r2 = newarray (int)[3];

        $i1 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        $r2[0] = $i1;

        $i2 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        $r2[1] = $i2;

        $r2[2] = i0;

        $i3 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCode(int[])>($r2);

        return $i3;
    }

    public java.lang.String toString()
    {
        android.hardware.camera2.params.LensShadingMap r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r7;
        java.lang.String[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        float $f0;

        r0 := @this: android.hardware.camera2.params.LensShadingMap;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LensShadingMap{");

        i6 = 0;

     label1:
        if i6 >= 4 goto label9;

        $r6 = newarray (java.lang.String)[4];

        $r6[0] = "R:(";

        $r6[1] = "G_even:(";

        $r6[2] = "G_odd:(";

        $r6[3] = "B:(";

        $r7 = $r6[i6];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i7 = 0;

     label2:
        $i0 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        if i7 >= $i0 goto label7;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i8 = 0;

     label3:
        $i1 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        if i8 >= $i1 goto label5;

        $f0 = virtualinvoke r0.<android.hardware.camera2.params.LensShadingMap: float getGainFactor(int,int,int)>(i6, i8, i7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $i4 = r0.<android.hardware.camera2.params.LensShadingMap: int mColumns>;

        $i5 = $i4 - 1;

        if i8 >= $i5 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $i2 = r0.<android.hardware.camera2.params.LensShadingMap: int mRows>;

        $i3 = $i2 - 1;

        if i7 >= $i3 goto label6;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label6:
        i7 = i7 + 1;

        goto label2;

     label7:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        if i6 >= 3 goto label8;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label8:
        i6 = i6 + 1;

        goto label1;

     label9:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.params.LensShadingMap: float MINIMUM_GAIN_FACTOR> = 1.0F;

        return;
    }
}
