public final class android.hardware.camera2.params.MandatoryStreamCombination$Builder extends java.lang.Object
{
    private final android.util.Size kPreviewSizeBound;
    private int mCameraId;
    private java.util.List mCapabilities;
    private android.util.Size mDisplaySize;
    private int mHwLevel;
    private boolean mIsHiddenPhysicalCamera;
    private android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap;

    public void <init>(int, int, android.util.Size, java.util.List, android.hardware.camera2.params.StreamConfigurationMap)
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        int i0, i1;
        android.util.Size r1, $r4;
        java.util.List r2;
        android.hardware.camera2.params.StreamConfigurationMap r3;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.util.Size;

        r2 := @parameter3: java.util.List;

        r3 := @parameter4: android.hardware.camera2.params.StreamConfigurationMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.Size;

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>(1920, 1088);

        r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size kPreviewSizeBound> = $r4;

        r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId> = i0;

        r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size mDisplaySize> = r1;

        r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List mCapabilities> = r2;

        r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap> = r3;

        r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mHwLevel> = i1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $z0 = staticinvoke <android.hardware.camera2.CameraManager: boolean isHiddenPhysicalCamera(java.lang.String)>($r5);

        r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean mIsHiddenPhysicalCamera> = $z0;

        return;
    }

    static int access$1600(int, int, int, int)
    {
        int i0, i1, i2, i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i4 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: int compareSizes(int,int,int,int)>(i0, i1, i2, i3);

        return $i4;
    }

    private static int compareSizes(int, int, int, int)
    {
        int i0, i1, i2, i12;
        long l3, l4, $l5, $l6, $l7, $l8, l13, l14;
        byte $b9, $b10, $b11, b15;

        i12 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l6 = (long) i12;

        $l5 = (long) i0;

        l3 = $l6 * $l5;

        $l8 = (long) i1;

        $l7 = (long) i2;

        l4 = $l8 * $l7;

        l13 = l3;

        l14 = l4;

        $b9 = l3 cmp l4;

        if $b9 != 0 goto label1;

        l13 = (long) i12;

        l14 = (long) i1;

     label1:
        $b10 = l13 cmp l14;

        if $b10 >= 0 goto label2;

        b15 = -1;

        goto label4;

     label2:
        $b11 = l13 cmp l14;

        if $b11 <= 0 goto label3;

        b15 = 1;

        goto label4;

     label3:
        b15 = 0;

     label4:
        return b15;
    }

    private java.util.HashMap enumerateAvailableSizes()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        int[] r1;
        int i1, $i3, i5, i6, i7, i8;
        android.util.Size r4, $r7, $r8, $r9, $r13, r39;
        android.util.Size[] r6, $r14, $r37;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r10, $r16;
        java.lang.Integer $r11, $r17, $r35;
        java.lang.Object $r12, $r18;
        java.util.List $r15, $r21, $r25, $r29, $r33, r40;
        android.util.Pair $r19, $r23, $r27, $r31;
        android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold $r20, $r24, $r28, $r32;
        android.hardware.camera2.params.StreamConfigurationMap $r36;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        r1 = newarray (int)[3];

        r1[0] = 34;

        r1[1] = 35;

        r1[2] = 256;

        $r7 = new android.util.Size;

        specialinvoke $r7.<android.util.Size: void <init>(int,int)>(0, 0);

        $r8 = new android.util.Size;

        specialinvoke $r8.<android.util.Size: void <init>(int,int)>(0, 0);

        $r9 = new android.util.Size;

        specialinvoke $r9.<android.util.Size: void <init>(int,int)>(640, 480);

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isExternalCamera()>();

        if $z0 != 0 goto label02;

        $z2 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean mIsHiddenPhysicalCamera>;

        if $z2 == 0 goto label01;

        goto label02;

     label01:
        r39 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMaxRecordingSize()>();

        goto label03;

     label02:
        r39 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMaxCameraRecordingSize()>();

     label03:
        if r39 != null goto label04;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MandatoryStreamCombination", "Failed to find maximum recording size!");

        return null;

     label04:
        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        i5 = lengthof r1;

        i6 = 0;

     label05:
        if i6 >= i5 goto label06;

        i1 = r1[i6];

        $r35 = new java.lang.Integer;

        specialinvoke $r35.<java.lang.Integer: void <init>(int)>(i1);

        $r36 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap>;

        $r37 = virtualinvoke $r36.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(i1);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r37);

        i6 = i6 + 1;

        goto label05;

     label06:
        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(34);

        $r12 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r11);

        $r14 = (android.util.Size[]) $r12;

        $r13 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size kPreviewSizeBound>;

        r40 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getSizesWithinBound(android.util.Size[],android.util.Size)>($r14, $r13);

        if r40 == null goto label10;

        $z1 = interfaceinvoke r40.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label07;

        goto label10;

     label07:
        $r15 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAscendingOrderSizes(java.util.List,boolean)>(r40, 0);

        r4 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMaxPreviewSize(java.util.List)>($r15);

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        i7 = lengthof r1;

        i8 = 0;

     label08:
        if i8 >= i7 goto label09;

        $r17 = new java.lang.Integer;

        $i3 = r1[i8];

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i3);

        $r18 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        r6 = (android.util.Size[]) $r18;

        $r19 = new android.util.Pair;

        $r20 = <android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold VGA>;

        specialinvoke $r19.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r20, $r17);

        $r21 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getSizesWithinBound(android.util.Size[],android.util.Size)>(r6, $r9);

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21);

        $r23 = new android.util.Pair;

        $r24 = <android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold PREVIEW>;

        specialinvoke $r23.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r24, $r17);

        $r25 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getSizesWithinBound(android.util.Size[],android.util.Size)>(r6, r4);

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r25);

        $r27 = new android.util.Pair;

        $r28 = <android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold RECORD>;

        specialinvoke $r27.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r28, $r17);

        $r29 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getSizesWithinBound(android.util.Size[],android.util.Size)>(r6, r39);

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r29);

        $r31 = new android.util.Pair;

        $r32 = <android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold MAXIMUM>;

        specialinvoke $r31.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r32, $r17);

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r33);

        i8 = i8 + 1;

        goto label08;

     label09:
        return $r16;

     label10:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MandatoryStreamCombination", "No preview sizes within preview size bound!");

        return null;
    }

    private java.util.List generateAvailableCombinations(java.util.ArrayList)
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        java.util.HashMap r1;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i10, i13;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate r6;
        boolean $z0, $z1, $z2, $z10, z11;
        android.hardware.camera2.params.StreamConfigurationMap $r7, $r30, $r32;
        java.util.List $r12, $r34, r80;
        java.lang.Object $r13, $r23, r59;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate[] $r15, r58;
        android.hardware.camera2.params.MandatoryStreamCombination$ReprocessType $r16, $r17, $r26, $r27;
        java.lang.String $r19, $r38, $r40, $r49, $r51;
        android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold $r22, $r46;
        android.util.Size[] $r31, $r33, r53;
        java.lang.Throwable $r35, $r41;
        java.util.ArrayList r52, r66, r69, r70, r71;
        android.util.Size r54, r55, r67, r68;
        java.util.Iterator r56;
        byte b12;
        android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation r72, r73, r76;
        java.lang.Integer r74;
        android.util.Pair r75;
        java.lang.StringBuilder r77, r79;
        android.hardware.camera2.params.MandatoryStreamCombination r78;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        r52 := @parameter0: java.util.ArrayList;

        $z0 = virtualinvoke r52.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MandatoryStreamCombination", "No available stream templates!");

        return null;

     label01:
        r1 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.HashMap enumerateAvailableSizes()>();

        if r1 != null goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MandatoryStreamCombination", "Available size enumeration failed!");

        return null;

     label02:
        $r7 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap>;

        r53 = virtualinvoke $r7.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(32);

        r66 = new java.util.ArrayList;

        specialinvoke r66.<java.util.ArrayList: void <init>()>();

        if r53 == null goto label03;

        $i6 = lengthof r53;

        virtualinvoke r66.<java.util.ArrayList: void ensureCapacity(int)>($i6);

        $r34 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r53);

        virtualinvoke r66.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r34);

     label03:
        r67 = new android.util.Size;

        specialinvoke r67.<android.util.Size: void <init>(int,int)>(0, 0);

        r54 = r67;

        $z1 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isPrivateReprocessingSupported()>();

        if $z1 == 0 goto label04;

        $r32 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap>;

        $r33 = virtualinvoke $r32.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>(34);

        r54 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMaxSize(android.util.Size[])>($r33);

        goto label04;

     label04:
        r68 = new android.util.Size;

        specialinvoke r68.<android.util.Size: void <init>(int,int)>(0, 0);

        r55 = r68;

        $z2 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isYUVReprocessingSupported()>();

        if $z2 == 0 goto label05;

        $r30 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap>;

        $r31 = virtualinvoke $r30.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>(35);

        r55 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMaxSize(android.util.Size[])>($r31);

        goto label05;

     label05:
        r69 = new java.util.ArrayList;

        specialinvoke r69.<java.util.ArrayList: void <init>()>();

        $i1 = virtualinvoke r52.<java.util.ArrayList: int size()>();

        virtualinvoke r69.<java.util.ArrayList: void ensureCapacity(int)>($i1);

        r56 = virtualinvoke r52.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z10 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label20;

        $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate) $r13;

        r70 = new java.util.ArrayList;

        specialinvoke r70.<java.util.ArrayList: void <init>()>();

        $r15 = r4.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate[] mStreamTemplates>;

        $i2 = lengthof $r15;

        virtualinvoke r70.<java.util.ArrayList: void ensureCapacity(int)>($i2);

        $r17 = r4.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: android.hardware.camera2.params.MandatoryStreamCombination$ReprocessType mReprocessType>;

        $r16 = <android.hardware.camera2.params.MandatoryStreamCombination$ReprocessType: android.hardware.camera2.params.MandatoryStreamCombination$ReprocessType NONE>;

        if $r17 == $r16 goto label07;

        z11 = 1;

        goto label08;

     label07:
        z11 = 0;

     label08:
        if z11 == 0 goto label11;

        r71 = new java.util.ArrayList;

        specialinvoke r71.<java.util.ArrayList: void <init>()>();

        $r27 = r4.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: android.hardware.camera2.params.MandatoryStreamCombination$ReprocessType mReprocessType>;

        $r26 = <android.hardware.camera2.params.MandatoryStreamCombination$ReprocessType: android.hardware.camera2.params.MandatoryStreamCombination$ReprocessType PRIVATE>;

        if $r27 != $r26 goto label09;

        virtualinvoke r71.<java.util.ArrayList: boolean add(java.lang.Object)>(r54);

        b12 = 34;

        goto label10;

     label09:
        virtualinvoke r71.<java.util.ArrayList: boolean add(java.lang.Object)>(r55);

        b12 = 35;

     label10:
        r72 = new android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation;

        specialinvoke r72.<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: void <init>(java.util.List,int,boolean)>(r71, b12, 1);

        virtualinvoke r70.<java.util.ArrayList: boolean add(java.lang.Object)>(r72);

        r73 = new android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation;

        specialinvoke r73.<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: void <init>(java.util.List,int)>(r71, b12);

        virtualinvoke r70.<java.util.ArrayList: boolean add(java.lang.Object)>(r73);

     label11:
        r58 = r4.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate[] mStreamTemplates>;

        i0 = lengthof r58;

        i13 = 0;

     label12:
        if i13 >= i0 goto label17;

        r6 = r58[i13];

        $i3 = r6.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: int mFormat>;

        if $i3 != 32 goto label13;

        r59 = r66;

        goto label14;

     label13:
        r75 = new android.util.Pair;

        $r22 = r6.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold mSizeThreshold>;

        r74 = new java.lang.Integer;

        $i4 = r6.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: int mFormat>;

        specialinvoke r74.<java.lang.Integer: void <init>(int)>($i4);

        specialinvoke r75.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r22, r74);

        $r23 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r75);

        r59 = (java.util.List) $r23;

     label14:
        r76 = new android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation;

        $i5 = r6.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: int mFormat>;

        r80 = (java.util.List) r59;

        specialinvoke r76.<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: void <init>(java.util.List,int)>(r80, $i5);

     label15:
        virtualinvoke r70.<java.util.ArrayList: boolean add(java.lang.Object)>(r76);

        i13 = i13 + 1;

        goto label12;

     label16:
        $r41 := @caughtexception;

        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No available sizes found for format: ");

        $i10 = r6.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: int mFormat>;

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size threshold: ");

        $r46 = r6.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold mSizeThreshold>;

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" combination: ");

        $r49 = r4.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: java.lang.String mDescription>;

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MandatoryStreamCombination", $r51);

        return null;

     label17:
        r78 = new android.hardware.camera2.params.MandatoryStreamCombination;

        $r19 = r4.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: java.lang.String mDescription>;

        specialinvoke r78.<android.hardware.camera2.params.MandatoryStreamCombination: void <init>(java.util.List,java.lang.String,boolean)>(r70, $r19, z11);

     label18:
        virtualinvoke r69.<java.util.ArrayList: boolean add(java.lang.Object)>(r78);

        goto label06;

     label19:
        $r35 := @caughtexception;

        r79 = new java.lang.StringBuilder;

        specialinvoke r79.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No stream information for mandatory combination: ");

        $r38 = r4.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: java.lang.String mDescription>;

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke r79.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MandatoryStreamCombination", $r40);

        return null;

     label20:
        $r12 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r69);

        return $r12;

        catch java.lang.IllegalArgumentException from label14 to label15 with label16;
        catch java.lang.IllegalArgumentException from label17 to label18 with label19;
    }

    private static java.util.List getAscendingOrderSizes(java.util.List, boolean)
    {
        java.util.List r0;
        boolean z0;
        android.hardware.camera2.params.MandatoryStreamCombination$Builder$SizeComparator $r3;
        java.util.ArrayList $r4;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $r3 = new android.hardware.camera2.params.MandatoryStreamCombination$Builder$SizeComparator;

        specialinvoke $r3.<android.hardware.camera2.params.MandatoryStreamCombination$Builder$SizeComparator: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r4, $r3);

        if z0 != 0 goto label1;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r4);

     label1:
        return $r4;
    }

    private android.util.Size getMaxCameraRecordingSize()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        android.util.Size[] r1;
        int i0, $i1, $i5, $i7, $i8, $i9, $i10, i11;
        android.util.Size $r2, r21, r23;
        android.hardware.camera2.params.StreamConfigurationMap $r3, $r12;
        java.util.ArrayList $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r13;
        java.lang.String $r10, $r18;
        java.lang.Object $r11;
        long $l3;
        double $d0;
        byte $b4;
        java.util.Iterator r22;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $r2 = new android.util.Size;

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>(1920, 1080);

        $r3 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap>;

        r1 = virtualinvoke $r3.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>(class "Landroid/media/MediaRecorder;");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

        i11 = 0;

     label1:
        if i11 >= i0 goto label3;

        r21 = r1[i11];

        $i7 = virtualinvoke r21.<android.util.Size: int getWidth()>();

        $i8 = virtualinvoke $r2.<android.util.Size: int getWidth()>();

        if $i7 > $i8 goto label2;

        $i9 = virtualinvoke r21.<android.util.Size: int getHeight()>();

        $i10 = virtualinvoke $r2.<android.util.Size: int getHeight()>();

        if $i9 > $i10 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r21);

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        $r5 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAscendingOrderSizes(java.util.List,boolean)>($r4, 0);

        r22 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.util.Size) $r11;

        $r12 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap>;

        $l3 = virtualinvoke $r12.<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>(class "Landroid/media/MediaRecorder;", r23);

        $d0 = (double) $l3;

        $b4 = $d0 cmpl 3.3222591362126246E7;

        if $b4 <= 0 goto label5;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("External camera ");

        $i5 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has max video size:");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MandatoryStreamCombination", $r18);

        return r23;

     label5:
        goto label4;

     label6:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera ");

        $i1 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support any 30fps video output");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MandatoryStreamCombination", $r10);

        return $r2;
    }

    private android.util.Size getMaxPreviewSize(java.util.List)
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        java.util.Iterator r1;
        java.lang.StringBuilder $r2;
        int $i0, $i2, $i3, $i4, $i5;
        android.util.Size $r6, $r9, $r11, $r12, r14;
        java.lang.String $r8;
        boolean $z0;
        java.lang.Object $r10;
        java.util.List r13;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        r13 := @parameter0: java.util.List;

        if r13 == null goto label3;

        r1 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r14 = (android.util.Size) $r10;

        $r11 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size mDisplaySize>;

        $i2 = virtualinvoke $r11.<android.util.Size: int getWidth()>();

        $i3 = virtualinvoke r14.<android.util.Size: int getWidth()>();

        if $i2 < $i3 goto label2;

        $r12 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size mDisplaySize>;

        $i4 = virtualinvoke $r12.<android.util.Size: int getHeight()>();

        $i5 = virtualinvoke r14.<android.util.Size: int getHeight()>();

        if $i4 < $i5 goto label2;

        return r14;

     label2:
        goto label1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera ");

        $i0 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maximum preview size search failed with display size ");

        $r6 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size mDisplaySize>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MandatoryStreamCombination", $r8);

        $r9 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size kPreviewSizeBound>;

        return $r9;
    }

    private android.util.Size getMaxRecordingSize()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.media.CamcorderProfile r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.util.Size $r2;
        byte b10;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        i0 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        b10 = 8;

        $z0 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>(i0, 8);

        if $z0 == 0 goto label1;

        goto label8;

     label1:
        $i1 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        $z1 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i1, 6);

        if $z1 == 0 goto label2;

        b10 = 6;

        goto label8;

     label2:
        $i2 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        $z2 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i2, 5);

        if $z2 == 0 goto label3;

        b10 = 5;

        goto label8;

     label3:
        $i3 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        $z3 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i3, 4);

        if $z3 == 0 goto label4;

        b10 = 4;

        goto label8;

     label4:
        $i4 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        $z4 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i4, 7);

        if $z4 == 0 goto label5;

        b10 = 7;

        goto label8;

     label5:
        $i5 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        $z5 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i5, 3);

        if $z5 == 0 goto label6;

        b10 = 3;

        goto label8;

     label6:
        $i6 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        $z6 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i6, 2);

        if $z6 == 0 goto label7;

        b10 = 2;

        goto label8;

     label7:
        b10 = -1;

     label8:
        if b10 >= 0 goto label9;

        return null;

     label9:
        $i7 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        r1 = staticinvoke <android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>($i7, b10);

        $r2 = new android.util.Size;

        $i9 = r1.<android.media.CamcorderProfile: int videoFrameWidth>;

        $i8 = r1.<android.media.CamcorderProfile: int videoFrameHeight>;

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>($i9, $i8);

        return $r2;
    }

    public static transient android.util.Size getMaxSize(android.util.Size[])
    {
        android.util.Size[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        android.util.Size r1, r3, r4;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: android.util.Size[];

        if r0 == null goto label4;

        $i1 = lengthof r0;

        if $i1 == 0 goto label4;

        i8 = 0;

        r3 = r0[0];

        i0 = lengthof r0;

     label1:
        if i8 >= i0 goto label3;

        r1 = r0[i8];

        r4 = r3;

        $i2 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i3 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i4 = $i2 * $i3;

        $i5 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i6 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i7 = $i5 * $i6;

        if $i4 <= $i7 goto label2;

        r4 = r1;

     label2:
        i8 = i8 + 1;

        r3 = r4;

        goto label1;

     label3:
        return r3;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sizes was empty");

        throw $r2;
    }

    public static android.util.Size getMinSize(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        if r0 == null goto label2;

        if r1 == null goto label2;

        $i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $i2 = $i0 * $i1;

        $i3 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i4 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i5 = $i3 * $i4;

        if $i2 >= $i5 goto label1;

        return r0;

     label1:
        return r1;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sizes was empty");

        throw $r2;
    }

    private static java.util.List getSizesWithinBound(android.util.Size[], android.util.Size)
    {
        android.util.Size[] r0;
        android.util.Size r1, r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.util.ArrayList $r4;

        r0 := @parameter0: android.util.Size[];

        r1 := @parameter1: android.util.Size;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        r3 = r0[i5];

        $i1 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i2 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        if $i1 > $i2 goto label2;

        $i3 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i4 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i3 > $i4 goto label2;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return $r4;
    }

    private boolean isCapabilitySupported(int)
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        int i0;
        java.util.List $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List mCapabilities>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isColorOutputSupported()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isCapabilitySupported(int)>(0);

        return $z0;
    }

    private boolean isExternalCamera()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        int $i0;
        boolean z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $i0 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mHwLevel>;

        if $i0 != 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isHardwareLevelAtLeast(int)
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        int i0, i1, i2, $i3, $i4, i5;
        int[] r1;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        i0 := @parameter0: int;

        r1 = newarray (int)[5];

        r1[0] = 2;

        r1[1] = 4;

        r1[2] = 0;

        r1[3] = 1;

        r1[4] = 3;

        $i3 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mHwLevel>;

        if i0 != $i3 goto label1;

        return 1;

     label1:
        i1 = lengthof r1;

        i5 = 0;

     label2:
        if i5 >= i1 goto label5;

        i2 = r1[i5];

        if i2 != i0 goto label3;

        return 1;

     label3:
        $i4 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mHwLevel>;

        if i2 != $i4 goto label4;

        return 0;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        return 0;
    }

    private boolean isHardwareLevelAtLeastFull()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeast(int)>(1);

        return $z0;
    }

    private boolean isHardwareLevelAtLeastLegacy()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeast(int)>(2);

        return $z0;
    }

    private boolean isHardwareLevelAtLeastLevel3()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeast(int)>(3);

        return $z0;
    }

    private boolean isHardwareLevelAtLeastLimited()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeast(int)>(0);

        return $z0;
    }

    private boolean isPrivateReprocessingSupported()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isCapabilitySupported(int)>(4);

        return $z0;
    }

    private boolean isYUVReprocessingSupported()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isCapabilitySupported(int)>(7);

        return $z0;
    }

    public java.util.List getAvailableMandatoryConcurrentStreamCombinations()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7, i8, i9, $i10, $i11;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate r5;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate[] r7, $r16;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate r8;
        boolean $z0;
        android.util.Size $r10, $r11, $r12, r42, $r45, $r46;
        java.util.ArrayList $r13, $r15, $r19;
        java.util.List $r14;
        android.hardware.camera2.params.MandatoryStreamCombination $r17;
        java.lang.String $r18, $r25, $r28, $r37, $r40;
        android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold $r20, $r34;
        int[] $r21;
        java.lang.Throwable $r22, $r29;
        java.lang.StringBuilder $r23, $r30;
        java.lang.RuntimeException $r27, $r39;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] r41;
        android.hardware.camera2.params.StreamConfigurationMap $r43;
        android.util.Size[] $r44;
        android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation $r47;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        r41 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$000()>();

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isColorOutputSupported()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MandatoryStreamCombination", "Device is not backward compatible, depth streams are mandatory!");

        r41 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$100()>();

        goto label01;

     label01:
        $r10 = new android.util.Size;

        specialinvoke $r10.<android.util.Size: void <init>(int,int)>(640, 480);

        $r11 = new android.util.Size;

        specialinvoke $r11.<android.util.Size: void <init>(int,int)>(1280, 720);

        $r12 = new android.util.Size;

        specialinvoke $r12.<android.util.Size: void <init>(int,int)>(1920, 1440);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $i3 = lengthof r41;

        virtualinvoke $r13.<java.util.ArrayList: void ensureCapacity(int)>($i3);

        i0 = lengthof r41;

        i8 = 0;

     label02:
        if i8 >= i0 goto label14;

        r5 = r41[i8];

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = r5.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate[] mStreamTemplates>;

        $i4 = lengthof $r16;

        virtualinvoke $r15.<java.util.ArrayList: void ensureCapacity(int)>($i4);

        r7 = r5.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate[] mStreamTemplates>;

        i1 = lengthof r7;

        i9 = 0;

     label03:
        if i9 >= i1 goto label11;

        r8 = r7[i9];

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        $r21 = <android.hardware.camera2.params.MandatoryStreamCombination$1: int[] $SwitchMap$android$hardware$camera2$params$MandatoryStreamCombination$SizeThreshold>;

        $r20 = r8.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold mSizeThreshold>;

        $i5 = virtualinvoke $r20.<android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold: int ordinal()>();

        i2 = $r21[$i5];

        if i2 == 1 goto label05;

        if i2 == 2 goto label04;

        r42 = $r11;

        goto label06;

     label04:
        r42 = $r10;

        goto label06;

     label05:
        r42 = $r12;

     label06:
        $r43 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.hardware.camera2.params.StreamConfigurationMap mStreamConfigMap>;

        $i10 = r8.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: int mFormat>;

        $r44 = virtualinvoke $r43.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>($i10);

        $r45 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMaxSize(android.util.Size[])>($r44);

        $r46 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMinSize(android.util.Size,android.util.Size)>(r42, $r45);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r46);

     label07:
        $r47 = new android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation;

        $i11 = r8.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: int mFormat>;

        specialinvoke $r47.<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: void <init>(java.util.List,int)>($r19, $i11);

     label08:
        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r47);

        i9 = i9 + 1;

        goto label03;

     label09:
        $r29 := @caughtexception;

        goto label10;

     label10:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No available sizes found for format: ");

        $i7 = r8.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: int mFormat>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size threshold: ");

        $r34 = r8.<android.hardware.camera2.params.MandatoryStreamCombination$StreamTemplate: android.hardware.camera2.params.MandatoryStreamCombination$SizeThreshold mSizeThreshold>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" combination: ");

        $r37 = r5.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: java.lang.String mDescription>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = new java.lang.RuntimeException;

        $r40 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r40, $r29);

        throw $r39;

     label11:
        $r17 = new android.hardware.camera2.params.MandatoryStreamCombination;

        $r18 = r5.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: java.lang.String mDescription>;

        specialinvoke $r17.<android.hardware.camera2.params.MandatoryStreamCombination: void <init>(java.util.List,java.lang.String,boolean)>($r15, $r18, 0);

     label12:
        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        i8 = i8 + 1;

        goto label02;

     label13:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No stream information for mandatory combination: ");

        $r25 = r5.<android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate: java.lang.String mDescription>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = new java.lang.RuntimeException;

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r22);

        throw $r27;

     label14:
        $r14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r13);

        return $r14;

        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    public java.util.List getAvailableMandatoryStreamCombinations()
    {
        android.hardware.camera2.params.MandatoryStreamCombination$Builder r0;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z8, $z9, $z13, $z14, $z18, $z19, $z25, $z27, $z28, $z29, $z30;
        int $i0;
        java.util.ArrayList $r2;
        android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29;
        java.util.List $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r31;

        r0 := @this: android.hardware.camera2.params.MandatoryStreamCombination$Builder;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isColorOutputSupported()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MandatoryStreamCombination", "Device is not backward compatible!");

        return null;

     label01:
        $i0 = r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: int mCameraId>;

        if $i0 >= 0 goto label02;

        $z27 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isExternalCamera()>();

        if $z27 != 0 goto label02;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MandatoryStreamCombination", "Invalid camera id");

        return null;

     label02:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $z1 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeastLegacy()>();

        if $z1 == 0 goto label03;

        $r29 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$200()>();

        $r30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r29);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r30);

     label03:
        $z2 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeastLimited()>();

        if $z2 != 0 goto label04;

        $z25 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isExternalCamera()>();

        if $z25 == 0 goto label06;

     label04:
        $r3 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$300()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        $z4 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isPrivateReprocessingSupported()>();

        if $z4 == 0 goto label05;

        $r27 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$400()>();

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r28);

     label05:
        $z5 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isYUVReprocessingSupported()>();

        if $z5 == 0 goto label06;

        $r25 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$500()>();

        $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r26);

     label06:
        $z28 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isCapabilitySupported(int)>(6);

        if $z28 == 0 goto label07;

        $r23 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$600()>();

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r23);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r24);

     label07:
        $z6 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeastFull()>();

        if $z6 == 0 goto label09;

        $r17 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$700()>();

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r18);

        $z18 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isPrivateReprocessingSupported()>();

        if $z18 == 0 goto label08;

        $r21 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$800()>();

        $r22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r22);

     label08:
        $z19 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isYUVReprocessingSupported()>();

        if $z19 == 0 goto label09;

        $r19 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$900()>();

        $r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r20);

     label09:
        $z29 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isCapabilitySupported(int)>(3);

        if $z29 == 0 goto label11;

        $r11 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$1000()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r12);

        $z13 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isPrivateReprocessingSupported()>();

        if $z13 == 0 goto label10;

        $r15 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$1100()>();

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r16);

     label10:
        $z14 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isYUVReprocessingSupported()>();

        if $z14 == 0 goto label11;

        $r13 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$1200()>();

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r13);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r14);

     label11:
        $z30 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isHardwareLevelAtLeastLevel3()>();

        if $z30 == 0 goto label13;

        $r5 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$1300()>();

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        $z8 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isPrivateReprocessingSupported()>();

        if $z8 == 0 goto label12;

        $r9 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$1400()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

     label12:
        $z9 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: boolean isYUVReprocessingSupported()>();

        if $z9 == 0 goto label13;

        $r7 = staticinvoke <android.hardware.camera2.params.MandatoryStreamCombination: android.hardware.camera2.params.MandatoryStreamCombination$StreamCombinationTemplate[] access$1500()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r8);

     label13:
        $r31 = specialinvoke r0.<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List generateAvailableCombinations(java.util.ArrayList)>($r2);

        return $r31;
    }
}
