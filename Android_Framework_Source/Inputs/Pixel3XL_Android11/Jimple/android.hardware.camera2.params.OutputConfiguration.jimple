public final class android.hardware.camera2.params.OutputConfiguration extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private static final int MAX_SURFACES_COUNT;
    public static final int ROTATION_0;
    public static final int ROTATION_180;
    public static final int ROTATION_270;
    public static final int ROTATION_90;
    public static final int SURFACE_GROUP_ID_NONE;
    private static final java.lang.String TAG;
    private final int SURFACE_TYPE_SURFACE_TEXTURE;
    private final int SURFACE_TYPE_SURFACE_VIEW;
    private final int SURFACE_TYPE_UNKNOWN;
    private final int mConfiguredDataspace;
    private final int mConfiguredFormat;
    private final int mConfiguredGenerationId;
    private final android.util.Size mConfiguredSize;
    private final boolean mIsDeferredConfig;
    private boolean mIsShared;
    private java.lang.String mPhysicalCameraId;
    private final int mRotation;
    private final int mSurfaceGroupId;
    private final int mSurfaceType;
    private java.util.ArrayList mSurfaces;

    static void <clinit>()
    {
        android.hardware.camera2.params.OutputConfiguration$1 $r0;

        <android.hardware.camera2.params.OutputConfiguration: java.lang.String TAG> = "OutputConfiguration";

        <android.hardware.camera2.params.OutputConfiguration: int SURFACE_GROUP_ID_NONE> = -1;

        <android.hardware.camera2.params.OutputConfiguration: int ROTATION_90> = 1;

        <android.hardware.camera2.params.OutputConfiguration: int ROTATION_270> = 3;

        <android.hardware.camera2.params.OutputConfiguration: int ROTATION_180> = 2;

        <android.hardware.camera2.params.OutputConfiguration: int ROTATION_0> = 0;

        <android.hardware.camera2.params.OutputConfiguration: int MAX_SURFACES_COUNT> = 4;

        $r0 = new android.hardware.camera2.params.OutputConfiguration$1;

        specialinvoke $r0.<android.hardware.camera2.params.OutputConfiguration$1: void <init>()>();

        <android.hardware.camera2.params.OutputConfiguration: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(int, android.view.Surface)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        int i0;
        android.view.Surface r1;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.Surface;

        specialinvoke r0.<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface,int)>(i0, r1, 0);

        return;
    }

    public void <init>(int, android.view.Surface, int)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        int i0, i1, $i3, $i4, $i5;
        android.view.Surface r1;
        java.util.ArrayList $r4;
        android.util.Size $r5;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.Surface;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_UNKNOWN> = -1;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_VIEW> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_TEXTURE> = 1;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Surface must not be null");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i1, 0, 3, "Rotation constant");

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId> = i0;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType> = -1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces> = $r4;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation> = i1;

        $r5 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: android.util.Size getSurfaceSize(android.view.Surface)>(r1);

        r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize> = $r5;

        $i3 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceFormat(android.view.Surface)>(r1);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat> = $i3;

        $i4 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceDataspace(android.view.Surface)>(r1);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace> = $i4;

        $i5 = virtualinvoke r1.<android.view.Surface: int getGenerationId()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId> = $i5;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId> = null;

        return;
    }

    public void <init>(android.hardware.camera2.params.OutputConfiguration)
    {
        android.hardware.camera2.params.OutputConfiguration r0, r1;
        java.lang.IllegalArgumentException $r2;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.util.Size $r4;
        boolean $z0, $z1;
        java.lang.String $r5;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.hardware.camera2.params.OutputConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_UNKNOWN> = -1;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_VIEW> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_TEXTURE> = 1;

        if r1 == null goto label1;

        $r3 = r1.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces> = $r3;

        $i0 = r1.<android.hardware.camera2.params.OutputConfiguration: int mRotation>;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation> = $i0;

        $i1 = r1.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId>;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId> = $i1;

        $i2 = r1.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType>;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType> = $i2;

        $i3 = r1.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace>;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace> = $i3;

        $i4 = r1.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat>;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat> = $i4;

        $r4 = r1.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize> = $r4;

        $i5 = r1.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId>;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId> = $i5;

        $z0 = r1.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig>;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig> = $z0;

        $z1 = r1.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared>;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared> = $z1;

        $r5 = r1.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId>;

        r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId> = $r5;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("OutputConfiguration shouldn\'t be null");

        throw $r2;
    }

    private void <init>(android.os.Parcel)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13;
        java.util.ArrayList $r2, $r5, $r8, $r11;
        android.os.Parcelable$Creator $r3;
        android.util.Size $r4;
        java.lang.Object $r6, $r9, $r12;
        android.view.Surface $r7, $r10, $r13;
        android.os.Parcel r14;
        boolean z0, z1;
        java.lang.String r15;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r14 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_UNKNOWN> = -1;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_VIEW> = 0;

        z0 = 1;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_TEXTURE> = 1;

        i0 = virtualinvoke r14.<android.os.Parcel: int readInt()>();

        i1 = virtualinvoke r14.<android.os.Parcel: int readInt()>();

        i2 = virtualinvoke r14.<android.os.Parcel: int readInt()>();

        i3 = virtualinvoke r14.<android.os.Parcel: int readInt()>();

        i4 = virtualinvoke r14.<android.os.Parcel: int readInt()>();

        $i5 = virtualinvoke r14.<android.os.Parcel: int readInt()>();

        if $i5 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $i6 = virtualinvoke r14.<android.os.Parcel: int readInt()>();

        if $i6 != 1 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = <android.view.Surface: android.os.Parcelable$Creator CREATOR>;

        virtualinvoke r14.<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>($r2, $r3);

        r15 = virtualinvoke r14.<android.os.Parcel: java.lang.String readString()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 3, "Rotation constant");

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId> = i1;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation> = i0;

        r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces> = $r2;

        $r4 = new android.util.Size;

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>(i3, i4);

        r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize> = $r4;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig> = z1;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared> = z0;

        r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces> = $r2;

        $i8 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i8 <= 0 goto label5;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType> = -1;

        $r5 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r7 = (android.view.Surface) $r6;

        $i11 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceFormat(android.view.Surface)>($r7);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat> = $i11;

        $r8 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = (android.view.Surface) $r9;

        $i12 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceDataspace(android.view.Surface)>($r10);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace> = $i12;

        $r11 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r13 = (android.view.Surface) $r12;

        $i13 = virtualinvoke $r13.<android.view.Surface: int getGenerationId()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId> = $i13;

        goto label6;

     label5:
        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType> = i2;

        $i9 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(34);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat> = $i9;

        $i10 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(34);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace> = $i10;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId> = 0;

     label6:
        r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId> = r15;

        return;
    }

    void <init>(android.os.Parcel, android.hardware.camera2.params.OutputConfiguration$1)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        android.os.Parcel r1;
        android.hardware.camera2.params.OutputConfiguration$1 r2;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.hardware.camera2.params.OutputConfiguration$1;

        specialinvoke r0.<android.hardware.camera2.params.OutputConfiguration: void <init>(android.os.Parcel)>(r1);

        return;
    }

    public void <init>(android.util.Size, java.lang.Class)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        android.util.Size r1;
        java.lang.Class r2;
        java.lang.IllegalArgumentException $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r7;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.util.Size;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_UNKNOWN> = -1;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_VIEW> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: int SURFACE_TYPE_SURFACE_TEXTURE> = 1;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "surfaceSize must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "klass must not be null");

        if r2 != class "Landroid/view/SurfaceHolder;" goto label1;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType> = 0;

        goto label2;

     label1:
        if r2 != class "Landroid/graphics/SurfaceTexture;" goto label4;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType> = 1;

     label2:
        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        if $i0 == 0 goto label3;

        $i1 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i1 == 0 goto label3;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId> = -1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces> = $r7;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize> = r1;

        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(34);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat> = $i2;

        $i3 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(34);

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace> = $i3;

        r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig> = 1;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared> = 0;

        r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId> = null;

        return;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface size needs to be non-zero");

        throw $r6;

     label4:
        r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType> = -1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknow surface source class type");

        throw $r5;
    }

    public void <init>(android.view.Surface)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        android.view.Surface r1;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.view.Surface;

        specialinvoke r0.<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface,int)>(-1, r1, 0);

        return;
    }

    public void <init>(android.view.Surface, int)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        android.view.Surface r1;
        int i0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        specialinvoke r0.<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface,int)>(-1, r1, i0);

        return;
    }

    public void addSurface(android.view.Surface)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        android.view.Surface r1;
        android.util.Size r2, $r10, $r18;
        java.util.ArrayList $r5, $r7, $r8, $r12;
        boolean $z0, $z1, $z3;
        java.lang.IllegalStateException $r6, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r9, $r11, $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r21;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Surface must not be null");

        $r5 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label8;

        $r7 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label2;

        $z3 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared>;

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot have 2 surfaces for a non-sharing configuration");

        throw $r22;

     label2:
        $r8 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i2 = $i1 + 1;

        if $i2 > 4 goto label7;

        r2 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: android.util.Size getSurfaceSize(android.view.Surface)>(r1);

        $r10 = r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        $z1 = virtualinvoke r2.<android.util.Size: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added surface size ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is different than pre-configured size ");

        $r18 = r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", the pre-configured size will be used.");

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("OutputConfiguration", $r21);

     label3:
        $i3 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat>;

        $i4 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceFormat(android.view.Surface)>(r1);

        if $i3 != $i4 goto label6;

        $i5 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat>;

        if $i5 == 34 goto label5;

        $i6 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace>;

        $i7 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceDataspace(android.view.Surface)>(r1);

        if $i6 != $i7 goto label4;

        goto label5;

     label4:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The dataspace of added surface doesn\'t match");

        throw $r13;

     label5:
        $r12 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;

     label6:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The format of added surface format doesn\'t match");

        throw $r11;

     label7:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exceeds maximum number of surfaces");

        throw $r9;

     label8:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface is already added!");

        throw $r6;
    }

    public int describeContents()
    {
        android.hardware.camera2.params.OutputConfiguration r0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        return 0;
    }

    public void enableSurfaceSharing()
    {
        android.hardware.camera2.params.OutputConfiguration r0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared> = 1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.camera2.params.OutputConfiguration r0, r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        android.util.Size $r1, $r2;
        java.lang.String $r3, $r4;
        java.util.ArrayList $r5, $r6, $r7, $r9;
        java.lang.Object $r8, $r10, r11;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r11 := @parameter0: java.lang.Object;

        if r11 != null goto label1;

        return 0;

     label1:
        if r0 != r11 goto label2;

        return 1;

     label2:
        $z0 = r11 instanceof android.hardware.camera2.params.OutputConfiguration;

        if $z0 == 0 goto label8;

        r12 = (android.hardware.camera2.params.OutputConfiguration) r11;

        $i1 = r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation>;

        $i0 = r12.<android.hardware.camera2.params.OutputConfiguration: int mRotation>;

        if $i1 != $i0 goto label7;

        $r2 = r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        $r1 = r12.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        $z1 = virtualinvoke $r2.<android.util.Size: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label7;

        i12 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat>;

        i13 = r12.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat>;

        if i12 != i13 goto label7;

        $i3 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId>;

        $i2 = r12.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId>;

        if $i3 != $i2 goto label7;

        $i5 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType>;

        $i4 = r12.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType>;

        if $i5 != $i4 goto label7;

        $z3 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig>;

        $z2 = r12.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig>;

        if $z3 != $z2 goto label7;

        $z5 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared>;

        $z4 = r12.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared>;

        if $z5 != $z4 goto label7;

        if i12 != i13 goto label7;

        $i7 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace>;

        $i6 = r12.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace>;

        if $i7 != $i6 goto label7;

        $i9 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId>;

        $i8 = r12.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId>;

        if $i9 != $i8 goto label7;

        $r4 = r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId>;

        $r3 = r12.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId>;

        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z6 != 0 goto label3;

        goto label7;

     label3:
        $r5 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $i10 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r6 = r12.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $i11 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i14 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i11);

        i15 = 0;

     label4:
        if i15 >= i14 goto label6;

        $r7 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        $r9 = r12.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        if $r8 == $r10 goto label5;

        return 0;

     label5:
        i15 = i15 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        return 0;

     label8:
        return 0;
    }

    public int getMaxSharedSurfaceCount()
    {
        android.hardware.camera2.params.OutputConfiguration r0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        return 4;
    }

    public int getRotation()
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        int $i0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        $i0 = r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation>;

        return $i0;
    }

    public android.view.Surface getSurface()
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        java.util.ArrayList $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        android.view.Surface $r4;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        $r1 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r4 = (android.view.Surface) $r3;

        return $r4;
    }

    public int getSurfaceGroupId()
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        int $i0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        $i0 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId>;

        return $i0;
    }

    public java.util.List getSurfaces()
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        $r1 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public int hashCode()
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        boolean z0, z1, z2;
        java.util.ArrayList $r1;
        android.util.Size $r2, $r4;
        int[] $r3, $r5;
        int $i0, $i1, i2, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        java.lang.String r6, r7;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        z0 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig>;

        i2 = 0;

        if z0 == 0 goto label3;

        i4 = r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation>;

        $r4 = r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        i5 = virtualinvoke $r4.<android.util.Size: int hashCode()>();

        i6 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat>;

        i7 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace>;

        i8 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId>;

        i9 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType>;

        z1 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared>;

        r6 = r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId>;

        if r6 != null goto label1;

        i10 = 0;

        goto label2;

     label1:
        i10 = virtualinvoke r6.<java.lang.String: int hashCode()>();

     label2:
        $r5 = newarray (int)[8];

        $r5[0] = i4;

        $r5[1] = i5;

        $r5[2] = i6;

        $r5[3] = i7;

        $r5[4] = i8;

        $r5[5] = i9;

        i18 = (int) z1;

        $r5[6] = i18;

        $r5[7] = i10;

        $i1 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCode(int[])>($r5);

        return $i1;

     label3:
        i11 = r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation>;

        $r1 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        i12 = virtualinvoke $r1.<java.util.ArrayList: int hashCode()>();

        i13 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredGenerationId>;

        $r2 = r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        i14 = virtualinvoke $r2.<android.util.Size: int hashCode()>();

        i15 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredFormat>;

        i16 = r0.<android.hardware.camera2.params.OutputConfiguration: int mConfiguredDataspace>;

        i17 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId>;

        z2 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared>;

        r7 = r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId>;

        if r7 != null goto label4;

        goto label5;

     label4:
        i2 = virtualinvoke r7.<java.lang.String: int hashCode()>();

     label5:
        $r3 = newarray (int)[9];

        $r3[0] = i11;

        $r3[1] = i12;

        $r3[2] = i13;

        $r3[3] = i14;

        $r3[4] = i15;

        $r3[5] = i16;

        $r3[6] = i17;

        i19 = (int) z2;

        $r3[7] = i19;

        $r3[8] = i2;

        $i0 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCode(int[])>($r3);

        return $i0;
    }

    public boolean isDeferredConfiguration()
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        $z0 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig>;

        return $z0;
    }

    public boolean isForPhysicalCamera()
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        java.lang.String $r1;
        boolean z0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        $r1 = r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void removeSurface(android.view.Surface)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        android.view.Surface r1, $r2;
        java.lang.IllegalArgumentException $r3, $r5;
        java.util.ArrayList $r4;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.view.Surface;

        $r2 = virtualinvoke r0.<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>();

        if $r2 == r1 goto label2;

        $r4 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface is not part of this output configuration");

        throw $r5;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot remove surface associated with this output configuration");

        throw $r3;
    }

    public void setPhysicalCameraId(java.lang.String)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        java.lang.String r1;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: java.lang.String;

        r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId> = r1;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.hardware.camera2.params.OutputConfiguration r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.IllegalArgumentException $r2;
        android.util.Size $r3, $r4;
        boolean $z0, $z1;
        java.util.ArrayList $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.camera2.params.OutputConfiguration;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $i1 = r0.<android.hardware.camera2.params.OutputConfiguration: int mRotation>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceGroupId>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<android.hardware.camera2.params.OutputConfiguration: int mSurfaceType>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $r3 = r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        $i4 = virtualinvoke $r3.<android.util.Size: int getWidth()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $r4 = r0.<android.hardware.camera2.params.OutputConfiguration: android.util.Size mConfiguredSize>;

        $i5 = virtualinvoke $r4.<android.util.Size: int getHeight()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $z0 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsDeferredConfig>;

        i6 = (int) $z0;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i6);

        $z1 = r0.<android.hardware.camera2.params.OutputConfiguration: boolean mIsShared>;

        i7 = (int) $z1;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i7);

        $r5 = r0.<android.hardware.camera2.params.OutputConfiguration: java.util.ArrayList mSurfaces>;

        virtualinvoke r1.<android.os.Parcel: void writeTypedList(java.util.List)>($r5);

        $r6 = r0.<android.hardware.camera2.params.OutputConfiguration: java.lang.String mPhysicalCameraId>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r6);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dest must not be null");

        throw $r2;
    }
}
