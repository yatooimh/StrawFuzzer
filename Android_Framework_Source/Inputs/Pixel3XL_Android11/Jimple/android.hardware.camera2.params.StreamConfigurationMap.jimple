public final class android.hardware.camera2.params.StreamConfigurationMap extends java.lang.Object
{
    private static final long DURATION_20FPS_NS;
    private static final int DURATION_MIN_FRAME;
    private static final int DURATION_STALL;
    private static final int HAL_DATASPACE_DEPTH;
    private static final int HAL_DATASPACE_DYNAMIC_DEPTH;
    private static final int HAL_DATASPACE_HEIF;
    private static final int HAL_DATASPACE_RANGE_SHIFT;
    private static final int HAL_DATASPACE_STANDARD_SHIFT;
    private static final int HAL_DATASPACE_TRANSFER_SHIFT;
    private static final int HAL_DATASPACE_UNKNOWN;
    private static final int HAL_DATASPACE_V0_JFIF;
    private static final int HAL_PIXEL_FORMAT_BLOB;
    private static final int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED;
    private static final int HAL_PIXEL_FORMAT_RAW10;
    private static final int HAL_PIXEL_FORMAT_RAW12;
    private static final int HAL_PIXEL_FORMAT_RAW16;
    private static final int HAL_PIXEL_FORMAT_RAW_OPAQUE;
    private static final int HAL_PIXEL_FORMAT_Y16;
    private static final int HAL_PIXEL_FORMAT_YCbCr_420_888;
    private static final java.lang.String TAG;
    private final android.util.SparseIntArray mAllOutputFormats;
    private final android.hardware.camera2.params.StreamConfiguration[] mConfigurations;
    private final android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations;
    private final android.util.SparseIntArray mDepthOutputFormats;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mDepthStallDurations;
    private final android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations;
    private final android.util.SparseIntArray mDynamicDepthOutputFormats;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthStallDurations;
    private final android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations;
    private final android.util.SparseIntArray mHeicOutputFormats;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mHeicStallDurations;
    private final android.util.SparseIntArray mHighResOutputFormats;
    private final android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations;
    private final java.util.HashMap mHighSpeedVideoFpsRangeMap;
    private final java.util.HashMap mHighSpeedVideoSizeMap;
    private final android.util.SparseIntArray mInputFormats;
    private final android.hardware.camera2.params.ReprocessFormatsMap mInputOutputFormatsMap;
    private final boolean mListHighResolution;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations;
    private final android.util.SparseIntArray mOutputFormats;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations;

    public void <init>(android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.HighSpeedVideoConfiguration[], android.hardware.camera2.params.ReprocessFormatsMap, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.hardware.camera2.params.StreamConfiguration[] r1, r4, r7, r10;
        android.hardware.camera2.params.StreamConfigurationDuration[] r2, r3, r5, r6, r8, r9, r11, r12;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r13;
        android.hardware.camera2.params.ReprocessFormatsMap r14;
        boolean z0;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.hardware.camera2.params.StreamConfiguration[];

        r2 := @parameter1: android.hardware.camera2.params.StreamConfigurationDuration[];

        r3 := @parameter2: android.hardware.camera2.params.StreamConfigurationDuration[];

        r4 := @parameter3: android.hardware.camera2.params.StreamConfiguration[];

        r5 := @parameter4: android.hardware.camera2.params.StreamConfigurationDuration[];

        r6 := @parameter5: android.hardware.camera2.params.StreamConfigurationDuration[];

        r7 := @parameter6: android.hardware.camera2.params.StreamConfiguration[];

        r8 := @parameter7: android.hardware.camera2.params.StreamConfigurationDuration[];

        r9 := @parameter8: android.hardware.camera2.params.StreamConfigurationDuration[];

        r10 := @parameter9: android.hardware.camera2.params.StreamConfiguration[];

        r11 := @parameter10: android.hardware.camera2.params.StreamConfigurationDuration[];

        r12 := @parameter11: android.hardware.camera2.params.StreamConfigurationDuration[];

        r13 := @parameter12: android.hardware.camera2.params.HighSpeedVideoConfiguration[];

        r14 := @parameter13: android.hardware.camera2.params.ReprocessFormatsMap;

        z0 := @parameter14: boolean;

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: void <init>(android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfiguration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.StreamConfigurationDuration[],android.hardware.camera2.params.HighSpeedVideoConfiguration[],android.hardware.camera2.params.ReprocessFormatsMap,boolean,boolean)>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, z0, 1);

        return;
    }

    public void <init>(android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.HighSpeedVideoConfiguration[], android.hardware.camera2.params.ReprocessFormatsMap, boolean, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.hardware.camera2.params.StreamConfigurationDuration[] r1, r3, r4, r6, r7, $r22, $r24, $r28, $r30, $r34, $r36, $r40, $r42, $r67, $r68, $r70, $r71, $r73, $r74, $r76, $r77, r80, r81, r83, r87;
        android.hardware.camera2.params.StreamConfiguration[] r2, r5, $r20, $r26, $r32, $r38, $r66, $r69, $r72, $r75, r79, r82, r84, r90, r92, r94;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r8, $r44, $r65, r96;
        android.hardware.camera2.params.ReprocessFormatsMap r9;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i33, i34, i35, i36, i37, i38, i39, i40;
        android.util.SparseIntArray $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r55, $r57, $r58, $r59, $r60, $r61, $r62, r86, r89;
        java.util.HashMap $r17, $r18, $r45, $r47, $r50, $r52;
        java.lang.Object[] $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43;
        java.lang.Object $r46, $r51;
        java.lang.Integer $r48, $r53, r100, r101, r102;
        java.lang.AssertionError $r56;
        android.util.Size $r63, $r64, r98;
        java.lang.NullPointerException $r78;
        android.hardware.camera2.params.StreamConfiguration r85, r91, r93, r95;
        android.hardware.camera2.params.StreamConfigurationDuration r88;
        long l31;
        byte $b32;
        android.hardware.camera2.params.HighSpeedVideoConfiguration r97;
        android.util.Range r99;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r79 := @parameter0: android.hardware.camera2.params.StreamConfiguration[];

        r80 := @parameter1: android.hardware.camera2.params.StreamConfigurationDuration[];

        r81 := @parameter2: android.hardware.camera2.params.StreamConfigurationDuration[];

        r82 := @parameter3: android.hardware.camera2.params.StreamConfiguration[];

        r83 := @parameter4: android.hardware.camera2.params.StreamConfigurationDuration[];

        r1 := @parameter5: android.hardware.camera2.params.StreamConfigurationDuration[];

        r2 := @parameter6: android.hardware.camera2.params.StreamConfiguration[];

        r3 := @parameter7: android.hardware.camera2.params.StreamConfigurationDuration[];

        r4 := @parameter8: android.hardware.camera2.params.StreamConfigurationDuration[];

        r5 := @parameter9: android.hardware.camera2.params.StreamConfiguration[];

        r6 := @parameter10: android.hardware.camera2.params.StreamConfigurationDuration[];

        r7 := @parameter11: android.hardware.camera2.params.StreamConfigurationDuration[];

        r8 := @parameter12: android.hardware.camera2.params.HighSpeedVideoConfiguration[];

        r9 := @parameter13: android.hardware.camera2.params.ReprocessFormatsMap;

        z0 := @parameter14: boolean;

        z1 := @parameter15: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r10 = new android.util.SparseIntArray;

        specialinvoke $r10.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mOutputFormats> = $r10;

        $r11 = new android.util.SparseIntArray;

        specialinvoke $r11.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHighResOutputFormats> = $r11;

        $r12 = new android.util.SparseIntArray;

        specialinvoke $r12.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mAllOutputFormats> = $r12;

        $r13 = new android.util.SparseIntArray;

        specialinvoke $r13.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mInputFormats> = $r13;

        $r14 = new android.util.SparseIntArray;

        specialinvoke $r14.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats> = $r14;

        $r15 = new android.util.SparseIntArray;

        specialinvoke $r15.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats> = $r15;

        $r16 = new android.util.SparseIntArray;

        specialinvoke $r16.<android.util.SparseIntArray: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats> = $r16;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap> = $r17;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap> = $r18;

        if r79 != null goto label02;

        if r82 != null goto label02;

        if r5 == null goto label01;

        goto label02;

     label01:
        $r78 = new java.lang.NullPointerException;

        specialinvoke $r78.<java.lang.NullPointerException: void <init>(java.lang.String)>("At least one of color/depth/heic configurations must not be null");

        throw $r78;

     label02:
        if r79 != null goto label03;

        $r75 = newarray (android.hardware.camera2.params.StreamConfiguration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations> = $r75;

        $r76 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations> = $r76;

        $r77 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations> = $r77;

        goto label04;

     label03:
        $r19 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r79, "configurations");

        $r20 = (android.hardware.camera2.params.StreamConfiguration[]) $r19;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations> = $r20;

        $r21 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r80, "minFrameDurations");

        $r22 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r21;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations> = $r22;

        $r23 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r81, "stallDurations");

        $r24 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r23;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations> = $r24;

     label04:
        r0.<android.hardware.camera2.params.StreamConfigurationMap: boolean mListHighResolution> = z0;

        if r82 != null goto label05;

        $r72 = newarray (android.hardware.camera2.params.StreamConfiguration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations> = $r72;

        $r73 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations> = $r73;

        $r74 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthStallDurations> = $r74;

        goto label06;

     label05:
        $r25 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r82, "depthConfigurations");

        $r26 = (android.hardware.camera2.params.StreamConfiguration[]) $r25;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations> = $r26;

        $r27 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r83, "depthMinFrameDurations");

        $r28 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r27;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations> = $r28;

        $r29 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r1, "depthStallDurations");

        $r30 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r29;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthStallDurations> = $r30;

     label06:
        if r2 != null goto label07;

        $r69 = newarray (android.hardware.camera2.params.StreamConfiguration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations> = $r69;

        $r70 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations> = $r70;

        $r71 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthStallDurations> = $r71;

        goto label08;

     label07:
        $r31 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r2, "dynamicDepthConfigurations");

        $r32 = (android.hardware.camera2.params.StreamConfiguration[]) $r31;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations> = $r32;

        $r33 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r3, "dynamicDepthMinFrameDurations");

        $r34 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r33;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations> = $r34;

        $r35 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r4, "dynamicDepthStallDurations");

        $r36 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r35;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthStallDurations> = $r36;

     label08:
        if r5 != null goto label09;

        $r66 = newarray (android.hardware.camera2.params.StreamConfiguration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations> = $r66;

        $r67 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations> = $r67;

        $r68 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicStallDurations> = $r68;

        goto label10;

     label09:
        $r37 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r5, "heicConfigurations");

        $r38 = (android.hardware.camera2.params.StreamConfiguration[]) $r37;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations> = $r38;

        $r39 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r6, "heicMinFrameDurations");

        $r40 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r39;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations> = $r40;

        $r41 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r7, "heicStallDurations");

        $r42 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r41;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicStallDurations> = $r42;

     label10:
        if r8 != null goto label11;

        $r65 = newarray (android.hardware.camera2.params.HighSpeedVideoConfiguration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations> = $r65;

        goto label12;

     label11:
        $r43 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r8, "highSpeedVideoConfigurations");

        $r44 = (android.hardware.camera2.params.HighSpeedVideoConfiguration[]) $r43;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations> = $r44;

     label12:
        r84 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        i0 = lengthof r84;

        i28 = 0;

     label13:
        if i28 >= i0 goto label22;

        r85 = r84[i28];

        i1 = virtualinvoke r85.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $z5 = virtualinvoke r85.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z5 == 0 goto label20;

        r86 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mAllOutputFormats>;

        $i21 = virtualinvoke r86.<android.util.SparseIntArray: int get(int)>(i1);

        $i22 = $i21 + 1;

        virtualinvoke r86.<android.util.SparseIntArray: void put(int,int)>(i1, $i22);

        $z6 = r0.<android.hardware.camera2.params.StreamConfigurationMap: boolean mListHighResolution>;

        if $z6 == 0 goto label16;

        r87 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        i29 = lengthof r87;

        i30 = 0;

     label14:
        if i30 >= i29 goto label16;

        r88 = r87[i30];

        $i23 = virtualinvoke r88.<android.hardware.camera2.params.StreamConfigurationDuration: int getFormat()>();

        if $i23 != i1 goto label15;

        $i24 = virtualinvoke r88.<android.hardware.camera2.params.StreamConfigurationDuration: int getWidth()>();

        $r63 = virtualinvoke r85.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $i25 = virtualinvoke $r63.<android.util.Size: int getWidth()>();

        if $i24 != $i25 goto label15;

        $i26 = virtualinvoke r88.<android.hardware.camera2.params.StreamConfigurationDuration: int getHeight()>();

        $r64 = virtualinvoke r85.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $i27 = virtualinvoke $r64.<android.util.Size: int getHeight()>();

        if $i26 != $i27 goto label15;

        l31 = virtualinvoke r88.<android.hardware.camera2.params.StreamConfigurationDuration: long getDuration()>();

        goto label17;

     label15:
        i30 = i30 + 1;

        goto label14;

     label16:
        l31 = 0L;

     label17:
        $b32 = l31 cmp 50000000L;

        if $b32 > 0 goto label18;

        r89 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mOutputFormats>;

        goto label19;

     label18:
        r89 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHighResOutputFormats>;

     label19:
        goto label21;

     label20:
        r89 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mInputFormats>;

     label21:
        $i19 = virtualinvoke r89.<android.util.SparseIntArray: int get(int)>(i1);

        $i20 = $i19 + 1;

        virtualinvoke r89.<android.util.SparseIntArray: void put(int,int)>(i1, $i20);

        i28 = i28 + 1;

        goto label13;

     label22:
        r90 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        i33 = lengthof r90;

        i34 = 0;

     label23:
        if i34 >= i33 goto label26;

        r91 = r90[i34];

        $z4 = virtualinvoke r91.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z4 != 0 goto label24;

        goto label25;

     label24:
        $r61 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        $i15 = virtualinvoke r91.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $r62 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        $i16 = virtualinvoke r91.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $i17 = virtualinvoke $r62.<android.util.SparseIntArray: int get(int)>($i16);

        $i18 = $i17 + 1;

        virtualinvoke $r61.<android.util.SparseIntArray: void put(int,int)>($i15, $i18);

     label25:
        i34 = i34 + 1;

        goto label23;

     label26:
        r92 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        i35 = lengthof r92;

        i36 = 0;

     label27:
        if i36 >= i35 goto label30;

        r93 = r92[i36];

        $z3 = virtualinvoke r93.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z3 != 0 goto label28;

        goto label29;

     label28:
        $r59 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats>;

        $i11 = virtualinvoke r93.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $r60 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats>;

        $i12 = virtualinvoke r93.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $i13 = virtualinvoke $r60.<android.util.SparseIntArray: int get(int)>($i12);

        $i14 = $i13 + 1;

        virtualinvoke $r59.<android.util.SparseIntArray: void put(int,int)>($i11, $i14);

     label29:
        i36 = i36 + 1;

        goto label27;

     label30:
        r94 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        i37 = lengthof r94;

        i38 = 0;

     label31:
        if i38 >= i37 goto label34;

        r95 = r94[i38];

        $z2 = virtualinvoke r95.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z2 != 0 goto label32;

        goto label33;

     label32:
        $r57 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        $i7 = virtualinvoke r95.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $r58 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        $i8 = virtualinvoke r95.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $i9 = virtualinvoke $r58.<android.util.SparseIntArray: int get(int)>($i8);

        $i10 = $i9 + 1;

        virtualinvoke $r57.<android.util.SparseIntArray: void put(int,int)>($i7, $i10);

     label33:
        i38 = i38 + 1;

        goto label31;

     label34:
        if r79 == null goto label36;

        if z1 == 0 goto label36;

        $r55 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mOutputFormats>;

        $i6 = virtualinvoke $r55.<android.util.SparseIntArray: int indexOfKey(int)>(34);

        if $i6 < 0 goto label35;

        goto label36;

     label35:
        $r56 = new java.lang.AssertionError;

        specialinvoke $r56.<java.lang.AssertionError: void <init>(java.lang.Object)>("At least one stream configuration for IMPLEMENTATION_DEFINED must exist");

        throw $r56;

     label36:
        r96 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        i39 = lengthof r96;

        i40 = 0;

     label37:
        if i40 >= i39 goto label40;

        r97 = r96[i40];

        r98 = virtualinvoke r97.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()>();

        r99 = virtualinvoke r97.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()>();

        $r45 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        $r46 = virtualinvoke $r45.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r98);

        r100 = (java.lang.Integer) $r46;

        r101 = r100;

        if r100 != null goto label38;

        r101 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label38:
        $r47 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        $i2 = virtualinvoke r101.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r47.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r98, $r48);

        $r50 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        $r51 = virtualinvoke $r50.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r99);

        r102 = (java.lang.Integer) $r51;

        if r102 != null goto label39;

        r102 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        goto label39;

     label39:
        $r52 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        $i4 = virtualinvoke r102.<java.lang.Integer: int intValue()>();

        $i5 = $i4 + 1;

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke $r52.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r99, $r53);

        i40 = i40 + 1;

        goto label37;

     label40:
        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.ReprocessFormatsMap mInputOutputFormatsMap> = r9;

        return;
    }

    private void appendHighResOutputsString(java.lang.StringBuilder)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.StringBuilder r1;
        int[] r2;
        int i0, i1, i2, $i5, $i6, $i8, $i9, $i10, $i11, $i12, i13, i14;
        android.util.Size[] r3;
        android.util.Size r4;
        long l3, l4;
        char $c7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10, $r12;
        java.lang.String $r11, $r15;
        java.lang.Long $r13, $r14;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HighResolutionOutputs(");

        r2 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()>();

        i0 = lengthof r2;

        i13 = 0;

     label1:
        if i13 >= i0 goto label5;

        i1 = r2[i13];

        r3 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighResolutionOutputSizes(int)>(i1);

        if r3 != null goto label2;

        goto label4;

     label2:
        i2 = lengthof r3;

        i14 = 0;

     label3:
        if i14 >= i2 goto label4;

        r4 = r3[i14];

        l3 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>(i1, r4);

        l4 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>(i1, r4);

        $r8 = newarray (java.lang.Object)[6];

        $i11 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r8[0] = $r9;

        $i12 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r8[1] = $r10;

        $r11 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String formatToString(int)>(i1);

        $r8[2] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[3] = $r12;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r8[4] = $r13;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r8[5] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d], ", $r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        i14 = i14 + 1;

        goto label3;

     label4:
        i13 = i13 + 1;

        goto label1;

     label5:
        $i5 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i6 = $i5 - 1;

        $c7 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i6);

        if $c7 != 32 goto label6;

        $i8 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i9 = $i8 - 2;

        $i10 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i9, $i10);

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        return;
    }

    private void appendHighSpeedVideoConfigurationsString(java.lang.StringBuilder)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.StringBuilder r1;
        android.util.Size[] r2;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, i10, i11;
        android.util.Size r3;
        android.util.Range[] r4;
        android.util.Range r5;
        char $c4;
        java.lang.Object[] $r9;
        java.lang.Integer $r10, $r11;
        java.lang.Comparable $r12, $r13;
        java.lang.String $r14;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HighSpeedVideoConfigurations(");

        r2 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()>();

        i0 = lengthof r2;

        i10 = 0;

     label1:
        if i10 >= i0 goto label4;

        r3 = r2[i10];

        r4 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)>(r3);

        i1 = lengthof r4;

        i11 = 0;

     label2:
        if i11 >= i1 goto label3;

        r5 = r4[i11];

        $r9 = newarray (java.lang.Object)[4];

        $i8 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r9[0] = $r10;

        $i9 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r9[1] = $r11;

        $r12 = virtualinvoke r5.<android.util.Range: java.lang.Comparable getLower()>();

        $r9[2] = $r12;

        $r13 = virtualinvoke r5.<android.util.Range: java.lang.Comparable getUpper()>();

        $r9[3] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[w:%d, h:%d, min_fps:%d, max_fps:%d], ", $r9);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        i11 = i11 + 1;

        goto label2;

     label3:
        i10 = i10 + 1;

        goto label1;

     label4:
        $i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i3);

        if $c4 != 32 goto label5;

        $i5 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i6 = $i5 - 2;

        $i7 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i6, $i7);

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        return;
    }

    private void appendInputsString(java.lang.StringBuilder)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.StringBuilder r1;
        int[] r2;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, i11, i12;
        android.util.Size[] r3;
        android.util.Size r4;
        char $c5;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10, $r12;
        java.lang.String $r11, $r13;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inputs(");

        r2 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>();

        i0 = lengthof r2;

        i11 = 0;

     label1:
        if i11 >= i0 goto label4;

        i1 = r2[i11];

        r3 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>(i1);

        i2 = lengthof r3;

        i12 = 0;

     label2:
        if i12 >= i2 goto label3;

        r4 = r3[i12];

        $r8 = newarray (java.lang.Object)[4];

        $i9 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r8[0] = $r9;

        $i10 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r8[1] = $r10;

        $r11 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String formatToString(int)>(i1);

        $r8[2] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[3] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[w:%d, h:%d, format:%s(%d)], ", $r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        i12 = i12 + 1;

        goto label2;

     label3:
        i11 = i11 + 1;

        goto label1;

     label4:
        $i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i4 = $i3 - 1;

        $c5 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i4);

        if $c5 != 32 goto label5;

        $i6 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i7 = $i6 - 2;

        $i8 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i7, $i8);

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        return;
    }

    private void appendOutputsString(java.lang.StringBuilder)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.StringBuilder r1;
        int[] r2;
        int i0, i1, i2, $i5, $i6, $i8, $i9, $i10, $i11, $i12, i13, i14;
        android.util.Size[] r3;
        android.util.Size r4;
        long l3, l4;
        char $c7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10, $r12;
        java.lang.String $r11, $r15;
        java.lang.Long $r13, $r14;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Outputs(");

        r2 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()>();

        i0 = lengthof r2;

        i13 = 0;

     label1:
        if i13 >= i0 goto label4;

        i1 = r2[i13];

        r3 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(i1);

        i2 = lengthof r3;

        i14 = 0;

     label2:
        if i14 >= i2 goto label3;

        r4 = r3[i14];

        l3 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>(i1, r4);

        l4 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>(i1, r4);

        $r8 = newarray (java.lang.Object)[6];

        $i11 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r8[0] = $r9;

        $i12 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r8[1] = $r10;

        $r11 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String formatToString(int)>(i1);

        $r8[2] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[3] = $r12;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r8[4] = $r13;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r8[5] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d], ", $r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        i14 = i14 + 1;

        goto label2;

     label3:
        i13 = i13 + 1;

        goto label1;

     label4:
        $i5 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i6 = $i5 - 1;

        $c7 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i6);

        if $c7 != 32 goto label5;

        $i8 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i9 = $i8 - 2;

        $i10 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i9, $i10);

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        return;
    }

    private void appendValidOutputFormatsForInputString(java.lang.StringBuilder)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.StringBuilder r1;
        int[] r2, r3;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        char $c3;
        java.lang.Object[] $r7, $r13;
        java.lang.String $r8, $r10, $r14, $r16;
        java.lang.Integer $r9, $r15;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ValidOutputFormatsForInput(");

        r2 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>();

        i0 = lengthof r2;

        i12 = 0;

     label1:
        if i12 >= i0 goto label5;

        i13 = r2[i12];

        $r7 = newarray (java.lang.Object)[2];

        $r8 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String formatToString(int)>(i13);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[in:%s(%d), out:", $r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r3 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getValidOutputFormatsForInput(int)>(i13);

        i14 = 0;

     label2:
        $i7 = lengthof r3;

        if i14 >= $i7 goto label4;

        $r13 = newarray (java.lang.Object)[2];

        $i8 = r3[i14];

        $r14 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String formatToString(int)>($i8);

        $r13[0] = $r14;

        $i9 = r3[i14];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s(%d)", $r13);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $i10 = lengthof r3;

        $i11 = $i10 - 1;

        if i14 >= $i11 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        i14 = i14 + 1;

        goto label2;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        i12 = i12 + 1;

        goto label1;

     label5:
        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i2);

        if $c3 != 32 goto label6;

        $i4 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i5 = $i4 - 2;

        $i6 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i5, $i6);

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        return;
    }

    private static boolean arrayContains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1, $r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r2 = r0[i1];

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    static int checkArgumentFormat(int)
    {
        int i0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.graphics.ImageFormat: boolean isPublicFormat(int)>(i0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.graphics.PixelFormat: boolean isPublicFormat(int)>(i0);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("format 0x%x was not defined in either ImageFormat or PixelFormat", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label2:
        return i0;
    }

    static int checkArgumentFormatInternal(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 33 goto label2;

        if i0 == 34 goto label2;

        if i0 == 36 goto label2;

        if i0 == 256 goto label1;

        if i0 == 540422489 goto label2;

        if i0 == 1212500294 goto label1;

        $i1 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormat(int)>(i0);

        return $i1;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An unknown internal format: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return i0;
    }

    private int checkArgumentFormatSupported(int, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8;
        boolean z0;
        android.util.SparseIntArray $r1, $r2, $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.String $r9;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormat(int)>(i0);

        i1 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(i0);

        if z0 == 0 goto label4;

        if i2 != 4096 goto label1;

        $r5 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        $i8 = virtualinvoke $r5.<android.util.SparseIntArray: int indexOfKey(int)>(i1);

        if $i8 < 0 goto label5;

        return i0;

     label1:
        if i2 != 4098 goto label2;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats>;

        $i7 = virtualinvoke $r4.<android.util.SparseIntArray: int indexOfKey(int)>(i1);

        if $i7 < 0 goto label5;

        return i0;

     label2:
        if i2 != 4099 goto label3;

        $r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        $i6 = virtualinvoke $r3.<android.util.SparseIntArray: int indexOfKey(int)>(i1);

        if $i6 < 0 goto label5;

        return i0;

     label3:
        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mAllOutputFormats>;

        $i5 = virtualinvoke $r2.<android.util.SparseIntArray: int indexOfKey(int)>(i1);

        if $i5 < 0 goto label5;

        return i0;

     label4:
        $r1 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mInputFormats>;

        $i4 = virtualinvoke $r1.<android.util.SparseIntArray: int indexOfKey(int)>(i1);

        if $i4 < 0 goto label5;

        return i0;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("format %x is not supported by this stream configuration map", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;
    }

    public static int depthFormatToPublic(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r1, $r2, $r6;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;

        i0 := @parameter0: int;

        if i0 == 256 goto label6;

        if i0 == 540422489 goto label5;

        tableswitch(i0)
        {
            case 32: goto label4;
            case 33: goto label3;
            case 34: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown DATASPACE_DEPTH format ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IMPLEMENTATION_DEFINED must not leak to public API");

        throw $r2;

     label3:
        return 257;

     label4:
        return 4098;

     label5:
        return 1144402265;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageFormat.JPEG is an unknown internal format");

        throw $r1;
    }

    private java.lang.String formatToString(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        if i0 == 1 goto label23;

        if i0 == 2 goto label22;

        if i0 == 3 goto label21;

        if i0 == 4 goto label20;

        if i0 == 16 goto label19;

        if i0 == 17 goto label18;

        if i0 == 256 goto label17;

        if i0 == 257 goto label16;

        lookupswitch(i0)
        {
            case 20: goto label15;
            case 32: goto label14;
            case 4098: goto label13;
            case 538982489: goto label12;
            case 540422489: goto label11;
            case 842094169: goto label10;
            case 1144402265: goto label09;
            case 1212500294: goto label08;
            case 1768253795: goto label07;
            default: goto label01;
        };

     label01:
        tableswitch(i0)
        {
            case 34: goto label06;
            case 35: goto label05;
            case 36: goto label04;
            case 37: goto label03;
            default: goto label02;
        };

     label02:
        return "UNKNOWN";

     label03:
        return "RAW10";

     label04:
        return "RAW_PRIVATE";

     label05:
        return "YUV_420_888";

     label06:
        return "PRIVATE";

     label07:
        return "DEPTH_JPEG";

     label08:
        return "HEIC";

     label09:
        return "DEPTH16";

     label10:
        return "YV12";

     label11:
        return "Y16";

     label12:
        return "Y8";

     label13:
        return "RAW_DEPTH";

     label14:
        return "RAW_SENSOR";

     label15:
        return "YUY2";

     label16:
        return "DEPTH_POINT_CLOUD";

     label17:
        return "JPEG";

     label18:
        return "NV21";

     label19:
        return "NV16";

     label20:
        return "RGB_565";

     label21:
        return "RGB_888";

     label22:
        return "RGBX_8888";

     label23:
        return "RGBA_8888";
    }

    private android.hardware.camera2.params.StreamConfigurationDuration[] getDurations(int, int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;
        android.hardware.camera2.params.StreamConfigurationDuration[] r2, r3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label06;

        if i0 != 1 goto label05;

        if i1 != 4096 goto label01;

        r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthStallDurations>;

        goto label04;

     label01:
        if i1 != 4098 goto label02;

        r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthStallDurations>;

        goto label04;

     label02:
        if i1 != 4099 goto label03;

        r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicStallDurations>;

        goto label04;

     label03:
        r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

     label04:
        return r2;

     label05:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("duration was invalid");

        throw $r1;

     label06:
        if i1 != 4096 goto label07;

        r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations>;

        goto label10;

     label07:
        if i1 != 4098 goto label08;

        r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations>;

        goto label10;

     label08:
        if i1 != 4099 goto label09;

        r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations>;

        goto label10;

     label09:
        r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

     label10:
        return r3;
    }

    private android.util.SparseIntArray getFormatsMap(boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        boolean z0;
        android.util.SparseIntArray r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r1 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mAllOutputFormats>;

        goto label2;

     label1:
        r1 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mInputFormats>;

     label2:
        return r1;
    }

    private long getInternalFormatDuration(int, int, android.util.Size, int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i7, i8, i9, i10;
        android.util.Size r1;
        android.hardware.camera2.params.StreamConfigurationDuration[] r2;
        android.hardware.camera2.params.StreamConfigurationDuration r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        long $l6;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        r1 := @parameter2: android.util.Size;

        i8 := @parameter3: int;

        $z0 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: boolean isSupportedInternalConfiguration(int,int,android.util.Size)>(i0, i7, r1);

        if $z0 == 0 goto label4;

        r2 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] getDurations(int,int)>(i8, i7);

        i9 = lengthof r2;

        i10 = 0;

     label1:
        if i10 >= i9 goto label3;

        r3 = r2[i10];

        $i1 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: int getFormat()>();

        if $i1 != i0 goto label2;

        $i2 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: int getWidth()>();

        $i3 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        if $i2 != $i3 goto label2;

        $i4 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: int getHeight()>();

        $i5 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i4 != $i5 goto label2;

        $l6 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: long getDuration()>();

        return $l6;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        return 0L;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size was not supported");

        throw $r4;
    }

    private android.util.Size[] getInternalFormatSizes(int, int, boolean, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i1, i2, i3, $i5, $i7, $i8, $i9, $i10, $i11, $i12, i14, i16, i17, i18;
        boolean z0, z1, $z2, $z3, z4;
        android.util.Size[] r1, $r24, r30;
        android.hardware.camera2.params.StreamConfiguration r2;
        android.hardware.camera2.params.StreamConfigurationDuration r3;
        java.lang.StringBuilder $r4, $r12;
        java.lang.AssertionError $r10, $r18;
        java.lang.String $r11, $r19;
        java.lang.Object[] $r20;
        byte $b6;
        android.util.Size $r21, $r22, $r29;
        android.util.SparseIntArray $r23, r26;
        android.hardware.camera2.params.StreamConfiguration[] r27;
        android.hardware.camera2.params.StreamConfigurationDuration[] r28;
        long l19;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i14 = 0;

        if i1 != 4096 goto label01;

        if z1 == 0 goto label01;

        $r24 = newarray (android.util.Size)[0];

        return $r24;

     label01:
        if z0 != 0 goto label02;

        r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mInputFormats>;

        goto label07;

     label02:
        if i1 != 4096 goto label03;

        r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        goto label07;

     label03:
        if i1 != 4098 goto label04;

        r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats>;

        goto label07;

     label04:
        if i1 != 4099 goto label05;

        r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        goto label07;

     label05:
        if z1 == 0 goto label06;

        r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHighResOutputFormats>;

        goto label07;

     label06:
        r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mOutputFormats>;

     label07:
        i2 = virtualinvoke r26.<android.util.SparseIntArray: int get(int)>(i0);

        if z0 == 0 goto label08;

        if i1 == 4096 goto label08;

        if i1 == 4098 goto label08;

        if i1 != 4099 goto label09;

     label08:
        if i2 == 0 goto label34;

     label09:
        if z0 == 0 goto label10;

        if i1 == 4096 goto label10;

        if i1 == 4098 goto label10;

        if i1 == 4099 goto label10;

        $r23 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mAllOutputFormats>;

        $i12 = virtualinvoke $r23.<android.util.SparseIntArray: int get(int)>(i0);

        if $i12 != 0 goto label10;

        goto label34;

     label10:
        r1 = newarray (android.util.Size)[i2];

        i16 = 0;

        if i1 != 4096 goto label11;

        r27 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        goto label14;

     label11:
        if i1 != 4098 goto label12;

        r27 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        goto label14;

     label12:
        if i1 != 4099 goto label13;

        r27 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        goto label14;

     label13:
        r27 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

     label14:
        if i1 != 4096 goto label15;

        r28 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations>;

        goto label18;

     label15:
        if i1 != 4098 goto label16;

        r28 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations>;

        goto label18;

     label16:
        if i1 != 4099 goto label17;

        r28 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations>;

        goto label18;

     label17:
        r28 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

     label18:
        i3 = lengthof r27;

     label19:
        if i14 >= i3 goto label27;

        r2 = r27[i14];

        i17 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        if i17 != i0 goto label26;

        $z2 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z2 != z0 goto label26;

        if z0 == 0 goto label25;

        $z3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: boolean mListHighResolution>;

        if $z3 == 0 goto label25;

        i18 = 0;

     label20:
        l19 = 0L;

        $i5 = lengthof r28;

        if i18 >= $i5 goto label22;

        r3 = r28[i18];

        $i7 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: int getFormat()>();

        if $i7 != i17 goto label21;

        $i8 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: int getWidth()>();

        $r21 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $i9 = virtualinvoke $r21.<android.util.Size: int getWidth()>();

        if $i8 != $i9 goto label21;

        $i10 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: int getHeight()>();

        $r22 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $i11 = virtualinvoke $r22.<android.util.Size: int getHeight()>();

        if $i10 != $i11 goto label21;

        l19 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationDuration: long getDuration()>();

        goto label22;

     label21:
        i18 = i18 + 1;

        goto label20;

     label22:
        if i1 == 4096 goto label25;

        $b6 = l19 cmp 50000000L;

        if $b6 <= 0 goto label23;

        z4 = 1;

        goto label24;

     label23:
        z4 = 0;

     label24:
        if z1 == z4 goto label25;

        goto label26;

     label25:
        $r29 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        r1[i16] = $r29;

        i16 = i16 + 1;

        goto label26;

     label26:
        i14 = i14 + 1;

        goto label19;

     label27:
        if i16 == i2 goto label31;

        if i1 == 4098 goto label28;

        if i1 != 4099 goto label31;

     label28:
        if i16 > i2 goto label30;

        if i16 > 0 goto label29;

        r30 = newarray (android.util.Size)[0];

        goto label32;

     label29:
        $r20 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, i16);

        r30 = (android.util.Size[]) $r20;

        goto label32;

     label30:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many dynamic depth sizes (expected ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = new java.lang.AssertionError;

        $r19 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r18;

     label31:
        if i16 != i2 goto label33;

        r30 = r1;

     label32:
        return r30;

     label33:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too few sizes (expected ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = new java.lang.AssertionError;

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r10;

     label34:
        return null;
    }

    private int getPublicFormatCount(boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        android.util.SparseIntArray $r1, $r2, $r3, $r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray getFormatsMap(boolean)>(z0);

        i0 = virtualinvoke $r1.<android.util.SparseIntArray: int size()>();

        i6 = i0;

        if z0 == 0 goto label1;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        $i1 = virtualinvoke $r2.<android.util.SparseIntArray: int size()>();

        $i2 = i0 + $i1;

        $r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats>;

        $i3 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        $i4 = $i2 + $i3;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        $i5 = virtualinvoke $r4.<android.util.SparseIntArray: int size()>();

        i6 = $i4 + $i5;

     label1:
        return i6;
    }

    private android.util.Size[] getPublicFormatSizes(int, boolean, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i2, $i3;
        boolean z0, z1;
        android.util.Size[] $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label1:
        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormatSupported(int,boolean)>(i0, z0);

     label2:
        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        $i3 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(i0);

        $r2 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInternalFormatSizes(int,int,boolean,boolean)>($i2, $i3, z0, z1);

        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private int[] getPublicFormats(boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        boolean z0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, $i15;
        java.lang.StringBuilder $r2;
        java.lang.AssertionError $r7;
        java.lang.String $r8;
        android.util.SparseIntArray $r9, $r10, $r11, $r12, r13;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int getPublicFormatCount(boolean)>(z0);

        r1 = newarray (int)[$i0];

        i10 = 0;

        r13 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray getFormatsMap(boolean)>(z0);

        i11 = 0;

     label1:
        $i1 = virtualinvoke r13.<android.util.SparseIntArray: int size()>();

        if i11 >= $i1 goto label2;

        $i8 = virtualinvoke r13.<android.util.SparseIntArray: int keyAt(int)>(i11);

        $i9 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToPublic(int)>($i8);

        r1[i10] = $i9;

        i11 = i11 + 1;

        i10 = i10 + 1;

        goto label1;

     label2:
        i12 = i10;

        if z0 == 0 goto label6;

        i13 = 0;

     label3:
        $r9 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        $i3 = virtualinvoke $r9.<android.util.SparseIntArray: int size()>();

        if i13 >= $i3 goto label4;

        $r12 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        $i6 = virtualinvoke $r12.<android.util.SparseIntArray: int keyAt(int)>(i13);

        $i7 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int depthFormatToPublic(int)>($i6);

        r1[i10] = $i7;

        i13 = i13 + 1;

        i10 = i10 + 1;

        goto label3;

     label4:
        i14 = i10;

        $r10 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats>;

        $i4 = virtualinvoke $r10.<android.util.SparseIntArray: int size()>();

        if $i4 <= 0 goto label5;

        r1[i10] = 1768253795;

        i14 = i10 + 1;

     label5:
        i12 = i14;

        $r11 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        $i5 = virtualinvoke $r11.<android.util.SparseIntArray: int size()>();

        if $i5 <= 0 goto label6;

        r1[i14] = 1212500294;

        i12 = i14 + 1;

     label6:
        $i15 = lengthof r1;

        if $i15 != i12 goto label7;

        return r1;

     label7:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too few formats ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected ");

        $i2 = lengthof r1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = new java.lang.AssertionError;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r7;
    }

    static int imageFormatToDataspace(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 256 goto label4;

        if i0 == 257 goto label3;

        if i0 == 4098 goto label3;

        if i0 == 1144402265 goto label3;

        if i0 == 1212500294 goto label2;

        if i0 == 1768253795 goto label1;

        return 0;

     label1:
        return 4098;

     label2:
        return 4099;

     label3:
        return 4096;

     label4:
        return 146931712;
    }

    static int imageFormatToInternal(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 256 goto label3;

        if i0 == 257 goto label3;

        if i0 == 4098 goto label2;

        if i0 == 1144402265 goto label1;

        if i0 == 1212500294 goto label3;

        if i0 == 1768253795 goto label3;

        return i0;

     label1:
        return 540422489;

     label2:
        return 32;

     label3:
        return 33;
    }

    public static int[] imageFormatToInternal(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, i3;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        i3 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $i1 = r0[i3];

        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>($i1);

        r0[i3] = $i2;

        i3 = i3 + 1;

        goto label2;

     label3:
        return r0;
    }

    public static int imageFormatToPublic(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 == 33 goto label2;

        if i0 == 256 goto label1;

        return i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageFormat.JPEG is an unknown internal format");

        throw $r0;

     label2:
        return 256;
    }

    static int[] imageFormatToPublic(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, i3;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        i3 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $i1 = r0[i3];

        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToPublic(int)>($i1);

        r0[i3] = $i2;

        i3 = i3 + 1;

        goto label2;

     label3:
        return r0;
    }

    public static boolean isOutputSupportedFor(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "klass must not be null");

        if r0 != class "Landroid/media/ImageReader;" goto label1;

        return 1;

     label1:
        if r0 != class "Landroid/media/MediaRecorder;" goto label2;

        return 1;

     label2:
        if r0 != class "Landroid/media/MediaCodec;" goto label3;

        return 1;

     label3:
        if r0 != class "Landroid/renderscript/Allocation;" goto label4;

        return 1;

     label4:
        if r0 != class "Landroid/view/SurfaceHolder;" goto label5;

        return 1;

     label5:
        if r0 != class "Landroid/graphics/SurfaceTexture;" goto label6;

        return 1;

     label6:
        return 0;
    }

    private boolean isSupportedInternalConfiguration(int, int, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i1, i2, i3, $i4;
        android.util.Size r1, $r4;
        android.hardware.camera2.params.StreamConfiguration $r2, $r3;
        boolean $z0;
        android.hardware.camera2.params.StreamConfiguration[] r5;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r1 := @parameter2: android.util.Size;

        if i2 != 4096 goto label1;

        r5 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        goto label4;

     label1:
        if i2 != 4098 goto label2;

        r5 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        goto label4;

     label2:
        if i2 != 4099 goto label3;

        r5 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        goto label4;

     label3:
        r5 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

     label4:
        i3 = 0;

     label5:
        $i4 = lengthof r5;

        if i3 >= $i4 goto label7;

        $r2 = r5[i3];

        $i1 = virtualinvoke $r2.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        if $i1 != i0 goto label6;

        $r3 = r5[i3];

        $r4 = virtualinvoke $r3.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $z0 = virtualinvoke $r4.<android.util.Size: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0, r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14;
        android.hardware.camera2.params.StreamConfiguration[] $r1, $r2, $r7, $r8, $r13, $r14, $r19, $r20;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] $r25, $r26;
        java.lang.Object r27;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r27 := @parameter0: java.lang.Object;

        z14 = 0;

        if r27 != null goto label1;

        return 0;

     label1:
        if r0 != r27 goto label2;

        return 1;

     label2:
        $z0 = r27 instanceof android.hardware.camera2.params.StreamConfigurationMap;

        if $z0 == 0 goto label4;

        r28 = (android.hardware.camera2.params.StreamConfigurationMap) r27;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        $r1 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r2, $r1);

        if $z1 == 0 goto label3;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        $r3 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z2 == 0 goto label3;

        $r6 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

        $r5 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z3 == 0 goto label3;

        $r8 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        $r7 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z4 == 0 goto label3;

        $r10 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations>;

        $r9 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations>;

        $z5 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r10, $r9);

        if $z5 == 0 goto label3;

        $r12 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthStallDurations>;

        $r11 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthStallDurations>;

        $z6 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r12, $r11);

        if $z6 == 0 goto label3;

        $r14 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        $r13 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        $z7 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r14, $r13);

        if $z7 == 0 goto label3;

        $r16 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations>;

        $r15 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations>;

        $z8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r16, $r15);

        if $z8 == 0 goto label3;

        $r18 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthStallDurations>;

        $r17 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthStallDurations>;

        $z9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r18, $r17);

        if $z9 == 0 goto label3;

        $r20 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        $r19 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        $z10 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r20, $r19);

        if $z10 == 0 goto label3;

        $r22 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations>;

        $r21 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations>;

        $z11 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r22, $r21);

        if $z11 == 0 goto label3;

        $r24 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicStallDurations>;

        $r23 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicStallDurations>;

        $z12 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r24, $r23);

        if $z12 == 0 goto label3;

        $r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        $r25 = r28.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        $z13 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r26, $r25);

        if $z13 == 0 goto label3;

        z14 = 1;

        goto label3;

     label3:
        return z14;

     label4:
        return 0;
    }

    public android.util.Size[] getHighResolutionOutputSizes(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0;
        boolean $z0;
        android.util.Size[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        $z0 = r0.<android.hardware.camera2.params.StreamConfigurationMap: boolean mListHighResolution>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getPublicFormatSizes(int,boolean,boolean)>(i0, 1, 1);

        return $r1;
    }

    public android.util.Range[] getHighSpeedVideoFpsRanges()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.util.Set r1;
        java.util.HashMap $r2;
        int $i0;
        android.util.Range[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        r1 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r3 = newarray (android.util.Range)[$i0];

        $r4 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.util.Range[]) $r4;

        return $r5;
    }

    public android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.util.Size r1, $r9;
        android.util.Range[] r2;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r3;
        int i0, $i1, $i2, i3, i4, i5;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8;
        boolean $z0;
        android.util.Range $r10;
        java.lang.Integer r11;
        android.hardware.camera2.params.HighSpeedVideoConfiguration r12;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.util.Size;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (java.lang.Integer) $r5;

        i3 = 0;

        if r11 == null goto label4;

        $i1 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        if $i1 == 0 goto label4;

        $i2 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        r2 = newarray (android.util.Range)[$i2];

        i4 = 0;

        r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        i0 = lengthof r3;

     label1:
        if i3 >= i0 goto label3;

        r12 = r3[i3];

        i5 = i4;

        $r9 = virtualinvoke r12.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()>();

        $z0 = virtualinvoke r1.<android.util.Size: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r12.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()>();

        r2[i4] = $r10;

        i5 = i4 + 1;

     label2:
        i3 = i3 + 1;

        i4 = i5;

        goto label1;

     label3:
        return r2;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Size %s does not support high speed video recording", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;
    }

    public android.util.Size[] getHighSpeedVideoSizes()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.util.Set r1;
        java.util.HashMap $r2;
        int $i0;
        android.util.Size[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        r1 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r3 = newarray (android.util.Size)[$i0];

        $r4 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.util.Size[]) $r4;

        return $r5;
    }

    public android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.util.Range r1, $r9;
        android.util.Size[] r2;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r3;
        int i0, $i1, $i2, i3, i4, i5;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8;
        boolean $z0;
        android.util.Size $r10;
        java.lang.Integer r11;
        android.hardware.camera2.params.HighSpeedVideoConfiguration r12;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.util.Range;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (java.lang.Integer) $r5;

        i3 = 0;

        if r11 == null goto label4;

        $i1 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        if $i1 == 0 goto label4;

        $i2 = virtualinvoke r11.<java.lang.Integer: int intValue()>();

        r2 = newarray (android.util.Size)[$i2];

        i4 = 0;

        r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        i0 = lengthof r3;

     label1:
        if i3 >= i0 goto label3;

        r12 = r3[i3];

        i5 = i4;

        $r9 = virtualinvoke r12.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()>();

        $z0 = virtualinvoke r1.<android.util.Range: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r12.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()>();

        r2[i4] = $r10;

        i5 = i4 + 1;

     label2:
        i3 = i3 + 1;

        i4 = i5;

        goto label1;

     label3:
        return r2;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("FpsRange %s does not support high speed video recording", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;
    }

    public int[] getInputFormats()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getPublicFormats(boolean)>(0);

        return $r1;
    }

    public android.util.Size[] getInputSizes(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0;
        android.util.Size[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getPublicFormatSizes(int,boolean,boolean)>(i0, 0, 0);

        return $r1;
    }

    public int[] getOutputFormats()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getPublicFormats(boolean)>(1);

        return $r1;
    }

    public long getOutputMinFrameDuration(int, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i2, $i3;
        android.util.Size r1;
        long $l4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Size;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "size must not be null");

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormatSupported(int,boolean)>(i0, 1);

        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        $i3 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(i0);

        $l4 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,int,android.util.Size,int)>($i2, $i3, r1, 0);

        return $l4;
    }

    public long getOutputMinFrameDuration(java.lang.Class, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.Class r1;
        android.util.Size r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        long $l0;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.util.Size;

        $z0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $l0 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,int,android.util.Size,int)>(34, 0, r2, 0);

        return $l0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("klass was not supported");

        throw $r3;
    }

    public android.util.Size[] getOutputSizes(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0;
        android.util.Size[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getPublicFormatSizes(int,boolean,boolean)>(i0, 1, 0);

        return $r1;
    }

    public android.util.Size[] getOutputSizes(java.lang.Class)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.Class r1;
        boolean $z0;
        android.util.Size[] $r2;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInternalFormatSizes(int,int,boolean,boolean)>(34, 0, 1, 0);

        return $r2;
    }

    public long getOutputStallDuration(int, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i2, $i3;
        android.util.Size r1;
        long $l4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Size;

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormatSupported(int,boolean)>(i0, 1);

        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        $i3 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(i0);

        $l4 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,int,android.util.Size,int)>($i2, $i3, r1, 1);

        return $l4;
    }

    public long getOutputStallDuration(java.lang.Class, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.Class r1;
        android.util.Size r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        long $l0;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.util.Size;

        $z0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $l0 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,int,android.util.Size,int)>(34, 0, r2, 1);

        return $l0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("klass was not supported");

        throw $r3;
    }

    public int[] getValidOutputFormatsForInput(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] r1, $r3, r5;
        android.util.SparseIntArray $r2;
        android.hardware.camera2.params.ReprocessFormatsMap r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.ReprocessFormatsMap mInputOutputFormatsMap>;

        if r4 != null goto label1;

        $r3 = newarray (int)[0];

        return $r3;

     label1:
        r5 = virtualinvoke r4.<android.hardware.camera2.params.ReprocessFormatsMap: int[] getOutputs(int)>(i0);

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        $i1 = virtualinvoke $r2.<android.util.SparseIntArray: int size()>();

        if $i1 <= 0 goto label2;

        $i2 = lengthof r5;

        $i3 = $i2 + 1;

        r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r5, $i3);

        $i4 = lengthof r5;

        r1[$i4] = 1212500294;

        return r1;

     label2:
        return r5;
    }

    public int hashCode()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.Object[][] $r1;
        android.hardware.camera2.params.StreamConfiguration[] $r2, $r5, $r8, $r11;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] $r14;
        int $i0;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r1 = newarray (java.lang.Object[])[13];

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        $r1[0] = $r2;

        $r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        $r1[1] = $r3;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

        $r1[2] = $r4;

        $r5 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        $r1[3] = $r5;

        $r6 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthMinFrameDurations>;

        $r1[4] = $r6;

        $r7 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDepthStallDurations>;

        $r1[5] = $r7;

        $r8 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        $r1[6] = $r8;

        $r9 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthMinFrameDurations>;

        $r1[7] = $r9;

        $r10 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mDynamicDepthStallDurations>;

        $r1[8] = $r10;

        $r11 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        $r1[9] = $r11;

        $r12 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicMinFrameDurations>;

        $r1[10] = $r12;

        $r13 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mHeicStallDurations>;

        $r1[11] = $r13;

        $r14 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        $r1[12] = $r14;

        $i0 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCodeGeneric(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean isOutputSupportedFor(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i2, $i3, $i4, $i5, i6, i7;
        android.util.SparseIntArray $r1, $r2, $r3, $r4;
        boolean z3, z4, z5, z6;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i6 := @parameter0: int;

        staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormat(int)>(i6);

        i0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i6);

        i7 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(i6);

        z3 = 0;

        if i7 != 4096 goto label2;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDepthOutputFormats>;

        $i5 = virtualinvoke $r4.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

        if $i5 < 0 goto label1;

        z3 = 1;

     label1:
        return z3;

     label2:
        if i7 != 4098 goto label4;

        z4 = 0;

        $r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mDynamicDepthOutputFormats>;

        $i4 = virtualinvoke $r3.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

        if $i4 < 0 goto label3;

        z4 = 1;

     label3:
        return z4;

     label4:
        if i7 != 4099 goto label6;

        z5 = 0;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray mHeicOutputFormats>;

        $i3 = virtualinvoke $r2.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

        if $i3 < 0 goto label5;

        z5 = 1;

     label5:
        return z5;

     label6:
        z6 = 0;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.SparseIntArray getFormatsMap(boolean)>(1);

        $i2 = virtualinvoke $r1.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

        if $i2 < 0 goto label7;

        z6 = 1;

     label7:
        return z6;
    }

    public boolean isOutputSupportedFor(android.util.Size, int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.util.Size r1, $r3;
        int i0, i1, $i2, i3, i4, i5;
        android.hardware.camera2.params.StreamConfiguration r2;
        boolean $z0, $z1;
        android.hardware.camera2.params.StreamConfiguration[] r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.util.Size;

        i3 := @parameter1: int;

        i0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i3);

        i4 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToDataspace(int)>(i3);

        if i4 != 4096 goto label1;

        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        goto label4;

     label1:
        if i4 != 4098 goto label2;

        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        goto label4;

     label2:
        if i4 != 4099 goto label3;

        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        goto label4;

     label3:
        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

     label4:
        i1 = lengthof r4;

        i5 = 0;

     label5:
        if i5 >= i1 goto label7;

        r2 = r4[i5];

        $i2 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        if $i2 != i0 goto label6;

        $z0 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z0 == 0 goto label6;

        $r3 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $z1 = virtualinvoke $r3.<android.util.Size: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label6;

        return 1;

     label6:
        i5 = i5 + 1;

        goto label5;

     label7:
        return 0;
    }

    public boolean isOutputSupportedFor(android.view.Surface)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.util.Size r1, $r4, $r5;
        int i0, i1, $i2, $i3, i4, i5;
        boolean z0, $z1, $z2;
        android.hardware.camera2.params.StreamConfiguration r2;
        android.view.Surface r6;
        android.hardware.camera2.params.StreamConfiguration[] r7;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r6 := @parameter0: android.view.Surface;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "surface must not be null");

        r1 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: android.util.Size getSurfaceSize(android.view.Surface)>(r6);

        i0 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceFormat(android.view.Surface)>(r6);

        i4 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceDataspace(android.view.Surface)>(r6);

        z0 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isFlexibleConsumer(android.view.Surface)>(r6);

        if i4 != 4096 goto label1;

        r7 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDepthConfigurations>;

        goto label4;

     label1:
        if i4 != 4098 goto label2;

        r7 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mDynamicDepthConfigurations>;

        goto label4;

     label2:
        if i4 != 4099 goto label3;

        r7 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mHeicConfigurations>;

        goto label4;

     label3:
        r7 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

     label4:
        i1 = lengthof r7;

        i5 = 0;

     label5:
        if i5 >= i1 goto label8;

        r2 = r7[i5];

        $i2 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        if $i2 != i0 goto label7;

        $z1 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z1 == 0 goto label7;

        $r4 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $z2 = virtualinvoke $r4.<android.util.Size: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        if z0 == 0 goto label7;

        $r5 = virtualinvoke r2.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        $i3 = virtualinvoke $r5.<android.util.Size: int getWidth()>();

        if $i3 > 1920 goto label7;

        return 1;

     label7:
        i5 = i5 + 1;

        goto label5;

     label8:
        return 0;
    }

    public java.lang.String toString()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r8;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("StreamConfiguration(");

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: void appendOutputsString(java.lang.StringBuilder)>($r2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: void appendHighResOutputsString(java.lang.StringBuilder)>($r2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: void appendInputsString(java.lang.StringBuilder)>($r2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: void appendValidOutputFormatsForInputString(java.lang.StringBuilder)>($r2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: void appendHighSpeedVideoConfigurationsString(java.lang.StringBuilder)>($r2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.params.StreamConfigurationMap: java.lang.String TAG> = "StreamConfigurationMap";

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_YCbCr_420_888> = 35;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_Y16> = 540422489;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_RAW_OPAQUE> = 36;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_RAW16> = 32;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_RAW12> = 38;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_RAW10> = 37;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED> = 34;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_BLOB> = 33;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_V0_JFIF> = 146931712;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_UNKNOWN> = 0;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_TRANSFER_SHIFT> = 22;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_STANDARD_SHIFT> = 16;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_RANGE_SHIFT> = 27;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_HEIF> = 4099;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_DYNAMIC_DEPTH> = 4098;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_DATASPACE_DEPTH> = 4096;

        <android.hardware.camera2.params.StreamConfigurationMap: int DURATION_STALL> = 1;

        <android.hardware.camera2.params.StreamConfigurationMap: int DURATION_MIN_FRAME> = 0;

        <android.hardware.camera2.params.StreamConfigurationMap: long DURATION_20FPS_NS> = 50000000L;

        return;
    }
}
