public final class android.hardware.camera2.params.TonemapCurve extends java.lang.Object
{
    public static final int CHANNEL_BLUE;
    public static final int CHANNEL_GREEN;
    public static final int CHANNEL_RED;
    public static final float LEVEL_BLACK;
    public static final float LEVEL_WHITE;
    private static final int MIN_CURVE_LENGTH;
    private static final int OFFSET_POINT_IN;
    private static final int OFFSET_POINT_OUT;
    public static final int POINT_SIZE;
    private static final int TONEMAP_MIN_CURVE_POINTS;
    private final float[] mBlue;
    private final float[] mGreen;
    private boolean mHashCalculated;
    private int mHashCode;
    private final float[] mRed;

    public void <init>(float[], float[], float[])
    {
        android.hardware.camera2.params.TonemapCurve r0;
        float[] r1, r2, r3, $r10, $r11, $r12;
        int $i0, $i1, $i2;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        r3 := @parameter2: float[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.params.TonemapCurve: boolean mHashCalculated> = 0;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "red must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "green must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "blue must not be null");

        staticinvoke <android.hardware.camera2.params.TonemapCurve: void checkArgumentArrayLengthDivisibleBy(float[],int,java.lang.String)>(r1, 2, "red");

        staticinvoke <android.hardware.camera2.params.TonemapCurve: void checkArgumentArrayLengthDivisibleBy(float[],int,java.lang.String)>(r2, 2, "green");

        staticinvoke <android.hardware.camera2.params.TonemapCurve: void checkArgumentArrayLengthDivisibleBy(float[],int,java.lang.String)>(r3, 2, "blue");

        staticinvoke <android.hardware.camera2.params.TonemapCurve: void checkArgumentArrayLengthNoLessThan(float[],int,java.lang.String)>(r1, 4, "red");

        staticinvoke <android.hardware.camera2.params.TonemapCurve: void checkArgumentArrayLengthNoLessThan(float[],int,java.lang.String)>(r2, 4, "green");

        staticinvoke <android.hardware.camera2.params.TonemapCurve: void checkArgumentArrayLengthNoLessThan(float[],int,java.lang.String)>(r3, 4, "blue");

        staticinvoke <com.android.internal.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>(r1, 0.0F, 1.0F, "red");

        staticinvoke <com.android.internal.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>(r2, 0.0F, 1.0F, "green");

        staticinvoke <com.android.internal.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>(r3, 0.0F, 1.0F, "blue");

        $i0 = lengthof r1;

        $r10 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r1, $i0);

        r0.<android.hardware.camera2.params.TonemapCurve: float[] mRed> = $r10;

        $i1 = lengthof r2;

        $r11 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r2, $i1);

        r0.<android.hardware.camera2.params.TonemapCurve: float[] mGreen> = $r11;

        $i2 = lengthof r3;

        $r12 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r3, $i2);

        r0.<android.hardware.camera2.params.TonemapCurve: float[] mBlue> = $r12;

        return;
    }

    private static void checkArgumentArrayLengthDivisibleBy(float[], int, java.lang.String)
    {
        int i0, $i1, $i2;
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r5;
        float[] r7;

        r7 := @parameter0: float[];

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $i1 = lengthof r7;

        $i2 = $i1 % i0;

        if $i2 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size must be divisible by ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private static void checkArgumentArrayLengthNoLessThan(float[], int, java.lang.String)
    {
        int i0, $i1;
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r5;
        float[] r7;

        r7 := @parameter0: float[];

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $i1 = lengthof r7;

        if $i1 < i0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size must be at least ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private static int checkArgumentColorChannel(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("colorChannel out of range");

        throw $r0;

     label2:
        return i0;
    }

    private java.lang.String curveToString(int)
    {
        android.hardware.camera2.params.TonemapCurve r0;
        float[] r2;
        int i0, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.StringBuilder $r3;
        java.lang.String $r5;
        float $f0, $f1;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        i6 := @parameter0: int;

        staticinvoke <android.hardware.camera2.params.TonemapCurve: int checkArgumentColorChannel(int)>(i6);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        r2 = specialinvoke r0.<android.hardware.camera2.params.TonemapCurve: float[] getCurve(int)>(i6);

        $i2 = lengthof r2;

        i0 = $i2 / 2;

        i7 = 0;

        i8 = 0;

     label1:
        if i7 >= i0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $f0 = r2[i8];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i5 = i8 + 1;

        $f1 = r2[$i5];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");

        i7 = i7 + 1;

        i8 = i8 + 2;

        goto label1;

     label2:
        $i3 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        $i4 = $i3 - 2;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>($i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private float[] getCurve(int)
    {
        android.hardware.camera2.params.TonemapCurve r0;
        int i0;
        float[] $r1, $r2, $r4;
        java.lang.AssertionError $r3;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        $r4 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mBlue>;

        return $r4;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("colorChannel out of range");

        throw $r3;

     label2:
        $r2 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mGreen>;

        return $r2;

     label3:
        $r1 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mRed>;

        return $r1;
    }

    public void copyColorCurve(int, float[], int)
    {
        android.hardware.camera2.params.TonemapCurve r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        float[] r1, r2;
        java.lang.ArrayIndexOutOfBoundsException $r4;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i1, "offset must not be negative");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "destination must not be null");

        $i3 = lengthof r1;

        $i4 = $i3 + i1;

        $i5 = virtualinvoke r0.<android.hardware.camera2.params.TonemapCurve: int getPointCount(int)>(i0);

        $i6 = $i5 * 2;

        if $i4 < $i6 goto label1;

        r2 = specialinvoke r0.<android.hardware.camera2.params.TonemapCurve: float[] getCurve(int)>(i0);

        $i7 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i1, $i7);

        return;

     label1:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("destination too small to fit elements");

        throw $r4;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.camera2.params.TonemapCurve r0, r8;
        boolean $z0, $z1, $z2, $z3, z4;
        float[] $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.Object r7;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        r7 := @parameter0: java.lang.Object;

        z4 = 0;

        if r7 != null goto label1;

        return 0;

     label1:
        if r0 != r7 goto label2;

        return 1;

     label2:
        $z0 = r7 instanceof android.hardware.camera2.params.TonemapCurve;

        if $z0 == 0 goto label4;

        r8 = (android.hardware.camera2.params.TonemapCurve) r7;

        $r2 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mRed>;

        $r1 = r8.<android.hardware.camera2.params.TonemapCurve: float[] mRed>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r2, $r1);

        if $z1 == 0 goto label3;

        $r4 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mGreen>;

        $r3 = r8.<android.hardware.camera2.params.TonemapCurve: float[] mGreen>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r4, $r3);

        if $z2 == 0 goto label3;

        $r6 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mBlue>;

        $r5 = r8.<android.hardware.camera2.params.TonemapCurve: float[] mBlue>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r6, $r5);

        if $z3 == 0 goto label3;

        z4 = 1;

        goto label3;

     label3:
        return z4;

     label4:
        return 0;
    }

    public android.graphics.PointF getPoint(int, int)
    {
        android.hardware.camera2.params.TonemapCurve r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        float[] r1;
        java.lang.IllegalArgumentException $r2;
        android.graphics.PointF $r3;
        float $f0, $f1;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.hardware.camera2.params.TonemapCurve: int checkArgumentColorChannel(int)>(i0);

        if i1 < 0 goto label1;

        $i3 = virtualinvoke r0.<android.hardware.camera2.params.TonemapCurve: int getPointCount(int)>(i0);

        if i1 >= $i3 goto label1;

        r1 = specialinvoke r0.<android.hardware.camera2.params.TonemapCurve: float[] getCurve(int)>(i0);

        $r3 = new android.graphics.PointF;

        $i4 = i1 * 2;

        $i5 = $i4 + 0;

        $f1 = r1[$i5];

        $i6 = i1 * 2;

        $i7 = $i6 + 1;

        $f0 = r1[$i7];

        specialinvoke $r3.<android.graphics.PointF: void <init>(float,float)>($f1, $f0);

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("index out of range");

        throw $r2;
    }

    public int getPointCount(int)
    {
        android.hardware.camera2.params.TonemapCurve r0;
        int i0, $i2, $i3;
        float[] $r1;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        i0 := @parameter0: int;

        staticinvoke <android.hardware.camera2.params.TonemapCurve: int checkArgumentColorChannel(int)>(i0);

        $r1 = specialinvoke r0.<android.hardware.camera2.params.TonemapCurve: float[] getCurve(int)>(i0);

        $i2 = lengthof $r1;

        $i3 = $i2 / 2;

        return $i3;
    }

    public int hashCode()
    {
        android.hardware.camera2.params.TonemapCurve r0;
        int i0, $i1;
        boolean $z0;
        float[][] $r1;
        float[] $r2, $r3, $r4;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        $z0 = r0.<android.hardware.camera2.params.TonemapCurve: boolean mHashCalculated>;

        if $z0 == 0 goto label1;

        $i1 = r0.<android.hardware.camera2.params.TonemapCurve: int mHashCode>;

        return $i1;

     label1:
        $r1 = newarray (float[])[3];

        $r2 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mRed>;

        $r1[0] = $r2;

        $r3 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mGreen>;

        $r1[1] = $r3;

        $r4 = r0.<android.hardware.camera2.params.TonemapCurve: float[] mBlue>;

        $r1[2] = $r4;

        i0 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCodeGeneric(java.lang.Object[])>($r1);

        r0.<android.hardware.camera2.params.TonemapCurve: int mHashCode> = i0;

        r0.<android.hardware.camera2.params.TonemapCurve: boolean mHashCalculated> = 1;

        return i0;
    }

    public java.lang.String toString()
    {
        android.hardware.camera2.params.TonemapCurve r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, $r10, $r13;

        r0 := @this: android.hardware.camera2.params.TonemapCurve;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("TonemapCurve{");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("R:");

        $r4 = specialinvoke r0.<android.hardware.camera2.params.TonemapCurve: java.lang.String curveToString(int)>(0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", G:");

        $r7 = specialinvoke r0.<android.hardware.camera2.params.TonemapCurve: java.lang.String curveToString(int)>(1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", B:");

        $r10 = specialinvoke r0.<android.hardware.camera2.params.TonemapCurve: java.lang.String curveToString(int)>(2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.params.TonemapCurve: int TONEMAP_MIN_CURVE_POINTS> = 2;

        <android.hardware.camera2.params.TonemapCurve: int POINT_SIZE> = 2;

        <android.hardware.camera2.params.TonemapCurve: int OFFSET_POINT_OUT> = 1;

        <android.hardware.camera2.params.TonemapCurve: int OFFSET_POINT_IN> = 0;

        <android.hardware.camera2.params.TonemapCurve: int MIN_CURVE_LENGTH> = 4;

        <android.hardware.camera2.params.TonemapCurve: float LEVEL_WHITE> = 1.0F;

        <android.hardware.camera2.params.TonemapCurve: float LEVEL_BLACK> = 0.0F;

        <android.hardware.camera2.params.TonemapCurve: int CHANNEL_RED> = 0;

        <android.hardware.camera2.params.TonemapCurve: int CHANNEL_GREEN> = 1;

        <android.hardware.camera2.params.TonemapCurve: int CHANNEL_BLUE> = 2;

        return;
    }
}
