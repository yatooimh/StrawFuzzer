public class android.hardware.camera2.utils.CloseableLock extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final boolean VERBOSE;
    private final java.lang.String TAG;
    private volatile boolean mClosed;
    private final java.util.concurrent.locks.Condition mCondition;
    private boolean mExclusive;
    private final java.util.concurrent.locks.ReentrantLock mLock;
    private final java.lang.ThreadLocal mLockCount;
    private final java.lang.String mName;
    private int mSharedLocks;

    public void <init>()
    {
        android.hardware.camera2.utils.CloseableLock r0;
        java.util.concurrent.locks.ReentrantLock $r2;
        java.util.concurrent.locks.Condition $r3;
        android.hardware.camera2.utils.CloseableLock$1 $r4;

        r0 := @this: android.hardware.camera2.utils.CloseableLock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.utils.CloseableLock: java.lang.String TAG> = "CloseableLock";

        r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed> = 0;

        r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive> = 0;

        r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks> = 0;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock> = $r2;

        $r3 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.Condition mCondition> = $r3;

        $r4 = new android.hardware.camera2.utils.CloseableLock$1;

        specialinvoke $r4.<android.hardware.camera2.utils.CloseableLock$1: void <init>(android.hardware.camera2.utils.CloseableLock)>(r0);

        r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount> = $r4;

        r0.<android.hardware.camera2.utils.CloseableLock: java.lang.String mName> = "";

        return;
    }

    public void <init>(java.lang.String)
    {
        android.hardware.camera2.utils.CloseableLock r0;
        java.lang.String r1;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.concurrent.locks.Condition $r4;
        android.hardware.camera2.utils.CloseableLock$1 $r5;

        r0 := @this: android.hardware.camera2.utils.CloseableLock;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.utils.CloseableLock: java.lang.String TAG> = "CloseableLock";

        r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed> = 0;

        r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive> = 0;

        r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks> = 0;

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock> = $r3;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.Condition mCondition> = $r4;

        $r5 = new android.hardware.camera2.utils.CloseableLock$1;

        specialinvoke $r5.<android.hardware.camera2.utils.CloseableLock$1: void <init>(android.hardware.camera2.utils.CloseableLock)>(r0);

        r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount> = $r5;

        r0.<android.hardware.camera2.utils.CloseableLock: java.lang.String mName> = r1;

        return;
    }

    private void log(java.lang.String)
    {
        android.hardware.camera2.utils.CloseableLock r0;
        java.lang.String r1, $r5, $r8;
        java.lang.StringBuilder $r3;

        r0 := @this: android.hardware.camera2.utils.CloseableLock;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CloseableLock[");

        $r5 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.String mName>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r8, r1);

        return;
    }

    public android.hardware.camera2.utils.CloseableLock$ScopedLock acquireExclusiveLock()
    {
        android.hardware.camera2.utils.CloseableLock r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r10, $r13, $r14, $r16;
        java.lang.ThreadLocal $r2, $r5, $r8;
        java.lang.Object $r3, $r6;
        java.lang.Integer $r4, $r7, $r9;
        boolean $z0, $z1, z2, z3;
        int $i0, $i1, i2, i3;
        android.hardware.camera2.utils.CloseableLock$ScopedLock $r11;
        java.util.concurrent.locks.Condition $r12;
        java.lang.Throwable $r15;
        java.lang.IllegalStateException r17;

        r0 := @this: android.hardware.camera2.utils.CloseableLock;

     label01:
        $r1 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        z2 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed>;

     label02:
        if z2 == 0 goto label03;

        $r14 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label03:
        $r2 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.lang.Integer) $r3;

        i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $z0 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive>;

        if $z0 != 0 goto label06;

     label04:
        if i2 > 0 goto label05;

        goto label06;

     label05:
        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot acquire exclusive lock while holding shared lock");

        throw r17;

     label06:
        if i2 != 0 goto label10;

     label07:
        $z1 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive>;

        if $z1 != 0 goto label08;

        $i1 = r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks>;

        if $i1 <= 0 goto label10;

     label08:
        $r12 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.Condition mCondition>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>();

        z3 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed>;

     label09:
        if z3 == 0 goto label06;

        $r13 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r13.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label10:
        r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive> = 1;

        $r5 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r6 = virtualinvoke $r5.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r7 = (java.lang.Integer) $r6;

        i3 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $i0 = i3 + 1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>($r9);

     label11:
        $r10 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r11 = new android.hardware.camera2.utils.CloseableLock$ScopedLock;

        specialinvoke $r11.<android.hardware.camera2.utils.CloseableLock$ScopedLock: void <init>(android.hardware.camera2.utils.CloseableLock,android.hardware.camera2.utils.CloseableLock$1)>(r0, null);

        return $r11;

     label12:
        $r15 := @caughtexception;

        $r16 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r16.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public android.hardware.camera2.utils.CloseableLock$ScopedLock acquireLock()
    {
        android.hardware.camera2.utils.CloseableLock r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r10, $r13, $r14, $r16;
        java.lang.ThreadLocal $r2, $r5, $r8;
        java.lang.Object $r3, $r6;
        java.lang.Integer $r4, $r7, $r9;
        boolean $z0, z1, $z2, z3;
        int $i0, $i1, $i2, i3, i4;
        android.hardware.camera2.utils.CloseableLock$ScopedLock $r11;
        java.util.concurrent.locks.Condition $r12;
        java.lang.Throwable $r15;
        java.lang.IllegalStateException r17;

        r0 := @this: android.hardware.camera2.utils.CloseableLock;

     label01:
        $r1 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        z1 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed>;

     label02:
        if z1 == 0 goto label03;

        $r14 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label03:
        $r2 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.lang.Integer) $r3;

        i3 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $z0 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive>;

        if $z0 == 0 goto label06;

     label04:
        if i3 > 0 goto label05;

        goto label06;

     label05:
        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot acquire shared lock while holding exclusive lock");

        throw r17;

     label06:
        $z2 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive>;

        if $z2 == 0 goto label08;

        $r12 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.Condition mCondition>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>();

        z3 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed>;

     label07:
        if z3 == 0 goto label06;

        $r13 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r13.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label08:
        $i0 = r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks>;

        $i1 = $i0 + 1;

        r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks> = $i1;

        $r5 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r6 = virtualinvoke $r5.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r7 = (java.lang.Integer) $r6;

        i4 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $i2 = i4 + 1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>($r9);

     label09:
        $r10 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r11 = new android.hardware.camera2.utils.CloseableLock$ScopedLock;

        specialinvoke $r11.<android.hardware.camera2.utils.CloseableLock$ScopedLock: void <init>(android.hardware.camera2.utils.CloseableLock,android.hardware.camera2.utils.CloseableLock$1)>(r0, null);

        return $r11;

     label10:
        $r15 := @caughtexception;

        $r16 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r16.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void close()
    {
        android.hardware.camera2.utils.CloseableLock r0;
        boolean $z0;
        android.hardware.camera2.utils.CloseableLock$ScopedLock $r2;
        java.lang.ThreadLocal $r3, $r8;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;
        java.lang.IllegalStateException $r6;
        java.util.concurrent.locks.ReentrantLock $r7, $r10, $r12;
        java.util.concurrent.locks.Condition $r9;
        java.lang.Throwable $r11;

        r0 := @this: android.hardware.camera2.utils.CloseableLock;

        $z0 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<android.hardware.camera2.utils.CloseableLock: android.hardware.camera2.utils.CloseableLock$ScopedLock acquireExclusiveLock()>();

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label6;

     label3:
        $r7 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed> = 1;

        r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive> = 0;

        r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks> = 0;

        $r8 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        virtualinvoke $r8.<java.lang.ThreadLocal: void remove()>();

        $r9 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.Condition mCondition>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Condition: void signalAll()>();

     label4:
        $r10 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label5:
        $r11 := @caughtexception;

        $r12 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r11;

     label6:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot close while one or more acquired locks are being held by this thread; release all other locks first");

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void releaseLock()
    {
        android.hardware.camera2.utils.CloseableLock r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder r1;
        java.lang.ThreadLocal $r2, $r10, $r13;
        java.lang.Object $r3, $r11;
        java.lang.Integer $r4, $r12, $r14;
        java.lang.IllegalStateException $r5, r21;
        java.util.concurrent.locks.ReentrantLock $r6, $r18, $r19;
        boolean $z0, $z1, $z2;
        java.lang.String $r9;
        java.util.concurrent.locks.Condition $r15, $r16;
        java.lang.Throwable $r17;
        java.lang.AssertionError r20;

        r0 := @this: android.hardware.camera2.utils.CloseableLock;

        $r2 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 <= 0 goto label14;

     label01:
        $r6 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        $z0 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mClosed>;

        if $z0 != 0 goto label12;

        $z1 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive>;

        if $z1 != 0 goto label03;

        $i6 = r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks>;

        $i7 = $i6 - 1;

        r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks> = $i7;

     label02:
        goto label04;

     label03:
        $i2 = r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks>;

        if $i2 != 0 goto label11;

     label04:
        $r10 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r11 = virtualinvoke $r10.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r12 = (java.lang.Integer) $r11;

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        i0 = $i4 - 1;

        $r13 = r0.<android.hardware.camera2.utils.CloseableLock: java.lang.ThreadLocal mLockCount>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r13.<java.lang.ThreadLocal: void set(java.lang.Object)>($r14);

     label05:
        if i0 != 0 goto label08;

     label06:
        $z2 = r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive>;

        if $z2 == 0 goto label08;

        r0.<android.hardware.camera2.utils.CloseableLock: boolean mExclusive> = 0;

        $r16 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.Condition mCondition>;

        interfaceinvoke $r16.<java.util.concurrent.locks.Condition: void signalAll()>();

     label07:
        goto label10;

     label08:
        if i0 != 0 goto label10;

     label09:
        $i5 = r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks>;

        if $i5 != 0 goto label10;

        $r15 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.Condition mCondition>;

        interfaceinvoke $r15.<java.util.concurrent.locks.Condition: void signalAll()>();

     label10:
        $r19 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r19.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label11:
        r20 = new java.lang.AssertionError;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many shared locks ");

        $i3 = r0.<android.hardware.camera2.utils.CloseableLock: int mSharedLocks>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw r20;

     label12:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Do not release after the lock has been closed");

        throw r21;

     label13:
        $r17 := @caughtexception;

        $r18 = r0.<android.hardware.camera2.utils.CloseableLock: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r18.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r17;

     label14:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot release lock that was not acquired by this thread");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.utils.CloseableLock: boolean VERBOSE> = 0;

        return;
    }
}
