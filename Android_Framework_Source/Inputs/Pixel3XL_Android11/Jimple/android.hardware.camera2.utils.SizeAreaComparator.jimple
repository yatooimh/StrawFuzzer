public class android.hardware.camera2.utils.SizeAreaComparator extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        android.hardware.camera2.utils.SizeAreaComparator r0;

        r0 := @this: android.hardware.camera2.utils.SizeAreaComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.util.Size findLargestByArea(java.util.List)
    {
        java.util.List r0;
        android.hardware.camera2.utils.SizeAreaComparator $r2;
        java.lang.Object $r3;
        android.util.Size $r4;

        r0 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "sizes must not be null");

        $r2 = new android.hardware.camera2.utils.SizeAreaComparator;

        specialinvoke $r2.<android.hardware.camera2.utils.SizeAreaComparator: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>(r0, $r2);

        $r4 = (android.util.Size) $r3;

        return $r4;
    }

    public int compare(android.util.Size, android.util.Size)
    {
        android.hardware.camera2.utils.SizeAreaComparator r0;
        android.util.Size r1, r2;
        long l0, l1, l2, l3, $l8, $l10;
        boolean $z0;
        int $i5, $i6, $i7, $i9;
        byte $b11, $b12, $b13, b14, b15;

        r0 := @this: android.hardware.camera2.utils.SizeAreaComparator;

        r1 := @parameter0: android.util.Size;

        r2 := @parameter1: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "size must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "size2 must not be null");

        $z0 = virtualinvoke r1.<android.util.Size: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i5 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        l0 = (long) $i5;

        $i6 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        l1 = (long) $i6;

        $i7 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $l8 = (long) $i7;

        l2 = $l8 * l0;

        $i9 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        $l10 = (long) $i9;

        l3 = $l10 * l1;

        b14 = 1;

        $b11 = l2 cmp l3;

        if $b11 != 0 goto label4;

        $b13 = l0 cmp l1;

        if $b13 <= 0 goto label2;

        goto label3;

     label2:
        b14 = -1;

     label3:
        return b14;

     label4:
        $b12 = l2 cmp l3;

        if $b12 <= 0 goto label5;

        b15 = 1;

        goto label6;

     label5:
        b15 = -1;

     label6:
        return b15;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        android.hardware.camera2.utils.SizeAreaComparator r0;
        java.lang.Object r1, r2;
        android.util.Size $r3, $r4;
        int $i0;

        r0 := @this: android.hardware.camera2.utils.SizeAreaComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (android.util.Size) r1;

        $r3 = (android.util.Size) r2;

        $i0 = virtualinvoke r0.<android.hardware.camera2.utils.SizeAreaComparator: int compare(android.util.Size,android.util.Size)>($r4, $r3);

        return $i0;
    }
}
