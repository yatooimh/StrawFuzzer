public class android.hardware.camera2.utils.SurfaceUtils extends java.lang.Object
{

    public void <init>()
    {
        android.hardware.camera2.utils.SurfaceUtils r0;

        r0 := @this: android.hardware.camera2.utils.SurfaceUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkConstrainedHighSpeedSurfaces(java.util.Collection, android.util.Range, android.hardware.camera2.params.StreamConfigurationMap)
    {
        java.util.Iterator r0, r39;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2;
        java.util.List $r1, r34;
        java.lang.StringBuilder $r2, $r18;
        java.lang.String $r4, $r7, $r10, $r20, $r24, $r27;
        java.lang.IllegalArgumentException $r9, $r16, $r26, $r28, $r29, $r41;
        android.util.Size[] $r11, $r30;
        java.lang.Object $r12, $r14, $r17;
        android.view.Surface $r13, $r15, r36;
        java.lang.Object[] $r23;
        java.util.Collection r31;
        android.util.Range r32;
        android.hardware.camera2.params.StreamConfigurationMap r33;
        android.util.Range[] r35;
        android.util.Size r37;

        r31 := @parameter0: java.util.Collection;

        r32 := @parameter1: android.util.Range;

        r33 := @parameter2: android.hardware.camera2.params.StreamConfigurationMap;

        if r31 == null goto label13;

        $i0 = interfaceinvoke r31.<java.util.Collection: int size()>();

        if $i0 == 0 goto label13;

        $i1 = interfaceinvoke r31.<java.util.Collection: int size()>();

        if $i1 > 2 goto label13;

        if r32 != null goto label01;

        $r30 = virtualinvoke r33.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()>();

        r34 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r30);

        goto label02;

     label01:
        r35 = virtualinvoke r33.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRanges()>();

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r35);

        $z1 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(r32);

        if $z1 == 0 goto label12;

        $r11 = virtualinvoke r33.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)>(r32);

        r34 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

     label02:
        r0 = interfaceinvoke r31.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z8 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label09;

        $r17 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r36 = (android.view.Surface) $r17;

        staticinvoke <android.hardware.camera2.utils.SurfaceUtils: void checkHighSpeedSurfaceFormat(android.view.Surface)>(r36);

        r37 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: android.util.Size getSurfaceSize(android.view.Surface)>(r36);

        $z3 = interfaceinvoke r34.<java.util.List: boolean contains(java.lang.Object)>(r37);

        if $z3 == 0 goto label08;

        $z4 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForPreview(android.view.Surface)>(r36);

        if $z4 != 0 goto label05;

        $z7 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForHwVideoEncoder(android.view.Surface)>(r36);

        if $z7 == 0 goto label04;

        goto label05;

     label04:
        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This output surface is neither preview nor hardware video encoding surface");

        throw $r29;

     label05:
        $z5 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForPreview(android.view.Surface)>(r36);

        if $z5 == 0 goto label07;

        $z6 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForHwVideoEncoder(android.view.Surface)>(r36);

        if $z6 != 0 goto label06;

        goto label07;

     label06:
        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This output surface can not be both preview and hardware video encoding surface");

        throw $r28;

     label07:
        goto label03;

     label08:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface size ");

        $r20 = virtualinvoke r37.<android.util.Size: java.lang.String toString()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not part of the high speed supported size list ");

        $r23 = interfaceinvoke r34.<java.util.List: java.lang.Object[] toArray()>();

        $r24 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r23);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label09:
        $i2 = interfaceinvoke r31.<java.util.Collection: int size()>();

        if $i2 != 2 goto label11;

        r39 = interfaceinvoke r31.<java.util.Collection: java.util.Iterator iterator()>();

        $r12 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (android.view.Surface) $r12;

        z0 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForPreview(android.view.Surface)>($r13);

        $r14 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (android.view.Surface) $r14;

        $z2 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForPreview(android.view.Surface)>($r15);

        if z0 == $z2 goto label10;

        goto label11;

     label10:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The 2 output surfaces must have different type");

        throw $r16;

     label11:
        return;

     label12:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fps range ");

        $r4 = virtualinvoke r32.<android.util.Range: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the request is not a supported high speed fps range ");

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r35);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label13:
        $r41 = new java.lang.IllegalArgumentException;

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output target surface list must not be null and the size must be 1 or 2");

        throw $r41;
    }

    private static void checkHighSpeedSurfaceFormat(android.view.Surface)
    {
        int i0;
        java.lang.StringBuilder $r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.view.Surface r6;

        r6 := @parameter0: android.view.Surface;

        i0 = staticinvoke <android.hardware.camera2.utils.SurfaceUtils: int getSurfaceFormat(android.view.Surface)>(r6);

        if i0 != 34 goto label1;

        return;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface format(");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not for preview or hardware video encoding!");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static int getSurfaceDataspace(android.view.Surface)
    {
        int i0;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r0;
        java.lang.IllegalArgumentException $r1;
        android.view.Surface r2;

        r2 := @parameter0: android.view.Surface;

     label1:
        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceDataspace(android.view.Surface)>(r2);

     label2:
        return i0;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Surface was abandoned", $r0);

        throw $r1;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label1 to label2 with label3;
    }

    public static int getSurfaceFormat(android.view.Surface)
    {
        int i0;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r0;
        java.lang.IllegalArgumentException $r1;
        android.view.Surface r2;

        r2 := @parameter0: android.view.Surface;

     label1:
        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r2);

     label2:
        return i0;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Surface was abandoned", $r0);

        throw $r1;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label1 to label2 with label3;
    }

    public static long getSurfaceId(android.view.Surface)
    {
        long l0;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r0;
        android.view.Surface r1;

        r1 := @parameter0: android.view.Surface;

     label1:
        l0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>(r1);

     label2:
        return l0;

     label3:
        $r0 := @caughtexception;

        return 0L;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label1 to label2 with label3;
    }

    public static android.util.Size getSurfaceSize(android.view.Surface)
    {
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r0;
        java.lang.IllegalArgumentException $r1;
        android.view.Surface r2;
        android.util.Size r3;

        r2 := @parameter0: android.view.Surface;

     label1:
        r3 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size getSurfaceSize(android.view.Surface)>(r2);

     label2:
        return r3;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Surface was abandoned", $r0);

        throw $r1;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label1 to label2 with label3;
    }

    public static boolean isFlexibleConsumer(android.view.Surface)
    {
        android.view.Surface r0;
        boolean $z0;

        r0 := @parameter0: android.view.Surface;

        $z0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean isFlexibleConsumer(android.view.Surface)>(r0);

        return $z0;
    }

    public static boolean isSurfaceForHwVideoEncoder(android.view.Surface)
    {
        android.view.Surface r0;
        boolean $z0;

        r0 := @parameter0: android.view.Surface;

        $z0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean isVideoEncoderConsumer(android.view.Surface)>(r0);

        return $z0;
    }

    public static boolean isSurfaceForPreview(android.view.Surface)
    {
        android.view.Surface r0;
        boolean $z0;

        r0 := @parameter0: android.view.Surface;

        $z0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean isPreviewConsumer(android.view.Surface)>(r0);

        return $z0;
    }
}
