public class android.hardware.camera2.utils.TaskDrainer extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final boolean DEBUG;
    private boolean mDrainFinished;
    private boolean mDraining;
    private final java.util.Set mEarlyFinishedTaskSet;
    private final java.util.concurrent.Executor mExecutor;
    private final android.hardware.camera2.utils.TaskDrainer$DrainListener mListener;
    private final java.lang.Object mLock;
    private final java.lang.String mName;
    private final java.util.Set mTaskSet;

    public void <init>(java.util.concurrent.Executor, android.hardware.camera2.utils.TaskDrainer$DrainListener)
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        java.util.concurrent.Executor r1, $r7;
        android.hardware.camera2.utils.TaskDrainer$DrainListener r2, $r9;
        java.util.HashSet $r3, $r4;
        java.lang.Object $r5, $r6, $r8;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.camera2.utils.TaskDrainer$DrainListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean DEBUG> = 0;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mTaskSet> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mEarlyFinishedTaskSet> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: java.lang.Object mLock> = $r5;

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDraining> = 0;

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDrainFinished> = 0;

        $r6 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "executor must not be null");

        $r7 = (java.util.concurrent.Executor) $r6;

        r0.<android.hardware.camera2.utils.TaskDrainer: java.util.concurrent.Executor mExecutor> = $r7;

        $r8 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "listener must not be null");

        $r9 = (android.hardware.camera2.utils.TaskDrainer$DrainListener) $r8;

        r0.<android.hardware.camera2.utils.TaskDrainer: android.hardware.camera2.utils.TaskDrainer$DrainListener mListener> = $r9;

        r0.<android.hardware.camera2.utils.TaskDrainer: java.lang.String mName> = null;

        return;
    }

    public void <init>(java.util.concurrent.Executor, android.hardware.camera2.utils.TaskDrainer$DrainListener, java.lang.String)
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        java.util.concurrent.Executor r1, $r8;
        android.hardware.camera2.utils.TaskDrainer$DrainListener r2, $r10;
        java.lang.String r3;
        java.util.HashSet $r4, $r5;
        java.lang.Object $r6, $r7, $r9;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.camera2.utils.TaskDrainer$DrainListener;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean DEBUG> = 0;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mTaskSet> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mEarlyFinishedTaskSet> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.utils.TaskDrainer: java.lang.Object mLock> = $r6;

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDraining> = 0;

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDrainFinished> = 0;

        $r7 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "executor must not be null");

        $r8 = (java.util.concurrent.Executor) $r7;

        r0.<android.hardware.camera2.utils.TaskDrainer: java.util.concurrent.Executor mExecutor> = $r8;

        $r9 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "listener must not be null");

        $r10 = (android.hardware.camera2.utils.TaskDrainer$DrainListener) $r9;

        r0.<android.hardware.camera2.utils.TaskDrainer: android.hardware.camera2.utils.TaskDrainer$DrainListener mListener> = $r10;

        r0.<android.hardware.camera2.utils.TaskDrainer: java.lang.String mName> = r3;

        return;
    }

    private void checkIfDrainFinished()
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        java.util.Set $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        $r1 = r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mTaskSet>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDraining>;

        if $z1 == 0 goto label1;

        $z2 = r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDrainFinished>;

        if $z2 != 0 goto label1;

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDrainFinished> = 1;

        specialinvoke r0.<android.hardware.camera2.utils.TaskDrainer: void postDrained()>();

     label1:
        return;
    }

    private void postDrained()
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        android.hardware.camera2.utils._$$Lambda$TaskDrainer$Jb53sDskEXp_qIjiikQeCRx0wJs $r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        $r2 = r0.<android.hardware.camera2.utils.TaskDrainer: java.util.concurrent.Executor mExecutor>;

        $r1 = new android.hardware.camera2.utils._$$Lambda$TaskDrainer$Jb53sDskEXp_qIjiikQeCRx0wJs;

        specialinvoke $r1.<android.hardware.camera2.utils._$$Lambda$TaskDrainer$Jb53sDskEXp_qIjiikQeCRx0wJs: void <init>(android.hardware.camera2.utils.TaskDrainer)>(r0);

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return;
    }

    public void beginDrain()
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        r1 = r0.<android.hardware.camera2.utils.TaskDrainer: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDraining>;

        if $z0 != 0 goto label2;

        r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDraining> = 1;

        specialinvoke r0.<android.hardware.camera2.utils.TaskDrainer: void checkIfDrainFinished()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void lambda$postDrained$0$TaskDrainer()
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        android.hardware.camera2.utils.TaskDrainer$DrainListener $r1;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        $r1 = r0.<android.hardware.camera2.utils.TaskDrainer: android.hardware.camera2.utils.TaskDrainer$DrainListener mListener>;

        interfaceinvoke $r1.<android.hardware.camera2.utils.TaskDrainer$DrainListener: void onDrained()>();

        return;
    }

    public void taskFinished(java.lang.Object)
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        java.lang.Object r1, r11;
        java.lang.IllegalStateException r2;
        java.lang.StringBuilder r3;
        java.util.Set $r4, $r5;
        boolean $z0, $z1;
        java.lang.String $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        r11 := @parameter0: java.lang.Object;

        r1 = r0.<android.hardware.camera2.utils.TaskDrainer: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mTaskSet>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r11);

        if $z0 != 0 goto label4;

        $r5 = r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mEarlyFinishedTaskSet>;

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r11);

        if $z1 == 0 goto label3;

     label2:
        goto label4;

     label3:
        r2 = new java.lang.IllegalStateException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was already finished");

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw r2;

     label4:
        specialinvoke r0.<android.hardware.camera2.utils.TaskDrainer: void checkIfDrainFinished()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void taskStarted(java.lang.Object)
    {
        android.hardware.camera2.utils.TaskDrainer r0;
        java.lang.Object r1, r11;
        java.lang.IllegalStateException r2, r12;
        java.lang.StringBuilder r3;
        boolean $z0, $z1, $z2;
        java.util.Set $r4, $r5;
        java.lang.String $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.hardware.camera2.utils.TaskDrainer;

        r11 := @parameter0: java.lang.Object;

        r1 = r0.<android.hardware.camera2.utils.TaskDrainer: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.hardware.camera2.utils.TaskDrainer: boolean mDraining>;

        if $z0 != 0 goto label6;

        $r4 = r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mEarlyFinishedTaskSet>;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r11);

        if $z1 != 0 goto label4;

        $r5 = r0.<android.hardware.camera2.utils.TaskDrainer: java.util.Set mTaskSet>;

        $z2 = interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r11);

        if $z2 == 0 goto label3;

     label2:
        goto label4;

     label3:
        r2 = new java.lang.IllegalStateException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was already started");

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw r2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        r12 = new java.lang.IllegalStateException;

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t start more tasks after draining has begun");

        throw r12;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.utils.TaskDrainer: java.lang.String TAG> = "TaskDrainer";

        return;
    }
}
