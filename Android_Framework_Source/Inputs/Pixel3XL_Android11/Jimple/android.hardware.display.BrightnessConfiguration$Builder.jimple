public class android.hardware.display.BrightnessConfiguration$Builder extends java.lang.Object
{
    private static final int MAX_CORRECTIONS_BY_CATEGORY;
    private static final int MAX_CORRECTIONS_BY_PACKAGE_NAME;
    private java.util.Map mCorrectionsByCategory;
    private java.util.Map mCorrectionsByPackageName;
    private float[] mCurveLux;
    private float[] mCurveNits;
    private java.lang.String mDescription;
    private float mShortTermModelLowerLuxMultiplier;
    private long mShortTermModelTimeout;
    private float mShortTermModelUpperLuxMultiplier;
    private boolean mShouldCollectColorSamples;

    public void <init>(float[], float[])
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        float[] r1, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r5, $r6, $r7;
        float $f0;
        byte $b4;
        java.util.HashMap $r10, $r11;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.display.BrightnessConfiguration$Builder: long mShortTermModelTimeout> = -1L;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: float mShortTermModelLowerLuxMultiplier> = #NaNF;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: float mShortTermModelUpperLuxMultiplier> = #NaNF;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $i0 = lengthof r1;

        if $i0 == 0 goto label3;

        $i1 = lengthof r2;

        if $i1 == 0 goto label3;

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label2;

        $f0 = r1[0];

        $b4 = $f0 cmpl 0.0F;

        if $b4 != 0 goto label1;

        staticinvoke <com.android.internal.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>(r1, 0.0F, 3.4028235E38F, "lux");

        staticinvoke <com.android.internal.util.Preconditions: float[] checkArrayElementsInRange(float[],float,float,java.lang.String)>(r2, 0.0F, 3.4028235E38F, "nits");

        staticinvoke <android.hardware.display.BrightnessConfiguration$Builder: void checkMonotonic(float[],boolean,java.lang.String)>(r1, 1, "lux");

        staticinvoke <android.hardware.display.BrightnessConfiguration$Builder: void checkMonotonic(float[],boolean,java.lang.String)>(r2, 0, "nits");

        r0.<android.hardware.display.BrightnessConfiguration$Builder: float[] mCurveLux> = r1;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: float[] mCurveNits> = r2;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByPackageName> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByCategory> = $r11;

        return;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Initial control point must be for 0 lux");

        throw $r7;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Lux and nits arrays must be the same length");

        throw $r6;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Lux and nits arrays must not be empty");

        throw $r5;
    }

    private static void checkMonotonic(float[], boolean, java.lang.String)
    {
        boolean z0;
        java.lang.String r0, $r7, r9;
        int $i0, $i1, i4;
        float $f0, $f1, f2;
        byte $b2, $b3;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r6;
        float[] r8;

        r8 := @parameter0: float[];

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.lang.String;

        $i0 = lengthof r8;

        if $i0 > 1 goto label1;

        return;

     label1:
        f2 = r8[0];

        i4 = 1;

     label2:
        $i1 = lengthof r8;

        if i4 >= $i1 goto label7;

        $f0 = r8[i4];

        $b2 = f2 cmpl $f0;

        if $b2 > 0 goto label4;

        $f1 = r8[i4];

        $b3 = f2 cmpl $f1;

        if $b3 != 0 goto label3;

        if z0 == 0 goto label3;

        goto label4;

     label3:
        f2 = r8[i4];

        i4 = i4 + 1;

        goto label2;

     label4:
        if z0 == 0 goto label5;

        r9 = "strictly increasing";

        goto label6;

     label5:
        r9 = "monotonic";

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" values must be ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label7:
        return;
    }

    public android.hardware.display.BrightnessConfiguration$Builder addCorrectionByCategory(int, android.hardware.display.BrightnessCorrection)
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        int i0, $i1, $i2;
        android.hardware.display.BrightnessCorrection r1;
        java.util.Map $r3, $r5;
        java.lang.IllegalArgumentException $r4;
        java.lang.Integer $r6;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.display.BrightnessCorrection;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "correction must not be null");

        $r3 = r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByCategory>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $i2 = virtualinvoke r0.<android.hardware.display.BrightnessConfiguration$Builder: int getMaxCorrectionsByCategory()>();

        if $i1 >= $i2 goto label1;

        $r5 = r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByCategory>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        return r0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too many corrections by category");

        throw $r4;
    }

    public android.hardware.display.BrightnessConfiguration$Builder addCorrectionByPackageName(java.lang.String, android.hardware.display.BrightnessCorrection)
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        java.lang.String r1;
        android.hardware.display.BrightnessCorrection r2;
        java.util.Map $r5, $r7;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.display.BrightnessCorrection;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "packageName must not be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "correction must not be null");

        $r5 = r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByPackageName>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $i1 = virtualinvoke r0.<android.hardware.display.BrightnessConfiguration$Builder: int getMaxCorrectionsByPackageName()>();

        if $i0 >= $i1 goto label1;

        $r7 = r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByPackageName>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r0;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too many corrections by package name");

        throw $r6;
    }

    public android.hardware.display.BrightnessConfiguration build()
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        float[] $r1, $r3, $r8, $r9;
        java.lang.IllegalStateException $r2;
        android.hardware.display.BrightnessConfiguration $r4;
        float $f0, $f1;
        long $l0;
        boolean $z0;
        java.lang.String $r5;
        java.util.Map $r6, $r7;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        $r1 = r0.<android.hardware.display.BrightnessConfiguration$Builder: float[] mCurveLux>;

        if $r1 == null goto label1;

        $r3 = r0.<android.hardware.display.BrightnessConfiguration$Builder: float[] mCurveNits>;

        if $r3 == null goto label1;

        $r4 = new android.hardware.display.BrightnessConfiguration;

        $r9 = r0.<android.hardware.display.BrightnessConfiguration$Builder: float[] mCurveLux>;

        $r8 = r0.<android.hardware.display.BrightnessConfiguration$Builder: float[] mCurveNits>;

        $r7 = r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByPackageName>;

        $r6 = r0.<android.hardware.display.BrightnessConfiguration$Builder: java.util.Map mCorrectionsByCategory>;

        $r5 = r0.<android.hardware.display.BrightnessConfiguration$Builder: java.lang.String mDescription>;

        $z0 = r0.<android.hardware.display.BrightnessConfiguration$Builder: boolean mShouldCollectColorSamples>;

        $l0 = r0.<android.hardware.display.BrightnessConfiguration$Builder: long mShortTermModelTimeout>;

        $f1 = r0.<android.hardware.display.BrightnessConfiguration$Builder: float mShortTermModelLowerLuxMultiplier>;

        $f0 = r0.<android.hardware.display.BrightnessConfiguration$Builder: float mShortTermModelUpperLuxMultiplier>;

        specialinvoke $r4.<android.hardware.display.BrightnessConfiguration: void <init>(float[],float[],java.util.Map,java.util.Map,java.lang.String,boolean,long,float,float,android.hardware.display.BrightnessConfiguration$1)>($r9, $r8, $r7, $r6, $r5, $z0, $l0, $f1, $f0, null);

        return $r4;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A curve must be set!");

        throw $r2;
    }

    public int getMaxCorrectionsByCategory()
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        return 20;
    }

    public int getMaxCorrectionsByPackageName()
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        return 20;
    }

    public android.hardware.display.BrightnessConfiguration$Builder setDescription(java.lang.String)
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        java.lang.String r1;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: java.lang.String mDescription> = r1;

        return r0;
    }

    public android.hardware.display.BrightnessConfiguration$Builder setShortTermModelLowerLuxMultiplier(float)
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: float mShortTermModelLowerLuxMultiplier> = f0;

        return r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative lux multiplier");

        throw $r1;
    }

    public android.hardware.display.BrightnessConfiguration$Builder setShortTermModelTimeoutMillis(long)
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        long l0;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        l0 := @parameter0: long;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: long mShortTermModelTimeout> = l0;

        return r0;
    }

    public android.hardware.display.BrightnessConfiguration$Builder setShortTermModelUpperLuxMultiplier(float)
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: float mShortTermModelUpperLuxMultiplier> = f0;

        return r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative lux multiplier");

        throw $r1;
    }

    public android.hardware.display.BrightnessConfiguration$Builder setShouldCollectColorSamples(boolean)
    {
        android.hardware.display.BrightnessConfiguration$Builder r0;
        boolean z0;

        r0 := @this: android.hardware.display.BrightnessConfiguration$Builder;

        z0 := @parameter0: boolean;

        r0.<android.hardware.display.BrightnessConfiguration$Builder: boolean mShouldCollectColorSamples> = z0;

        return r0;
    }

    public static void <clinit>()
    {
        <android.hardware.display.BrightnessConfiguration$Builder: int MAX_CORRECTIONS_BY_PACKAGE_NAME> = 20;

        <android.hardware.display.BrightnessConfiguration$Builder: int MAX_CORRECTIONS_BY_CATEGORY> = 20;

        return;
    }
}
