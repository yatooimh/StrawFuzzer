class android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog extends java.lang.Object implements android.hardware.display.BrightnessCorrection$BrightnessCorrectionImplementation
{
    private static final java.lang.String ATTR_SCALE;
    private static final java.lang.String ATTR_TRANSLATE;
    private static final float MAX_SCALE;
    private static final float MAX_TRANSLATE;
    private static final float MIN_SCALE;
    private static final float MIN_TRANSLATE;
    private final float mScale;
    private final float mTranslate;

    void <init>(float, float)
    {
        android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog r0;
        float f0, f1, $f2, $f3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 != 0 goto label1;

        $f2 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f0, 0.5F, 2.0F);

        r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale> = $f2;

        $f3 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f1, -0.6F, 0.7F);

        r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate> = $f3;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("scale and translate must be numbers");

        throw $r1;
    }

    static android.hardware.display.BrightnessCorrection loadFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        float $f0, $f1;
        android.hardware.display.BrightnessCorrection $r1;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $f0 = staticinvoke <android.hardware.display.BrightnessCorrection: float access$000(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "scale");

        $f1 = staticinvoke <android.hardware.display.BrightnessCorrection: float access$000(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r0, "translate");

        $r1 = staticinvoke <android.hardware.display.BrightnessCorrection: android.hardware.display.BrightnessCorrection createScaleAndTranslateLog(float,float)>($f0, $f1);

        return $r1;
    }

    static android.hardware.display.BrightnessCorrection readFromParcel(android.os.Parcel)
    {
        android.os.Parcel r0;
        float $f0, $f1;
        android.hardware.display.BrightnessCorrection $r1;

        r0 := @parameter0: android.os.Parcel;

        $f0 = virtualinvoke r0.<android.os.Parcel: float readFloat()>();

        $f1 = virtualinvoke r0.<android.os.Parcel: float readFloat()>();

        $r1 = staticinvoke <android.hardware.display.BrightnessCorrection: android.hardware.display.BrightnessCorrection createScaleAndTranslateLog(float,float)>($f0, $f1);

        return $r1;
    }

    public float apply(float)
    {
        android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        f0 := @parameter0: float;

        $f1 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale>;

        $f2 = staticinvoke <android.util.MathUtils: float log(float)>(f0);

        $f4 = $f1 * $f2;

        $f3 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate>;

        $f5 = $f4 + $f3;

        $f6 = staticinvoke <android.util.MathUtils: float exp(float)>($f5);

        return $f6;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog r0, r2;
        boolean $z0, z1;
        float $f0, $f1, $f2, $f3;
        byte $b0, $b1;
        java.lang.Object r1;

        r0 := @this: android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        r1 := @parameter0: java.lang.Object;

        z1 = 1;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog) r1;

        $f1 = r2.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale>;

        $f0 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale>;

        $b0 = $f1 cmpl $f0;

        if $b0 != 0 goto label3;

        $f3 = r2.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate>;

        $f2 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate>;

        $b1 = $f3 cmpl $f2;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public int hashCode()
    {
        android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog r0;
        float $f0, $f1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        $i0 = 1 * 31;

        $f0 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale>;

        $i1 = staticinvoke <java.lang.Float: int hashCode(float)>($f0);

        $i2 = $i0 + $i1;

        $i3 = $i2 * 31;

        $f1 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate>;

        $i4 = staticinvoke <java.lang.Float: int hashCode(float)>($f1);

        $i5 = $i3 + $i4;

        return $i5;
    }

    public void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog r0;
        org.xmlpull.v1.XmlSerializer r1;
        float $f0, $f1;
        java.lang.String $r3, $r5;

        r0 := @this: android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "scale-and-translate-log");

        $f0 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale>;

        $r3 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "scale", $r3);

        $f1 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate>;

        $r5 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "translate", $r5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "scale-and-translate-log");

        return;
    }

    public java.lang.String toString()
    {
        android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog r0;
        java.lang.StringBuilder $r2;
        float $f0, $f1;
        java.lang.String $r8;

        r0 := @this: android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ScaleAndTranslateLog(");

        $f0 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $f1 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void writeToParcel(android.os.Parcel)
    {
        android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog r0;
        android.os.Parcel r1;
        float $f0, $f1;

        r0 := @this: android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog;

        r1 := @parameter0: android.os.Parcel;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        $f0 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mScale>;

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f0);

        $f1 = r0.<android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float mTranslate>;

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f1);

        return;
    }

    public static void <clinit>()
    {
        <android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float MIN_TRANSLATE> = -0.6F;

        <android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float MIN_SCALE> = 0.5F;

        <android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float MAX_TRANSLATE> = 0.7F;

        <android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: float MAX_SCALE> = 2.0F;

        <android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: java.lang.String ATTR_TRANSLATE> = "translate";

        <android.hardware.display.BrightnessCorrection$ScaleAndTranslateLog: java.lang.String ATTR_SCALE> = "scale";

        return;
    }
}
