public final class android.hardware.display.DisplayManagerGlobal extends java.lang.Object
{
    public static final java.lang.String CACHE_KEY_DISPLAY_INFO_PROPERTY;
    private static final boolean DEBUG;
    public static final int EVENT_DISPLAY_ADDED;
    public static final int EVENT_DISPLAY_CHANGED;
    public static final int EVENT_DISPLAY_REMOVED;
    private static final java.lang.String TAG;
    private static final boolean USE_CACHE;
    private static android.hardware.display.DisplayManagerGlobal sInstance;
    private android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback;
    private boolean mDispatchNativeCallbacks;
    private android.app.PropertyInvalidatedCache mDisplayCache;
    private int[] mDisplayIdCache;
    private final android.util.SparseArray mDisplayInfoCache;
    private final java.util.ArrayList mDisplayListeners;
    private final android.hardware.display.IDisplayManager mDm;
    private final java.lang.Object mLock;
    private final android.graphics.ColorSpace mWideColorSpace;
    private int mWifiDisplayScanNestCount;

    private void <init>(android.hardware.display.IDisplayManager)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;
        android.util.SparseArray $r3;
        android.hardware.display.DisplayManagerGlobal$1 $r4;
        android.graphics.ColorSpace$Named[] $r5;
        android.hardware.display.IDisplayManager $r6, r11;
        int $i0;
        android.graphics.ColorSpace$Named $r7;
        android.graphics.ColorSpace $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r11 := @parameter0: android.hardware.display.IDisplayManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: boolean mDispatchNativeCallbacks> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: android.util.SparseArray mDisplayInfoCache> = $r3;

        $r4 = new android.hardware.display.DisplayManagerGlobal$1;

        specialinvoke $r4.<android.hardware.display.DisplayManagerGlobal$1: void <init>(android.hardware.display.DisplayManagerGlobal,int,java.lang.String)>(r0, 8, "cache_key.display_info");

        r0.<android.hardware.display.DisplayManagerGlobal: android.app.PropertyInvalidatedCache mDisplayCache> = $r4;

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm> = r11;

     label1:
        $r5 = staticinvoke <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named[] values()>();

        $r6 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        $i0 = interfaceinvoke $r6.<android.hardware.display.IDisplayManager: int getPreferredWideGamutColorSpaceId()>();

        $r7 = $r5[$i0];

        $r8 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r7);

        r0.<android.hardware.display.DisplayManagerGlobal: android.graphics.ColorSpace mWideColorSpace> = $r8;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static android.hardware.display.IDisplayManager access$000(android.hardware.display.DisplayManagerGlobal)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;

        r0 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        return $r1;
    }

    static void access$200(android.hardware.display.DisplayManagerGlobal, int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1;

        r0 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void handleDisplayEvent(int,int)>(i0, i1);

        return;
    }

    private int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManager$DisplayListener r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r4;

        $r6 = $r5.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: android.hardware.display.DisplayManager$DisplayListener mListener>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private android.view.DisplayInfo getDisplayInfoLocked(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.hardware.display.IDisplayManager $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        android.os.RemoteException $r4;
        android.view.DisplayInfo r6, r8;
        android.app.PropertyInvalidatedCache r7;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r6 = null;

        r7 = r0.<android.hardware.display.DisplayManagerGlobal: android.app.PropertyInvalidatedCache mDisplayCache>;

        if r7 == null goto label1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = virtualinvoke r7.<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>($r2);

        r6 = (android.view.DisplayInfo) $r3;

        goto label4;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r8 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>(i0);

     label2:
        r6 = r8;

        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        if r6 != null goto label5;

        return null;

     label5:
        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

        return r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static android.hardware.display.DisplayManagerGlobal getInstance()
    {
        android.os.IBinder r0;
        android.hardware.display.DisplayManagerGlobal $r1, r4, r5;
        android.hardware.display.IDisplayManager $r2;
        java.lang.Throwable $r3;

        entermonitor class "Landroid/hardware/display/DisplayManagerGlobal;";

     label1:
        $r1 = <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance>;

        if $r1 != null goto label4;

        r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("display");

     label2:
        if r0 == null goto label4;

     label3:
        r4 = new android.hardware.display.DisplayManagerGlobal;

        $r2 = staticinvoke <android.hardware.display.IDisplayManager$Stub: android.hardware.display.IDisplayManager asInterface(android.os.IBinder)>(r0);

        specialinvoke r4.<android.hardware.display.DisplayManagerGlobal: void <init>(android.hardware.display.IDisplayManager)>($r2);

        <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance> = r4;

     label4:
        r5 = <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance>;

        exitmonitor class "Landroid/hardware/display/DisplayManagerGlobal;";

     label5:
        return r5;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor class "Landroid/hardware/display/DisplayManagerGlobal;";

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static android.os.Looper getLooperForHandler(android.os.Handler)
    {
        java.lang.RuntimeException $r0;
        android.os.Handler r1;
        android.os.Looper r2, r3;

        r1 := @parameter0: android.os.Handler;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        goto label2;

     label1:
        r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

     label2:
        r3 = r2;

        if r2 != null goto label3;

        r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

     label3:
        if r3 == null goto label4;

        return r3;

     label4:
        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not get Looper for the UI thread.");

        throw $r0;
    }

    private void handleDisplayEvent(int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1, i2, i3;
        java.lang.Object r1, $r5;
        java.util.ArrayList $r2, $r4;
        boolean $z0;
        android.view.Display$Mode $r3;
        float $f0;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r6;
        java.lang.Throwable $r7;
        android.view.DisplayInfo r8;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label06;

     label04:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r6 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r5;

        virtualinvoke $r6.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void sendDisplayEvent(int,int)>(i0, i1);

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        if i1 != 2 goto label12;

     label07:
        $z0 = r0.<android.hardware.display.DisplayManagerGlobal: boolean mDispatchNativeCallbacks>;

        if $z0 == 0 goto label12;

     label08:
        if i0 != 0 goto label12;

     label09:
        r8 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfoLocked(int)>(i0);

     label10:
        if r8 == null goto label12;

     label11:
        $r3 = virtualinvoke r8.<android.view.DisplayInfo: android.view.Display$Mode getMode()>();

        $f0 = virtualinvoke $r3.<android.view.Display$Mode: float getRefreshRate()>();

        staticinvoke <android.hardware.display.DisplayManagerGlobal: void nSignalNativeCallbacks(float)>($f0);

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r7 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public static void invalidateLocalDisplayInfoCaches()
    {
        staticinvoke <android.app.PropertyInvalidatedCache: void invalidateCache(java.lang.String)>("cache_key.display_info");

        return;
    }

    private static native void nSignalNativeCallbacks(float);

    private void registerCallbackIfNeededLocked()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback $r1, $r2;
        android.hardware.display.IDisplayManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback>;

        if $r1 != null goto label4;

        $r2 = new android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback;

        specialinvoke $r2.<android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback: void <init>(android.hardware.display.DisplayManagerGlobal,android.hardware.display.DisplayManagerGlobal$1)>(r0, null);

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback> = $r2;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void registerNativeChoreographerForRefreshRateCallbacks()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1;
        android.view.Display$Mode $r2;
        float $f0;
        java.lang.Throwable $r3;
        android.view.DisplayInfo r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

        r0.<android.hardware.display.DisplayManagerGlobal: boolean mDispatchNativeCallbacks> = 1;

        r4 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfoLocked(int)>(0);

     label2:
        if r4 == null goto label4;

     label3:
        $r2 = virtualinvoke r4.<android.view.DisplayInfo: android.view.Display$Mode getMode()>();

        $f0 = virtualinvoke $r2.<android.view.Display$Mode: float getRefreshRate()>();

        staticinvoke <android.hardware.display.DisplayManagerGlobal: void nSignalNativeCallbacks(float)>($f0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void unregisterNativeChoreographerForRefreshRateCallbacks()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.display.DisplayManagerGlobal: boolean mDispatchNativeCallbacks> = 0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void connectWifiDisplay(java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.IllegalArgumentException $r1;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r5 := @parameter0: java.lang.String;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void connectWifiDisplay(java.lang.String)>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(android.content.Context, android.media.projection.MediaProjection, android.hardware.display.VirtualDisplayConfig, android.hardware.display.VirtualDisplay$Callback, android.os.Handler)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.VirtualDisplayConfig r1;
        android.os.Handler r2;
        int i0;
        android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback $r3;
        android.hardware.display.IDisplayManager $r4, $r13;
        java.lang.String $r5, $r10, $r12, $r16, $r18;
        android.hardware.display.VirtualDisplay $r6;
        android.view.Surface $r7;
        java.lang.StringBuilder $r8, $r14;
        android.os.RemoteException $r19, $r21;
        java.lang.RuntimeException $r20, $r22;
        android.content.Context r23;
        android.media.projection.MediaProjection r24;
        android.hardware.display.VirtualDisplay$Callback r25;
        android.media.projection.IMediaProjection r27;
        android.view.Display r29;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r23 := @parameter0: android.content.Context;

        r24 := @parameter1: android.media.projection.MediaProjection;

        r1 := @parameter2: android.hardware.display.VirtualDisplayConfig;

        r25 := @parameter3: android.hardware.display.VirtualDisplay$Callback;

        r2 := @parameter4: android.os.Handler;

        $r3 = new android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback;

        specialinvoke $r3.<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void <init>(android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>(r25, r2);

        if r24 == null goto label1;

        r27 = virtualinvoke r24.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection getProjection()>();

        goto label2;

     label1:
        r27 = null;

     label2:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        $r5 = virtualinvoke r23.<android.content.Context: java.lang.String getPackageName()>();

        i0 = interfaceinvoke $r4.<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>(r1, $r3, r27, $r5);

     label3:
        if i0 >= 0 goto label4;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create virtual display: ");

        $r16 = virtualinvoke r1.<android.hardware.display.VirtualDisplayConfig: java.lang.String getName()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DisplayManager", $r18);

        return null;

     label4:
        r29 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(i0);

        if r29 != null goto label8;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not obtain display info for newly created virtual display: ");

        $r10 = virtualinvoke r1.<android.hardware.display.VirtualDisplayConfig: java.lang.String getName()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DisplayManager", $r12);

     label5:
        $r13 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r13.<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>($r3);

     label6:
        return null;

     label7:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r20;

     label8:
        $r6 = new android.hardware.display.VirtualDisplay;

        $r7 = virtualinvoke r1.<android.hardware.display.VirtualDisplayConfig: android.view.Surface getSurface()>();

        specialinvoke $r6.<android.hardware.display.VirtualDisplay: void <init>(android.hardware.display.DisplayManagerGlobal,android.view.Display,android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>(r0, r29, $r3, $r7);

        return $r6;

     label9:
        $r21 := @caughtexception;

        $r22 = virtualinvoke $r21.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r22;

        catch android.os.RemoteException from label2 to label3 with label9;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void disableLocalDisplayInfoCaches()
    {
        android.hardware.display.DisplayManagerGlobal r0;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r0.<android.hardware.display.DisplayManagerGlobal: android.app.PropertyInvalidatedCache mDisplayCache> = null;

        return;
    }

    public void disconnectWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void disconnectWifiDisplay()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forgetWifiDisplay(java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.IllegalArgumentException $r1;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r5 := @parameter0: java.lang.String;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void forgetWifiDisplay(java.lang.String)>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getAmbientBrightnessStats()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        java.util.List $r2, r6;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.pm.ParceledListSlice r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r5 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getAmbientBrightnessStats()>();

     label2:
        if r5 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r6 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r6;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.hardware.display.IDisplayManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.display.BrightnessConfiguration r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r4 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getBrightnessEvents(java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        java.util.List $r2, r7;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.content.pm.ParceledListSlice r6;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r6 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>(r5);

     label2:
        if r6 != null goto label4;

     label3:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label4:
        r7 = virtualinvoke r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label5:
        return r7;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public android.view.Display getCompatibleDisplay(int, android.content.res.Resources)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.content.res.Resources r1;
        android.view.DisplayInfo r2;
        android.view.Display $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Resources;

        r2 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>(i0);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new android.view.Display;

        specialinvoke $r3.<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.content.res.Resources)>(r0, i0, r2, r1);

        return $r3;
    }

    public android.view.Display getCompatibleDisplay(int, android.view.DisplayAdjustments)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.view.DisplayAdjustments r1;
        android.view.DisplayInfo r2;
        android.view.Display $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.DisplayAdjustments;

        r2 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>(i0);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new android.view.Display;

        specialinvoke $r3.<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.view.DisplayAdjustments)>(r0, i0, r2, r1);

        return $r3;
    }

    public android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.display.BrightnessConfiguration r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r4 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int[] getDisplayIds()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.Object r5;
        int[] r6;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        r5 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r5;

     label2:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r6 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: int[] getDisplayIds()>();

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

        exitmonitor r5;

     label3:
        return r6;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r5;

     label6:
        throw $r2;

     label7:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch android.os.RemoteException from label6 to label7 with label7;
    }

    public android.view.DisplayInfo getDisplayInfo(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.view.DisplayInfo r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfoLocked(int)>(i0);

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.util.Pair getMinimumBrightnessCurve()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        float[] $r2, $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.hardware.display.Curve r6;
        android.util.Pair r7;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r6 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.hardware.display.Curve getMinimumBrightnessCurve()>();

        $r2 = virtualinvoke r6.<android.hardware.display.Curve: float[] getX()>();

        $r3 = virtualinvoke r6.<android.hardware.display.Curve: float[] getY()>();

        r7 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r2, $r3);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.graphics.ColorSpace getPreferredWideGamutColorSpace()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.graphics.ColorSpace $r1;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.graphics.ColorSpace mWideColorSpace>;

        return $r1;
    }

    public android.view.Display getRealDisplay(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.view.DisplayAdjustments $r1;
        android.view.Display $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        $r1 = <android.view.DisplayAdjustments: android.view.DisplayAdjustments DEFAULT_DISPLAY_ADJUSTMENTS>;

        $r2 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)>(i0, $r1);

        return $r2;
    }

    public android.graphics.Point getStableDisplaySize()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.graphics.Point r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r4 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.graphics.Point getStableDisplaySize()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.display.WifiDisplayStatus r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r4 = interfaceinvoke $r1.<android.hardware.display.IDisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMinimalPostProcessingRequested(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        boolean z0;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        z0 = interfaceinvoke $r2.<android.hardware.display.IDisplayManager: boolean isMinimalPostProcessingRequested(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUidPresentOnDisplay(int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1;
        boolean z0;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        z0 = interfaceinvoke $r2.<android.hardware.display.IDisplayManager: boolean isUidPresentOnDisplay(int,int)>(i0, i1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void pauseWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void pauseWifiDisplay()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener, android.os.Handler)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1;
        java.util.ArrayList r2;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        java.lang.Throwable $r5;
        android.hardware.display.DisplayManager$DisplayListener r6;
        android.os.Handler r7;
        android.os.Looper r8;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r6 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        r7 := @parameter1: android.os.Handler;

        if r6 == null goto label7;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)>(r6);

        if $i0 >= 0 goto label2;

        r8 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.os.Looper getLooperForHandler(android.os.Handler)>(r7);

        r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        r3 = new android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate;

        specialinvoke r3.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void <init>(android.hardware.display.DisplayManager$DisplayListener,android.os.Looper)>(r6, r8);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.display.IVirtualDisplayCallback r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r4 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r1.<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void renameWifiDisplay(java.lang.String, java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.String r1, r6;
        java.lang.IllegalArgumentException $r2;
        android.hardware.display.IDisplayManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r6 == null goto label4;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)>(r6, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestColorMode(int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void requestColorMode(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, int, int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1, i2;
        android.hardware.display.IDisplayManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.display.IVirtualDisplayCallback r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r4 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r1.<android.hardware.display.IDisplayManager: void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int,int,int)>(r4, i0, i1, i2);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resumeWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void resumeWifiDisplay()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration, int, java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        java.lang.String r1;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.display.BrightnessConfiguration r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r5 := @parameter0: android.hardware.display.BrightnessConfiguration;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>(r5, i0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTemporaryAutoBrightnessAdjustment(float)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        float f0;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        f0 := @parameter0: float;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void setTemporaryAutoBrightnessAdjustment(float)>(f0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTemporaryBrightness(float)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        float f0;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        f0 := @parameter0: float;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void setTemporaryBrightness(float)>(f0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback, boolean)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        boolean z0;
        android.hardware.display.IDisplayManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.display.IVirtualDisplayCallback r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r4 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r1.<android.hardware.display.IDisplayManager: void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback, android.view.Surface)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.view.Surface r1;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.display.IVirtualDisplayCallback r5;
        boolean z0;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r5 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        r1 := @parameter1: android.view.Surface;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>(r5, r1);

     label2:
        if r1 == null goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback,boolean)>(r5, z0);

     label5:
        return;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void startWifiDisplayScan()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1;
        int i0, $i1;
        android.hardware.display.IDisplayManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i0 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        $i1 = i0 + 1;

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = $i1;

     label02:
        if i0 != 0 goto label08;

     label03:
        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

     label04:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void startWifiDisplayScan()>();

     label05:
        goto label08;

     label06:
        $r3 := @caughtexception;

     label07:
        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void stopWifiDisplayScan()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.lang.String $r4;
        android.hardware.display.IDisplayManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder r10;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        i0 = $i1 - 1;

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = i0;

     label02:
        if i0 != 0 goto label07;

     label03:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r5.<android.hardware.display.IDisplayManager: void stopWifiDisplayScan()>();

     label04:
        goto label09;

     label05:
        $r6 := @caughtexception;

     label06:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label07:
        if i0 >= 0 goto label09;

     label08:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wifi display scan nest count became negative: ");

        $i2 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DisplayManager", $r4);

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = 0;

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1, $r4;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.util.ArrayList $r3, $r6;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r5;
        java.lang.Throwable $r8;
        android.hardware.display.DisplayManager$DisplayListener r9;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r9 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        if r9 == null goto label9;

        r1 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)>(r9);

     label2:
        if i0 < 0 goto label4;

     label3:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r5 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r4;

        virtualinvoke $r5.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void clearEvents()>();

        $r6 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <android.hardware.display.DisplayManagerGlobal: boolean USE_CACHE> = 0;

        <android.hardware.display.DisplayManagerGlobal: java.lang.String TAG> = "DisplayManager";

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_REMOVED> = 3;

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_CHANGED> = 2;

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_ADDED> = 1;

        <android.hardware.display.DisplayManagerGlobal: boolean DEBUG> = 0;

        <android.hardware.display.DisplayManagerGlobal: java.lang.String CACHE_KEY_DISPLAY_INFO_PROPERTY> = "cache_key.display_info";

        return;
    }
}
