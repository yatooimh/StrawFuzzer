public final class android.hardware.display.DisplayManagerInternal$DisplayPowerRequest extends java.lang.Object
{
    public static final int POLICY_BRIGHT;
    public static final int POLICY_DIM;
    public static final int POLICY_DOZE;
    public static final int POLICY_OFF;
    public static final int POLICY_VR;
    public boolean blockScreenOn;
    public boolean boostScreenBrightness;
    public float dozeScreenBrightness;
    public int dozeScreenState;
    public boolean lowPowerMode;
    public int policy;
    public float screenAutoBrightnessAdjustmentOverride;
    public float screenBrightnessOverride;
    public float screenLowPowerBrightnessFactor;
    public boolean useAutoBrightness;
    public boolean useProximitySensor;

    public void <init>()
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy> = 3;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor> = 0;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride> = #NaNF;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness> = 0;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustmentOverride> = #NaNF;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor> = 0.5F;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean blockScreenOn> = 0;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness> = #NaNF;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = 0;

        return;
    }

    public void <init>(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0, r1;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void copyFrom(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>(r1);

        return;
    }

    private boolean floatEquals(float, float)
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0;
        float f0, f1;
        byte $b0;
        boolean $z0, $z1, z2;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl f1;

        if $b0 == 0 goto label2;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public static java.lang.String policyToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "VR";

     label2:
        return "BRIGHT";

     label3:
        return "DIM";

     label4:
        return "DOZE";

     label5:
        return "OFF";
    }

    public void copyFrom(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0, r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        $i0 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy> = $i0;

        $z0 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor> = $z0;

        $f0 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride> = $f0;

        $z1 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness> = $z1;

        $f1 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustmentOverride>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustmentOverride> = $f1;

        $f2 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor> = $f2;

        $z2 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean blockScreenOn>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean blockScreenOn> = $z2;

        $z3 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode> = $z3;

        $z4 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean boostScreenBrightness>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean boostScreenBrightness> = $z4;

        $f3 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness> = $f3;

        $i1 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = $i1;

        return;
    }

    public boolean equals(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0, r1;
        int $i0, $i1, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b2;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        if r1 == null goto label1;

        $i1 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        $i0 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i1 != $i0 goto label1;

        $z1 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        $z0 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        if $z1 != $z0 goto label1;

        $f1 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride>;

        $f0 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride>;

        $z2 = specialinvoke r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean floatEquals(float,float)>($f1, $f0);

        if $z2 == 0 goto label1;

        $z4 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness>;

        $z3 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness>;

        if $z4 != $z3 goto label1;

        $f3 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustmentOverride>;

        $f2 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustmentOverride>;

        $z5 = specialinvoke r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean floatEquals(float,float)>($f3, $f2);

        if $z5 == 0 goto label1;

        $f5 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor>;

        $f4 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor>;

        $b2 = $f5 cmpl $f4;

        if $b2 != 0 goto label1;

        $z7 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean blockScreenOn>;

        $z6 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean blockScreenOn>;

        if $z7 != $z6 goto label1;

        $z9 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode>;

        $z8 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode>;

        if $z9 != $z8 goto label1;

        $z11 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean boostScreenBrightness>;

        $z10 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean boostScreenBrightness>;

        if $z11 != $z10 goto label1;

        $f7 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness>;

        $f6 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness>;

        $z12 = specialinvoke r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean floatEquals(float,float)>($f7, $f6);

        if $z12 == 0 goto label1;

        $i4 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        $i3 = r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        if $i4 != $i3 goto label1;

        z13 = 1;

        goto label2;

     label1:
        z13 = 0;

     label2:
        return z13;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        if $z0 == 0 goto label1;

        $r2 = (android.hardware.display.DisplayManagerInternal$DisplayPowerRequest) r1;

        $z1 = virtualinvoke r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean equals(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>($r2);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public int hashCode()
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        return 0;
    }

    public boolean isBrightOrDim()
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0;
        int i0;
        boolean z0;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        i0 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if i0 == 3 goto label2;

        if i0 != 2 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public boolean isVr()
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0;
        int $i0;
        boolean z0;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        $i0 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i0 != 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public java.lang.String toString()
    {
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1;
        java.lang.String $r4, $r25, $r27;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("policy=");

        $i0 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        $r4 = staticinvoke <android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: java.lang.String policyToString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", useProximitySensor=");

        $z0 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", screenBrightnessOverride=");

        $f0 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", useAutoBrightness=");

        $z1 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", screenAutoBrightnessAdjustmentOverride=");

        $f1 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustmentOverride>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", screenLowPowerBrightnessFactor=");

        $f2 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blockScreenOn=");

        $z2 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean blockScreenOn>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lowPowerMode=");

        $z3 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", boostScreenBrightness=");

        $z4 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean boostScreenBrightness>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dozeScreenBrightness=");

        $f3 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dozeScreenState=");

        $i1 = r0.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        $r25 = staticinvoke <android.view.Display: java.lang.String stateToString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r27;
    }

    public static void <clinit>()
    {
        <android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int POLICY_VR> = 4;

        <android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int POLICY_OFF> = 0;

        <android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int POLICY_DOZE> = 1;

        <android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int POLICY_DIM> = 2;

        <android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int POLICY_BRIGHT> = 3;

        return;
    }
}
