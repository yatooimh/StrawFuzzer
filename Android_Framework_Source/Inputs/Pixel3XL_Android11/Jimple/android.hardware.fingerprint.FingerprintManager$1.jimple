class android.hardware.fingerprint.FingerprintManager$1 extends android.hardware.biometrics.IBiometricServiceLockoutResetCallback$Stub
{
    final android.hardware.fingerprint.FingerprintManager this$0;
    final android.hardware.fingerprint.FingerprintManager$LockoutResetCallback val$callback;
    final android.os.PowerManager val$powerManager;

    void <init>(android.hardware.fingerprint.FingerprintManager, android.os.PowerManager, android.hardware.fingerprint.FingerprintManager$LockoutResetCallback)
    {
        android.hardware.fingerprint.FingerprintManager$1 r0;
        android.hardware.fingerprint.FingerprintManager r1;
        android.os.PowerManager r2;
        android.hardware.fingerprint.FingerprintManager$LockoutResetCallback r3;

        r0 := @this: android.hardware.fingerprint.FingerprintManager$1;

        r1 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        r2 := @parameter1: android.os.PowerManager;

        r3 := @parameter2: android.hardware.fingerprint.FingerprintManager$LockoutResetCallback;

        r0.<android.hardware.fingerprint.FingerprintManager$1: android.hardware.fingerprint.FingerprintManager this$0> = r1;

        r0.<android.hardware.fingerprint.FingerprintManager$1: android.os.PowerManager val$powerManager> = r2;

        r0.<android.hardware.fingerprint.FingerprintManager$1: android.hardware.fingerprint.FingerprintManager$LockoutResetCallback val$callback> = r3;

        specialinvoke r0.<android.hardware.biometrics.IBiometricServiceLockoutResetCallback$Stub: void <init>()>();

        return;
    }

    static void lambda$onLockoutReset$0(android.hardware.fingerprint.FingerprintManager$LockoutResetCallback, android.os.PowerManager$WakeLock)
    {
        android.os.PowerManager$WakeLock r0;
        java.lang.Throwable $r1;
        android.hardware.fingerprint.FingerprintManager$LockoutResetCallback r2;

        r2 := @parameter0: android.hardware.fingerprint.FingerprintManager$LockoutResetCallback;

        r0 := @parameter1: android.os.PowerManager$WakeLock;

     label1:
        virtualinvoke r2.<android.hardware.fingerprint.FingerprintManager$LockoutResetCallback: void onLockoutReset()>();

     label2:
        virtualinvoke r0.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label3:
        $r1 := @caughtexception;

        virtualinvoke r0.<android.os.PowerManager$WakeLock: void release()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onLockoutReset(long, android.os.IRemoteCallback) throws android.os.RemoteException
    {
        android.hardware.fingerprint.FingerprintManager$1 r0;
        long l0;
        android.os.IRemoteCallback r1;
        android.os.PowerManager$WakeLock r2;
        android.os.Handler r3;
        android.hardware.fingerprint._$$Lambda$FingerprintManager$1$4i3tUU8mafgvA9HaB2UPD31L6UY r4;
        android.os.PowerManager $r5;
        android.hardware.fingerprint.FingerprintManager $r6;
        java.lang.Throwable $r7;
        android.hardware.fingerprint.FingerprintManager$LockoutResetCallback r8;

        r0 := @this: android.hardware.fingerprint.FingerprintManager$1;

        l0 := @parameter0: long;

        r1 := @parameter1: android.os.IRemoteCallback;

     label1:
        $r5 = r0.<android.hardware.fingerprint.FingerprintManager$1: android.os.PowerManager val$powerManager>;

        r2 = virtualinvoke $r5.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "lockoutResetCallback");

        virtualinvoke r2.<android.os.PowerManager$WakeLock: void acquire()>();

        $r6 = r0.<android.hardware.fingerprint.FingerprintManager$1: android.hardware.fingerprint.FingerprintManager this$0>;

        r3 = staticinvoke <android.hardware.fingerprint.FingerprintManager: android.os.Handler access$400(android.hardware.fingerprint.FingerprintManager)>($r6);

        r8 = r0.<android.hardware.fingerprint.FingerprintManager$1: android.hardware.fingerprint.FingerprintManager$LockoutResetCallback val$callback>;

        r4 = new android.hardware.fingerprint._$$Lambda$FingerprintManager$1$4i3tUU8mafgvA9HaB2UPD31L6UY;

        specialinvoke r4.<android.hardware.fingerprint._$$Lambda$FingerprintManager$1$4i3tUU8mafgvA9HaB2UPD31L6UY: void <init>(android.hardware.fingerprint.FingerprintManager$LockoutResetCallback,android.os.PowerManager$WakeLock)>(r8, r2);

        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>(r4);

     label2:
        interfaceinvoke r1.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

        return;

     label3:
        $r7 := @caughtexception;

        interfaceinvoke r1.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
