public class android.hardware.fingerprint.FingerprintManager extends java.lang.Object implements android.hardware.biometrics.BiometricAuthenticator, android.hardware.biometrics.BiometricFingerprintConstants
{
    private static final boolean DEBUG;
    private static final int MSG_ACQUIRED;
    private static final int MSG_AUTHENTICATION_FAILED;
    private static final int MSG_AUTHENTICATION_SUCCEEDED;
    private static final int MSG_ENROLL_RESULT;
    private static final int MSG_ENUMERATED;
    private static final int MSG_ERROR;
    private static final int MSG_REMOVED;
    private static final java.lang.String TAG;
    private android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback;
    private android.content.Context mContext;
    private android.hardware.fingerprint.FingerprintManager$CryptoObject mCryptoObject;
    private android.hardware.fingerprint.FingerprintManager$EnrollmentCallback mEnrollmentCallback;
    private android.hardware.fingerprint.FingerprintManager$EnumerateCallback mEnumerateCallback;
    private android.os.Handler mHandler;
    private android.hardware.fingerprint.FingerprintManager$RemovalCallback mRemovalCallback;
    private android.hardware.fingerprint.Fingerprint mRemovalFingerprint;
    private android.hardware.fingerprint.IFingerprintService mService;
    private android.hardware.fingerprint.IFingerprintServiceReceiver mServiceReceiver;
    private android.os.IBinder mToken;

    public void <init>(android.content.Context, android.hardware.fingerprint.IFingerprintService)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.content.Context r1;
        android.hardware.fingerprint.IFingerprintService r2;
        android.os.Binder $r3;
        android.hardware.fingerprint.FingerprintManager$2 $r4;
        android.hardware.fingerprint.FingerprintManager$MyHandler $r5;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.fingerprint.IFingerprintService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.os.Binder;

        specialinvoke $r3.<android.os.Binder: void <init>()>();

        r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken> = $r3;

        $r4 = new android.hardware.fingerprint.FingerprintManager$2;

        specialinvoke $r4.<android.hardware.fingerprint.FingerprintManager$2: void <init>(android.hardware.fingerprint.FingerprintManager)>(r0);

        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintServiceReceiver mServiceReceiver> = $r4;

        r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext> = r1;

        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService> = r2;

        if r2 != null goto label1;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintManager", "FingerprintManagerService was null");

     label1:
        $r5 = new android.hardware.fingerprint.FingerprintManager$MyHandler;

        specialinvoke $r5.<android.hardware.fingerprint.FingerprintManager$MyHandler: void <init>(android.hardware.fingerprint.FingerprintManager,android.content.Context,android.hardware.fingerprint.FingerprintManager$1)>(r0, r1, null);

        r0.<android.hardware.fingerprint.FingerprintManager: android.os.Handler mHandler> = $r5;

        return;
    }

    static void access$000(android.hardware.fingerprint.FingerprintManager)
    {
        android.hardware.fingerprint.FingerprintManager r0;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void cancelEnrollment()>();

        return;
    }

    static void access$100(android.hardware.fingerprint.FingerprintManager, android.hardware.biometrics.CryptoObject)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.hardware.biometrics.CryptoObject r1;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter1: android.hardware.biometrics.CryptoObject;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void cancelAuthentication(android.hardware.biometrics.CryptoObject)>(r1);

        return;
    }

    static void access$1000(android.hardware.fingerprint.FingerprintManager, android.hardware.fingerprint.Fingerprint, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.hardware.fingerprint.Fingerprint r1;
        int i0;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter1: android.hardware.fingerprint.Fingerprint;

        i0 := @parameter2: int;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void sendRemovedResult(android.hardware.fingerprint.Fingerprint,int)>(r1, i0);

        return;
    }

    static void access$1100(android.hardware.fingerprint.FingerprintManager, long, int, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        long l0;
        int i1, i2;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void sendEnumeratedResult(long,int,int)>(l0, i1, i2);

        return;
    }

    static android.os.Handler access$400(android.hardware.fingerprint.FingerprintManager)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$500(android.hardware.fingerprint.FingerprintManager, android.hardware.fingerprint.Fingerprint, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.hardware.fingerprint.Fingerprint r1;
        int i0;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter1: android.hardware.fingerprint.Fingerprint;

        i0 := @parameter2: int;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void sendEnrollResult(android.hardware.fingerprint.Fingerprint,int)>(r1, i0);

        return;
    }

    static void access$600(android.hardware.fingerprint.FingerprintManager, long, int, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        long l0;
        int i1, i2;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void sendAcquiredResult(long,int,int)>(l0, i1, i2);

        return;
    }

    static void access$700(android.hardware.fingerprint.FingerprintManager, android.hardware.fingerprint.Fingerprint, int, boolean)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.hardware.fingerprint.Fingerprint r1;
        int i0;
        boolean z0;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter1: android.hardware.fingerprint.Fingerprint;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void sendAuthenticatedSucceeded(android.hardware.fingerprint.Fingerprint,int,boolean)>(r1, i0, z0);

        return;
    }

    static void access$800(android.hardware.fingerprint.FingerprintManager)
    {
        android.hardware.fingerprint.FingerprintManager r0;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void sendAuthenticatedFailed()>();

        return;
    }

    static void access$900(android.hardware.fingerprint.FingerprintManager, long, int, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        long l0;
        int i1, i2;

        r0 := @parameter0: android.hardware.fingerprint.FingerprintManager;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void sendErrorResult(long,int,int)>(l0, i1, i2);

        return;
    }

    private void cancelAuthentication(android.hardware.biometrics.CryptoObject)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.content.Context $r1;
        android.os.IBinder $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.hardware.biometrics.CryptoObject r6;
        android.hardware.fingerprint.IFingerprintService r7;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r6 := @parameter0: android.hardware.biometrics.CryptoObject;

        r7 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r7 == null goto label4;

     label1:
        $r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r7.<android.hardware.fingerprint.IFingerprintService: void cancelAuthentication(android.os.IBinder,java.lang.String)>($r2, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void cancelEnrollment()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.fingerprint.IFingerprintService r4;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r4 == null goto label4;

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        interfaceinvoke r4.<android.hardware.fingerprint.IFingerprintService: void cancelEnrollment(android.os.IBinder)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.lang.String getAcquiredString(android.content.Context, int, int)
    {
        int i0, i1, $i2;
        android.content.res.Resources $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        android.content.Context r13;
        java.lang.String[] r14;

        r13 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        tableswitch(i0)
        {
            case 0: goto label10;
            case 1: goto label09;
            case 2: goto label08;
            case 3: goto label07;
            case 4: goto label06;
            case 5: goto label05;
            case 6: goto label03;
            case 7: goto label02;
            default: goto label01;
        };

     label01:
        goto label11;

     label02:
        return null;

     label03:
        $r0 = virtualinvoke r13.<android.content.Context: android.content.res.Resources getResources()>();

        r14 = virtualinvoke $r0.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236103);

        $i2 = lengthof r14;

        if i1 >= $i2 goto label04;

        $r7 = r14[i1];

        return $r7;

     label04:
        goto label11;

     label05:
        $r8 = virtualinvoke r13.<android.content.Context: java.lang.String getString(int)>(17040199);

        return $r8;

     label06:
        $r9 = virtualinvoke r13.<android.content.Context: java.lang.String getString(int)>(17040200);

        return $r9;

     label07:
        $r10 = virtualinvoke r13.<android.content.Context: java.lang.String getString(int)>(17040196);

        return $r10;

     label08:
        $r11 = virtualinvoke r13.<android.content.Context: java.lang.String getString(int)>(17040197);

        return $r11;

     label09:
        $r12 = virtualinvoke r13.<android.content.Context: java.lang.String getString(int)>(17040198);

        return $r12;

     label10:
        return null;

     label11:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid acquired message: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", $r6);

        return null;
    }

    private int getCurrentUserId()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        android.app.IActivityManager $r2;
        android.content.pm.UserInfo $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        i0 = $r3.<android.content.pm.UserInfo: int id>;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.lang.String getErrorString(android.content.Context, int, int)
    {
        int i0, i1, $i2;
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        android.content.res.Resources $r5;
        java.lang.StringBuilder $r6;
        android.content.Context r19;
        java.lang.String[] r20;

        r19 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        tableswitch(i0)
        {
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label11;
            case 4: goto label10;
            case 5: goto label09;
            case 6: goto label01;
            case 7: goto label08;
            case 8: goto label07;
            case 9: goto label06;
            case 10: goto label05;
            case 11: goto label04;
            case 12: goto label03;
            case 13: goto label01;
            case 14: goto label01;
            case 15: goto label02;
            default: goto label01;
        };

     label01:
        goto label14;

     label02:
        $r0 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040209);

        return $r0;

     label03:
        $r1 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040204);

        return $r1;

     label04:
        $r2 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040207);

        return $r2;

     label05:
        $r3 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040212);

        return $r3;

     label06:
        $r4 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040206);

        return $r4;

     label07:
        $r5 = virtualinvoke r19.<android.content.Context: android.content.res.Resources getResources()>();

        r20 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236104);

        $i2 = lengthof r20;

        if i1 >= $i2 goto label14;

        $r12 = r20[i1];

        return $r12;

     label08:
        $r13 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040205);

        return $r13;

     label09:
        $r14 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040202);

        return $r14;

     label10:
        $r15 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040208);

        return $r15;

     label11:
        $r16 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040210);

        return $r16;

     label12:
        $r17 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040211);

        return $r17;

     label13:
        $r18 = virtualinvoke r19.<android.content.Context: java.lang.String getString(int)>(17040203);

        return $r18;

     label14:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid error message: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", $r11);

        return null;
    }

    private void sendAcquiredResult(long, int, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        long l0;
        int i1, i2, i3;
        android.content.Context $r1;
        android.hardware.fingerprint.FingerprintManager$AuthenticationCallback r2, r5;
        java.lang.String r3;
        android.hardware.fingerprint.FingerprintManager$EnrollmentCallback r4;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationAcquired(int)>(i1);

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        r3 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getAcquiredString(android.content.Context,int,int)>($r1, i1, i2);

        if r3 != null goto label2;

        return;

     label2:
        if i1 != 6 goto label3;

        i3 = i2 + 1000;

        goto label4;

     label3:
        i3 = i1;

     label4:
        r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$EnrollmentCallback mEnrollmentCallback>;

        if r4 == null goto label5;

        virtualinvoke r4.<android.hardware.fingerprint.FingerprintManager$EnrollmentCallback: void onEnrollmentHelp(int,java.lang.CharSequence)>(i3, r3);

        goto label6;

     label5:
        r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback>;

        if r5 == null goto label6;

        if i1 == 7 goto label6;

        virtualinvoke r5.<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationHelp(int,java.lang.CharSequence)>(i3, r3);

     label6:
        return;
    }

    private void sendAuthenticatedFailed()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.hardware.fingerprint.FingerprintManager$AuthenticationCallback r1;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationFailed()>();

     label1:
        return;
    }

    private void sendAuthenticatedSucceeded(android.hardware.fingerprint.Fingerprint, int, boolean)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        boolean z0;
        android.hardware.fingerprint.FingerprintManager$AuthenticationCallback $r1, $r4;
        android.hardware.fingerprint.FingerprintManager$AuthenticationResult $r2;
        android.hardware.fingerprint.FingerprintManager$CryptoObject $r3;
        android.hardware.fingerprint.Fingerprint r5;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r5 := @parameter0: android.hardware.fingerprint.Fingerprint;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback>;

        if $r1 == null goto label1;

        $r2 = new android.hardware.fingerprint.FingerprintManager$AuthenticationResult;

        $r3 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$CryptoObject mCryptoObject>;

        specialinvoke $r2.<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: void <init>(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.hardware.fingerprint.Fingerprint,int,boolean)>($r3, r5, i0, z0);

        $r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback>;

        virtualinvoke $r4.<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult)>($r2);

     label1:
        return;
    }

    private void sendEnrollResult(android.hardware.fingerprint.Fingerprint, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        android.hardware.fingerprint.Fingerprint r1;
        android.hardware.fingerprint.FingerprintManager$EnrollmentCallback r2;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter0: android.hardware.fingerprint.Fingerprint;

        i0 := @parameter1: int;

        r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$EnrollmentCallback mEnrollmentCallback>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.hardware.fingerprint.FingerprintManager$EnrollmentCallback: void onEnrollmentProgress(int)>(i0);

     label1:
        return;
    }

    private void sendEnumeratedResult(long, int, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        long l0;
        int i1, i2;
        android.hardware.fingerprint.FingerprintManager$EnumerateCallback r1;
        android.hardware.fingerprint.Fingerprint $r2;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$EnumerateCallback mEnumerateCallback>;

        if r1 == null goto label1;

        $r2 = new android.hardware.fingerprint.Fingerprint;

        specialinvoke $r2.<android.hardware.fingerprint.Fingerprint: void <init>(java.lang.CharSequence,int,int,long)>(null, i2, i1, l0);

        virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager$EnumerateCallback: void onEnumerate(android.hardware.fingerprint.Fingerprint)>($r2);

     label1:
        return;
    }

    private void sendErrorResult(long, int, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        long l0;
        int i1, i2, i3;
        android.content.Context $r1, $r3, $r6, $r8;
        java.lang.String $r2, $r5, $r7, $r9;
        android.hardware.fingerprint.Fingerprint $r4;
        android.hardware.fingerprint.FingerprintManager$EnrollmentCallback r10;
        android.hardware.fingerprint.FingerprintManager$AuthenticationCallback r11;
        android.hardware.fingerprint.FingerprintManager$RemovalCallback r12;
        android.hardware.fingerprint.FingerprintManager$EnumerateCallback r13;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 != 8 goto label1;

        i3 = i2 + 1000;

        goto label2;

     label1:
        i3 = i1;

     label2:
        r10 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$EnrollmentCallback mEnrollmentCallback>;

        if r10 == null goto label3;

        $r8 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r9 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r8, i1, i2);

        virtualinvoke r10.<android.hardware.fingerprint.FingerprintManager$EnrollmentCallback: void onEnrollmentError(int,java.lang.CharSequence)>(i3, $r9);

        goto label6;

     label3:
        r11 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback>;

        if r11 == null goto label4;

        $r6 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r7 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r6, i1, i2);

        virtualinvoke r11.<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationError(int,java.lang.CharSequence)>(i3, $r7);

        goto label6;

     label4:
        r12 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$RemovalCallback mRemovalCallback>;

        if r12 == null goto label5;

        $r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.Fingerprint mRemovalFingerprint>;

        $r3 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r5 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r3, i1, i2);

        virtualinvoke r12.<android.hardware.fingerprint.FingerprintManager$RemovalCallback: void onRemovalError(android.hardware.fingerprint.Fingerprint,int,java.lang.CharSequence)>($r4, i3, $r5);

        goto label6;

     label5:
        r13 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$EnumerateCallback mEnumerateCallback>;

        if r13 == null goto label6;

        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r2 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r1, i1, i2);

        virtualinvoke r13.<android.hardware.fingerprint.FingerprintManager$EnumerateCallback: void onEnumerateError(int,java.lang.CharSequence)>(i3, $r2);

     label6:
        return;
    }

    private void sendRemovedResult(android.hardware.fingerprint.Fingerprint, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0, i4, i5, i6, i7;
        android.hardware.fingerprint.FingerprintManager$RemovalCallback $r1, $r3;
        android.hardware.fingerprint.Fingerprint $r2, r16, $r18;
        java.lang.StringBuilder $r4, $r10;
        java.lang.String $r9, $r15;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r16 := @parameter0: android.hardware.fingerprint.Fingerprint;

        i0 := @parameter1: int;

        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$RemovalCallback mRemovalCallback>;

        if $r1 != null goto label1;

        return;

     label1:
        if r16 != null goto label2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("FingerprintManager", "Received MSG_REMOVED, but fingerprint is null");

        return;

     label2:
        i4 = virtualinvoke r16.<android.hardware.fingerprint.Fingerprint: int getBiometricId()>();

        $r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.Fingerprint mRemovalFingerprint>;

        i5 = virtualinvoke $r2.<android.hardware.fingerprint.Fingerprint: int getBiometricId()>();

        if i5 == 0 goto label3;

        if i4 == 0 goto label3;

        if i4 == i5 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finger id didn\'t match: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", $r15);

        return;

     label3:
        i6 = virtualinvoke r16.<android.hardware.fingerprint.Fingerprint: int getGroupId()>();

        $r18 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.Fingerprint mRemovalFingerprint>;

        i7 = virtualinvoke $r18.<android.hardware.fingerprint.Fingerprint: int getGroupId()>();

        if i6 == i7 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group id didn\'t match: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", $r9);

        return;

     label4:
        $r3 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$RemovalCallback mRemovalCallback>;

        virtualinvoke $r3.<android.hardware.fingerprint.FingerprintManager$RemovalCallback: void onRemovalSucceeded(android.hardware.fingerprint.Fingerprint,int)>(r16, i0);

        return;
    }

    private void useHandler(android.os.Handler)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.os.Handler r1, $r2;
        android.os.Looper $r3, $r5, $r8, $r10;
        android.content.Context $r4, $r7;
        android.hardware.fingerprint.FingerprintManager$MyHandler $r6, $r9;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter0: android.os.Handler;

        if r1 == null goto label1;

        $r9 = new android.hardware.fingerprint.FingerprintManager$MyHandler;

        $r10 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r9.<android.hardware.fingerprint.FingerprintManager$MyHandler: void <init>(android.hardware.fingerprint.FingerprintManager,android.os.Looper,android.hardware.fingerprint.FingerprintManager$1)>(r0, $r10, null);

        r0.<android.hardware.fingerprint.FingerprintManager: android.os.Handler mHandler> = $r9;

        goto label2;

     label1:
        $r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        $r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.os.Looper getMainLooper()>();

        if $r3 == $r5 goto label2;

        $r6 = new android.hardware.fingerprint.FingerprintManager$MyHandler;

        $r7 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<android.hardware.fingerprint.FingerprintManager$MyHandler: void <init>(android.hardware.fingerprint.FingerprintManager,android.os.Looper,android.hardware.fingerprint.FingerprintManager$1)>(r0, $r8, null);

        r0.<android.hardware.fingerprint.FingerprintManager: android.os.Handler mHandler> = $r6;

     label2:
        return;
    }

    public void addLockoutResetCallback(android.hardware.fingerprint.FingerprintManager$LockoutResetCallback)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.os.PowerManager r1;
        android.hardware.fingerprint.IFingerprintService r2, $r4;
        android.hardware.fingerprint.FingerprintManager$1 r3;
        android.content.Context $r5;
        java.lang.Object $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.hardware.fingerprint.FingerprintManager$LockoutResetCallback r9;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r9 := @parameter0: android.hardware.fingerprint.FingerprintManager$LockoutResetCallback;

        $r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        r1 = (android.os.PowerManager) $r6;

        r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        r3 = new android.hardware.fingerprint.FingerprintManager$1;

        specialinvoke r3.<android.hardware.fingerprint.FingerprintManager$1: void <init>(android.hardware.fingerprint.FingerprintManager,android.os.PowerManager,android.hardware.fingerprint.FingerprintManager$LockoutResetCallback)>(r0, r1, r9);

        interfaceinvoke r2.<android.hardware.fingerprint.IFingerprintService: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback)>(r3);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", "addLockoutResetCallback(): Service not connected!");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$AuthenticationCallback, android.os.Handler)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.hardware.fingerprint.FingerprintManager$CryptoObject r1;
        android.os.CancellationSignal r2;
        int i0, $i1;
        android.hardware.fingerprint.FingerprintManager$AuthenticationCallback r3;
        android.os.Handler r4;
        android.content.Context $r5;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter0: android.hardware.fingerprint.FingerprintManager$CryptoObject;

        r2 := @parameter1: android.os.CancellationSignal;

        i0 := @parameter2: int;

        r3 := @parameter3: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback;

        r4 := @parameter4: android.os.Handler;

        $r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r5.<android.content.Context: int getUserId()>();

        virtualinvoke r0.<android.hardware.fingerprint.FingerprintManager: void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler,int)>(r1, r2, i0, r3, r4, $i1);

        return;
    }

    public void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$AuthenticationCallback, android.os.Handler, int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.os.CancellationSignal r1;
        int i0, i1;
        android.hardware.fingerprint.FingerprintManager$AuthenticationCallback r2;
        android.os.Handler r3;
        java.lang.IllegalArgumentException $r4;
        android.hardware.fingerprint.IFingerprintService $r5, $r7;
        android.content.Context $r6, $r13;
        android.os.IBinder $r8;
        android.hardware.fingerprint.IFingerprintServiceReceiver $r9;
        java.lang.String $r10, $r14;
        boolean $z0;
        android.hardware.fingerprint.FingerprintManager$OnAuthenticationCancelListener $r11;
        android.os.RemoteException $r12;
        android.hardware.fingerprint.FingerprintManager$CryptoObject r15;
        long l4;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r15 := @parameter0: android.hardware.fingerprint.FingerprintManager$CryptoObject;

        r1 := @parameter1: android.os.CancellationSignal;

        i0 := @parameter2: int;

        r2 := @parameter3: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback;

        r3 := @parameter4: android.os.Handler;

        i1 := @parameter5: int;

        if r2 == null goto label12;

        if r1 == null goto label02;

        $z0 = virtualinvoke r1.<android.os.CancellationSignal: boolean isCanceled()>();

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", "authentication already canceled");

        return;

     label01:
        $r11 = new android.hardware.fingerprint.FingerprintManager$OnAuthenticationCancelListener;

        specialinvoke $r11.<android.hardware.fingerprint.FingerprintManager$OnAuthenticationCancelListener: void <init>(android.hardware.fingerprint.FingerprintManager,android.hardware.biometrics.CryptoObject)>(r0, r15);

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>($r11);

     label02:
        $r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if $r5 == null goto label11;

     label03:
        specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: void useHandler(android.os.Handler)>(r3);

        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$AuthenticationCallback mAuthenticationCallback> = r2;

        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$CryptoObject mCryptoObject> = r15;

     label04:
        if r15 == null goto label07;

     label05:
        l4 = virtualinvoke r15.<android.hardware.fingerprint.FingerprintManager$CryptoObject: long getOpId()>();

     label06:
        goto label08;

     label07:
        l4 = 0L;

     label08:
        $r7 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        $r8 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $r9 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        $r6 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r6.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r7.<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>($r8, l4, i1, $r9, i0, $r10);

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception while authenticating: ", $r12);

        if r2 == null goto label11;

        $r13 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r14 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r13, 1, 0);

        virtualinvoke r2.<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationError(int,java.lang.CharSequence)>(1, $r14);

        goto label11;

     label11:
        return;

     label12:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must supply an authentication callback");

        throw $r4;

        catch android.os.RemoteException from label03 to label04 with label10;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public void enroll(byte[], android.os.CancellationSignal, int, int, android.hardware.fingerprint.FingerprintManager$EnrollmentCallback)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0, i1, i4;
        android.hardware.fingerprint.FingerprintManager$EnrollmentCallback r1;
        java.lang.IllegalArgumentException $r2;
        android.content.Context $r3, $r9;
        android.os.IBinder $r4;
        android.hardware.fingerprint.IFingerprintServiceReceiver $r5;
        java.lang.String $r6, $r10;
        boolean $z0;
        android.hardware.fingerprint.FingerprintManager$OnEnrollCancelListener $r7;
        android.os.RemoteException $r8;
        byte[] r11;
        android.os.CancellationSignal r12;
        android.hardware.fingerprint.IFingerprintService r13;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r11 := @parameter0: byte[];

        r12 := @parameter1: android.os.CancellationSignal;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: android.hardware.fingerprint.FingerprintManager$EnrollmentCallback;

        i4 = i1;

        if i1 != -2 goto label1;

        i4 = specialinvoke r0.<android.hardware.fingerprint.FingerprintManager: int getCurrentUserId()>();

     label1:
        if r1 == null goto label8;

        if r12 == null goto label3;

        $z0 = virtualinvoke r12.<android.os.CancellationSignal: boolean isCanceled()>();

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", "enrollment already canceled");

        return;

     label2:
        $r7 = new android.hardware.fingerprint.FingerprintManager$OnEnrollCancelListener;

        specialinvoke $r7.<android.hardware.fingerprint.FingerprintManager$OnEnrollCancelListener: void <init>(android.hardware.fingerprint.FingerprintManager,android.hardware.fingerprint.FingerprintManager$1)>(r0, null);

        virtualinvoke r12.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>($r7);

     label3:
        r13 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r13 == null goto label7;

     label4:
        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$EnrollmentCallback mEnrollmentCallback> = r1;

        $r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        $r3 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r13.<android.hardware.fingerprint.IFingerprintService: void enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>($r4, r11, i4, $r5, i0, $r6);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception in enroll: ", $r8);

        if r1 == null goto label7;

        $r9 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r10 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r9, 1, 0);

        virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager$EnrollmentCallback: void onEnrollmentError(int,java.lang.CharSequence)>(1, $r10);

     label7:
        return;

     label8:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must supply an enrollment callback");

        throw $r2;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void enumerate(int, android.hardware.fingerprint.FingerprintManager$EnumerateCallback)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        android.hardware.fingerprint.FingerprintManager$EnumerateCallback r1;
        android.hardware.fingerprint.IFingerprintServiceReceiver $r2;
        android.os.IBinder $r3;
        android.os.RemoteException $r4;
        android.content.Context $r5;
        java.lang.String $r6;
        android.hardware.fingerprint.IFingerprintService r7;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.fingerprint.FingerprintManager$EnumerateCallback;

        r7 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r7 == null goto label4;

     label1:
        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$EnumerateCallback mEnumerateCallback> = r1;

        $r3 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        interfaceinvoke r7.<android.hardware.fingerprint.IFingerprintService: void enumerate(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>($r3, i0, $r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception in enumerate: ", $r4);

        if r1 == null goto label4;

        $r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r6 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r5, 1, 0);

        virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager$EnumerateCallback: void onEnumerateError(int,java.lang.CharSequence)>(1, $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getEnrolledFingerprints()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.content.Context $r1;
        int $i0;
        java.util.List $r2;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = virtualinvoke r0.<android.hardware.fingerprint.FingerprintManager: java.util.List getEnrolledFingerprints(int)>($i0);

        return $r2;
    }

    public java.util.List getEnrolledFingerprints(int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.fingerprint.IFingerprintService r5;
        java.util.List r6;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r5 == null goto label4;

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r5.<android.hardware.fingerprint.IFingerprintService: java.util.List getEnrolledFingerprints(int,java.lang.String)>(i0, $r2);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasEnrolledFingerprints()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        boolean z0;
        android.content.Context $r1, $r2;
        int $i0;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.hardware.fingerprint.IFingerprintService r6;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r6 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r6 == null goto label4;

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke r6.<android.hardware.fingerprint.IFingerprintService: boolean hasEnrolledFingerprints(int,java.lang.String)>($i0, $r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasEnrolledFingerprints(int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.fingerprint.IFingerprintService r5;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r5 == null goto label4;

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke r5.<android.hardware.fingerprint.IFingerprintService: boolean hasEnrolledFingerprints(int,java.lang.String)>(i0, $r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasEnrolledTemplates()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        boolean $z0;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        $z0 = virtualinvoke r0.<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>();

        return $z0;
    }

    public boolean hasEnrolledTemplates(int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        boolean $z0;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints(int)>(i0);

        return $z0;
    }

    public boolean isHardwareDetected()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.fingerprint.IFingerprintService r5;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r5 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r5 == null goto label4;

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke r5.<android.hardware.fingerprint.IFingerprintService: boolean isHardwareDetected(java.lang.String)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", "isFingerprintHardwareDetected(): Service not connected!");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int postEnroll()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int i0;
        android.hardware.fingerprint.IFingerprintService r4;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        i0 = 0;

        r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r4 == null goto label4;

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        i0 = interfaceinvoke r4.<android.hardware.fingerprint.IFingerprintService: int postEnroll(android.os.IBinder)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return i0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long preEnroll()
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        long l0;
        android.hardware.fingerprint.IFingerprintService r4;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        l0 = 0L;

        r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r4 == null goto label4;

     label1:
        $r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        l0 = interfaceinvoke r4.<android.hardware.fingerprint.IFingerprintService: long preEnroll(android.os.IBinder)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        return l0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void remove(android.hardware.fingerprint.Fingerprint, int, android.hardware.fingerprint.FingerprintManager$RemovalCallback)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        android.hardware.fingerprint.Fingerprint r1;
        int i0, $i1, $i2;
        android.hardware.fingerprint.FingerprintManager$RemovalCallback r2;
        android.os.IBinder $r3;
        android.hardware.fingerprint.IFingerprintServiceReceiver $r4;
        android.os.RemoteException $r5;
        android.content.Context $r6;
        java.lang.String $r7;
        android.hardware.fingerprint.IFingerprintService r8;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        r1 := @parameter0: android.hardware.fingerprint.Fingerprint;

        i0 := @parameter1: int;

        r2 := @parameter2: android.hardware.fingerprint.FingerprintManager$RemovalCallback;

        r8 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r8 == null goto label4;

     label1:
        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.FingerprintManager$RemovalCallback mRemovalCallback> = r2;

        r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.Fingerprint mRemovalFingerprint> = r1;

        $r3 = r0.<android.hardware.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $i1 = virtualinvoke r1.<android.hardware.fingerprint.Fingerprint: int getBiometricId()>();

        $i2 = virtualinvoke r1.<android.hardware.fingerprint.Fingerprint: int getGroupId()>();

        $r4 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        interfaceinvoke r8.<android.hardware.fingerprint.IFingerprintService: void remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>($r3, $i1, $i2, i0, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception in remove: ", $r5);

        if r2 == null goto label4;

        $r6 = r0.<android.hardware.fingerprint.FingerprintManager: android.content.Context mContext>;

        $r7 = staticinvoke <android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)>($r6, 1, 0);

        virtualinvoke r2.<android.hardware.fingerprint.FingerprintManager$RemovalCallback: void onRemovalError(android.hardware.fingerprint.Fingerprint,int,java.lang.CharSequence)>(r1, 1, $r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void rename(int, int, java.lang.String)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0, i1;
        android.hardware.fingerprint.IFingerprintService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        r1 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.hardware.fingerprint.IFingerprintService: void rename(int,int,java.lang.String)>(i0, i1, r4);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintManager", "rename(): Service not connected!");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActiveUser(int)
    {
        android.hardware.fingerprint.FingerprintManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.hardware.fingerprint.IFingerprintService r3;

        r0 := @this: android.hardware.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        r3 = r0.<android.hardware.fingerprint.FingerprintManager: android.hardware.fingerprint.IFingerprintService mService>;

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.hardware.fingerprint.IFingerprintService: void setActiveUser(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.fingerprint.FingerprintManager: java.lang.String TAG> = "FingerprintManager";

        <android.hardware.fingerprint.FingerprintManager: int MSG_REMOVED> = 105;

        <android.hardware.fingerprint.FingerprintManager: int MSG_ERROR> = 104;

        <android.hardware.fingerprint.FingerprintManager: int MSG_ENUMERATED> = 106;

        <android.hardware.fingerprint.FingerprintManager: int MSG_ENROLL_RESULT> = 100;

        <android.hardware.fingerprint.FingerprintManager: int MSG_AUTHENTICATION_SUCCEEDED> = 102;

        <android.hardware.fingerprint.FingerprintManager: int MSG_AUTHENTICATION_FAILED> = 103;

        <android.hardware.fingerprint.FingerprintManager: int MSG_ACQUIRED> = 101;

        <android.hardware.fingerprint.FingerprintManager: boolean DEBUG> = 1;

        return;
    }
}
