public final class android.hardware.gnss.V1_0.IGnssMeasurementCallback$GnssAccumulatedDeltaRangeState extends java.lang.Object
{
    public static final short ADR_STATE_CYCLE_SLIP;
    public static final short ADR_STATE_RESET;
    public static final short ADR_STATE_UNKNOWN;
    public static final short ADR_STATE_VALID;

    public void <init>()
    {
        android.hardware.gnss.V1_0.IGnssMeasurementCallback$GnssAccumulatedDeltaRangeState r0;

        r0 := @this: android.hardware.gnss.V1_0.IGnssMeasurementCallback$GnssAccumulatedDeltaRangeState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.lang.String dumpBitfield(short)
    {
        short s0, $s1, $s2, $s3, $s4, $s5, $s7, $s8, s9, s10, s11;
        java.util.ArrayList $r2;
        java.lang.String $r3, $r6, $r8;
        java.lang.StringBuilder $r4;
        int $i6;
        boolean $z5;

        s0 := @parameter0: short;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        s9 = 0;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("ADR_STATE_UNKNOWN");

        $s1 = s0 & 1;

        if $s1 != 1 goto label1;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("ADR_STATE_VALID");

        $z5 = 0 | 1;

        s9 = (short) $z5;

     label1:
        s10 = s9;

        $s2 = s0 & 2;

        if $s2 != 2 goto label2;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("ADR_STATE_RESET");

        $s8 = s9 | 2;

        s10 = (short) $s8;

     label2:
        s11 = s10;

        $s3 = s0 & 4;

        if $s3 != 4 goto label3;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("ADR_STATE_CYCLE_SLIP");

        $s7 = s10 | 4;

        s11 = (short) $s7;

     label3:
        if s0 == s11 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $s4 = s11 & s0;

        $s5 = (short) $s4;

        $i6 = staticinvoke <java.lang.Short: int toUnsignedInt(short)>($s5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label4:
        $r3 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" | ", $r2);

        return $r3;
    }

    public static final java.lang.String toString(short)
    {
        short s0;
        java.lang.StringBuilder $r1;
        int $i1;
        java.lang.String $r3, $r5;

        s0 := @parameter0: short;

        if s0 != 0 goto label1;

        return "ADR_STATE_UNKNOWN";

     label1:
        if s0 != 1 goto label2;

        return "ADR_STATE_VALID";

     label2:
        if s0 != 2 goto label3;

        return "ADR_STATE_RESET";

     label3:
        if s0 != 4 goto label4;

        return "ADR_STATE_CYCLE_SLIP";

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $i1 = staticinvoke <java.lang.Short: int toUnsignedInt(short)>(s0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <android.hardware.gnss.V1_0.IGnssMeasurementCallback$GnssAccumulatedDeltaRangeState: short ADR_STATE_VALID> = 1;

        <android.hardware.gnss.V1_0.IGnssMeasurementCallback$GnssAccumulatedDeltaRangeState: short ADR_STATE_UNKNOWN> = 0;

        <android.hardware.gnss.V1_0.IGnssMeasurementCallback$GnssAccumulatedDeltaRangeState: short ADR_STATE_RESET> = 2;

        <android.hardware.gnss.V1_0.IGnssMeasurementCallback$GnssAccumulatedDeltaRangeState: short ADR_STATE_CYCLE_SLIP> = 4;

        return;
    }
}
