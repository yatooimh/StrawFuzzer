public final class android.hardware.hdmi.HdmiControlManager extends java.lang.Object
{
    public static final java.lang.String ACTION_OSD_MESSAGE;
    public static final int AVR_VOLUME_MUTED;
    public static final int CLEAR_TIMER_STATUS_CEC_DISABLE;
    public static final int CLEAR_TIMER_STATUS_CHECK_RECORDER_CONNECTION;
    public static final int CLEAR_TIMER_STATUS_FAIL_TO_CLEAR_SELECTED_SOURCE;
    public static final int CLEAR_TIMER_STATUS_TIMER_CLEARED;
    public static final int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_INFO_AVAILABLE;
    public static final int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_MATCHING;
    public static final int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_RECORDING;
    public static final int CONTROL_STATE_CHANGED_REASON_SETTING;
    public static final int CONTROL_STATE_CHANGED_REASON_STANDBY;
    public static final int CONTROL_STATE_CHANGED_REASON_START;
    public static final int CONTROL_STATE_CHANGED_REASON_WAKEUP;
    public static final int DEVICE_EVENT_ADD_DEVICE;
    public static final int DEVICE_EVENT_REMOVE_DEVICE;
    public static final int DEVICE_EVENT_UPDATE_DEVICE;
    public static final java.lang.String EXTRA_MESSAGE_EXTRA_PARAM1;
    public static final java.lang.String EXTRA_MESSAGE_ID;
    private static final int INVALID_PHYSICAL_ADDRESS;
    public static final int ONE_TOUCH_RECORD_ALREADY_RECORDING;
    public static final int ONE_TOUCH_RECORD_CEC_DISABLED;
    public static final int ONE_TOUCH_RECORD_CHECK_RECORDER_CONNECTION;
    public static final int ONE_TOUCH_RECORD_DISALLOW_TO_COPY;
    public static final int ONE_TOUCH_RECORD_DISALLOW_TO_FUTHER_COPIES;
    public static final int ONE_TOUCH_RECORD_FAIL_TO_RECORD_DISPLAYED_SCREEN;
    public static final int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PHYSICAL_ADDRESS;
    public static final int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PLUG_NUMBER;
    public static final int ONE_TOUCH_RECORD_MEDIA_PROBLEM;
    public static final int ONE_TOUCH_RECORD_MEDIA_PROTECTED;
    public static final int ONE_TOUCH_RECORD_NOT_ENOUGH_SPACE;
    public static final int ONE_TOUCH_RECORD_NO_MEDIA;
    public static final int ONE_TOUCH_RECORD_NO_OR_INSUFFICIENT_CA_ENTITLEMENTS;
    public static final int ONE_TOUCH_RECORD_NO_SOURCE_SIGNAL;
    public static final int ONE_TOUCH_RECORD_OTHER_REASON;
    public static final int ONE_TOUCH_RECORD_PARENT_LOCK_ON;
    public static final int ONE_TOUCH_RECORD_PLAYING;
    public static final int ONE_TOUCH_RECORD_PREVIOUS_RECORDING_IN_PROGRESS;
    public static final int ONE_TOUCH_RECORD_RECORDING_ALREADY_TERMINATED;
    public static final int ONE_TOUCH_RECORD_RECORDING_ANALOGUE_SERVICE;
    public static final int ONE_TOUCH_RECORD_RECORDING_CURRENTLY_SELECTED_SOURCE;
    public static final int ONE_TOUCH_RECORD_RECORDING_DIGITAL_SERVICE;
    public static final int ONE_TOUCH_RECORD_RECORDING_EXTERNAL_INPUT;
    public static final int ONE_TOUCH_RECORD_RECORDING_TERMINATED_NORMALLY;
    public static final int ONE_TOUCH_RECORD_UNABLE_ANALOGUE_SERVICE;
    public static final int ONE_TOUCH_RECORD_UNABLE_DIGITAL_SERVICE;
    public static final int ONE_TOUCH_RECORD_UNABLE_SELECTED_SERVICE;
    public static final int ONE_TOUCH_RECORD_UNSUPPORTED_CA;
    public static final int OSD_MESSAGE_ARC_CONNECTED_INVALID_PORT;
    public static final int OSD_MESSAGE_AVR_VOLUME_CHANGED;
    public static final int POWER_STATUS_ON;
    public static final int POWER_STATUS_STANDBY;
    public static final int POWER_STATUS_TRANSIENT_TO_ON;
    public static final int POWER_STATUS_TRANSIENT_TO_STANDBY;
    public static final int POWER_STATUS_UNKNOWN;
    public static final int RESULT_ALREADY_IN_PROGRESS;
    public static final int RESULT_COMMUNICATION_FAILED;
    public static final int RESULT_EXCEPTION;
    public static final int RESULT_INCORRECT_MODE;
    public static final int RESULT_SOURCE_NOT_AVAILABLE;
    public static final int RESULT_SUCCESS;
    public static final int RESULT_TARGET_NOT_AVAILABLE;
    public static final int RESULT_TIMEOUT;
    private static final java.lang.String TAG;
    public static final int TIMER_RECORDING_RESULT_EXTRA_CEC_DISABLED;
    public static final int TIMER_RECORDING_RESULT_EXTRA_CHECK_RECORDER_CONNECTION;
    public static final int TIMER_RECORDING_RESULT_EXTRA_FAIL_TO_RECORD_SELECTED_SOURCE;
    public static final int TIMER_RECORDING_RESULT_EXTRA_NO_ERROR;
    public static final int TIMER_RECORDING_TYPE_ANALOGUE;
    public static final int TIMER_RECORDING_TYPE_DIGITAL;
    public static final int TIMER_RECORDING_TYPE_EXTERNAL;
    public static final int TIMER_STATUS_MEDIA_INFO_NOT_PRESENT;
    public static final int TIMER_STATUS_MEDIA_INFO_PRESENT_NOT_PROTECTED;
    public static final int TIMER_STATUS_MEDIA_INFO_PRESENT_PROTECTED;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_CA_NOT_SUPPORTED;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_CLOCK_FAILURE;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_DATE_OUT_OF_RANGE;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_DUPLICATED;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PHYSICAL_NUMBER;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PLUG_NUMBER;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_INVALID_SEQUENCE;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_NO_CA_ENTITLEMENTS;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_NO_FREE_TIME;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_PARENTAL_LOCK_ON;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_UNSUPPORTED_RESOLUTION;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_ENOUGH_SPACE;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_MIGHT_NOT_ENOUGH_SPACE;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_NOT_ENOUGH_SPACE;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_NO_MEDIA_INFO;
    private final boolean mHasAudioSystemDevice;
    private final boolean mHasPlaybackDevice;
    private final boolean mHasSwitchDevice;
    private final boolean mHasTvDevice;
    private final android.util.ArrayMap mHdmiCecVolumeControlFeatureListeners;
    private final android.util.ArrayMap mHdmiControlStatusChangeListeners;
    private final android.util.ArrayMap mHotplugEventListeners;
    private final boolean mIsSwitchDevice;
    private int mLocalPhysicalAddress;
    private final java.lang.Object mLock;
    private final android.hardware.hdmi.IHdmiControlService mService;

    public void <init>(android.hardware.hdmi.IHdmiControlService)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        java.lang.Object $r1;
        android.util.ArrayMap $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.hardware.hdmi.HdmiControlManager$ClientHotplugEventListener $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.hardware.hdmi.IHdmiControlService r8;
        int[] r9;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r8 := @parameter0: android.hardware.hdmi.IHdmiControlService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.hdmi.HdmiControlManager: int mLocalPhysicalAddress> = 65535;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.hardware.hdmi.HdmiControlManager: java.lang.Object mLock> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHotplugEventListeners> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiControlStatusChangeListeners> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiCecVolumeControlFeatureListeners> = $r4;

        r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService> = r8;

        r9 = null;

        if r8 == null goto label4;

     label1:
        r9 = interfaceinvoke r8.<android.hardware.hdmi.IHdmiControlService: int[] getSupportedTypes()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $z0 = staticinvoke <android.hardware.hdmi.HdmiControlManager: boolean hasDeviceType(int[],int)>(r9, 0);

        r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasTvDevice> = $z0;

        $z1 = staticinvoke <android.hardware.hdmi.HdmiControlManager: boolean hasDeviceType(int[],int)>(r9, 4);

        r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasPlaybackDevice> = $z1;

        $z2 = staticinvoke <android.hardware.hdmi.HdmiControlManager: boolean hasDeviceType(int[],int)>(r9, 5);

        r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasAudioSystemDevice> = $z2;

        $z3 = staticinvoke <android.hardware.hdmi.HdmiControlManager: boolean hasDeviceType(int[],int)>(r9, 6);

        r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasSwitchDevice> = $z3;

        $z4 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.hdmi.property_is_device_hdmi_cec_switch", 0);

        r0.<android.hardware.hdmi.HdmiControlManager: boolean mIsSwitchDevice> = $z4;

        $r5 = new android.hardware.hdmi.HdmiControlManager$ClientHotplugEventListener;

        specialinvoke $r5.<android.hardware.hdmi.HdmiControlManager$ClientHotplugEventListener: void <init>(android.hardware.hdmi.HdmiControlManager,android.hardware.hdmi.HdmiControlManager$1)>(r0, null);

        virtualinvoke r0.<android.hardware.hdmi.HdmiControlManager: void addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)>($r5);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static android.hardware.hdmi.IHdmiControlService access$100(android.hardware.hdmi.HdmiControlManager)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r1;

        r0 := @parameter0: android.hardware.hdmi.HdmiControlManager;

        $r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        return $r1;
    }

    static void access$200(android.hardware.hdmi.HdmiControlManager, int)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        int i0;

        r0 := @parameter0: android.hardware.hdmi.HdmiControlManager;

        i0 := @parameter1: int;

        specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: void setLocalPhysicalAddress(int)>(i0);

        return;
    }

    private android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener createHdmiCecVolumeControlFeatureListenerWrapper(java.util.concurrent.Executor, android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        java.util.concurrent.Executor r1;
        android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener r2;
        android.hardware.hdmi.HdmiControlManager$3 $r3;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener;

        $r3 = new android.hardware.hdmi.HdmiControlManager$3;

        specialinvoke $r3.<android.hardware.hdmi.HdmiControlManager$3: void <init>(android.hardware.hdmi.HdmiControlManager,java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)>(r0, r1, r2);

        return $r3;
    }

    private android.hardware.hdmi.IHdmiControlStatusChangeListener getHdmiControlStatusChangeListenerWrapper(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener r1;
        android.hardware.hdmi.HdmiControlManager$2 $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener;

        $r2 = new android.hardware.hdmi.HdmiControlManager$2;

        specialinvoke $r2.<android.hardware.hdmi.HdmiControlManager$2: void <init>(android.hardware.hdmi.HdmiControlManager,android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)>(r0, r1);

        return $r2;
    }

    private android.hardware.hdmi.IHdmiHotplugEventListener getHotplugEventListenerWrapper(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiControlManager$HotplugEventListener r1;
        android.hardware.hdmi.HdmiControlManager$1 $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.HdmiControlManager$HotplugEventListener;

        $r2 = new android.hardware.hdmi.HdmiControlManager$1;

        specialinvoke $r2.<android.hardware.hdmi.HdmiControlManager$1: void <init>(android.hardware.hdmi.HdmiControlManager,android.hardware.hdmi.HdmiControlManager$HotplugEventListener)>(r0, r1);

        return $r2;
    }

    private int getLocalPhysicalAddress()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 = r0.<android.hardware.hdmi.HdmiControlManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.hardware.hdmi.HdmiControlManager: int mLocalPhysicalAddress>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static boolean hasDeviceType(int[], int)
    {
        int[] r0;
        int i0, i1, $i2, i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return 0;

     label1:
        i1 = lengthof r0;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        $i2 = r0[i3];

        if $i2 != i0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    private void setLocalPhysicalAddress(int)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.hdmi.HdmiControlManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.hardware.hdmi.HdmiControlManager: int mLocalPhysicalAddress> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addHdmiCecVolumeControlFeatureListener(java.util.concurrent.Executor, android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener r1;
        android.hardware.hdmi.IHdmiControlService $r2, $r6;
        android.util.ArrayMap $r3, $r4;
        boolean $z0;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.util.concurrent.Executor r9;
        android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener r10;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r9 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener;

        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "HdmiControlService is not available");

        return;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiCecVolumeControlFeatureListeners>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "listener is already registered");

        return;

     label2:
        r10 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener createHdmiCecVolumeControlFeatureListenerWrapper(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)>(r9, r1);

        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiCecVolumeControlFeatureListeners>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10);

     label3:
        $r6 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r6.<android.hardware.hdmi.IHdmiControlService: void addHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)>(r10);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void addHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlStatusChangeListener r1;
        android.hardware.hdmi.IHdmiControlService $r2, $r6;
        android.util.ArrayMap $r3, $r4;
        boolean $z0;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener r9;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r9 := @parameter0: android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener;

        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "HdmiControlService is not available");

        return;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiControlStatusChangeListeners>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "listener is already registered");

        return;

     label2:
        r1 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlStatusChangeListener getHdmiControlStatusChangeListenerWrapper(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)>(r9);

        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiControlStatusChangeListeners>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r1);

     label3:
        $r6 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r6.<android.hardware.hdmi.IHdmiControlService: void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>(r1);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiHotplugEventListener r1;
        android.hardware.hdmi.IHdmiControlService $r2, $r6;
        android.util.ArrayMap $r3, $r4;
        boolean $z0;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.hardware.hdmi.HdmiControlManager$HotplugEventListener r9;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r9 := @parameter0: android.hardware.hdmi.HdmiControlManager$HotplugEventListener;

        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "HdmiControlService is not available");

        return;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHotplugEventListeners>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "listener is already registered");

        return;

     label2:
        r1 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiHotplugEventListener getHotplugEventListenerWrapper(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)>(r9);

        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHotplugEventListeners>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r1);

     label3:
        $r6 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r6.<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>(r1);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.hardware.hdmi.HdmiAudioSystemClient getAudioSystemClient()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiClient $r1;
        android.hardware.hdmi.HdmiAudioSystemClient $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        $r1 = virtualinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)>(5);

        $r2 = (android.hardware.hdmi.HdmiAudioSystemClient) $r1;

        return $r2;
    }

    public android.hardware.hdmi.HdmiClient getClient(int)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        int i0;
        android.hardware.hdmi.IHdmiControlService r1, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.hardware.hdmi.HdmiTvClient $r2, r10;
        android.hardware.hdmi.HdmiPlaybackClient $r3, r9;
        android.hardware.hdmi.HdmiAudioSystemClient $r4, r8;
        android.hardware.hdmi.HdmiSwitchClient $r5, r7;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        r7 = null;

        if r1 != null goto label01;

        return null;

     label01:
        if i0 == 0 goto label10;

        if i0 == 4 goto label08;

        if i0 == 5 goto label06;

        if i0 == 6 goto label02;

        return null;

     label02:
        $z3 = r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasSwitchDevice>;

        if $z3 != 0 goto label04;

        $z4 = r0.<android.hardware.hdmi.HdmiControlManager: boolean mIsSwitchDevice>;

        if $z4 == 0 goto label03;

        goto label04;

     label03:
        goto label05;

     label04:
        $r5 = new android.hardware.hdmi.HdmiSwitchClient;

        $r6 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        specialinvoke $r5.<android.hardware.hdmi.HdmiSwitchClient: void <init>(android.hardware.hdmi.IHdmiControlService)>($r6);

        r7 = $r5;

     label05:
        return r7;

     label06:
        r8 = null;

        $z2 = r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasAudioSystemDevice>;

        if $z2 == 0 goto label07;

        $r4 = new android.hardware.hdmi.HdmiAudioSystemClient;

        specialinvoke $r4.<android.hardware.hdmi.HdmiAudioSystemClient: void <init>(android.hardware.hdmi.IHdmiControlService)>(r1);

        r8 = $r4;

     label07:
        return r8;

     label08:
        r9 = null;

        $z1 = r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasPlaybackDevice>;

        if $z1 == 0 goto label09;

        $r3 = new android.hardware.hdmi.HdmiPlaybackClient;

        specialinvoke $r3.<android.hardware.hdmi.HdmiPlaybackClient: void <init>(android.hardware.hdmi.IHdmiControlService)>(r1);

        r9 = $r3;

     label09:
        return r9;

     label10:
        r10 = null;

        $z0 = r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasTvDevice>;

        if $z0 == 0 goto label11;

        $r2 = new android.hardware.hdmi.HdmiTvClient;

        specialinvoke $r2.<android.hardware.hdmi.HdmiTvClient: void <init>(android.hardware.hdmi.IHdmiControlService)>(r1);

        r10 = $r2;

     label11:
        return r10;
    }

    public java.util.List getConnectedDevices()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

     label1:
        $r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        r4 = interfaceinvoke $r1.<android.hardware.hdmi.IHdmiControlService: java.util.List getDeviceList()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getConnectedDevicesList()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

     label1:
        $r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        r4 = interfaceinvoke $r1.<android.hardware.hdmi.IHdmiControlService: java.util.List getDeviceList()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPhysicalAddress()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        int $i0;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        $i0 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: int getLocalPhysicalAddress()>();

        return $i0;
    }

    public android.hardware.hdmi.HdmiPlaybackClient getPlaybackClient()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiClient $r1;
        android.hardware.hdmi.HdmiPlaybackClient $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        $r1 = virtualinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)>(4);

        $r2 = (android.hardware.hdmi.HdmiPlaybackClient) $r1;

        return $r2;
    }

    public android.hardware.hdmi.HdmiSwitchClient getSwitchClient()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiClient $r1;
        android.hardware.hdmi.HdmiSwitchClient $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        $r1 = virtualinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)>(6);

        $r2 = (android.hardware.hdmi.HdmiSwitchClient) $r1;

        return $r2;
    }

    public boolean getSystemAudioMode()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        boolean z0;
        android.hardware.hdmi.IHdmiControlService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        z0 = interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: boolean getSystemAudioMode()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.hdmi.HdmiTvClient getTvClient()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiClient $r1;
        android.hardware.hdmi.HdmiTvClient $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        $r1 = virtualinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)>(0);

        $r2 = (android.hardware.hdmi.HdmiTvClient) $r1;

        return $r2;
    }

    public boolean isDeviceConnected(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        int i0, i1, $i2;
        boolean z0;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        i0 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: int getLocalPhysicalAddress()>();

        z0 = 0;

        if i0 != 65535 goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        if i1 != 65535 goto label2;

        return 0;

     label2:
        $i2 = staticinvoke <android.hardware.hdmi.HdmiUtils: int getLocalPortFromPhysicalAddress(int,int)>(i1, i0);

        if $i2 == -1 goto label3;

        z0 = 1;

     label3:
        return z0;
    }

    public boolean isHdmiCecVolumeControlEnabled()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        boolean z0;
        android.hardware.hdmi.IHdmiControlService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        z0 = interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isRemoteDeviceConnected(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        int i0, i1, $i2;
        boolean z0;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        i0 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: int getLocalPhysicalAddress()>();

        z0 = 0;

        if i0 != 65535 goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        if i1 != 65535 goto label2;

        return 0;

     label2:
        $i2 = staticinvoke <android.hardware.hdmi.HdmiUtils: int getLocalPortFromPhysicalAddress(int,int)>(i1, i0);

        if $i2 == -1 goto label3;

        z0 = 1;

     label3:
        return z0;
    }

    public void powerOffDevice(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r2;
        int $i0, $i1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.hdmi.HdmiDeviceInfo r5;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r5 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $i0 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void powerOffRemoteDevice(int,int)>($i0, $i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void powerOffRemoteDevice(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r2;
        int $i0, $i1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.hdmi.HdmiDeviceInfo r5;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r5 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $i0 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void powerOffRemoteDevice(int,int)>($i0, $i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void powerOnDevice(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r2;
        int $i0, $i1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.hdmi.HdmiDeviceInfo r5;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r5 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $i0 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void powerOnRemoteDevice(int,int)>($i0, $i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void powerOnRemoteDevice(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r2;
        int $i0, $i1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.hdmi.HdmiDeviceInfo r5;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r5 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $i0 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void powerOnRemoteDevice(int,int)>($i0, $i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener r7;
        android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener r8;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r7 := @parameter0: android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener;

        $r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "HdmiControlService is not available");

        return;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiCecVolumeControlFeatureListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r7);

        r8 = (android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener) $r3;

        if r8 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "tried to remove not-registered listener");

        return;

     label2:
        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r4.<android.hardware.hdmi.IHdmiControlService: void removeHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)>(r8);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void removeHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener r7;
        android.hardware.hdmi.IHdmiControlStatusChangeListener r8;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r7 := @parameter0: android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener;

        $r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "HdmiControlService is not available");

        return;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHdmiControlStatusChangeListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r7);

        r8 = (android.hardware.hdmi.IHdmiControlStatusChangeListener) $r3;

        if r8 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "tried to remove not-registered listener");

        return;

     label2:
        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r4.<android.hardware.hdmi.IHdmiControlService: void removeHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>(r8);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.hdmi.HdmiControlManager$HotplugEventListener r7;
        android.hardware.hdmi.IHdmiHotplugEventListener r8;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r7 := @parameter0: android.hardware.hdmi.HdmiControlManager$HotplugEventListener;

        $r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "HdmiControlService is not available");

        return;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.util.ArrayMap mHotplugEventListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r7);

        r8 = (android.hardware.hdmi.IHdmiHotplugEventListener) $r3;

        if r8 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HdmiControlManager", "tried to remove not-registered listener");

        return;

     label2:
        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r4.<android.hardware.hdmi.IHdmiControlService: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>(r8);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void requestRemoteDeviceToBecomeActiveSource(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.hdmi.HdmiDeviceInfo r5;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r5 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $i0 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void askRemoteDeviceToBecomeActiveSource(int)>($i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActiveSource(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.hdmi.HdmiDeviceInfo r5;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r5 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $i0 = virtualinvoke r5.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void askRemoteDeviceToBecomeActiveSource(int)>($i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setHdmiCecVolumeControlEnabled(boolean)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        boolean z0;
        android.hardware.hdmi.IHdmiControlService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void setHdmiCecVolumeControlEnabled(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStandbyMode(boolean)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        boolean z0;
        android.hardware.hdmi.IHdmiControlService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void setStandbyMode(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_NO_MEDIA_INFO> = 10;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_NOT_ENOUGH_SPACE> = 9;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_MIGHT_NOT_ENOUGH_SPACE> = 11;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_ENOUGH_SPACE> = 8;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_UNSUPPORTED_RESOLUTION> = 8;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_PARENTAL_LOCK_ON> = 9;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_NO_FREE_TIME> = 1;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_NO_CA_ENTITLEMENTS> = 7;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_INVALID_SEQUENCE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PLUG_NUMBER> = 4;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PHYSICAL_NUMBER> = 5;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_DUPLICATED> = 14;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_DATE_OUT_OF_RANGE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_CLOCK_FAILURE> = 10;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_CA_NOT_SUPPORTED> = 6;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_MEDIA_INFO_PRESENT_PROTECTED> = 1;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_MEDIA_INFO_PRESENT_NOT_PROTECTED> = 0;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_MEDIA_INFO_NOT_PRESENT> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_TYPE_EXTERNAL> = 3;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_TYPE_DIGITAL> = 1;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_TYPE_ANALOGUE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_NO_ERROR> = 0;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_FAIL_TO_RECORD_SELECTED_SOURCE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_CHECK_RECORDER_CONNECTION> = 1;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_CEC_DISABLED> = 3;

        <android.hardware.hdmi.HdmiControlManager: java.lang.String TAG> = "HdmiControlManager";

        <android.hardware.hdmi.HdmiControlManager: int RESULT_TIMEOUT> = 1;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_TARGET_NOT_AVAILABLE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_SUCCESS> = 0;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_SOURCE_NOT_AVAILABLE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_INCORRECT_MODE> = 6;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_EXCEPTION> = 5;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_COMMUNICATION_FAILED> = 7;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_ALREADY_IN_PROGRESS> = 4;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_UNKNOWN> = -1;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_TRANSIENT_TO_STANDBY> = 3;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_TRANSIENT_TO_ON> = 2;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_STANDBY> = 1;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_ON> = 0;

        <android.hardware.hdmi.HdmiControlManager: int OSD_MESSAGE_AVR_VOLUME_CHANGED> = 2;

        <android.hardware.hdmi.HdmiControlManager: int OSD_MESSAGE_ARC_CONNECTED_INVALID_PORT> = 1;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNSUPPORTED_CA> = 11;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNABLE_SELECTED_SERVICE> = 7;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNABLE_DIGITAL_SERVICE> = 5;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNABLE_ANALOGUE_SERVICE> = 6;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_TERMINATED_NORMALLY> = 26;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_EXTERNAL_INPUT> = 4;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_DIGITAL_SERVICE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_CURRENTLY_SELECTED_SOURCE> = 1;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_ANALOGUE_SERVICE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_ALREADY_TERMINATED> = 27;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_PREVIOUS_RECORDING_IN_PROGRESS> = 48;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_PLAYING> = 17;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_PARENT_LOCK_ON> = 23;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_OTHER_REASON> = 31;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NO_SOURCE_SIGNAL> = 20;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NO_OR_INSUFFICIENT_CA_ENTITLEMENTS> = 12;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NO_MEDIA> = 16;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NOT_ENOUGH_SPACE> = 22;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_MEDIA_PROTECTED> = 19;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_MEDIA_PROBLEM> = 21;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PLUG_NUMBER> = 9;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PHYSICAL_ADDRESS> = 10;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_FAIL_TO_RECORD_DISPLAYED_SCREEN> = 50;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_DISALLOW_TO_FUTHER_COPIES> = 14;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_DISALLOW_TO_COPY> = 13;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_CHECK_RECORDER_CONNECTION> = 49;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_CEC_DISABLED> = 51;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_ALREADY_RECORDING> = 18;

        <android.hardware.hdmi.HdmiControlManager: int INVALID_PHYSICAL_ADDRESS> = 65535;

        <android.hardware.hdmi.HdmiControlManager: java.lang.String EXTRA_MESSAGE_ID> = "android.hardware.hdmi.extra.MESSAGE_ID";

        <android.hardware.hdmi.HdmiControlManager: java.lang.String EXTRA_MESSAGE_EXTRA_PARAM1> = "android.hardware.hdmi.extra.MESSAGE_EXTRA_PARAM1";

        <android.hardware.hdmi.HdmiControlManager: int DEVICE_EVENT_UPDATE_DEVICE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int DEVICE_EVENT_REMOVE_DEVICE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int DEVICE_EVENT_ADD_DEVICE> = 1;

        <android.hardware.hdmi.HdmiControlManager: int CONTROL_STATE_CHANGED_REASON_WAKEUP> = 2;

        <android.hardware.hdmi.HdmiControlManager: int CONTROL_STATE_CHANGED_REASON_START> = 0;

        <android.hardware.hdmi.HdmiControlManager: int CONTROL_STATE_CHANGED_REASON_STANDBY> = 3;

        <android.hardware.hdmi.HdmiControlManager: int CONTROL_STATE_CHANGED_REASON_SETTING> = 1;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_RECORDING> = 0;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_MATCHING> = 1;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_INFO_AVAILABLE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_CLEARED> = 128;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_FAIL_TO_CLEAR_SELECTED_SOURCE> = 161;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_CHECK_RECORDER_CONNECTION> = 160;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_CEC_DISABLE> = 162;

        <android.hardware.hdmi.HdmiControlManager: int AVR_VOLUME_MUTED> = 101;

        <android.hardware.hdmi.HdmiControlManager: java.lang.String ACTION_OSD_MESSAGE> = "android.hardware.hdmi.action.OSD_MESSAGE";

        return;
    }
}
