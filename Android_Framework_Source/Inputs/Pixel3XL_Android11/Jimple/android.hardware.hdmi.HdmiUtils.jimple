public final class android.hardware.hdmi.HdmiUtils extends java.lang.Object
{
    public static final int HDMI_RELATIVE_POSITION_ABOVE;
    public static final int HDMI_RELATIVE_POSITION_BELOW;
    public static final int HDMI_RELATIVE_POSITION_DIFFERENT_BRANCH;
    public static final int HDMI_RELATIVE_POSITION_DIRECTLY_ABOVE;
    public static final int HDMI_RELATIVE_POSITION_DIRECTLY_BELOW;
    public static final int HDMI_RELATIVE_POSITION_SAME;
    public static final int HDMI_RELATIVE_POSITION_SIBLING;
    public static final int HDMI_RELATIVE_POSITION_UNKNOWN;
    private static final int NPOS;
    static final int TARGET_NOT_UNDER_LOCAL_DEVICE;
    static final int TARGET_SAME_PHYSICAL_ADDRESS;

    private void <init>()
    {
        android.hardware.hdmi.HdmiUtils r0;

        r0 := @this: android.hardware.hdmi.HdmiUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getHdmiAddressRelativePosition(int, int)
    {
        int i0, i1, $i3, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i14, $i15, $i17, i18, i19;
        char c2, $c7, $c10, $c13, $c16;
        java.lang.Throwable $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 65535 goto label13;

        if i1 != 65535 goto label01;

        goto label13;

     label01:
        i18 = staticinvoke <android.hardware.hdmi.HdmiUtils: int physicalAddressFirstDifferentDigitPos(int,int)>(i0, i1);

     label02:
        if i18 != -1 goto label03;

        return 3;

     label03:
        $i3 = i18 * 4;

        c2 = 61440 >> $i3;

        i19 = i18 + 1;

        $i4 = i0 & c2;

        if $i4 != 0 goto label06;

        if i19 != 4 goto label04;

        return 4;

     label04:
        $i15 = i19 * 4;

        $c16 = 61440 >> $i15;

        $i17 = $c16 & i1;

        if $i17 != 0 goto label05;

        return 4;

     label05:
        return 5;

     label06:
        $i5 = i1 & c2;

        if $i5 != 0 goto label09;

        if i19 != 4 goto label07;

        return 1;

     label07:
        $i12 = i19 * 4;

        $c13 = 61440 >> $i12;

        $i14 = $c13 & i0;

        if $i14 != 0 goto label08;

        return 1;

     label08:
        return 2;

     label09:
        if i19 != 4 goto label10;

        return 6;

     label10:
        $i6 = i19 * 4;

        $c7 = 61440 >> $i6;

        $i8 = $c7 & i0;

        if $i8 != 0 goto label11;

        $i9 = i19 * 4;

        $c10 = 61440 >> $i9;

        $i11 = $c10 & i1;

        if $i11 != 0 goto label11;

        return 6;

     label11:
        return 7;

     label12:
        $r1 := @caughtexception;

        return 0;

     label13:
        return 0;

        catch java.lang.IllegalArgumentException from label01 to label02 with label12;
    }

    public static int getLocalPortFromPhysicalAddress(int, int)
    {
        int i0, $i1, $i2, $i3, $i4, i5, i8, i9, i10;
        char c6, c7;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 != i5 goto label1;

        return 0;

     label1:
        c6 = 61440;

        c7 = 61440;

        i8 = i0;

     label2:
        if i8 == 0 goto label3;

        i8 = i0 & c6;

        c7 = c7 | c6;

        c6 = c6 >> 4;

        goto label2;

     label3:
        i9 = i5 & c7;

        $i1 = c7 << 4;

        $i2 = $i1 & i9;

        if $i2 == i0 goto label4;

        return -1;

     label4:
        $i3 = c6 << 4;

        i10 = i9 & $i3;

     label5:
        $i4 = i10 >> 4;

        if $i4 == 0 goto label6;

        i10 = i10 >> 4;

        goto label5;

     label6:
        return i10;
    }

    public static boolean isValidPhysicalAddress(int)
    {
        int i0, $i1, i3;
        char c2;
        boolean z0, z1;

        i0 := @parameter0: int;

        if i0 < 0 goto label6;

        if i0 < 65535 goto label1;

        goto label6;

     label1:
        c2 = 61440;

        z0 = 0;

        i3 = 0;

     label2:
        if i3 >= 4 goto label5;

        $i1 = i0 & c2;

        if $i1 != 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = z0;

        if z0 == 0 goto label4;

        return 0;

     label4:
        c2 = c2 >> 4;

        i3 = i3 + 1;

        z0 = z1;

        goto label2;

     label5:
        return 1;

     label6:
        return 0;
    }

    private static int physicalAddressFirstDifferentDigitPos(int, int) throws java.lang.IllegalArgumentException
    {
        int i0, i1, $i2, $i3, i5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r5;
        java.lang.IllegalArgumentException $r3, $r8;
        java.lang.String $r4, $r9;
        char c4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.hardware.hdmi.HdmiUtils: boolean isValidPhysicalAddress(int)>(i0);

        if $z0 == 0 goto label5;

        $z1 = staticinvoke <android.hardware.hdmi.HdmiUtils: boolean isValidPhysicalAddress(int)>(i1);

        if $z1 == 0 goto label4;

        c4 = 61440;

        i5 = 0;

     label1:
        if i5 >= 4 goto label3;

        $i3 = i0 & c4;

        $i2 = i1 & c4;

        if $i3 == $i2 goto label2;

        return i5;

     label2:
        c4 = c4 >> 4;

        i5 = i5 + 1;

        goto label1;

     label3:
        return -1;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid address.");

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid address.");

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public static void <clinit>()
    {
        <android.hardware.hdmi.HdmiUtils: int TARGET_SAME_PHYSICAL_ADDRESS> = 0;

        <android.hardware.hdmi.HdmiUtils: int TARGET_NOT_UNDER_LOCAL_DEVICE> = -1;

        <android.hardware.hdmi.HdmiUtils: int NPOS> = -1;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_UNKNOWN> = 0;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_SIBLING> = 6;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_SAME> = 3;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_DIRECTLY_BELOW> = 1;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_DIRECTLY_ABOVE> = 4;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_DIFFERENT_BRANCH> = 7;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_BELOW> = 2;

        <android.hardware.hdmi.HdmiUtils: int HDMI_RELATIVE_POSITION_ABOVE> = 5;

        return;
    }
}
