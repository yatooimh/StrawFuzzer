public class android.hardware.input.IInputManager$Default extends java.lang.Object implements android.hardware.input.IInputManager
{

    public void <init>()
    {
        android.hardware.input.IInputManager$Default r0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void addPortAssociation(java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.input.IInputManager$Default r0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        return null;
    }

    public void cancelVibrate(int, android.os.IBinder) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0;
        android.os.IBinder r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        return;
    }

    public void disableInputDevice(int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void enableInputDevice(int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.InputDeviceIdentifier r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        return null;
    }

    public java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.InputDeviceIdentifier r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        return null;
    }

    public android.view.InputDevice getInputDevice(int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public int[] getInputDeviceIds() throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        return null;
    }

    public android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayouts() throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        return null;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.InputDeviceIdentifier r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        return null;
    }

    public android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return null;
    }

    public boolean hasKeys(int, int, int[], boolean[]) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0, i1;
        int[] r1;
        boolean[] r2;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: boolean[];

        return 0;
    }

    public boolean injectInputEvent(android.view.InputEvent, int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.view.InputEvent r1;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        return 0;
    }

    public int isInTabletMode() throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        return 0;
    }

    public boolean isInputDeviceEnabled(int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int isMicMuted() throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        return 0;
    }

    public android.view.InputMonitor monitorGestureInput(java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return null;
    }

    public void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.IInputDevicesChangedListener r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.IInputDevicesChangedListener;

        return;
    }

    public void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.ITabletModeChangedListener r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.ITabletModeChangedListener;

        return;
    }

    public void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void removePortAssociation(java.lang.String) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void requestPointerCapture(android.os.IBinder, boolean) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.os.IBinder r1;
        boolean z0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        return;
    }

    public void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void setCustomPointerIcon(android.view.PointerIcon) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.view.PointerIcon r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.view.PointerIcon;

        return;
    }

    public void setPointerIconType(int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void setTouchCalibrationForInputDevice(java.lang.String, int, android.hardware.input.TouchCalibration) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        java.lang.String r1;
        int i0;
        android.hardware.input.TouchCalibration r2;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.hardware.input.TouchCalibration;

        return;
    }

    public void tryPointerSpeed(int) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        android.view.InputEvent r1;

        r0 := @this: android.hardware.input.IInputManager$Default;

        r1 := @parameter0: android.view.InputEvent;

        return null;
    }

    public void vibrate(int, long[], int, android.os.IBinder) throws android.os.RemoteException
    {
        android.hardware.input.IInputManager$Default r0;
        int i0, i1;
        long[] r1;
        android.os.IBinder r2;

        r0 := @this: android.hardware.input.IInputManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.IBinder;

        return;
    }
}
