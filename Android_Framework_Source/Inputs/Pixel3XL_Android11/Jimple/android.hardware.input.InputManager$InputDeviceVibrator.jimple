final class android.hardware.input.InputManager$InputDeviceVibrator extends android.os.Vibrator
{
    private final int mDeviceId;
    private final android.os.Binder mToken;
    final android.hardware.input.InputManager this$0;

    public void <init>(android.hardware.input.InputManager, int)
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;
        android.hardware.input.InputManager r1;
        int i0;
        android.os.Binder $r2;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        r1 := @parameter0: android.hardware.input.InputManager;

        i0 := @parameter1: int;

        r0.<android.hardware.input.InputManager$InputDeviceVibrator: android.hardware.input.InputManager this$0> = r1;

        specialinvoke r0.<android.os.Vibrator: void <init>()>();

        r0.<android.hardware.input.InputManager$InputDeviceVibrator: int mDeviceId> = i0;

        $r2 = new android.os.Binder;

        specialinvoke $r2.<android.os.Binder: void <init>()>();

        r0.<android.hardware.input.InputManager$InputDeviceVibrator: android.os.Binder mToken> = $r2;

        return;
    }

    public void addVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;
        android.os.Vibrator$OnVibratorStateChangedListener r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        r1 := @parameter0: android.os.Vibrator$OnVibratorStateChangedListener;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("addVibratorStateListener not supported in InputDeviceVibrator");

        throw $r2;
    }

    public void addVibratorStateListener(java.util.concurrent.Executor, android.os.Vibrator$OnVibratorStateChangedListener)
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;
        java.util.concurrent.Executor r1;
        android.os.Vibrator$OnVibratorStateChangedListener r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.os.Vibrator$OnVibratorStateChangedListener;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("addVibratorStateListener not supported in InputDeviceVibrator");

        throw $r3;
    }

    public void cancel()
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;
        android.hardware.input.InputManager $r2;
        android.hardware.input.IInputManager $r3;
        android.os.Binder $r4;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

     label1:
        $r2 = r0.<android.hardware.input.InputManager$InputDeviceVibrator: android.hardware.input.InputManager this$0>;

        $r3 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.IInputManager access$400(android.hardware.input.InputManager)>($r2);

        $i0 = r0.<android.hardware.input.InputManager$InputDeviceVibrator: int mDeviceId>;

        $r4 = r0.<android.hardware.input.InputManager$InputDeviceVibrator: android.os.Binder mToken>;

        interfaceinvoke $r3.<android.hardware.input.IInputManager: void cancelVibrate(int,android.os.IBinder)>($i0, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasAmplitudeControl()
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        return 0;
    }

    public boolean hasVibrator()
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        return 1;
    }

    public boolean isVibrating()
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("isVibrating not supported in InputDeviceVibrator");

        throw $r1;
    }

    public void removeVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;
        android.os.Vibrator$OnVibratorStateChangedListener r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        r1 := @parameter0: android.os.Vibrator$OnVibratorStateChangedListener;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("removeVibratorStateListener not supported in InputDeviceVibrator");

        throw $r2;
    }

    public void vibrate(int, java.lang.String, android.os.VibrationEffect, java.lang.String, android.media.AudioAttributes)
    {
        android.hardware.input.InputManager$InputDeviceVibrator r0;
        java.lang.String r1, r8;
        android.media.AudioAttributes r2;
        boolean $z0, $z1;
        android.hardware.input.InputManager $r3;
        android.hardware.input.IInputManager $r4;
        android.os.Binder $r5;
        int $i1, i3, i4;
        long $l2;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.os.VibrationEffect r9;
        android.os.VibrationEffect$OneShot r10;
        long[] r11;
        android.os.VibrationEffect$Waveform r12;

        r0 := @this: android.hardware.input.InputManager$InputDeviceVibrator;

        i3 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: android.os.VibrationEffect;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: android.media.AudioAttributes;

        $z0 = r9 instanceof android.os.VibrationEffect$OneShot;

        if $z0 == 0 goto label1;

        r10 = (android.os.VibrationEffect$OneShot) r9;

        r11 = newarray (long)[2];

        r11[0] = 0L;

        $l2 = virtualinvoke r10.<android.os.VibrationEffect$OneShot: long getDuration()>();

        r11[1] = $l2;

        i4 = -1;

        goto label2;

     label1:
        $z1 = r9 instanceof android.os.VibrationEffect$Waveform;

        if $z1 == 0 goto label5;

        r12 = (android.os.VibrationEffect$Waveform) r9;

        r11 = virtualinvoke r12.<android.os.VibrationEffect$Waveform: long[] getTimings()>();

        i4 = virtualinvoke r12.<android.os.VibrationEffect$Waveform: int getRepeatIndex()>();

     label2:
        $r3 = r0.<android.hardware.input.InputManager$InputDeviceVibrator: android.hardware.input.InputManager this$0>;

        $r4 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.IInputManager access$400(android.hardware.input.InputManager)>($r3);

        $i1 = r0.<android.hardware.input.InputManager$InputDeviceVibrator: int mDeviceId>;

        $r5 = r0.<android.hardware.input.InputManager$InputDeviceVibrator: android.os.Binder mToken>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: void vibrate(int,long[],int,android.os.IBinder)>($i1, r11, i4, $r5);

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label5:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", "Pre-baked effects aren\'t supported on input devices");

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }
}
