public final class android.hardware.input.InputManager extends java.lang.Object
{
    public static final java.lang.String ACTION_QUERY_KEYBOARD_LAYOUTS;
    private static final boolean DEBUG;
    public static final int DEFAULT_POINTER_SPEED;
    public static final int INJECT_INPUT_EVENT_MODE_ASYNC;
    public static final int INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH;
    public static final int INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT;
    public static final int MAX_POINTER_SPEED;
    public static final java.lang.String META_DATA_KEYBOARD_LAYOUTS;
    public static final int MIN_POINTER_SPEED;
    private static final int MSG_DEVICE_ADDED;
    private static final int MSG_DEVICE_CHANGED;
    private static final int MSG_DEVICE_REMOVED;
    public static final int SWITCH_STATE_OFF;
    public static final int SWITCH_STATE_ON;
    public static final int SWITCH_STATE_UNKNOWN;
    private static final java.lang.String TAG;
    private static android.hardware.input.InputManager sInstance;
    private final android.hardware.input.IInputManager mIm;
    private final java.util.ArrayList mInputDeviceListeners;
    private android.util.SparseArray mInputDevices;
    private android.hardware.input.InputManager$InputDevicesChangedListener mInputDevicesChangedListener;
    private final java.lang.Object mInputDevicesLock;
    private java.util.List mOnTabletModeChangedListeners;
    private android.hardware.input.InputManager$TabletModeChangedListener mTabletModeChangedListener;
    private final java.lang.Object mTabletModeLock;

    private void <init>(android.hardware.input.IInputManager)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager r1;
        java.lang.Object $r2, $r4;
        java.util.ArrayList $r3;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.hardware.input.IInputManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.hardware.input.InputManager: java.lang.Object mTabletModeLock> = $r4;

        r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm> = r1;

        return;
    }

    static void access$200(android.hardware.input.InputManager, int[])
    {
        android.hardware.input.InputManager r0;
        int[] r1;

        r0 := @parameter0: android.hardware.input.InputManager;

        r1 := @parameter1: int[];

        specialinvoke r0.<android.hardware.input.InputManager: void onInputDevicesChanged(int[])>(r1);

        return;
    }

    static void access$300(android.hardware.input.InputManager, long, boolean)
    {
        android.hardware.input.InputManager r0;
        long l0;
        boolean z0;

        r0 := @parameter0: android.hardware.input.InputManager;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.hardware.input.InputManager: void onTabletModeChanged(long,boolean)>(l0, z0);

        return;
    }

    static android.hardware.input.IInputManager access$400(android.hardware.input.InputManager)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;

        r0 := @parameter0: android.hardware.input.InputManager;

        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        return $r1;
    }

    private static boolean containsDeviceId(int[], int)
    {
        int[] r0;
        int i0, $i1, $i2, i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label3;

        $i2 = r0[i3];

        if $i2 != i0 goto label2;

        return 1;

     label2:
        i3 = i3 + 2;

        goto label1;

     label3:
        return 0;
    }

    private int findInputDeviceListenerLocked(android.hardware.input.InputManager$InputDeviceListener)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$InputDeviceListener r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.hardware.input.InputManager$InputDeviceListenerDelegate $r5;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.hardware.input.InputManager$InputDeviceListener;

        $r2 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.hardware.input.InputManager$InputDeviceListenerDelegate) $r4;

        $r6 = $r5.<android.hardware.input.InputManager$InputDeviceListenerDelegate: android.hardware.input.InputManager$InputDeviceListener mListener>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private int findOnTabletModeChangedListenerLocked(android.hardware.input.InputManager$OnTabletModeChangedListener)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$OnTabletModeChangedListener r1, $r6;
        int i0, i1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate $r5;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.hardware.input.InputManager$OnTabletModeChangedListener;

        $r2 = r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate) $r4;

        $r6 = $r5.<android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate: android.hardware.input.InputManager$OnTabletModeChangedListener mListener>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static android.hardware.input.InputManager getInstance()
    {
        android.os.IBinder $r1;
        android.hardware.input.IInputManager $r2;
        android.os.ServiceManager$ServiceNotFoundException $r3;
        java.lang.Throwable $r4;
        android.hardware.input.InputManager r5, r6, r8;
        java.lang.IllegalStateException r7;

        entermonitor class "Landroid/hardware/input/InputManager;";

     label01:
        r5 = <android.hardware.input.InputManager: android.hardware.input.InputManager sInstance>;

     label02:
        if r5 != null goto label07;

     label03:
        r6 = new android.hardware.input.InputManager;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("input");

        $r2 = staticinvoke <android.hardware.input.IInputManager$Stub: android.hardware.input.IInputManager asInterface(android.os.IBinder)>($r1);

        specialinvoke r6.<android.hardware.input.InputManager: void <init>(android.hardware.input.IInputManager)>($r2);

        <android.hardware.input.InputManager: android.hardware.input.InputManager sInstance> = r6;

     label04:
        goto label07;

     label05:
        $r3 := @caughtexception;

     label06:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw r7;

     label07:
        r8 = <android.hardware.input.InputManager: android.hardware.input.InputManager sInstance>;

        exitmonitor class "Landroid/hardware/input/InputManager;";

     label08:
        return r8;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor class "Landroid/hardware/input/InputManager;";

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.ServiceManager$ServiceNotFoundException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void initializeTabletModeListenerLocked()
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$TabletModeChangedListener $r1;
        android.hardware.input.IInputManager $r2;
        java.util.ArrayList $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.hardware.input.InputManager;

        $r1 = new android.hardware.input.InputManager$TabletModeChangedListener;

        specialinvoke $r1.<android.hardware.input.InputManager$TabletModeChangedListener: void <init>(android.hardware.input.InputManager,android.hardware.input.InputManager$1)>(r0, null);

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r2.<android.hardware.input.IInputManager: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>($r1);

     label2:
        r0.<android.hardware.input.InputManager: android.hardware.input.InputManager$TabletModeChangedListener mTabletModeChangedListener> = $r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners> = $r3;

        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void onInputDevicesChanged(int[])
    {
        android.hardware.input.InputManager r0;
        java.lang.Object r1, $r7;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8;
        android.view.InputDevice r2;
        android.util.SparseArray $r3, $r4, $r5, $r6, $r8, $r9, $r10;
        boolean $z0;
        java.lang.Throwable $r11;
        int[] r12;

        r0 := @this: android.hardware.input.InputManager;

        r12 := @parameter0: int[];

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i5 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

     label02:
        i5 = i5 + -1;

        if i5 <= 0 goto label05;

     label03:
        $r9 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i6 = virtualinvoke $r9.<android.util.SparseArray: int keyAt(int)>(i5);

        $z0 = staticinvoke <android.hardware.input.InputManager: boolean containsDeviceId(int[],int)>(r12, i6);

        if $z0 != 0 goto label04;

        $r10 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r10.<android.util.SparseArray: void removeAt(int)>(i5);

        specialinvoke r0.<android.hardware.input.InputManager: void sendMessageToInputDeviceListenersLocked(int,int)>(2, i6);

     label04:
        goto label02;

     label05:
        i7 = 0;

     label06:
        $i2 = lengthof r12;

        if i7 >= $i2 goto label16;

     label07:
        i0 = r12[i7];

     label08:
        $r4 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int indexOfKey(int)>(i0);

     label09:
        if i1 < 0 goto label14;

     label10:
        $r6 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (android.view.InputDevice) $r7;

     label11:
        if r2 == null goto label13;

        $i3 = i7 + 1;

        i8 = r12[$i3];

     label12:
        $i4 = virtualinvoke r2.<android.view.InputDevice: int getGeneration()>();

        if $i4 == i8 goto label13;

        $r8 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r8.<android.util.SparseArray: void setValueAt(int,java.lang.Object)>(i1, null);

        specialinvoke r0.<android.hardware.input.InputManager: void sendMessageToInputDeviceListenersLocked(int,int)>(3, i0);

     label13:
        goto label15;

     label14:
        $r5 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, null);

        specialinvoke r0.<android.hardware.input.InputManager: void sendMessageToInputDeviceListenersLocked(int,int)>(1, i0);

     label15:
        i7 = i7 + 2;

        goto label06;

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r11 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private void onTabletModeChanged(long, boolean)
    {
        android.hardware.input.InputManager r0;
        long l0;
        boolean z0;
        java.lang.Object r1, $r5;
        int i1, i2;
        java.util.List $r3, $r4;
        android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.hardware.input.InputManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mTabletModeLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners>;

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label06;

     label04:
        $r4 = r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate) $r5;

        virtualinvoke $r6.<android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate: void sendTabletModeChanged(long,boolean)>(l0, z0);

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void populateInputDevicesLocked()
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$InputDevicesChangedListener $r1, $r6;
        android.util.SparseArray $r2, $r4, $r5;
        android.hardware.input.IInputManager $r3, $r7;
        int $i0, $i1, i2;
        android.os.RemoteException $r8, $r10;
        java.lang.RuntimeException $r9, $r11;
        int[] r14;

        r0 := @this: android.hardware.input.InputManager;

        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.InputManager$InputDevicesChangedListener mInputDevicesChangedListener>;

        if $r1 != null goto label4;

        $r6 = new android.hardware.input.InputManager$InputDevicesChangedListener;

        specialinvoke $r6.<android.hardware.input.InputManager$InputDevicesChangedListener: void <init>(android.hardware.input.InputManager,android.hardware.input.InputManager$1)>(r0, null);

     label1:
        $r7 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r7.<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>($r6);

     label2:
        r0.<android.hardware.input.InputManager: android.hardware.input.InputManager$InputDevicesChangedListener mInputDevicesChangedListener> = $r6;

        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label4:
        $r2 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        if $r2 != null goto label9;

     label5:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r14 = interfaceinvoke $r3.<android.hardware.input.IInputManager: int[] getInputDeviceIds()>();

     label6:
        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices> = $r4;

        i2 = 0;

     label7:
        $i0 = lengthof r14;

        if i2 >= $i0 goto label9;

        $r5 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $i1 = r14[i2];

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, null);

        i2 = i2 + 1;

        goto label7;

     label8:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label5 to label6 with label8;
    }

    private void sendMessageToInputDeviceListenersLocked(int, int)
    {
        android.hardware.input.InputManager r0;
        int i0, i1, i2, i3;
        android.hardware.input.InputManager$InputDeviceListenerDelegate r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.os.Message $r5;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r3 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r1 = (android.hardware.input.InputManager$InputDeviceListenerDelegate) $r4;

        $r5 = virtualinvoke r1.<android.hardware.input.InputManager$InputDeviceListenerDelegate: android.os.Message obtainMessage(int,int,int)>(i0, i1, 0);

        virtualinvoke r1.<android.hardware.input.InputManager$InputDeviceListenerDelegate: boolean sendMessage(android.os.Message)>($r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2, $r3;
        android.hardware.input.IInputManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.input.InputDeviceIdentifier r7;

        r0 := @this: android.hardware.input.InputManager;

        r7 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 := @parameter1: java.lang.String;

        if r7 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>(r7, r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addPortAssociation(java.lang.String, int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r1.<android.hardware.input.IInputManager: void addPortAssociation(java.lang.String,int)>(r4, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean[] deviceHasKeys(int, int[])
    {
        android.hardware.input.InputManager r0;
        int i0, $i1;
        boolean[] r1;
        android.hardware.input.IInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int[] r5;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        r5 := @parameter1: int[];

        $i1 = lengthof r5;

        r1 = newarray (boolean)[$i1];

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r2.<android.hardware.input.IInputManager: boolean hasKeys(int,int,int[],boolean[])>(i0, -256, r5, r1);

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean[] deviceHasKeys(int[])
    {
        android.hardware.input.InputManager r0;
        int[] r1;
        boolean[] $r2;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r0.<android.hardware.input.InputManager: boolean[] deviceHasKeys(int,int[])>(-1, r1);

        return $r2;
    }

    public void disableInputDevice(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r3.<android.hardware.input.IInputManager: void disableInputDevice(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not disable input device with id = ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r8);

        $r9 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void enableInputDevice(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r3.<android.hardware.input.IInputManager: void enableInputDevice(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not enable input device with id = ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r8);

        $r9 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.input.InputDeviceIdentifier r4;
        java.lang.String r5;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: android.hardware.input.InputDeviceIdentifier;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r5 = interfaceinvoke $r1.<android.hardware.input.IInputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        android.hardware.input.InputManager r0;
        java.lang.IllegalArgumentException $r1;
        android.hardware.input.IInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.input.InputDeviceIdentifier r5;
        java.lang.String[] r6;

        r0 := @this: android.hardware.input.InputManager;

        r5 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r6 = interfaceinvoke $r2.<android.hardware.input.IInputManager: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.InputDevice getInputDevice(int)
    {
        android.hardware.input.InputManager r0;
        int i0, i1;
        java.lang.Object r1, $r4;
        android.util.SparseArray $r2, $r3, $r6;
        android.hardware.input.IInputManager $r5;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9;
        android.view.InputDevice r10, r11, r12;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.input.InputManager: void populateInputDevicesLocked()>();

        $r2 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i1 = virtualinvoke $r2.<android.util.SparseArray: int indexOfKey(int)>(i0);

     label02:
        if i1 >= 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return null;

     label05:
        $r3 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r10 = (android.view.InputDevice) $r4;

     label06:
        r11 = r10;

        if r10 != null goto label13;

     label07:
        $r5 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r12 = interfaceinvoke $r5.<android.hardware.input.IInputManager: android.view.InputDevice getInputDevice(int)>(i0);

     label08:
        r11 = r12;

        if r12 == null goto label13;

     label09:
        $r6 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r6.<android.util.SparseArray: void setValueAt(int,java.lang.Object)>(i1, r12);

     label10:
        r11 = r12;

        goto label13;

     label11:
        $r7 := @caughtexception;

     label12:
        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label13:
        exitmonitor r1;

     label14:
        return r11;

     label15:
        $r9 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.Object r1, $r6;
        int i0, i1, i2;
        android.view.InputDevice r2, r15;
        java.lang.IllegalArgumentException $r3;
        android.util.SparseArray $r4, $r5, $r8, $r10;
        java.lang.String $r7, r14;
        boolean $z0;
        android.hardware.input.IInputManager $r9;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;
        java.lang.Throwable $r13;

        r0 := @this: android.hardware.input.InputManager;

        r14 := @parameter0: java.lang.String;

        if r14 == null goto label21;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.input.InputManager: void populateInputDevicesLocked()>();

        $r4 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label16;

     label04:
        $r5 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r2 = (android.view.InputDevice) $r6;

     label05:
        r15 = r2;

        if r2 != null goto label13;

     label06:
        $r8 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i1 = virtualinvoke $r8.<android.util.SparseArray: int keyAt(int)>(i2);

     label07:
        $r9 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r15 = interfaceinvoke $r9.<android.hardware.input.IInputManager: android.view.InputDevice getInputDevice(int)>(i1);

     label08:
        if r15 != null goto label09;

        goto label15;

     label09:
        $r10 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r10.<android.util.SparseArray: void setValueAt(int,java.lang.Object)>(i2, r15);

     label10:
        goto label13;

     label11:
        $r11 := @caughtexception;

     label12:
        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label13:
        $r7 = virtualinvoke r15.<android.view.InputDevice: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label15;

        exitmonitor r1;

     label14:
        return r15;

     label15:
        i2 = i2 + 1;

        goto label03;

     label16:
        exitmonitor r1;

     label17:
        return null;

     label18:
        $r13 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r13;

     label21:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("descriptor must not be null.");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public int[] getInputDeviceIds()
    {
        android.hardware.input.InputManager r0;
        java.lang.Object r1;
        int i0, $i1, i2;
        android.util.SparseArray $r2, $r3;
        java.lang.Throwable $r4;
        int[] r5;

        r0 := @this: android.hardware.input.InputManager;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.input.InputManager: void populateInputDevicesLocked()>();

        $r2 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        r5 = newarray (int)[i0];

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

     label04:
        $r3 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i2);

        r5[i2] = $i1;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return r5;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.os.Vibrator getInputDeviceVibrator(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.InputManager$InputDeviceVibrator $r1;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        $r1 = new android.hardware.input.InputManager$InputDeviceVibrator;

        specialinvoke $r1.<android.hardware.input.InputManager$InputDeviceVibrator: void <init>(android.hardware.input.InputManager,int)>(r0, i0);

        return $r1;
    }

    public android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.IllegalArgumentException $r1;
        android.hardware.input.IInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        android.hardware.input.KeyboardLayout r6;

        r0 := @this: android.hardware.input.InputManager;

        r5 := @parameter0: java.lang.String;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r6 = interfaceinvoke $r2.<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayouts()
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.input.KeyboardLayout[] r4;

        r0 := @this: android.hardware.input.InputManager;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r4 = interfaceinvoke $r1.<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.input.InputDeviceIdentifier r4;
        android.hardware.input.KeyboardLayout[] r5;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: android.hardware.input.InputDeviceIdentifier;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r5 = interfaceinvoke $r1.<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPointerSpeed(android.content.Context)
    {
        android.hardware.input.InputManager r0;
        int i0, i1;
        android.content.ContentResolver $r1;
        android.provider.Settings$SettingNotFoundException $r2;
        android.content.Context r3;

        r0 := @this: android.hardware.input.InputManager;

        r3 := @parameter0: android.content.Context;

        i1 = 0;

     label1:
        $r1 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>($r1, "pointer_speed");

     label2:
        i1 = i0;

        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return i1;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public android.hardware.input.TouchCalibration getTouchCalibration(java.lang.String, int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.hardware.input.TouchCalibration r5;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r5 = interfaceinvoke $r1.<android.hardware.input.IInputManager: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>(r4, i0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean injectInputEvent(android.view.InputEvent, int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        boolean z0;
        java.lang.IllegalArgumentException $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.view.InputEvent r5;
        android.hardware.input.IInputManager $r6;

        r0 := @this: android.hardware.input.InputManager;

        r5 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        if r5 == null goto label5;

        if i0 == 0 goto label2;

        if i0 == 2 goto label2;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mode is invalid");

        throw $r2;

     label2:
        $r6 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        z0 = interfaceinvoke $r6.<android.hardware.input.IInputManager: boolean injectInputEvent(android.view.InputEvent,int)>(r5, i0);

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event must not be null");

        throw $r1;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int isInTabletMode()
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.input.InputManager;

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        i0 = interfaceinvoke $r2.<android.hardware.input.IInputManager: int isInTabletMode()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isInputDeviceEnabled(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        boolean z0;
        android.hardware.input.IInputManager $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

     label1:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        z0 = interfaceinvoke $r3.<android.hardware.input.IInputManager: boolean isInputDeviceEnabled(int)>(i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not check enabled status of input device with id = ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r8);

        $r9 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int isMicMuted()
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.input.InputManager;

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        i0 = interfaceinvoke $r2.<android.hardware.input.IInputManager: int isMicMuted()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.InputMonitor monitorGestureInput(java.lang.String, int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.view.InputMonitor r5;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r5 = interfaceinvoke $r1.<android.hardware.input.IInputManager: android.view.InputMonitor monitorGestureInput(java.lang.String,int)>(r4, i0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener, android.os.Handler)
    {
        android.hardware.input.InputManager r0;
        android.os.Handler r1;
        java.lang.Object r2;
        java.util.ArrayList r3;
        android.hardware.input.InputManager$InputDeviceListenerDelegate r4;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        java.lang.Throwable $r6;
        android.hardware.input.InputManager$InputDeviceListener r7;

        r0 := @this: android.hardware.input.InputManager;

        r7 := @parameter0: android.hardware.input.InputManager$InputDeviceListener;

        r1 := @parameter1: android.os.Handler;

        if r7 == null goto label7;

        r2 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<android.hardware.input.InputManager: void populateInputDevicesLocked()>();

        $i0 = specialinvoke r0.<android.hardware.input.InputManager: int findInputDeviceListenerLocked(android.hardware.input.InputManager$InputDeviceListener)>(r7);

        if $i0 >= 0 goto label2;

        r3 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        r4 = new android.hardware.input.InputManager$InputDeviceListenerDelegate;

        specialinvoke r4.<android.hardware.input.InputManager$InputDeviceListenerDelegate: void <init>(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>(r7, r1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r6;

     label7:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void registerOnTabletModeChangedListener(android.hardware.input.InputManager$OnTabletModeChangedListener, android.os.Handler)
    {
        android.hardware.input.InputManager r0;
        android.os.Handler r1;
        java.lang.Object r2;
        android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate r3;
        java.lang.IllegalArgumentException $r4;
        java.util.List $r5, $r6;
        int $i0;
        java.lang.Throwable $r7;
        android.hardware.input.InputManager$OnTabletModeChangedListener r8;

        r0 := @this: android.hardware.input.InputManager;

        r8 := @parameter0: android.hardware.input.InputManager$OnTabletModeChangedListener;

        r1 := @parameter1: android.os.Handler;

        if r8 == null goto label8;

        r2 = r0.<android.hardware.input.InputManager: java.lang.Object mTabletModeLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners>;

        if $r5 != null goto label2;

        specialinvoke r0.<android.hardware.input.InputManager: void initializeTabletModeListenerLocked()>();

     label2:
        $i0 = specialinvoke r0.<android.hardware.input.InputManager: int findOnTabletModeChangedListenerLocked(android.hardware.input.InputManager$OnTabletModeChangedListener)>(r8);

        if $i0 >= 0 goto label3;

        r3 = new android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate;

        specialinvoke r3.<android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate: void <init>(android.hardware.input.InputManager$OnTabletModeChangedListener,android.os.Handler)>(r8, r1);

        $r6 = r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r7;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2, $r3;
        android.hardware.input.IInputManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.input.InputDeviceIdentifier r7;

        r0 := @this: android.hardware.input.InputManager;

        r7 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 := @parameter1: java.lang.String;

        if r7 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>(r7, r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removePortAssociation(java.lang.String)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r1.<android.hardware.input.IInputManager: void removePortAssociation(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestPointerCapture(android.os.IBinder, boolean)
    {
        android.hardware.input.InputManager r0;
        boolean z0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r1.<android.hardware.input.IInputManager: void requestPointerCapture(android.os.IBinder,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2, $r3;
        android.hardware.input.IInputManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.input.InputDeviceIdentifier r7;

        r0 := @this: android.hardware.input.InputManager;

        r7 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 := @parameter1: java.lang.String;

        if r7 == null goto label5;

        if r1 == null goto label4;

     label1:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>(r7, r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier must not be null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCustomPointerIcon(android.view.PointerIcon)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.view.PointerIcon r4;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: android.view.PointerIcon;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r1.<android.hardware.input.IInputManager: void setCustomPointerIcon(android.view.PointerIcon)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPointerIconType(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.IInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r2.<android.hardware.input.IInputManager: void setPointerIconType(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPointerSpeed(android.content.Context, int)
    {
        android.hardware.input.InputManager r0;
        android.content.Context r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.content.ContentResolver $r3;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        if i0 < -7 goto label1;

        if i0 > 7 goto label1;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r3, "pointer_speed", i0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("speed out of range");

        throw $r2;
    }

    public void setTouchCalibration(java.lang.String, int, android.hardware.input.TouchCalibration)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.TouchCalibration r1;
        android.hardware.input.IInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.hardware.input.InputManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.hardware.input.TouchCalibration;

     label1:
        $r2 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r2.<android.hardware.input.IInputManager: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>(r5, i0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void tryPointerSpeed(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.hardware.input.IInputManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        if i0 < -7 goto label4;

        if i0 > 7 goto label4;

     label1:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r3.<android.hardware.input.IInputManager: void tryPointerSpeed(int)>(i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("speed out of range");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener)
    {
        android.hardware.input.InputManager r0;
        java.lang.Object r1, $r4;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.util.ArrayList $r3, $r6;
        android.hardware.input.InputManager$InputDeviceListenerDelegate $r5;
        java.lang.Throwable $r8;
        android.hardware.input.InputManager$InputDeviceListener r9;

        r0 := @this: android.hardware.input.InputManager;

        r9 := @parameter0: android.hardware.input.InputManager$InputDeviceListener;

        if r9 == null goto label9;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label1:
        i0 = specialinvoke r0.<android.hardware.input.InputManager: int findInputDeviceListenerLocked(android.hardware.input.InputManager$InputDeviceListener)>(r9);

     label2:
        if i0 < 0 goto label4;

     label3:
        $r3 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r5 = (android.hardware.input.InputManager$InputDeviceListenerDelegate) $r4;

        virtualinvoke $r5.<android.hardware.input.InputManager$InputDeviceListenerDelegate: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r6 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void unregisterOnTabletModeChangedListener(android.hardware.input.InputManager$OnTabletModeChangedListener)
    {
        android.hardware.input.InputManager r0;
        java.lang.Object r1, $r4;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.util.List $r3;
        android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate $r5;
        java.lang.Throwable $r6;
        android.hardware.input.InputManager$OnTabletModeChangedListener r7;

        r0 := @this: android.hardware.input.InputManager;

        r7 := @parameter0: android.hardware.input.InputManager$OnTabletModeChangedListener;

        if r7 == null goto label9;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mTabletModeLock>;

        entermonitor r1;

     label1:
        i0 = specialinvoke r0.<android.hardware.input.InputManager: int findOnTabletModeChangedListenerLocked(android.hardware.input.InputManager$OnTabletModeChangedListener)>(r7);

     label2:
        if i0 < 0 goto label4;

     label3:
        $r3 = r0.<android.hardware.input.InputManager: java.util.List mOnTabletModeChangedListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>(i0);

        $r5 = (android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate) $r4;

        virtualinvoke $r5.<android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate: void removeCallbacksAndMessages(java.lang.Object)>(null);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.view.InputEvent r4;
        android.view.VerifiedInputEvent r5;

        r0 := @this: android.hardware.input.InputManager;

        r4 := @parameter0: android.view.InputEvent;

     label1:
        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r5 = interfaceinvoke $r1.<android.hardware.input.IInputManager: android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.input.InputManager: java.lang.String TAG> = "InputManager";

        <android.hardware.input.InputManager: int SWITCH_STATE_UNKNOWN> = -1;

        <android.hardware.input.InputManager: int SWITCH_STATE_ON> = 1;

        <android.hardware.input.InputManager: int SWITCH_STATE_OFF> = 0;

        <android.hardware.input.InputManager: int MSG_DEVICE_REMOVED> = 2;

        <android.hardware.input.InputManager: int MSG_DEVICE_CHANGED> = 3;

        <android.hardware.input.InputManager: int MSG_DEVICE_ADDED> = 1;

        <android.hardware.input.InputManager: int MIN_POINTER_SPEED> = -7;

        <android.hardware.input.InputManager: java.lang.String META_DATA_KEYBOARD_LAYOUTS> = "android.hardware.input.metadata.KEYBOARD_LAYOUTS";

        <android.hardware.input.InputManager: int MAX_POINTER_SPEED> = 7;

        <android.hardware.input.InputManager: int INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT> = 1;

        <android.hardware.input.InputManager: int INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH> = 2;

        <android.hardware.input.InputManager: int INJECT_INPUT_EVENT_MODE_ASYNC> = 0;

        <android.hardware.input.InputManager: int DEFAULT_POINTER_SPEED> = 0;

        <android.hardware.input.InputManager: boolean DEBUG> = 0;

        <android.hardware.input.InputManager: java.lang.String ACTION_QUERY_KEYBOARD_LAYOUTS> = "android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS";

        return;
    }
}
