public class android.hardware.location.ContextHubClient extends java.lang.Object implements java.io.Closeable
{
    private static final java.lang.String TAG;
    private final android.hardware.location.ContextHubInfo mAttachedHub;
    private android.hardware.location.IContextHubClient mClientProxy;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.util.concurrent.atomic.AtomicBoolean mIsClosed;
    private final boolean mPersistent;

    void <init>(android.hardware.location.ContextHubInfo, boolean)
    {
        android.hardware.location.ContextHubClient r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        android.hardware.location.ContextHubInfo r2;
        dalvik.system.CloseGuard r3;

        r0 := @this: android.hardware.location.ContextHubClient;

        r2 := @parameter0: android.hardware.location.ContextHubInfo;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.location.ContextHubClient: android.hardware.location.IContextHubClient mClientProxy> = null;

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.hardware.location.ContextHubClient: java.util.concurrent.atomic.AtomicBoolean mIsClosed> = $r1;

        r0.<android.hardware.location.ContextHubClient: android.hardware.location.ContextHubInfo mAttachedHub> = r2;

        r0.<android.hardware.location.ContextHubClient: boolean mPersistent> = z0;

        if z0 == 0 goto label1;

        r0.<android.hardware.location.ContextHubClient: dalvik.system.CloseGuard mCloseGuard> = null;

        goto label2;

     label1:
        r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.hardware.location.ContextHubClient: dalvik.system.CloseGuard mCloseGuard> = r3;

        virtualinvoke r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

     label2:
        return;
    }

    public void close()
    {
        android.hardware.location.ContextHubClient r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        android.hardware.location.IContextHubClient $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        dalvik.system.CloseGuard r5;

        r0 := @this: android.hardware.location.ContextHubClient;

        $r1 = r0.<android.hardware.location.ContextHubClient: java.util.concurrent.atomic.AtomicBoolean mIsClosed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 != 0 goto label4;

        r5 = r0.<android.hardware.location.ContextHubClient: dalvik.system.CloseGuard mCloseGuard>;

        if r5 == null goto label1;

        virtualinvoke r5.<dalvik.system.CloseGuard: void close()>();

     label1:
        $r2 = r0.<android.hardware.location.ContextHubClient: android.hardware.location.IContextHubClient mClientProxy>;

        interfaceinvoke $r2.<android.hardware.location.IContextHubClient: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.location.ContextHubClient r0;
        dalvik.system.CloseGuard $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.location.ContextHubClient;

     label1:
        $r2 = r0.<android.hardware.location.ContextHubClient: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.hardware.location.ContextHubClient: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        $z0 = r0.<android.hardware.location.ContextHubClient: boolean mPersistent>;

        if $z0 != 0 goto label3;

        virtualinvoke r0.<android.hardware.location.ContextHubClient: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.hardware.location.ContextHubInfo getAttachedHub()
    {
        android.hardware.location.ContextHubClient r0;
        android.hardware.location.ContextHubInfo $r1;

        r0 := @this: android.hardware.location.ContextHubClient;

        $r1 = r0.<android.hardware.location.ContextHubClient: android.hardware.location.ContextHubInfo mAttachedHub>;

        return $r1;
    }

    public int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)
    {
        android.hardware.location.ContextHubClient r0;
        byte[] r1;
        android.hardware.location.ContextHubInfo $r3;
        android.hardware.location.IContextHubClient $r4;
        int $i0, $i1, i3, i4;
        java.lang.StringBuilder $r5;
        java.lang.String $r11;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        android.hardware.location.NanoAppMessage r14;

        r0 := @this: android.hardware.location.ContextHubClient;

        r14 := @parameter0: android.hardware.location.NanoAppMessage;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "NanoAppMessage cannot be null");

        $r3 = r0.<android.hardware.location.ContextHubClient: android.hardware.location.ContextHubInfo mAttachedHub>;

        i3 = virtualinvoke $r3.<android.hardware.location.ContextHubInfo: int getMaxPacketLengthBytes()>();

        r1 = virtualinvoke r14.<android.hardware.location.NanoAppMessage: byte[] getMessageBody()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= i3 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message (");

        $i1 = lengthof r1;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes) exceeds max payload length (");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes)");

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ContextHubClient", $r11);

        return 2;

     label1:
        $r4 = r0.<android.hardware.location.ContextHubClient: android.hardware.location.IContextHubClient mClientProxy>;

        i4 = interfaceinvoke $r4.<android.hardware.location.IContextHubClient: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)>(r14);

     label2:
        return i4;

     label3:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void setClientProxy(android.hardware.location.IContextHubClient)
    {
        android.hardware.location.ContextHubClient r0;
        android.hardware.location.IContextHubClient r1, $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.hardware.location.ContextHubClient;

        r1 := @parameter0: android.hardware.location.IContextHubClient;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "IContextHubClient cannot be null");

        $r3 = r0.<android.hardware.location.ContextHubClient: android.hardware.location.IContextHubClient mClientProxy>;

        if $r3 != null goto label1;

        r0.<android.hardware.location.ContextHubClient: android.hardware.location.IContextHubClient mClientProxy> = r1;

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot change client proxy multiple times");

        throw $r4;
    }

    public static void <clinit>()
    {
        <android.hardware.location.ContextHubClient: java.lang.String TAG> = "ContextHubClient";

        return;
    }
}
