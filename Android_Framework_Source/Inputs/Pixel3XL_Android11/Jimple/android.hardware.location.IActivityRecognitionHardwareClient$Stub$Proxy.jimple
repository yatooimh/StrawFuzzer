class android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy extends java.lang.Object implements android.hardware.location.IActivityRecognitionHardwareClient
{
    public static android.hardware.location.IActivityRecognitionHardwareClient sDefaultImpl;
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy;

        $r1 = r0.<android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy r0;

        r0 := @this: android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy;

        return "android.hardware.location.IActivityRecognitionHardwareClient";
    }

    public void onAvailabilityChanged(boolean, android.hardware.location.IActivityRecognitionHardware) throws android.os.RemoteException
    {
        android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1;
        android.os.IBinder $r2, r7;
        android.hardware.location.IActivityRecognitionHardwareClient $r3, $r4;
        java.lang.Throwable $r5;
        android.hardware.location.IActivityRecognitionHardware r6;
        byte b0;

        r0 := @this: android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy;

        z0 := @parameter0: boolean;

        r6 := @parameter1: android.hardware.location.IActivityRecognitionHardware;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.hardware.location.IActivityRecognitionHardwareClient");

     label02:
        if z0 == 0 goto label03;

        b0 = 1;

        goto label04;

     label03:
        b0 = 0;

     label04:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

     label05:
        if r6 == null goto label08;

     label06:
        r7 = interfaceinvoke r6.<android.hardware.location.IActivityRecognitionHardware: android.os.IBinder asBinder()>();

     label07:
        goto label09;

     label08:
        r7 = null;

     label09:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r7);

        $r2 = r0.<android.hardware.location.IActivityRecognitionHardwareClient$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r2.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r1, null, 1);

        if $z1 != 0 goto label11;

        $r3 = staticinvoke <android.hardware.location.IActivityRecognitionHardwareClient$Stub: android.hardware.location.IActivityRecognitionHardwareClient getDefaultImpl()>();

        if $r3 == null goto label11;

        $r4 = staticinvoke <android.hardware.location.IActivityRecognitionHardwareClient$Stub: android.hardware.location.IActivityRecognitionHardwareClient getDefaultImpl()>();

        interfaceinvoke $r4.<android.hardware.location.IActivityRecognitionHardwareClient: void onAvailabilityChanged(boolean,android.hardware.location.IActivityRecognitionHardware)>(z0, r6);

     label10:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label11:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label12:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
    }
}
