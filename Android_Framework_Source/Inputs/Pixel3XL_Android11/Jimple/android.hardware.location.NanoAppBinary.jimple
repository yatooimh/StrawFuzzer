public final class android.hardware.location.NanoAppBinary extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private static final int EXPECTED_HEADER_VERSION;
    private static final int EXPECTED_MAGIC_VALUE;
    private static final java.nio.ByteOrder HEADER_ORDER;
    private static final int HEADER_SIZE_BYTES;
    private static final int NANOAPP_ENCRYPTED_FLAG_BIT;
    private static final int NANOAPP_SIGNED_FLAG_BIT;
    private static final java.lang.String TAG;
    private int mFlags;
    private boolean mHasValidHeader;
    private int mHeaderVersion;
    private long mHwHubType;
    private int mMagic;
    private byte[] mNanoAppBinary;
    private long mNanoAppId;
    private int mNanoAppVersion;
    private byte mTargetChreApiMajorVersion;
    private byte mTargetChreApiMinorVersion;

    static void <clinit>()
    {
        java.nio.ByteOrder $r0;
        android.hardware.location.NanoAppBinary$1 $r1;

        <android.hardware.location.NanoAppBinary: java.lang.String TAG> = "NanoAppBinary";

        <android.hardware.location.NanoAppBinary: int NANOAPP_SIGNED_FLAG_BIT> = 1;

        <android.hardware.location.NanoAppBinary: int NANOAPP_ENCRYPTED_FLAG_BIT> = 2;

        <android.hardware.location.NanoAppBinary: int HEADER_SIZE_BYTES> = 40;

        <android.hardware.location.NanoAppBinary: int EXPECTED_MAGIC_VALUE> = 1330528590;

        <android.hardware.location.NanoAppBinary: int EXPECTED_HEADER_VERSION> = 1;

        $r0 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        <android.hardware.location.NanoAppBinary: java.nio.ByteOrder HEADER_ORDER> = $r0;

        $r1 = new android.hardware.location.NanoAppBinary$1;

        specialinvoke $r1.<android.hardware.location.NanoAppBinary$1: void <init>()>();

        <android.hardware.location.NanoAppBinary: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.hardware.location.NanoAppBinary r0;
        android.os.Parcel r1;
        byte[] r2;
        int $i0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.location.NanoAppBinary: boolean mHasValidHeader> = 0;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r2 = newarray (byte)[$i0];

        r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary> = r2;

        virtualinvoke r1.<android.os.Parcel: void readByteArray(byte[])>(r2);

        specialinvoke r0.<android.hardware.location.NanoAppBinary: void parseBinaryHeader()>();

        return;
    }

    void <init>(android.os.Parcel, android.hardware.location.NanoAppBinary$1)
    {
        android.hardware.location.NanoAppBinary r0;
        android.os.Parcel r1;
        android.hardware.location.NanoAppBinary$1 r2;

        r0 := @this: android.hardware.location.NanoAppBinary;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.hardware.location.NanoAppBinary$1;

        specialinvoke r0.<android.hardware.location.NanoAppBinary: void <init>(android.os.Parcel)>(r1);

        return;
    }

    public void <init>(byte[])
    {
        android.hardware.location.NanoAppBinary r0;
        byte[] r1;

        r0 := @this: android.hardware.location.NanoAppBinary;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.location.NanoAppBinary: boolean mHasValidHeader> = 0;

        r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary> = r1;

        specialinvoke r0.<android.hardware.location.NanoAppBinary: void parseBinaryHeader()>();

        return;
    }

    private void parseBinaryHeader()
    {
        android.hardware.location.NanoAppBinary r0;
        int i0, $i1, $i3, $i4, $i8, $i9, $i11;
        byte[] $r1;
        java.nio.ByteBuffer $r2, r24;
        java.nio.ByteOrder $r3;
        long $l2, $l5;
        byte $b6, $b7;
        java.lang.StringBuilder $r4, r25;
        java.lang.Object[] $r6, $r11;
        java.lang.Integer $r7, $r12;
        java.lang.String $r8, $r13, $r16, $r22;
        java.lang.Throwable $r23;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $r1 = r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary>;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $r3 = <android.hardware.location.NanoAppBinary: java.nio.ByteOrder HEADER_ORDER>;

        r24 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        r0.<android.hardware.location.NanoAppBinary: boolean mHasValidHeader> = 0;

     label1:
        i0 = virtualinvoke r24.<java.nio.ByteBuffer: int getInt()>();

        r0.<android.hardware.location.NanoAppBinary: int mHeaderVersion> = i0;

     label2:
        if i0 == 1 goto label5;

     label3:
        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected header version ");

        $i11 = r0.<android.hardware.location.NanoAppBinary: int mHeaderVersion>;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while parsing header (expected ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NanoAppBinary", $r22);

     label4:
        return;

     label5:
        $i1 = virtualinvoke r24.<java.nio.ByteBuffer: int getInt()>();

        r0.<android.hardware.location.NanoAppBinary: int mMagic> = $i1;

        $l2 = virtualinvoke r24.<java.nio.ByteBuffer: long getLong()>();

        r0.<android.hardware.location.NanoAppBinary: long mNanoAppId> = $l2;

        $i3 = virtualinvoke r24.<java.nio.ByteBuffer: int getInt()>();

        r0.<android.hardware.location.NanoAppBinary: int mNanoAppVersion> = $i3;

        $i4 = virtualinvoke r24.<java.nio.ByteBuffer: int getInt()>();

        r0.<android.hardware.location.NanoAppBinary: int mFlags> = $i4;

        $l5 = virtualinvoke r24.<java.nio.ByteBuffer: long getLong()>();

        r0.<android.hardware.location.NanoAppBinary: long mHwHubType> = $l5;

        $b6 = virtualinvoke r24.<java.nio.ByteBuffer: byte get()>();

        r0.<android.hardware.location.NanoAppBinary: byte mTargetChreApiMajorVersion> = $b6;

        $b7 = virtualinvoke r24.<java.nio.ByteBuffer: byte get()>();

        r0.<android.hardware.location.NanoAppBinary: byte mTargetChreApiMinorVersion> = $b7;

     label6:
        $i8 = r0.<android.hardware.location.NanoAppBinary: int mMagic>;

        if $i8 == 1330528590 goto label7;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected magic value ");

        $r6 = newarray (java.lang.Object)[1];

        $i9 = r0.<android.hardware.location.NanoAppBinary: int mMagic>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0x%08X", $r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("while parsing header (expected ");

        $r11 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1330528590);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0x%08X", $r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NanoAppBinary", $r16);

        goto label8;

     label7:
        r0.<android.hardware.location.NanoAppBinary: boolean mHasValidHeader> = 1;

     label8:
        return;

     label9:
        $r23 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NanoAppBinary", "Not enough contents in nanoapp header");

        return;

        catch java.nio.BufferUnderflowException from label1 to label2 with label9;
        catch java.nio.BufferUnderflowException from label3 to label4 with label9;
        catch java.nio.BufferUnderflowException from label5 to label6 with label9;
    }

    public int describeContents()
    {
        android.hardware.location.NanoAppBinary r0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        return 0;
    }

    public byte[] getBinary()
    {
        android.hardware.location.NanoAppBinary r0;
        byte[] $r1;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $r1 = r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary>;

        return $r1;
    }

    public byte[] getBinaryNoHeader()
    {
        android.hardware.location.NanoAppBinary r0;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r1;
        byte[] $r3, $r10, r11;
        java.lang.IndexOutOfBoundsException $r8;
        java.lang.String $r9;

        r0 := @this: android.hardware.location.NanoAppBinary;

        r11 = r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary>;

        $i0 = lengthof r11;

        if $i0 < 40 goto label1;

        $i2 = lengthof r11;

        $r10 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r11, 40, $i2);

        return $r10;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NanoAppBinary binary byte size (");

        $r3 = r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary>;

        $i1 = lengthof $r3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is less than header size (");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(40);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public int getFlags()
    {
        android.hardware.location.NanoAppBinary r0;
        int $i0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $i0 = r0.<android.hardware.location.NanoAppBinary: int mFlags>;

        return $i0;
    }

    public int getHeaderVersion()
    {
        android.hardware.location.NanoAppBinary r0;
        int $i0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $i0 = r0.<android.hardware.location.NanoAppBinary: int mHeaderVersion>;

        return $i0;
    }

    public long getHwHubType()
    {
        android.hardware.location.NanoAppBinary r0;
        long $l0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $l0 = r0.<android.hardware.location.NanoAppBinary: long mHwHubType>;

        return $l0;
    }

    public long getNanoAppId()
    {
        android.hardware.location.NanoAppBinary r0;
        long $l0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $l0 = r0.<android.hardware.location.NanoAppBinary: long mNanoAppId>;

        return $l0;
    }

    public int getNanoAppVersion()
    {
        android.hardware.location.NanoAppBinary r0;
        int $i0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $i0 = r0.<android.hardware.location.NanoAppBinary: int mNanoAppVersion>;

        return $i0;
    }

    public byte getTargetChreApiMajorVersion()
    {
        android.hardware.location.NanoAppBinary r0;
        byte $b0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $b0 = r0.<android.hardware.location.NanoAppBinary: byte mTargetChreApiMajorVersion>;

        return $b0;
    }

    public byte getTargetChreApiMinorVersion()
    {
        android.hardware.location.NanoAppBinary r0;
        byte $b0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $b0 = r0.<android.hardware.location.NanoAppBinary: byte mTargetChreApiMinorVersion>;

        return $b0;
    }

    public boolean hasValidHeader()
    {
        android.hardware.location.NanoAppBinary r0;
        boolean $z0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $z0 = r0.<android.hardware.location.NanoAppBinary: boolean mHasValidHeader>;

        return $z0;
    }

    public boolean isEncrypted()
    {
        android.hardware.location.NanoAppBinary r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        $i0 = r0.<android.hardware.location.NanoAppBinary: int mFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSigned()
    {
        android.hardware.location.NanoAppBinary r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.hardware.location.NanoAppBinary;

        i0 = r0.<android.hardware.location.NanoAppBinary: int mFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.hardware.location.NanoAppBinary r0;
        android.os.Parcel r1;
        int i0, $i1;
        byte[] $r2, $r3;

        r0 := @this: android.hardware.location.NanoAppBinary;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary>;

        $i1 = lengthof $r2;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r3 = r0.<android.hardware.location.NanoAppBinary: byte[] mNanoAppBinary>;

        virtualinvoke r1.<android.os.Parcel: void writeByteArray(byte[])>($r3);

        return;
    }
}
