public class android.hardware.radio.RadioManager extends java.lang.Object
{
    public static final int BAND_AM;
    public static final int BAND_AM_HD;
    public static final int BAND_FM;
    public static final int BAND_FM_HD;
    public static final int BAND_INVALID;
    public static final int CLASS_AM_FM;
    public static final int CLASS_DT;
    public static final int CLASS_SAT;
    public static final int CONFIG_DAB_DAB_LINKING;
    public static final int CONFIG_DAB_DAB_SOFT_LINKING;
    public static final int CONFIG_DAB_FM_LINKING;
    public static final int CONFIG_DAB_FM_SOFT_LINKING;
    public static final int CONFIG_FORCE_ANALOG;
    public static final int CONFIG_FORCE_DIGITAL;
    public static final int CONFIG_FORCE_MONO;
    public static final int CONFIG_RDS_AF;
    public static final int CONFIG_RDS_REG;
    public static final int REGION_ITU_1;
    public static final int REGION_ITU_2;
    public static final int REGION_JAPAN;
    public static final int REGION_KOREA;
    public static final int REGION_OIRT;
    public static final int STATUS_BAD_VALUE;
    public static final int STATUS_DEAD_OBJECT;
    public static final int STATUS_ERROR;
    public static final int STATUS_INVALID_OPERATION;
    public static final int STATUS_NO_INIT;
    public static final int STATUS_OK;
    public static final int STATUS_PERMISSION_DENIED;
    public static final int STATUS_TIMED_OUT;
    private static final java.lang.String TAG;
    private final java.util.Map mAnnouncementListeners;
    private final android.content.Context mContext;
    private final android.hardware.radio.IRadioService mService;

    public void <init>(android.content.Context) throws android.os.ServiceManager$ServiceNotFoundException
    {
        android.hardware.radio.RadioManager r0;
        android.content.Context r1;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        android.hardware.radio.IRadioService $r4;

        r0 := @this: android.hardware.radio.RadioManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.radio.RadioManager: java.util.Map mAnnouncementListeners> = $r2;

        r0.<android.hardware.radio.RadioManager: android.content.Context mContext> = r1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("broadcastradio");

        $r4 = staticinvoke <android.hardware.radio.IRadioService$Stub: android.hardware.radio.IRadioService asInterface(android.os.IBinder)>($r3);

        r0.<android.hardware.radio.RadioManager: android.hardware.radio.IRadioService mService> = $r4;

        return;
    }

    static void lambda$addAnnouncementListener$0(java.lang.Runnable)
    {
        java.lang.Runnable r0;

        r0 := @parameter0: java.lang.Runnable;

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        return;
    }

    private native int nativeListModules(java.util.List);

    public void addAnnouncementListener(java.util.Set, android.hardware.radio.Announcement$OnListUpdatedListener)
    {
        android.hardware.radio.RadioManager r0;
        java.util.Set r1;
        android.hardware.radio.Announcement$OnListUpdatedListener r2;
        android.hardware.radio.'-$$Lambda$RadioManager$cfMLnpQqL72UMrjmCGbrhAOHHgg' $r3;
        java.util.concurrent.Executor r4;

        r0 := @this: android.hardware.radio.RadioManager;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: android.hardware.radio.Announcement$OnListUpdatedListener;

        $r3 = <android.hardware.radio._$$Lambda$RadioManager$cfMLnpQqL72UMrjmCGbrhAOHHgg: android.hardware.radio.'-$$Lambda$RadioManager$cfMLnpQqL72UMrjmCGbrhAOHHgg' INSTANCE>;

        r4 = (java.util.concurrent.Executor) $r3;

        virtualinvoke r0.<android.hardware.radio.RadioManager: void addAnnouncementListener(java.util.concurrent.Executor,java.util.Set,android.hardware.radio.Announcement$OnListUpdatedListener)>(r4, r1, r2);

        return;
    }

    public void addAnnouncementListener(java.util.concurrent.Executor, java.util.Set, android.hardware.radio.Announcement$OnListUpdatedListener)
    {
        android.hardware.radio.RadioManager r0;
        android.hardware.radio.Announcement$OnListUpdatedListener r1;
        java.util.Map r3, $r12;
        java.util.stream.Stream $r6;
        android.hardware.radio.'-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw' $r7;
        java.util.stream.IntStream $r8;
        android.hardware.radio.IRadioService $r10;
        java.lang.Object $r13;
        java.lang.Throwable $r14;
        android.os.RemoteException $r15;
        java.util.concurrent.Executor r17;
        java.util.Set r18;
        int[] r19;
        android.hardware.radio.ICloseHandle r20, r21, r24;
        android.hardware.radio.RadioManager$1 r25;
        java.util.function.ToIntFunction r26;

        r0 := @this: android.hardware.radio.RadioManager;

        r17 := @parameter0: java.util.concurrent.Executor;

        r18 := @parameter1: java.util.Set;

        r1 := @parameter2: android.hardware.radio.Announcement$OnListUpdatedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r17);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r6 = interfaceinvoke r18.<java.util.Set: java.util.stream.Stream stream()>();

        $r7 = <android.hardware.radio._$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw: android.hardware.radio.'-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw' INSTANCE>;

        r26 = (java.util.function.ToIntFunction) $r7;

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>(r26);

        r19 = interfaceinvoke $r8.<java.util.stream.IntStream: int[] toArray()>();

        r25 = new android.hardware.radio.RadioManager$1;

        specialinvoke r25.<android.hardware.radio.RadioManager$1: void <init>(android.hardware.radio.RadioManager,java.util.concurrent.Executor,android.hardware.radio.Announcement$OnListUpdatedListener)>(r0, r17, r1);

        r3 = r0.<android.hardware.radio.RadioManager: java.util.Map mAnnouncementListeners>;

        entermonitor r3;

        r20 = null;

     label01:
        $r10 = r0.<android.hardware.radio.RadioManager: android.hardware.radio.IRadioService mService>;

        r21 = interfaceinvoke $r10.<android.hardware.radio.IRadioService: android.hardware.radio.ICloseHandle addAnnouncementListener(int[],android.hardware.radio.IAnnouncementListener)>(r19, r25);

     label02:
        r20 = r21;

        goto label06;

     label03:
        $r14 := @caughtexception;

        goto label11;

     label04:
        $r15 := @caughtexception;

     label05:
        virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label06:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r20);

        $r12 = r0.<android.hardware.radio.RadioManager: java.util.Map mAnnouncementListeners>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r20);

        r24 = (android.hardware.radio.ICloseHandle) $r13;

     label07:
        if r24 == null goto label09;

     label08:
        staticinvoke <android.hardware.radio.Utils: void close(android.hardware.radio.ICloseHandle)>(r24);

     label09:
        exitmonitor r3;

     label10:
        return;

     label11:
        exitmonitor r3;

     label12:
        throw $r14;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
        catch java.lang.Throwable from label11 to label12 with label03;
    }

    public int listModules(java.util.List)
    {
        android.hardware.radio.RadioManager r0;
        java.util.List r1, r4;
        android.hardware.radio.IRadioService $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.hardware.radio.RadioManager;

        r4 := @parameter0: java.util.List;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BroadcastRadio.manager", "the output list must not be empty");

        return -22;

     label1:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BroadcastRadio.manager", "Listing available tuners...");

     label2:
        $r2 = r0.<android.hardware.radio.RadioManager: android.hardware.radio.IRadioService mService>;

        r1 = interfaceinvoke $r2.<android.hardware.radio.IRadioService: java.util.List listModules()>();

     label3:
        if r1 != null goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BroadcastRadio.manager", "Returned list was a null");

        return -2147483648;

     label4:
        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return 0;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BroadcastRadio.manager", "Failed listing available tuners", $r3);

        return -32;

        catch android.os.RemoteException from label2 to label3 with label5;
    }

    public android.hardware.radio.RadioTuner openTuner(int, android.hardware.radio.RadioManager$BandConfig, boolean, android.hardware.radio.RadioTuner$Callback, android.os.Handler)
    {
        android.hardware.radio.RadioManager r0;
        boolean z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        android.hardware.radio.TunerCallbackAdapter $r8;
        android.hardware.radio.IRadioService $r9;
        android.hardware.radio.TunerAdapter $r10;
        java.lang.Throwable $r11;
        int i3, i4;
        android.hardware.radio.RadioManager$BandConfig r12;
        android.hardware.radio.RadioTuner$Callback r13;
        android.os.Handler r14;
        android.hardware.radio.ITuner r16;

        r0 := @this: android.hardware.radio.RadioManager;

        i3 := @parameter0: int;

        r12 := @parameter1: android.hardware.radio.RadioManager$BandConfig;

        z0 := @parameter2: boolean;

        r13 := @parameter3: android.hardware.radio.RadioTuner$Callback;

        r14 := @parameter4: android.os.Handler;

        if r13 == null goto label7;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening tuner ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BroadcastRadio.manager", $r7);

        $r8 = new android.hardware.radio.TunerCallbackAdapter;

        specialinvoke $r8.<android.hardware.radio.TunerCallbackAdapter: void <init>(android.hardware.radio.RadioTuner$Callback,android.os.Handler)>(r13, r14);

     label1:
        $r9 = r0.<android.hardware.radio.RadioManager: android.hardware.radio.IRadioService mService>;

        r16 = interfaceinvoke $r9.<android.hardware.radio.IRadioService: android.hardware.radio.ITuner openTuner(int,android.hardware.radio.RadioManager$BandConfig,boolean,android.hardware.radio.ITunerCallback)>(i3, r12, z0, $r8);

     label2:
        if r16 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BroadcastRadio.manager", "Failed to open tuner");

        return null;

     label3:
        if r12 == null goto label4;

        i4 = virtualinvoke r12.<android.hardware.radio.RadioManager$BandConfig: int getType()>();

        goto label5;

     label4:
        i4 = -1;

     label5:
        $r10 = new android.hardware.radio.TunerAdapter;

        specialinvoke $r10.<android.hardware.radio.TunerAdapter: void <init>(android.hardware.radio.ITuner,android.hardware.radio.TunerCallbackAdapter,int)>(r16, $r8, i4);

        return $r10;

     label6:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BroadcastRadio.manager", "Failed to open tuner", $r11);

        return null;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be empty");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
        catch java.lang.IllegalStateException from label1 to label2 with label6;
    }

    public void removeAnnouncementListener(android.hardware.radio.Announcement$OnListUpdatedListener)
    {
        android.hardware.radio.RadioManager r0;
        java.util.Map r1, $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        android.hardware.radio.Announcement$OnListUpdatedListener r6;
        android.hardware.radio.ICloseHandle r7;

        r0 := @this: android.hardware.radio.RadioManager;

        r6 := @parameter0: android.hardware.radio.Announcement$OnListUpdatedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        r1 = r0.<android.hardware.radio.RadioManager: java.util.Map mAnnouncementListeners>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.hardware.radio.RadioManager: java.util.Map mAnnouncementListeners>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6);

        r7 = (android.hardware.radio.ICloseHandle) $r4;

     label2:
        if r7 == null goto label4;

     label3:
        staticinvoke <android.hardware.radio.Utils: void close(android.hardware.radio.ICloseHandle)>(r7);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <android.hardware.radio.RadioManager: java.lang.String TAG> = "BroadcastRadio.manager";

        <android.hardware.radio.RadioManager: int STATUS_TIMED_OUT> = -110;

        <android.hardware.radio.RadioManager: int STATUS_PERMISSION_DENIED> = -1;

        <android.hardware.radio.RadioManager: int STATUS_OK> = 0;

        <android.hardware.radio.RadioManager: int STATUS_NO_INIT> = -19;

        <android.hardware.radio.RadioManager: int STATUS_INVALID_OPERATION> = -38;

        <android.hardware.radio.RadioManager: int STATUS_ERROR> = -2147483648;

        <android.hardware.radio.RadioManager: int STATUS_DEAD_OBJECT> = -32;

        <android.hardware.radio.RadioManager: int STATUS_BAD_VALUE> = -22;

        <android.hardware.radio.RadioManager: int REGION_OIRT> = 2;

        <android.hardware.radio.RadioManager: int REGION_KOREA> = 4;

        <android.hardware.radio.RadioManager: int REGION_JAPAN> = 3;

        <android.hardware.radio.RadioManager: int REGION_ITU_2> = 1;

        <android.hardware.radio.RadioManager: int REGION_ITU_1> = 0;

        <android.hardware.radio.RadioManager: int CONFIG_RDS_REG> = 5;

        <android.hardware.radio.RadioManager: int CONFIG_RDS_AF> = 4;

        <android.hardware.radio.RadioManager: int CONFIG_FORCE_MONO> = 1;

        <android.hardware.radio.RadioManager: int CONFIG_FORCE_DIGITAL> = 3;

        <android.hardware.radio.RadioManager: int CONFIG_FORCE_ANALOG> = 2;

        <android.hardware.radio.RadioManager: int CONFIG_DAB_FM_SOFT_LINKING> = 9;

        <android.hardware.radio.RadioManager: int CONFIG_DAB_FM_LINKING> = 7;

        <android.hardware.radio.RadioManager: int CONFIG_DAB_DAB_SOFT_LINKING> = 8;

        <android.hardware.radio.RadioManager: int CONFIG_DAB_DAB_LINKING> = 6;

        <android.hardware.radio.RadioManager: int CLASS_SAT> = 1;

        <android.hardware.radio.RadioManager: int CLASS_DT> = 2;

        <android.hardware.radio.RadioManager: int CLASS_AM_FM> = 0;

        <android.hardware.radio.RadioManager: int BAND_INVALID> = -1;

        <android.hardware.radio.RadioManager: int BAND_FM_HD> = 2;

        <android.hardware.radio.RadioManager: int BAND_FM> = 1;

        <android.hardware.radio.RadioManager: int BAND_AM_HD> = 3;

        <android.hardware.radio.RadioManager: int BAND_AM> = 0;

        return;
    }
}
