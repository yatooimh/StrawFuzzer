public abstract class android.hardware.radio.RadioTuner extends java.lang.Object
{
    public static final int DIRECTION_DOWN;
    public static final int DIRECTION_UP;
    public static final int ERROR_BACKGROUND_SCAN_FAILED;
    public static final int ERROR_BACKGROUND_SCAN_UNAVAILABLE;
    public static final int ERROR_CANCELLED;
    public static final int ERROR_CONFIG;
    public static final int ERROR_HARDWARE_FAILURE;
    public static final int ERROR_SCAN_TIMEOUT;
    public static final int ERROR_SERVER_DIED;

    public void <init>()
    {
        android.hardware.radio.RadioTuner r0;

        r0 := @this: android.hardware.radio.RadioTuner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int cancel();

    public abstract void cancelAnnouncement();

    public abstract void close();

    public abstract int getConfiguration(android.hardware.radio.RadioManager$BandConfig[]);

    public android.hardware.radio.ProgramList getDynamicProgramList(android.hardware.radio.ProgramList$Filter)
    {
        android.hardware.radio.RadioTuner r0;
        android.hardware.radio.ProgramList$Filter r1;

        r0 := @this: android.hardware.radio.RadioTuner;

        r1 := @parameter0: android.hardware.radio.ProgramList$Filter;

        return null;
    }

    public abstract android.graphics.Bitmap getMetadataImage(int);

    public abstract boolean getMute();

    public java.util.Map getParameters(java.util.List)
    {
        android.hardware.radio.RadioTuner r0;
        java.util.List r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.radio.RadioTuner;

        r1 := @parameter0: java.util.List;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public abstract int getProgramInformation(android.hardware.radio.RadioManager$ProgramInfo[]);

    public abstract java.util.List getProgramList(java.util.Map);

    public abstract boolean hasControl();

    public abstract boolean isAnalogForced();

    public abstract boolean isAntennaConnected();

    public boolean isConfigFlagSet(int)
    {
        android.hardware.radio.RadioTuner r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.radio.RadioTuner;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isConfigFlagSupported(int)
    {
        android.hardware.radio.RadioTuner r0;
        int i0;

        r0 := @this: android.hardware.radio.RadioTuner;

        i0 := @parameter0: int;

        return 0;
    }

    public abstract int scan(int, boolean);

    public abstract void setAnalogForced(boolean);

    public void setConfigFlag(int, boolean)
    {
        android.hardware.radio.RadioTuner r0;
        int i0;
        boolean z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.hardware.radio.RadioTuner;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public abstract int setConfiguration(android.hardware.radio.RadioManager$BandConfig);

    public abstract int setMute(boolean);

    public java.util.Map setParameters(java.util.Map)
    {
        android.hardware.radio.RadioTuner r0;
        java.util.Map r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.hardware.radio.RadioTuner;

        r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public abstract boolean startBackgroundScan();

    public abstract int step(int, boolean);

    public abstract int tune(int, int);

    public abstract void tune(android.hardware.radio.ProgramSelector);

    public static void <clinit>()
    {
        <android.hardware.radio.RadioTuner: int ERROR_SERVER_DIED> = 1;

        <android.hardware.radio.RadioTuner: int ERROR_SCAN_TIMEOUT> = 3;

        <android.hardware.radio.RadioTuner: int ERROR_HARDWARE_FAILURE> = 0;

        <android.hardware.radio.RadioTuner: int ERROR_CONFIG> = 4;

        <android.hardware.radio.RadioTuner: int ERROR_CANCELLED> = 2;

        <android.hardware.radio.RadioTuner: int ERROR_BACKGROUND_SCAN_UNAVAILABLE> = 5;

        <android.hardware.radio.RadioTuner: int ERROR_BACKGROUND_SCAN_FAILED> = 6;

        <android.hardware.radio.RadioTuner: int DIRECTION_UP> = 0;

        <android.hardware.radio.RadioTuner: int DIRECTION_DOWN> = 1;

        return;
    }
}
