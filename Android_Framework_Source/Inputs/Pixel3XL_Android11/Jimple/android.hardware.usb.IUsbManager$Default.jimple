public class android.hardware.usb.IUsbManager$Default extends java.lang.Object implements android.hardware.usb.IUsbManager
{

    public void <init>()
    {
        android.hardware.usb.IUsbManager$Default r0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory, java.lang.String[], android.os.UserHandle) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String[] r2;
        android.os.UserHandle r3;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.UserHandle;

        return;
    }

    public void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice, java.lang.String[], android.os.UserHandle) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String[] r2;
        android.os.UserHandle r3;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.UserHandle;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.usb.IUsbManager$Default r0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        return null;
    }

    public void clearDefaults(java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void enableContaminantDetection(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public android.os.ParcelFileDescriptor getControlFd(long) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        long l0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        l0 := @parameter0: long;

        return null;
    }

    public android.hardware.usb.UsbAccessory getCurrentAccessory() throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        return null;
    }

    public long getCurrentFunctions() throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        return 0L;
    }

    public void getDeviceList(android.os.Bundle) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.os.Bundle r1;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.os.Bundle;

        return;
    }

    public android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.util.List getPorts() throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        return null;
    }

    public long getScreenUnlockedFunctions() throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        return 0L;
    }

    public void grantAccessoryPermission(android.hardware.usb.UsbAccessory, int) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;
        int i0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        i0 := @parameter1: int;

        return;
    }

    public void grantDevicePermission(android.hardware.usb.UsbDevice, int) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbDevice r1;
        int i0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        i0 := @parameter1: int;

        return;
    }

    public boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        return 0;
    }

    public boolean hasDefaults(java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean hasDevicePermission(android.hardware.usb.UsbDevice, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean isFunctionEnabled(java.lang.String) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        return null;
    }

    public android.os.ParcelFileDescriptor openDevice(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory, java.lang.String[], android.os.UserHandle) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String[] r2;
        android.os.UserHandle r3;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.UserHandle;

        return;
    }

    public void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice, java.lang.String[], android.os.UserHandle) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String[] r2;
        android.os.UserHandle r3;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.UserHandle;

        return;
    }

    public void requestAccessoryPermission(android.hardware.usb.UsbAccessory, java.lang.String, android.app.PendingIntent) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String r2;
        android.app.PendingIntent r3;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        return;
    }

    public void requestDevicePermission(android.hardware.usb.UsbDevice, java.lang.String, android.app.PendingIntent) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;
        android.app.PendingIntent r3;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        return;
    }

    public void resetUsbGadget() throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        return;
    }

    public void setAccessoryPackage(android.hardware.usb.UsbAccessory, java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return;
    }

    public void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory, int, android.os.UserHandle, boolean) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbAccessory r1;
        int i0;
        android.os.UserHandle r2;
        boolean z0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.UserHandle;

        z0 := @parameter3: boolean;

        return;
    }

    public void setCurrentFunction(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void setCurrentFunctions(long) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        long l0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        l0 := @parameter0: long;

        return;
    }

    public void setDevicePackage(android.hardware.usb.UsbDevice, java.lang.String, int) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return;
    }

    public void setDevicePersistentPermission(android.hardware.usb.UsbDevice, int, android.os.UserHandle, boolean) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.hardware.usb.UsbDevice r1;
        int i0;
        android.os.UserHandle r2;
        boolean z0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.UserHandle;

        z0 := @parameter3: boolean;

        return;
    }

    public void setPortRoles(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void setScreenUnlockedFunctions(long) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        long l0;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        l0 := @parameter0: long;

        return;
    }

    public void setUsbDeviceConnectionHandler(android.content.ComponentName) throws android.os.RemoteException
    {
        android.hardware.usb.IUsbManager$Default r0;
        android.content.ComponentName r1;

        r0 := @this: android.hardware.usb.IUsbManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }
}
