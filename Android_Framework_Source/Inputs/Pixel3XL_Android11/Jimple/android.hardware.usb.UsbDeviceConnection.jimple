public class android.hardware.usb.UsbDeviceConnection extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final dalvik.system.CloseGuard mCloseGuard;
    private android.content.Context mContext;
    private final android.hardware.usb.UsbDevice mDevice;
    private final java.lang.Object mLock;
    private long mNativeContext;

    public void <init>(android.hardware.usb.UsbDevice)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbDevice r1;
        dalvik.system.CloseGuard $r2;
        java.lang.Object $r3;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.hardware.usb.UsbDeviceConnection: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.hardware.usb.UsbDeviceConnection: java.lang.Object mLock> = $r3;

        r0.<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbDevice mDevice> = r1;

        return;
    }

    private static void checkBounds(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2, i3;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 == null goto label1;

        i3 = lengthof r0;

        goto label2;

     label1:
        i3 = 0;

     label2:
        if i1 < 0 goto label3;

        if i0 < 0 goto label3;

        $i2 = i0 + i1;

        if $i2 > i3 goto label3;

        return;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer start or length out of bounds.");

        throw $r1;
    }

    private native int native_bulk_request(int, byte[], int, int, int);

    private native boolean native_claim_interface(int, boolean);

    private native void native_close();

    private native int native_control_request(int, int, int, int, byte[], int, int, int);

    private native byte[] native_get_desc();

    private native int native_get_fd();

    private native java.lang.String native_get_serial();

    private native boolean native_open(java.lang.String, java.io.FileDescriptor);

    private native boolean native_release_interface(int);

    private native android.hardware.usb.UsbRequest native_request_wait(long) throws java.util.concurrent.TimeoutException;

    private native boolean native_reset_device();

    private native boolean native_set_configuration(int);

    private native boolean native_set_interface(int, int);

    public int bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbEndpoint r1;
        byte[] r2;
        int i0, i1, $i2;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbEndpoint;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int,int)>(r1, r2, 0, i0, i1);

        return $i2;
    }

    public int bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbEndpoint r1;
        byte[] r2;
        int i0, i1, i2, $i3, i4, $i5, $i6;
        android.content.Context $r3;
        android.content.pm.ApplicationInfo $r4;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbEndpoint;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        staticinvoke <android.hardware.usb.UsbDeviceConnection: void checkBounds(byte[],int,int)>(r2, i0, i1);

        i4 = i1;

        $r3 = r0.<android.hardware.usb.UsbDeviceConnection: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i3 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 >= 28 goto label1;

        i4 = i1;

        if i1 <= 16384 goto label1;

        i4 = 16384;

     label1:
        $i5 = virtualinvoke r1.<android.hardware.usb.UsbEndpoint: int getAddress()>();

        $i6 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: int native_bulk_request(int,byte[],int,int,int)>($i5, r2, i0, i4, i2);

        return $i6;
    }

    boolean cancelRequest(android.hardware.usb.UsbRequest)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.Throwable $r2;
        android.hardware.usb.UsbRequest r3;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r3 := @parameter0: android.hardware.usb.UsbRequest;

        r1 = r0.<android.hardware.usb.UsbDeviceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = virtualinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean isOpen()>();

        if $z1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        z0 = virtualinvoke r3.<android.hardware.usb.UsbRequest: boolean cancelIfOpen()>();

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean claimInterface(android.hardware.usb.UsbInterface, boolean)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbInterface r1;
        boolean z0, $z1;
        int $i0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbInterface;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getId()>();

        $z1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_claim_interface(int,boolean)>($i0, z0);

        return $z1;
    }

    public void close()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        java.lang.Object r1;
        boolean $z0;
        dalvik.system.CloseGuard $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 = r0.<android.hardware.usb.UsbDeviceConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean isOpen()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: void native_close()>();

        $r3 = r0.<android.hardware.usb.UsbDeviceConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void close()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int controlTransfer(int, int, int, int, byte[], int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        byte[] r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        $i6 = virtualinvoke r0.<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int,int)>(i0, i1, i2, i3, r1, 0, i4, i5);

        return $i6;
    }

    public int controlTransfer(int, int, int, int, byte[], int, int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        byte[] r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        staticinvoke <android.hardware.usb.UsbDeviceConnection: void checkBounds(byte[],int,int)>(r1, i4, i5);

        $i7 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: int native_control_request(int,int,int,int,byte[],int,int,int)>(i0, i1, i2, i3, r1, i4, i5, i6);

        return $i7;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.usb.UsbDeviceConnection r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

     label1:
        $r2 = r0.<android.hardware.usb.UsbDeviceConnection: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.hardware.usb.UsbDeviceConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.content.Context getContext()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.content.Context $r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $r1 = r0.<android.hardware.usb.UsbDeviceConnection: android.content.Context mContext>;

        return $r1;
    }

    public int getFileDescriptor()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        int $i0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $i0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: int native_get_fd()>();

        return $i0;
    }

    public byte[] getRawDescriptors()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        byte[] $r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $r1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: byte[] native_get_desc()>();

        return $r1;
    }

    public java.lang.String getSerial()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $r1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: java.lang.String native_get_serial()>();

        return $r1;
    }

    boolean isOpen()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $l0 = r0.<android.hardware.usb.UsbDeviceConnection: long mNativeContext>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean open(java.lang.String, android.os.ParcelFileDescriptor, android.content.Context)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.os.ParcelFileDescriptor r1;
        boolean z0;
        android.content.Context $r2, r7;
        java.io.FileDescriptor $r3;
        dalvik.system.CloseGuard $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        java.lang.Object r8;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        r7 := @parameter2: android.content.Context;

        $r2 = virtualinvoke r7.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<android.hardware.usb.UsbDeviceConnection: android.content.Context mContext> = $r2;

        r8 = r0.<android.hardware.usb.UsbDeviceConnection: java.lang.Object mLock>;

        entermonitor r8;

     label1:
        $r3 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_open(java.lang.String,java.io.FileDescriptor)>(r6, $r3);

     label2:
        if z0 == 0 goto label4;

     label3:
        $r4 = r0.<android.hardware.usb.UsbDeviceConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

     label4:
        exitmonitor r8;

     label5:
        return z0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r8;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean releaseInterface(android.hardware.usb.UsbInterface)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbInterface r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbInterface;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getId()>();

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_release_interface(int)>($i0);

        return $z0;
    }

    public android.hardware.usb.UsbRequest requestWait()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        int $i0;
        java.lang.Throwable $r3;
        android.hardware.usb.UsbRequest r4, r5;
        boolean z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r4 = null;

     label1:
        r5 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest native_request_wait(long)>(-1L);

     label2:
        r4 = r5;

        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        if r4 == null goto label7;

        $r1 = r0.<android.hardware.usb.UsbDeviceConnection: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 26 goto label5;

        z0 = 1;

        goto label6;

     label5:
        z0 = 0;

     label6:
        virtualinvoke r4.<android.hardware.usb.UsbRequest: void dequeue(boolean)>(z0);

     label7:
        return r4;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
    }

    public android.hardware.usb.UsbRequest requestWait(long) throws java.util.concurrent.TimeoutException
    {
        android.hardware.usb.UsbDeviceConnection r0;
        long l0, $l1;
        android.hardware.usb.UsbRequest r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        l0 := @parameter0: long;

        $l1 = staticinvoke <com.android.internal.util.Preconditions: long checkArgumentNonnegative(long,java.lang.String)>(l0, "timeout");

        r1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest native_request_wait(long)>($l1);

        if r1 == null goto label1;

        virtualinvoke r1.<android.hardware.usb.UsbRequest: void dequeue(boolean)>(1);

     label1:
        return r1;
    }

    public boolean resetDevice()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_reset_device()>();

        return $z0;
    }

    public boolean setConfiguration(android.hardware.usb.UsbConfiguration)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbConfiguration r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbConfiguration;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbConfiguration: int getId()>();

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_set_configuration(int)>($i0);

        return $z0;
    }

    public boolean setInterface(android.hardware.usb.UsbInterface)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbInterface r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbInterface;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getId()>();

        $i1 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getAlternateSetting()>();

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_set_interface(int,int)>($i0, $i1);

        return $z0;
    }

    public static void <clinit>()
    {
        <android.hardware.usb.UsbDeviceConnection: java.lang.String TAG> = "UsbDeviceConnection";

        return;
    }
}
