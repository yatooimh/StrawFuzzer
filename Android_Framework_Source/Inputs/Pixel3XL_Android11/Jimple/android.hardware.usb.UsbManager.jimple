public class android.hardware.usb.UsbManager extends java.lang.Object
{
    public static final java.lang.String ACTION_USB_ACCESSORY_ATTACHED;
    public static final java.lang.String ACTION_USB_ACCESSORY_DETACHED;
    public static final java.lang.String ACTION_USB_DEVICE_ATTACHED;
    public static final java.lang.String ACTION_USB_DEVICE_DETACHED;
    public static final java.lang.String ACTION_USB_PORT_CHANGED;
    public static final java.lang.String ACTION_USB_STATE;
    public static final java.lang.String EXTRA_ACCESSORY;
    public static final java.lang.String EXTRA_CAN_BE_DEFAULT;
    public static final java.lang.String EXTRA_DEVICE;
    public static final java.lang.String EXTRA_PACKAGE;
    public static final java.lang.String EXTRA_PERMISSION_GRANTED;
    public static final java.lang.String EXTRA_PORT;
    public static final java.lang.String EXTRA_PORT_STATUS;
    public static final long FUNCTION_ACCESSORY;
    public static final long FUNCTION_ADB;
    public static final long FUNCTION_AUDIO_SOURCE;
    public static final long FUNCTION_MIDI;
    public static final long FUNCTION_MTP;
    private static final java.util.Map FUNCTION_NAME_TO_CODE;
    public static final long FUNCTION_NCM;
    public static final long FUNCTION_NONE;
    public static final long FUNCTION_PTP;
    public static final long FUNCTION_RNDIS;
    private static final long SETTABLE_FUNCTIONS;
    private static final java.lang.String TAG;
    public static final java.lang.String USB_CONFIGURED;
    public static final java.lang.String USB_CONNECTED;
    public static final java.lang.String USB_DATA_UNLOCKED;
    public static final java.lang.String USB_FUNCTION_ACCESSORY;
    public static final java.lang.String USB_FUNCTION_ADB;
    public static final java.lang.String USB_FUNCTION_AUDIO_SOURCE;
    public static final java.lang.String USB_FUNCTION_MIDI;
    public static final java.lang.String USB_FUNCTION_MTP;
    public static final java.lang.String USB_FUNCTION_NCM;
    public static final java.lang.String USB_FUNCTION_NONE;
    public static final java.lang.String USB_FUNCTION_PTP;
    public static final java.lang.String USB_FUNCTION_RNDIS;
    public static final java.lang.String USB_HOST_CONNECTED;
    private final android.content.Context mContext;
    private final android.hardware.usb.IUsbManager mService;

    static void <clinit>()
    {
        java.util.HashMap $r1;
        java.lang.Long $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23;
        java.util.Map $r4, $r7, $r10, $r13, $r16, $r19, $r22;

        <android.hardware.usb.UsbManager: java.lang.String USB_HOST_CONNECTED> = "host_connected";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_RNDIS> = "rndis";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_PTP> = "ptp";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_NONE> = "none";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_NCM> = "ncm";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_MTP> = "mtp";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_MIDI> = "midi";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_AUDIO_SOURCE> = "audio_source";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_ADB> = "adb";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_ACCESSORY> = "accessory";

        <android.hardware.usb.UsbManager: java.lang.String USB_DATA_UNLOCKED> = "unlocked";

        <android.hardware.usb.UsbManager: java.lang.String USB_CONNECTED> = "connected";

        <android.hardware.usb.UsbManager: java.lang.String USB_CONFIGURED> = "configured";

        <android.hardware.usb.UsbManager: java.lang.String TAG> = "UsbManager";

        <android.hardware.usb.UsbManager: long SETTABLE_FUNCTIONS> = 1084L;

        <android.hardware.usb.UsbManager: long FUNCTION_RNDIS> = 32L;

        <android.hardware.usb.UsbManager: long FUNCTION_PTP> = 16L;

        <android.hardware.usb.UsbManager: long FUNCTION_NONE> = 0L;

        <android.hardware.usb.UsbManager: long FUNCTION_NCM> = 1024L;

        <android.hardware.usb.UsbManager: long FUNCTION_MTP> = 4L;

        <android.hardware.usb.UsbManager: long FUNCTION_MIDI> = 8L;

        <android.hardware.usb.UsbManager: long FUNCTION_AUDIO_SOURCE> = 64L;

        <android.hardware.usb.UsbManager: long FUNCTION_ADB> = 1L;

        <android.hardware.usb.UsbManager: long FUNCTION_ACCESSORY> = 2L;

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_PORT_STATUS> = "portStatus";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_PORT> = "port";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_PERMISSION_GRANTED> = "permission";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_PACKAGE> = "android.hardware.usb.extra.PACKAGE";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_DEVICE> = "device";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_CAN_BE_DEFAULT> = "android.hardware.usb.extra.CAN_BE_DEFAULT";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_ACCESSORY> = "accessory";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_STATE> = "android.hardware.usb.action.USB_STATE";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_PORT_CHANGED> = "android.hardware.usb.action.USB_PORT_CHANGED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_DEVICE_DETACHED> = "android.hardware.usb.action.USB_DEVICE_DETACHED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_DEVICE_ATTACHED> = "android.hardware.usb.action.USB_DEVICE_ATTACHED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_ACCESSORY_DETACHED> = "android.hardware.usb.action.USB_ACCESSORY_DETACHED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_ACCESSORY_ATTACHED> = "android.hardware.usb.action.USB_ACCESSORY_ATTACHED";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE> = $r1;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mtp", $r2);

        $r4 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(16L);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ptp", $r5);

        $r7 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(32L);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rndis", $r8);

        $r10 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(8L);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("midi", $r11);

        $r13 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("accessory", $r14);

        $r16 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(64L);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("audio_source", $r17);

        $r19 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("adb", $r20);

        $r22 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1024L);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ncm", $r23);

        return;
    }

    public void <init>(android.content.Context, android.hardware.usb.IUsbManager)
    {
        android.hardware.usb.UsbManager r0;
        android.content.Context r1;
        android.hardware.usb.IUsbManager r2;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.usb.IUsbManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.usb.UsbManager: android.content.Context mContext> = r1;

        r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService> = r2;

        return;
    }

    public static boolean areSettableFunctions(long)
    {
        long l0, $l2;
        byte $b1, $b3;
        int $i4;
        boolean z0;

        l0 := @parameter0: long;

        z0 = 1;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = -1085L & l0;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        $i4 = staticinvoke <java.lang.Long: int bitCount(long)>(l0);

        if $i4 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label2;

     label2:
        return z0;
    }

    public static long usbFunctionsFromString(java.lang.String)
    {
        java.lang.String r0, r1, $r7;
        int i0, $i1, i4;
        boolean $z0, $z1;
        java.util.Map $r2, $r8;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object $r9;
        java.lang.Long $r10;
        long $l2, l3;
        java.lang.String[] r11;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label7;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z0 == 0 goto label1;

        goto label7;

     label1:
        l3 = 0L;

        r11 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r11;

        i4 = 0;

     label2:
        if i4 >= i0 goto label6;

        r1 = r11[i4];

        $r2 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r8 = <android.hardware.usb.UsbManager: java.util.Map FUNCTION_NAME_TO_CODE>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (java.lang.Long) $r9;

        $l2 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        l3 = l3 | $l2;

        goto label4;

     label3:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 > 0 goto label5;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid usb function ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label6:
        return l3;

     label7:
        return 0L;
    }

    public static java.lang.String usbFunctionsToString(long)
    {
        long l0, $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        java.util.StringJoiner $r1;
        byte $b2, $b4, $b6, $b8, $b10, $b12, $b14, $b16;
        java.lang.String $r2;

        l0 := @parameter0: long;

        $r1 = new java.util.StringJoiner;

        specialinvoke $r1.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>(",");

        $l1 = 4L & l0;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("mtp");

     label1:
        $l3 = 16L & l0;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label2;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("ptp");

     label2:
        $l5 = 32L & l0;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label3;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("rndis");

     label3:
        $l7 = 8L & l0;

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label4;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("midi");

     label4:
        $l9 = 2L & l0;

        $b10 = $l9 cmp 0L;

        if $b10 == 0 goto label5;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("accessory");

     label5:
        $l11 = 64L & l0;

        $b12 = $l11 cmp 0L;

        if $b12 == 0 goto label6;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("audio_source");

     label6:
        $l13 = 1024L & l0;

        $b14 = $l13 cmp 0L;

        if $b14 == 0 goto label7;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("ncm");

     label7:
        $l15 = 1L & l0;

        $b16 = $l15 cmp 0L;

        if $b16 == 0 goto label8;

        virtualinvoke $r1.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("adb");

     label8:
        $r2 = virtualinvoke $r1.<java.util.StringJoiner: java.lang.String toString()>();

        return $r2;
    }

    void enableContaminantDetection(android.hardware.usb.UsbPort, boolean)
    {
        android.hardware.usb.UsbManager r0;
        boolean z0;
        android.hardware.usb.IUsbManager $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.usb.UsbPort r5;

        r0 := @this: android.hardware.usb.UsbManager;

        r5 := @parameter0: android.hardware.usb.UsbPort;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r2 = virtualinvoke r5.<android.hardware.usb.UsbPort: java.lang.String getId()>();

        interfaceinvoke $r1.<android.hardware.usb.IUsbManager: void enableContaminantDetection(java.lang.String,boolean)>($r2, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.usb.UsbAccessory[] getAccessoryList()
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbAccessory[] $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.usb.IUsbManager r4;
        android.hardware.usb.UsbAccessory r5;

        r0 := @this: android.hardware.usb.UsbManager;

        r4 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        if r4 != null goto label1;

        return null;

     label1:
        r5 = interfaceinvoke r4.<android.hardware.usb.IUsbManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r1 = newarray (android.hardware.usb.UsbAccessory)[1];

        $r1[0] = r5;

        return $r1;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.os.ParcelFileDescriptor getControlFd(long)
    {
        android.hardware.usb.UsbManager r0;
        long l0;
        android.hardware.usb.IUsbManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.ParcelFileDescriptor r4;

        r0 := @this: android.hardware.usb.UsbManager;

        l0 := @parameter0: long;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        r4 = interfaceinvoke $r1.<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor getControlFd(long)>(l0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getCurrentFunctions()
    {
        android.hardware.usb.UsbManager r0;
        long l0;
        android.hardware.usb.IUsbManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.usb.UsbManager;

     label1:
        $r2 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        l0 = interfaceinvoke $r2.<android.hardware.usb.IUsbManager: long getCurrentFunctions()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.HashMap getDeviceList()
    {
        android.hardware.usb.UsbManager r0;
        java.lang.String r3;
        java.util.HashMap $r4;
        android.hardware.usb.IUsbManager $r5, $r7;
        android.os.Bundle $r6;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r10;
        android.hardware.usb.UsbDevice $r11;
        android.os.RemoteException $r13;
        java.lang.RuntimeException $r14;
        java.util.Iterator r15;

        r0 := @this: android.hardware.usb.UsbManager;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        if $r5 != null goto label1;

        return $r4;

     label1:
        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

     label2:
        $r7 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r7.<android.hardware.usb.IUsbManager: void getDeviceList(android.os.Bundle)>($r6);

        $r8 = virtualinvoke $r6.<android.os.Bundle: java.util.Set keySet()>();

        r15 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r9;

        $r10 = virtualinvoke $r6.<android.os.Bundle: java.lang.Object get(java.lang.String)>(r3);

        $r11 = (android.hardware.usb.UsbDevice) $r10;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);

     label4:
        goto label3;

     label5:
        return $r4;

     label6:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r14;

        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    android.hardware.usb.UsbPortStatus getPortStatus(android.hardware.usb.UsbPort)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.IUsbManager $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.hardware.usb.UsbPort r5;
        android.hardware.usb.UsbPortStatus r6;

        r0 := @this: android.hardware.usb.UsbManager;

        r5 := @parameter0: android.hardware.usb.UsbPort;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r2 = virtualinvoke r5.<android.hardware.usb.UsbPort: java.lang.String getId()>();

        r6 = interfaceinvoke $r1.<android.hardware.usb.IUsbManager: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>($r2);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPorts()
    {
        android.hardware.usb.UsbManager r0;
        java.util.List r1, $r6, $r7;
        int i0, i1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        android.hardware.usb.ParcelableUsbPort $r4;
        android.hardware.usb.UsbPort $r5;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.hardware.usb.IUsbManager r10;

        r0 := @this: android.hardware.usb.UsbManager;

        r10 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        if r10 != null goto label1;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label1:
        r1 = interfaceinvoke r10.<android.hardware.usb.IUsbManager: java.util.List getPorts()>();

     label2:
        if r1 != null goto label3;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r6;

     label3:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0);

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (android.hardware.usb.ParcelableUsbPort) $r3;

        $r5 = virtualinvoke $r4.<android.hardware.usb.ParcelableUsbPort: android.hardware.usb.UsbPort getUsbPort(android.hardware.usb.UsbManager)>(r0);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label4;

     label5:
        return $r2;

     label6:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label6;
    }

    public long getScreenUnlockedFunctions()
    {
        android.hardware.usb.UsbManager r0;
        long l0;
        android.hardware.usb.IUsbManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.usb.UsbManager;

     label1:
        $r2 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        l0 = interfaceinvoke $r2.<android.hardware.usb.IUsbManager: long getScreenUnlockedFunctions()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void grantPermission(android.hardware.usb.UsbDevice)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbDevice r1;
        int $i0;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r0.<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,int)>(r1, $i0);

        return;
    }

    public void grantPermission(android.hardware.usb.UsbDevice, int)
    {
        android.hardware.usb.UsbManager r0;
        int i0;
        android.hardware.usb.IUsbManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.usb.UsbDevice r4;

        r0 := @this: android.hardware.usb.UsbManager;

        r4 := @parameter0: android.hardware.usb.UsbDevice;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r1.<android.hardware.usb.IUsbManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>(r4, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void grantPermission(android.hardware.usb.UsbDevice, java.lang.String)
    {
        android.hardware.usb.UsbManager r0;
        java.lang.String r1, $r11;
        android.content.Context $r3, $r5;
        android.content.pm.PackageManager $r4;
        int $i0, $i1;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        java.lang.StringBuilder $r7;
        android.hardware.usb.UsbDevice r12;

        r0 := @this: android.hardware.usb.UsbManager;

        r12 := @parameter0: android.hardware.usb.UsbDevice;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int getUserId()>();

        $i1 = virtualinvoke $r4.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r1, $i0);

        virtualinvoke r0.<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,int)>(r12, $i1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", $r11, $r6);

     label4:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public boolean hasPermission(android.hardware.usb.UsbAccessory)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.IUsbManager r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.usb.UsbAccessory r4;

        r0 := @this: android.hardware.usb.UsbManager;

        r4 := @parameter0: android.hardware.usb.UsbAccessory;

        r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        if r1 != null goto label1;

        return 0;

     label1:
        z0 = interfaceinvoke r1.<android.hardware.usb.IUsbManager: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasPermission(android.hardware.usb.UsbDevice)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.IUsbManager r1;
        boolean z0;
        android.content.Context $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.hardware.usb.UsbDevice r6;

        r0 := @this: android.hardware.usb.UsbManager;

        r6 := @parameter0: android.hardware.usb.UsbDevice;

        r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke r1.<android.hardware.usb.IUsbManager: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>(r6, $r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isFunctionEnabled(java.lang.String)
    {
        android.hardware.usb.UsbManager r0;
        boolean z0;
        android.hardware.usb.IUsbManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.hardware.usb.UsbManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        z0 = interfaceinvoke $r1.<android.hardware.usb.IUsbManager: boolean isFunctionEnabled(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.IUsbManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.hardware.usb.UsbAccessory r4;
        android.os.ParcelFileDescriptor r5;

        r0 := @this: android.hardware.usb.UsbManager;

        r4 := @parameter0: android.hardware.usb.UsbAccessory;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        r5 = interfaceinvoke $r1.<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)
    {
        android.hardware.usb.UsbManager r0;
        java.lang.String r1, $r6;
        android.os.ParcelFileDescriptor r2;
        android.hardware.usb.UsbDeviceConnection r3;
        boolean z0;
        android.content.Context $r4, $r7;
        android.hardware.usb.IUsbManager $r5;
        java.lang.Exception $r8;
        android.hardware.usb.UsbDevice r9;

        r0 := @this: android.hardware.usb.UsbManager;

        r9 := @parameter0: android.hardware.usb.UsbDevice;

     label1:
        r1 = virtualinvoke r9.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        $r5 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r4 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        r2 = interfaceinvoke $r5.<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openDevice(java.lang.String,java.lang.String)>(r1, $r6);

     label2:
        if r2 == null goto label5;

     label3:
        r3 = new android.hardware.usb.UsbDeviceConnection;

        specialinvoke r3.<android.hardware.usb.UsbDeviceConnection: void <init>(android.hardware.usb.UsbDevice)>(r9);

        $r7 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        z0 = virtualinvoke r3.<android.hardware.usb.UsbDeviceConnection: boolean open(java.lang.String,android.os.ParcelFileDescriptor,android.content.Context)>(r1, r2, $r7);

        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label4:
        if z0 == 0 goto label5;

        return r3;

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "exception in UsbManager.openDevice", $r8);

     label7:
        return null;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
    }

    public void requestPermission(android.hardware.usb.UsbAccessory, android.app.PendingIntent)
    {
        android.hardware.usb.UsbManager r0;
        android.app.PendingIntent r1;
        android.content.Context $r2;
        android.hardware.usb.IUsbManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.usb.UsbAccessory r7;

        r0 := @this: android.hardware.usb.UsbManager;

        r7 := @parameter0: android.hardware.usb.UsbAccessory;

        r1 := @parameter1: android.app.PendingIntent;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r2 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r3.<android.hardware.usb.IUsbManager: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>(r7, $r4, r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestPermission(android.hardware.usb.UsbDevice, android.app.PendingIntent)
    {
        android.hardware.usb.UsbManager r0;
        android.app.PendingIntent r1;
        android.content.Context $r2;
        android.hardware.usb.IUsbManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.hardware.usb.UsbDevice r7;

        r0 := @this: android.hardware.usb.UsbManager;

        r7 := @parameter0: android.hardware.usb.UsbDevice;

        r1 := @parameter1: android.app.PendingIntent;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r2 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r3.<android.hardware.usb.IUsbManager: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>(r7, $r4, r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resetUsbGadget()
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.IUsbManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.usb.UsbManager;

     label1:
        $r2 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r2.<android.hardware.usb.IUsbManager: void resetUsbGadget()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCurrentFunction(java.lang.String, boolean)
    {
        android.hardware.usb.UsbManager r0;
        boolean z0;
        android.hardware.usb.IUsbManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.hardware.usb.UsbManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r1.<android.hardware.usb.IUsbManager: void setCurrentFunction(java.lang.String,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCurrentFunctions(long)
    {
        android.hardware.usb.UsbManager r0;
        long l0;
        android.hardware.usb.IUsbManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.usb.UsbManager;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r2.<android.hardware.usb.IUsbManager: void setCurrentFunctions(long)>(l0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void setPortRoles(android.hardware.usb.UsbPort, int, int)
    {
        android.hardware.usb.UsbManager r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        android.content.Context $r4;
        java.lang.String $r5, $r7, $r9;
        android.hardware.usb.IUsbManager $r8;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        android.hardware.usb.UsbPort r12;

        r0 := @this: android.hardware.usb.UsbManager;

        r12 := @parameter0: android.hardware.usb.UsbPort;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setPortRoles Package:");

        $r4 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("UsbManager", $r7);

     label1:
        $r8 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r9 = virtualinvoke r12.<android.hardware.usb.UsbPort: java.lang.String getId()>();

        interfaceinvoke $r8.<android.hardware.usb.IUsbManager: void setPortRoles(java.lang.String,int,int)>($r9, i0, i1);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setScreenUnlockedFunctions(long)
    {
        android.hardware.usb.UsbManager r0;
        long l0;
        android.hardware.usb.IUsbManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.hardware.usb.UsbManager;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r2.<android.hardware.usb.IUsbManager: void setScreenUnlockedFunctions(long)>(l0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUsbDeviceConnectionHandler(android.content.ComponentName)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.IUsbManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r0 := @this: android.hardware.usb.UsbManager;

        r4 := @parameter0: android.content.ComponentName;

     label1:
        $r1 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r1.<android.hardware.usb.IUsbManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
