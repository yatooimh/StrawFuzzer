public final class android.hardware.usb.UsbPort extends java.lang.Object
{
    private static final int NUM_DATA_ROLES;
    private static final int POWER_ROLE_OFFSET;
    private final java.lang.String mId;
    private final int mSupportedContaminantProtectionModes;
    private final int mSupportedModes;
    private final boolean mSupportsEnableContaminantPresenceDetection;
    private final boolean mSupportsEnableContaminantPresenceProtection;
    private final android.hardware.usb.UsbManager mUsbManager;

    public void <init>(android.hardware.usb.UsbManager, java.lang.String, int, int, boolean, boolean)
    {
        android.hardware.usb.UsbPort r0;
        android.hardware.usb.UsbManager r1;
        java.lang.String r2;
        int i0, i1;
        boolean z0, z1;

        r0 := @this: android.hardware.usb.UsbPort;

        r1 := @parameter0: android.hardware.usb.UsbManager;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <com.android.internal.util.Preconditions: int checkFlagsArgument(int,int)>(i0, 15);

        r0.<android.hardware.usb.UsbPort: android.hardware.usb.UsbManager mUsbManager> = r1;

        r0.<android.hardware.usb.UsbPort: java.lang.String mId> = r2;

        r0.<android.hardware.usb.UsbPort: int mSupportedModes> = i0;

        r0.<android.hardware.usb.UsbPort: int mSupportedContaminantProtectionModes> = i1;

        r0.<android.hardware.usb.UsbPort: boolean mSupportsEnableContaminantPresenceProtection> = z0;

        r0.<android.hardware.usb.UsbPort: boolean mSupportsEnableContaminantPresenceDetection> = z1;

        return;
    }

    public static void checkDataRole(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 2, "powerRole");

        return;
    }

    public static void checkMode(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 3, "portMode");

        return;
    }

    public static void checkPowerRole(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 2, "powerRole");

        return;
    }

    public static void checkRoles(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 2, "powerRole");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i1, 0, 2, "dataRole");

        return;
    }

    public static int combineRolesAsBit(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.hardware.usb.UsbPort: void checkRoles(int,int)>(i0, i1);

        $i2 = i0 + 0;

        $i3 = $i2 * 3;

        $i4 = $i3 + i1;

        $i5 = 1 << $i4;

        return $i5;
    }

    public static java.lang.String contaminantPresenceStatusToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "detected";

     label2:
        return "not detected";

     label3:
        return "disabled";

     label4:
        return "not-supported";
    }

    public static java.lang.String dataRoleToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "device";

     label2:
        return "host";

     label3:
        return "no-data";
    }

    public static java.lang.String modeToString(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        if i0 != 0 goto label1;

        return "none";

     label1:
        $i1 = i0 & 3;

        if $i1 != 3 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dual, ");

        goto label4;

     label2:
        $i2 = i0 & 2;

        if $i2 != 2 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dfp, ");

        goto label4;

     label3:
        $i3 = i0 & 1;

        if $i3 != 1 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ufp, ");

     label4:
        $i8 = i0 & 4;

        if $i8 != 4 goto label5;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio_acc, ");

     label5:
        $i4 = i0 & 8;

        if $i4 != 8 goto label6;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("debug_acc, ");

     label6:
        $i5 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i5 != 0 goto label7;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r3;

     label7:
        $i6 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i7 = $i6 - 2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, $i7);

        return $r2;
    }

    public static java.lang.String powerRoleToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "sink";

     label2:
        return "source";

     label3:
        return "no-power";
    }

    public static java.lang.String roleCombinationsToString(int)
    {
        int i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r6, $r9;
        boolean z1;

        i4 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i5 = i4;

        z1 = 1;

     label1:
        if i5 == 0 goto label4;

        i6 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i5);

        $i1 = 1 << i6;

        i5 = i5 & $i1;

        i0 = i6 / 3;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $i2 = i0 + 0;

        $r6 = staticinvoke <android.hardware.usb.UsbPort: java.lang.String powerRoleToString(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i3 = i6 % 3;

        $r9 = staticinvoke <android.hardware.usb.UsbPort: java.lang.String dataRoleToString(int)>($i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label1;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void enableContaminantDetection(boolean)
    {
        android.hardware.usb.UsbPort r0;
        boolean z0;
        android.hardware.usb.UsbManager $r1;

        r0 := @this: android.hardware.usb.UsbPort;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.hardware.usb.UsbPort: android.hardware.usb.UsbManager mUsbManager>;

        virtualinvoke $r1.<android.hardware.usb.UsbManager: void enableContaminantDetection(android.hardware.usb.UsbPort,boolean)>(r0, z0);

        return;
    }

    public java.lang.String getId()
    {
        android.hardware.usb.UsbPort r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.usb.UsbPort;

        $r1 = r0.<android.hardware.usb.UsbPort: java.lang.String mId>;

        return $r1;
    }

    public android.hardware.usb.UsbPortStatus getStatus()
    {
        android.hardware.usb.UsbPort r0;
        android.hardware.usb.UsbManager $r1;
        android.hardware.usb.UsbPortStatus $r2;

        r0 := @this: android.hardware.usb.UsbPort;

        $r1 = r0.<android.hardware.usb.UsbPort: android.hardware.usb.UsbManager mUsbManager>;

        $r2 = virtualinvoke $r1.<android.hardware.usb.UsbManager: android.hardware.usb.UsbPortStatus getPortStatus(android.hardware.usb.UsbPort)>(r0);

        return $r2;
    }

    public int getSupportedContaminantProtectionModes()
    {
        android.hardware.usb.UsbPort r0;
        int $i0;

        r0 := @this: android.hardware.usb.UsbPort;

        $i0 = r0.<android.hardware.usb.UsbPort: int mSupportedContaminantProtectionModes>;

        return $i0;
    }

    public int getSupportedModes()
    {
        android.hardware.usb.UsbPort r0;
        int $i0;

        r0 := @this: android.hardware.usb.UsbPort;

        $i0 = r0.<android.hardware.usb.UsbPort: int mSupportedModes>;

        return $i0;
    }

    public boolean isModeSupported(int)
    {
        android.hardware.usb.UsbPort r0;
        int i0, $i1, $i2;

        r0 := @this: android.hardware.usb.UsbPort;

        i0 := @parameter0: int;

        $i1 = r0.<android.hardware.usb.UsbPort: int mSupportedModes>;

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setRoles(int, int)
    {
        android.hardware.usb.UsbPort r0;
        int i0, i1;
        android.hardware.usb.UsbManager $r1;

        r0 := @this: android.hardware.usb.UsbPort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.hardware.usb.UsbPort: void checkRoles(int,int)>(i0, i1);

        $r1 = r0.<android.hardware.usb.UsbPort: android.hardware.usb.UsbManager mUsbManager>;

        virtualinvoke $r1.<android.hardware.usb.UsbManager: void setPortRoles(android.hardware.usb.UsbPort,int,int)>(r0, i0, i1);

        return;
    }

    public boolean supportsEnableContaminantPresenceDetection()
    {
        android.hardware.usb.UsbPort r0;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbPort;

        $z0 = r0.<android.hardware.usb.UsbPort: boolean mSupportsEnableContaminantPresenceDetection>;

        return $z0;
    }

    public boolean supportsEnableContaminantPresenceProtection()
    {
        android.hardware.usb.UsbPort r0;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbPort;

        $z0 = r0.<android.hardware.usb.UsbPort: boolean mSupportsEnableContaminantPresenceProtection>;

        return $z0;
    }

    public java.lang.String toString()
    {
        android.hardware.usb.UsbPort r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, $r15;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.hardware.usb.UsbPort;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UsbPort{id=");

        $r4 = r0.<android.hardware.usb.UsbPort: java.lang.String mId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", supportedModes=");

        $i0 = r0.<android.hardware.usb.UsbPort: int mSupportedModes>;

        $r7 = staticinvoke <android.hardware.usb.UsbPort: java.lang.String modeToString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supportedContaminantProtectionModes=");

        $i1 = r0.<android.hardware.usb.UsbPort: int mSupportedContaminantProtectionModes>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supportsEnableContaminantPresenceProtection=");

        $z0 = r0.<android.hardware.usb.UsbPort: boolean mSupportsEnableContaminantPresenceProtection>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supportsEnableContaminantPresenceDetection=");

        $z1 = r0.<android.hardware.usb.UsbPort: boolean mSupportsEnableContaminantPresenceDetection>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r15 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public static void <clinit>()
    {
        <android.hardware.usb.UsbPort: int POWER_ROLE_OFFSET> = 0;

        <android.hardware.usb.UsbPort: int NUM_DATA_ROLES> = 3;

        return;
    }
}
