public class android.hardware.usb.UsbRequest extends java.lang.Object
{
    static final int MAX_USBFS_BUFFER_SIZE;
    private static final java.lang.String TAG;
    private java.nio.ByteBuffer mBuffer;
    private java.lang.Object mClientData;
    private final dalvik.system.CloseGuard mCloseGuard;
    private android.hardware.usb.UsbDeviceConnection mConnection;
    private android.hardware.usb.UsbEndpoint mEndpoint;
    private boolean mIsUsingNewQueue;
    private int mLength;
    private final java.lang.Object mLock;
    private long mNativeContext;
    private java.nio.ByteBuffer mTempBuffer;

    public void <init>()
    {
        android.hardware.usb.UsbRequest r0;
        dalvik.system.CloseGuard $r1;
        java.lang.Object $r2;

        r0 := @this: android.hardware.usb.UsbRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.hardware.usb.UsbRequest: dalvik.system.CloseGuard mCloseGuard> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.usb.UsbRequest: java.lang.Object mLock> = $r2;

        return;
    }

    private native boolean native_cancel();

    private native void native_close();

    private native int native_dequeue_array(byte[], int, boolean);

    private native int native_dequeue_direct();

    private native boolean native_init(android.hardware.usb.UsbDeviceConnection, int, int, int, int);

    private native boolean native_queue(java.nio.ByteBuffer, int, int);

    private native boolean native_queue_array(byte[], int, boolean);

    private native boolean native_queue_direct(java.nio.ByteBuffer, int, boolean);

    public boolean cancel()
    {
        android.hardware.usb.UsbRequest r0;
        android.hardware.usb.UsbDeviceConnection r1;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbRequest;

        r1 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbDeviceConnection mConnection>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<android.hardware.usb.UsbDeviceConnection: boolean cancelRequest(android.hardware.usb.UsbRequest)>(r0);

        return $z0;
    }

    boolean cancelIfOpen()
    {
        android.hardware.usb.UsbRequest r0;
        android.hardware.usb.UsbDeviceConnection r1;
        long $l0;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: android.hardware.usb.UsbRequest;

        $l0 = r0.<android.hardware.usb.UsbRequest: long mNativeContext>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        r1 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbDeviceConnection mConnection>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.hardware.usb.UsbDeviceConnection: boolean isOpen()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $z0 = specialinvoke r0.<android.hardware.usb.UsbRequest: boolean native_cancel()>();

        return $z0;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("UsbRequest", "Detected attempt to cancel a request on a connection which isn\'t open");

        return 0;
    }

    public void close()
    {
        android.hardware.usb.UsbRequest r0;
        long $l0;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.hardware.usb.UsbRequest;

        $l0 = r0.<android.hardware.usb.UsbRequest: long mNativeContext>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint mEndpoint> = null;

        r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbDeviceConnection mConnection> = null;

        specialinvoke r0.<android.hardware.usb.UsbRequest: void native_close()>();

        $r1 = r0.<android.hardware.usb.UsbRequest: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

     label1:
        return;
    }

    void dequeue(boolean)
    {
        android.hardware.usb.UsbRequest r0;
        boolean z0, $z1, $z2, z3;
        java.lang.Object r1;
        android.hardware.usb.UsbEndpoint $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, i9, i10;
        java.nio.ByteBuffer $r4, $r5, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r26;
        byte[] $r6;
        java.lang.Throwable $r22, $r23, $r24;
        java.lang.String $r31;
        java.lang.StringBuilder r33;
        java.nio.BufferOverflowException r34;

        r0 := @this: android.hardware.usb.UsbRequest;

        z0 := @parameter0: boolean;

        $r3 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint mEndpoint>;

        $i0 = virtualinvoke $r3.<android.hardware.usb.UsbEndpoint: int getDirection()>();

        if $i0 != 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        r1 = r0.<android.hardware.usb.UsbRequest: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $z1 = r0.<android.hardware.usb.UsbRequest: boolean mIsUsingNewQueue>;

        if $z1 == 0 goto label17;

        i8 = specialinvoke r0.<android.hardware.usb.UsbRequest: int native_dequeue_direct()>();

        r0.<android.hardware.usb.UsbRequest: boolean mIsUsingNewQueue> = 0;

        $r9 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        if $r9 != null goto label05;

     label04:
        goto label27;

     label05:
        $r10 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer>;

        if $r10 != null goto label07;

        $r20 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $r19 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $i5 = virtualinvoke $r19.<java.nio.ByteBuffer: int position()>();

        $i6 = $i5 + i8;

        virtualinvoke $r20.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i6);

     label06:
        goto label27;

     label07:
        $r11 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer>;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i8);

     label08:
        if z3 == 0 goto label11;

     label09:
        $r17 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $r16 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $i3 = virtualinvoke $r16.<java.nio.ByteBuffer: int position()>();

        $i4 = $i3 + i8;

        virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

     label10:
        goto label12;

     label11:
        $r14 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $r13 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer>;

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r13);

     label12:
        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer> = null;

     label13:
        goto label27;

     label14:
        $r22 := @caughtexception;

     label15:
        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer> = null;

     label16:
        throw $r22;

     label17:
        $r4 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $z2 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z2 == 0 goto label19;

        i9 = specialinvoke r0.<android.hardware.usb.UsbRequest: int native_dequeue_direct()>();

     label18:
        goto label20;

     label19:
        $r5 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $r6 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = r0.<android.hardware.usb.UsbRequest: int mLength>;

        i9 = specialinvoke r0.<android.hardware.usb.UsbRequest: int native_dequeue_array(byte[],int,boolean)>($r6, $i1, z3);

     label20:
        if i9 < 0 goto label27;

     label21:
        $i2 = r0.<android.hardware.usb.UsbRequest: int mLength>;

        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i9, $i2);

     label22:
        $r7 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i10);

     label23:
        goto label27;

     label24:
        $r24 := @caughtexception;

        if z0 == 0 goto label26;

     label25:
        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer ");

        $r26 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have enough space to read ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r31 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbRequest", $r31, $r24);

        r34 = new java.nio.BufferOverflowException;

        specialinvoke r34.<java.nio.BufferOverflowException: void <init>()>();

        throw r34;

     label26:
        throw $r24;

     label27:
        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer> = null;

        r0.<android.hardware.usb.UsbRequest: int mLength> = 0;

        exitmonitor r1;

     label28:
        return;

     label29:
        $r23 := @caughtexception;

     label30:
        exitmonitor r1;

     label31:
        throw $r23;

        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label17 to label18 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.lang.IllegalArgumentException from label22 to label23 with label24;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label25 to label26 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.usb.UsbRequest r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.hardware.usb.UsbRequest;

     label1:
        $r2 = r0.<android.hardware.usb.UsbRequest: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.hardware.usb.UsbRequest: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.hardware.usb.UsbRequest: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.Object getClientData()
    {
        android.hardware.usb.UsbRequest r0;
        java.lang.Object $r1;

        r0 := @this: android.hardware.usb.UsbRequest;

        $r1 = r0.<android.hardware.usb.UsbRequest: java.lang.Object mClientData>;

        return $r1;
    }

    public android.hardware.usb.UsbEndpoint getEndpoint()
    {
        android.hardware.usb.UsbRequest r0;
        android.hardware.usb.UsbEndpoint $r1;

        r0 := @this: android.hardware.usb.UsbRequest;

        $r1 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint mEndpoint>;

        return $r1;
    }

    public boolean initialize(android.hardware.usb.UsbDeviceConnection, android.hardware.usb.UsbEndpoint)
    {
        android.hardware.usb.UsbRequest r0;
        android.hardware.usb.UsbDeviceConnection r1, $r4;
        android.hardware.usb.UsbEndpoint r2;
        boolean z0;
        int $i0, $i1, $i2, $i3;
        dalvik.system.CloseGuard $r5;

        r0 := @this: android.hardware.usb.UsbRequest;

        r1 := @parameter0: android.hardware.usb.UsbDeviceConnection;

        r2 := @parameter1: android.hardware.usb.UsbEndpoint;

        r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint mEndpoint> = r2;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "connection");

        $r4 = (android.hardware.usb.UsbDeviceConnection) r1;

        r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbDeviceConnection mConnection> = $r4;

        $i0 = virtualinvoke r2.<android.hardware.usb.UsbEndpoint: int getAddress()>();

        $i1 = virtualinvoke r2.<android.hardware.usb.UsbEndpoint: int getAttributes()>();

        $i2 = virtualinvoke r2.<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()>();

        $i3 = virtualinvoke r2.<android.hardware.usb.UsbEndpoint: int getInterval()>();

        z0 = specialinvoke r0.<android.hardware.usb.UsbRequest: boolean native_init(android.hardware.usb.UsbDeviceConnection,int,int,int,int)>(r1, $i0, $i1, $i2, $i3);

        if z0 == 0 goto label1;

        $r5 = r0.<android.hardware.usb.UsbRequest: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

     label1:
        return z0;
    }

    public boolean queue(java.nio.ByteBuffer)
    {
        android.hardware.usb.UsbRequest r0;
        java.lang.Object r1;
        long $l0;
        byte $b1;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, $z7;
        android.hardware.usb.UsbEndpoint $r2;
        int $i2, $i3, $i4, $i5, $i7, $i8;
        android.hardware.usb.UsbDeviceConnection $r3;
        android.content.Context $r4;
        android.content.pm.ApplicationInfo $r5;
        java.nio.ByteBuffer $r6, $r7, $r8, $r10, $r11, $r13, $r15, r18, r19;
        java.lang.Throwable $r17;

        r0 := @this: android.hardware.usb.UsbRequest;

        r18 := @parameter0: java.nio.ByteBuffer;

        $l0 = r0.<android.hardware.usb.UsbRequest: long mNativeContext>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z3, "request is not initialized");

        $z0 = r0.<android.hardware.usb.UsbRequest: boolean mIsUsingNewQueue>;

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "this request is currently queued");

        $r2 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint mEndpoint>;

        $i2 = virtualinvoke $r2.<android.hardware.usb.UsbEndpoint: int getDirection()>();

        if $i2 != 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        r1 = r0.<android.hardware.usb.UsbRequest: java.lang.Object mLock>;

        entermonitor r1;

     label05:
        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer> = r18;

     label06:
        if r18 != null goto label09;

     label07:
        r0.<android.hardware.usb.UsbRequest: boolean mIsUsingNewQueue> = 1;

        z5 = specialinvoke r0.<android.hardware.usb.UsbRequest: boolean native_queue(java.nio.ByteBuffer,int,int)>(null, 0, 0);

     label08:
        goto label21;

     label09:
        $r3 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbDeviceConnection mConnection>;

        $r4 = virtualinvoke $r3.<android.hardware.usb.UsbDeviceConnection: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i3 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 >= 28 goto label10;

        $i5 = virtualinvoke r18.<java.nio.ByteBuffer: int remaining()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>($i5, 0, 16384, "number of remaining bytes");

     label10:
        $z2 = virtualinvoke r18.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z2 == 0 goto label13;

     label11:
        if z4 == 0 goto label12;

        goto label13;

     label12:
        z6 = 0;

        goto label14;

     label13:
        z6 = 1;

     label14:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z6, "buffer can not be read-only when receiving data");

     label15:
        r19 = r18;

     label16:
        $z7 = virtualinvoke r18.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z7 != 0 goto label20;

        $r6 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        $i4 = virtualinvoke $r6.<java.nio.ByteBuffer: int remaining()>();

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i4);

        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer> = $r7;

     label17:
        if z4 == 0 goto label19;

     label18:
        $r8 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer mark()>();

        $r11 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer>;

        $r10 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r10);

        $r13 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer>;

        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r15 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.Buffer reset()>();

     label19:
        r19 = r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer>;

     label20:
        r0.<android.hardware.usb.UsbRequest: boolean mIsUsingNewQueue> = 1;

        $i7 = virtualinvoke r19.<java.nio.ByteBuffer: int position()>();

        $i8 = virtualinvoke r19.<java.nio.ByteBuffer: int remaining()>();

        z5 = specialinvoke r0.<android.hardware.usb.UsbRequest: boolean native_queue(java.nio.ByteBuffer,int,int)>(r19, $i7, $i8);

     label21:
        exitmonitor r1;

     label22:
        if z5 != 0 goto label23;

        r0.<android.hardware.usb.UsbRequest: boolean mIsUsingNewQueue> = 0;

        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mTempBuffer> = null;

        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer> = null;

     label23:
        return z5;

     label24:
        $r17 := @caughtexception;

     label25:
        exitmonitor r1;

     label26:
        throw $r17;

        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    public boolean queue(java.nio.ByteBuffer, int)
    {
        android.hardware.usb.UsbRequest r0;
        int i0, $i1, $i2, i3;
        java.lang.Object r1;
        android.hardware.usb.UsbEndpoint $r2;
        android.hardware.usb.UsbDeviceConnection $r3;
        android.content.Context $r4;
        android.content.pm.ApplicationInfo $r5;
        boolean $z0, z1, $z2, z3;
        byte[] $r6;
        java.lang.Throwable $r7;
        java.nio.ByteBuffer r8;
        java.lang.IllegalArgumentException r9;

        r0 := @this: android.hardware.usb.UsbRequest;

        r8 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $r2 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint mEndpoint>;

        $i1 = virtualinvoke $r2.<android.hardware.usb.UsbEndpoint: int getDirection()>();

        if $i1 != 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        i3 = i0;

        $r3 = r0.<android.hardware.usb.UsbRequest: android.hardware.usb.UsbDeviceConnection mConnection>;

        $r4 = virtualinvoke $r3.<android.hardware.usb.UsbDeviceConnection: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 >= 28 goto label03;

        i3 = i0;

        if i0 <= 16384 goto label03;

        i3 = 16384;

     label03:
        r1 = r0.<android.hardware.usb.UsbRequest: java.lang.Object mLock>;

        entermonitor r1;

     label04:
        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer> = r8;

        r0.<android.hardware.usb.UsbRequest: int mLength> = i3;

        $z2 = virtualinvoke r8.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z2 == 0 goto label06;

        z3 = specialinvoke r0.<android.hardware.usb.UsbRequest: boolean native_queue_direct(java.nio.ByteBuffer,int,boolean)>(r8, i3, z1);

     label05:
        goto label07;

     label06:
        $z0 = virtualinvoke r8.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label11;

        $r6 = virtualinvoke r8.<java.nio.ByteBuffer: byte[] array()>();

        z3 = specialinvoke r0.<android.hardware.usb.UsbRequest: boolean native_queue_array(byte[],int,boolean)>($r6, i3, z1);

     label07:
        if z3 != 0 goto label09;

     label08:
        r0.<android.hardware.usb.UsbRequest: java.nio.ByteBuffer mBuffer> = null;

        r0.<android.hardware.usb.UsbRequest: int mLength> = 0;

     label09:
        exitmonitor r1;

     label10:
        return z3;

     label11:
        r9 = new java.lang.IllegalArgumentException;

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer is not direct and has no array");

        throw r9;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setClientData(java.lang.Object)
    {
        android.hardware.usb.UsbRequest r0;
        java.lang.Object r1;

        r0 := @this: android.hardware.usb.UsbRequest;

        r1 := @parameter0: java.lang.Object;

        r0.<android.hardware.usb.UsbRequest: java.lang.Object mClientData> = r1;

        return;
    }

    public static void <clinit>()
    {
        <android.hardware.usb.UsbRequest: java.lang.String TAG> = "UsbRequest";

        <android.hardware.usb.UsbRequest: int MAX_USBFS_BUFFER_SIZE> = 16384;

        return;
    }
}
