class android.location.AbstractListenerManager$Registration extends java.lang.Object
{
    private final java.util.concurrent.Executor mExecutor;
    private volatile java.lang.Object mListener;
    private java.lang.Object mRequest;

    private void <init>(java.lang.Object, java.util.concurrent.Executor, java.lang.Object)
    {
        android.location.AbstractListenerManager$Registration r0;
        java.lang.Object r1, r3;
        java.util.concurrent.Executor r2;
        boolean z1, z2;

        r0 := @this: android.location.AbstractListenerManager$Registration;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r3 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null listener/callback");

        if r2 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null executor");

        r0.<android.location.AbstractListenerManager$Registration: java.util.concurrent.Executor mExecutor> = r2;

        r0.<android.location.AbstractListenerManager$Registration: java.lang.Object mListener> = r3;

        r0.<android.location.AbstractListenerManager$Registration: java.lang.Object mRequest> = r1;

        return;
    }

    void <init>(java.lang.Object, java.util.concurrent.Executor, java.lang.Object, android.location.AbstractListenerManager$1)
    {
        android.location.AbstractListenerManager$Registration r0;
        java.lang.Object r1, r3;
        java.util.concurrent.Executor r2;
        android.location.AbstractListenerManager$1 r4;

        r0 := @this: android.location.AbstractListenerManager$Registration;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: android.location.AbstractListenerManager$1;

        specialinvoke r0.<android.location.AbstractListenerManager$Registration: void <init>(java.lang.Object,java.util.concurrent.Executor,java.lang.Object)>(r1, r2, r3);

        return;
    }

    private void accept(java.util.function.Consumer)
    {
        android.location.AbstractListenerManager$Registration r0;
        java.lang.Object r1;
        long l0;
        java.lang.Throwable $r2;
        java.util.function.Consumer r3;

        r0 := @this: android.location.AbstractListenerManager$Registration;

        r3 := @parameter0: java.util.function.Consumer;

        r1 = r0.<android.location.AbstractListenerManager$Registration: java.lang.Object mListener>;

        if r1 != null goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        interfaceinvoke r3.<java.util.function.Consumer: void accept(java.lang.Object)>(r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    static void access$100(android.location.AbstractListenerManager$Registration)
    {
        android.location.AbstractListenerManager$Registration r0;

        r0 := @parameter0: android.location.AbstractListenerManager$Registration;

        specialinvoke r0.<android.location.AbstractListenerManager$Registration: void unregister()>();

        return;
    }

    static void access$200(android.location.AbstractListenerManager$Registration, java.util.function.Consumer)
    {
        android.location.AbstractListenerManager$Registration r0;
        java.util.function.Consumer r1;

        r0 := @parameter0: android.location.AbstractListenerManager$Registration;

        r1 := @parameter1: java.util.function.Consumer;

        specialinvoke r0.<android.location.AbstractListenerManager$Registration: void execute(java.util.function.Consumer)>(r1);

        return;
    }

    private void execute(java.util.function.Consumer)
    {
        android.location.AbstractListenerManager$Registration r0;
        java.util.function.Consumer r1;
        android.location.'-$$Lambda$AbstractListenerManager$Registration$XpiThbVaDDpOnFWIkrt38Bf4yx0' $r2;
        java.util.concurrent.Executor $r3;
        com.android.internal.util.function.pooled.PooledRunnable $r4, $r5;
        java.util.function.BiConsumer r6;

        r0 := @this: android.location.AbstractListenerManager$Registration;

        r1 := @parameter0: java.util.function.Consumer;

        $r3 = r0.<android.location.AbstractListenerManager$Registration: java.util.concurrent.Executor mExecutor>;

        $r2 = <android.location._$$Lambda$AbstractListenerManager$Registration$XpiThbVaDDpOnFWIkrt38Bf4yx0: android.location.'-$$Lambda$AbstractListenerManager$Registration$XpiThbVaDDpOnFWIkrt38Bf4yx0' INSTANCE>;

        r6 = (java.util.function.BiConsumer) $r2;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r6, r0, r1);

        $r5 = interfaceinvoke $r4.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    public static void lambda$XpiThbVaDDpOnFWIkrt38Bf4yx0(android.location.AbstractListenerManager$Registration, java.util.function.Consumer)
    {
        android.location.AbstractListenerManager$Registration r0;
        java.util.function.Consumer r1;

        r0 := @parameter0: android.location.AbstractListenerManager$Registration;

        r1 := @parameter1: java.util.function.Consumer;

        specialinvoke r0.<android.location.AbstractListenerManager$Registration: void accept(java.util.function.Consumer)>(r1);

        return;
    }

    private void unregister()
    {
        android.location.AbstractListenerManager$Registration r0;

        r0 := @this: android.location.AbstractListenerManager$Registration;

        r0.<android.location.AbstractListenerManager$Registration: java.lang.Object mRequest> = null;

        r0.<android.location.AbstractListenerManager$Registration: java.lang.Object mListener> = null;

        return;
    }

    public java.lang.Object getRequest()
    {
        android.location.AbstractListenerManager$Registration r0;
        java.lang.Object $r1;

        r0 := @this: android.location.AbstractListenerManager$Registration;

        $r1 = r0.<android.location.AbstractListenerManager$Registration: java.lang.Object mRequest>;

        return $r1;
    }
}
