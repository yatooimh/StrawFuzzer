class android.location.LocationManager$GetCurrentLocationTransport extends android.location.ILocationListener$Stub implements android.app.AlarmManager$OnAlarmListener
{
    private android.app.AlarmManager mAlarmManager;
    private java.util.function.Consumer mConsumer;
    private java.util.concurrent.Executor mExecutor;
    private android.os.ICancellationSignal mRemoteCancellationSignal;

    private void <init>(java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        java.util.concurrent.Executor r1;
        java.util.function.Consumer r2;
        boolean z1, z2;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.util.function.Consumer;

        specialinvoke r0.<android.location.ILocationListener$Stub: void <init>()>();

        if r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "illegal null executor");

        if r2 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "illegal null consumer");

        r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.concurrent.Executor mExecutor> = r1;

        r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.function.Consumer mConsumer> = r2;

        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.app.AlarmManager mAlarmManager> = null;

        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.os.ICancellationSignal mRemoteCancellationSignal> = null;

        return;
    }

    void <init>(java.util.concurrent.Executor, java.util.function.Consumer, android.location.LocationManager$1)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        java.util.concurrent.Executor r1;
        java.util.function.Consumer r2;
        android.location.LocationManager$1 r3;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.util.function.Consumer;

        r3 := @parameter2: android.location.LocationManager$1;

        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: void <init>(java.util.concurrent.Executor,java.util.function.Consumer)>(r1, r2);

        return;
    }

    private void acceptResult(android.location.Location)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        android.location.Location r1;
        java.util.function.Consumer r2;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r1 := @parameter0: android.location.Location;

        r2 = specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.function.Consumer remove()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<java.util.function.Consumer: void accept(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void deliverResult(android.location.Location)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        android.location.'-$$Lambda$LocationManager$GetCurrentLocationTransport$TwoLg_IkGQIkPn-gbFfT0g9K-Ts' $r1;
        com.android.internal.util.function.pooled.PooledRunnable $r2, r8;
        java.util.concurrent.Executor $r3, r7;
        java.lang.Throwable $r4, $r5;
        android.location.Location r6;
        java.util.function.BiConsumer r11;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r6 := @parameter0: android.location.Location;

        entermonitor r0;

     label1:
        r7 = r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.concurrent.Executor mExecutor>;

     label2:
        if r7 != null goto label3;

        exitmonitor r0;

        return;

     label3:
        $r1 = <android.location._$$Lambda$LocationManager$GetCurrentLocationTransport$TwoLg_IkGQIkPn_gbFfT0g9K_Ts: android.location.'-$$Lambda$LocationManager$GetCurrentLocationTransport$TwoLg_IkGQIkPn-gbFfT0g9K-Ts' INSTANCE>;

        r11 = (java.util.function.BiConsumer) $r1;

        $r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r11, r0, r6);

        r8 = interfaceinvoke $r2.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

     label4:
        $r3 = r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r8);

     label5:
        exitmonitor r0;

        return;

     label6:
        $r4 := @caughtexception;

     label7:
        interfaceinvoke r8.<com.android.internal.util.function.pooled.PooledRunnable: void recycle()>();

        throw $r4;

     label8:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.util.concurrent.RejectedExecutionException from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public static void lambda$TwoLg_IkGQIkPn-gbFfT0g9K-Ts(android.location.LocationManager$GetCurrentLocationTransport, android.location.Location)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        android.location.Location r1;

        r0 := @parameter0: android.location.LocationManager$GetCurrentLocationTransport;

        r1 := @parameter1: android.location.Location;

        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: void acceptResult(android.location.Location)>(r1);

        return;
    }

    private java.util.function.Consumer remove()
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        android.app.AlarmManager $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        java.util.function.Consumer r5;
        android.os.ICancellationSignal r6;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        entermonitor r0;

     label01:
        r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.concurrent.Executor mExecutor> = null;

        r5 = r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.function.Consumer mConsumer>;

        r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.function.Consumer mConsumer> = null;

        $r1 = r0.<android.location.LocationManager$GetCurrentLocationTransport: android.app.AlarmManager mAlarmManager>;

        if $r1 == null goto label02;

        $r2 = r0.<android.location.LocationManager$GetCurrentLocationTransport: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r2.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>(r0);

        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.app.AlarmManager mAlarmManager> = null;

     label02:
        r6 = r0.<android.location.LocationManager$GetCurrentLocationTransport: android.os.ICancellationSignal mRemoteCancellationSignal>;

        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.os.ICancellationSignal mRemoteCancellationSignal> = null;

        exitmonitor r0;

     label03:
        if r6 == null goto label07;

     label04:
        interfaceinvoke r6.<android.os.ICancellationSignal: void cancel()>();

     label05:
        goto label07;

     label06:
        $r3 := @caughtexception;

     label07:
        return r5;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void cancel()
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.function.Consumer remove()>();

        return;
    }

    public void fail()
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: void deliverResult(android.location.Location)>(null);

        return;
    }

    public java.lang.String getListenerId()
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        java.util.function.Consumer $r1;
        java.lang.String $r2;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        $r1 = r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.function.Consumer mConsumer>;

        $r2 = staticinvoke <android.app.AppOpsManager: java.lang.String toReceiverId(java.lang.Object)>($r1);

        return $r2;
    }

    public void onAlarm()
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        java.lang.Throwable $r2;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        entermonitor r0;

     label1:
        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.app.AlarmManager mAlarmManager> = null;

        exitmonitor r0;

     label2:
        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: void deliverResult(android.location.Location)>(null);

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onLocationChanged(android.location.Location)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        java.lang.Throwable $r1;
        android.location.Location r2;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r2 := @parameter0: android.location.Location;

        entermonitor r0;

     label1:
        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.os.ICancellationSignal mRemoteCancellationSignal> = null;

        exitmonitor r0;

     label2:
        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: void deliverResult(android.location.Location)>(r2);

        return;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onProviderDisabled(java.lang.String)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        java.lang.String r1;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: void deliverResult(android.location.Location)>(null);

        return;
    }

    public void onProviderEnabled(java.lang.String)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        java.lang.String r1;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void onRemoved()
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        specialinvoke r0.<android.location.LocationManager$GetCurrentLocationTransport: void deliverResult(android.location.Location)>(null);

        return;
    }

    public void register(android.app.AlarmManager, android.os.ICancellationSignal)
    {
        android.location.LocationManager$GetCurrentLocationTransport r0;
        android.os.ICancellationSignal r1;
        java.util.function.Consumer r2;
        long $l0, $l1;
        java.lang.Throwable $r3;
        android.app.AlarmManager r4;

        r0 := @this: android.location.LocationManager$GetCurrentLocationTransport;

        r4 := @parameter0: android.app.AlarmManager;

        r1 := @parameter1: android.os.ICancellationSignal;

        entermonitor r0;

     label1:
        r2 = r0.<android.location.LocationManager$GetCurrentLocationTransport: java.util.function.Consumer mConsumer>;

     label2:
        if r2 != null goto label3;

        exitmonitor r0;

        return;

     label3:
        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.app.AlarmManager mAlarmManager> = r4;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = 30000L + $l0;

        virtualinvoke r4.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(3, $l1, "GetCurrentLocation", r0, null);

        r0.<android.location.LocationManager$GetCurrentLocationTransport: android.os.ICancellationSignal mRemoteCancellationSignal> = r1;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
