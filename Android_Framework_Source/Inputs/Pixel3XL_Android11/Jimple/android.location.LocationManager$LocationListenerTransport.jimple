class android.location.LocationManager$LocationListenerTransport extends android.location.ILocationListener$Stub
{
    private volatile java.util.concurrent.Executor mExecutor;
    private final android.location.LocationListener mListener;
    final android.location.LocationManager this$0;

    private void <init>(android.location.LocationManager, android.location.LocationListener)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.LocationManager r1;
        android.location.LocationListener r2;
        boolean z0;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r1 := @parameter0: android.location.LocationManager;

        r2 := @parameter1: android.location.LocationListener;

        r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationManager this$0> = r1;

        specialinvoke r0.<android.location.ILocationListener$Stub: void <init>()>();

        r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor> = null;

        if r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null listener");

        r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener mListener> = r2;

        return;
    }

    void <init>(android.location.LocationManager, android.location.LocationListener, android.location.LocationManager$1)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.LocationManager r1;
        android.location.LocationListener r2;
        android.location.LocationManager$1 r3;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r1 := @parameter0: android.location.LocationManager;

        r2 := @parameter1: android.location.LocationListener;

        r3 := @parameter2: android.location.LocationManager$1;

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void <init>(android.location.LocationManager,android.location.LocationListener)>(r1, r2);

        return;
    }

    private void acceptLocation(java.util.concurrent.Executor, android.location.Location)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.Location r1;
        java.util.concurrent.Executor r2, r6;
        long l0;
        android.location.LocationListener $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r6 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.location.Location;

     label01:
        r2 = r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor>;

     label02:
        if r6 == r2 goto label03;

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        return;

     label03:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r3 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener mListener>;

        interfaceinvoke $r3.<android.location.LocationListener: void onLocationChanged(android.location.Location)>(r1);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label06:
        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        return;

     label07:
        $r5 := @caughtexception;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label09:
        throw $r5;

     label10:
        $r4 := @caughtexception;

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    private void acceptProviderChange(java.util.concurrent.Executor, java.lang.String, boolean)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        java.lang.String r1;
        boolean z0;
        java.util.concurrent.Executor r2, r7;
        long l0;
        android.location.LocationListener $r3, $r4;
        java.lang.Throwable $r5, $r6;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r7 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label01:
        r2 = r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor>;

     label02:
        if r7 == r2 goto label03;

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        return;

     label03:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        if z0 == 0 goto label07;

     label05:
        $r4 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener mListener>;

        interfaceinvoke $r4.<android.location.LocationListener: void onProviderEnabled(java.lang.String)>(r1);

     label06:
        goto label08;

     label07:
        $r3 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener mListener>;

        interfaceinvoke $r3.<android.location.LocationListener: void onProviderDisabled(java.lang.String)>(r1);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label09:
        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        return;

     label10:
        $r6 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r6;

     label13:
        $r5 := @caughtexception;

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public static void lambda$C3xaM63A8GAwfJNN4R634OLsvDc(android.location.LocationManager$LocationListenerTransport, java.util.concurrent.Executor, java.lang.String, boolean)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        java.util.concurrent.Executor r1;
        java.lang.String r2;
        boolean z0;

        r0 := @parameter0: android.location.LocationManager$LocationListenerTransport;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void acceptProviderChange(java.util.concurrent.Executor,java.lang.String,boolean)>(r1, r2, z0);

        return;
    }

    public static void lambda$enkW18B0WwpQkSIMmVChmQ2YwC8(android.location.LocationManager$LocationListenerTransport, java.util.concurrent.Executor, android.location.Location)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        java.util.concurrent.Executor r1;
        android.location.Location r2;

        r0 := @parameter0: android.location.LocationManager$LocationListenerTransport;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.location.Location;

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void acceptLocation(java.util.concurrent.Executor,android.location.Location)>(r1, r2);

        return;
    }

    private void locationCallbackFinished()
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.LocationManager $r2;
        android.location.ILocationManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

     label1:
        $r2 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationManager this$0>;

        $r3 = staticinvoke <android.location.LocationManager: android.location.ILocationManager access$000(android.location.LocationManager)>($r2);

        interfaceinvoke $r3.<android.location.ILocationManager: void locationCallbackFinished(android.location.ILocationListener)>(r0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.LocationListener getKey()
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.LocationListener $r1;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        $r1 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener mListener>;

        return $r1;
    }

    public java.lang.String getListenerId()
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.LocationListener $r1;
        java.lang.String $r2;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        $r1 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener mListener>;

        $r2 = staticinvoke <android.app.AppOpsManager: java.lang.String toReceiverId(java.lang.Object)>($r1);

        return $r2;
    }

    public void lambda$onRemoved$0$LocationManager$LocationListenerTransport(java.util.concurrent.Executor)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        java.util.concurrent.Executor $r2, r8;
        android.location.LocationManager $r3, $r4;
        android.util.ArrayMap $r5, r9;
        android.location.LocationListener $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r8 := @parameter0: java.util.concurrent.Executor;

        $r2 = r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor>;

        if r8 == $r2 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.location.LocationManager$LocationListenerTransport: void unregister()>();

        $r3 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationManager this$0>;

        r9 = staticinvoke <android.location.LocationManager: android.util.ArrayMap access$800(android.location.LocationManager)>($r3);

        entermonitor r9;

     label2:
        $r4 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationManager this$0>;

        $r5 = staticinvoke <android.location.LocationManager: android.util.ArrayMap access$800(android.location.LocationManager)>($r4);

        $r6 = r0.<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener mListener>;

        virtualinvoke $r5.<android.util.ArrayMap: boolean remove(java.lang.Object,java.lang.Object)>($r6, r0);

        exitmonitor r9;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r9;

     label6:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void onLocationChanged(android.location.Location)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.'-$$Lambda$LocationManager$LocationListenerTransport$enkW18B0WwpQkSIMmVChmQ2YwC8' $r1;
        com.android.internal.util.function.pooled.PooledRunnable $r2, r6;
        java.lang.Throwable $r3;
        android.location.Location r4;
        java.util.concurrent.Executor r5;
        com.android.internal.util.function.TriConsumer r8;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r4 := @parameter0: android.location.Location;

        r5 = r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor>;

        if r5 != null goto label1;

        return;

     label1:
        $r1 = <android.location._$$Lambda$LocationManager$LocationListenerTransport$enkW18B0WwpQkSIMmVChmQ2YwC8: android.location.'-$$Lambda$LocationManager$LocationListenerTransport$enkW18B0WwpQkSIMmVChmQ2YwC8' INSTANCE>;

        r8 = (com.android.internal.util.function.TriConsumer) $r1;

        $r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r8, r0, r5, r4);

        r6 = interfaceinvoke $r2.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

     label2:
        interfaceinvoke r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r6);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        interfaceinvoke r6.<com.android.internal.util.function.pooled.PooledRunnable: void recycle()>();

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        throw $r3;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    public void onProviderDisabled(java.lang.String)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.'-$$Lambda$LocationManager$LocationListenerTransport$C3xaM63A8GAwfJNN4R634OLsvDc' $r1;
        java.lang.Boolean $r2;
        com.android.internal.util.function.pooled.PooledRunnable $r3, r7;
        java.lang.Throwable $r4;
        java.lang.String r5;
        java.util.concurrent.Executor r6;
        com.android.internal.util.function.QuadConsumer r9;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r5 := @parameter0: java.lang.String;

        r6 = r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor>;

        if r6 != null goto label1;

        return;

     label1:
        $r1 = <android.location._$$Lambda$LocationManager$LocationListenerTransport$C3xaM63A8GAwfJNN4R634OLsvDc: android.location.'-$$Lambda$LocationManager$LocationListenerTransport$C3xaM63A8GAwfJNN4R634OLsvDc' INSTANCE>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r9 = (com.android.internal.util.function.QuadConsumer) $r1;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(com.android.internal.util.function.QuadConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r9, r0, r6, r5, $r2);

        r7 = interfaceinvoke $r3.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

     label2:
        interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r7);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        interfaceinvoke r7.<com.android.internal.util.function.pooled.PooledRunnable: void recycle()>();

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        throw $r4;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    public void onProviderEnabled(java.lang.String)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        android.location.'-$$Lambda$LocationManager$LocationListenerTransport$C3xaM63A8GAwfJNN4R634OLsvDc' $r1;
        java.lang.Boolean $r2;
        com.android.internal.util.function.pooled.PooledRunnable $r3, r7;
        java.lang.Throwable $r4;
        java.lang.String r5;
        java.util.concurrent.Executor r6;
        com.android.internal.util.function.QuadConsumer r9;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r5 := @parameter0: java.lang.String;

        r6 = r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor>;

        if r6 != null goto label1;

        return;

     label1:
        $r1 = <android.location._$$Lambda$LocationManager$LocationListenerTransport$C3xaM63A8GAwfJNN4R634OLsvDc: android.location.'-$$Lambda$LocationManager$LocationListenerTransport$C3xaM63A8GAwfJNN4R634OLsvDc' INSTANCE>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r9 = (com.android.internal.util.function.QuadConsumer) $r1;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(com.android.internal.util.function.QuadConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r9, r0, r6, r5, $r2);

        r7 = interfaceinvoke $r3.<com.android.internal.util.function.pooled.PooledRunnable: com.android.internal.util.function.pooled.PooledRunnable recycleOnUse()>();

     label2:
        interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r7);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        interfaceinvoke r7.<com.android.internal.util.function.pooled.PooledRunnable: void recycle()>();

        specialinvoke r0.<android.location.LocationManager$LocationListenerTransport: void locationCallbackFinished()>();

        throw $r4;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    public void onRemoved()
    {
        android.location.LocationManager$LocationListenerTransport r0;
        java.util.concurrent.Executor r1;
        android.location._$$Lambda$LocationManager$LocationListenerTransport$fHjQXipQePznoEyxLuCfUO_YP1Y $r2;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r1 = r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor>;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = new android.location._$$Lambda$LocationManager$LocationListenerTransport$fHjQXipQePznoEyxLuCfUO_YP1Y;

        specialinvoke $r2.<android.location._$$Lambda$LocationManager$LocationListenerTransport$fHjQXipQePznoEyxLuCfUO_YP1Y: void <init>(android.location.LocationManager$LocationListenerTransport,java.util.concurrent.Executor)>(r0, r1);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public void register(java.util.concurrent.Executor)
    {
        android.location.LocationManager$LocationListenerTransport r0;
        java.util.concurrent.Executor r1;
        boolean z0;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r1 := @parameter0: java.util.concurrent.Executor;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null executor");

        r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor> = r1;

        return;
    }

    public void unregister()
    {
        android.location.LocationManager$LocationListenerTransport r0;

        r0 := @this: android.location.LocationManager$LocationListenerTransport;

        r0.<android.location.LocationManager$LocationListenerTransport: java.util.concurrent.Executor mExecutor> = null;

        return;
    }
}
