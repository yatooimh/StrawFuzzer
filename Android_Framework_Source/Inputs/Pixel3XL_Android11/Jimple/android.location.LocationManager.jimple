public class android.location.LocationManager extends java.lang.Object
{
    public static final java.lang.String CACHE_KEY_LOCATION_ENABLED_PROPERTY;
    public static final java.lang.String EXTRA_LOCATION_ENABLED;
    public static final java.lang.String EXTRA_PROVIDER_ENABLED;
    public static final java.lang.String EXTRA_PROVIDER_NAME;
    public static final java.lang.String FUSED_PROVIDER;
    private static final long GET_CURRENT_LOCATION_MAX_TIMEOUT_MS;
    private static final long GET_PROVIDER_SECURITY_EXCEPTIONS;
    public static final java.lang.String GPS_PROVIDER;
    private static final long GPS_STATUS_USAGE;
    public static final java.lang.String HIGH_POWER_REQUEST_CHANGE_ACTION;
    private static final long INCOMPLETE_LOCATION;
    public static final java.lang.String KEY_LOCATION_CHANGED;
    public static final java.lang.String KEY_PROVIDER_ENABLED;
    public static final java.lang.String KEY_PROXIMITY_ENTERING;
    public static final java.lang.String KEY_STATUS_CHANGED;
    public static final java.lang.String METADATA_SETTINGS_FOOTER_STRING;
    public static final java.lang.String MODE_CHANGED_ACTION;
    public static final java.lang.String NETWORK_PROVIDER;
    public static final java.lang.String PASSIVE_PROVIDER;
    public static final java.lang.String PROVIDERS_CHANGED_ACTION;
    public static final java.lang.String SETTINGS_FOOTER_DISPLAYED_ACTION;
    private static final long TARGETED_PENDING_INTENT;
    private final android.location.LocationManager$BatchedLocationCallbackManager mBatchedLocationCallbackManager;
    private final android.content.Context mContext;
    private final android.location.LocationManager$GnssAntennaInfoListenerManager mGnssAntennaInfoListenerManager;
    private final android.location.LocationManager$GnssMeasurementsListenerManager mGnssMeasurementsListenerManager;
    private final android.location.LocationManager$GnssNavigationMessageListenerManager mGnssNavigationMessageListenerTransport;
    private final android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager;
    private final android.util.ArrayMap mListeners;
    private android.app.PropertyInvalidatedCache mLocationEnabledCache;
    private final java.lang.Object mLock;
    private final android.location.ILocationManager mService;

    public void <init>(android.content.Context, android.location.ILocationManager)
    {
        android.location.LocationManager r0;
        android.content.Context r1;
        android.location.ILocationManager r2;
        android.location.LocationManager$1 $r3;
        java.lang.Object $r4;
        android.util.ArrayMap $r5;
        android.location.LocationManager$BatchedLocationCallbackManager $r6;
        android.location.LocationManager$GnssStatusListenerManager $r7;
        android.location.LocationManager$GnssMeasurementsListenerManager $r8;
        android.location.LocationManager$GnssNavigationMessageListenerManager $r9;
        android.location.LocationManager$GnssAntennaInfoListenerManager $r10;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.location.ILocationManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.location.LocationManager$1;

        specialinvoke $r3.<android.location.LocationManager$1: void <init>(android.location.LocationManager,int,java.lang.String)>(r0, 4, "cache_key.location_enabled");

        r0.<android.location.LocationManager: android.app.PropertyInvalidatedCache mLocationEnabledCache> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.location.LocationManager: java.lang.Object mLock> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.location.LocationManager: android.util.ArrayMap mListeners> = $r5;

        $r6 = new android.location.LocationManager$BatchedLocationCallbackManager;

        specialinvoke $r6.<android.location.LocationManager$BatchedLocationCallbackManager: void <init>(android.location.LocationManager,android.location.LocationManager$1)>(r0, null);

        r0.<android.location.LocationManager: android.location.LocationManager$BatchedLocationCallbackManager mBatchedLocationCallbackManager> = $r6;

        $r7 = new android.location.LocationManager$GnssStatusListenerManager;

        specialinvoke $r7.<android.location.LocationManager$GnssStatusListenerManager: void <init>(android.location.LocationManager,android.location.LocationManager$1)>(r0, null);

        r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager> = $r7;

        $r8 = new android.location.LocationManager$GnssMeasurementsListenerManager;

        specialinvoke $r8.<android.location.LocationManager$GnssMeasurementsListenerManager: void <init>(android.location.LocationManager,android.location.LocationManager$1)>(r0, null);

        r0.<android.location.LocationManager: android.location.LocationManager$GnssMeasurementsListenerManager mGnssMeasurementsListenerManager> = $r8;

        $r9 = new android.location.LocationManager$GnssNavigationMessageListenerManager;

        specialinvoke $r9.<android.location.LocationManager$GnssNavigationMessageListenerManager: void <init>(android.location.LocationManager,android.location.LocationManager$1)>(r0, null);

        r0.<android.location.LocationManager: android.location.LocationManager$GnssNavigationMessageListenerManager mGnssNavigationMessageListenerTransport> = $r9;

        $r10 = new android.location.LocationManager$GnssAntennaInfoListenerManager;

        specialinvoke $r10.<android.location.LocationManager$GnssAntennaInfoListenerManager: void <init>(android.location.LocationManager,android.location.LocationManager$1)>(r0, null);

        r0.<android.location.LocationManager: android.location.LocationManager$GnssAntennaInfoListenerManager mGnssAntennaInfoListenerManager> = $r10;

        r0.<android.location.LocationManager: android.location.ILocationManager mService> = r2;

        r0.<android.location.LocationManager: android.content.Context mContext> = r1;

        return;
    }

    static android.location.ILocationManager access$000(android.location.LocationManager)
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;

        r0 := @parameter0: android.location.LocationManager;

        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        return $r1;
    }

    static android.content.Context access$1100(android.location.LocationManager)
    {
        android.location.LocationManager r0;
        android.content.Context $r1;

        r0 := @parameter0: android.location.LocationManager;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        return $r1;
    }

    static android.util.ArrayMap access$800(android.location.LocationManager)
    {
        android.location.LocationManager r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.location.LocationManager;

        $r1 = r0.<android.location.LocationManager: android.util.ArrayMap mListeners>;

        return $r1;
    }

    public static void invalidateLocalLocationEnabledCaches()
    {
        staticinvoke <android.app.PropertyInvalidatedCache: void invalidateCache(java.lang.String)>("cache_key.location_enabled");

        return;
    }

    public void addGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.location.Geofence r1;
        android.app.PendingIntent r2;
        boolean $z1, $z2, z3, z4, z5;
        android.content.Context $r3, $r6;
        android.location.ILocationManager $r4;
        java.lang.String $r5, $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.location.LocationRequest r10;

        r0 := @this: android.location.LocationManager;

        r10 := @parameter0: android.location.LocationRequest;

        r1 := @parameter1: android.location.Geofence;

        r2 := @parameter2: android.app.PendingIntent;

        if r10 == null goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "invalid null location request");

        if r1 == null goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "invalid null geofence");

        if r2 == null goto label5;

        z5 = 1;

        goto label6;

     label5:
        z5 = 0;

     label6:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "invalid null pending intent");

        $z1 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148963590L);

        if $z1 == 0 goto label7;

        $z2 = virtualinvoke r2.<android.app.PendingIntent: boolean isTargetedToPackage()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "pending intent must be targeted to a package");

     label7:
        $r4 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r3 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $r6 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke $r4.<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>(r10, r1, r2, $r5, $r7);

     label8:
        return;

     label9:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label7 to label8 with label9;
    }

    public boolean addGpsMeasurementListener(android.location.GpsMeasurementsEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsMeasurementsEvent$Listener r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsMeasurementsEvent$Listener;

        return 0;
    }

    public boolean addGpsNavigationMessageListener(android.location.GpsNavigationMessageEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsNavigationMessageEvent$Listener r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsNavigationMessageEvent$Listener;

        return 0;
    }

    public boolean addGpsStatusListener(android.location.GpsStatus$Listener)
    {
        android.location.LocationManager r0;
        android.location.LocationManager$GnssStatusListenerManager r1;
        android.os.HandlerExecutor r2;
        android.os.Handler r3;
        boolean z0, $z1;
        java.lang.UnsupportedOperationException $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.location.GpsStatus$Listener r7;

        r0 := @this: android.location.LocationManager;

        r7 := @parameter0: android.location.GpsStatus$Listener;

        $z1 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(144027538L);

        if $z1 != 0 goto label4;

     label1:
        r1 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        r2 = new android.os.HandlerExecutor;

        r3 = new android.os.Handler;

        specialinvoke r3.<android.os.Handler: void <init>()>();

        specialinvoke r2.<android.os.HandlerExecutor: void <init>(android.os.Handler)>(r3);

        z0 = virtualinvoke r1.<android.location.LocationManager$GnssStatusListenerManager: boolean addListener(android.location.GpsStatus$Listener,java.util.concurrent.Executor)>(r7, r2);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("GpsStatus APIs not supported, please use GnssStatus APIs instead");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addNmeaListener(android.location.GpsStatus$NmeaListener)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus$NmeaListener r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus$NmeaListener;

        return 0;
    }

    public boolean addNmeaListener(android.location.OnNmeaMessageListener)
    {
        android.location.LocationManager r0;
        android.location.OnNmeaMessageListener r1;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.OnNmeaMessageListener;

        $z0 = virtualinvoke r0.<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)>(r1, null);

        return $z0;
    }

    public boolean addNmeaListener(android.location.OnNmeaMessageListener, android.os.Handler)
    {
        android.location.LocationManager r0;
        android.os.Handler r1, $r3, r7;
        boolean z0;
        android.location.LocationManager$GnssStatusListenerManager $r2;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.location.OnNmeaMessageListener r6;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.location.OnNmeaMessageListener;

        r1 := @parameter1: android.os.Handler;

        r7 = r1;

        if r1 != null goto label1;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>()>();

        r7 = $r3;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssStatusListenerManager: boolean addListener(android.location.OnNmeaMessageListener,android.os.Handler)>(r6, r7);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addNmeaListener(java.util.concurrent.Executor, android.location.OnNmeaMessageListener)
    {
        android.location.LocationManager r0;
        android.location.OnNmeaMessageListener r1;
        boolean z0;
        android.location.LocationManager$GnssStatusListenerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.concurrent.Executor r5;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.location.OnNmeaMessageListener;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssStatusListenerManager: boolean addListener(android.location.OnNmeaMessageListener,java.util.concurrent.Executor)>(r1, r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addProximityAlert(double, double, float, long, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        double d0, d1;
        float f0;
        android.location.Geofence r1;
        android.location.LocationRequest r2, $r3;
        boolean $z0, $z1, z2;
        byte $b0;
        android.content.Context $r4, $r7;
        android.location.ILocationManager $r5;
        java.lang.String $r6, $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        long l1;
        android.app.PendingIntent r11;

        r0 := @this: android.location.LocationManager;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        f0 := @parameter2: float;

        l1 := @parameter3: long;

        r11 := @parameter4: android.app.PendingIntent;

        if r11 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null pending intent");

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148963590L);

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r11.<android.app.PendingIntent: boolean isTargetedToPackage()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "pending intent must be targeted to a package");

     label3:
        $b0 = l1 cmp 0L;

        if $b0 >= 0 goto label4;

        l1 = 9223372036854775807L;

        goto label4;

     label4:
        r1 = staticinvoke <android.location.Geofence: android.location.Geofence createCircle(double,double,float)>(d0, d1, f0);

        $r3 = new android.location.LocationRequest;

        specialinvoke $r3.<android.location.LocationRequest: void <init>()>();

        r2 = virtualinvoke $r3.<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>(l1);

     label5:
        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $r7 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke $r5.<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>(r2, r1, r11, $r6, $r8);

     label6:
        return;

     label7:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void addTestProvider(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int)
    {
        android.location.LocationManager r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7;
        int i0, i1;
        com.android.internal.location.ProviderProperties $r2;
        android.content.Context $r3, $r6;
        android.location.ILocationManager $r4;
        java.lang.String $r5, $r7, r10;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: android.location.LocationManager;

        r10 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        z4 := @parameter5: boolean;

        z5 := @parameter6: boolean;

        z6 := @parameter7: boolean;

        i0 := @parameter8: int;

        i1 := @parameter9: int;

        if r10 == null goto label1;

        z7 = 1;

        goto label2;

     label1:
        z7 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z7, "invalid null provider");

        $r2 = new com.android.internal.location.ProviderProperties;

        specialinvoke $r2.<com.android.internal.location.ProviderProperties: void <init>(boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>(z0, z1, z2, z3, z4, z5, z6, i0, i1);

     label3:
        $r4 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r3 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        $r6 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke $r4.<android.location.ILocationManager: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>(r10, $r2, $r5, $r7);

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void clearTestProviderEnabled(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void clearTestProviderLocation(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void clearTestProviderStatus(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void disableLocalLocationEnabledCaches()
    {
        android.location.LocationManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.location.LocationManager;

        r1 = r0.<android.location.LocationManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.location.LocationManager: android.app.PropertyInvalidatedCache mLocationEnabledCache> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void flushGnssBatch()
    {
        android.location.LocationManager r0;
        android.content.Context $r2;
        android.location.ILocationManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.location.LocationManager;

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r2 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r3.<android.location.ILocationManager: void flushGnssBatch(java.lang.String)>($r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getAllProviders()
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.location.LocationManager;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r4 = interfaceinvoke $r1.<android.location.ILocationManager: java.util.List getAllProviders()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getBackgroundThrottlingWhitelist()
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4;

        r0 := @this: android.location.LocationManager;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r4 = interfaceinvoke $r1.<android.location.ILocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getBestProvider(android.location.Criteria, boolean)
    {
        android.location.LocationManager r0;
        boolean z0, z1;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.Criteria r4;
        java.lang.String r5;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        if r4 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null criteria");

     label3:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r5 = interfaceinvoke $r1.<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>(r4, z0);

     label4:
        return r5;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void getCurrentLocation(android.location.LocationRequest, android.os.CancellationSignal, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.location.LocationManager r0;
        android.os.CancellationSignal r1;
        android.location.LocationRequest $r2, r17, r20;
        long $l0;
        byte $b1;
        android.location.LocationManager$GetCurrentLocationTransport $r3;
        android.content.Context $r4, $r7, $r10;
        android.location.ILocationManager $r5;
        java.lang.String $r6, $r8, $r9;
        boolean $z0;
        java.lang.Object $r11;
        android.app.AlarmManager $r12;
        android.os.RemoteException $r15;
        java.lang.RuntimeException $r16;
        java.util.concurrent.Executor r18;
        java.util.function.Consumer r19;
        android.os.ICancellationSignal r22;
        android.location._$$Lambda$DG2BOD_OS4BJGp02JB18JR3FZ6s r23;

        r0 := @this: android.location.LocationManager;

        r17 := @parameter0: android.location.LocationRequest;

        r1 := @parameter1: android.os.CancellationSignal;

        r18 := @parameter2: java.util.concurrent.Executor;

        r19 := @parameter3: java.util.function.Consumer;

        $r2 = new android.location.LocationRequest;

        specialinvoke $r2.<android.location.LocationRequest: void <init>(android.location.LocationRequest)>(r17);

        r20 = virtualinvoke $r2.<android.location.LocationRequest: android.location.LocationRequest setNumUpdates(int)>(1);

        $l0 = virtualinvoke r20.<android.location.LocationRequest: long getExpireIn()>();

        $b1 = $l0 cmp 30000L;

        if $b1 <= 0 goto label1;

        virtualinvoke r20.<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>(30000L);

     label1:
        $r3 = new android.location.LocationManager$GetCurrentLocationTransport;

        specialinvoke $r3.<android.location.LocationManager$GetCurrentLocationTransport: void <init>(java.util.concurrent.Executor,java.util.function.Consumer,android.location.LocationManager$1)>(r18, r19, null);

        if r1 == null goto label2;

        virtualinvoke r1.<android.os.CancellationSignal: void throwIfCanceled()>();

     label2:
        r22 = staticinvoke <android.os.CancellationSignal: android.os.ICancellationSignal createTransport()>();

     label3:
        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $r7 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getAttributionTag()>();

        $r9 = virtualinvoke $r3.<android.location.LocationManager$GetCurrentLocationTransport: java.lang.String getListenerId()>();

        $z0 = interfaceinvoke $r5.<android.location.ILocationManager: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>(r20, r22, $r3, $r6, $r8, $r9);

        if $z0 == 0 goto label7;

        $r10 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AlarmManager;");

        $r12 = (android.app.AlarmManager) $r11;

        virtualinvoke $r3.<android.location.LocationManager$GetCurrentLocationTransport: void register(android.app.AlarmManager,android.os.ICancellationSignal)>($r12, r22);

     label4:
        if r1 == null goto label8;

     label5:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        r23 = new android.location._$$Lambda$DG2BOD_OS4BJGp02JB18JR3FZ6s;

        specialinvoke r23.<android.location._$$Lambda$DG2BOD_OS4BJGp02JB18JR3FZ6s: void <init>(android.location.LocationManager$GetCurrentLocationTransport)>($r3);

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(r23);

     label6:
        goto label8;

     label7:
        virtualinvoke $r3.<android.location.LocationManager$GetCurrentLocationTransport: void fail()>();

     label8:
        return;

     label9:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r16;

        catch android.os.RemoteException from label3 to label4 with label9;
        catch android.os.RemoteException from label5 to label6 with label9;
        catch android.os.RemoteException from label7 to label8 with label9;
    }

    public void getCurrentLocation(java.lang.String, android.os.CancellationSignal, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.CancellationSignal r2;
        java.util.concurrent.Executor r3;
        java.util.function.Consumer r4;
        android.location.LocationRequest $r5;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.CancellationSignal;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: java.util.function.Consumer;

        $r5 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, 0L, 0.0F, 1);

        virtualinvoke r0.<android.location.LocationManager: void getCurrentLocation(android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>($r5, r2, r3, r4);

        return;
    }

    public java.lang.String getExtraLocationControllerPackage()
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r4;

        r0 := @this: android.location.LocationManager;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r4 = interfaceinvoke $r1.<android.location.ILocationManager: java.lang.String getExtraLocationControllerPackage()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getGnssBatchSize()
    {
        android.location.LocationManager r0;
        int i0;
        android.content.Context $r2;
        android.location.ILocationManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.location.LocationManager;

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r2 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        i0 = interfaceinvoke $r3.<android.location.ILocationManager: int getGnssBatchSize(java.lang.String)>($r4);

     label2:
        return i0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.GnssCapabilities getGnssCapabilities()
    {
        android.location.LocationManager r0;
        long l0, l2;
        android.location.ILocationManager $r1;
        byte $b1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.GnssCapabilities r4;

        r0 := @this: android.location.LocationManager;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        l0 = interfaceinvoke $r1.<android.location.ILocationManager: long getGnssCapabilities()>();

     label2:
        l2 = l0;

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label3;

        l2 = 0L;

     label3:
        r4 = staticinvoke <android.location.GnssCapabilities: android.location.GnssCapabilities of(long)>(l2);

     label4:
        return r4;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.String getGnssHardwareModelName()
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.location.LocationManager;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r4 = interfaceinvoke $r1.<android.location.ILocationManager: java.lang.String getGnssHardwareModelName()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getGnssYearOfHardware()
    {
        android.location.LocationManager r0;
        int i0;
        android.location.ILocationManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.location.LocationManager;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        i0 = interfaceinvoke $r2.<android.location.ILocationManager: int getGnssYearOfHardware()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.GpsStatus getGpsStatus(android.location.GpsStatus)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus r1, r6;
        int i0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;
        android.location.LocationManager$GnssStatusListenerManager $r3, $r4;
        android.location.GnssStatus r5;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus;

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(144027538L);

        if $z0 != 0 goto label4;

        $r3 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        r5 = virtualinvoke $r3.<android.location.LocationManager$GnssStatusListenerManager: android.location.GnssStatus getGnssStatus()>();

        $r4 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        i0 = virtualinvoke $r4.<android.location.LocationManager$GnssStatusListenerManager: int getTtff()>();

        if r5 == null goto label2;

        if r1 != null goto label1;

        r6 = staticinvoke <android.location.GpsStatus: android.location.GpsStatus create(android.location.GnssStatus,int)>(r5, i0);

        goto label3;

     label1:
        virtualinvoke r1.<android.location.GpsStatus: void setStatus(android.location.GnssStatus,int)>(r5, i0);

        r6 = r1;

        goto label3;

     label2:
        r6 = r1;

        if r1 != null goto label3;

        r6 = staticinvoke <android.location.GpsStatus: android.location.GpsStatus createEmpty()>();

     label3:
        return r6;

     label4:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("GpsStatus APIs not supported, please use GnssStatus APIs instead");

        throw $r2;
    }

    public java.lang.String[] getIgnoreSettingsWhitelist()
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4;

        r0 := @this: android.location.LocationManager;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r4 = interfaceinvoke $r1.<android.location.ILocationManager: java.lang.String[] getIgnoreSettingsWhitelist()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.Location getLastKnownLocation(java.lang.String)
    {
        android.location.LocationManager r0;
        android.content.Context $r1, $r4;
        android.location.ILocationManager $r2;
        java.lang.String $r3, $r5, r8;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        boolean z0;
        android.location.LocationRequest r9;
        android.location.Location r10;

        r0 := @this: android.location.LocationManager;

        r8 := @parameter0: java.lang.String;

        if r8 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null provider");

        r9 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r8, 0L, 0.0F, 1);

     label3:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        r10 = interfaceinvoke $r2.<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>(r9, $r3, $r5);

     label4:
        return r10;

     label5:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.location.Location getLastLocation()
    {
        android.location.LocationManager r0;
        android.content.Context $r1, $r4;
        android.location.ILocationManager $r2;
        java.lang.String $r3, $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.location.Location r8;

        r0 := @this: android.location.LocationManager;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke $r2.<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>(null, $r3, $r5);

     label2:
        return r8;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.LocationProvider getProvider(java.lang.String)
    {
        android.location.LocationManager r0;
        boolean $z0, $z1, $z2, z3;
        android.location.LocationProvider $r1;
        java.lang.String $r2, $r4, r10;
        android.content.Context $r3, $r5, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.lang.Throwable $r8;
        android.location.ILocationManager $r12;
        com.android.internal.location.ProviderProperties r13;

        r0 := @this: android.location.LocationManager;

        r10 := @parameter0: java.lang.String;

        if r10 == null goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "invalid null provider");

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(150935354L);

        if $z0 != 0 goto label07;

        $r2 = "network";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 != 0 goto label04;

        $r4 = "fused";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z2 == 0 goto label03;

        goto label04;

     label03:
        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        $i3 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke $r5.<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>("android.permission.ACCESS_FINE_LOCATION", $i2, $i3, null);

        goto label07;

     label04:
        $r3 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke $r3.<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>("android.permission.ACCESS_FINE_LOCATION", $i0, $i1, null);

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

        $r9 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $i4 = staticinvoke <android.os.Process: int myPid()>();

        $i5 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke $r9.<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>("android.permission.ACCESS_COARSE_LOCATION", $i4, $i5, null);

     label07:
        $r12 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r13 = interfaceinvoke $r12.<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>(r10);

     label08:
        if r13 != null goto label09;

        return null;

     label09:
        $r1 = new android.location.LocationProvider;

        specialinvoke $r1.<android.location.LocationProvider: void <init>(java.lang.String,com.android.internal.location.ProviderProperties)>(r10, r13);

     label10:
        return $r1;

     label11:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch java.lang.SecurityException from label04 to label05 with label06;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    public java.util.List getProviderPackages(java.lang.String)
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.util.List $r4, r6;
        java.lang.String r5;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r6 = interfaceinvoke $r1.<android.location.ILocationManager: java.util.List getProviderPackages(java.lang.String)>(r5);

     label2:
        return r6;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getProviders(android.location.Criteria, boolean)
    {
        android.location.LocationManager r0;
        boolean z0, z1;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.Criteria r4;
        java.util.List r5;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        if r4 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null criteria");

     label3:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r5 = interfaceinvoke $r1.<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>(r4, z0);

     label4:
        return r5;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.util.List getProviders(boolean)
    {
        android.location.LocationManager r0;
        boolean z0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.location.LocationManager;

        z0 := @parameter0: boolean;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r4 = interfaceinvoke $r1.<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>(null, z0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getTestProviderCurrentRequests(java.lang.String)
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        boolean z0;
        java.util.List r5;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: java.lang.String;

        if r4 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null provider");

     label3:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r5 = interfaceinvoke $r1.<android.location.ILocationManager: java.util.List getTestProviderCurrentRequests(java.lang.String)>(r4);

     label4:
        return r5;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)
    {
        android.location.LocationManager r0;
        android.content.Context $r1;
        android.location.ILocationManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.location.GnssMeasurementCorrections r6;
        boolean z0;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.location.GnssMeasurementCorrections;

        if r6 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z0);

     label3:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r2.<android.location.ILocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections,java.lang.String)>(r6, $r3);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean injectLocation(android.location.Location)
    {
        android.location.LocationManager r0;
        boolean $z0, z1;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.Location r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.Location;

        if r4 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null location");

        $z0 = virtualinvoke r4.<android.location.Location: boolean isComplete()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "incomplete location object, missing timestamp or accuracy?");

     label3:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r1.<android.location.ILocationManager: void injectLocation(android.location.Location)>(r4);

     label4:
        return 1;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean isExtraLocationControllerPackageEnabled()
    {
        android.location.LocationManager r0;
        boolean z0;
        android.location.ILocationManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.location.LocationManager;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        z0 = interfaceinvoke $r2.<android.location.ILocationManager: boolean isExtraLocationControllerPackageEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isLocationEnabled()
    {
        android.location.LocationManager r0;
        android.os.UserHandle $r1;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        $r1 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $z0 = virtualinvoke r0.<android.location.LocationManager: boolean isLocationEnabledForUser(android.os.UserHandle)>($r1);

        return $z0;
    }

    public boolean isLocationEnabledForUser(android.os.UserHandle)
    {
        android.location.LocationManager r0;
        java.lang.Object r1, $r6;
        android.app.PropertyInvalidatedCache $r2, $r4;
        android.location.ILocationManager $r3;
        int $i0, $i1;
        java.lang.Integer $r5;
        java.lang.Boolean $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;
        android.os.UserHandle r11;
        boolean z0, z1;

        r0 := @this: android.location.LocationManager;

        r11 := @parameter0: android.os.UserHandle;

        r1 = r0.<android.location.LocationManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.location.LocationManager: android.app.PropertyInvalidatedCache mLocationEnabledCache>;

        if $r2 == null goto label3;

        $r4 = r0.<android.location.LocationManager: android.app.PropertyInvalidatedCache mLocationEnabledCache>;

        $i1 = virtualinvoke r11.<android.os.UserHandle: int getIdentifier()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = virtualinvoke $r4.<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>($r5);

        $r7 = (java.lang.Boolean) $r6;

        z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        exitmonitor r1;

     label4:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $i0 = virtualinvoke r11.<android.os.UserHandle: int getIdentifier()>();

        z1 = interfaceinvoke $r3.<android.location.ILocationManager: boolean isLocationEnabledForUser(int)>($i0);

     label5:
        return z1;

     label6:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isProviderEnabled(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.UserHandle $r2;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $z0 = virtualinvoke r0.<android.location.LocationManager: boolean isProviderEnabledForUser(java.lang.String,android.os.UserHandle)>(r1, $r2);

        return $z0;
    }

    public boolean isProviderEnabledForUser(java.lang.String, android.os.UserHandle)
    {
        android.location.LocationManager r0;
        android.os.UserHandle r1;
        android.location.ILocationManager $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        boolean z0, z1;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        if r5 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null provider");

     label3:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        z1 = interfaceinvoke $r2.<android.location.ILocationManager: boolean isProviderEnabledForUser(java.lang.String,int)>(r5, $i0);

     label4:
        return z1;

     label5:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean isProviderPackage(java.lang.String)
    {
        android.location.LocationManager r0;
        boolean z0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        z0 = interfaceinvoke $r1.<android.location.ILocationManager: boolean isProviderPackage(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerAntennaInfoListener(java.util.concurrent.Executor, android.location.GnssAntennaInfo$Listener)
    {
        android.location.LocationManager r0;
        android.location.GnssAntennaInfo$Listener r1;
        boolean z0;
        android.location.LocationManager$GnssAntennaInfoListenerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.concurrent.Executor r5;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.location.GnssAntennaInfo$Listener;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssAntennaInfoListenerManager mGnssAntennaInfoListenerManager>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssAntennaInfoListenerManager: boolean addListener(java.lang.Object,java.util.concurrent.Executor)>(r1, r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerGnssBatchedLocationCallback(long, boolean, android.location.BatchedLocationCallback, android.os.Handler)
    {
        android.location.LocationManager r0;
        long l0;
        android.location.LocationManager$BatchedLocationCallbackManager $r1, r14;
        boolean $z0, z1, z2;
        android.content.Context $r2, $r5;
        android.location.ILocationManager $r3;
        java.lang.String $r4, $r6;
        android.os.Handler $r7, r12, r13;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;
        android.location.BatchedLocationCallback r11;

        r0 := @this: android.location.LocationManager;

        l0 := @parameter0: long;

        z1 := @parameter1: boolean;

        r11 := @parameter2: android.location.BatchedLocationCallback;

        r12 := @parameter3: android.os.Handler;

        r13 = r12;

        if r12 != null goto label01;

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>()>();

        r13 = $r7;

     label01:
        r14 = r0.<android.location.LocationManager: android.location.LocationManager$BatchedLocationCallbackManager mBatchedLocationCallbackManager>;

        entermonitor r14;

     label02:
        $r1 = r0.<android.location.LocationManager: android.location.LocationManager$BatchedLocationCallbackManager mBatchedLocationCallbackManager>;

        $z0 = virtualinvoke $r1.<android.location.LocationManager$BatchedLocationCallbackManager: boolean addListener(java.lang.Object,android.os.Handler)>(r11, r13);

        if $z0 == 0 goto label05;

        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r2 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getAttributionTag()>();

        z2 = interfaceinvoke $r3.<android.location.ILocationManager: boolean startGnssBatch(long,boolean,java.lang.String,java.lang.String)>(l0, z1, $r4, $r6);

     label03:
        exitmonitor r14;

     label04:
        return z2;

     label05:
        exitmonitor r14;

     label06:
        return 0;

     label07:
        $r10 := @caughtexception;

        goto label10;

     label08:
        $r8 := @caughtexception;

     label09:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label10:
        exitmonitor r14;

     label11:
        throw $r10;

        catch android.os.RemoteException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    public boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)
    {
        android.location.LocationManager r0;
        android.location.GnssMeasurementsEvent$Callback r1;
        android.location.'-$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo' $r2;
        boolean $z0;
        java.util.concurrent.Executor r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GnssMeasurementsEvent$Callback;

        $r2 = <android.location._$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo: android.location.'-$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo' INSTANCE>;

        r3 = (java.util.concurrent.Executor) $r2;

        $z0 = virtualinvoke r0.<android.location.LocationManager: boolean registerGnssMeasurementsCallback(java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)>(r3, r1);

        return $z0;
    }

    public boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback, android.os.Handler)
    {
        android.location.LocationManager r0;
        android.os.Handler r1, $r3, r7;
        boolean z0;
        android.location.LocationManager$GnssMeasurementsListenerManager $r2;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.location.GnssMeasurementsEvent$Callback r6;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.location.GnssMeasurementsEvent$Callback;

        r1 := @parameter1: android.os.Handler;

        r7 = r1;

        if r1 != null goto label1;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>()>();

        r7 = $r3;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssMeasurementsListenerManager mGnssMeasurementsListenerManager>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssMeasurementsListenerManager: boolean addListener(java.lang.Object,android.os.Handler)>(r6, r7);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerGnssMeasurementsCallback(android.location.GnssRequest, java.util.concurrent.Executor, android.location.GnssMeasurementsEvent$Callback)
    {
        android.location.LocationManager r0;
        java.util.concurrent.Executor r1;
        android.location.GnssMeasurementsEvent$Callback r2;
        android.location.LocationManager$GnssMeasurementsListenerManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.location.GnssRequest r6;
        boolean z0, z1;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.location.GnssRequest;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.location.GnssMeasurementsEvent$Callback;

        if r6 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null request");

     label3:
        $r3 = r0.<android.location.LocationManager: android.location.LocationManager$GnssMeasurementsListenerManager mGnssMeasurementsListenerManager>;

        z1 = virtualinvoke $r3.<android.location.LocationManager$GnssMeasurementsListenerManager: boolean addListener(java.lang.Object,java.lang.Object,java.util.concurrent.Executor)>(r6, r2, r1);

     label4:
        return z1;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean registerGnssMeasurementsCallback(java.util.concurrent.Executor, android.location.GnssMeasurementsEvent$Callback)
    {
        android.location.LocationManager r0;
        android.location.GnssMeasurementsEvent$Callback r1;
        boolean z0;
        android.location.LocationManager$GnssMeasurementsListenerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.concurrent.Executor r5;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.location.GnssMeasurementsEvent$Callback;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssMeasurementsListenerManager mGnssMeasurementsListenerManager>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssMeasurementsListenerManager: boolean addListener(java.lang.Object,java.util.concurrent.Executor)>(r1, r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback)
    {
        android.location.LocationManager r0;
        android.location.GnssNavigationMessage$Callback r1;
        android.location.'-$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo' $r2;
        boolean $z0;
        java.util.concurrent.Executor r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GnssNavigationMessage$Callback;

        $r2 = <android.location._$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo: android.location.'-$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo' INSTANCE>;

        r3 = (java.util.concurrent.Executor) $r2;

        $z0 = virtualinvoke r0.<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(java.util.concurrent.Executor,android.location.GnssNavigationMessage$Callback)>(r3, r1);

        return $z0;
    }

    public boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback, android.os.Handler)
    {
        android.location.LocationManager r0;
        android.os.Handler r1, $r3, r7;
        boolean z0;
        android.location.LocationManager$GnssNavigationMessageListenerManager $r2;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.location.GnssNavigationMessage$Callback r6;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.location.GnssNavigationMessage$Callback;

        r1 := @parameter1: android.os.Handler;

        r7 = r1;

        if r1 != null goto label1;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>()>();

        r7 = $r3;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssNavigationMessageListenerManager mGnssNavigationMessageListenerTransport>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssNavigationMessageListenerManager: boolean addListener(java.lang.Object,android.os.Handler)>(r6, r7);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerGnssNavigationMessageCallback(java.util.concurrent.Executor, android.location.GnssNavigationMessage$Callback)
    {
        android.location.LocationManager r0;
        android.location.GnssNavigationMessage$Callback r1;
        boolean z0;
        android.location.LocationManager$GnssNavigationMessageListenerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.concurrent.Executor r5;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.location.GnssNavigationMessage$Callback;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssNavigationMessageListenerManager mGnssNavigationMessageListenerTransport>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssNavigationMessageListenerManager: boolean addListener(java.lang.Object,java.util.concurrent.Executor)>(r1, r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)
    {
        android.location.LocationManager r0;
        android.location.GnssStatus$Callback r1;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GnssStatus$Callback;

        $z0 = virtualinvoke r0.<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)>(r1, null);

        return $z0;
    }

    public boolean registerGnssStatusCallback(android.location.GnssStatus$Callback, android.os.Handler)
    {
        android.location.LocationManager r0;
        android.os.Handler r1, $r3, r7;
        boolean z0;
        android.location.LocationManager$GnssStatusListenerManager $r2;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.location.GnssStatus$Callback r6;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.location.GnssStatus$Callback;

        r1 := @parameter1: android.os.Handler;

        r7 = r1;

        if r1 != null goto label1;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>()>();

        r7 = $r3;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssStatusListenerManager: boolean addListener(java.lang.Object,android.os.Handler)>(r6, r7);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean registerGnssStatusCallback(java.util.concurrent.Executor, android.location.GnssStatus$Callback)
    {
        android.location.LocationManager r0;
        android.location.GnssStatus$Callback r1;
        boolean z0;
        android.location.LocationManager$GnssStatusListenerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.concurrent.Executor r5;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.location.GnssStatus$Callback;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        z0 = virtualinvoke $r2.<android.location.LocationManager$GnssStatusListenerManager: boolean addListener(java.lang.Object,java.util.concurrent.Executor)>(r1, r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeAllGeofences(android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        boolean $z0, $z1, z2;
        android.content.Context $r1;
        android.location.ILocationManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.app.PendingIntent r6;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.app.PendingIntent;

        if r6 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null pending intent");

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148963590L);

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r6.<android.app.PendingIntent: boolean isTargetedToPackage()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "pending intent must be targeted to a package");

     label3:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r2.<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>(null, r6, $r3);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void removeGeofence(android.location.Geofence, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        boolean $z1, $z2, z3, z4;
        android.content.Context $r2;
        android.location.ILocationManager $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.location.Geofence r7;

        r0 := @this: android.location.LocationManager;

        r7 := @parameter0: android.location.Geofence;

        r1 := @parameter1: android.app.PendingIntent;

        if r7 == null goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "invalid null geofence");

        if r1 == null goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "invalid null pending intent");

        $z1 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148963590L);

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r1.<android.app.PendingIntent: boolean isTargetedToPackage()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "pending intent must be targeted to a package");

     label5:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r2 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r3.<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>(r7, r1, $r4);

     label6:
        return;

     label7:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void removeGpsMeasurementListener(android.location.GpsMeasurementsEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsMeasurementsEvent$Listener r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsMeasurementsEvent$Listener;

        return;
    }

    public void removeGpsNavigationMessageListener(android.location.GpsNavigationMessageEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsNavigationMessageEvent$Listener r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsNavigationMessageEvent$Listener;

        return;
    }

    public void removeGpsStatusListener(android.location.GpsStatus$Listener)
    {
        android.location.LocationManager r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;
        android.location.LocationManager$GnssStatusListenerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.location.GpsStatus$Listener r5;

        r0 := @this: android.location.LocationManager;

        r5 := @parameter0: android.location.GpsStatus$Listener;

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(144027538L);

        if $z0 != 0 goto label4;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        virtualinvoke $r2.<android.location.LocationManager$GnssStatusListenerManager: void removeListener(java.lang.Object)>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("GpsStatus APIs not supported, please use GnssStatus APIs instead");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeNmeaListener(android.location.GpsStatus$NmeaListener)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus$NmeaListener r1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus$NmeaListener;

        return;
    }

    public void removeNmeaListener(android.location.OnNmeaMessageListener)
    {
        android.location.LocationManager r0;
        android.location.LocationManager$GnssStatusListenerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.OnNmeaMessageListener r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.OnNmeaMessageListener;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        virtualinvoke $r1.<android.location.LocationManager$GnssStatusListenerManager: void removeListener(java.lang.Object)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeProximityAlert(android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        boolean $z0, $z1, z2;
        android.content.Context $r1;
        android.location.ILocationManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.app.PendingIntent r6;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: android.app.PendingIntent;

        if r6 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null pending intent");

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148963590L);

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r6.<android.app.PendingIntent: boolean isTargetedToPackage()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "pending intent must be targeted to a package");

     label3:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r2.<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>(null, r6, $r3);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void removeTestProvider(java.lang.String)
    {
        android.location.LocationManager r0;
        android.content.Context $r1, $r4;
        android.location.ILocationManager $r2;
        java.lang.String $r3, $r5, r8;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        boolean z0;

        r0 := @this: android.location.LocationManager;

        r8 := @parameter0: java.lang.String;

        if r8 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null provider");

     label3:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke $r2.<android.location.ILocationManager: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>(r8, $r3, $r5);

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void removeUpdates(android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.PendingIntent r4;
        boolean z0;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.app.PendingIntent;

        if r4 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null pending intent");

     label3:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r1.<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>(null, r4);

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void removeUpdates(android.location.LocationListener)
    {
        android.location.LocationManager r0;
        android.util.ArrayMap r1, $r2;
        java.lang.Object $r3;
        android.location.ILocationManager $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.location.LocationListener r8;
        boolean z0;
        android.location.LocationManager$LocationListenerTransport r9;

        r0 := @this: android.location.LocationManager;

        r8 := @parameter0: android.location.LocationListener;

        if r8 == null goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null listener");

        r1 = r0.<android.location.LocationManager: android.util.ArrayMap mListeners>;

        entermonitor r1;

     label03:
        $r2 = r0.<android.location.LocationManager: android.util.ArrayMap mListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        r9 = (android.location.LocationManager$LocationListenerTransport) $r3;

     label04:
        if r9 != null goto label07;

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        virtualinvoke r9.<android.location.LocationManager$LocationListenerTransport: void unregister()>();

     label08:
        $r4 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r4.<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>(r9, null);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r6 := @caughtexception;

     label12:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label13:
        $r5 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r5;

        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch android.os.RemoteException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void requestLocationUpdates(long, float, android.location.Criteria, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        long l0;
        float f0;
        android.location.Criteria r1;
        android.app.PendingIntent r2;
        android.location.LocationRequest $r3;
        boolean z0;

        r0 := @this: android.location.LocationManager;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: android.location.Criteria;

        r2 := @parameter3: android.app.PendingIntent;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null criteria");

        $r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r1, l0, f0, 0);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>($r3, r2);

        return;
    }

    public void requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        long l0;
        float f0;
        android.location.Criteria r1;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.location.LocationRequest $r4;
        boolean z1, z2;

        r0 := @this: android.location.LocationManager;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: android.location.Criteria;

        r2 := @parameter3: android.location.LocationListener;

        r3 := @parameter4: android.os.Looper;

        if r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null criteria");

        if r2 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null listener");

        $r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r1, l0, f0, 0);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>($r4, r2, r3);

        return;
    }

    public void requestLocationUpdates(long, float, android.location.Criteria, java.util.concurrent.Executor, android.location.LocationListener)
    {
        android.location.LocationManager r0;
        long l0;
        float f0;
        android.location.Criteria r1;
        java.util.concurrent.Executor r2;
        android.location.LocationListener r3;
        android.location.LocationRequest $r4;

        r0 := @this: android.location.LocationManager;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: android.location.Criteria;

        r2 := @parameter3: java.util.concurrent.Executor;

        r3 := @parameter4: android.location.LocationListener;

        $r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r1, l0, f0, 0);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)>($r4, r2, r3);

        return;
    }

    public void requestLocationUpdates(android.location.LocationRequest, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        boolean $z1, $z2, z3, z4;
        android.content.Context $r2, $r5;
        android.location.ILocationManager $r3;
        java.lang.String $r4, $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.location.LocationRequest r9;

        r0 := @this: android.location.LocationManager;

        r9 := @parameter0: android.location.LocationRequest;

        r1 := @parameter1: android.app.PendingIntent;

        if r9 == null goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "invalid null location request");

        if r1 == null goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "invalid null pending intent");

        $z1 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148963590L);

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r1.<android.app.PendingIntent: boolean isTargetedToPackage()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "pending intent must be targeted to a package");

     label5:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r2 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke $r3.<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>(r9, null, r1, $r4, $r6, null);

     label6:
        return;

     label7:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void requestLocationUpdates(android.location.LocationRequest, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        android.location.LocationRequest r1;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.os.Handler r4;
        android.os.HandlerExecutor $r5;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.LocationListener;

        r3 := @parameter2: android.os.Looper;

        r4 = new android.os.Handler;

        if r3 != null goto label1;

        specialinvoke r4.<android.os.Handler: void <init>()>();

        goto label2;

     label1:
        specialinvoke r4.<android.os.Handler: void <init>(android.os.Looper)>(r3);

     label2:
        $r5 = new android.os.HandlerExecutor;

        specialinvoke $r5.<android.os.HandlerExecutor: void <init>(android.os.Handler)>(r4);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)>(r1, $r5, r2);

        return;
    }

    public void requestLocationUpdates(android.location.LocationRequest, java.util.concurrent.Executor, android.location.LocationListener)
    {
        android.location.LocationManager r0;
        java.util.concurrent.Executor r1;
        android.location.LocationListener r2;
        android.util.ArrayMap r3, $r4, $r6, $r17;
        java.lang.Object $r5;
        android.content.Context $r8, $r11;
        android.location.ILocationManager $r9;
        java.lang.String $r10, $r12, $r13;
        java.lang.Throwable $r16, $r19;
        android.os.RemoteException $r20;
        java.lang.RuntimeException $r21;
        android.location.LocationRequest r22;
        android.location.LocationManager$LocationListenerTransport r23;

        r0 := @this: android.location.LocationManager;

        r22 := @parameter0: android.location.LocationRequest;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.location.LocationListener;

        r3 = r0.<android.location.LocationManager: android.util.ArrayMap mListeners>;

        entermonitor r3;

     label01:
        $r4 = r0.<android.location.LocationManager: android.util.ArrayMap mListeners>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r23 = (android.location.LocationManager$LocationListenerTransport) $r5;

     label02:
        if r23 == null goto label05;

     label03:
        virtualinvoke r23.<android.location.LocationManager$LocationListenerTransport: void unregister()>();

     label04:
        goto label07;

     label05:
        r23 = new android.location.LocationManager$LocationListenerTransport;

        specialinvoke r23.<android.location.LocationManager$LocationListenerTransport: void <init>(android.location.LocationManager,android.location.LocationListener,android.location.LocationManager$1)>(r0, r2, null);

     label06:
        $r6 = r0.<android.location.LocationManager: android.util.ArrayMap mListeners>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r23);

     label07:
        virtualinvoke r23.<android.location.LocationManager$LocationListenerTransport: void register(java.util.concurrent.Executor)>(r1);

     label08:
        $r9 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r8 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r8.<android.content.Context: java.lang.String getPackageName()>();

        $r11 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.String getAttributionTag()>();

        $r13 = virtualinvoke r23.<android.location.LocationManager$LocationListenerTransport: java.lang.String getListenerId()>();

        interfaceinvoke $r9.<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>(r22, r23, null, $r10, $r12, $r13);

     label09:
        goto label10;

     label10:
        exitmonitor r3;

     label11:
        return;

     label12:
        $r16 := @caughtexception;

        goto label15;

     label13:
        $r20 := @caughtexception;

     label14:
        $r21 = virtualinvoke $r20.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r21;

     label15:
        virtualinvoke r23.<android.location.LocationManager$LocationListenerTransport: void unregister()>();

        $r17 = r0.<android.location.LocationManager: android.util.ArrayMap mListeners>;

        virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r2);

     label16:
        throw $r16;

     label17:
        $r19 := @caughtexception;

     label18:
        exitmonitor r3;

     label19:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label10 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label14 to label15 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void requestLocationUpdates(java.lang.String, long, float, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        long l0;
        float f0;
        android.app.PendingIntent r2;
        android.location.LocationRequest $r3;
        boolean z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        r2 := @parameter3: android.app.PendingIntent;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null provider");

        $r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, l0, f0, 0);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>($r3, r2);

        return;
    }

    public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        long l0;
        float f0;
        android.location.LocationListener r2;
        android.location.LocationRequest $r3;
        boolean z1, z2;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        r2 := @parameter3: android.location.LocationListener;

        if r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null provider");

        if r2 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null listener");

        $r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, l0, f0, 0);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>($r3, r2, null);

        return;
    }

    public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        long l0;
        float f0;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.location.LocationRequest $r4;
        boolean z1, z2;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        r2 := @parameter3: android.location.LocationListener;

        r3 := @parameter4: android.os.Looper;

        if r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null provider");

        if r2 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null listener");

        $r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, l0, f0, 0);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>($r4, r2, r3);

        return;
    }

    public void requestLocationUpdates(java.lang.String, long, float, java.util.concurrent.Executor, android.location.LocationListener)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        long l0;
        float f0;
        java.util.concurrent.Executor r2;
        android.location.LocationListener r3;
        android.location.LocationRequest $r4;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        r2 := @parameter3: java.util.concurrent.Executor;

        r3 := @parameter4: android.location.LocationListener;

        $r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, l0, f0, 0);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)>($r4, r2, r3);

        return;
    }

    public void requestSingleUpdate(android.location.Criteria, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        android.location.Criteria r3;
        boolean z0;
        android.location.LocationRequest r4;

        r0 := @this: android.location.LocationManager;

        r3 := @parameter0: android.location.Criteria;

        r1 := @parameter1: android.app.PendingIntent;

        if r3 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null criteria");

        r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r3, 0L, 0.0F, 1);

        virtualinvoke r4.<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>(30000L);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>(r4, r1);

        return;
    }

    public void requestSingleUpdate(android.location.Criteria, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        android.location.LocationListener r1;
        android.os.Looper r2;
        android.location.Criteria r4;
        boolean z1, z2;
        android.location.LocationRequest r5;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.Criteria;

        r1 := @parameter1: android.location.LocationListener;

        r2 := @parameter2: android.os.Looper;

        if r4 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null criteria");

        z2 = 0;

        if r1 == null goto label3;

        z2 = 1;

     label3:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null listener");

        r5 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r4, 0L, 0.0F, 1);

        virtualinvoke r5.<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>(30000L);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>(r5, r1, r2);

        return;
    }

    public void requestSingleUpdate(java.lang.String, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        java.lang.String r3;
        boolean z0;
        android.location.LocationRequest r4;

        r0 := @this: android.location.LocationManager;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: android.app.PendingIntent;

        if r3 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid null provider");

        r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r3, 0L, 0.0F, 1);

        virtualinvoke r4.<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>(30000L);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>(r4, r1);

        return;
    }

    public void requestSingleUpdate(java.lang.String, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        android.location.LocationListener r1;
        android.os.Looper r2;
        java.lang.String r4;
        boolean z1, z2;
        android.location.LocationRequest r5;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: android.location.LocationListener;

        r2 := @parameter2: android.os.Looper;

        if r4 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null provider");

        z2 = 0;

        if r1 == null goto label3;

        z2 = 1;

     label3:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null listener");

        r5 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r4, 0L, 0.0F, 1);

        virtualinvoke r5.<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>(30000L);

        virtualinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>(r5, r1, r2);

        return;
    }

    public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.location.LocationManager r0;
        java.lang.String r1, r6;
        android.os.Bundle r2;
        android.location.ILocationManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        boolean z1, z2, z3;

        r0 := @this: android.location.LocationManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        if r6 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null provider");

        if r1 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null command");

     label5:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        z3 = interfaceinvoke $r3.<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>(r6, r1, r2);

     label6:
        return z3;

     label7:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void setExtraLocationControllerPackage(java.lang.String)
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r1.<android.location.ILocationManager: void setExtraLocationControllerPackage(java.lang.String)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setExtraLocationControllerPackageEnabled(boolean)
    {
        android.location.LocationManager r0;
        boolean z0;
        android.location.ILocationManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.location.LocationManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r2.<android.location.ILocationManager: void setExtraLocationControllerPackageEnabled(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLocationControllerExtraPackage(java.lang.String)
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r1.<android.location.ILocationManager: void setExtraLocationControllerPackage(java.lang.String)>(r4);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLocationControllerExtraPackageEnabled(boolean)
    {
        android.location.LocationManager r0;
        boolean z0;
        android.location.ILocationManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.location.LocationManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r2.<android.location.ILocationManager: void setExtraLocationControllerPackageEnabled(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLocationEnabledForUser(boolean, android.os.UserHandle)
    {
        android.location.LocationManager r0;
        boolean z0;
        android.location.ILocationManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.UserHandle r4;

        r0 := @this: android.location.LocationManager;

        z0 := @parameter0: boolean;

        r4 := @parameter1: android.os.UserHandle;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r1.<android.location.ILocationManager: void setLocationEnabledForUser(boolean,int)>(z0, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setProviderEnabledForUser(java.lang.String, boolean, android.os.UserHandle)
    {
        android.location.LocationManager r0;
        java.lang.String r1, $r9, r10;
        boolean z0, $z1, z2;
        android.os.UserHandle r2;
        android.content.ContentResolver r3;
        android.content.Context $r5;
        java.lang.StringBuilder $r6;
        int $i0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.UserHandle;

        if r1 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid null provider");

        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r3 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label3;

        r10 = "+";

        goto label4;

     label3:
        r10 = "-";

     label4:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z1 = staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r3, "location_providers_allowed", $r9, $i0);

        return $z1;
    }

    public void setTestProviderEnabled(java.lang.String, boolean)
    {
        android.location.LocationManager r0;
        boolean z0, z1;
        android.content.Context $r1, $r4;
        android.location.ILocationManager $r2;
        java.lang.String $r3, $r5, r8;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.location.LocationManager;

        r8 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r8 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid null provider");

     label3:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r1 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke $r2.<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>(r8, z0, $r3, $r5);

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setTestProviderLocation(java.lang.String, android.location.Location)
    {
        android.location.LocationManager r0;
        android.location.Location r1;
        boolean $z1, $z2, z3, z4;
        android.content.Context $r2, $r5;
        android.location.ILocationManager $r3;
        java.lang.String $r4, $r6, r9;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: android.location.LocationManager;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: android.location.Location;

        if r9 == null goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "invalid null provider");

        if r1 == null goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "invalid null location");

        $z1 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148964793L);

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r1.<android.location.Location: boolean isComplete()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "incomplete location object, missing timestamp or accuracy?");

        goto label6;

     label5:
        virtualinvoke r1.<android.location.Location: void makeComplete()>();

     label6:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r2 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke $r3.<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>(r9, r1, $r4, $r6);

     label7:
        return;

     label8:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        int i0;
        android.os.Bundle r2;
        long l1;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        l1 := @parameter3: long;

        return;
    }

    public void unregisterAntennaInfoListener(android.location.GnssAntennaInfo$Listener)
    {
        android.location.LocationManager r0;
        android.location.LocationManager$GnssAntennaInfoListenerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.GnssAntennaInfo$Listener r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.GnssAntennaInfo$Listener;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.LocationManager$GnssAntennaInfoListenerManager mGnssAntennaInfoListenerManager>;

        virtualinvoke $r1.<android.location.LocationManager$GnssAntennaInfoListenerManager: void removeListener(java.lang.Object)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean unregisterGnssBatchedLocationCallback(android.location.BatchedLocationCallback)
    {
        android.location.LocationManager r0;
        android.location.LocationManager$BatchedLocationCallbackManager r1, $r2;
        android.location.ILocationManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.Throwable $r6;
        android.location.BatchedLocationCallback r7;

        r0 := @this: android.location.LocationManager;

        r7 := @parameter0: android.location.BatchedLocationCallback;

        r1 = r0.<android.location.LocationManager: android.location.LocationManager$BatchedLocationCallbackManager mBatchedLocationCallbackManager>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.LocationManager$BatchedLocationCallbackManager mBatchedLocationCallbackManager>;

        virtualinvoke $r2.<android.location.LocationManager$BatchedLocationCallbackManager: void removeListener(java.lang.Object)>(r7);

        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r3.<android.location.ILocationManager: boolean stopGnssBatch()>();

     label2:
        exitmonitor r1;

     label3:
        return 1;

     label4:
        $r6 := @caughtexception;

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void unregisterGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)
    {
        android.location.LocationManager r0;
        android.location.LocationManager$GnssMeasurementsListenerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.GnssMeasurementsEvent$Callback r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.GnssMeasurementsEvent$Callback;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.LocationManager$GnssMeasurementsListenerManager mGnssMeasurementsListenerManager>;

        virtualinvoke $r1.<android.location.LocationManager$GnssMeasurementsListenerManager: void removeListener(java.lang.Object)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback)
    {
        android.location.LocationManager r0;
        android.location.LocationManager$GnssNavigationMessageListenerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.GnssNavigationMessage$Callback r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.GnssNavigationMessage$Callback;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.LocationManager$GnssNavigationMessageListenerManager mGnssNavigationMessageListenerTransport>;

        virtualinvoke $r1.<android.location.LocationManager$GnssNavigationMessageListenerManager: void removeListener(java.lang.Object)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterGnssStatusCallback(android.location.GnssStatus$Callback)
    {
        android.location.LocationManager r0;
        android.location.LocationManager$GnssStatusListenerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.location.GnssStatus$Callback r4;

        r0 := @this: android.location.LocationManager;

        r4 := @parameter0: android.location.GnssStatus$Callback;

     label1:
        $r1 = r0.<android.location.LocationManager: android.location.LocationManager$GnssStatusListenerManager mGnssStatusListenerManager>;

        virtualinvoke $r1.<android.location.LocationManager$GnssStatusListenerManager: void removeListener(java.lang.Object)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.location.LocationManager: long TARGETED_PENDING_INTENT> = 148963590L;

        <android.location.LocationManager: java.lang.String SETTINGS_FOOTER_DISPLAYED_ACTION> = "com.android.settings.location.DISPLAYED_FOOTER";

        <android.location.LocationManager: java.lang.String PROVIDERS_CHANGED_ACTION> = "android.location.PROVIDERS_CHANGED";

        <android.location.LocationManager: java.lang.String PASSIVE_PROVIDER> = "passive";

        <android.location.LocationManager: java.lang.String NETWORK_PROVIDER> = "network";

        <android.location.LocationManager: java.lang.String MODE_CHANGED_ACTION> = "android.location.MODE_CHANGED";

        <android.location.LocationManager: java.lang.String METADATA_SETTINGS_FOOTER_STRING> = "com.android.settings.location.FOOTER_STRING";

        <android.location.LocationManager: java.lang.String KEY_STATUS_CHANGED> = "status";

        <android.location.LocationManager: java.lang.String KEY_PROXIMITY_ENTERING> = "entering";

        <android.location.LocationManager: java.lang.String KEY_PROVIDER_ENABLED> = "providerEnabled";

        <android.location.LocationManager: java.lang.String KEY_LOCATION_CHANGED> = "location";

        <android.location.LocationManager: long INCOMPLETE_LOCATION> = 148964793L;

        <android.location.LocationManager: java.lang.String HIGH_POWER_REQUEST_CHANGE_ACTION> = "android.location.HIGH_POWER_REQUEST_CHANGE";

        <android.location.LocationManager: long GPS_STATUS_USAGE> = 144027538L;

        <android.location.LocationManager: java.lang.String GPS_PROVIDER> = "gps";

        <android.location.LocationManager: long GET_PROVIDER_SECURITY_EXCEPTIONS> = 150935354L;

        <android.location.LocationManager: long GET_CURRENT_LOCATION_MAX_TIMEOUT_MS> = 30000L;

        <android.location.LocationManager: java.lang.String FUSED_PROVIDER> = "fused";

        <android.location.LocationManager: java.lang.String EXTRA_PROVIDER_NAME> = "android.location.extra.PROVIDER_NAME";

        <android.location.LocationManager: java.lang.String EXTRA_PROVIDER_ENABLED> = "android.location.extra.PROVIDER_ENABLED";

        <android.location.LocationManager: java.lang.String EXTRA_LOCATION_ENABLED> = "android.location.extra.LOCATION_ENABLED";

        <android.location.LocationManager: java.lang.String CACHE_KEY_LOCATION_ENABLED_PROPERTY> = "cache_key.location_enabled";

        return;
    }
}
