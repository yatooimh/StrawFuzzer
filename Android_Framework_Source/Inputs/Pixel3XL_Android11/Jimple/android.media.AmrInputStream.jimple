public final class android.media.AmrInputStream extends java.io.InputStream
{
    private static final int SAMPLES_PER_FRAME;
    private static final java.lang.String TAG;
    private final byte[] mBuf;
    private int mBufIn;
    private int mBufOut;
    android.media.MediaCodec mCodec;
    android.media.MediaCodec$BufferInfo mInfo;
    private java.io.InputStream mInputStream;
    private byte[] mOneByte;
    boolean mSawInputEOS;
    boolean mSawOutputEOS;

    public void <init>(java.io.InputStream)
    {
        android.media.AmrInputStream r0;
        byte[] $r1, $r2;
        android.media.MediaFormat $r3;
        android.media.MediaCodecList $r4;
        android.media.MediaCodec $r5, r10, r12;
        java.lang.Throwable $r6;
        java.io.InputStream r7;
        java.lang.String r9;
        android.media.MediaCodec$BufferInfo $r13;

        r0 := @this: android.media.AmrInputStream;

        r7 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = newarray (byte)[320];

        r0.<android.media.AmrInputStream: byte[] mBuf> = $r1;

        r0.<android.media.AmrInputStream: int mBufIn> = 0;

        r0.<android.media.AmrInputStream: int mBufOut> = 0;

        $r2 = newarray (byte)[1];

        r0.<android.media.AmrInputStream: byte[] mOneByte> = $r2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AmrInputStream", "@@@@ AmrInputStream is not a public API @@@@");

        r0.<android.media.AmrInputStream: java.io.InputStream mInputStream> = r7;

        $r3 = new android.media.MediaFormat;

        specialinvoke $r3.<android.media.MediaFormat: void <init>()>();

        virtualinvoke $r3.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", "audio/3gpp");

        virtualinvoke $r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("sample-rate", 8000);

        virtualinvoke $r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("channel-count", 1);

        virtualinvoke $r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", 12200);

        $r4 = new android.media.MediaCodecList;

        specialinvoke $r4.<android.media.MediaCodecList: void <init>(int)>(0);

        r9 = virtualinvoke $r4.<android.media.MediaCodecList: java.lang.String findEncoderForFormat(android.media.MediaFormat)>($r3);

        if r9 == null goto label5;

     label1:
        r10 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createByCodecName(java.lang.String)>(r9);

        r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec> = r10;

        virtualinvoke r10.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>($r3, null, null, 1);

        $r5 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        virtualinvoke $r5.<android.media.MediaCodec: void start()>();

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r12 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        if r12 == null goto label4;

        virtualinvoke r12.<android.media.MediaCodec: void release()>();

     label4:
        r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec> = null;

     label5:
        $r13 = new android.media.MediaCodec$BufferInfo;

        specialinvoke $r13.<android.media.MediaCodec$BufferInfo: void <init>()>();

        r0.<android.media.AmrInputStream: android.media.MediaCodec$BufferInfo mInfo> = $r13;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        android.media.AmrInputStream r0;
        java.io.InputStream $r1, $r4;
        android.media.MediaCodec $r2, $r3, $r6, $r7;
        java.lang.Throwable $r5, $r8, $r9;

        r0 := @this: android.media.AmrInputStream;

     label1:
        $r1 = r0.<android.media.AmrInputStream: java.io.InputStream mInputStream>;

        if $r1 == null goto label2;

        $r4 = r0.<android.media.AmrInputStream: java.io.InputStream mInputStream>;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label2:
        r0.<android.media.AmrInputStream: java.io.InputStream mInputStream> = null;

     label3:
        $r2 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        if $r2 == null goto label4;

        $r3 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        virtualinvoke $r3.<android.media.MediaCodec: void release()>();

     label4:
        r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec> = null;

        return;

     label5:
        $r9 := @caughtexception;

        r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec> = null;

        throw $r9;

     label6:
        $r5 := @caughtexception;

        r0.<android.media.AmrInputStream: java.io.InputStream mInputStream> = null;

     label7:
        $r6 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        if $r6 == null goto label8;

        $r7 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        virtualinvoke $r7.<android.media.MediaCodec: void release()>();

     label8:
        r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec> = null;

        throw $r5;

     label9:
        $r8 := @caughtexception;

        r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec> = null;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.media.AmrInputStream r0;
        android.media.MediaCodec $r1, $r2;

        r0 := @this: android.media.AmrInputStream;

        $r1 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        if $r1 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AmrInputStream", "AmrInputStream wasn\'t closed");

        $r2 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        virtualinvoke $r2.<android.media.MediaCodec: void release()>();

     label1:
        return;
    }

    public int read() throws java.io.IOException
    {
        android.media.AmrInputStream r0;
        byte[] $r1, $r2;
        int $i0;
        byte $b1;
        short s2;

        r0 := @this: android.media.AmrInputStream;

        $r1 = r0.<android.media.AmrInputStream: byte[] mOneByte>;

        $i0 = virtualinvoke r0.<android.media.AmrInputStream: int read(byte[],int,int)>($r1, 0, 1);

        if $i0 != 1 goto label1;

        $r2 = r0.<android.media.AmrInputStream: byte[] mOneByte>;

        $b1 = $r2[0];

        s2 = $b1 & 255;

        goto label2;

     label1:
        s2 = -1;

     label2:
        return s2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        android.media.AmrInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: android.media.AmrInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<android.media.AmrInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        android.media.AmrInputStream r0;
        byte[] r1, $r5, $r11, $r18, $r20;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i17, i18, i19;
        android.media.MediaCodec r2, $r3, $r7, $r9, $r13, $r15, $r16;
        java.lang.IllegalStateException $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.media.MediaCodec$BufferInfo $r6, $r8, $r14;
        java.nio.ByteBuffer $r10, $r17;
        java.io.InputStream $r21;
        byte b16;

        r0 := @this: android.media.AmrInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i13 := @parameter2: int;

        $r3 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        if $r3 == null goto label13;

        $i3 = r0.<android.media.AmrInputStream: int mBufOut>;

        $i2 = r0.<android.media.AmrInputStream: int mBufIn>;

        if $i3 < $i2 goto label09;

        $z2 = r0.<android.media.AmrInputStream: boolean mSawOutputEOS>;

        if $z2 != 0 goto label09;

        r0.<android.media.AmrInputStream: int mBufOut> = 0;

        r0.<android.media.AmrInputStream: int mBufIn> = 0;

     label01:
        $z3 = r0.<android.media.AmrInputStream: boolean mSawInputEOS>;

        if $z3 != 0 goto label08;

        $r15 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        i1 = virtualinvoke $r15.<android.media.MediaCodec: int dequeueInputBuffer(long)>(0L);

        if i1 >= 0 goto label02;

        goto label08;

     label02:
        i14 = 0;

     label03:
        if i14 >= 320 goto label05;

        $r21 = r0.<android.media.AmrInputStream: java.io.InputStream mInputStream>;

        $r20 = r0.<android.media.AmrInputStream: byte[] mBuf>;

        $i12 = 320 - i14;

        i15 = virtualinvoke $r21.<java.io.InputStream: int read(byte[],int,int)>($r20, i14, $i12);

        if i15 != -1 goto label04;

        r0.<android.media.AmrInputStream: boolean mSawInputEOS> = 1;

        goto label05;

     label04:
        i14 = i14 + i15;

        goto label03;

     label05:
        $r16 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        $r17 = virtualinvoke $r16.<android.media.MediaCodec: java.nio.ByteBuffer getInputBuffer(int)>(i1);

        $r18 = r0.<android.media.AmrInputStream: byte[] mBuf>;

        virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r18, 0, i14);

        r2 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        $z4 = r0.<android.media.AmrInputStream: boolean mSawInputEOS>;

        if $z4 == 0 goto label06;

        b16 = 4;

        goto label07;

     label06:
        b16 = 0;

     label07:
        virtualinvoke r2.<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)>(i1, 0, i14, 0L, b16);

        goto label01;

     label08:
        $r7 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        $r6 = r0.<android.media.AmrInputStream: android.media.MediaCodec$BufferInfo mInfo>;

        i17 = virtualinvoke $r7.<android.media.MediaCodec: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>($r6, 0L);

        if i17 < 0 goto label09;

        $r8 = r0.<android.media.AmrInputStream: android.media.MediaCodec$BufferInfo mInfo>;

        $i8 = $r8.<android.media.MediaCodec$BufferInfo: int size>;

        r0.<android.media.AmrInputStream: int mBufIn> = $i8;

        $r9 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        $r10 = virtualinvoke $r9.<android.media.MediaCodec: java.nio.ByteBuffer getOutputBuffer(int)>(i17);

        $r11 = r0.<android.media.AmrInputStream: byte[] mBuf>;

        $i9 = r0.<android.media.AmrInputStream: int mBufIn>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r11, 0, $i9);

        $r13 = r0.<android.media.AmrInputStream: android.media.MediaCodec mCodec>;

        virtualinvoke $r13.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>(i17, 0);

        $r14 = r0.<android.media.AmrInputStream: android.media.MediaCodec$BufferInfo mInfo>;

        $i10 = $r14.<android.media.MediaCodec$BufferInfo: int flags>;

        $i11 = 4 & $i10;

        if $i11 == 0 goto label09;

        r0.<android.media.AmrInputStream: boolean mSawOutputEOS> = 1;

     label09:
        i18 = r0.<android.media.AmrInputStream: int mBufOut>;

        i19 = r0.<android.media.AmrInputStream: int mBufIn>;

        if i18 >= i19 goto label11;

        $i4 = i19 - i18;

        if i13 <= $i4 goto label10;

        i13 = i19 - i18;

        goto label10;

     label10:
        $r5 = r0.<android.media.AmrInputStream: byte[] mBuf>;

        $i5 = r0.<android.media.AmrInputStream: int mBufOut>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i5, r1, i0, i13);

        $i6 = r0.<android.media.AmrInputStream: int mBufOut>;

        $i7 = $i6 + i13;

        r0.<android.media.AmrInputStream: int mBufOut> = $i7;

        return i13;

     label11:
        $z0 = r0.<android.media.AmrInputStream: boolean mSawInputEOS>;

        if $z0 == 0 goto label12;

        $z1 = r0.<android.media.AmrInputStream: boolean mSawOutputEOS>;

        if $z1 == 0 goto label12;

        return -1;

     label12:
        return 0;

     label13:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not open");

        throw $r4;
    }

    public static void <clinit>()
    {
        <android.media.AmrInputStream: java.lang.String TAG> = "AmrInputStream";

        <android.media.AmrInputStream: int SAMPLES_PER_FRAME> = 160;

        return;
    }
}
