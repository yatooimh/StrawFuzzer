public final class android.media.AudioFormat extends java.lang.Object implements android.os.Parcelable
{
    public static final int AUDIO_FORMAT_HAS_PROPERTY_CHANNEL_INDEX_MASK;
    public static final int AUDIO_FORMAT_HAS_PROPERTY_CHANNEL_MASK;
    public static final int AUDIO_FORMAT_HAS_PROPERTY_ENCODING;
    public static final int AUDIO_FORMAT_HAS_PROPERTY_NONE;
    public static final int AUDIO_FORMAT_HAS_PROPERTY_SAMPLE_RATE;
    public static final int CHANNEL_CONFIGURATION_DEFAULT;
    public static final int CHANNEL_CONFIGURATION_INVALID;
    public static final int CHANNEL_CONFIGURATION_MONO;
    public static final int CHANNEL_CONFIGURATION_STEREO;
    public static final int CHANNEL_INVALID;
    public static final int CHANNEL_IN_BACK;
    public static final int CHANNEL_IN_BACK_PROCESSED;
    public static final int CHANNEL_IN_DEFAULT;
    public static final int CHANNEL_IN_FRONT;
    public static final int CHANNEL_IN_FRONT_BACK;
    public static final int CHANNEL_IN_FRONT_PROCESSED;
    public static final int CHANNEL_IN_LEFT;
    public static final int CHANNEL_IN_LEFT_PROCESSED;
    public static final int CHANNEL_IN_MONO;
    public static final int CHANNEL_IN_PRESSURE;
    public static final int CHANNEL_IN_RIGHT;
    public static final int CHANNEL_IN_RIGHT_PROCESSED;
    public static final int CHANNEL_IN_STEREO;
    public static final int CHANNEL_IN_VOICE_DNLINK;
    public static final int CHANNEL_IN_VOICE_UPLINK;
    public static final int CHANNEL_IN_X_AXIS;
    public static final int CHANNEL_IN_Y_AXIS;
    public static final int CHANNEL_IN_Z_AXIS;
    public static final int CHANNEL_OUT_5POINT1;
    public static final int CHANNEL_OUT_5POINT1_SIDE;
    public static final int CHANNEL_OUT_7POINT1;
    public static final int CHANNEL_OUT_7POINT1_SURROUND;
    public static final int CHANNEL_OUT_BACK_CENTER;
    public static final int CHANNEL_OUT_BACK_LEFT;
    public static final int CHANNEL_OUT_BACK_RIGHT;
    public static final int CHANNEL_OUT_DEFAULT;
    public static final int CHANNEL_OUT_FRONT_CENTER;
    public static final int CHANNEL_OUT_FRONT_LEFT;
    public static final int CHANNEL_OUT_FRONT_LEFT_OF_CENTER;
    public static final int CHANNEL_OUT_FRONT_RIGHT;
    public static final int CHANNEL_OUT_FRONT_RIGHT_OF_CENTER;
    public static final int CHANNEL_OUT_LOW_FREQUENCY;
    public static final int CHANNEL_OUT_MONO;
    public static final int CHANNEL_OUT_QUAD;
    public static final int CHANNEL_OUT_QUAD_SIDE;
    public static final int CHANNEL_OUT_SIDE_LEFT;
    public static final int CHANNEL_OUT_SIDE_RIGHT;
    public static final int CHANNEL_OUT_STEREO;
    public static final int CHANNEL_OUT_SURROUND;
    public static final int CHANNEL_OUT_TOP_BACK_CENTER;
    public static final int CHANNEL_OUT_TOP_BACK_LEFT;
    public static final int CHANNEL_OUT_TOP_BACK_RIGHT;
    public static final int CHANNEL_OUT_TOP_CENTER;
    public static final int CHANNEL_OUT_TOP_FRONT_CENTER;
    public static final int CHANNEL_OUT_TOP_FRONT_LEFT;
    public static final int CHANNEL_OUT_TOP_FRONT_RIGHT;
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int ENCODING_AAC_ELD;
    public static final int ENCODING_AAC_HE_V1;
    public static final int ENCODING_AAC_HE_V2;
    public static final int ENCODING_AAC_LC;
    public static final int ENCODING_AAC_XHE;
    public static final int ENCODING_AC3;
    public static final int ENCODING_AC4;
    public static final int ENCODING_DEFAULT;
    public static final int ENCODING_DOLBY_MAT;
    public static final int ENCODING_DOLBY_TRUEHD;
    public static final int ENCODING_DTS;
    public static final int ENCODING_DTS_HD;
    public static final int ENCODING_E_AC3;
    public static final int ENCODING_E_AC3_JOC;
    public static final int ENCODING_IEC61937;
    public static final int ENCODING_INVALID;
    public static final int ENCODING_MP3;
    public static final int ENCODING_OPUS;
    public static final int ENCODING_PCM_16BIT;
    public static final int ENCODING_PCM_8BIT;
    public static final int ENCODING_PCM_FLOAT;
    public static final int SAMPLE_RATE_HZ_MAX;
    public static final int SAMPLE_RATE_HZ_MIN;
    public static final int SAMPLE_RATE_UNSPECIFIED;
    public static final int[] SURROUND_SOUND_ENCODING;
    private final int mChannelCount;
    private final int mChannelIndexMask;
    private final int mChannelMask;
    private final int mEncoding;
    private final int mFrameSizeInBytes;
    private final int mPropertySetMask;
    private final int mSampleRate;

    static void <clinit>()
    {
        android.media.AudioFormat$1 $r0;
        int[] $r1;

        <android.media.AudioFormat: int SAMPLE_RATE_UNSPECIFIED> = 0;

        <android.media.AudioFormat: int SAMPLE_RATE_HZ_MIN> = 4000;

        <android.media.AudioFormat: int SAMPLE_RATE_HZ_MAX> = 192000;

        <android.media.AudioFormat: int ENCODING_PCM_FLOAT> = 4;

        <android.media.AudioFormat: int ENCODING_PCM_8BIT> = 3;

        <android.media.AudioFormat: int ENCODING_PCM_16BIT> = 2;

        <android.media.AudioFormat: int ENCODING_OPUS> = 20;

        <android.media.AudioFormat: int ENCODING_MP3> = 9;

        <android.media.AudioFormat: int ENCODING_INVALID> = 0;

        <android.media.AudioFormat: int ENCODING_IEC61937> = 13;

        <android.media.AudioFormat: int ENCODING_E_AC3_JOC> = 18;

        <android.media.AudioFormat: int ENCODING_E_AC3> = 6;

        <android.media.AudioFormat: int ENCODING_DTS_HD> = 8;

        <android.media.AudioFormat: int ENCODING_DTS> = 7;

        <android.media.AudioFormat: int ENCODING_DOLBY_TRUEHD> = 14;

        <android.media.AudioFormat: int ENCODING_DOLBY_MAT> = 19;

        <android.media.AudioFormat: int ENCODING_DEFAULT> = 1;

        <android.media.AudioFormat: int ENCODING_AC4> = 17;

        <android.media.AudioFormat: int ENCODING_AC3> = 5;

        <android.media.AudioFormat: int ENCODING_AAC_XHE> = 16;

        <android.media.AudioFormat: int ENCODING_AAC_LC> = 10;

        <android.media.AudioFormat: int ENCODING_AAC_HE_V2> = 12;

        <android.media.AudioFormat: int ENCODING_AAC_HE_V1> = 11;

        <android.media.AudioFormat: int ENCODING_AAC_ELD> = 15;

        <android.media.AudioFormat: int CHANNEL_OUT_TOP_FRONT_RIGHT> = 65536;

        <android.media.AudioFormat: int CHANNEL_OUT_TOP_FRONT_LEFT> = 16384;

        <android.media.AudioFormat: int CHANNEL_OUT_TOP_FRONT_CENTER> = 32768;

        <android.media.AudioFormat: int CHANNEL_OUT_TOP_CENTER> = 8192;

        <android.media.AudioFormat: int CHANNEL_OUT_TOP_BACK_RIGHT> = 524288;

        <android.media.AudioFormat: int CHANNEL_OUT_TOP_BACK_LEFT> = 131072;

        <android.media.AudioFormat: int CHANNEL_OUT_TOP_BACK_CENTER> = 262144;

        <android.media.AudioFormat: int CHANNEL_OUT_SURROUND> = 1052;

        <android.media.AudioFormat: int CHANNEL_OUT_STEREO> = 12;

        <android.media.AudioFormat: int CHANNEL_OUT_SIDE_RIGHT> = 4096;

        <android.media.AudioFormat: int CHANNEL_OUT_SIDE_LEFT> = 2048;

        <android.media.AudioFormat: int CHANNEL_OUT_QUAD_SIDE> = 6156;

        <android.media.AudioFormat: int CHANNEL_OUT_QUAD> = 204;

        <android.media.AudioFormat: int CHANNEL_OUT_MONO> = 4;

        <android.media.AudioFormat: int CHANNEL_OUT_LOW_FREQUENCY> = 32;

        <android.media.AudioFormat: int CHANNEL_OUT_FRONT_RIGHT_OF_CENTER> = 512;

        <android.media.AudioFormat: int CHANNEL_OUT_FRONT_RIGHT> = 8;

        <android.media.AudioFormat: int CHANNEL_OUT_FRONT_LEFT_OF_CENTER> = 256;

        <android.media.AudioFormat: int CHANNEL_OUT_FRONT_LEFT> = 4;

        <android.media.AudioFormat: int CHANNEL_OUT_FRONT_CENTER> = 16;

        <android.media.AudioFormat: int CHANNEL_OUT_DEFAULT> = 1;

        <android.media.AudioFormat: int CHANNEL_OUT_BACK_RIGHT> = 128;

        <android.media.AudioFormat: int CHANNEL_OUT_BACK_LEFT> = 64;

        <android.media.AudioFormat: int CHANNEL_OUT_BACK_CENTER> = 1024;

        <android.media.AudioFormat: int CHANNEL_OUT_7POINT1_SURROUND> = 6396;

        <android.media.AudioFormat: int CHANNEL_OUT_7POINT1> = 1020;

        <android.media.AudioFormat: int CHANNEL_OUT_5POINT1_SIDE> = 6204;

        <android.media.AudioFormat: int CHANNEL_OUT_5POINT1> = 252;

        <android.media.AudioFormat: int CHANNEL_IN_Z_AXIS> = 8192;

        <android.media.AudioFormat: int CHANNEL_IN_Y_AXIS> = 4096;

        <android.media.AudioFormat: int CHANNEL_IN_X_AXIS> = 2048;

        <android.media.AudioFormat: int CHANNEL_IN_VOICE_UPLINK> = 16384;

        <android.media.AudioFormat: int CHANNEL_IN_VOICE_DNLINK> = 32768;

        <android.media.AudioFormat: int CHANNEL_IN_STEREO> = 12;

        <android.media.AudioFormat: int CHANNEL_IN_RIGHT_PROCESSED> = 128;

        <android.media.AudioFormat: int CHANNEL_IN_RIGHT> = 8;

        <android.media.AudioFormat: int CHANNEL_IN_PRESSURE> = 1024;

        <android.media.AudioFormat: int CHANNEL_IN_MONO> = 16;

        <android.media.AudioFormat: int CHANNEL_IN_LEFT_PROCESSED> = 64;

        <android.media.AudioFormat: int CHANNEL_IN_LEFT> = 4;

        <android.media.AudioFormat: int CHANNEL_IN_FRONT_PROCESSED> = 256;

        <android.media.AudioFormat: int CHANNEL_IN_FRONT_BACK> = 48;

        <android.media.AudioFormat: int CHANNEL_IN_FRONT> = 16;

        <android.media.AudioFormat: int CHANNEL_IN_DEFAULT> = 1;

        <android.media.AudioFormat: int CHANNEL_IN_BACK_PROCESSED> = 512;

        <android.media.AudioFormat: int CHANNEL_IN_BACK> = 32;

        <android.media.AudioFormat: int CHANNEL_INVALID> = 0;

        <android.media.AudioFormat: int CHANNEL_CONFIGURATION_STEREO> = 3;

        <android.media.AudioFormat: int CHANNEL_CONFIGURATION_MONO> = 2;

        <android.media.AudioFormat: int CHANNEL_CONFIGURATION_INVALID> = 0;

        <android.media.AudioFormat: int CHANNEL_CONFIGURATION_DEFAULT> = 1;

        <android.media.AudioFormat: int AUDIO_FORMAT_HAS_PROPERTY_SAMPLE_RATE> = 2;

        <android.media.AudioFormat: int AUDIO_FORMAT_HAS_PROPERTY_NONE> = 0;

        <android.media.AudioFormat: int AUDIO_FORMAT_HAS_PROPERTY_ENCODING> = 1;

        <android.media.AudioFormat: int AUDIO_FORMAT_HAS_PROPERTY_CHANNEL_MASK> = 4;

        <android.media.AudioFormat: int AUDIO_FORMAT_HAS_PROPERTY_CHANNEL_INDEX_MASK> = 8;

        $r0 = new android.media.AudioFormat$1;

        specialinvoke $r0.<android.media.AudioFormat$1: void <init>()>();

        <android.media.AudioFormat: android.os.Parcelable$Creator CREATOR> = $r0;

        $r1 = newarray (int)[9];

        $r1[0] = 5;

        $r1[1] = 6;

        $r1[2] = 7;

        $r1[3] = 8;

        $r1[4] = 10;

        $r1[5] = 14;

        $r1[6] = 17;

        $r1[7] = 18;

        $r1[8] = 19;

        <android.media.AudioFormat: int[] SURROUND_SOUND_ENCODING> = $r1;

        return;
    }

    public void <init>()
    {
        android.media.AudioFormat r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.media.AudioFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("There is no valid usage of this constructor");

        throw $r1;
    }

    private void <init>(int, int, int, int)
    {
        android.media.AudioFormat r0;
        int i0, i1, i2, i3;

        r0 := @this: android.media.AudioFormat;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.media.AudioFormat: void <init>(int,int,int,int,int)>(15, i0, i1, i2, i3);

        return;
    }

    private void <init>(int, int, int, int, int)
    {
        android.media.AudioFormat r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, $i16, i17, i18;
        java.lang.Throwable $r2;

        r0 := @this: android.media.AudioFormat;

        i7 := @parameter0: int;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        i10 := @parameter3: int;

        i11 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioFormat: int mPropertySetMask> = i7;

        $i1 = i7 & 1;

        if $i1 == 0 goto label01;

        goto label02;

     label01:
        i8 = 0;

     label02:
        r0.<android.media.AudioFormat: int mEncoding> = i8;

        $i2 = i7 & 2;

        if $i2 == 0 goto label03;

        goto label04;

     label03:
        i9 = 0;

     label04:
        r0.<android.media.AudioFormat: int mSampleRate> = i9;

        $i3 = i7 & 4;

        if $i3 == 0 goto label05;

        goto label06;

     label05:
        i10 = 0;

     label06:
        r0.<android.media.AudioFormat: int mChannelMask> = i10;

        $i4 = i7 & 8;

        if $i4 == 0 goto label07;

        goto label08;

     label07:
        i11 = 0;

     label08:
        r0.<android.media.AudioFormat: int mChannelIndexMask> = i11;

        $i5 = virtualinvoke r0.<android.media.AudioFormat: int getChannelIndexMask()>();

        i12 = staticinvoke <java.lang.Integer: int bitCount(int)>($i5);

        $i6 = virtualinvoke r0.<android.media.AudioFormat: int getChannelMask()>();

        i13 = staticinvoke <android.media.AudioFormat: int channelCountFromOutChannelMask(int)>($i6);

        if i13 != 0 goto label09;

        i14 = i12;

        goto label10;

     label09:
        i14 = i13;

        if i13 == i12 goto label10;

        i14 = i13;

        if i12 == 0 goto label10;

        i14 = 0;

     label10:
        r0.<android.media.AudioFormat: int mChannelCount> = i14;

     label11:
        $i16 = r0.<android.media.AudioFormat: int mEncoding>;

        i17 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i16);

     label12:
        i18 = i17 * i14;

        goto label14;

     label13:
        $r2 := @caughtexception;

        i18 = 1;

     label14:
        if i18 == 0 goto label15;

        goto label16;

     label15:
        i18 = 1;

     label16:
        r0.<android.media.AudioFormat: int mFrameSizeInBytes> = i18;

        return;

        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
    }

    void <init>(int, int, int, int, int, android.media.AudioFormat$1)
    {
        android.media.AudioFormat r0;
        int i0, i1, i2, i3, i4;
        android.media.AudioFormat$1 r1;

        r0 := @this: android.media.AudioFormat;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 := @parameter5: android.media.AudioFormat$1;

        specialinvoke r0.<android.media.AudioFormat: void <init>(int,int,int,int,int)>(i0, i1, i2, i3, i4);

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.media.AudioFormat r0;
        android.os.Parcel r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.media.AudioFormat;

        r1 := @parameter0: android.os.Parcel;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        specialinvoke r0.<android.media.AudioFormat: void <init>(int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4);

        return;
    }

    void <init>(android.os.Parcel, android.media.AudioFormat$1)
    {
        android.media.AudioFormat r0;
        android.os.Parcel r1;
        android.media.AudioFormat$1 r2;

        r0 := @this: android.media.AudioFormat;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.media.AudioFormat$1;

        specialinvoke r0.<android.media.AudioFormat: void <init>(android.os.Parcel)>(r1);

        return;
    }

    static int access$000(android.media.AudioFormat)
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @parameter0: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mEncoding>;

        return $i0;
    }

    static int access$100(android.media.AudioFormat)
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @parameter0: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mSampleRate>;

        return $i0;
    }

    static int access$200(android.media.AudioFormat)
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @parameter0: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mChannelMask>;

        return $i0;
    }

    static int access$300(android.media.AudioFormat)
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @parameter0: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mChannelIndexMask>;

        return $i0;
    }

    static int access$400(android.media.AudioFormat)
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @parameter0: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        return $i0;
    }

    public static int channelCountFromInChannelMask(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        return $i1;
    }

    public static int channelCountFromOutChannelMask(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        return $i1;
    }

    public static int convertChannelOutMaskToNativeMask(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 >> 2;

        return $i1;
    }

    public static int convertNativeChannelMaskToOutMask(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 << 2;

        return $i1;
    }

    public static int[] filterPublicFormats(int[])
    {
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        int[] $r0, r1, r2;
        boolean $z0;

        r1 := @parameter0: int[];

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r1;

        r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, $i0);

        i4 = 0;

        i5 = 0;

     label2:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label5;

        i6 = i4;

        $i2 = r2[i5];

        $z0 = staticinvoke <android.media.AudioFormat: boolean isPublicEncoding(int)>($i2);

        if $z0 == 0 goto label4;

        if i4 == i5 goto label3;

        $i3 = r2[i5];

        r2[i4] = $i3;

     label3:
        i6 = i4 + 1;

     label4:
        i5 = i5 + 1;

        i4 = i6;

        goto label2;

     label5:
        $r0 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r2, i4);

        return $r0;
    }

    public static int getBytesPerSample(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 1 goto label4;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 != 13 goto label1;

        goto label4;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad audio format ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 4;

     label3:
        return 1;

     label4:
        return 2;
    }

    public static int inChannelMaskFromOutChannelMask(int) throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalArgumentException $r0, $r1;
        int i0, i1;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        i1 = staticinvoke <android.media.AudioFormat: int channelCountFromOutChannelMask(int)>(i0);

        if i1 == 1 goto label2;

        if i1 != 2 goto label1;

        return 12;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported channel configuration for input.");

        throw $r1;

     label2:
        return 16;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal CHANNEL_OUT_DEFAULT channel mask for input.");

        throw $r0;
    }

    public static boolean isEncodingLinearFrames(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label3;
            case 14: goto label2;
            case 15: goto label2;
            case 16: goto label2;
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad audio format ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static boolean isEncodingLinearPcm(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label2;
            case 14: goto label2;
            case 15: goto label2;
            case 16: goto label2;
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad audio format ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static boolean isPublicEncoding(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label2;
            case 14: goto label2;
            case 15: goto label2;
            case 16: goto label2;
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean isValidEncoding(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label2;
            case 14: goto label2;
            case 15: goto label2;
            case 16: goto label2;
            case 17: goto label2;
            case 18: goto label2;
            case 19: goto label2;
            case 20: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public static java.lang.String toDisplayName(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 5 goto label10;

        if i0 == 6 goto label09;

        if i0 == 7 goto label08;

        if i0 == 8 goto label07;

        if i0 == 10 goto label06;

        if i0 == 14 goto label05;

        tableswitch(i0)
        {
            case 17: goto label04;
            case 18: goto label03;
            case 19: goto label02;
            default: goto label01;
        };

     label01:
        return "Unknown surround sound format";

     label02:
        return "Dolby MAT";

     label03:
        return "Dolby Atmos in Dolby Digital Plus";

     label04:
        return "Dolby AC-4";

     label05:
        return "Dolby TrueHD";

     label06:
        return "AAC";

     label07:
        return "DTS HD";

     label08:
        return "DTS";

     label09:
        return "Dolby Digital Plus";

     label10:
        return "Dolby Digital";
    }

    public static java.lang.String toLogFriendlyEncoding(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 0 goto label21;

        tableswitch(i0)
        {
            case 2: goto label20;
            case 3: goto label19;
            case 4: goto label18;
            case 5: goto label17;
            case 6: goto label16;
            case 7: goto label15;
            case 8: goto label14;
            case 9: goto label13;
            case 10: goto label12;
            case 11: goto label11;
            case 12: goto label10;
            case 13: goto label09;
            case 14: goto label08;
            case 15: goto label07;
            case 16: goto label06;
            case 17: goto label05;
            case 18: goto label04;
            case 19: goto label03;
            case 20: goto label02;
            default: goto label01;
        };

     label01:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid encoding ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label02:
        return "ENCODING_OPUS";

     label03:
        return "ENCODING_DOLBY_MAT";

     label04:
        return "ENCODING_E_AC3_JOC";

     label05:
        return "ENCODING_AC4";

     label06:
        return "ENCODING_AAC_XHE";

     label07:
        return "ENCODING_AAC_ELD";

     label08:
        return "ENCODING_DOLBY_TRUEHD";

     label09:
        return "ENCODING_IEC61937";

     label10:
        return "ENCODING_AAC_HE_V2";

     label11:
        return "ENCODING_AAC_HE_V1";

     label12:
        return "ENCODING_AAC_LC";

     label13:
        return "ENCODING_MP3";

     label14:
        return "ENCODING_DTS_HD";

     label15:
        return "ENCODING_DTS";

     label16:
        return "ENCODING_E_AC3";

     label17:
        return "ENCODING_AC3";

     label18:
        return "ENCODING_PCM_FLOAT";

     label19:
        return "ENCODING_PCM_8BIT";

     label20:
        return "ENCODING_PCM_16BIT";

     label21:
        return "ENCODING_INVALID";
    }

    public int describeContents()
    {
        android.media.AudioFormat r0;

        r0 := @this: android.media.AudioFormat;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.media.AudioFormat r0, r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.Class $r1, $r2;
        java.lang.Object r3;
        boolean z1;

        r0 := @this: android.media.AudioFormat;

        r3 := @parameter0: java.lang.Object;

        if r0 != r3 goto label1;

        return 1;

     label1:
        if r3 == null goto label9;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label2;

        goto label9;

     label2:
        r4 = (android.media.AudioFormat) r3;

        i0 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        $i1 = r4.<android.media.AudioFormat: int mPropertySetMask>;

        if i0 == $i1 goto label3;

        return 0;

     label3:
        $i2 = i0 & 1;

        if $i2 == 0 goto label4;

        $i16 = r0.<android.media.AudioFormat: int mEncoding>;

        $i15 = r4.<android.media.AudioFormat: int mEncoding>;

        if $i16 != $i15 goto label7;

     label4:
        $i3 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label5;

        $i14 = r0.<android.media.AudioFormat: int mSampleRate>;

        $i13 = r4.<android.media.AudioFormat: int mSampleRate>;

        if $i14 != $i13 goto label7;

     label5:
        $i5 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        $i6 = $i5 & 4;

        if $i6 == 0 goto label6;

        $i12 = r0.<android.media.AudioFormat: int mChannelMask>;

        $i11 = r4.<android.media.AudioFormat: int mChannelMask>;

        if $i12 != $i11 goto label7;

     label6:
        z1 = 1;

        $i7 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        $i8 = $i7 & 8;

        if $i8 == 0 goto label8;

        $i10 = r0.<android.media.AudioFormat: int mChannelIndexMask>;

        $i9 = r4.<android.media.AudioFormat: int mChannelIndexMask>;

        if $i10 != $i9 goto label7;

        z1 = 1;

        goto label8;

     label7:
        z1 = 0;

     label8:
        return z1;

     label9:
        return 0;
    }

    public int getChannelCount()
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @this: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mChannelCount>;

        return $i0;
    }

    public int getChannelIndexMask()
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @this: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mChannelIndexMask>;

        return $i0;
    }

    public int getChannelMask()
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @this: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mChannelMask>;

        return $i0;
    }

    public int getEncoding()
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @this: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mEncoding>;

        return $i0;
    }

    public int getFrameSizeInBytes()
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @this: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mFrameSizeInBytes>;

        return $i0;
    }

    public int getPropertySetMask()
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @this: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        return $i0;
    }

    public int getSampleRate()
    {
        android.media.AudioFormat r0;
        int $i0;

        r0 := @this: android.media.AudioFormat;

        $i0 = r0.<android.media.AudioFormat: int mSampleRate>;

        return $i0;
    }

    public int hashCode()
    {
        android.media.AudioFormat r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Integer $r2, $r3, $r4, $r5, $r6;

        r0 := @this: android.media.AudioFormat;

        $r1 = newarray (java.lang.Object)[5];

        $i0 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<android.media.AudioFormat: int mSampleRate>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $i2 = r0.<android.media.AudioFormat: int mEncoding>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r4;

        $i3 = r0.<android.media.AudioFormat: int mChannelMask>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[3] = $r5;

        $i4 = r0.<android.media.AudioFormat: int mChannelIndexMask>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r1[4] = $r6;

        $i5 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i5;
    }

    public java.lang.String toLogFriendlyString()
    {
        android.media.AudioFormat r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: android.media.AudioFormat;

        $r1 = newarray (java.lang.Object)[3];

        $i0 = r0.<android.media.AudioFormat: int mChannelCount>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<android.media.AudioFormat: int mSampleRate>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $i2 = r0.<android.media.AudioFormat: int mEncoding>;

        $r4 = staticinvoke <android.media.AudioFormat: java.lang.String toLogFriendlyEncoding(int)>($i2);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%dch %dHz %s", $r1);

        return $r5;
    }

    public java.lang.String toString()
    {
        android.media.AudioFormat r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r8, $r9, $r12, $r13, $r17, $r18;

        r0 := @this: android.media.AudioFormat;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioFormat: props=");

        $i0 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" enc=");

        $i1 = r0.<android.media.AudioFormat: int mEncoding>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" chan=0x");

        $i2 = r0.<android.media.AudioFormat: int mChannelMask>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" chan_index=0x");

        $i3 = r0.<android.media.AudioFormat: int mChannelIndexMask>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rate=");

        $i4 = r0.<android.media.AudioFormat: int mSampleRate>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r17 = new java.lang.String;

        $r18 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.String: void <init>(java.lang.String)>($r18);

        return $r17;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.media.AudioFormat r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.media.AudioFormat;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $i1 = r0.<android.media.AudioFormat: int mPropertySetMask>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<android.media.AudioFormat: int mEncoding>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<android.media.AudioFormat: int mSampleRate>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $i4 = r0.<android.media.AudioFormat: int mChannelMask>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $i5 = r0.<android.media.AudioFormat: int mChannelIndexMask>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        return;
    }
}
