public class android.media.AudioManager extends java.lang.Object
{
    public static final java.lang.String ACTION_AUDIO_BECOMING_NOISY;
    public static final java.lang.String ACTION_HDMI_AUDIO_PLUG;
    public static final java.lang.String ACTION_HEADSET_PLUG;
    public static final java.lang.String ACTION_MICROPHONE_MUTE_CHANGED;
    public static final java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED;
    public static final java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED;
    public static final java.lang.String ACTION_SPEAKERPHONE_STATE_CHANGED;
    public static final int ADJUST_LOWER;
    public static final int ADJUST_MUTE;
    public static final int ADJUST_RAISE;
    public static final int ADJUST_SAME;
    public static final int ADJUST_TOGGLE_MUTE;
    public static final int ADJUST_UNMUTE;
    public static final int AUDIOFOCUS_FLAGS_APPS;
    public static final int AUDIOFOCUS_FLAGS_SYSTEM;
    public static final int AUDIOFOCUS_FLAG_DELAY_OK;
    public static final int AUDIOFOCUS_FLAG_LOCK;
    public static final int AUDIOFOCUS_FLAG_PAUSES_ON_DUCKABLE_LOSS;
    public static final int AUDIOFOCUS_GAIN;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK;
    public static final int AUDIOFOCUS_LOSS;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;
    public static final int AUDIOFOCUS_NONE;
    public static final int AUDIOFOCUS_REQUEST_DELAYED;
    public static final int AUDIOFOCUS_REQUEST_FAILED;
    public static final int AUDIOFOCUS_REQUEST_GRANTED;
    public static final int AUDIOFOCUS_REQUEST_WAITING_FOR_EXT_POLICY;
    static final int AUDIOPORT_GENERATION_INIT;
    public static final int AUDIO_SESSION_ID_GENERATE;
    private static final boolean DEBUG;
    public static final int DEVICE_IN_ANLG_DOCK_HEADSET;
    public static final int DEVICE_IN_BACK_MIC;
    public static final int DEVICE_IN_BLUETOOTH_SCO_HEADSET;
    public static final int DEVICE_IN_BUILTIN_MIC;
    public static final int DEVICE_IN_DGTL_DOCK_HEADSET;
    public static final int DEVICE_IN_FM_TUNER;
    public static final int DEVICE_IN_HDMI;
    public static final int DEVICE_IN_HDMI_ARC;
    public static final int DEVICE_IN_LINE;
    public static final int DEVICE_IN_LOOPBACK;
    public static final int DEVICE_IN_SPDIF;
    public static final int DEVICE_IN_TELEPHONY_RX;
    public static final int DEVICE_IN_TV_TUNER;
    public static final int DEVICE_IN_USB_ACCESSORY;
    public static final int DEVICE_IN_USB_DEVICE;
    public static final int DEVICE_IN_WIRED_HEADSET;
    public static final int DEVICE_NONE;
    public static final int DEVICE_OUT_ANLG_DOCK_HEADSET;
    public static final int DEVICE_OUT_AUX_DIGITAL;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER;
    public static final int DEVICE_OUT_BLUETOOTH_SCO;
    public static final int DEVICE_OUT_BLUETOOTH_SCO_CARKIT;
    public static final int DEVICE_OUT_BLUETOOTH_SCO_HEADSET;
    public static final int DEVICE_OUT_DEFAULT;
    public static final int DEVICE_OUT_DGTL_DOCK_HEADSET;
    public static final int DEVICE_OUT_EARPIECE;
    public static final int DEVICE_OUT_FM;
    public static final int DEVICE_OUT_HDMI;
    public static final int DEVICE_OUT_HDMI_ARC;
    public static final int DEVICE_OUT_LINE;
    public static final int DEVICE_OUT_REMOTE_SUBMIX;
    public static final int DEVICE_OUT_SPDIF;
    public static final int DEVICE_OUT_SPEAKER;
    public static final int DEVICE_OUT_TELEPHONY_TX;
    public static final int DEVICE_OUT_USB_ACCESSORY;
    public static final int DEVICE_OUT_USB_DEVICE;
    public static final int DEVICE_OUT_USB_HEADSET;
    public static final int DEVICE_OUT_WIRED_HEADPHONE;
    public static final int DEVICE_OUT_WIRED_HEADSET;
    public static final int DEVICE_VOLUME_BEHAVIOR_ABSOLUTE;
    public static final int DEVICE_VOLUME_BEHAVIOR_ABSOLUTE_MULTI_MODE;
    public static final int DEVICE_VOLUME_BEHAVIOR_FIXED;
    public static final int DEVICE_VOLUME_BEHAVIOR_FULL;
    public static final int DEVICE_VOLUME_BEHAVIOR_UNSET;
    public static final int DEVICE_VOLUME_BEHAVIOR_VARIABLE;
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_DEAD_OBJECT;
    public static final int ERROR_INVALID_OPERATION;
    public static final int ERROR_NO_INIT;
    public static final int ERROR_PERMISSION_DENIED;
    public static final java.lang.String EXTRA_AUDIO_PLUG_STATE;
    public static final java.lang.String EXTRA_ENCODINGS;
    public static final java.lang.String EXTRA_MASTER_VOLUME_MUTED;
    public static final java.lang.String EXTRA_MAX_CHANNEL_COUNT;
    public static final java.lang.String EXTRA_PREV_VOLUME_STREAM_DEVICES;
    public static final java.lang.String EXTRA_PREV_VOLUME_STREAM_VALUE;
    public static final java.lang.String EXTRA_RINGER_MODE;
    public static final java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE;
    public static final java.lang.String EXTRA_SCO_AUDIO_STATE;
    public static final java.lang.String EXTRA_STREAM_VOLUME_MUTED;
    public static final java.lang.String EXTRA_VIBRATE_SETTING;
    public static final java.lang.String EXTRA_VIBRATE_TYPE;
    public static final java.lang.String EXTRA_VOLUME_STREAM_DEVICES;
    public static final java.lang.String EXTRA_VOLUME_STREAM_TYPE;
    public static final java.lang.String EXTRA_VOLUME_STREAM_TYPE_ALIAS;
    public static final java.lang.String EXTRA_VOLUME_STREAM_VALUE;
    private static final int EXT_FOCUS_POLICY_TIMEOUT_MS;
    public static final int FLAG_ACTIVE_MEDIA_ONLY;
    public static final int FLAG_ALLOW_RINGER_MODES;
    public static final int FLAG_BLUETOOTH_ABS_VOLUME;
    public static final int FLAG_FIXED_VOLUME;
    public static final int FLAG_FROM_KEY;
    public static final int FLAG_HDMI_SYSTEM_AUDIO_VOLUME;
    private static final java.util.TreeMap FLAG_NAMES;
    public static final int FLAG_PLAY_SOUND;
    public static final int FLAG_REMOVE_SOUND_AND_VIBRATE;
    public static final int FLAG_SHOW_SILENT_HINT;
    public static final int FLAG_SHOW_UI;
    public static final int FLAG_SHOW_UI_WARNINGS;
    public static final int FLAG_SHOW_VIBRATE_HINT;
    public static final int FLAG_VIBRATE;
    private static final java.lang.String FOCUS_CLIENT_ID_STRING;
    public static final int FX_FOCUS_NAVIGATION_DOWN;
    public static final int FX_FOCUS_NAVIGATION_LEFT;
    public static final int FX_FOCUS_NAVIGATION_RIGHT;
    public static final int FX_FOCUS_NAVIGATION_UP;
    public static final int FX_KEYPRESS_DELETE;
    public static final int FX_KEYPRESS_INVALID;
    public static final int FX_KEYPRESS_RETURN;
    public static final int FX_KEYPRESS_SPACEBAR;
    public static final int FX_KEYPRESS_STANDARD;
    public static final int FX_KEY_CLICK;
    public static final int GET_DEVICES_ALL;
    public static final int GET_DEVICES_INPUTS;
    public static final int GET_DEVICES_OUTPUTS;
    public static final java.lang.String INTERNAL_RINGER_MODE_CHANGED_ACTION;
    public static final java.lang.String MASTER_MUTE_CHANGED_ACTION;
    public static final int MODE_CALL_SCREENING;
    public static final int MODE_CURRENT;
    public static final int MODE_INVALID;
    public static final int MODE_IN_CALL;
    public static final int MODE_IN_COMMUNICATION;
    public static final int MODE_NORMAL;
    public static final int MODE_RINGTONE;
    private static final int MSG_DEVICES_CALLBACK_REGISTERED;
    private static final int MSG_DEVICES_DEVICES_ADDED;
    private static final int MSG_DEVICES_DEVICES_REMOVED;
    private static final int MSSG_FOCUS_CHANGE;
    private static final int MSSG_PLAYBACK_CONFIG_CHANGE;
    private static final int MSSG_RECORDING_CONFIG_CHANGE;
    public static final int NUM_SOUND_EFFECTS;
    public static final int NUM_STREAMS;
    public static final java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER;
    public static final java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE;
    public static final java.lang.String PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED;
    public static final java.lang.String PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND;
    public static final java.lang.String PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND;
    public static final int RECORDER_STATE_STARTED;
    public static final int RECORDER_STATE_STOPPED;
    public static final int RECORD_CONFIG_EVENT_NONE;
    public static final int RECORD_CONFIG_EVENT_RELEASE;
    public static final int RECORD_CONFIG_EVENT_START;
    public static final int RECORD_CONFIG_EVENT_STOP;
    public static final int RECORD_CONFIG_EVENT_UPDATE;
    public static final int RECORD_RIID_INVALID;
    public static final java.lang.String RINGER_MODE_CHANGED_ACTION;
    public static final int RINGER_MODE_MAX;
    public static final int RINGER_MODE_NORMAL;
    public static final int RINGER_MODE_SILENT;
    public static final int RINGER_MODE_VIBRATE;
    public static final int ROUTE_ALL;
    public static final int ROUTE_BLUETOOTH;
    public static final int ROUTE_BLUETOOTH_A2DP;
    public static final int ROUTE_BLUETOOTH_SCO;
    public static final int ROUTE_EARPIECE;
    public static final int ROUTE_HEADSET;
    public static final int ROUTE_SPEAKER;
    public static final int SCO_AUDIO_STATE_CONNECTED;
    public static final int SCO_AUDIO_STATE_CONNECTING;
    public static final int SCO_AUDIO_STATE_DISCONNECTED;
    public static final int SCO_AUDIO_STATE_ERROR;
    public static final int STREAM_ACCESSIBILITY;
    public static final int STREAM_ALARM;
    public static final int STREAM_ASSISTANT;
    public static final int STREAM_BLUETOOTH_SCO;
    public static final java.lang.String STREAM_DEVICES_CHANGED_ACTION;
    public static final int STREAM_DTMF;
    public static final int STREAM_MUSIC;
    public static final java.lang.String STREAM_MUTE_CHANGED_ACTION;
    public static final int STREAM_NOTIFICATION;
    public static final int STREAM_RING;
    public static final int STREAM_SYSTEM;
    public static final int STREAM_SYSTEM_ENFORCED;
    public static final int STREAM_TTS;
    public static final int STREAM_VOICE_CALL;
    public static final int SUCCESS;
    private static final java.lang.String TAG;
    public static final int USE_DEFAULT_STREAM_TYPE;
    public static final java.lang.String VIBRATE_SETTING_CHANGED_ACTION;
    public static final int VIBRATE_SETTING_OFF;
    public static final int VIBRATE_SETTING_ON;
    public static final int VIBRATE_SETTING_ONLY_SILENT;
    public static final int VIBRATE_TYPE_NOTIFICATION;
    public static final int VIBRATE_TYPE_RINGER;
    public static final java.lang.String VOLUME_CHANGED_ACTION;
    private static final float VOLUME_MIN_DB;
    private static final android.media.audiopolicy.AudioVolumeGroupChangeHandler sAudioAudioVolumeGroupChangedHandler;
    static java.util.ArrayList sAudioPatchesCached;
    private static final android.media.AudioPortEventHandler sAudioPortEventHandler;
    static java.lang.Integer sAudioPortGeneration;
    static java.util.ArrayList sAudioPortsCached;
    static java.util.ArrayList sPreviousAudioPortsCached;
    private static android.media.IAudioService sService;
    private android.content.Context mApplicationContext;
    private final android.media.IAudioFocusDispatcher mAudioFocusDispatcher;
    private final java.util.concurrent.ConcurrentHashMap mAudioFocusIdListenerMap;
    private android.media.AudioManager$AudioServerStateCallback mAudioServerStateCb;
    private final java.lang.Object mAudioServerStateCbLock;
    private final android.media.IAudioServerStateDispatcher mAudioServerStateDispatcher;
    private java.util.concurrent.Executor mAudioServerStateExec;
    private final android.util.ArrayMap mDeviceCallbacks;
    private java.util.HashMap mFocusRequestsAwaitingResult;
    private final java.lang.Object mFocusRequestsLock;
    private final android.os.IBinder mICallBack;
    private android.content.Context mOriginalContext;
    private final android.media.IPlaybackConfigDispatcher mPlayCb;
    private java.util.List mPlaybackCallbackList;
    private final java.lang.Object mPlaybackCallbackLock;
    private android.media.AudioManager$OnAmPortUpdateListener mPortListener;
    private android.media.AudioManager$StrategyPreferredDeviceDispatcherStub mPrefDevDispatcherStub;
    private final java.lang.Object mPrefDevListenerLock;
    private java.util.ArrayList mPrefDevListeners;
    private java.util.ArrayList mPreviousPorts;
    private final android.media.IRecordingConfigDispatcher mRecCb;
    private java.util.List mRecordCallbackList;
    private final java.lang.Object mRecordCallbackLock;
    private final android.media.AudioManager$ServiceEventHandlerDelegate mServiceEventHandlerDelegate;
    private final boolean mUseFixedVolume;
    private final boolean mUseVolumeKeySounds;
    private long mVolumeKeyUpTime;

    static void <clinit>()
    {
        android.media.AudioPortEventHandler $r1;
        android.media.audiopolicy.AudioVolumeGroupChangeHandler $r2;
        java.util.TreeMap $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39;
        java.lang.Integer $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r42;
        java.util.ArrayList $r43, $r44, $r45;

        <android.media.AudioManager: float VOLUME_MIN_DB> = -758.0F;

        <android.media.AudioManager: java.lang.String VOLUME_CHANGED_ACTION> = "android.media.VOLUME_CHANGED_ACTION";

        <android.media.AudioManager: int VIBRATE_TYPE_RINGER> = 0;

        <android.media.AudioManager: int VIBRATE_TYPE_NOTIFICATION> = 1;

        <android.media.AudioManager: int VIBRATE_SETTING_ONLY_SILENT> = 2;

        <android.media.AudioManager: int VIBRATE_SETTING_ON> = 1;

        <android.media.AudioManager: int VIBRATE_SETTING_OFF> = 0;

        <android.media.AudioManager: java.lang.String VIBRATE_SETTING_CHANGED_ACTION> = "android.media.VIBRATE_SETTING_CHANGED";

        <android.media.AudioManager: int USE_DEFAULT_STREAM_TYPE> = -2147483648;

        <android.media.AudioManager: java.lang.String TAG> = "AudioManager";

        <android.media.AudioManager: int SUCCESS> = 0;

        <android.media.AudioManager: int STREAM_VOICE_CALL> = 0;

        <android.media.AudioManager: int STREAM_TTS> = 9;

        <android.media.AudioManager: int STREAM_SYSTEM_ENFORCED> = 7;

        <android.media.AudioManager: int STREAM_SYSTEM> = 1;

        <android.media.AudioManager: int STREAM_RING> = 2;

        <android.media.AudioManager: int STREAM_NOTIFICATION> = 5;

        <android.media.AudioManager: java.lang.String STREAM_MUTE_CHANGED_ACTION> = "android.media.STREAM_MUTE_CHANGED_ACTION";

        <android.media.AudioManager: int STREAM_MUSIC> = 3;

        <android.media.AudioManager: int STREAM_DTMF> = 8;

        <android.media.AudioManager: java.lang.String STREAM_DEVICES_CHANGED_ACTION> = "android.media.STREAM_DEVICES_CHANGED_ACTION";

        <android.media.AudioManager: int STREAM_BLUETOOTH_SCO> = 6;

        <android.media.AudioManager: int STREAM_ASSISTANT> = 11;

        <android.media.AudioManager: int STREAM_ALARM> = 4;

        <android.media.AudioManager: int STREAM_ACCESSIBILITY> = 10;

        <android.media.AudioManager: int SCO_AUDIO_STATE_ERROR> = -1;

        <android.media.AudioManager: int SCO_AUDIO_STATE_DISCONNECTED> = 0;

        <android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTING> = 2;

        <android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTED> = 1;

        <android.media.AudioManager: int ROUTE_SPEAKER> = 2;

        <android.media.AudioManager: int ROUTE_HEADSET> = 8;

        <android.media.AudioManager: int ROUTE_EARPIECE> = 1;

        <android.media.AudioManager: int ROUTE_BLUETOOTH_SCO> = 4;

        <android.media.AudioManager: int ROUTE_BLUETOOTH_A2DP> = 16;

        <android.media.AudioManager: int ROUTE_BLUETOOTH> = 4;

        <android.media.AudioManager: int ROUTE_ALL> = -1;

        <android.media.AudioManager: int RINGER_MODE_VIBRATE> = 1;

        <android.media.AudioManager: int RINGER_MODE_SILENT> = 0;

        <android.media.AudioManager: int RINGER_MODE_NORMAL> = 2;

        <android.media.AudioManager: int RINGER_MODE_MAX> = 2;

        <android.media.AudioManager: java.lang.String RINGER_MODE_CHANGED_ACTION> = "android.media.RINGER_MODE_CHANGED";

        <android.media.AudioManager: int RECORD_RIID_INVALID> = -1;

        <android.media.AudioManager: int RECORD_CONFIG_EVENT_UPDATE> = 2;

        <android.media.AudioManager: int RECORD_CONFIG_EVENT_STOP> = 1;

        <android.media.AudioManager: int RECORD_CONFIG_EVENT_START> = 0;

        <android.media.AudioManager: int RECORD_CONFIG_EVENT_RELEASE> = 3;

        <android.media.AudioManager: int RECORD_CONFIG_EVENT_NONE> = -1;

        <android.media.AudioManager: int RECORDER_STATE_STOPPED> = 1;

        <android.media.AudioManager: int RECORDER_STATE_STARTED> = 0;

        <android.media.AudioManager: java.lang.String PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND> = "android.media.property.SUPPORT_SPEAKER_NEAR_ULTRASOUND";

        <android.media.AudioManager: java.lang.String PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND> = "android.media.property.SUPPORT_MIC_NEAR_ULTRASOUND";

        <android.media.AudioManager: java.lang.String PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED> = "android.media.property.SUPPORT_AUDIO_SOURCE_UNPROCESSED";

        <android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE> = "android.media.property.OUTPUT_SAMPLE_RATE";

        <android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER> = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";

        <android.media.AudioManager: int NUM_STREAMS> = 5;

        <android.media.AudioManager: int NUM_SOUND_EFFECTS> = 10;

        <android.media.AudioManager: int MSSG_RECORDING_CONFIG_CHANGE> = 1;

        <android.media.AudioManager: int MSSG_PLAYBACK_CONFIG_CHANGE> = 2;

        <android.media.AudioManager: int MSSG_FOCUS_CHANGE> = 0;

        <android.media.AudioManager: int MSG_DEVICES_DEVICES_REMOVED> = 2;

        <android.media.AudioManager: int MSG_DEVICES_DEVICES_ADDED> = 1;

        <android.media.AudioManager: int MSG_DEVICES_CALLBACK_REGISTERED> = 0;

        <android.media.AudioManager: int MODE_RINGTONE> = 1;

        <android.media.AudioManager: int MODE_NORMAL> = 0;

        <android.media.AudioManager: int MODE_IN_COMMUNICATION> = 3;

        <android.media.AudioManager: int MODE_IN_CALL> = 2;

        <android.media.AudioManager: int MODE_INVALID> = -2;

        <android.media.AudioManager: int MODE_CURRENT> = -1;

        <android.media.AudioManager: int MODE_CALL_SCREENING> = 4;

        <android.media.AudioManager: java.lang.String MASTER_MUTE_CHANGED_ACTION> = "android.media.MASTER_MUTE_CHANGED_ACTION";

        <android.media.AudioManager: java.lang.String INTERNAL_RINGER_MODE_CHANGED_ACTION> = "android.media.INTERNAL_RINGER_MODE_CHANGED_ACTION";

        <android.media.AudioManager: int GET_DEVICES_OUTPUTS> = 2;

        <android.media.AudioManager: int GET_DEVICES_INPUTS> = 1;

        <android.media.AudioManager: int GET_DEVICES_ALL> = 3;

        <android.media.AudioManager: int FX_KEY_CLICK> = 0;

        <android.media.AudioManager: int FX_KEYPRESS_STANDARD> = 5;

        <android.media.AudioManager: int FX_KEYPRESS_SPACEBAR> = 6;

        <android.media.AudioManager: int FX_KEYPRESS_RETURN> = 8;

        <android.media.AudioManager: int FX_KEYPRESS_INVALID> = 9;

        <android.media.AudioManager: int FX_KEYPRESS_DELETE> = 7;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_UP> = 1;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_RIGHT> = 4;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_LEFT> = 3;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_DOWN> = 2;

        <android.media.AudioManager: java.lang.String FOCUS_CLIENT_ID_STRING> = "android_audio_focus_client_id";

        <android.media.AudioManager: int FLAG_VIBRATE> = 16;

        <android.media.AudioManager: int FLAG_SHOW_VIBRATE_HINT> = 2048;

        <android.media.AudioManager: int FLAG_SHOW_UI_WARNINGS> = 1024;

        <android.media.AudioManager: int FLAG_SHOW_UI> = 1;

        <android.media.AudioManager: int FLAG_SHOW_SILENT_HINT> = 128;

        <android.media.AudioManager: int FLAG_REMOVE_SOUND_AND_VIBRATE> = 8;

        <android.media.AudioManager: int FLAG_PLAY_SOUND> = 4;

        <android.media.AudioManager: int FLAG_HDMI_SYSTEM_AUDIO_VOLUME> = 256;

        <android.media.AudioManager: int FLAG_FROM_KEY> = 4096;

        <android.media.AudioManager: int FLAG_FIXED_VOLUME> = 32;

        <android.media.AudioManager: int FLAG_BLUETOOTH_ABS_VOLUME> = 64;

        <android.media.AudioManager: int FLAG_ALLOW_RINGER_MODES> = 2;

        <android.media.AudioManager: int FLAG_ACTIVE_MEDIA_ONLY> = 512;

        <android.media.AudioManager: int EXT_FOCUS_POLICY_TIMEOUT_MS> = 200;

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_VALUE> = "android.media.EXTRA_VOLUME_STREAM_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_TYPE_ALIAS> = "android.media.EXTRA_VOLUME_STREAM_TYPE_ALIAS";

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_TYPE> = "android.media.EXTRA_VOLUME_STREAM_TYPE";

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_DEVICES> = "android.media.EXTRA_VOLUME_STREAM_DEVICES";

        <android.media.AudioManager: java.lang.String EXTRA_VIBRATE_TYPE> = "android.media.EXTRA_VIBRATE_TYPE";

        <android.media.AudioManager: java.lang.String EXTRA_VIBRATE_SETTING> = "android.media.EXTRA_VIBRATE_SETTING";

        <android.media.AudioManager: java.lang.String EXTRA_STREAM_VOLUME_MUTED> = "android.media.EXTRA_STREAM_VOLUME_MUTED";

        <android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_STATE> = "android.media.extra.SCO_AUDIO_STATE";

        <android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE> = "android.media.extra.SCO_AUDIO_PREVIOUS_STATE";

        <android.media.AudioManager: java.lang.String EXTRA_RINGER_MODE> = "android.media.EXTRA_RINGER_MODE";

        <android.media.AudioManager: java.lang.String EXTRA_PREV_VOLUME_STREAM_VALUE> = "android.media.EXTRA_PREV_VOLUME_STREAM_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_PREV_VOLUME_STREAM_DEVICES> = "android.media.EXTRA_PREV_VOLUME_STREAM_DEVICES";

        <android.media.AudioManager: java.lang.String EXTRA_MAX_CHANNEL_COUNT> = "android.media.extra.MAX_CHANNEL_COUNT";

        <android.media.AudioManager: java.lang.String EXTRA_MASTER_VOLUME_MUTED> = "android.media.EXTRA_MASTER_VOLUME_MUTED";

        <android.media.AudioManager: java.lang.String EXTRA_ENCODINGS> = "android.media.extra.ENCODINGS";

        <android.media.AudioManager: java.lang.String EXTRA_AUDIO_PLUG_STATE> = "android.media.extra.AUDIO_PLUG_STATE";

        <android.media.AudioManager: int ERROR_PERMISSION_DENIED> = -4;

        <android.media.AudioManager: int ERROR_NO_INIT> = -5;

        <android.media.AudioManager: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioManager: int ERROR_DEAD_OBJECT> = -6;

        <android.media.AudioManager: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioManager: int ERROR> = -1;

        <android.media.AudioManager: int DEVICE_VOLUME_BEHAVIOR_VARIABLE> = 0;

        <android.media.AudioManager: int DEVICE_VOLUME_BEHAVIOR_UNSET> = -1;

        <android.media.AudioManager: int DEVICE_VOLUME_BEHAVIOR_FULL> = 1;

        <android.media.AudioManager: int DEVICE_VOLUME_BEHAVIOR_FIXED> = 2;

        <android.media.AudioManager: int DEVICE_VOLUME_BEHAVIOR_ABSOLUTE_MULTI_MODE> = 4;

        <android.media.AudioManager: int DEVICE_VOLUME_BEHAVIOR_ABSOLUTE> = 3;

        <android.media.AudioManager: int DEVICE_OUT_WIRED_HEADSET> = 4;

        <android.media.AudioManager: int DEVICE_OUT_WIRED_HEADPHONE> = 8;

        <android.media.AudioManager: int DEVICE_OUT_USB_HEADSET> = 67108864;

        <android.media.AudioManager: int DEVICE_OUT_USB_DEVICE> = 16384;

        <android.media.AudioManager: int DEVICE_OUT_USB_ACCESSORY> = 8192;

        <android.media.AudioManager: int DEVICE_OUT_TELEPHONY_TX> = 65536;

        <android.media.AudioManager: int DEVICE_OUT_SPEAKER> = 2;

        <android.media.AudioManager: int DEVICE_OUT_SPDIF> = 524288;

        <android.media.AudioManager: int DEVICE_OUT_REMOTE_SUBMIX> = 32768;

        <android.media.AudioManager: int DEVICE_OUT_LINE> = 131072;

        <android.media.AudioManager: int DEVICE_OUT_HDMI_ARC> = 262144;

        <android.media.AudioManager: int DEVICE_OUT_HDMI> = 1024;

        <android.media.AudioManager: int DEVICE_OUT_FM> = 1048576;

        <android.media.AudioManager: int DEVICE_OUT_EARPIECE> = 1;

        <android.media.AudioManager: int DEVICE_OUT_DGTL_DOCK_HEADSET> = 4096;

        <android.media.AudioManager: int DEVICE_OUT_DEFAULT> = 1073741824;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO_HEADSET> = 32;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO_CARKIT> = 64;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO> = 16;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER> = 512;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES> = 256;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP> = 128;

        <android.media.AudioManager: int DEVICE_OUT_AUX_DIGITAL> = 1024;

        <android.media.AudioManager: int DEVICE_OUT_ANLG_DOCK_HEADSET> = 2048;

        <android.media.AudioManager: int DEVICE_NONE> = 0;

        <android.media.AudioManager: int DEVICE_IN_WIRED_HEADSET> = -2147483632;

        <android.media.AudioManager: int DEVICE_IN_USB_DEVICE> = -2147479552;

        <android.media.AudioManager: int DEVICE_IN_USB_ACCESSORY> = -2147481600;

        <android.media.AudioManager: int DEVICE_IN_TV_TUNER> = -2147467264;

        <android.media.AudioManager: int DEVICE_IN_TELEPHONY_RX> = -2147483584;

        <android.media.AudioManager: int DEVICE_IN_SPDIF> = -2147418112;

        <android.media.AudioManager: int DEVICE_IN_LOOPBACK> = -2147221504;

        <android.media.AudioManager: int DEVICE_IN_LINE> = -2147450880;

        <android.media.AudioManager: int DEVICE_IN_HDMI_ARC> = -2013265920;

        <android.media.AudioManager: int DEVICE_IN_HDMI> = -2147483616;

        <android.media.AudioManager: int DEVICE_IN_FM_TUNER> = -2147475456;

        <android.media.AudioManager: int DEVICE_IN_DGTL_DOCK_HEADSET> = -2147482624;

        <android.media.AudioManager: int DEVICE_IN_BUILTIN_MIC> = -2147483644;

        <android.media.AudioManager: int DEVICE_IN_BLUETOOTH_SCO_HEADSET> = -2147483640;

        <android.media.AudioManager: int DEVICE_IN_BACK_MIC> = -2147483520;

        <android.media.AudioManager: int DEVICE_IN_ANLG_DOCK_HEADSET> = -2147483136;

        <android.media.AudioManager: boolean DEBUG> = 0;

        <android.media.AudioManager: int AUDIO_SESSION_ID_GENERATE> = 0;

        <android.media.AudioManager: int AUDIOPORT_GENERATION_INIT> = 0;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_WAITING_FOR_EXT_POLICY> = 100;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_GRANTED> = 1;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_FAILED> = 0;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_DELAYED> = 2;

        <android.media.AudioManager: int AUDIOFOCUS_NONE> = 0;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK> = -3;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT> = -2;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS> = -1;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK> = 3;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE> = 4;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT> = 2;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN> = 1;

        <android.media.AudioManager: int AUDIOFOCUS_FLAG_PAUSES_ON_DUCKABLE_LOSS> = 2;

        <android.media.AudioManager: int AUDIOFOCUS_FLAG_LOCK> = 4;

        <android.media.AudioManager: int AUDIOFOCUS_FLAG_DELAY_OK> = 1;

        <android.media.AudioManager: int AUDIOFOCUS_FLAGS_SYSTEM> = 7;

        <android.media.AudioManager: int AUDIOFOCUS_FLAGS_APPS> = 3;

        <android.media.AudioManager: int ADJUST_UNMUTE> = 100;

        <android.media.AudioManager: int ADJUST_TOGGLE_MUTE> = 101;

        <android.media.AudioManager: int ADJUST_SAME> = 0;

        <android.media.AudioManager: int ADJUST_RAISE> = 1;

        <android.media.AudioManager: int ADJUST_MUTE> = -100;

        <android.media.AudioManager: int ADJUST_LOWER> = -1;

        <android.media.AudioManager: java.lang.String ACTION_SPEAKERPHONE_STATE_CHANGED> = "android.media.action.SPEAKERPHONE_STATE_CHANGED";

        <android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED> = "android.media.ACTION_SCO_AUDIO_STATE_UPDATED";

        <android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED> = "android.media.SCO_AUDIO_STATE_CHANGED";

        <android.media.AudioManager: java.lang.String ACTION_MICROPHONE_MUTE_CHANGED> = "android.media.action.MICROPHONE_MUTE_CHANGED";

        <android.media.AudioManager: java.lang.String ACTION_HEADSET_PLUG> = "android.intent.action.HEADSET_PLUG";

        <android.media.AudioManager: java.lang.String ACTION_HDMI_AUDIO_PLUG> = "android.media.action.HDMI_AUDIO_PLUG";

        <android.media.AudioManager: java.lang.String ACTION_AUDIO_BECOMING_NOISY> = "android.media.AUDIO_BECOMING_NOISY";

        $r1 = new android.media.AudioPortEventHandler;

        specialinvoke $r1.<android.media.AudioPortEventHandler: void <init>()>();

        <android.media.AudioManager: android.media.AudioPortEventHandler sAudioPortEventHandler> = $r1;

        $r2 = new android.media.audiopolicy.AudioVolumeGroupChangeHandler;

        specialinvoke $r2.<android.media.audiopolicy.AudioVolumeGroupChangeHandler: void <init>()>();

        <android.media.AudioManager: android.media.audiopolicy.AudioVolumeGroupChangeHandler sAudioAudioVolumeGroupChangedHandler> = $r2;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        <android.media.AudioManager: java.util.TreeMap FLAG_NAMES> = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "FLAG_SHOW_UI");

        $r6 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r6.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "FLAG_ALLOW_RINGER_MODES");

        $r9 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        virtualinvoke $r9.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "FLAG_PLAY_SOUND");

        $r12 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        virtualinvoke $r12.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "FLAG_REMOVE_SOUND_AND_VIBRATE");

        $r15 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        virtualinvoke $r15.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, "FLAG_VIBRATE");

        $r18 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32);

        virtualinvoke $r18.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, "FLAG_FIXED_VOLUME");

        $r21 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        virtualinvoke $r21.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, "FLAG_BLUETOOTH_ABS_VOLUME");

        $r24 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        virtualinvoke $r24.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, "FLAG_SHOW_SILENT_HINT");

        $r27 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        virtualinvoke $r27.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, "FLAG_HDMI_SYSTEM_AUDIO_VOLUME");

        $r30 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(512);

        virtualinvoke $r30.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, "FLAG_ACTIVE_MEDIA_ONLY");

        $r33 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1024);

        virtualinvoke $r33.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, "FLAG_SHOW_UI_WARNINGS");

        $r36 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2048);

        virtualinvoke $r36.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, "FLAG_SHOW_VIBRATE_HINT");

        $r39 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4096);

        virtualinvoke $r39.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, "FLAG_FROM_KEY");

        $r42 = new java.lang.Integer;

        specialinvoke $r42.<java.lang.Integer: void <init>(int)>(0);

        <android.media.AudioManager: java.lang.Integer sAudioPortGeneration> = $r42;

        $r43 = new java.util.ArrayList;

        specialinvoke $r43.<java.util.ArrayList: void <init>()>();

        <android.media.AudioManager: java.util.ArrayList sAudioPortsCached> = $r43;

        $r44 = new java.util.ArrayList;

        specialinvoke $r44.<java.util.ArrayList: void <init>()>();

        <android.media.AudioManager: java.util.ArrayList sPreviousAudioPortsCached> = $r44;

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>()>();

        <android.media.AudioManager: java.util.ArrayList sAudioPatchesCached> = $r45;

        return;
    }

    public void <init>()
    {
        android.media.AudioManager r0;
        java.lang.Object $r1, $r5, $r6, $r8, $r13;
        java.util.concurrent.ConcurrentHashMap $r2;
        android.media.AudioManager$ServiceEventHandlerDelegate $r3;
        android.media.AudioManager$1 $r4;
        android.media.AudioManager$2 $r7;
        android.media.AudioManager$3 $r9;
        android.os.Binder $r10;
        android.util.ArrayMap $r11;
        java.util.ArrayList $r12;
        android.media.AudioManager$4 $r14;

        r0 := @this: android.media.AudioManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mPrefDevListenerLock> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.media.AudioManager: java.util.concurrent.ConcurrentHashMap mAudioFocusIdListenerMap> = $r2;

        $r3 = new android.media.AudioManager$ServiceEventHandlerDelegate;

        specialinvoke $r3.<android.media.AudioManager$ServiceEventHandlerDelegate: void <init>(android.media.AudioManager,android.os.Handler)>(r0, null);

        r0.<android.media.AudioManager: android.media.AudioManager$ServiceEventHandlerDelegate mServiceEventHandlerDelegate> = $r3;

        $r4 = new android.media.AudioManager$1;

        specialinvoke $r4.<android.media.AudioManager$1: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mFocusRequestsLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mPlaybackCallbackLock> = $r6;

        $r7 = new android.media.AudioManager$2;

        specialinvoke $r7.<android.media.AudioManager$2: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IPlaybackConfigDispatcher mPlayCb> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mRecordCallbackLock> = $r8;

        $r9 = new android.media.AudioManager$3;

        specialinvoke $r9.<android.media.AudioManager$3: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IRecordingConfigDispatcher mRecCb> = $r9;

        $r10 = new android.os.Binder;

        specialinvoke $r10.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioManager: android.os.IBinder mICallBack> = $r10;

        r0.<android.media.AudioManager: android.media.AudioManager$OnAmPortUpdateListener mPortListener> = null;

        $r11 = new android.util.ArrayMap;

        specialinvoke $r11.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioManager: java.util.ArrayList mPreviousPorts> = $r12;

        $r13 = new java.lang.Object;

        specialinvoke $r13.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mAudioServerStateCbLock> = $r13;

        $r14 = new android.media.AudioManager$4;

        specialinvoke $r14.<android.media.AudioManager$4: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IAudioServerStateDispatcher mAudioServerStateDispatcher> = $r14;

        r0.<android.media.AudioManager: boolean mUseVolumeKeySounds> = 1;

        r0.<android.media.AudioManager: boolean mUseFixedVolume> = 0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.media.AudioManager r0;
        android.content.Context r1, $r16, $r18;
        java.lang.Object $r2, $r6, $r7, $r9, $r14;
        java.util.concurrent.ConcurrentHashMap $r3;
        android.media.AudioManager$ServiceEventHandlerDelegate $r4;
        android.media.AudioManager$1 $r5;
        android.media.AudioManager$2 $r8;
        android.media.AudioManager$3 $r10;
        android.os.Binder $r11;
        android.util.ArrayMap $r12;
        java.util.ArrayList $r13;
        android.media.AudioManager$4 $r15;
        android.content.res.Resources $r17, $r19;
        boolean $z0, $z1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mPrefDevListenerLock> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.media.AudioManager: java.util.concurrent.ConcurrentHashMap mAudioFocusIdListenerMap> = $r3;

        $r4 = new android.media.AudioManager$ServiceEventHandlerDelegate;

        specialinvoke $r4.<android.media.AudioManager$ServiceEventHandlerDelegate: void <init>(android.media.AudioManager,android.os.Handler)>(r0, null);

        r0.<android.media.AudioManager: android.media.AudioManager$ServiceEventHandlerDelegate mServiceEventHandlerDelegate> = $r4;

        $r5 = new android.media.AudioManager$1;

        specialinvoke $r5.<android.media.AudioManager$1: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mFocusRequestsLock> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mPlaybackCallbackLock> = $r7;

        $r8 = new android.media.AudioManager$2;

        specialinvoke $r8.<android.media.AudioManager$2: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IPlaybackConfigDispatcher mPlayCb> = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mRecordCallbackLock> = $r9;

        $r10 = new android.media.AudioManager$3;

        specialinvoke $r10.<android.media.AudioManager$3: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IRecordingConfigDispatcher mRecCb> = $r10;

        $r11 = new android.os.Binder;

        specialinvoke $r11.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioManager: android.os.IBinder mICallBack> = $r11;

        r0.<android.media.AudioManager: android.media.AudioManager$OnAmPortUpdateListener mPortListener> = null;

        $r12 = new android.util.ArrayMap;

        specialinvoke $r12.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioManager: java.util.ArrayList mPreviousPorts> = $r13;

        $r14 = new java.lang.Object;

        specialinvoke $r14.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mAudioServerStateCbLock> = $r14;

        $r15 = new android.media.AudioManager$4;

        specialinvoke $r15.<android.media.AudioManager$4: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IAudioServerStateDispatcher mAudioServerStateDispatcher> = $r15;

        specialinvoke r0.<android.media.AudioManager: void setContext(android.content.Context)>(r1);

        $r16 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r17 = virtualinvoke $r16.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r17.<android.content.res.Resources: boolean getBoolean(int)>(17891576);

        r0.<android.media.AudioManager: boolean mUseVolumeKeySounds> = $z0;

        $r18 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r19 = virtualinvoke $r18.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r19.<android.content.res.Resources: boolean getBoolean(int)>(17891571);

        r0.<android.media.AudioManager: boolean mUseFixedVolume> = $z1;

        return;
    }

    static java.lang.Object access$100(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.lang.Object mPrefDevListenerLock>;

        return $r1;
    }

    static java.lang.Object access$1000(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.lang.Object mRecordCallbackLock>;

        return $r1;
    }

    static java.util.List access$1100(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.util.List $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        return $r1;
    }

    static android.util.ArrayMap access$1300(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        return $r1;
    }

    static void access$1400(android.media.AudioManager, android.os.Handler)
    {
        android.media.AudioManager r0;
        android.os.Handler r1;

        r0 := @parameter0: android.media.AudioManager;

        r1 := @parameter1: android.os.Handler;

        specialinvoke r0.<android.media.AudioManager: void broadcastDeviceListChange_sync(android.os.Handler)>(r1);

        return;
    }

    static java.lang.Object access$1500(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.lang.Object mAudioServerStateCbLock>;

        return $r1;
    }

    static java.util.concurrent.Executor access$1600(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.util.concurrent.Executor mAudioServerStateExec>;

        return $r1;
    }

    static android.media.AudioManager$AudioServerStateCallback access$1700(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$AudioServerStateCallback $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.media.AudioManager$AudioServerStateCallback mAudioServerStateCb>;

        return $r1;
    }

    static java.util.ArrayList access$200(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        return $r1;
    }

    static android.media.AudioManager$FocusRequestInfo access$300(android.media.AudioManager, java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;
        android.media.AudioManager$FocusRequestInfo $r2;

        r0 := @parameter0: android.media.AudioManager;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.media.AudioManager$FocusRequestInfo findFocusRequestInfo(java.lang.String)>(r1);

        return $r2;
    }

    static android.media.AudioManager$ServiceEventHandlerDelegate access$400(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$ServiceEventHandlerDelegate $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.media.AudioManager$ServiceEventHandlerDelegate mServiceEventHandlerDelegate>;

        return $r1;
    }

    static java.lang.Object access$500(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.lang.Object mFocusRequestsLock>;

        return $r1;
    }

    static java.util.HashMap access$600(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.util.HashMap mFocusRequestsAwaitingResult>;

        return $r1;
    }

    static java.lang.Object access$800(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.lang.Object mPlaybackCallbackLock>;

        return $r1;
    }

    static java.util.List access$900(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.util.List $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        return $r1;
    }

    private void addMicrophonesFromAudioDeviceInfo(java.util.ArrayList, java.util.HashSet)
    {
        android.media.AudioManager r0;
        java.util.ArrayList r1;
        java.util.HashSet r2;
        android.media.AudioDeviceInfo[] r3;
        int i0, $i1, i2;
        android.media.AudioDeviceInfo r4;
        java.lang.Integer $r5;
        boolean $z0;
        android.media.MicrophoneInfo $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.util.HashSet;

        r3 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)>(1);

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r4 = r3[i2];

        $i1 = virtualinvoke r4.<android.media.AudioDeviceInfo: int getType()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z0 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r6 = staticinvoke <android.media.AudioManager: android.media.MicrophoneInfo microphoneInfoFromAudioDeviceInfo(android.media.AudioDeviceInfo)>(r4);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public static final java.lang.String adjustToString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;

        i0 := @parameter0: int;

        if i0 == -100 goto label6;

        if i0 == -1 goto label5;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 100 goto label2;

        if i0 == 101 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("unknown adjust mode ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        return "ADJUST_TOGGLE_MUTE";

     label2:
        return "ADJUST_UNMUTE";

     label3:
        return "ADJUST_RAISE";

     label4:
        return "ADJUST_SAME";

     label5:
        return "ADJUST_LOWER";

     label6:
        return "ADJUST_MUTE";
    }

    public static java.lang.String audioFocusToString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -3: goto label9;
            case -2: goto label8;
            case -1: goto label7;
            case 0: goto label6;
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AUDIO_FOCUS_UNKNOWN(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label2:
        return "AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE";

     label3:
        return "AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK";

     label4:
        return "AUDIOFOCUS_GAIN_TRANSIENT";

     label5:
        return "AUDIOFOCUS_GAIN";

     label6:
        return "AUDIOFOCUS_NONE";

     label7:
        return "AUDIOFOCUS_LOSS";

     label8:
        return "AUDIOFOCUS_LOSS_TRANSIENT";

     label9:
        return "AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK";
    }

    private void broadcastDeviceListChange_sync(android.os.Handler)
    {
        android.media.AudioManager r0;
        android.media.AudioDeviceInfo[] r2, $r12, r15;
        android.os.Handler r3, r14;
        java.util.ArrayList $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        android.util.ArrayMap $r7, $r16;
        java.lang.Object $r8;
        android.media.AudioManager$NativeEventHandlerDelegate $r9;
        android.os.Message $r10, $r11, $r13;

        r0 := @this: android.media.AudioManager;

        r14 := @parameter0: android.os.Handler;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <android.media.AudioManager: int listAudioDevicePorts(java.util.ArrayList)>($r4);

        if $i0 == 0 goto label1;

        return;

     label1:
        if r14 == null goto label2;

        $r12 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] infoListFromPortList(java.util.ArrayList,int)>($r4, 3);

        $r13 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>(r14, 0, $r12);

        virtualinvoke r14.<android.os.Handler: boolean sendMessage(android.os.Message)>($r13);

        goto label7;

     label2:
        $r5 = r0.<android.media.AudioManager: java.util.ArrayList mPreviousPorts>;

        r15 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] calcListDeltas(java.util.ArrayList,java.util.ArrayList,int)>($r5, $r4, 3);

        $r6 = r0.<android.media.AudioManager: java.util.ArrayList mPreviousPorts>;

        r2 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] calcListDeltas(java.util.ArrayList,java.util.ArrayList,int)>($r4, $r6, 3);

        $i1 = lengthof r15;

        if $i1 != 0 goto label3;

        $i4 = lengthof r2;

        if $i4 == 0 goto label7;

     label3:
        i5 = 0;

     label4:
        $r16 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        $i6 = virtualinvoke $r16.<android.util.ArrayMap: int size()>();

        if i5 >= $i6 goto label7;

        $r7 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        $r9 = (android.media.AudioManager$NativeEventHandlerDelegate) $r8;

        r3 = virtualinvoke $r9.<android.media.AudioManager$NativeEventHandlerDelegate: android.os.Handler getHandler()>();

        if r3 == null goto label6;

        $i2 = lengthof r2;

        if $i2 == 0 goto label5;

        $r11 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>(r3, 2, r2);

        virtualinvoke r3.<android.os.Handler: boolean sendMessage(android.os.Message)>($r11);

     label5:
        $i3 = lengthof r15;

        if $i3 == 0 goto label6;

        $r10 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>(r3, 1, r15);

        virtualinvoke r3.<android.os.Handler: boolean sendMessage(android.os.Message)>($r10);

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        r0.<android.media.AudioManager: java.util.ArrayList mPreviousPorts> = $r4;

        return;
    }

    private static android.media.AudioDeviceInfo[] calcListDeltas(java.util.ArrayList, java.util.ArrayList, int)
    {
        java.util.ArrayList r0, r1, $r4;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        android.media.AudioDevicePort r3, $r8;
        android.media.AudioDeviceInfo[] $r5;
        java.lang.Object $r6, $r7;
        boolean z1;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.util.ArrayList;

        i0 := @parameter2: int;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i5 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i5 >= $i1 goto label7;

        z1 = 0;

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r3 = (android.media.AudioDevicePort) $r6;

        i6 = 0;

     label2:
        $i2 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if i6 >= $i2 goto label5;

        if z1 != 0 goto label5;

        $i3 = virtualinvoke r3.<android.media.AudioDevicePort: int id()>();

        $r7 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r8 = (android.media.AudioDevicePort) $r7;

        $i4 = virtualinvoke $r8.<android.media.AudioDevicePort: int id()>();

        if $i3 != $i4 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        i6 = i6 + 1;

        goto label2;

     label5:
        if z1 != 0 goto label6;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        $r5 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] infoListFromPortList(java.util.ArrayList,int)>($r4, i0);

        return $r5;
    }

    private static boolean checkFlags(android.media.AudioDevicePort, int)
    {
        android.media.AudioDevicePort r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @parameter0: android.media.AudioDevicePort;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<android.media.AudioDevicePort: int role()>();

        z0 = 1;

        if i1 != 2 goto label1;

        $i4 = i0 & 2;

        if $i4 != 0 goto label2;

     label1:
        $i2 = virtualinvoke r0.<android.media.AudioDevicePort: int role()>();

        if $i2 != 1 goto label3;

        $i3 = i0 & 1;

        if $i3 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;
    }

    private static boolean checkTypes(android.media.AudioDevicePort)
    {
        android.media.AudioDevicePort r0;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: android.media.AudioDevicePort;

        $i0 = virtualinvoke r0.<android.media.AudioDevicePort: int type()>();

        $i1 = staticinvoke <android.media.AudioDeviceInfo: int convertInternalDeviceToDeviceType(int)>($i0);

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static int createAudioPatch(android.media.AudioPatch[], android.media.AudioPortConfig[], android.media.AudioPortConfig[])
    {
        android.media.AudioPatch[] r0;
        android.media.AudioPortConfig[] r1, r2;
        int $i0;

        r0 := @parameter0: android.media.AudioPatch[];

        r1 := @parameter1: android.media.AudioPortConfig[];

        r2 := @parameter2: android.media.AudioPortConfig[];

        $i0 = staticinvoke <android.media.AudioSystem: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])>(r0, r1, r2);

        return $i0;
    }

    public static void enforceValidVolumeBehavior(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        if i0 == 3 goto label2;

        if i0 != 4 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal volume behavior ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return;
    }

    private static void filterDevicePorts(java.util.ArrayList, java.util.ArrayList)
    {
        java.util.ArrayList r0, r1;
        int $i0, i1;
        java.lang.Object $r2, $r3;
        boolean $z0;
        android.media.AudioDevicePort $r4;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.util.ArrayList;

        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $z0 = $r2 instanceof android.media.AudioDevicePort;

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r4 = (android.media.AudioDevicePort) $r3;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private android.media.AudioManager$FocusRequestInfo findFocusRequestInfo(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        android.media.AudioManager$FocusRequestInfo $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.AudioManager: java.util.concurrent.ConcurrentHashMap mAudioFocusIdListenerMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.media.AudioManager$FocusRequestInfo) $r3;

        return $r4;
    }

    public static java.lang.String flagsToString(int)
    {
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.StringBuilder $r3;
        java.util.TreeMap $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r8, $r9, $r11;
        java.lang.Integer $r10;
        java.lang.String $r12, $r15;

        i4 := @parameter0: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = <android.media.AudioManager: java.util.TreeMap FLAG_NAMES>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        i5 = i4;

        $i2 = i4 & i0;

        if $i2 == 0 goto label3;

        $i3 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i3 <= 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r11 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.String) $r11;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i5 = i4 & i0;

     label3:
        i4 = i5;

        goto label1;

     label4:
        if i4 == 0 goto label6;

        $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label5;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

     label6:
        $r15 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public static java.util.List getAudioProductStrategies()
    {
        android.os.RemoteException $r0;
        java.lang.RuntimeException $r1;
        android.media.IAudioService r2;
        java.util.List r3;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r3 = interfaceinvoke r2.<android.media.IAudioService: java.util.List getAudioProductStrategies()>();

     label2:
        return r3;

     label3:
        $r0 := @caughtexception;

        $r1 = virtualinvoke $r0.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.util.List getAudioVolumeGroups()
    {
        android.os.RemoteException $r0;
        java.lang.RuntimeException $r1;
        android.media.IAudioService r2;
        java.util.List r3;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r3 = interfaceinvoke r2.<android.media.IAudioService: java.util.List getAudioVolumeGroups()>();

     label2:
        return r3;

     label3:
        $r0 := @caughtexception;

        $r1 = virtualinvoke $r0.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.content.Context getContext()
    {
        android.media.AudioManager r0;
        android.content.Context r1, $r2, $r3, $r4;

        r0 := @this: android.media.AudioManager;

        $r2 = r0.<android.media.AudioManager: android.content.Context mApplicationContext>;

        if $r2 != null goto label1;

        $r4 = r0.<android.media.AudioManager: android.content.Context mOriginalContext>;

        specialinvoke r0.<android.media.AudioManager: void setContext(android.content.Context)>($r4);

     label1:
        r1 = r0.<android.media.AudioManager: android.content.Context mApplicationContext>;

        if r1 == null goto label2;

        return r1;

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mOriginalContext>;

        return $r3;
    }

    public static android.media.AudioDeviceInfo[] getDevicesStatic(int)
    {
        int i0, $i1;
        java.util.ArrayList $r1;
        android.media.AudioDeviceInfo[] $r2, $r3;

        i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i1 = staticinvoke <android.media.AudioManager: int listAudioDevicePorts(java.util.ArrayList)>($r1);

        if $i1 == 0 goto label1;

        $r3 = newarray (android.media.AudioDeviceInfo)[0];

        return $r3;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] infoListFromPortList(java.util.ArrayList,int)>($r1, i0);

        return $r2;
    }

    private java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r6, $r8, $r9, $r10, $r11;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        if r1 != null goto label1;

        $r10 = new java.lang.String;

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.String: void <init>(java.lang.String)>($r11);

        return $r10;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = new java.lang.String;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.String: void <init>(java.lang.String)>($r9);

        return $r8;
    }

    private android.media.AudioManager$PrefDevListenerInfo getPrefDevListenerInfo(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener r1, $r4;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.ArrayList r5;
        android.media.AudioManager$PrefDevListenerInfo r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener;

        r5 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        if r5 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.media.AudioManager$PrefDevListenerInfo) $r3;

        $r4 = r6.<android.media.AudioManager$PrefDevListenerInfo: android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener mListener>;

        if $r4 != r1 goto label3;

        return r6;

     label3:
        goto label2;

     label4:
        return null;
    }

    private static android.media.IAudioService getService()
    {
        android.os.IBinder $r0;
        android.media.IAudioService r1, r2;

        r1 = <android.media.AudioManager: android.media.IAudioService sService>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r0);

        <android.media.AudioManager: android.media.IAudioService sService> = r2;

        return r2;
    }

    public static boolean hasHapticChannels(android.net.Uri)
    {
        boolean z0;
        android.media.IAudioService $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.net.Uri r3;

        r3 := @parameter0: android.net.Uri;

     label1:
        $r0 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        z0 = interfaceinvoke $r0.<android.media.IAudioService: boolean hasHapticChannels(android.net.Uri)>(r3);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean hasPlaybackCallback_sync(android.media.AudioManager$AudioPlaybackCallback)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$AudioPlaybackCallback r1, $r7;
        java.util.List $r2, $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        android.media.AudioManager$AudioPlaybackCallbackInfo $r6;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$AudioPlaybackCallback;

        $r2 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        if $r2 == null goto label3;

        i1 = 0;

     label1:
        $r3 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.media.AudioManager$AudioPlaybackCallbackInfo) $r5;

        $r7 = $r6.<android.media.AudioManager$AudioPlaybackCallbackInfo: android.media.AudioManager$AudioPlaybackCallback mCb>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean hasPrefDevListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener r1;
        android.media.AudioManager$PrefDevListenerInfo $r2;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.media.AudioManager$PrefDevListenerInfo getPrefDevListenerInfo(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)>(r1);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasRecordCallback_sync(android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$AudioRecordingCallback r1, $r7;
        java.util.List $r2, $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        android.media.AudioManager$AudioRecordingCallbackInfo $r6;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$AudioRecordingCallback;

        $r2 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        if $r2 == null goto label3;

        i1 = 0;

     label1:
        $r3 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.media.AudioManager$AudioRecordingCallbackInfo) $r5;

        $r7 = $r6.<android.media.AudioManager$AudioRecordingCallbackInfo: android.media.AudioManager$AudioRecordingCallback mCb>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static android.media.AudioDeviceInfo[] infoListFromPortList(java.util.ArrayList, int)
    {
        int i0, i1, i2, i3, i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r0, $r2;
        android.media.AudioDeviceInfo $r1;
        java.util.ArrayList r3;
        java.util.Iterator r4, r7;
        android.media.AudioDevicePort r5, r8;
        android.media.AudioDeviceInfo[] r6;

        r3 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 = 0;

        r4 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.media.AudioDevicePort) $r2;

        i2 = i1;

        $z4 = staticinvoke <android.media.AudioManager: boolean checkTypes(android.media.AudioDevicePort)>(r5);

        if $z4 == 0 goto label2;

        i2 = i1;

        $z5 = staticinvoke <android.media.AudioManager: boolean checkFlags(android.media.AudioDevicePort,int)>(r5, i0);

        if $z5 == 0 goto label2;

        i2 = i1 + 1;

     label2:
        i1 = i2;

        goto label1;

     label3:
        r6 = newarray (android.media.AudioDeviceInfo)[i1];

        i3 = 0;

        r7 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r0 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.media.AudioDevicePort) $r0;

        i4 = i3;

        $z2 = staticinvoke <android.media.AudioManager: boolean checkTypes(android.media.AudioDevicePort)>(r8);

        if $z2 == 0 goto label5;

        i4 = i3;

        $z3 = staticinvoke <android.media.AudioManager: boolean checkFlags(android.media.AudioDevicePort,int)>(r8, i0);

        if $z3 == 0 goto label5;

        $r1 = new android.media.AudioDeviceInfo;

        specialinvoke $r1.<android.media.AudioDeviceInfo: void <init>(android.media.AudioDevicePort)>(r8);

        r6[i3] = $r1;

        i4 = i3 + 1;

     label5:
        i3 = i4;

        goto label4;

     label6:
        return r6;
    }

    public static boolean isHapticPlaybackSupported()
    {
        boolean $z0;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isHapticPlaybackSupported()>();

        return $z0;
    }

    public static boolean isInputDevice(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & -2147483648;

        if $i1 != -2147483648 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isOffloadedPlaybackSupported(android.media.AudioFormat, android.media.AudioAttributes)
    {
        android.media.AudioFormat r0;
        android.media.AudioAttributes r1;
        java.lang.NullPointerException $r2, $r3;
        boolean $z0;

        r0 := @parameter0: android.media.AudioFormat;

        r1 := @parameter1: android.media.AudioAttributes;

        if r0 == null goto label2;

        if r1 == null goto label1;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isOffloadSupported(android.media.AudioFormat,android.media.AudioAttributes)>(r0, r1);

        return $z0;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Illegal null AudioAttributes");

        throw $r3;

     label2:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Illegal null AudioFormat");

        throw $r2;
    }

    public static boolean isOutputDevice(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = -2147483648 & i0;

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isPublicStreamType(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        if i0 == 4 goto label1;

        if i0 == 5 goto label1;

        if i0 == 8 goto label1;

        if i0 == 10 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static boolean isValidRingerMode(int)
    {
        int i0;
        boolean z0;
        android.os.RemoteException $r0;
        java.lang.RuntimeException $r1;
        android.media.IAudioService r2;

        i0 := @parameter0: int;

        if i0 < 0 goto label5;

        if i0 <= 2 goto label1;

        goto label5;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        z0 = interfaceinvoke r2.<android.media.IAudioService: boolean isValidRingerMode(int)>(i0);

     label3:
        return z0;

     label4:
        $r0 := @caughtexception;

        $r1 = virtualinvoke $r0.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r1;

     label5:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static int listAudioDevicePorts(java.util.ArrayList)
    {
        java.util.ArrayList r0, $r2;
        int i0;

        r0 := @parameter0: java.util.ArrayList;

        if r0 != null goto label1;

        return -2;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i0 = staticinvoke <android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>($r2, null, null);

        if i0 != 0 goto label2;

        staticinvoke <android.media.AudioManager: void filterDevicePorts(java.util.ArrayList,java.util.ArrayList)>($r2, r0);

     label2:
        return i0;
    }

    public static int listAudioPatches(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayList;

        $i0 = staticinvoke <android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>(null, r0, null);

        return $i0;
    }

    public static int listAudioPorts(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayList;

        $i0 = staticinvoke <android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>(r0, null, null);

        return $i0;
    }

    public static int listPreviousAudioDevicePorts(java.util.ArrayList)
    {
        java.util.ArrayList r0, $r2;
        int i0;

        r0 := @parameter0: java.util.ArrayList;

        if r0 != null goto label1;

        return -2;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i0 = staticinvoke <android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>(null, null, $r2);

        if i0 != 0 goto label2;

        staticinvoke <android.media.AudioManager: void filterDevicePorts(java.util.ArrayList,java.util.ArrayList)>($r2, r0);

     label2:
        return i0;
    }

    public static int listPreviousAudioPorts(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayList;

        $i0 = staticinvoke <android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>(null, null, r0);

        return $i0;
    }

    public static android.media.MicrophoneInfo microphoneInfoFromAudioDeviceInfo(android.media.AudioDeviceInfo)
    {
        android.media.AudioDeviceInfo r0;
        int i0, $i2, $i3, $i4;
        byte b1;
        java.lang.StringBuilder $r3;
        android.media.AudioDevicePort $r5, $r9;
        java.lang.String $r6, $r8, $r10;
        android.media.MicrophoneInfo $r7;
        android.media.MicrophoneInfo$Coordinate3F $r11, $r12;
        java.util.ArrayList $r13, $r14;

        r0 := @parameter0: android.media.AudioDeviceInfo;

        i0 = virtualinvoke r0.<android.media.AudioDeviceInfo: int getType()>();

        if i0 == 15 goto label3;

        if i0 != 18 goto label1;

        goto label3;

     label1:
        if i0 != 0 goto label2;

        b1 = 0;

        goto label4;

     label2:
        b1 = 3;

        goto label4;

     label3:
        b1 = 1;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<android.media.AudioDeviceInfo: android.media.AudioDevicePort getPort()>();

        $r6 = virtualinvoke $r5.<android.media.AudioDevicePort: java.lang.String name()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $i2 = virtualinvoke r0.<android.media.AudioDeviceInfo: int getId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = new android.media.MicrophoneInfo;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<android.media.AudioDeviceInfo: android.media.AudioDevicePort getPort()>();

        $i3 = virtualinvoke $r9.<android.media.AudioDevicePort: int type()>();

        $r10 = virtualinvoke r0.<android.media.AudioDeviceInfo: java.lang.String getAddress()>();

        $r11 = <android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F POSITION_UNKNOWN>;

        $r12 = <android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F ORIENTATION_UNKNOWN>;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        specialinvoke $r7.<android.media.MicrophoneInfo: void <init>(java.lang.String,int,java.lang.String,int,int,int,android.media.MicrophoneInfo$Coordinate3F,android.media.MicrophoneInfo$Coordinate3F,java.util.List,java.util.List,float,float,float,int)>($r8, $i3, $r10, b1, -1, -1, $r11, $r12, $r13, $r14, -3.4028235E38F, -3.4028235E38F, -3.4028235E38F, 0);

        $i4 = virtualinvoke r0.<android.media.AudioDeviceInfo: int getId()>();

        virtualinvoke $r7.<android.media.MicrophoneInfo: void setId(int)>($i4);

        return $r7;
    }

    private boolean querySoundEffectsEnabled(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i1 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "sound_effects_enabled", 0, i0);

        if $i1 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    static int registerAudioPolicyStatic(android.media.audiopolicy.AudioPolicy)
    {
        android.media.IAudioService r0;
        android.media.audiopolicy.AudioPolicyConfig r1;
        android.media.audiopolicy.IAudioPolicyCallback r2;
        boolean z0, z1, z2, z3;
        java.lang.IllegalArgumentException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.media.audiopolicy.AudioPolicy r6;
        android.media.projection.MediaProjection r7;
        android.media.projection.IMediaProjection r8;
        java.lang.String r9;

        r6 := @parameter0: android.media.audiopolicy.AudioPolicy;

        if r6 == null goto label9;

        r0 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r7 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: android.media.projection.MediaProjection getMediaProjection()>();

        r1 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig getConfig()>();

        r2 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        z0 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: boolean hasFocusListener()>();

        z1 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: boolean isFocusPolicy()>();

        z2 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: boolean isTestFocusPolicy()>();

        z3 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: boolean isVolumeController()>();

     label2:
        if r7 != null goto label3;

        r8 = null;

        goto label4;

     label3:
        r8 = virtualinvoke r7.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection getProjection()>();

     label4:
        r9 = interfaceinvoke r0.<android.media.IAudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>(r1, r2, z0, z1, z2, z3, r8);

     label5:
        if r9 != null goto label6;

        return -1;

     label6:
        virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: void setRegistration(java.lang.String)>(r9);

     label7:
        return 0;

     label8:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label9:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPolicy argument");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public static int releaseAudioPatch(android.media.AudioPatch)
    {
        android.media.AudioPatch r0;
        int $i0;

        r0 := @parameter0: android.media.AudioPatch;

        $i0 = staticinvoke <android.media.AudioSystem: int releaseAudioPatch(android.media.AudioPatch)>(r0);

        return $i0;
    }

    private boolean removePlaybackCallback_sync(android.media.AudioManager$AudioPlaybackCallback)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$AudioPlaybackCallback r1, $r7;
        java.util.List $r2, $r3, $r4, $r8;
        int $i0, i1;
        java.lang.Object $r5;
        android.media.AudioManager$AudioPlaybackCallbackInfo $r6;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$AudioPlaybackCallback;

        $r2 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        if $r2 == null goto label3;

        i1 = 0;

     label1:
        $r3 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.media.AudioManager$AudioPlaybackCallbackInfo) $r5;

        $r7 = $r6.<android.media.AudioManager$AudioPlaybackCallbackInfo: android.media.AudioManager$AudioPlaybackCallback mCb>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        $r8 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(i1);

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean removePrefDevListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)
    {
        android.media.AudioManager r0;
        java.util.ArrayList $r1;
        android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener r2;
        android.media.AudioManager$PrefDevListenerInfo r3;

        r0 := @this: android.media.AudioManager;

        r2 := @parameter0: android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener;

        r3 = specialinvoke r0.<android.media.AudioManager: android.media.AudioManager$PrefDevListenerInfo getPrefDevListenerInfo(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)>(r2);

        if r3 == null goto label1;

        $r1 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        virtualinvoke $r1.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

        return 1;

     label1:
        return 0;
    }

    private boolean removeRecordCallback_sync(android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$AudioRecordingCallback r1, $r7;
        java.util.List $r2, $r3, $r4, $r8;
        int $i0, i1;
        java.lang.Object $r5;
        android.media.AudioManager$AudioRecordingCallbackInfo $r6;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$AudioRecordingCallback;

        $r2 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        if $r2 == null goto label3;

        i1 = 0;

     label1:
        $r3 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.media.AudioManager$AudioRecordingCallbackInfo) $r5;

        $r7 = $r6.<android.media.AudioManager$AudioRecordingCallbackInfo: android.media.AudioManager$AudioRecordingCallback mCb>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        $r8 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(i1);

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    static int resetAudioPortGeneration()
    {
        java.lang.Integer r0, $r2, $r3;
        int i0;
        java.lang.Throwable $r4;

        r0 = <android.media.AudioManager: java.lang.Integer sAudioPortGeneration>;

        entermonitor r0;

     label1:
        $r2 = <android.media.AudioManager: java.lang.Integer sAudioPortGeneration>;

        i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        <android.media.AudioManager: java.lang.Integer sAudioPortGeneration> = $r3;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static int setAudioPortGain(android.media.AudioPort, android.media.AudioGainConfig)
    {
        android.media.AudioGainConfig r0;
        android.media.AudioPortConfig r1, $r2;
        int $i0, $i1, $i2, $i3;
        android.media.AudioPort r3;

        r3 := @parameter0: android.media.AudioPort;

        r0 := @parameter1: android.media.AudioGainConfig;

        if r3 == null goto label2;

        if r0 != null goto label1;

        goto label2;

     label1:
        r1 = virtualinvoke r3.<android.media.AudioPort: android.media.AudioPortConfig activeConfig()>();

        $r2 = new android.media.AudioPortConfig;

        $i0 = virtualinvoke r1.<android.media.AudioPortConfig: int samplingRate()>();

        $i1 = virtualinvoke r1.<android.media.AudioPortConfig: int channelMask()>();

        $i2 = virtualinvoke r1.<android.media.AudioPortConfig: int format()>();

        specialinvoke $r2.<android.media.AudioPortConfig: void <init>(android.media.AudioPort,int,int,int,android.media.AudioGainConfig)>(r3, $i0, $i1, $i2, r0);

        $r2.<android.media.AudioPortConfig: int mConfigMask> = 8;

        $i3 = staticinvoke <android.media.AudioSystem: int setAudioPortConfig(android.media.AudioPortConfig)>($r2);

        return $i3;

     label2:
        return -2;
    }

    private void setContext(android.content.Context)
    {
        android.media.AudioManager r0;
        android.content.Context r1, r2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.Context;

        r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<android.media.AudioManager: android.content.Context mApplicationContext> = r2;

        if r2 == null goto label1;

        r0.<android.media.AudioManager: android.content.Context mOriginalContext> = null;

        goto label2;

     label1:
        r0.<android.media.AudioManager: android.content.Context mOriginalContext> = r1;

     label2:
        return;
    }

    public static void setPortIdForMicrophones(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        android.media.AudioDeviceInfo[] r1;
        int i0, $i1, $i2, $i4, $i5, $i6, i7, i8;
        java.lang.StringBuilder $r2;
        java.lang.Object $r4, $r8, $r15, $r18, $r21;
        android.media.MicrophoneInfo $r5, $r9, $r16, $r19, $r22;
        java.lang.String $r10, $r12, $r17, $r20;
        android.media.AudioDevicePort $r14;
        boolean $z1, z2;
        android.media.AudioDeviceInfo r23;

        r0 := @parameter0: java.util.ArrayList;

        r1 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)>(1);

        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        i7 = $i1 - 1;

     label1:
        if i7 < 0 goto label6;

        i0 = lengthof r1;

        i8 = 0;

     label2:
        z2 = 0;

        if i8 >= i0 goto label4;

        r23 = r1[i8];

        $r14 = virtualinvoke r23.<android.media.AudioDeviceInfo: android.media.AudioDevicePort getPort()>();

        $i4 = virtualinvoke $r14.<android.media.AudioDevicePort: int type()>();

        $r15 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r16 = (android.media.MicrophoneInfo) $r15;

        $i5 = virtualinvoke $r16.<android.media.MicrophoneInfo: int getInternalDeviceType()>();

        if $i4 != $i5 goto label3;

        $r17 = virtualinvoke r23.<android.media.AudioDeviceInfo: java.lang.String getAddress()>();

        $r18 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r19 = (android.media.MicrophoneInfo) $r18;

        $r20 = virtualinvoke $r19.<android.media.MicrophoneInfo: java.lang.String getAddress()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r17, $r20);

        if $z1 == 0 goto label3;

        $r21 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r22 = (android.media.MicrophoneInfo) $r21;

        $i6 = virtualinvoke r23.<android.media.AudioDeviceInfo: int getId()>();

        virtualinvoke $r22.<android.media.MicrophoneInfo: void setId(int)>($i6);

        z2 = 1;

        goto label4;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        if z2 != 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find port id for device with type:");

        $r4 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r5 = (android.media.MicrophoneInfo) $r4;

        $i2 = virtualinvoke $r5.<android.media.MicrophoneInfo: int getType()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" address:");

        $r8 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r9 = (android.media.MicrophoneInfo) $r8;

        $r10 = virtualinvoke $r9.<android.media.MicrophoneInfo: java.lang.String getAddress()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AudioManager", $r12);

        virtualinvoke r0.<java.util.ArrayList: java.lang.Object remove(int)>(i7);

     label5:
        i7 = i7 + -1;

        goto label1;

     label6:
        return;
    }

    public static void setRttEnabled(boolean)
    {
        boolean z0;
        android.media.IAudioService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

        z0 := @parameter0: boolean;

     label1:
        $r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r1.<android.media.IAudioService: void setRttEnabled(boolean)>(z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void unregisterAudioPolicyAsyncStatic(android.media.audiopolicy.AudioPolicy)
    {
        android.media.IAudioService r0;
        java.lang.IllegalArgumentException $r1;
        android.media.audiopolicy.IAudioPolicyCallback $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.audiopolicy.AudioPolicy r5;

        r5 := @parameter0: android.media.audiopolicy.AudioPolicy;

        if r5 == null goto label4;

        r0 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r2 = virtualinvoke r5.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        interfaceinvoke r0.<android.media.IAudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>($r2);

        virtualinvoke r5.<android.media.audiopolicy.AudioPolicy: void setRegistration(java.lang.String)>(null);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPolicy argument");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static int updateAudioPortCache(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList)
    {
        java.util.ArrayList r0, r1, r4, r5, $r9, $r10, $r11, $r12, r38;
        java.lang.Integer r2, $r8, $r13;
        int[] r3, r39;
        android.media.AudioPatch r6, $r18, $r21, $r24, $r28, $r31, $r35;
        android.media.AudioPortEventHandler $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        boolean $z3, z5, z6;
        java.lang.Object $r14, $r17, $r20, $r23, $r27, $r30, $r34;
        android.media.AudioPortConfig $r15, $r16, $r26, $r33, r40, r41;
        android.media.AudioPortConfig[] $r19, $r22, $r25, $r29, $r32, $r36, r43, r44;
        java.lang.Throwable $r37;
        java.util.Iterator r42;

        r38 := @parameter0: java.util.ArrayList;

        r0 := @parameter1: java.util.ArrayList;

        r1 := @parameter2: java.util.ArrayList;

        $r7 = <android.media.AudioManager: android.media.AudioPortEventHandler sAudioPortEventHandler>;

        virtualinvoke $r7.<android.media.AudioPortEventHandler: void init()>();

        r2 = <android.media.AudioManager: java.lang.Integer sAudioPortGeneration>;

        entermonitor r2;

     label01:
        $r8 = <android.media.AudioManager: java.lang.Integer sAudioPortGeneration>;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label37;

        r39 = newarray (int)[1];

        r3 = newarray (int)[1];

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

     label02:
        virtualinvoke r4.<java.util.ArrayList: void clear()>();

        i11 = staticinvoke <android.media.AudioSystem: int listAudioPorts(java.util.ArrayList,int[])>(r4, r3);

     label03:
        if i11 == 0 goto label06;

     label04:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "updateAudioPortCache: listAudioPorts failed");

        exitmonitor r2;

     label05:
        return i11;

     label06:
        virtualinvoke r5.<java.util.ArrayList: void clear()>();

        i12 = staticinvoke <android.media.AudioSystem: int listAudioPatches(java.util.ArrayList,int[])>(r5, r39);

     label07:
        if i12 == 0 goto label10;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "updateAudioPortCache: listAudioPatches failed");

        exitmonitor r2;

     label09:
        return i12;

     label10:
        $i2 = r39[0];

        $i1 = r3[0];

        if $i2 == $i1 goto label11;

        if r38 == null goto label02;

        if r0 == null goto label02;

     label11:
        $i4 = r39[0];

        $i3 = r3[0];

        if $i4 == $i3 goto label14;

     label12:
        exitmonitor r2;

     label13:
        return -1;

     label14:
        i13 = 0;

     label15:
        $i5 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        if i13 >= $i5 goto label23;

     label16:
        i14 = 0;

     label17:
        $r17 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r18 = (android.media.AudioPatch) $r17;

        $r19 = virtualinvoke $r18.<android.media.AudioPatch: android.media.AudioPortConfig[] sources()>();

        $i7 = lengthof $r19;

        if i14 >= $i7 goto label19;

        $r30 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r31 = (android.media.AudioPatch) $r30;

        $r32 = virtualinvoke $r31.<android.media.AudioPatch: android.media.AudioPortConfig[] sources()>();

        $r33 = $r32[i14];

        r40 = staticinvoke <android.media.AudioManager: android.media.AudioPortConfig updatePortConfig(android.media.AudioPortConfig,java.util.ArrayList)>($r33, r4);

        $r34 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r35 = (android.media.AudioPatch) $r34;

        $r36 = virtualinvoke $r35.<android.media.AudioPatch: android.media.AudioPortConfig[] sources()>();

        $r36[i14] = r40;

     label18:
        i14 = i14 + 1;

        goto label17;

     label19:
        i15 = 0;

     label20:
        $r20 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r21 = (android.media.AudioPatch) $r20;

        $r22 = virtualinvoke $r21.<android.media.AudioPatch: android.media.AudioPortConfig[] sinks()>();

        $i8 = lengthof $r22;

        if i15 >= $i8 goto label22;

        $r23 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r24 = (android.media.AudioPatch) $r23;

        $r25 = virtualinvoke $r24.<android.media.AudioPatch: android.media.AudioPortConfig[] sinks()>();

        $r26 = $r25[i15];

        r41 = staticinvoke <android.media.AudioManager: android.media.AudioPortConfig updatePortConfig(android.media.AudioPortConfig,java.util.ArrayList)>($r26, r4);

        $r27 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r28 = (android.media.AudioPatch) $r27;

        $r29 = virtualinvoke $r28.<android.media.AudioPatch: android.media.AudioPortConfig[] sinks()>();

        $r29[i15] = r41;

     label21:
        i15 = i15 + 1;

        goto label20;

     label22:
        i13 = i13 + 1;

        goto label15;

     label23:
        r42 = virtualinvoke r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label24:
        $z3 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label36;

        $r14 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.media.AudioPatch) $r14;

     label25:
        r43 = virtualinvoke r6.<android.media.AudioPatch: android.media.AudioPortConfig[] sources()>();

        i16 = lengthof r43;

     label26:
        i17 = 0;

     label27:
        z5 = 0;

        if i17 >= i16 goto label29;

        $r16 = r43[i17];

        if $r16 != null goto label28;

        z5 = 1;

        goto label29;

     label28:
        i17 = i17 + 1;

        goto label27;

     label29:
        r44 = virtualinvoke r6.<android.media.AudioPatch: android.media.AudioPortConfig[] sinks()>();

        i18 = lengthof r44;

     label30:
        i19 = 0;

     label31:
        z6 = z5;

        if i19 >= i18 goto label33;

        $r15 = r44[i19];

        if $r15 != null goto label32;

        z6 = 1;

        goto label33;

     label32:
        i19 = i19 + 1;

        goto label31;

     label33:
        if z6 == 0 goto label35;

     label34:
        interfaceinvoke r42.<java.util.Iterator: void remove()>();

     label35:
        goto label24;

     label36:
        $r12 = <android.media.AudioManager: java.util.ArrayList sAudioPortsCached>;

        <android.media.AudioManager: java.util.ArrayList sPreviousAudioPortsCached> = $r12;

        <android.media.AudioManager: java.util.ArrayList sAudioPortsCached> = r4;

        <android.media.AudioManager: java.util.ArrayList sAudioPatchesCached> = r5;

        $i6 = r3[0];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        <android.media.AudioManager: java.lang.Integer sAudioPortGeneration> = $r13;

     label37:
        if r38 == null goto label39;

     label38:
        virtualinvoke r38.<java.util.ArrayList: void clear()>();

        $r11 = <android.media.AudioManager: java.util.ArrayList sAudioPortsCached>;

        virtualinvoke r38.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r11);

     label39:
        if r0 == null goto label41;

     label40:
        virtualinvoke r0.<java.util.ArrayList: void clear()>();

        $r10 = <android.media.AudioManager: java.util.ArrayList sAudioPatchesCached>;

        virtualinvoke r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

     label41:
        if r1 == null goto label43;

     label42:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        $r9 = <android.media.AudioManager: java.util.ArrayList sPreviousAudioPortsCached>;

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r9);

     label43:
        exitmonitor r2;

     label44:
        return 0;

     label45:
        $r37 := @caughtexception;

     label46:
        exitmonitor r2;

     label47:
        throw $r37;

        catch java.lang.Throwable from label01 to label02 with label45;
        catch java.lang.Throwable from label02 to label03 with label45;
        catch java.lang.Throwable from label04 to label05 with label45;
        catch java.lang.Throwable from label06 to label07 with label45;
        catch java.lang.Throwable from label08 to label09 with label45;
        catch java.lang.Throwable from label12 to label13 with label45;
        catch java.lang.Throwable from label15 to label16 with label45;
        catch java.lang.Throwable from label17 to label18 with label45;
        catch java.lang.Throwable from label20 to label21 with label45;
        catch java.lang.Throwable from label23 to label24 with label45;
        catch java.lang.Throwable from label24 to label25 with label45;
        catch java.lang.Throwable from label25 to label26 with label45;
        catch java.lang.Throwable from label29 to label30 with label45;
        catch java.lang.Throwable from label34 to label35 with label45;
        catch java.lang.Throwable from label36 to label37 with label45;
        catch java.lang.Throwable from label38 to label39 with label45;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.lang.Throwable from label42 to label43 with label45;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch java.lang.Throwable from label46 to label47 with label45;
    }

    static android.media.AudioPortConfig updatePortConfig(android.media.AudioPortConfig, java.util.ArrayList)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11;
        android.media.AudioPortConfig $r0, r13;
        android.media.AudioGain $r1;
        int[] $r2;
        java.lang.StringBuilder $r3;
        android.media.AudioHandle $r5, $r10, $r11;
        java.lang.String $r7;
        java.lang.Object $r8, $r12;
        android.media.AudioPort $r9, r15, r16;
        boolean $z0;
        java.util.ArrayList r14;
        android.media.AudioGainConfig r18, r19;

        r13 := @parameter0: android.media.AudioPortConfig;

        r14 := @parameter1: java.util.ArrayList;

        r15 = virtualinvoke r13.<android.media.AudioPortConfig: android.media.AudioPort port()>();

        i11 = 0;

     label1:
        r16 = r15;

        $i0 = virtualinvoke r14.<java.util.ArrayList: int size()>();

        if i11 >= $i0 goto label3;

        $r8 = virtualinvoke r14.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        $r9 = (android.media.AudioPort) $r8;

        $r10 = virtualinvoke $r9.<android.media.AudioPort: android.media.AudioHandle handle()>();

        $r11 = virtualinvoke r15.<android.media.AudioPort: android.media.AudioHandle handle()>();

        $z0 = virtualinvoke $r10.<android.media.AudioHandle: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke r14.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        r16 = (android.media.AudioPort) $r12;

        goto label3;

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        $i1 = virtualinvoke r14.<java.util.ArrayList: int size()>();

        if i11 != $i1 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updatePortConfig port not found for handle: ");

        $r5 = virtualinvoke r16.<android.media.AudioPort: android.media.AudioHandle handle()>();

        $i9 = virtualinvoke $r5.<android.media.AudioHandle: int id()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", $r7);

        return null;

     label4:
        r18 = virtualinvoke r13.<android.media.AudioPortConfig: android.media.AudioGainConfig gain()>();

        r19 = r18;

        if r18 == null goto label5;

        $i5 = virtualinvoke r18.<android.media.AudioGainConfig: int index()>();

        $r1 = virtualinvoke r16.<android.media.AudioPort: android.media.AudioGain gain(int)>($i5);

        $i6 = virtualinvoke r18.<android.media.AudioGainConfig: int mode()>();

        $i7 = virtualinvoke r18.<android.media.AudioGainConfig: int channelMask()>();

        $r2 = virtualinvoke r18.<android.media.AudioGainConfig: int[] values()>();

        $i8 = virtualinvoke r18.<android.media.AudioGainConfig: int rampDurationMs()>();

        r19 = virtualinvoke $r1.<android.media.AudioGain: android.media.AudioGainConfig buildConfig(int,int,int[],int)>($i6, $i7, $r2, $i8);

     label5:
        $i2 = virtualinvoke r13.<android.media.AudioPortConfig: int samplingRate()>();

        $i3 = virtualinvoke r13.<android.media.AudioPortConfig: int channelMask()>();

        $i4 = virtualinvoke r13.<android.media.AudioPortConfig: int format()>();

        $r0 = virtualinvoke r16.<android.media.AudioPort: android.media.AudioPortConfig buildConfig(int,int,int,android.media.AudioGainConfig)>($i2, $i3, $i4, r19);

        return $r0;
    }

    public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        $i0 = virtualinvoke r0.<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes)>(r1, null);

        return $i0;
    }

    public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, android.media.AudioAttributes)
    {
        android.media.AudioManager r0;
        android.media.AudioAttributes r1;
        android.media.IAudioService r2;
        int i0;
        android.media.IAudioFocusDispatcher $r3;
        java.lang.String $r4, $r6;
        android.content.Context $r5;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.media.AudioManager$OnAudioFocusChangeListener r9;

        r0 := @this: android.media.AudioManager;

        r9 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        r1 := @parameter1: android.media.AudioAttributes;

        virtualinvoke r0.<android.media.AudioManager: void unregisterAudioFocusRequest(android.media.AudioManager$OnAudioFocusChangeListener)>(r9);

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher>;

        $r4 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r9);

        $r5 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        i0 = interfaceinvoke r2.<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>($r3, $r4, r1, $r6);

     label2:
        return i0;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void abandonAudioFocusForCall()
    {
        android.media.AudioManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.IAudioService r5;

        r0 := @this: android.media.AudioManager;

        r5 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r5.<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>(null, "AudioFocus_For_Phone_Ring_And_Calls", null, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int abandonAudioFocusRequest(android.media.AudioFocusRequest)
    {
        android.media.AudioManager r0;
        android.media.AudioFocusRequest r1;
        java.lang.IllegalArgumentException $r2;
        android.media.AudioManager$OnAudioFocusChangeListener $r3;
        android.media.AudioAttributes $r4;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioFocusRequest;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.media.AudioFocusRequest: android.media.AudioManager$OnAudioFocusChangeListener getOnAudioFocusChangeListener()>();

        $r4 = virtualinvoke r1.<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()>();

        $i0 = virtualinvoke r0.<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes)>($r3, $r4);

        return $i0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFocusRequest");

        throw $r2;
    }

    public void addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor, android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener) throws java.lang.SecurityException
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener r1;
        java.lang.Object r2;
        int i0, $i1;
        java.util.ArrayList r3, $r6, $r7, $r8, r16;
        boolean $z0;
        android.media.AudioManager$StrategyPreferredDeviceDispatcherStub $r9, $r11, r18;
        android.media.IAudioService $r10;
        java.lang.Throwable $r12;
        android.os.RemoteException $r13;
        java.lang.RuntimeException $r14;
        java.util.concurrent.Executor r15;
        android.media.AudioManager$PrefDevListenerInfo r17;
        java.lang.IllegalArgumentException r20;

        r0 := @this: android.media.AudioManager;

        r15 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r15);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r2 = r0.<android.media.AudioManager: java.lang.Object mPrefDevListenerLock>;

        entermonitor r2;

     label01:
        $z0 = specialinvoke r0.<android.media.AudioManager: boolean hasPrefDevListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)>(r1);

        if $z0 != 0 goto label11;

        $r6 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        if $r6 != null goto label02;

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners> = r16;

     label02:
        $r7 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        r3 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        r17 = new android.media.AudioManager$PrefDevListenerInfo;

        specialinvoke r17.<android.media.AudioManager$PrefDevListenerInfo: void <init>(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener,java.util.concurrent.Executor)>(r1, r15);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

     label03:
        if i0 != 0 goto label09;

     label04:
        $r8 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        $i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label09;

        $r9 = r0.<android.media.AudioManager: android.media.AudioManager$StrategyPreferredDeviceDispatcherStub mPrefDevDispatcherStub>;

        if $r9 != null goto label05;

        r18 = new android.media.AudioManager$StrategyPreferredDeviceDispatcherStub;

        specialinvoke r18.<android.media.AudioManager$StrategyPreferredDeviceDispatcherStub: void <init>(android.media.AudioManager,android.media.AudioManager$1)>(r0, null);

        r0.<android.media.AudioManager: android.media.AudioManager$StrategyPreferredDeviceDispatcherStub mPrefDevDispatcherStub> = r18;

     label05:
        $r10 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $r11 = r0.<android.media.AudioManager: android.media.AudioManager$StrategyPreferredDeviceDispatcherStub mPrefDevDispatcherStub>;

        interfaceinvoke $r10.<android.media.IAudioService: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>($r11);

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

     label08:
        $r14 = virtualinvoke $r13.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r14;

     label09:
        exitmonitor r2;

     label10:
        return;

     label11:
        r20 = new java.lang.IllegalArgumentException;

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attempt to call addOnPreferredDeviceForStrategyChangedListener() on a previously registered listener");

        throw r20;

     label12:
        $r12 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void adjustStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.IAudioService r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r5 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r5.<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>(i0, i1, i2, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void adjustSuggestedStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.content.Context $r1;
        android.media.session.MediaSessionLegacyHelper $r2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r1);

        virtualinvoke $r2.<android.media.session.MediaSessionLegacyHelper: void sendAdjustVolumeBy(int,int,int)>(i1, i0, i2);

        return;
    }

    public void adjustVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.content.Context $r1;
        android.media.session.MediaSessionLegacyHelper $r2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r1);

        virtualinvoke $r2.<android.media.session.MediaSessionLegacyHelper: void sendAdjustVolumeBy(int,int,int)>(-2147483648, i0, i1);

        return;
    }

    public void avrcpSupportsAbsoluteVolume(java.lang.String, boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.media.AudioManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearAudioServerStateCallback()
    {
        android.media.AudioManager r0;
        java.lang.Object r1;
        android.media.AudioManager$AudioServerStateCallback $r2;
        android.media.IAudioServerStateDispatcher $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.media.IAudioService r7;

        r0 := @this: android.media.AudioManager;

        r1 = r0.<android.media.AudioManager: java.lang.Object mAudioServerStateCbLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.media.AudioManager: android.media.AudioManager$AudioServerStateCallback mAudioServerStateCb>;

        if $r2 == null goto label06;

        r7 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label02:
        $r3 = r0.<android.media.AudioManager: android.media.IAudioServerStateDispatcher mAudioServerStateDispatcher>;

        interfaceinvoke r7.<android.media.IAudioService: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>($r3);

     label03:
        goto label06;

     label04:
        $r5 := @caughtexception;

     label05:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label06:
        r0.<android.media.AudioManager: java.util.concurrent.Executor mAudioServerStateExec> = null;

        r0.<android.media.AudioManager: android.media.AudioManager$AudioServerStateCallback mAudioServerStateCb> = null;

        exitmonitor r1;

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void disableSafeMediaVolume()
    {
        android.media.AudioManager r0;
        android.media.IAudioService $r2;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.AudioManager;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $r3 = r0.<android.media.AudioManager: android.content.Context mApplicationContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.media.IAudioService: void disableSafeMediaVolume(java.lang.String)>($r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int dispatchAudioFocusChange(android.media.AudioFocusInfo, int, android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        android.media.audiopolicy.AudioPolicy r1;
        android.media.IAudioService r2;
        java.lang.NullPointerException $r3, $r4;
        android.media.audiopolicy.IAudioPolicyCallback $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.media.AudioFocusInfo r8;
        int i0, i1;

        r0 := @this: android.media.AudioManager;

        r8 := @parameter0: android.media.AudioFocusInfo;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.audiopolicy.AudioPolicy;

        if r8 == null goto label5;

        if r1 == null goto label4;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r5 = virtualinvoke r1.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i1 = interfaceinvoke r2.<android.media.IAudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>(r8, i0, $r5);

     label2:
        return i1;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Illegal null AudioPolicy");

        throw $r4;

     label5:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Illegal null AudioFocusInfo");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchMediaKeyEvent(android.view.KeyEvent)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        android.content.Context $r2;
        android.media.session.MediaSessionLegacyHelper $r3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r3 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r2);

        virtualinvoke $r3.<android.media.session.MediaSessionLegacyHelper: void sendMediaButtonEvent(android.view.KeyEvent,boolean)>(r1, 0);

        return;
    }

    public void forceVolumeControlStream(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IAudioService r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r4 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r4.<android.media.IAudioService: void forceVolumeControlStream(int,android.os.IBinder)>(i0, $r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int generateAudioSessionId()
    {
        android.media.AudioManager r0;
        int i0;

        r0 := @this: android.media.AudioManager;

        i0 = staticinvoke <android.media.AudioSystem: int newAudioSessionId()>();

        if i0 <= 0 goto label1;

        return i0;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", "Failure to generate a new audio session ID");

        return -1;
    }

    public java.util.List getActivePlaybackConfigurations()
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;
        java.util.List r4;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.media.IAudioService: java.util.List getActivePlaybackConfigurations()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getActiveRecordingConfigurations()
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;
        java.util.List r4;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.media.IAudioService: java.util.List getActiveRecordingConfigurations()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo)
    {
        android.media.AudioManager r0;
        android.media.AudioDeviceInfo r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        return 0L;
    }

    public int getAllowedCapturePolicy()
    {
        android.media.AudioManager r0;
        android.media.IAudioService $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        int i2;

        r0 := @this: android.media.AudioManager;

     label1:
        $r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        i2 = interfaceinvoke $r3.<android.media.IAudioService: int getAllowedCapturePolicy()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to query allowed capture policy: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", $r8);

        i2 = 1;

     label4:
        return i2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDeviceVolumeBehavior(int, java.lang.String)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        java.lang.String r1;
        android.media.AudioDeviceAttributes $r2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <android.media.AudioDeviceInfo: void enforceValidAudioDeviceTypeOut(int)>(i0);

        $r2 = new android.media.AudioDeviceAttributes;

        specialinvoke $r2.<android.media.AudioDeviceAttributes: void <init>(int,int,java.lang.String)>(2, i0, r1);

        $i1 = virtualinvoke r0.<android.media.AudioManager: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>($r2);

        return $i1;
    }

    public int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        int i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.AudioDeviceAttributes r5;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.AudioDeviceAttributes;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>(r5);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.AudioDeviceInfo[] getDevices(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.AudioDeviceInfo[] $r1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)>(i0);

        return $r1;
    }

    public java.util.List getDevicesForAttributes(android.media.AudioAttributes)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.AudioAttributes r5;
        java.util.List r6;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.AudioAttributes;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r6 = interfaceinvoke r1.<android.media.IAudioService: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDevicesForStream(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        if i0 == 4 goto label1;

        if i0 == 5 goto label1;

        if i0 == 8 goto label1;

        if i0 == 10 goto label1;

        return 0;

     label1:
        $i1 = staticinvoke <android.media.AudioSystem: int getDevicesForStream(int)>(i0);

        return $i1;
    }

    public int getFocusRampTimeMs(int, android.media.AudioAttributes)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int i0, i1;
        android.media.AudioAttributes r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r4 := @parameter1: android.media.AudioAttributes;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r1.<android.media.IAudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>(i0, r4);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getHwOffloadEncodingFormatsSupportedForA2DP()
    {
        android.media.AudioManager r0;
        java.util.ArrayList $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0, i2, i3;
        android.bluetooth.BluetoothCodecConfig $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10;
        java.util.Iterator r13;

        r0 := @this: android.media.AudioManager;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i2 = staticinvoke <android.media.AudioSystem: int getHwOffloadEncodingFormatsSupportedForA2DP(java.util.ArrayList)>($r2);

        if i2 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getHwOffloadEncodingFormatsSupportedForA2DP failed:");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", $r10);

        return $r3;

     label1:
        r13 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        i3 = staticinvoke <android.media.AudioSystem: int audioFormatToBluetoothSourceCodec(int)>($i0);

        if i3 == 1000000 goto label3;

        $r6 = new android.bluetooth.BluetoothCodecConfig;

        specialinvoke $r6.<android.bluetooth.BluetoothCodecConfig: void <init>(int)>(i3);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label3:
        goto label2;

     label4:
        return $r3;
    }

    public int getLastAudibleStreamVolume(int)
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int i0, i1;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r3.<android.media.IAudioService: int getLastAudibleStreamVolume(int)>(i0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getMaxAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo)
    {
        android.media.AudioManager r0;
        android.media.AudioDeviceInfo r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        return 0L;
    }

    public int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        int i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.AudioAttributes r5;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "attr must not be null");

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>(r5);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getMicrophones() throws java.io.IOException
    {
        android.media.AudioManager r0;
        int i0;
        java.util.ArrayList $r4;
        java.util.HashSet $r5;
        java.lang.Integer $r6, $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;

        r0 := @this: android.media.AudioManager;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = staticinvoke <android.media.AudioSystem: int getMicrophones(java.util.ArrayList)>($r4);

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18);

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

        if i0 == 0 goto label2;

        if i0 == -3 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMicrophones failed:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", $r11);

     label1:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AudioManager", "fallback on device info");

        specialinvoke r0.<android.media.AudioManager: void addMicrophonesFromAudioDeviceInfo(java.util.ArrayList,java.util.HashSet)>($r4, $r5);

        return $r4;

     label2:
        staticinvoke <android.media.AudioManager: void setPortIdForMicrophones(java.util.ArrayList)>($r4);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15);

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r7);

        specialinvoke r0.<android.media.AudioManager: void addMicrophonesFromAudioDeviceInfo(java.util.ArrayList,java.util.HashSet)>($r4, $r5);

        return $r4;
    }

    public int getMinVolumeIndexForAttributes(android.media.AudioAttributes)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        int i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.AudioAttributes r5;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "attr must not be null");

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>(r5);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMode()
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.NullPointerException $r5;
        android.media.IAudioService r6;

        r0 := @this: android.media.AudioManager;

        r6 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r6.<android.media.IAudioService: int getMode()>();

     label2:
        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i1 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        i1 = <android.os.Build$VERSION: int SDK_INT>;

     label6:
        i2 = i0;

        if i0 != 4 goto label7;

        i2 = i0;

        if i1 > 29 goto label7;

        i2 = 2;

     label7:
        return i2;

     label8:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.NullPointerException from label2 to label3 with label4;
        catch android.os.RemoteException from label2 to label3 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
    }

    public int getOutputLatency(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.media.AudioSystem: int getOutputLatency(int)>(i0);

        return $i1;
    }

    public java.lang.String getParameters(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, $r2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.media.AudioSystem: java.lang.String getParameters(java.lang.String)>(r1);

        return $r2;
    }

    public android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)
    {
        android.media.AudioManager r0;
        android.media.IAudioService $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.audiopolicy.AudioProductStrategy r5;
        android.media.AudioDeviceAttributes r6;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.audiopolicy.AudioProductStrategy;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $i0 = virtualinvoke r5.<android.media.audiopolicy.AudioProductStrategy: int getId()>();

        r6 = interfaceinvoke $r2.<android.media.IAudioService: android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(int)>($i0);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        android.media.AudioManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r8, $r11, $r14, r15, r16, r17;
        android.content.Context $r6, $r9, $r12;
        android.content.res.Resources $r7, $r10, $r13;
        int i0, i1;

        r0 := @this: android.media.AudioManager;

        r15 := @parameter0: java.lang.String;

        $r1 = "android.media.property.OUTPUT_SAMPLE_RATE";

        z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if z0 == 0 goto label2;

        i0 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputSamplingRate()>();

        r16 = null;

        if i0 <= 0 goto label1;

        r16 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

     label1:
        return r16;

     label2:
        $r2 = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z1 == 0 goto label4;

        i1 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputFrameCount()>();

        r17 = null;

        if i1 <= 0 goto label3;

        r17 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

     label3:
        return r17;

     label4:
        $r3 = "android.media.property.SUPPORT_MIC_NEAR_ULTRASOUND";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z2 == 0 goto label5;

        $r12 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        $z7 = virtualinvoke $r13.<android.content.res.Resources: boolean getBoolean(int)>(17891545);

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z7);

        return $r14;

     label5:
        $r4 = "android.media.property.SUPPORT_SPEAKER_NEAR_ULTRASOUND";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z3 == 0 goto label6;

        $r9 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $z6 = virtualinvoke $r10.<android.content.res.Resources: boolean getBoolean(int)>(17891547);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z6);

        return $r11;

     label6:
        $r5 = "android.media.property.SUPPORT_AUDIO_SOURCE_UNPROCESSED";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z4 == 0 goto label7;

        $r6 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $z5 = virtualinvoke $r7.<android.content.res.Resources: boolean getBoolean(int)>(17891540);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5);

        return $r8;

     label7:
        return null;
    }

    public java.util.Map getReportedSurroundFormats()
    {
        android.media.AudioManager r0;
        int i0;
        java.util.HashMap $r1, $r6;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        i0 = staticinvoke <android.media.AudioSystem: int getSurroundFormats(java.util.Map,boolean)>($r1, 1);

        if i0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getReportedSurroundFormats failed:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", $r5);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        return $r6;

     label1:
        return $r1;
    }

    public int getRingerMode()
    {
        android.media.AudioManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r3.<android.media.IAudioService: int getRingerModeExternal()>();

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getRingerModeInternal()
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.media.AudioManager;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        i0 = interfaceinvoke $r2.<android.media.IAudioService: int getRingerModeInternal()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.IRingtonePlayer getRingtonePlayer()
    {
        android.media.AudioManager r0;
        android.media.IAudioService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IRingtonePlayer r4;

        r0 := @this: android.media.AudioManager;

     label1:
        $r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        r4 = interfaceinvoke $r1.<android.media.IAudioService: android.media.IRingtonePlayer getRingtonePlayer()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getRouting(int)
    {
        android.media.AudioManager r0;
        int i0;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        return -1;
    }

    public int getStreamMaxVolume(int)
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int i0, i1;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r3.<android.media.IAudioService: int getStreamMaxVolume(int)>(i0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getStreamMinVolume(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.AudioManager: boolean isPublicStreamType(int)>(i0);

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<android.media.AudioManager: int getStreamMinVolumeInt(int)>(i0);

        return $i1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid stream type ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public int getStreamMinVolumeInt(int)
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int i0, i1;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r3.<android.media.IAudioService: int getStreamMinVolume(int)>(i0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getStreamVolume(int)
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int i0, i1;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r3.<android.media.IAudioService: int getStreamVolume(int)>(i0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public float getStreamVolumeDb(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2, $i3, $i4, $i5;
        float f0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r6, $r11;
        java.lang.IllegalArgumentException $r4, $r9, $r14;
        java.lang.String $r5, $r10, $r15;
        byte $b6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = staticinvoke <android.media.AudioManager: boolean isPublicStreamType(int)>(i0);

        if $z0 == 0 goto label4;

        $i3 = virtualinvoke r0.<android.media.AudioManager: int getStreamMaxVolume(int)>(i0);

        if i1 > $i3 goto label3;

        $i4 = virtualinvoke r0.<android.media.AudioManager: int getStreamMinVolume(int)>(i0);

        if i1 < $i4 goto label3;

        $z1 = staticinvoke <android.media.AudioDeviceInfo: boolean isValidAudioDeviceTypeOut(int)>(i2);

        if $z1 == 0 goto label2;

        $i5 = staticinvoke <android.media.AudioDeviceInfo: int convertDeviceTypeToInternalDevice(int)>(i2);

        f0 = staticinvoke <android.media.AudioSystem: float getStreamVolumeDB(int,int,int)>(i0, i1, $i5);

        $b6 = f0 cmpg -758.0F;

        if $b6 > 0 goto label1;

        return #-InfinityF;

     label1:
        return f0;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio output device type ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid stream volume index ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid stream type ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public int[] getSupportedSystemUsages()
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;
        int[] r4;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r4 = interfaceinvoke r3.<android.media.IAudioService: int[] getSupportedSystemUsages()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Map getSurroundFormats()
    {
        android.media.AudioManager r0;
        int i0;
        java.util.HashMap $r1, $r6;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        i0 = staticinvoke <android.media.AudioSystem: int getSurroundFormats(java.util.Map,boolean)>($r1, 0);

        if i0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getSurroundFormats failed:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", $r5);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        return $r6;

     label1:
        return $r1;
    }

    public int getUiSoundsStreamType()
    {
        android.media.AudioManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r3.<android.media.IAudioService: int getUiSoundsStreamType()>();

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getVibrateSetting(int)
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int i0, i1;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i1 = interfaceinvoke r3.<android.media.IAudioService: int getVibrateSetting(int)>(i0);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getVolumeIndexForAttributes(android.media.AudioAttributes)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        int i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.AudioAttributes r5;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "attr must not be null");

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r1.<android.media.IAudioService: int getVolumeIndexForAttributes(android.media.AudioAttributes)>(r5);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.bluetooth.BluetoothDevice r4;

        r0 := @this: android.media.AudioManager;

        r4 := @parameter0: android.bluetooth.BluetoothDevice;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasRegisteredDynamicPolicy()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean hasRegisteredDynamicPolicy()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAudioFocusExclusive()
    {
        android.media.AudioManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i0 = interfaceinvoke r3.<android.media.IAudioService: int getCurrentAudioFocus()>();

     label2:
        if i0 != 4 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public boolean isAudioServerRunning()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean isAudioServerRunning()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBluetoothA2dpOn()
    {
        android.media.AudioManager r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.AudioManager;

        $i0 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(128, "");

        if $i0 != 1 goto label1;

        return 1;

     label1:
        $i1 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(256, "");

        if $i1 != 1 goto label2;

        return 1;

     label2:
        $i2 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(512, "");

        if $i2 != 1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean isBluetoothScoAvailableOffCall()
    {
        android.media.AudioManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891383);

        return $z0;
    }

    public boolean isBluetoothScoOn()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean isBluetoothScoOn()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCallScreeningModeSupported()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean isCallScreeningModeSupported()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isHdmiSystemAudioSupported()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.media.AudioManager;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        z0 = interfaceinvoke $r2.<android.media.IAudioService: boolean isHdmiSystemAudioSupported()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMasterMute()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean isMasterMute()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMicrophoneMute()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean isMicrophoneMuted()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMusicActive()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, 0);

        return $z0;
    }

    public boolean isMusicActiveRemotely()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActiveRemotely(int,int)>(3, 0);

        return $z0;
    }

    public boolean isSilentMode()
    {
        android.media.AudioManager r0;
        int i0;
        boolean z1;

        r0 := @this: android.media.AudioManager;

        i0 = virtualinvoke r0.<android.media.AudioManager: int getRingerMode()>();

        z1 = 1;

        if i0 == 0 goto label2;

        if i0 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isSpeakerphoneOn()
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean isSpeakerphoneOn()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isStreamAffectedByMute(int)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.media.IAudioService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        z0 = interfaceinvoke $r2.<android.media.IAudioService: boolean isStreamAffectedByMute(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isStreamAffectedByRingerMode(int)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.media.IAudioService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        z0 = interfaceinvoke $r2.<android.media.IAudioService: boolean isStreamAffectedByRingerMode(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isStreamMute(int)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean isStreamMute(int)>(i0);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isVolumeFixed()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = r0.<android.media.AudioManager: boolean mUseFixedVolume>;

        return $z0;
    }

    public boolean isWiredHeadsetOn()
    {
        android.media.AudioManager r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.AudioManager;

        $i0 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(4, "");

        if $i0 != 0 goto label1;

        $i1 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(8, "");

        if $i1 != 0 goto label1;

        $i2 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(67108864, "");

        if $i2 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void loadSoundEffects()
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r3.<android.media.IAudioService: boolean loadSoundEffects()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyVolumeControllerVisible(android.media.IVolumeController, boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IVolumeController r4;

        r0 := @this: android.media.AudioManager;

        r4 := @parameter0: android.media.IVolumeController;

        z0 := @parameter1: boolean;

     label1:
        $r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r1.<android.media.IAudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void playSoundEffect(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        android.os.UserHandle $r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IAudioService r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        if i0 < 0 goto label6;

        if i0 < 10 goto label1;

        goto label6;

     label1:
        $r1 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $i1 = virtualinvoke $r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<android.media.AudioManager: boolean querySoundEffectsEnabled(int)>($i1);

        if $z0 != 0 goto label2;

        return;

     label2:
        r4 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        interfaceinvoke r4.<android.media.IAudioService: void playSoundEffect(int)>(i0);

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void playSoundEffect(int, float)
    {
        android.media.AudioManager r0;
        int i0;
        float f0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        if i0 < 0 goto label5;

        if i0 < 10 goto label1;

        goto label5;

     label1:
        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r3.<android.media.IAudioService: void playSoundEffectVolume(int,float)>(i0, f0);

     label3:
        return;

     label4:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void playSoundEffect(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        boolean $z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label6;

        if i0 < 10 goto label1;

        goto label6;

     label1:
        $z0 = specialinvoke r0.<android.media.AudioManager: boolean querySoundEffectsEnabled(int)>(i1);

        if $z0 != 0 goto label2;

        return;

     label2:
        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        interfaceinvoke r3.<android.media.IAudioService: void playSoundEffect(int)>(i0);

     label4:
        return;

     label5:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void preDispatchKeyEvent(android.view.KeyEvent, int)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        int i0, i1;
        long $l2, $l3, $l4;
        byte $b5;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        if i1 == 25 goto label1;

        if i1 == 24 goto label1;

        if i1 == 164 goto label1;

        $l2 = r0.<android.media.AudioManager: long mVolumeKeyUpTime>;

        $l3 = $l2 + 300L;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b5 = $l3 cmp $l4;

        if $b5 <= 0 goto label1;

        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(0, i0, 8);

     label1:
        return;
    }

    public void registerAudioDeviceCallback(android.media.AudioDeviceCallback, android.os.Handler)
    {
        android.media.AudioManager r0;
        android.os.Handler r1, $r13;
        android.util.ArrayMap r2, $r3, $r4, $r12;
        boolean $z0;
        int $i0;
        android.media.AudioManager$OnAmPortUpdateListener $r6, $r7, r10;
        java.lang.Throwable $r8;
        android.media.AudioDeviceCallback r9;
        android.media.AudioManager$NativeEventHandlerDelegate r11;

        r0 := @this: android.media.AudioManager;

        r9 := @parameter0: android.media.AudioDeviceCallback;

        r1 := @parameter1: android.os.Handler;

        r2 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        entermonitor r2;

        if r9 == null goto label4;

     label1:
        $r3 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r9);

        if $z0 != 0 goto label4;

        $r4 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        $i0 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label3;

        $r6 = r0.<android.media.AudioManager: android.media.AudioManager$OnAmPortUpdateListener mPortListener>;

        if $r6 != null goto label2;

        r10 = new android.media.AudioManager$OnAmPortUpdateListener;

        specialinvoke r10.<android.media.AudioManager$OnAmPortUpdateListener: void <init>(android.media.AudioManager,android.media.AudioManager$1)>(r0, null);

        r0.<android.media.AudioManager: android.media.AudioManager$OnAmPortUpdateListener mPortListener> = r10;

     label2:
        $r7 = r0.<android.media.AudioManager: android.media.AudioManager$OnAmPortUpdateListener mPortListener>;

        virtualinvoke r0.<android.media.AudioManager: void registerAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)>($r7);

     label3:
        r11 = new android.media.AudioManager$NativeEventHandlerDelegate;

        specialinvoke r11.<android.media.AudioManager$NativeEventHandlerDelegate: void <init>(android.media.AudioManager,android.media.AudioDeviceCallback,android.os.Handler)>(r0, r9, r1);

        $r12 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r11);

        $r13 = virtualinvoke r11.<android.media.AudioManager$NativeEventHandlerDelegate: android.os.Handler getHandler()>();

        specialinvoke r0.<android.media.AudioManager: void broadcastDeviceListChange_sync(android.os.Handler)>($r13);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void registerAudioFocusRequest(android.media.AudioFocusRequest)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$ServiceEventHandlerDelegate $r1;
        android.media.AudioManager$FocusRequestInfo $r2;
        android.media.AudioManager$OnAudioFocusChangeListener $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        android.media.AudioFocusRequest r6;
        android.os.Handler r7, r8;
        java.lang.String r10;

        r0 := @this: android.media.AudioManager;

        r6 := @parameter0: android.media.AudioFocusRequest;

        r7 = virtualinvoke r6.<android.media.AudioFocusRequest: android.os.Handler getOnAudioFocusChangeListenerHandler()>();

        if r7 != null goto label1;

        r8 = null;

        goto label2;

     label1:
        $r1 = new android.media.AudioManager$ServiceEventHandlerDelegate;

        specialinvoke $r1.<android.media.AudioManager$ServiceEventHandlerDelegate: void <init>(android.media.AudioManager,android.os.Handler)>(r0, r7);

        r8 = virtualinvoke $r1.<android.media.AudioManager$ServiceEventHandlerDelegate: android.os.Handler getHandler()>();

     label2:
        $r2 = new android.media.AudioManager$FocusRequestInfo;

        specialinvoke $r2.<android.media.AudioManager$FocusRequestInfo: void <init>(android.media.AudioFocusRequest,android.os.Handler)>(r6, r8);

        $r3 = virtualinvoke r6.<android.media.AudioFocusRequest: android.media.AudioManager$OnAudioFocusChangeListener getOnAudioFocusChangeListener()>();

        r10 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>($r3);

        $r4 = r0.<android.media.AudioManager: java.util.concurrent.ConcurrentHashMap mAudioFocusIdListenerMap>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r2);

        return;
    }

    public void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback, android.os.Handler)
    {
        android.media.AudioManager r0;
        android.os.Handler r1, $r8;
        java.lang.Object r2;
        int i0, i1;
        java.util.List r3, $r6, $r7, $r9;
        android.media.AudioManager$ServiceEventHandlerDelegate r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        android.media.IAudioService $r10;
        android.media.IPlaybackConfigDispatcher $r11;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        java.lang.Throwable $r14;
        android.media.AudioManager$AudioPlaybackCallback r15;
        java.util.ArrayList r16;
        android.media.AudioManager$AudioPlaybackCallbackInfo r17;

        r0 := @this: android.media.AudioManager;

        r15 := @parameter0: android.media.AudioManager$AudioPlaybackCallback;

        r1 := @parameter1: android.os.Handler;

        if r15 == null goto label15;

        r2 = r0.<android.media.AudioManager: java.lang.Object mPlaybackCallbackLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        if $r6 != null goto label02;

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList> = r16;

     label02:
        $r7 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $z0 = specialinvoke r0.<android.media.AudioManager: boolean hasPlaybackCallback_sync(android.media.AudioManager$AudioPlaybackCallback)>(r15);

        if $z0 != 0 goto label09;

        r3 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        r17 = new android.media.AudioManager$AudioPlaybackCallbackInfo;

        r4 = new android.media.AudioManager$ServiceEventHandlerDelegate;

        specialinvoke r4.<android.media.AudioManager$ServiceEventHandlerDelegate: void <init>(android.media.AudioManager,android.os.Handler)>(r0, r1);

        $r8 = virtualinvoke r4.<android.media.AudioManager$ServiceEventHandlerDelegate: android.os.Handler getHandler()>();

        specialinvoke r17.<android.media.AudioManager$AudioPlaybackCallbackInfo: void <init>(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)>(r15, $r8);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r17);

        $r9 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        i1 = interfaceinvoke $r9.<java.util.List: int size()>();

     label03:
        if i0 != 0 goto label08;

        if i1 <= 0 goto label08;

     label04:
        $r10 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $r11 = r0.<android.media.AudioManager: android.media.IPlaybackConfigDispatcher mPlayCb>;

        interfaceinvoke $r10.<android.media.IAudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>($r11);

     label05:
        goto label08;

     label06:
        $r12 := @caughtexception;

     label07:
        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

     label08:
        goto label10;

     label09:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "attempt to call registerAudioPlaybackCallback() on a previouslyregistered callback");

     label10:
        exitmonitor r2;

     label11:
        return;

     label12:
        $r14 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r14;

     label15:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPlaybackCallback argument");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public int registerAudioPolicy(android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        android.media.audiopolicy.AudioPolicy r1;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy;

        $i0 = staticinvoke <android.media.AudioManager: int registerAudioPolicyStatic(android.media.audiopolicy.AudioPolicy)>(r1);

        return $i0;
    }

    public void registerAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioPortUpdateListener r1;
        android.media.AudioPortEventHandler $r2, $r3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioPortUpdateListener;

        $r2 = <android.media.AudioManager: android.media.AudioPortEventHandler sAudioPortEventHandler>;

        virtualinvoke $r2.<android.media.AudioPortEventHandler: void init()>();

        $r3 = <android.media.AudioManager: android.media.AudioPortEventHandler sAudioPortEventHandler>;

        virtualinvoke $r3.<android.media.AudioPortEventHandler: void registerListener(android.media.AudioManager$OnAudioPortUpdateListener)>(r1);

        return;
    }

    public void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback, android.os.Handler)
    {
        android.media.AudioManager r0;
        android.os.Handler r1, $r8;
        java.lang.Object r2;
        int i0, i1;
        java.util.List r3, $r6, $r7, $r9;
        android.media.AudioManager$AudioRecordingCallbackInfo r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        android.media.IRecordingConfigDispatcher $r10;
        java.lang.Throwable $r11;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;
        android.media.AudioManager$AudioRecordingCallback r14;
        java.util.ArrayList r15;
        android.media.AudioManager$ServiceEventHandlerDelegate r16;
        android.media.IAudioService r17;

        r0 := @this: android.media.AudioManager;

        r14 := @parameter0: android.media.AudioManager$AudioRecordingCallback;

        r1 := @parameter1: android.os.Handler;

        if r14 == null goto label16;

        r2 = r0.<android.media.AudioManager: java.lang.Object mRecordCallbackLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        if $r6 != null goto label02;

        r15 = new java.util.ArrayList;

        specialinvoke r15.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioManager: java.util.List mRecordCallbackList> = r15;

     label02:
        $r7 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $z0 = specialinvoke r0.<android.media.AudioManager: boolean hasRecordCallback_sync(android.media.AudioManager$AudioRecordingCallback)>(r14);

        if $z0 != 0 goto label10;

        r3 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        r4 = new android.media.AudioManager$AudioRecordingCallbackInfo;

        r16 = new android.media.AudioManager$ServiceEventHandlerDelegate;

        specialinvoke r16.<android.media.AudioManager$ServiceEventHandlerDelegate: void <init>(android.media.AudioManager,android.os.Handler)>(r0, r1);

        $r8 = virtualinvoke r16.<android.media.AudioManager$ServiceEventHandlerDelegate: android.os.Handler getHandler()>();

        specialinvoke r4.<android.media.AudioManager$AudioRecordingCallbackInfo: void <init>(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)>(r14, $r8);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r9 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        i1 = interfaceinvoke $r9.<java.util.List: int size()>();

     label03:
        if i0 != 0 goto label09;

        if i1 <= 0 goto label09;

     label04:
        r17 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label05:
        $r10 = r0.<android.media.AudioManager: android.media.IRecordingConfigDispatcher mRecCb>;

        interfaceinvoke r17.<android.media.IAudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>($r10);

     label06:
        goto label09;

     label07:
        $r12 := @caughtexception;

     label08:
        $r13 = virtualinvoke $r12.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r13;

     label09:
        goto label11;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "attempt to call registerAudioRecordingCallback() on a previouslyregistered callback");

     label11:
        exitmonitor r2;

     label12:
        return;

     label13:
        $r11 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        throw $r11;

     label16:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioRecordingCallback argument");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void registerMediaButtonEventReceiver(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>(r1, null);

        return;
    }

    public void registerMediaButtonEventReceiver(android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.content.ComponentName r1;
        java.lang.String $r3, $r5;
        android.content.Context $r4, $r8;
        boolean $z0;
        android.content.Intent $r6;
        android.app.PendingIntent $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        return;

     label1:
        $r3 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r4 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", "registerMediaButtonEventReceiver() error: receiver and context package names don\'t match");

        return;

     label2:
        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_BUTTON");

        virtualinvoke $r6.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r8 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r9 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r8, 0, $r6, 0);

        virtualinvoke r0.<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>($r9, r1);

        return;
    }

    public void registerMediaButtonIntent(android.app.PendingIntent, android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;
        android.content.ComponentName r2;
        android.content.Context $r3, $r5;
        android.media.session.MediaSessionLegacyHelper $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: android.content.ComponentName;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", "Cannot call registerMediaButtonIntent() with a null parameter");

        return;

     label1:
        $r3 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r4 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        $r5 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        virtualinvoke $r4.<android.media.session.MediaSessionLegacyHelper: void addMediaButtonListener(android.app.PendingIntent,android.content.ComponentName,android.content.Context)>(r1, r2, $r5);

        return;
    }

    public void registerRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.AudioManager r0;
        android.media.RemoteControlClient r1;
        android.app.PendingIntent $r2;
        android.content.Context $r3;
        android.media.session.MediaSessionLegacyHelper $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteControlClient;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        if $r2 != null goto label1;

        goto label2;

     label1:
        $r3 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r4 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r1.<android.media.RemoteControlClient: void registerWithSession(android.media.session.MediaSessionLegacyHelper)>($r4);

        return;

     label2:
        return;
    }

    public boolean registerRemoteController(android.media.RemoteController)
    {
        android.media.AudioManager r0;
        android.media.RemoteController r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteController;

        if r1 != null goto label1;

        return 0;

     label1:
        virtualinvoke r1.<android.media.RemoteController: void startListeningToSessions()>();

        return 1;
    }

    public void registerVolumeGroupCallback(java.util.concurrent.Executor, android.media.AudioManager$VolumeGroupCallback)
    {
        android.media.AudioManager r0;
        java.util.concurrent.Executor r1;
        android.media.AudioManager$VolumeGroupCallback r2;
        android.media.audiopolicy.AudioVolumeGroupChangeHandler $r5, $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.AudioManager$VolumeGroupCallback;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "executor must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "volume group change cb must not be null");

        $r5 = <android.media.AudioManager: android.media.audiopolicy.AudioVolumeGroupChangeHandler sAudioAudioVolumeGroupChangedHandler>;

        virtualinvoke $r5.<android.media.audiopolicy.AudioVolumeGroupChangeHandler: void init()>();

        $r6 = <android.media.AudioManager: android.media.audiopolicy.AudioVolumeGroupChangeHandler sAudioAudioVolumeGroupChangedHandler>;

        virtualinvoke $r6.<android.media.audiopolicy.AudioVolumeGroupChangeHandler: void registerListener(android.media.AudioManager$VolumeGroupCallback)>(r2);

        return;
    }

    public void reloadAudioSettings()
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r3.<android.media.IAudioService: void reloadAudioSettings()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeOnPreferredDeviceForStrategyChangedListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)
    {
        android.media.AudioManager r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        java.util.ArrayList $r3;
        android.media.IAudioService $r4;
        android.media.AudioManager$StrategyPreferredDeviceDispatcherStub $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.lang.Throwable $r8, $r9;
        android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener r10;
        java.lang.IllegalArgumentException r13;

        r0 := @this: android.media.AudioManager;

        r10 := @parameter0: android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r10);

        r1 = r0.<android.media.AudioManager: java.lang.Object mPrefDevListenerLock>;

        entermonitor r1;

     label01:
        $z0 = specialinvoke r0.<android.media.AudioManager: boolean removePrefDevListener(android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)>(r10);

        if $z0 == 0 goto label13;

        $r3 = r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label02:
        if i0 != 0 goto label11;

     label03:
        $r4 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $r5 = r0.<android.media.AudioManager: android.media.AudioManager$StrategyPreferredDeviceDispatcherStub mPrefDevDispatcherStub>;

        interfaceinvoke $r4.<android.media.IAudioService: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>($r5);

     label04:
        r0.<android.media.AudioManager: android.media.AudioManager$StrategyPreferredDeviceDispatcherStub mPrefDevDispatcherStub> = null;

        r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners> = null;

     label05:
        goto label11;

     label06:
        $r9 := @caughtexception;

        goto label09;

     label07:
        $r6 := @caughtexception;

     label08:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label09:
        r0.<android.media.AudioManager: android.media.AudioManager$StrategyPreferredDeviceDispatcherStub mPrefDevDispatcherStub> = null;

        r0.<android.media.AudioManager: java.util.ArrayList mPrefDevListeners> = null;

     label10:
        throw $r9;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attempt to call removeOnPreferredDeviceForStrategyChangedListener() on an unregistered listener");

        throw r13;

     label14:
        $r8 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean removePreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        android.media.IAudioService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.audiopolicy.AudioProductStrategy r5;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.audiopolicy.AudioProductStrategy;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $i1 = virtualinvoke r5.<android.media.audiopolicy.AudioProductStrategy: int getId()>();

        i0 = interfaceinvoke $r2.<android.media.IAudioService: int removePreferredDeviceForStrategy(int)>($i1);

     label2:
        if i0 != 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public int requestAudioFocus(android.media.AudioFocusRequest)
    {
        android.media.AudioManager r0;
        android.media.AudioFocusRequest r1;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioFocusRequest;

        $i0 = virtualinvoke r0.<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)>(r1, null);

        return $i0;
    }

    public int requestAudioFocus(android.media.AudioFocusRequest, android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        java.lang.String r2, r6;
        android.media.AudioAttributes r3;
        int i0, i1, $i2, i3, i4;
        android.os.IBinder r4;
        android.media.IAudioFocusDispatcher r5;
        java.lang.NullPointerException $r7, $r20;
        boolean $z0;
        android.content.Context $r8, $r11;
        android.content.pm.ApplicationInfo $r9;
        android.media.AudioManager$OnAudioFocusChangeListener $r10;
        java.util.HashMap $r12, $r13, $r15, r28;
        java.lang.IllegalArgumentException $r17;
        java.lang.Throwable $r18, $r19;
        android.os.RemoteException $r21;
        java.lang.RuntimeException $r22;
        android.media.AudioFocusRequest r23;
        android.media.audiopolicy.AudioPolicy r24;
        java.lang.Object r26, r30;
        android.media.audiopolicy.IAudioPolicyCallback r27;
        android.media.AudioManager$BlockingFocusResultReceiver r29;

        r0 := @this: android.media.AudioManager;

        r23 := @parameter0: android.media.AudioFocusRequest;

        r24 := @parameter1: android.media.audiopolicy.AudioPolicy;

        if r23 == null goto label29;

        $z0 = virtualinvoke r23.<android.media.AudioFocusRequest: boolean locksFocus()>();

        if $z0 == 0 goto label02;

        if r24 == null goto label01;

        goto label02;

     label01:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null audio policy when locking audio focus");

        throw $r17;

     label02:
        virtualinvoke r0.<android.media.AudioManager: void registerAudioFocusRequest(android.media.AudioFocusRequest)>(r23);

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label03:
        $r8 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i3 = $r9.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label04:
        goto label06;

     label05:
        $r20 := @caughtexception;

        i3 = <android.os.Build$VERSION: int SDK_INT>;

     label06:
        $r10 = virtualinvoke r23.<android.media.AudioFocusRequest: android.media.AudioManager$OnAudioFocusChangeListener getOnAudioFocusChangeListener()>();

        r2 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>($r10);

        r26 = r0.<android.media.AudioManager: java.lang.Object mFocusRequestsLock>;

        entermonitor r26;

     label07:
        r3 = virtualinvoke r23.<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()>();

        i0 = virtualinvoke r23.<android.media.AudioFocusRequest: int getFocusGain()>();

        r4 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        r5 = r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher>;

        $r11 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        r6 = virtualinvoke $r11.<android.content.Context: java.lang.String getOpPackageName()>();

        i1 = virtualinvoke r23.<android.media.AudioFocusRequest: int getFlags()>();

     label08:
        if r24 == null goto label11;

     label09:
        r27 = virtualinvoke r24.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

     label10:
        goto label12;

     label11:
        r27 = null;

     label12:
        i4 = interfaceinvoke r1.<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>(r3, i0, r4, r5, r2, r6, i1, r27, i3);

     label13:
        if i4 == 100 goto label16;

     label14:
        exitmonitor r26;

     label15:
        return i4;

     label16:
        $r12 = r0.<android.media.AudioManager: java.util.HashMap mFocusRequestsAwaitingResult>;

        if $r12 != null goto label17;

        r28 = new java.util.HashMap;

        specialinvoke r28.<java.util.HashMap: void <init>(int)>(1);

        r0.<android.media.AudioManager: java.util.HashMap mFocusRequestsAwaitingResult> = r28;

     label17:
        r29 = new android.media.AudioManager$BlockingFocusResultReceiver;

        specialinvoke r29.<android.media.AudioManager$BlockingFocusResultReceiver: void <init>(java.lang.String)>(r2);

        $r13 = r0.<android.media.AudioManager: java.util.HashMap mFocusRequestsAwaitingResult>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r29);

        exitmonitor r26;

     label18:
        virtualinvoke r29.<android.media.AudioManager$BlockingFocusResultReceiver: void waitForResult(long)>(200L);

        r30 = r0.<android.media.AudioManager: java.lang.Object mFocusRequestsLock>;

        entermonitor r30;

     label19:
        $r15 = r0.<android.media.AudioManager: java.util.HashMap mFocusRequestsAwaitingResult>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        exitmonitor r30;

     label20:
        $i2 = virtualinvoke r29.<android.media.AudioManager$BlockingFocusResultReceiver: int requestResult()>();

        return $i2;

     label21:
        $r19 := @caughtexception;

     label22:
        exitmonitor r30;

     label23:
        throw $r19;

     label24:
        $r18 := @caughtexception;

        goto label27;

     label25:
        $r21 := @caughtexception;

     label26:
        $r22 = virtualinvoke $r21.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r22;

     label27:
        exitmonitor r26;

     label28:
        throw $r18;

     label29:
        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Illegal null AudioFocusRequest");

        throw $r7;

        catch java.lang.NullPointerException from label03 to label04 with label05;
        catch android.os.RemoteException from label07 to label08 with label25;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch android.os.RemoteException from label09 to label10 with label25;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch android.os.RemoteException from label12 to label13 with label25;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label26 to label27 with label24;
        catch java.lang.Throwable from label27 to label28 with label24;
    }

    public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, int, int)
    {
        android.media.AudioManager r0;
        int i0, i3, i4;
        android.media.AudioAttributes$Builder r1, $r2;
        android.media.AudioAttributes $r3;
        java.lang.Throwable $r4;
        android.media.AudioManager$OnAudioFocusChangeListener r5;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        staticinvoke <android.media.PlayerBase: void deprecateStreamTypeForPlayback(int,java.lang.String,java.lang.String)>(i3, "AudioManager", "requestAudioFocus()");

     label1:
        r1 = new android.media.AudioAttributes$Builder;

        specialinvoke r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalLegacyStreamType(int)>(i3);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        i4 = virtualinvoke r0.<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int)>(r5, $r3, i0, 0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioManager", "Audio focus request denied due to ", $r4);

        i4 = 0;

     label4:
        return i4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, android.media.AudioAttributes, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioManager r0;
        android.media.AudioAttributes r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r5, $r8;
        java.lang.IllegalArgumentException $r7;
        android.media.AudioManager$OnAudioFocusChangeListener r9;

        r0 := @this: android.media.AudioManager;

        r9 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        r1 := @parameter1: android.media.AudioAttributes;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = i1 & 3;

        if i1 != $i2 goto label1;

        $i3 = i1 & 3;

        $i4 = virtualinvoke r0.<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,android.media.AudioAttributes,int,int,android.media.audiopolicy.AudioPolicy)>(r9, r1, i0, $i3, null);

        return $i4;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid flags 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, android.media.AudioAttributes, int, int, android.media.audiopolicy.AudioPolicy) throws java.lang.IllegalArgumentException
    {
        android.media.AudioManager r0;
        android.media.AudioAttributes r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.media.audiopolicy.AudioPolicy r2;
        java.lang.IllegalArgumentException $r3, $r4, $r10, $r16, $r17, $r18;
        boolean $z1, z2, z3, z4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r8, $r11;
        android.media.AudioFocusRequest$Builder $r12, $r13, $r14, r20, r21, r22;
        android.media.AudioFocusRequest $r15;
        android.media.AudioManager$OnAudioFocusChangeListener r19;

        r0 := @this: android.media.AudioManager;

        r19 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        r1 := @parameter1: android.media.AudioAttributes;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.media.audiopolicy.AudioPolicy;

        if r1 == null goto label15;

        $z1 = staticinvoke <android.media.AudioFocusRequest: boolean isValidFocusGain(int)>(i0);

        if $z1 == 0 goto label14;

        $i2 = i1 & 7;

        if i1 != $i2 goto label13;

        $i3 = i1 & 1;

        if $i3 != 1 goto label02;

        if r19 == null goto label01;

        goto label02;

     label01:
        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null focus listener when flagged as accepting delayed focus grant");

        throw $r18;

     label02:
        $i4 = i1 & 2;

        if $i4 != 2 goto label04;

        if r19 == null goto label03;

        goto label04;

     label03:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null focus listener when flagged as pausing instead of ducking");

        throw $r17;

     label04:
        $i5 = i1 & 4;

        if $i5 != 4 goto label06;

        if r2 == null goto label05;

        goto label06;

     label05:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null audio policy when locking audio focus");

        throw $r16;

     label06:
        $r12 = new android.media.AudioFocusRequest$Builder;

        specialinvoke $r12.<android.media.AudioFocusRequest$Builder: void <init>(int)>(i0);

        $r13 = virtualinvoke $r12.<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setOnAudioFocusChangeListenerInt(android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler)>(r19, null);

        r20 = virtualinvoke $r13.<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAudioAttributes(android.media.AudioAttributes)>(r1);

        $i6 = i1 & 1;

        if $i6 != 1 goto label07;

        z2 = 1;

        goto label08;

     label07:
        z2 = 0;

     label08:
        r21 = virtualinvoke r20.<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAcceptsDelayedFocusGain(boolean)>(z2);

        $i7 = i1 & 2;

        if $i7 != 2 goto label09;

        z3 = 1;

        goto label10;

     label09:
        z3 = 0;

     label10:
        r22 = virtualinvoke r21.<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setWillPauseWhenDucked(boolean)>(z3);

        $i8 = i1 & 4;

        if $i8 != 4 goto label11;

        z4 = 1;

        goto label12;

     label11:
        z4 = 0;

     label12:
        $r14 = virtualinvoke r22.<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setLocksFocus(boolean)>(z4);

        $r15 = virtualinvoke $r14.<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest build()>();

        $i9 = virtualinvoke r0.<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)>($r15, r2);

        return $i9;

     label13:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal flags 0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label14:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid duration hint");

        throw $r4;

     label15:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes argument");

        throw $r3;
    }

    public void requestAudioFocusForCall(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.media.AudioAttributes$Builder $r2, r9;
        android.media.AudioAttributes $r3;
        android.os.IBinder $r4;
        android.content.Context $r5;
        java.lang.String $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        r9 = new android.media.AudioAttributes$Builder;

        specialinvoke r9.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke r9.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalLegacyStreamType(int)>(i0);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $r4 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r5 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>($r3, i1, $r4, null, "AudioFocus_For_Phone_Ring_And_Calls", $r6, 4, null, 0);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo, long)
    {
        android.media.AudioManager r0;
        android.media.AudioDeviceInfo r1;
        long l0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        l0 := @parameter1: long;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        return 0;
    }

    public void setAllowedCapturePolicy(int)
    {
        android.media.AudioManager r0;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        int i1, i2;
        android.media.IAudioService r6;
        java.lang.StringBuilder r7;

        r0 := @this: android.media.AudioManager;

        i1 := @parameter0: int;

        r6 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        i2 = interfaceinvoke r6.<android.media.IAudioService: int setAllowedCapturePolicy(int)>(i1);

     label2:
        if i2 == 0 goto label5;

     label3:
        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not setAllowedCapturePolicy: ");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r3 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManager", $r3);

     label4:
        return;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void setAudioServerStateCallback(java.util.concurrent.Executor, android.media.AudioManager$AudioServerStateCallback)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$AudioServerStateCallback r1, $r6;
        java.lang.Object r2;
        android.media.IAudioService r3;
        java.lang.IllegalArgumentException $r4, $r5;
        android.media.IAudioServerStateDispatcher $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;
        java.util.concurrent.Executor r11;
        java.lang.IllegalStateException r13;

        r0 := @this: android.media.AudioManager;

        r11 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.media.AudioManager$AudioServerStateCallback;

        if r1 == null goto label12;

        if r11 == null goto label11;

        r2 = r0.<android.media.AudioManager: java.lang.Object mAudioServerStateCbLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<android.media.AudioManager: android.media.AudioManager$AudioServerStateCallback mAudioServerStateCb>;

        if $r6 != null goto label07;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label02:
        $r7 = r0.<android.media.AudioManager: android.media.IAudioServerStateDispatcher mAudioServerStateDispatcher>;

        interfaceinvoke r3.<android.media.IAudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>($r7);

     label03:
        r0.<android.media.AudioManager: java.util.concurrent.Executor mAudioServerStateExec> = r11;

        r0.<android.media.AudioManager: android.media.AudioManager$AudioServerStateCallback mAudioServerStateCb> = r1;

        exitmonitor r2;

     label04:
        return;

     label05:
        $r8 := @caughtexception;

     label06:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label07:
        r13 = new java.lang.IllegalStateException;

        specialinvoke r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setAudioServerStateCallback called with already registered callabck");

        throw r13;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r10;

     label11:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null Executor for the AudioServerStateCallback");

        throw $r5;

     label12:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioServerStateCallback");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice, int, int, boolean, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.bluetooth.BluetoothDevice r4;

        r0 := @this: android.media.AudioManager;

        r4 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>(r4, i0, i1, z0, i2);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBluetoothA2dpOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        return;
    }

    public void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice, int, boolean, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.bluetooth.BluetoothDevice r4;

        r0 := @this: android.media.AudioManager;

        r4 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>(r4, i0, z0, i1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBluetoothScoOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r3.<android.media.IAudioService: void setBluetoothScoOn(boolean)>(z0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDeviceVolumeBehavior(int, java.lang.String, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        java.lang.String r1;
        android.media.AudioDeviceAttributes $r2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r2 = new android.media.AudioDeviceAttributes;

        specialinvoke $r2.<android.media.AudioDeviceAttributes: void <init>(int,int,java.lang.String)>(2, i0, r1);

        virtualinvoke r0.<android.media.AudioManager: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int)>($r2, i1);

        return;
    }

    public void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes, int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.media.AudioDeviceAttributes r7;

        r0 := @this: android.media.AudioManager;

        r7 := @parameter0: android.media.AudioDeviceAttributes;

        i0 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        staticinvoke <android.media.AudioManager: void enforceValidVolumeBehavior(int)>(i0);

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mApplicationContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)>(r7, i0, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setFocusRequestResult(android.media.AudioFocusInfo, int, android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.audiopolicy.AudioPolicy r1;
        android.media.IAudioService r2;
        java.lang.IllegalArgumentException $r3, $r4;
        android.media.audiopolicy.IAudioPolicyCallback $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.media.AudioFocusInfo r8;

        r0 := @this: android.media.AudioManager;

        r8 := @parameter0: android.media.AudioFocusInfo;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.audiopolicy.AudioPolicy;

        if r8 == null goto label5;

        if r1 == null goto label4;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r5 = virtualinvoke r1.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        interfaceinvoke r2.<android.media.IAudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>(r8, i0, $r5);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPolicy");

        throw $r4;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFocusInfo");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setHdmiSystemAudioSupported(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        int i0;
        android.media.IAudioService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        i0 = interfaceinvoke $r2.<android.media.IAudioService: int setHdmiSystemAudioSupported(boolean)>(z0);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMasterMute(boolean, int)
    {
        android.media.AudioManager r0;
        boolean z0;
        int i0, $i1;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.IAudioService r5;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r5 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        interfaceinvoke r5.<android.media.IAudioService: void setMasterMute(boolean,int,java.lang.String,int)>(z0, i0, $r2, $i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMicrophoneMute(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.String $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.IAudioService r5;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r5 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        interfaceinvoke r5.<android.media.IAudioService: void setMicrophoneMute(boolean,java.lang.String,int)>(z0, $r2, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMicrophoneMuteFromSwitch(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r3.<android.media.IAudioService: void setMicrophoneMuteFromSwitch(boolean)>(z0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMode(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.content.Context $r1;
        android.os.IBinder $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.media.IAudioService r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r6 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r2 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r1 = r0.<android.media.AudioManager: android.content.Context mApplicationContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r6.<android.media.IAudioService: void setMode(int,android.os.IBinder,java.lang.String)>(i0, $r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMultiAudioFocusEnabled(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r2.<android.media.IAudioService: void setMultiAudioFocusEnabled(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setParameter(java.lang.String, java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, r2, $r8;
        java.lang.StringBuilder $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.media.AudioManager: void setParameters(java.lang.String)>($r8);

        return;
    }

    public void setParameters(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>(r1);

        return;
    }

    public boolean setPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy, android.media.AudioDeviceAttributes)
    {
        android.media.AudioManager r0;
        android.media.AudioDeviceAttributes r1;
        int i0, $i1;
        android.media.IAudioService $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.media.audiopolicy.AudioProductStrategy r7;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        r7 := @parameter0: android.media.audiopolicy.AudioProductStrategy;

        r1 := @parameter1: android.media.AudioDeviceAttributes;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

     label1:
        $r4 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $i1 = virtualinvoke r7.<android.media.audiopolicy.AudioProductStrategy: int getId()>();

        i0 = interfaceinvoke $r4.<android.media.IAudioService: int setPreferredDeviceForStrategy(int,android.media.AudioDeviceAttributes)>($i1, r1);

     label2:
        if i0 != 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public void setRingerMode(int)
    {
        android.media.AudioManager r0;
        int i0;
        boolean $z0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.IAudioService r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.AudioManager: boolean isValidRingerMode(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        r5 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r5.<android.media.IAudioService: void setRingerModeExternal(int,java.lang.String)>(i0, $r2);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setRingerModeInternal(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService $r2;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $r3 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.media.IAudioService: void setRingerModeInternal(int,java.lang.String)>(i0, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRouting(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public void setSpeakerphoneOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IAudioService r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r4 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r4.<android.media.IAudioService: void setSpeakerphoneOn(android.os.IBinder,boolean)>($r1, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamMute(int, boolean)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        byte b2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "setStreamMute is deprecated. adjustStreamVolume should be used instead.");

        if z0 == 0 goto label1;

        b2 = -100;

        goto label2;

     label1:
        b2 = 100;

     label2:
        if i0 != -2147483648 goto label3;

        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(b2, i0, 0);

        goto label4;

     label3:
        virtualinvoke r0.<android.media.AudioManager: void adjustStreamVolume(int,int,int)>(i0, b2, 0);

     label4:
        return;
    }

    public void setStreamSolo(int, boolean)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "setStreamSolo has been deprecated. Do not use.");

        return;
    }

    public void setStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.IAudioService r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r5 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r5.<android.media.IAudioService: void setStreamVolume(int,int,int,java.lang.String)>(i0, i1, i2, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSupportedSystemUsages(int[])
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int[] r5;

        r0 := @this: android.media.AudioManager;

        r5 := @parameter0: int[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "systemUsages must not be null");

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setSupportedSystemUsages(int[])>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setSurroundFormatEnabled(int, boolean)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        boolean z0, z1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = staticinvoke <android.media.AudioSystem: int setSurroundFormatEnabled(int,boolean)>(i0, z0);

        if $i1 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void setVibrateSetting(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r3.<android.media.IAudioService: void setVibrateSetting(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVolumeController(android.media.IVolumeController)
    {
        android.media.AudioManager r0;
        android.media.IAudioService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IVolumeController r4;

        r0 := @this: android.media.AudioManager;

        r4 := @parameter0: android.media.IVolumeController;

     label1:
        $r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r1.<android.media.IAudioService: void setVolumeController(android.media.IVolumeController)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVolumeIndexForAttributes(android.media.AudioAttributes, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.media.AudioAttributes r7;

        r0 := @this: android.media.AudioManager;

        r7 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r7, "attr must not be null");

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>(r7, i0, i1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVolumePolicy(android.media.VolumePolicy)
    {
        android.media.AudioManager r0;
        android.media.IAudioService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.VolumePolicy r4;

        r0 := @this: android.media.AudioManager;

        r4 := @parameter0: android.media.VolumePolicy;

     label1:
        $r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r1.<android.media.IAudioService: void setVolumePolicy(android.media.VolumePolicy)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWiredDeviceConnectionState(int, int, java.lang.String, java.lang.String)
    {
        android.media.AudioManager r0;
        int i0, i1;
        java.lang.String r1, $r4, r7;
        android.media.IAudioService r2;
        android.content.Context $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mApplicationContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r2.<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r7, r1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWiredHeadsetOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean shouldVibrate(int)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        z0 = interfaceinvoke r3.<android.media.IAudioService: boolean shouldVibrate(int)>(i0);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startBluetoothSco()
    {
        android.media.AudioManager r0;
        android.os.IBinder $r1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.media.IAudioService r6;

        r0 := @this: android.media.AudioManager;

        r6 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        interfaceinvoke r6.<android.media.IAudioService: void startBluetoothSco(android.os.IBinder,int)>($r1, $i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startBluetoothScoVirtualCall()
    {
        android.media.AudioManager r0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IAudioService r4;

        r0 := @this: android.media.AudioManager;

        r4 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r4.<android.media.IAudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>($r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopBluetoothSco()
    {
        android.media.AudioManager r0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IAudioService r4;

        r0 := @this: android.media.AudioManager;

        r4 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r1 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r4.<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)>($r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unloadSoundEffects()
    {
        android.media.AudioManager r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.media.IAudioService r3;

        r0 := @this: android.media.AudioManager;

        r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r3.<android.media.IAudioService: void unloadSoundEffects()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterAudioDeviceCallback(android.media.AudioDeviceCallback)
    {
        android.media.AudioManager r0;
        android.util.ArrayMap r1, $r2, $r3, $r5;
        boolean $z0;
        int $i0;
        android.media.AudioManager$OnAmPortUpdateListener $r6;
        java.lang.Throwable $r7;
        android.media.AudioDeviceCallback r8;

        r0 := @this: android.media.AudioManager;

        r8 := @parameter0: android.media.AudioDeviceCallback;

        r1 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r8);

        if $z0 == 0 goto label2;

        $r3 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        $r5 = r0.<android.media.AudioManager: android.util.ArrayMap mDeviceCallbacks>;

        $i0 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label2;

        $r6 = r0.<android.media.AudioManager: android.media.AudioManager$OnAmPortUpdateListener mPortListener>;

        virtualinvoke r0.<android.media.AudioManager: void unregisterAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)>($r6);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void unregisterAudioFocusRequest(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.String $r3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        $r2 = r0.<android.media.AudioManager: java.util.concurrent.ConcurrentHashMap mAudioFocusIdListenerMap>;

        $r3 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        return;
    }

    public void unregisterAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback)
    {
        android.media.AudioManager r0;
        java.lang.Object r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r2;
        java.util.List $r3, $r4, $r5;
        boolean $z0;
        android.media.IAudioService $r6;
        android.media.IPlaybackConfigDispatcher $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;
        android.media.AudioManager$AudioPlaybackCallback r11;

        r0 := @this: android.media.AudioManager;

        r11 := @parameter0: android.media.AudioManager$AudioPlaybackCallback;

        if r11 == null goto label16;

        r1 = r0.<android.media.AudioManager: java.lang.Object mPlaybackCallbackLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        if $r3 != null goto label03;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "attempt to call unregisterAudioPlaybackCallback() on a callback that was never registered");

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $z0 = specialinvoke r0.<android.media.AudioManager: boolean removePlaybackCallback_sync(android.media.AudioManager$AudioPlaybackCallback)>(r11);

        if $z0 == 0 goto label10;

        $r5 = r0.<android.media.AudioManager: java.util.List mPlaybackCallbackList>;

        i1 = interfaceinvoke $r5.<java.util.List: int size()>();

     label04:
        if i0 <= 0 goto label09;

        if i1 != 0 goto label09;

     label05:
        $r6 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $r7 = r0.<android.media.AudioManager: android.media.IPlaybackConfigDispatcher mPlayCb>;

        interfaceinvoke $r6.<android.media.IAudioService: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>($r7);

     label06:
        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label09:
        goto label11;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "attempt to call unregisterAudioPlaybackCallback() on a callback already unregistered or never registered");

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r10;

     label16:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPlaybackCallback argument");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.media.audiopolicy.IAudioPolicyCallback $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.media.audiopolicy.AudioPolicy r6;

        r0 := @this: android.media.AudioManager;

        r6 := @parameter0: android.media.audiopolicy.AudioPolicy;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "Illegal null AudioPolicy argument");

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: void invalidateCaptorsAndInjectors()>();

        $r3 = virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        interfaceinvoke r1.<android.media.IAudioService: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>($r3);

        virtualinvoke r6.<android.media.audiopolicy.AudioPolicy: void setRegistration(java.lang.String)>(null);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        android.media.audiopolicy.AudioPolicy r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy;

        staticinvoke <android.media.AudioManager: void unregisterAudioPolicyAsyncStatic(android.media.audiopolicy.AudioPolicy)>(r1);

        return;
    }

    public void unregisterAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioPortUpdateListener r1;
        android.media.AudioPortEventHandler $r2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioPortUpdateListener;

        $r2 = <android.media.AudioManager: android.media.AudioPortEventHandler sAudioPortEventHandler>;

        virtualinvoke $r2.<android.media.AudioPortEventHandler: void unregisterListener(android.media.AudioManager$OnAudioPortUpdateListener)>(r1);

        return;
    }

    public void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.AudioManager r0;
        java.lang.Object r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r2;
        java.util.List $r3, $r4, $r5;
        boolean $z0;
        android.media.IRecordingConfigDispatcher $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9;
        android.media.AudioManager$AudioRecordingCallback r10;
        android.media.IAudioService r11;

        r0 := @this: android.media.AudioManager;

        r10 := @parameter0: android.media.AudioManager$AudioRecordingCallback;

        if r10 == null goto label17;

        r1 = r0.<android.media.AudioManager: java.lang.Object mRecordCallbackLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        if $r3 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $z0 = specialinvoke r0.<android.media.AudioManager: boolean removeRecordCallback_sync(android.media.AudioManager$AudioRecordingCallback)>(r10);

        if $z0 == 0 goto label11;

        $r5 = r0.<android.media.AudioManager: java.util.List mRecordCallbackList>;

        i1 = interfaceinvoke $r5.<java.util.List: int size()>();

     label04:
        if i0 <= 0 goto label10;

        if i1 != 0 goto label10;

     label05:
        r11 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label06:
        $r6 = r0.<android.media.AudioManager: android.media.IRecordingConfigDispatcher mRecCb>;

        interfaceinvoke r11.<android.media.IAudioService: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>($r6);

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

     label09:
        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label10:
        goto label12;

     label11:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManager", "attempt to call unregisterAudioRecordingCallback() on a callback already unregistered or never registered");

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r9;

     label17:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioRecordingCallback argument");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void unregisterMediaButtonEventReceiver(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)>(r1);

        return;
    }

    public void unregisterMediaButtonEventReceiver(android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.content.ComponentName r1;
        android.content.Intent $r3;
        android.content.Context $r5;
        android.app.PendingIntent $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        return;

     label1:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_BUTTON");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r5 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r5, 0, $r3, 0);

        virtualinvoke r0.<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)>($r6);

        return;
    }

    public void unregisterMediaButtonIntent(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;
        android.content.Context $r2;
        android.media.session.MediaSessionLegacyHelper $r3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r3 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r2);

        virtualinvoke $r3.<android.media.session.MediaSessionLegacyHelper: void removeMediaButtonListener(android.app.PendingIntent)>(r1);

        return;
    }

    public void unregisterRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.AudioManager r0;
        android.media.RemoteControlClient r1;
        android.app.PendingIntent $r2;
        android.content.Context $r3;
        android.media.session.MediaSessionLegacyHelper $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteControlClient;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        if $r2 != null goto label1;

        goto label2;

     label1:
        $r3 = specialinvoke r0.<android.media.AudioManager: android.content.Context getContext()>();

        $r4 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r1.<android.media.RemoteControlClient: void unregisterWithSession(android.media.session.MediaSessionLegacyHelper)>($r4);

        return;

     label2:
        return;
    }

    public void unregisterRemoteController(android.media.RemoteController)
    {
        android.media.AudioManager r0;
        android.media.RemoteController r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteController;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<android.media.RemoteController: void stopListeningToSessions()>();

        return;
    }

    public void unregisterVolumeGroupCallback(android.media.AudioManager$VolumeGroupCallback)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$VolumeGroupCallback r1;
        android.media.audiopolicy.AudioVolumeGroupChangeHandler $r3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$VolumeGroupCallback;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "volume group change cb must not be null");

        $r3 = <android.media.AudioManager: android.media.audiopolicy.AudioVolumeGroupChangeHandler sAudioAudioVolumeGroupChangedHandler>;

        virtualinvoke $r3.<android.media.audiopolicy.AudioVolumeGroupChangeHandler: void unregisterListener(android.media.AudioManager$VolumeGroupCallback)>(r1);

        return;
    }
}
