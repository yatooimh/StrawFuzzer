public final class android.media.AudioPlaybackCaptureConfiguration$Builder extends java.lang.Object
{
    private static final java.lang.String ERROR_MESSAGE_MISMATCHED_RULES;
    private static final java.lang.String ERROR_MESSAGE_NON_AUDIO_PROJECTION;
    private static final java.lang.String ERROR_MESSAGE_START_ACTIVITY_FAILED;
    private static final int MATCH_TYPE_EXCLUSIVE;
    private static final int MATCH_TYPE_INCLUSIVE;
    private static final int MATCH_TYPE_UNSPECIFIED;
    private final android.media.audiopolicy.AudioMixingRule$Builder mAudioMixingRuleBuilder;
    private final android.media.projection.MediaProjection mProjection;
    private int mUidMatchType;
    private int mUsageMatchType;

    public void <init>(android.media.projection.MediaProjection)
    {
        android.media.AudioPlaybackCaptureConfiguration$Builder r0;
        android.media.projection.IMediaProjection $r2;
        boolean $z0;
        android.media.audiopolicy.AudioMixingRule$Builder $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.media.projection.MediaProjection r6;

        r0 := @this: android.media.AudioPlaybackCaptureConfiguration$Builder;

        r6 := @parameter0: android.media.projection.MediaProjection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUsageMatchType> = 0;

        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUidMatchType> = 0;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6);

     label1:
        $r2 = virtualinvoke r6.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection getProjection()>();

        $z0 = interfaceinvoke $r2.<android.media.projection.IMediaProjection: boolean canProjectAudio()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "MediaProjection can not project audio");

     label2:
        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.projection.MediaProjection mProjection> = r6;

        $r3 = new android.media.audiopolicy.AudioMixingRule$Builder;

        specialinvoke $r3.<android.media.audiopolicy.AudioMixingRule$Builder: void <init>()>();

        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.audiopolicy.AudioMixingRule$Builder mAudioMixingRuleBuilder> = $r3;

        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUid(int)
    {
        android.media.AudioPlaybackCaptureConfiguration$Builder r0;
        int i0, $i1;
        android.media.audiopolicy.AudioMixingRule$Builder $r1;
        java.lang.Integer $r2;
        boolean z0;

        r0 := @this: android.media.AudioPlaybackCaptureConfiguration$Builder;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUidMatchType>;

        if $i1 == 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Inclusive and exclusive usage rules cannot be combined");

        $r1 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.audiopolicy.AudioMixingRule$Builder mAudioMixingRuleBuilder>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder addMixRule(int,java.lang.Object)>(4, $r2);

        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUidMatchType> = 1;

        return r0;
    }

    public android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUsage(int)
    {
        android.media.AudioPlaybackCaptureConfiguration$Builder r0;
        int i0, $i1;
        android.media.AudioAttributes$Builder $r1, $r3;
        android.media.audiopolicy.AudioMixingRule$Builder $r2;
        android.media.AudioAttributes $r4;
        boolean z0;

        r0 := @this: android.media.AudioPlaybackCaptureConfiguration$Builder;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUsageMatchType>;

        if $i1 == 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Inclusive and exclusive usage rules cannot be combined");

        $r2 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.audiopolicy.AudioMixingRule$Builder mAudioMixingRuleBuilder>;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r3 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(i0);

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        virtualinvoke $r2.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder addRule(android.media.AudioAttributes,int)>($r4, 1);

        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUsageMatchType> = 1;

        return r0;
    }

    public android.media.AudioPlaybackCaptureConfiguration build()
    {
        android.media.AudioPlaybackCaptureConfiguration$Builder r0;
        android.media.AudioPlaybackCaptureConfiguration $r1;
        android.media.audiopolicy.AudioMixingRule$Builder $r2;
        android.media.audiopolicy.AudioMixingRule $r3;
        android.media.projection.MediaProjection $r4;

        r0 := @this: android.media.AudioPlaybackCaptureConfiguration$Builder;

        $r1 = new android.media.AudioPlaybackCaptureConfiguration;

        $r2 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.audiopolicy.AudioMixingRule$Builder mAudioMixingRuleBuilder>;

        $r3 = virtualinvoke $r2.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule build()>();

        $r4 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.projection.MediaProjection mProjection>;

        specialinvoke $r1.<android.media.AudioPlaybackCaptureConfiguration: void <init>(android.media.audiopolicy.AudioMixingRule,android.media.projection.MediaProjection,android.media.AudioPlaybackCaptureConfiguration$1)>($r3, $r4, null);

        return $r1;
    }

    public android.media.AudioPlaybackCaptureConfiguration$Builder excludeUid(int)
    {
        android.media.AudioPlaybackCaptureConfiguration$Builder r0;
        int i0, i1;
        android.media.audiopolicy.AudioMixingRule$Builder $r1;
        java.lang.Integer $r2;
        boolean z0;

        r0 := @this: android.media.AudioPlaybackCaptureConfiguration$Builder;

        i0 := @parameter0: int;

        i1 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUidMatchType>;

        z0 = 1;

        if i1 == 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Inclusive and exclusive usage rules cannot be combined");

        $r1 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.audiopolicy.AudioMixingRule$Builder mAudioMixingRuleBuilder>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder excludeMixRule(int,java.lang.Object)>(4, $r2);

        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUidMatchType> = 2;

        return r0;
    }

    public android.media.AudioPlaybackCaptureConfiguration$Builder excludeUsage(int)
    {
        android.media.AudioPlaybackCaptureConfiguration$Builder r0;
        int i0, $i1;
        android.media.AudioAttributes$Builder $r1, $r3;
        android.media.audiopolicy.AudioMixingRule$Builder $r2;
        android.media.AudioAttributes $r4;
        boolean z0;

        r0 := @this: android.media.AudioPlaybackCaptureConfiguration$Builder;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUsageMatchType>;

        if $i1 == 1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Inclusive and exclusive usage rules cannot be combined");

        $r2 = r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.audiopolicy.AudioMixingRule$Builder mAudioMixingRuleBuilder>;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r3 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(i0);

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        virtualinvoke $r2.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder excludeRule(android.media.AudioAttributes,int)>($r4, 1);

        r0.<android.media.AudioPlaybackCaptureConfiguration$Builder: int mUsageMatchType> = 2;

        return r0;
    }

    public static void <clinit>()
    {
        <android.media.AudioPlaybackCaptureConfiguration$Builder: int MATCH_TYPE_UNSPECIFIED> = 0;

        <android.media.AudioPlaybackCaptureConfiguration$Builder: int MATCH_TYPE_INCLUSIVE> = 1;

        <android.media.AudioPlaybackCaptureConfiguration$Builder: int MATCH_TYPE_EXCLUSIVE> = 2;

        <android.media.AudioPlaybackCaptureConfiguration$Builder: java.lang.String ERROR_MESSAGE_START_ACTIVITY_FAILED> = "startActivityForResult failed";

        <android.media.AudioPlaybackCaptureConfiguration$Builder: java.lang.String ERROR_MESSAGE_NON_AUDIO_PROJECTION> = "MediaProjection can not project audio";

        <android.media.AudioPlaybackCaptureConfiguration$Builder: java.lang.String ERROR_MESSAGE_MISMATCHED_RULES> = "Inclusive and exclusive usage rules cannot be combined";

        return;
    }
}
