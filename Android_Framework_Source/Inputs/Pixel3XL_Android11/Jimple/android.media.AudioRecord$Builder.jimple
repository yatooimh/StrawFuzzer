public class android.media.AudioRecord$Builder extends java.lang.Object
{
    private static final java.lang.String ERROR_MESSAGE_SOURCE_MISMATCH;
    private static final int PRIVACY_SENSITIVE_DEFAULT;
    private static final int PRIVACY_SENSITIVE_DISABLED;
    private static final int PRIVACY_SENSITIVE_ENABLED;
    private android.media.AudioAttributes mAttributes;
    private android.media.AudioPlaybackCaptureConfiguration mAudioPlaybackCaptureConfiguration;
    private int mBufferSizeInBytes;
    private android.media.AudioFormat mFormat;
    private int mPrivacySensitive;
    private int mSessionId;

    public void <init>()
    {
        android.media.AudioRecord$Builder r0;

        r0 := @this: android.media.AudioRecord$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord$Builder: int mSessionId> = 0;

        r0.<android.media.AudioRecord$Builder: int mPrivacySensitive> = -1;

        return;
    }

    private android.media.AudioRecord buildAudioPlaybackCaptureRecord()
    {
        android.media.AudioRecord$Builder r0;
        android.media.AudioFormat $r1;
        android.media.AudioPlaybackCaptureConfiguration $r2, $r3;
        android.media.audiopolicy.AudioPolicy$Builder $r4, $r5, $r6;
        int $i0;
        java.lang.UnsupportedOperationException $r7, $r8;
        android.media.audiopolicy.AudioMix r9;
        android.media.projection.MediaProjection r10;
        android.media.audiopolicy.AudioPolicy r11;
        android.media.AudioRecord r12;

        r0 := @this: android.media.AudioRecord$Builder;

        $r2 = r0.<android.media.AudioRecord$Builder: android.media.AudioPlaybackCaptureConfiguration mAudioPlaybackCaptureConfiguration>;

        $r1 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        r9 = virtualinvoke $r2.<android.media.AudioPlaybackCaptureConfiguration: android.media.audiopolicy.AudioMix createAudioMix(android.media.AudioFormat)>($r1);

        $r3 = r0.<android.media.AudioRecord$Builder: android.media.AudioPlaybackCaptureConfiguration mAudioPlaybackCaptureConfiguration>;

        r10 = virtualinvoke $r3.<android.media.AudioPlaybackCaptureConfiguration: android.media.projection.MediaProjection getMediaProjection()>();

        $r4 = new android.media.audiopolicy.AudioPolicy$Builder;

        specialinvoke $r4.<android.media.audiopolicy.AudioPolicy$Builder: void <init>(android.content.Context)>(null);

        $r5 = virtualinvoke $r4.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$Builder setMediaProjection(android.media.projection.MediaProjection)>(r10);

        $r6 = virtualinvoke $r5.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$Builder addMix(android.media.audiopolicy.AudioMix)>(r9);

        r11 = virtualinvoke $r6.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy build()>();

        $i0 = staticinvoke <android.media.AudioManager: int registerAudioPolicyStatic(android.media.audiopolicy.AudioPolicy)>(r11);

        if $i0 != 0 goto label2;

        r12 = virtualinvoke r11.<android.media.audiopolicy.AudioPolicy: android.media.AudioRecord createAudioRecordSink(android.media.audiopolicy.AudioMix)>(r9);

        if r12 == null goto label1;

        staticinvoke <android.media.AudioRecord: void access$000(android.media.AudioRecord,android.media.audiopolicy.AudioPolicy)>(r12, r11);

        return r12;

     label1:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot create AudioRecord");

        throw $r8;

     label2:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Error: could not register audio policy");

        throw $r7;
    }

    public android.media.AudioRecord build() throws java.lang.UnsupportedOperationException
    {
        android.media.AudioRecord$Builder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.media.AudioPlaybackCaptureConfiguration $r1;
        android.media.AudioFormat $r2, $r3, $r5, $r6, $r17, $r19, $r21, $r23, $r25, $r29, r34;
        android.media.AudioAttributes $r4, $r7, $r11, $r13, $r16, r35;
        android.media.AudioAttributes$Builder $r12, $r15, r36, r47, r48;
        android.media.AudioFormat$Builder $r20, $r24, $r27, $r28, r44, r45, r46;
        android.media.AudioRecord $r30, r51;
        java.lang.Throwable $r31;
        java.lang.String $r33, $r40;
        boolean z0;
        java.lang.StringBuilder r49;
        java.lang.UnsupportedOperationException r50, r52, r53;
        java.lang.IllegalArgumentException r54;

        r0 := @this: android.media.AudioRecord$Builder;

        $r1 = r0.<android.media.AudioRecord$Builder: android.media.AudioPlaybackCaptureConfiguration mAudioPlaybackCaptureConfiguration>;

        if $r1 == null goto label01;

        $r30 = specialinvoke r0.<android.media.AudioRecord$Builder: android.media.AudioRecord buildAudioPlaybackCaptureRecord()>();

        return $r30;

     label01:
        r34 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        if r34 != null goto label02;

        r44 = new android.media.AudioFormat$Builder;

        specialinvoke r44.<android.media.AudioFormat$Builder: void <init>()>();

        $r27 = virtualinvoke r44.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(2);

        $r28 = virtualinvoke $r27.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(16);

        $r29 = virtualinvoke $r28.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat> = $r29;

        goto label04;

     label02:
        $i1 = virtualinvoke r34.<android.media.AudioFormat: int getEncoding()>();

        if $i1 != 0 goto label03;

        r45 = new android.media.AudioFormat$Builder;

        $r23 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        specialinvoke r45.<android.media.AudioFormat$Builder: void <init>(android.media.AudioFormat)>($r23);

        $r24 = virtualinvoke r45.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(2);

        $r25 = virtualinvoke $r24.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat> = $r25;

     label03:
        $r2 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        $i2 = virtualinvoke $r2.<android.media.AudioFormat: int getChannelMask()>();

        if $i2 != 0 goto label04;

        $r17 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        $i13 = virtualinvoke $r17.<android.media.AudioFormat: int getChannelIndexMask()>();

        if $i13 != 0 goto label04;

        r46 = new android.media.AudioFormat$Builder;

        $r19 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        specialinvoke r46.<android.media.AudioFormat$Builder: void <init>(android.media.AudioFormat)>($r19);

        $r20 = virtualinvoke r46.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(16);

        $r21 = virtualinvoke $r20.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat> = $r21;

     label04:
        r35 = r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes>;

        z0 = 0;

        if r35 != null goto label05;

        r47 = new android.media.AudioAttributes$Builder;

        specialinvoke r47.<android.media.AudioAttributes$Builder: void <init>()>();

        $r15 = virtualinvoke r47.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>(0);

        $r16 = virtualinvoke $r15.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes> = $r16;

     label05:
        $i3 = r0.<android.media.AudioRecord$Builder: int mPrivacySensitive>;

        if $i3 == -1 goto label08;

        $r7 = r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes>;

        i0 = virtualinvoke $r7.<android.media.AudioAttributes: int getCapturePreset()>();

        if i0 == 8 goto label07;

        if i0 == 1998 goto label07;

        if i0 == 3 goto label07;

        if i0 == 2 goto label07;

        if i0 == 4 goto label07;

        if i0 == 1997 goto label07;

        r48 = new android.media.AudioAttributes$Builder;

        $r11 = r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes>;

        specialinvoke r48.<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>($r11);

        r36 = virtualinvoke r48.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>(i0);

        $i12 = r0.<android.media.AudioRecord$Builder: int mPrivacySensitive>;

        if $i12 != 1 goto label06;

        z0 = 1;

     label06:
        $r12 = virtualinvoke r36.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setPrivacySensitive(boolean)>(z0);

        $r13 = virtualinvoke $r12.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes> = $r13;

        goto label08;

     label07:
        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot request private capture with source: ");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r50 = new java.lang.UnsupportedOperationException;

        $r40 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r50.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r40);

        throw r50;

     label08:
        $i4 = r0.<android.media.AudioRecord$Builder: int mBufferSizeInBytes>;

        if $i4 != 0 goto label09;

        $r5 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        $i8 = virtualinvoke $r5.<android.media.AudioFormat: int getChannelCount()>();

        $r6 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        $i9 = virtualinvoke $r6.<android.media.AudioFormat: int getEncoding()>();

        $i10 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i9);

        $i11 = $i8 * $i10;

        r0.<android.media.AudioRecord$Builder: int mBufferSizeInBytes> = $i11;

     label09:
        r51 = new android.media.AudioRecord;

        $r4 = r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes>;

        $r3 = r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat>;

        $i6 = r0.<android.media.AudioRecord$Builder: int mBufferSizeInBytes>;

        $i5 = r0.<android.media.AudioRecord$Builder: int mSessionId>;

        specialinvoke r51.<android.media.AudioRecord: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int)>($r4, $r3, $i6, $i5);

        $i7 = virtualinvoke r51.<android.media.AudioRecord: int getState()>();

        if $i7 == 0 goto label11;

     label10:
        return r51;

     label11:
        r52 = new java.lang.UnsupportedOperationException;

        specialinvoke r52.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot create AudioRecord");

        throw r52;

     label12:
        $r31 := @caughtexception;

        r53 = new java.lang.UnsupportedOperationException;

        r54 = (java.lang.IllegalArgumentException) $r31;

        $r33 = virtualinvoke r54.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke r53.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r33);

        throw r53;

        catch java.lang.IllegalArgumentException from label08 to label09 with label12;
        catch java.lang.IllegalArgumentException from label09 to label10 with label12;
        catch java.lang.IllegalArgumentException from label11 to label12 with label12;
    }

    public android.media.AudioRecord$Builder setAudioAttributes(android.media.AudioAttributes) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord$Builder r0;
        android.media.AudioAttributes r1;
        java.lang.IllegalArgumentException $r2, $r3;
        int $i0;

        r0 := @this: android.media.AudioRecord$Builder;

        r1 := @parameter0: android.media.AudioAttributes;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<android.media.AudioAttributes: int getCapturePreset()>();

        if $i0 == -1 goto label1;

        r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes> = r1;

        return r0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No valid capture preset in AudioAttributes argument");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes argument");

        throw $r2;
    }

    public android.media.AudioRecord$Builder setAudioFormat(android.media.AudioFormat) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord$Builder r0;
        android.media.AudioFormat r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.AudioRecord$Builder;

        r1 := @parameter0: android.media.AudioFormat;

        if r1 == null goto label1;

        r0.<android.media.AudioRecord$Builder: android.media.AudioFormat mFormat> = r1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFormat argument");

        throw $r2;
    }

    public android.media.AudioRecord$Builder setAudioPlaybackCaptureConfig(android.media.AudioPlaybackCaptureConfiguration)
    {
        android.media.AudioRecord$Builder r0;
        android.media.AudioPlaybackCaptureConfiguration r1;
        android.media.AudioAttributes $r3;
        boolean z0;

        r0 := @this: android.media.AudioRecord$Builder;

        r1 := @parameter0: android.media.AudioPlaybackCaptureConfiguration;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Illegal null AudioPlaybackCaptureConfiguration argument");

        $r3 = r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes>;

        if $r3 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Cannot both set audio source and set playback capture config");

        r0.<android.media.AudioRecord$Builder: android.media.AudioPlaybackCaptureConfiguration mAudioPlaybackCaptureConfiguration> = r1;

        return r0;
    }

    public android.media.AudioRecord$Builder setAudioSource(int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord$Builder r0;
        int i0, $i1;
        android.media.AudioPlaybackCaptureConfiguration $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;
        android.media.AudioAttributes$Builder $r8, $r9;
        android.media.AudioAttributes $r10;
        boolean z0;

        r0 := @this: android.media.AudioRecord$Builder;

        i0 := @parameter0: int;

        $r2 = r0.<android.media.AudioRecord$Builder: android.media.AudioPlaybackCaptureConfiguration mAudioPlaybackCaptureConfiguration>;

        if $r2 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Cannot both set audio source and set playback capture config");

        if i0 < 0 goto label3;

        $i1 = staticinvoke <android.media.MediaRecorder: int getAudioSourceMax()>();

        if i0 > $i1 goto label3;

        $r8 = new android.media.AudioAttributes$Builder;

        specialinvoke $r8.<android.media.AudioAttributes$Builder: void <init>()>();

        $r9 = virtualinvoke $r8.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>(i0);

        $r10 = virtualinvoke $r9.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        r0.<android.media.AudioRecord$Builder: android.media.AudioAttributes mAttributes> = $r10;

        return r0;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio source ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public android.media.AudioRecord$Builder setBufferSizeInBytes(int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord$Builder r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.media.AudioRecord$Builder;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        r0.<android.media.AudioRecord$Builder: int mBufferSizeInBytes> = i0;

        return r0;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid buffer size ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public android.media.AudioRecord$Builder setPrivacySensitive(boolean)
    {
        android.media.AudioRecord$Builder r0;
        boolean z0;
        int i0;

        r0 := @this: android.media.AudioRecord$Builder;

        z0 := @parameter0: boolean;

        i0 = (int) z0;

        r0.<android.media.AudioRecord$Builder: int mPrivacySensitive> = i0;

        return r0;
    }

    public android.media.AudioRecord$Builder setSessionId(int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord$Builder r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.media.AudioRecord$Builder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        r0.<android.media.AudioRecord$Builder: int mSessionId> = i0;

        return r0;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid session ID ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static void <clinit>()
    {
        <android.media.AudioRecord$Builder: int PRIVACY_SENSITIVE_ENABLED> = 1;

        <android.media.AudioRecord$Builder: int PRIVACY_SENSITIVE_DISABLED> = 0;

        <android.media.AudioRecord$Builder: int PRIVACY_SENSITIVE_DEFAULT> = -1;

        <android.media.AudioRecord$Builder: java.lang.String ERROR_MESSAGE_SOURCE_MISMATCH> = "Cannot both set audio source and set playback capture config";

        return;
    }
}
